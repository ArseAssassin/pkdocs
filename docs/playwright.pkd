---
name: Playwright
slug: playwright
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  © 2024 Microsoft
  Licensed under the Apache License, Version 2.0.
  https://playwright.dev/docs/intro
homepage: https://playwright.dev/

---
- name: Accessibility
  id: api/class-accessibility
  summary: The Accessibility class provides methods for inspecting Chromium's accessibility tree
  description: "# Accessibility\n\nThe Accessibility class provides methods for inspecting Chromium's accessibility tree. The accessibility tree is used by assistive technology such as [screen readers](https://en.wikipedia.org/wiki/Screen_reader) or [switches](https://en.wikipedia.org/wiki/Switch_access).\n\nAccessibility is a very platform-specific thing. On different platforms, there are different screen readers that might have wildly different output.\n\nRendering engines of Chromium, Firefox and WebKit have a concept of \"accessibility tree\", which is then translated into different platform-specific APIs. Accessibility namespace gives access to this Accessibility Tree.\n\nMost of the accessibility tree gets filtered out when converting from internal browser AX Tree to Platform-specific AX-Tree or by assistive technologies themselves. By default, Playwright tries to approximate this filtering, exposing only the \"interesting\" nodes of the tree.\n\n## Deprecated[​](#deprecated \"Direct link to Deprecated\")\n\n### snapshot[​](#accessibility-snapshot \"Direct link to snapshot\")\n\nAdded before v1.9\n\n> Deprecated\n>\n> This method is deprecated. Please use other libraries such as [Axe](https://www.deque.com/axe/) if you need to test page accessibility. See our Node.js [guide](../accessibility-testing) for integration with Axe.\n\nCaptures the current state of the accessibility tree. The returned object represents the root accessible node of the page.\n\n> note\n>\n> The Chromium accessibility tree contains nodes that go unused on most platforms and by most screen readers. Playwright will discard them as well for an easier to process tree, unless `interestingOnly` is set to `false`.\n\n**Usage**\n\nAn example of dumping the entire accessibility tree:\n\n``` javascript\nconst snapshot = await page.accessibility.snapshot();\nconsole.log(snapshot);\n```\n\nAn example of logging the focused node's name:\n\n``` javascript\nconst snapshot = await page.accessibility.snapshot();\nconst node = findFocusedNode(snapshot);\nconsole.log(node && node.name);\n\nfunction findFocusedNode(node) {\n  if (node.focused)\n    return node;\n  for (const child of node.children || []) {\n    const foundNode = findFocusedNode(child);\n    if (foundNode)\n      return foundNode;\n  }\n  return null;\n}\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `interestingOnly` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Prune uninteresting nodes from the tree. Defaults to `true`.\n\n  - `root` [ElementHandle](class-elementhandle \"ElementHandle\") *(optional)*\n\n    The root DOM element for the snapshot. Defaults to the whole page.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `role` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    The [role](https://www.w3.org/TR/wai-aria/#usage_intro).\n\n  - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    A human readable name for the node.\n\n  - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    The current value of the node, if applicable.\n\n  - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    An additional human readable description of the node, if applicable.\n\n  - `keyshortcuts` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Keyboard shortcuts associated with this node, if applicable.\n\n  - `roledescription` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    A human readable alternative to the role, if applicable.\n\n  - `valuetext` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    A description of the current value, if applicable.\n\n  - `disabled` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    Whether the node is disabled, if applicable.\n\n  - `expanded` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    Whether the node is expanded or collapsed, if applicable.\n\n  - `focused` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    Whether the node is focused, if applicable.\n\n  - `modal` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    Whether the node is [modal](https://en.wikipedia.org/wiki/Modal_window), if applicable.\n\n  - `multiline` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    Whether the node text input supports multiline, if applicable.\n\n  - `multiselectable` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    Whether more than one child can be selected, if applicable.\n\n  - `readonly` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    Whether the node is read only, if applicable.\n\n  - `required` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    Whether the node is required, if applicable.\n\n  - `selected` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    Whether the node is selected in its parent node, if applicable.\n\n  - `checked` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") \\| \"mixed\"\n\n    Whether the checkbox is checked, or \"mixed\", if applicable.\n\n  - `pressed` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") \\| \"mixed\"\n\n    Whether the toggle button is checked, or \"mixed\", if applicable.\n\n  - `level` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    The level of a heading, if applicable.\n\n  - `valuemin` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    The minimum value in a node, if applicable.\n\n  - `valuemax` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    The maximum value in a node, if applicable.\n\n  - `autocomplete` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    What kind of autocomplete is supported by a control, if applicable.\n\n  - `haspopup` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    What kind of popup is currently being shown for a node, if applicable.\n\n  - `invalid` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Whether and in what way this node's value is invalid, if applicable.\n\n  - `orientation` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Whether the node is oriented horizontally or vertically, if applicable.\n\n  - `children` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n    Child nodes, if any, if applicable.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-accessibility](https://playwright.dev/docs/api/class-accessibility)"
- name: Accessibility testing
  id: accessibility-testing
  summary: Playwright can be used to test your application for many types of accessibility issues
  description: "# Accessibility testing\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright can be used to test your application for many types of accessibility issues.\n\nA few examples of problems this can catch include:\n\n- Text that would be hard to read for users with vision impairments due to poor color contrast with the background behind it\n- UI controls and form elements without labels that a screen reader could identify\n- Interactive elements with duplicate IDs which can confuse assistive technologies\n\nThe following examples rely on the [`@axe-core/playwright`](https://npmjs.org/@axe-core/playwright) package which adds support for running the [axe accessibility testing engine](https://www.deque.com/axe/) as part of your Playwright tests.\n\n> Disclaimer\n>\n> Automated accessibility tests can detect some common accessibility problems such as missing or invalid properties. But many accessibility problems can only be discovered through manual testing. We recommend using a combination of automated testing, manual accessibility assessments, and inclusive user testing. For manual assessments, we recommend [Accessibility Insights for Web](https://accessibilityinsights.io/docs/web/overview/?referrer=playwright-accessibility-testing-js), a free and open source dev tool that walks you through assessing a website for [WCAG 2.1 AA](https://www.w3.org/WAI/WCAG21/quickref/?currentsidebar=%23col_customize&levels=aaa) coverage.\n\n## Example accessibility tests[​](#example-accessibility-tests \"Direct link to Example accessibility tests\")\n\nAccessibility tests work just like any other Playwright test. You can either create separate test cases for them, or integrate accessibility scans and assertions into your existing test cases.\n\nThe following examples demonstrate a few basic accessibility testing scenarios.\n\n### Scanning an entire page[​](#scanning-an-entire-page \"Direct link to Scanning an entire page\")\n\nThis example demonstrates how to test an entire page for automatically detectable accessibility violations. The test:\n\n1.  Imports the `@axe-core/playwright` package\n2.  Uses normal Playwright Test syntax to define a test case\n3.  Uses normal Playwright syntax to navigate to the page under test\n4.  Awaits `AxeBuilder.analyze()` to run the accessibility scan against the page\n5.  Uses normal Playwright Test [assertions](test-assertions) to verify that there are no violations in the returned scan results\n\n- TypeScript\n- JavaScript\n\n``` javascript\nimport { test, expect } from '@playwright/test';\nimport AxeBuilder from '@axe-core/playwright'; // 1\n\ntest.describe('homepage', () => { // 2\n  test('should not have any automatically detectable accessibility issues', async ({ page }) => {\n    await page.goto('https://your-site.com/'); // 3\n\n    const accessibilityScanResults = await new AxeBuilder({ page }).analyze(); // 4\n\n    expect(accessibilityScanResults.violations).toEqual([]); // 5\n  });\n});\n```\n\n``` javascript\nconst { test, expect } = require('@playwright/test');\nconst AxeBuilder = require('@axe-core/playwright').default; // 1\n\ntest.describe('homepage', () => { // 2\n  test('should not have any automatically detectable accessibility issues', async ({ page }) => {\n    await page.goto('https://your-site.com/'); // 3\n\n    const accessibilityScanResults = await new AxeBuilder({ page }).analyze(); // 4\n\n    expect(accessibilityScanResults.violations).toEqual([]); // 5\n  });\n});\n```\n\n### Configuring axe to scan a specific part of a page[​](#configuring-axe-to-scan-a-specific-part-of-a-page \"Direct link to Configuring axe to scan a specific part of a page\")\n\n`@axe-core/playwright` supports many configuration options for axe. You can specify these options by using a Builder pattern with the `AxeBuilder` class.\n\nFor example, you can use [`AxeBuilder.include()`](https://github.com/dequelabs/axe-core-npm/blob/develop/packages/playwright/README.md#axebuilderincludeselector-string--string) to constrain an accessibility scan to only run against one specific part of a page.\n\n`AxeBuilder.analyze()` will scan the page *in its current state* when you call it. To scan parts of a page that are revealed based on UI interactions, use [Locators](locators) to interact with the page before invoking `analyze()`:\n\n``` javascript\ntest('navigation menu should not have automatically detectable accessibility violations', async ({\n  page,\n}) => {\n  await page.goto('https://your-site.com/');\n\n  await page.getByRole('button', { name: 'Navigation Menu' }).click();\n\n  // It is important to waitFor() the page to be in the desired\n  // state *before* running analyze(). Otherwise, axe might not\n  // find all the elements your test expects it to scan.\n  await page.locator('#navigation-menu-flyout').waitFor();\n\n  const accessibilityScanResults = await new AxeBuilder({ page })\n      .include('#navigation-menu-flyout')\n      .analyze();\n\n  expect(accessibilityScanResults.violations).toEqual([]);\n});\n```\n\n### Scanning for WCAG violations[​](#scanning-for-wcag-violations \"Direct link to Scanning for WCAG violations\")\n\nBy default, axe checks against a wide variety of accessibility rules. Some of these rules correspond to specific success criteria from the [Web Content Accessibility Guidelines (WCAG)](https://www.w3.org/TR/WCAG21/), and others are \"best practice\" rules that are not specifically required by any WCAG criterion.\n\nYou can constrain an accessibility scan to only run those rules which are \"tagged\" as corresponding to specific WCAG success criteria by using [`AxeBuilder.withTags()`](https://github.com/dequelabs/axe-core-npm/blob/develop/packages/playwright/README.md#axebuilderwithtagstags-stringarray). For example, [Accessibility Insights for Web's Automated Checks](https://accessibilityinsights.io/docs/web/getstarted/fastpass/?referrer=playwright-accessibility-testing-js) only include axe rules that test for violations of WCAG A and AA success criteria; to match that behavior, you would use the tags `wcag2a`, `wcag2aa`, `wcag21a`, and `wcag21aa`.\n\nNote that automated testing cannot detect all types of WCAG violations.\n\n``` javascript\ntest('should not have any automatically detectable WCAG A or AA violations', async ({ page }) => {\n  await page.goto('https://your-site.com/');\n\n  const accessibilityScanResults = await new AxeBuilder({ page })\n      .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])\n      .analyze();\n\n  expect(accessibilityScanResults.violations).toEqual([]);\n});\n```\n\nYou can find a complete listing of the rule tags axe-core supports in [the \"Axe-core Tags\" section of the axe API documentation](https://www.deque.com/axe/core-documentation/api-documentation/#axe-core-tags).\n\n## Handling known issues[​](#handling-known-issues \"Direct link to Handling known issues\")\n\nA common question when adding accessibility tests to an application is \"how do I suppress known violations?\" The following examples demonstrate a few techniques you can use.\n\n### Excluding individual elements from a scan[​](#excluding-individual-elements-from-a-scan \"Direct link to Excluding individual elements from a scan\")\n\nIf your application contains a few specific elements with known issues, you can use [`AxeBuilder.exclude()`](https://github.com/dequelabs/axe-core-npm/blob/develop/packages/playwright/README.md#axebuilderexcludeselector-string--string) to exclude them from being scanned until you're able to fix the issues.\n\nThis is usually the simplest option, but it has some important downsides:\n\n- `exclude()` will exclude the specified elements *and all of their descendants*. Avoid using it with components that contain many children.\n- `exclude()` will prevent *all* rules from running against the specified elements, not just the rules corresponding to known issues.\n\nHere is an example of excluding one element from being scanned in one specific test:\n\n``` javascript\ntest('should not have any accessibility violations outside of elements with known issues', async ({\n  page,\n}) => {\n  await page.goto('https://your-site.com/page-with-known-issues');\n\n  const accessibilityScanResults = await new AxeBuilder({ page })\n      .exclude('#element-with-known-issue')\n      .analyze();\n\n  expect(accessibilityScanResults.violations).toEqual([]);\n});\n```\n\nIf the element in question is used repeatedly in many pages, consider [using a test fixture](#using-a-test-fixture-for-common-axe-configuration) to reuse the same `AxeBuilder` configuration across multiple tests.\n\n### Disabling individual scan rules[​](#disabling-individual-scan-rules \"Direct link to Disabling individual scan rules\")\n\nIf your application contains many different preexisting violations of a specific rule, you can use [`AxeBuilder.disableRules()`](https://github.com/dequelabs/axe-core-npm/blob/develop/packages/playwright/README.md#axebuilderdisablerulesrules-stringarray) to temporarily disable individual rules until you're able to fix the issues.\n\nYou can find the rule IDs to pass to `disableRules()` in the `id` property of the violations you want to suppress. A [complete list of axe's rules](https://github.com/dequelabs/axe-core/blob/master/doc/rule-descriptions.md) can be found in `axe-core`'s documentation.\n\n``` javascript\ntest('should not have any accessibility violations outside of rules with known issues', async ({\n  page,\n}) => {\n  await page.goto('https://your-site.com/page-with-known-issues');\n\n  const accessibilityScanResults = await new AxeBuilder({ page })\n      .disableRules(['duplicate-id'])\n      .analyze();\n\n  expect(accessibilityScanResults.violations).toEqual([]);\n});\n```\n\n### Using snapshots to allow specific known issues[​](#using-snapshots-to-allow-specific-known-issues \"Direct link to Using snapshots to allow specific known issues\")\n\nIf you would like to allow for a more granular set of known issues, you can use [Snapshots](test-snapshots) to verify that a set of preexisting violations has not changed. This approach avoids the downsides of using `AxeBuilder.exclude()` at the cost of slightly more complexity and fragility.\n\nDo not use a snapshot of the entire `accessibilityScanResults.violations` array. It contains implementation details of the elements in question, such as a snippet of their rendered HTML; if you include these in your snapshots, it will make your tests prone to breaking every time one of the components in question changes for an unrelated reason:\n\n``` javascript\n// Don't do this! This is fragile.\nexpect(accessibilityScanResults.violations).toMatchSnapshot();\n```\n\nInstead, create a *fingerprint* of the violation(s) in question that contains only enough information to uniquely identify the issue, and use a snapshot of the fingerprint:\n\n``` javascript\n// This is less fragile than snapshotting the entire violations array.\nexpect(violationFingerprints(accessibilityScanResults)).toMatchSnapshot();\n\n// my-test-utils.js\nfunction violationFingerprints(accessibilityScanResults) {\n  const violationFingerprints = accessibilityScanResults.violations.map(violation => ({\n    rule: violation.id,\n    // These are CSS selectors which uniquely identify each element with\n    // a violation of the rule in question.\n    targets: violation.nodes.map(node => node.target),\n  }));\n\n  return JSON.stringify(violationFingerprints, null, 2);\n}\n```\n\n## Exporting scan results as a test attachment[​](#exporting-scan-results-as-a-test-attachment \"Direct link to Exporting scan results as a test attachment\")\n\nMost accessibility tests are primarily concerned with the `violations` property of the axe scan results. However, the scan results contain more than just `violations`. For example, the results also contain information about rules which passed and about elements which axe found to have inconclusive results for some rules. This information can be useful for debugging tests that aren't detecting all the violations you expect them to.\n\nTo include *all* of the scan results as part of your test results for debugging purposes, you can add the scan results as a test attachment with [`testInfo.attach()`](api/class-testinfo#test-info-attach). [Reporters](test-reporters) can then embed or link the full results as part of your test output.\n\nThe following example demonstrates attaching scan results to a test:\n\n``` javascript\ntest('example with attachment', async ({ page }, testInfo) => {\n  await page.goto('https://your-site.com/');\n\n  const accessibilityScanResults = await new AxeBuilder({ page }).analyze();\n\n  await testInfo.attach('accessibility-scan-results', {\n    body: JSON.stringify(accessibilityScanResults, null, 2),\n    contentType: 'application/json'\n  });\n\n  expect(accessibilityScanResults.violations).toEqual([]);\n});\n```\n\n## Using a test fixture for common axe configuration[​](#using-a-test-fixture-for-common-axe-configuration \"Direct link to Using a test fixture for common axe configuration\")\n\n[Test fixtures](test-fixtures) are a good way to share common `AxeBuilder` configuration across many tests. Some scenarios where this might be useful include:\n\n- Using a common set of rules among all of your tests\n- Suppressing a known violation in a common element which appears in many different pages\n- Attaching standalone accessibility reports consistently for many scans\n\nThe following example demonstrates creating and using a test fixture that covers each of those scenarios.\n\n### Creating a fixture[​](#creating-a-fixture \"Direct link to Creating a fixture\")\n\nThis example fixture creates an `AxeBuilder` object which is pre-configured with shared `withTags()` and `exclude()` configuration.\n\n- TypeScript\n- JavaScript\n\n``` javascript\nimport { test as base } from '@playwright/test';\nimport AxeBuilder from '@axe-core/playwright';\n\ntype AxeFixture = {\n  makeAxeBuilder: () => AxeBuilder;\n};\n\n// Extend base test by providing \"makeAxeBuilder\"\n//\n// This new \"test\" can be used in multiple test files, and each of them will get\n// a consistently configured AxeBuilder instance.\nexport const test = base.extend<AxeFixture>({\n  makeAxeBuilder: async ({ page }, use, testInfo) => {\n    const makeAxeBuilder = () => new AxeBuilder({ page })\n        .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])\n        .exclude('#commonly-reused-element-with-known-issue');\n\n    await use(makeAxeBuilder);\n  }\n});\nexport { expect } from '@playwright/test';\n```\n\n``` javascript\n// axe-test.js\nconst base = require('@playwright/test');\nconst AxeBuilder = require('@axe-core/playwright').default;\n\n// Extend base test by providing \"makeAxeBuilder\"\n//\n// This new \"test\" can be used in multiple test files, and each of them will get\n// a consistently configured AxeBuilder instance.\nexports.test = base.test.extend({\n  makeAxeBuilder: async ({ page }, use, testInfo) => {\n    const makeAxeBuilder = () => new AxeBuilder({ page })\n        .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])\n        .exclude('#commonly-reused-element-with-known-issue');\n\n    await use(makeAxeBuilder);\n  }\n});\nexports.expect = base.expect;\n```\n\n### Using a fixture[​](#using-a-fixture \"Direct link to Using a fixture\")\n\nTo use the fixture, replace the earlier examples' `new AxeBuilder({ page })` with the newly defined `makeAxeBuilder` fixture:\n\n``` javascript\nconst { test, expect } = require('./axe-test');\n\ntest('example using custom fixture', async ({ page, makeAxeBuilder }) => {\n  await page.goto('https://your-site.com/');\n\n  const accessibilityScanResults = await makeAxeBuilder()\n      // Automatically uses the shared AxeBuilder configuration,\n      // but supports additional test-specific configuration too\n      .include('#specific-element-under-test')\n      .analyze();\n\n  expect(accessibilityScanResults.violations).toEqual([]);\n});\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/accessibility-testing](https://playwright.dev/docs/accessibility-testing)"
- name: accessibility.snapshot
  id: api/class-accessibility#accessibility-snapshot
  summary: This method is deprecated
  belongs_to: Accessibility
  description: "### snapshot[​](#accessibility-snapshot \"Direct link to snapshot\")\n\nAdded before v1.9\n\n> Deprecated\n>\n> This method is deprecated. Please use other libraries such as [Axe](https://www.deque.com/axe/) if you need to test page accessibility. See our Node.js [guide](../accessibility-testing) for integration with Axe.\n\nCaptures the current state of the accessibility tree. The returned object represents the root accessible node of the page.\n\n> note\n>\n> The Chromium accessibility tree contains nodes that go unused on most platforms and by most screen readers. Playwright will discard them as well for an easier to process tree, unless `interestingOnly` is set to `false`.\n\n**Usage**\n\nAn example of dumping the entire accessibility tree:\n\n``` javascript\nconst snapshot = await page.accessibility.snapshot();\nconsole.log(snapshot);\n```\n\nAn example of logging the focused node's name:\n\n``` javascript\nconst snapshot = await page.accessibility.snapshot();\nconst node = findFocusedNode(snapshot);\nconsole.log(node && node.name);\n\nfunction findFocusedNode(node) {\n  if (node.focused)\n    return node;\n  for (const child of node.children || []) {\n    const foundNode = findFocusedNode(child);\n    if (foundNode)\n      return foundNode;\n  }\n  return null;\n}\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `interestingOnly` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Prune uninteresting nodes from the tree. Defaults to `true`.\n\n  - `root` [ElementHandle](class-elementhandle \"ElementHandle\") *(optional)*\n\n    The root DOM element for the snapshot. Defaults to the whole page.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `role`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    The [role](https://www.w3.org/TR/wai-aria/#usage_intro).\n\n  - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    A human readable name for the node.\n\n  - `value`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    The current value of the node, if applicable.\n\n  - `description`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    An additional human readable description of the node, if applicable.\n\n  - `keyshortcuts`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Keyboard shortcuts associated with this node, if applicable.\n\n  - `roledescription`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    A human readable alternative to the role, if applicable.\n\n  - `valuetext`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    A description of the current value, if applicable.\n\n  - `disabled`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    Whether the node is disabled, if applicable.\n\n  - `expanded`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    Whether the node is expanded or collapsed, if applicable.\n\n  - `focused`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    Whether the node is focused, if applicable.\n\n  - `modal`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    Whether the node is [modal](https://en.wikipedia.org/wiki/Modal_window), if applicable.\n\n  - `multiline`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    Whether the node text input supports multiline, if applicable.\n\n  - `multiselectable`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    Whether more than one child can be selected, if applicable.\n\n  - `readonly`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    Whether the node is read only, if applicable.\n\n  - `required`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    Whether the node is required, if applicable.\n\n  - `selected`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    Whether the node is selected in its parent node, if applicable.\n\n  - `checked`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") \\| \"mixed\"\n\n    Whether the checkbox is checked, or \"mixed\", if applicable.\n\n  - `pressed`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") \\| \"mixed\"\n\n    Whether the toggle button is checked, or \"mixed\", if applicable.\n\n  - `level`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    The level of a heading, if applicable.\n\n  - `valuemin`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    The minimum value in a node, if applicable.\n\n  - `valuemax`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    The maximum value in a node, if applicable.\n\n  - `autocomplete`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    What kind of autocomplete is supported by a control, if applicable.\n\n  - `haspopup`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    What kind of popup is currently being shown for a node, if applicable.\n\n  - `invalid`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Whether and in what way this node's value is invalid, if applicable.\n\n  - `orientation`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Whether the node is oriented horizontally or vertically, if applicable.\n\n  - `children`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n    Child nodes, if any, if applicable.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-accessibility](https://playwright.dev/docs/api/class-accessibility)"
- name: Actions
  id: input
  summary: Playwright can interact with HTML Input elements such as text inputs, checkboxes, radio buttons, select options, mouse clicks, type characters, keys and shortcuts as well as upload files and focus elements
  description: "# Actions\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright can interact with HTML Input elements such as text inputs, checkboxes, radio buttons, select options, mouse clicks, type characters, keys and shortcuts as well as upload files and focus elements.\n\n## Text input[​](#text-input \"Direct link to Text input\")\n\nUsing [locator.fill()](api/class-locator#locator-fill) is the easiest way to fill out the form fields. It focuses the element and triggers an `input` event with the entered text. It works for `<input>`, `<textarea>` and `[contenteditable]` elements.\n\n``` javascript\n// Text input\nawait page.getByRole('textbox').fill('Peter');\n\n// Date input\nawait page.getByLabel('Birth date').fill('2020-02-02');\n\n// Time input\nawait page.getByLabel('Appointment time').fill('13:15');\n\n// Local datetime input\nawait page.getByLabel('Local time').fill('2020-03-02T05:15');\n```\n\n## Checkboxes and radio buttons[​](#checkboxes-and-radio-buttons \"Direct link to Checkboxes and radio buttons\")\n\nUsing [locator.setChecked()](api/class-locator#locator-set-checked) is the easiest way to check and uncheck a checkbox or a radio button. This method can be used with `input[type=checkbox]`, `input[type=radio]` and `[role=checkbox]` elements.\n\n``` javascript\n// Check the checkbox\nawait page.getByLabel('I agree to the terms above').check();\n\n// Assert the checked state\nexpect(page.getByLabel('Subscribe to newsletter')).toBeChecked();\n\n// Select the radio button\nawait page.getByLabel('XL').check();\n```\n\n## Select options[​](#select-options \"Direct link to Select options\")\n\nSelects one or multiple options in the `<select>` element with [locator.selectOption()](api/class-locator#locator-select-option). You can specify option `value`, or `label` to select. Multiple options can be selected.\n\n``` javascript\n// Single selection matching the value or label\nawait page.getByLabel('Choose a color').selectOption('blue');\n\n// Single selection matching the label\nawait page.getByLabel('Choose a color').selectOption({ label: 'Blue' });\n\n// Multiple selected items\nawait page.getByLabel('Choose multiple colors').selectOption(['red', 'green', 'blue']);\n```\n\n## Mouse click[​](#mouse-click \"Direct link to Mouse click\")\n\nPerforms a simple human click.\n\n``` javascript\n// Generic click\nawait page.getByRole('button').click();\n\n// Double click\nawait page.getByText('Item').dblclick();\n\n// Right click\nawait page.getByText('Item').click({ button: 'right' });\n\n// Shift + click\nawait page.getByText('Item').click({ modifiers: ['Shift'] });\n\n// Ctrl + click or Windows and Linux\n// Meta + click on macOS\nawait page.getByText('Item').click({ modifiers: ['ControlOrMeta'] });\n\n// Hover over element\nawait page.getByText('Item').hover();\n\n// Click the top left corner\nawait page.getByText('Item').click({ position: { x: 0, y: 0 } });\n```\n\nUnder the hood, this and other pointer-related methods:\n\n- wait for element with given selector to be in DOM\n- wait for it to become displayed, i.e. not empty, no `display:none`, no `visibility:hidden`\n- wait for it to stop moving, for example, until css transition finishes\n- scroll the element into view\n- wait for it to receive pointer events at the action point, for example, waits until element becomes non-obscured by other elements\n- retry if the element is detached during any of the above checks\n\n#### Forcing the click[​](#forcing-the-click \"Direct link to Forcing the click\")\n\nSometimes, apps use non-trivial logic where hovering the element overlays it with another element that intercepts the click. This behavior is indistinguishable from a bug where element gets covered and the click is dispatched elsewhere. If you know this is taking place, you can bypass the [actionability](actionability) checks and force the click:\n\n``` javascript\nawait page.getByRole('button').click({ force: true });\n```\n\n#### Programmatic click[​](#programmatic-click \"Direct link to Programmatic click\")\n\nIf you are not interested in testing your app under the real conditions and want to simulate the click by any means possible, you can trigger the [`HTMLElement.click()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click) behavior via simply dispatching a click event on the element with [locator.dispatchEvent()](api/class-locator#locator-dispatch-event):\n\n``` javascript\nawait page.getByRole('button').dispatchEvent('click');\n```\n\n## Type characters[​](#type-characters \"Direct link to Type characters\")\n\n> caution\n>\n> Most of the time, you should input text with [locator.fill()](api/class-locator#locator-fill). See the [Text input](#text-input) section above. You only need to type characters if there is special keyboard handling on the page.\n\nType into the field character by character, as if it was a user with a real keyboard with [locator.pressSequentially()](api/class-locator#locator-press-sequentially).\n\n``` javascript\n// Press keys one by one\nawait page.locator('#area').pressSequentially('Hello World!');\n```\n\nThis method will emit all the necessary keyboard events, with all the `keydown`, `keyup`, `keypress` events in place. You can even specify the optional `delay` between the key presses to simulate real user behavior.\n\n## Keys and shortcuts[​](#keys-and-shortcuts \"Direct link to Keys and shortcuts\")\n\n``` javascript\n// Hit Enter\nawait page.getByText('Submit').press('Enter');\n\n// Dispatch Control+Right\nawait page.getByRole('textbox').press('Control+ArrowRight');\n\n// Press $ sign on keyboard\nawait page.getByRole('textbox').press('$');\n```\n\nThe [locator.press()](api/class-locator#locator-press) method focuses the selected element and produces a single keystroke. It accepts the logical key names that are emitted in the [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) property of the keyboard events:\n\n``` javascript\nBackquote, Minus, Equal, Backslash, Backspace, Tab, Delete, Escape,\nArrowDown, End, Enter, Home, Insert, PageDown, PageUp, ArrowRight,\nArrowUp, F1 - F12, Digit0 - Digit9, KeyA - KeyZ, etc.\n```\n\n- You can alternatively specify a single character you'd like to produce such as `\"a\"` or `\"#\"`.\n- Following modification shortcuts are also supported: `Shift, Control, Alt, Meta`.\n\nSimple version produces a single character. This character is case-sensitive, so `\"a\"` and `\"A\"` will produce different results.\n\n``` javascript\n// <input id=name>\nawait page.locator('#name').press('Shift+A');\n\n// <input id=name>\nawait page.locator('#name').press('Shift+ArrowLeft');\n```\n\nShortcuts such as `\"Control+o\"` or `\"Control+Shift+T\"` are supported as well. When specified with the modifier, modifier is pressed and being held while the subsequent key is being pressed.\n\nNote that you still need to specify the capital `A` in `Shift-A` to produce the capital character. `Shift-a` produces a lower-case one as if you had the `CapsLock` toggled.\n\n## Upload files[​](#upload-files \"Direct link to Upload files\")\n\nYou can select input files for upload using the [locator.setInputFiles()](api/class-locator#locator-set-input-files) method. It expects first argument to point to an [input element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) with the type `\"file\"`. Multiple files can be passed in the array. If some of the file paths are relative, they are resolved relative to the current working directory. Empty array clears the selected files.\n\n``` javascript\n// Select one file\nawait page.getByLabel('Upload file').setInputFiles(path.join(__dirname, 'myfile.pdf'));\n\n// Select multiple files\nawait page.getByLabel('Upload files').setInputFiles([\n  path.join(__dirname, 'file1.txt'),\n  path.join(__dirname, 'file2.txt'),\n]);\n\n// Select a directory\nawait page.getByLabel('Upload directory').setInputFiles(path.join(__dirname, 'mydir'));\n\n// Remove all the selected files\nawait page.getByLabel('Upload file').setInputFiles([]);\n\n// Upload buffer from memory\nawait page.getByLabel('Upload file').setInputFiles({\n  name: 'file.txt',\n  mimeType: 'text/plain',\n  buffer: Buffer.from('this is test')\n});\n```\n\nIf you don't have input element in hand (it is created dynamically), you can handle the [page.on('filechooser')](api/class-page#page-event-file-chooser) event or use a corresponding waiting method upon your action:\n\n``` javascript\n// Start waiting for file chooser before clicking. Note no await.\nconst fileChooserPromise = page.waitForEvent('filechooser');\nawait page.getByLabel('Upload file').click();\nconst fileChooser = await fileChooserPromise;\nawait fileChooser.setFiles(path.join(__dirname, 'myfile.pdf'));\n```\n\n## Focus element[​](#focus-element \"Direct link to Focus element\")\n\nFor the dynamic pages that handle focus events, you can focus the given element with [locator.focus()](api/class-locator#locator-focus).\n\n``` javascript\nawait page.getByLabel('Password').focus();\n```\n\n## Drag and Drop[​](#drag-and-drop \"Direct link to Drag and Drop\")\n\nYou can perform drag&drop operation with [locator.dragTo()](api/class-locator#locator-drag-to). This method will:\n\n- Hover the element that will be dragged.\n- Press left mouse button.\n- Move mouse to the element that will receive the drop.\n- Release left mouse button.\n\n``` javascript\nawait page.locator('#item-to-be-dragged').dragTo(page.locator('#item-to-drop-at'));\n```\n\n### Dragging manually[​](#dragging-manually \"Direct link to Dragging manually\")\n\nIf you want precise control over the drag operation, use lower-level methods like [locator.hover()](api/class-locator#locator-hover), [mouse.down()](api/class-mouse#mouse-down), [mouse.move()](api/class-mouse#mouse-move) and [mouse.up()](api/class-mouse#mouse-up).\n\n``` javascript\nawait page.locator('#item-to-be-dragged').hover();\nawait page.mouse.down();\nawait page.locator('#item-to-drop-at').hover();\nawait page.mouse.up();\n```\n\n> note\n>\n> If your page relies on the `dragover` event being dispatched, you need at least two mouse moves to trigger it in all browsers. To reliably issue the second mouse move, repeat your [mouse.move()](api/class-mouse#mouse-move) or [locator.hover()](api/class-locator#locator-hover) twice. The sequence of operations would be: hover the drag element, mouse down, hover the drop element, hover the drop element second time, mouse up.\n\n## Scrolling[​](#scrolling \"Direct link to Scrolling\")\n\nMost of the time, Playwright will automatically scroll for you before doing any actions. Therefore, you do not need to scroll explicitly.\n\n``` javascript\n// Scrolls automatically so that button is visible\nawait page.getByRole('button').click();\n```\n\nHowever, in rare cases you might need to manually scroll. For example, you might want to force an \"infinite list\" to load more elements, or position the page for a specific screenshot. In such a case, the most reliable way is to find an element that you want to make visible at the bottom, and scroll it into view.\n\n``` javascript\n// Scroll the footer into view, forcing an \"infinite list\" to load more content\nawait page.getByText('Footer text').scrollIntoViewIfNeeded();\n```\n\nIf you would like to control the scrolling more precisely, use [mouse.wheel()](api/class-mouse#mouse-wheel) or [locator.evaluate()](api/class-locator#locator-evaluate):\n\n``` javascript\n// Position the mouse and scroll with the mouse wheel\nawait page.getByTestId('scrolling-container').hover();\nawait page.mouse.wheel(0, 10);\n\n// Alternatively, programmatically scroll a specific element\nawait page.getByTestId('scrolling-container').evaluate(e => e.scrollTop += 100);\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/input](https://playwright.dev/docs/input)"
- name: Android
  id: api/class-android
  summary: Playwright has experimental support for Android automation
  description: "# Android\n\nPlaywright has **experimental** support for Android automation. This includes Chrome for Android and Android WebView.\n\n*Requirements*\n\n- Android device or AVD Emulator.\n- [ADB daemon](https://developer.android.com/studio/command-line/adb) running and authenticated with your device. Typically running `adb devices` is all you need to do.\n- [`Chrome 87`](https://play.google.com/store/apps/details?id=com.android.chrome) or newer installed on the device\n- \"Enable command line on non-rooted devices\" enabled in `chrome://flags`.\n\n*Known limitations*\n\n- Raw USB operation is not yet supported, so you need ADB.\n- Device needs to be awake to produce screenshots. Enabling \"Stay awake\" developer mode will help.\n- We didn't run all the tests against the device, so not everything works.\n\n*How to run*\n\nAn example of the Android automation script would be:\n\n``` javascript\nconst { _android: android } = require('playwright');\n\n(async () => {\n  // Connect to the device.\n  const [device] = await android.devices();\n  console.log(`Model: ${device.model()}`);\n  console.log(`Serial: ${device.serial()}`);\n  // Take screenshot of the whole device.\n  await device.screenshot({ path: 'device.png' });\n\n  {\n    // --------------------- WebView -----------------------\n\n    // Launch an application with WebView.\n    await device.shell('am force-stop org.chromium.webview_shell');\n    await device.shell('am start org.chromium.webview_shell/.WebViewBrowserActivity');\n    // Get the WebView.\n    const webview = await device.webView({ pkg: 'org.chromium.webview_shell' });\n\n    // Fill the input box.\n    await device.fill({\n      res: 'org.chromium.webview_shell:id/url_field',\n    }, 'github.com/microsoft/playwright');\n    await device.press({\n      res: 'org.chromium.webview_shell:id/url_field',\n    }, 'Enter');\n\n    // Work with WebView's page as usual.\n    const page = await webview.page();\n    await page.waitForNavigation({ url: /.*microsoft\\/playwright.*/ });\n    console.log(await page.title());\n  }\n\n  {\n    // --------------------- Browser -----------------------\n\n    // Launch Chrome browser.\n    await device.shell('am force-stop com.android.chrome');\n    const context = await device.launchBrowser();\n\n    // Use BrowserContext as usual.\n    const page = await context.newPage();\n    await page.goto('https://webkit.org/');\n    console.log(await page.evaluate(() => window.location.href));\n    await page.screenshot({ path: 'page.png' });\n\n    await context.close();\n  }\n\n  // Close the device.\n  await device.close();\n})();\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### connect[​](#android-connect \"Direct link to connect\")\n\nThis methods attaches Playwright to an existing Android device. Use [android.launchServer()](class-android#android-launch-server) to launch a new Android server instance.\n\n**Usage**\n\n``` javascript\nawait android.connect(wsEndpoint);\nawait android.connect(wsEndpoint, options);\n```\n\n**Arguments**\n\n- `wsEndpoint` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A browser websocket endpoint to connect to.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `headers` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    Additional HTTP headers to be sent with web socket connect request. Optional.\n\n  - `slowMo` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on. Defaults to `0`.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds to wait for the connection to be established. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[AndroidDevice](class-androiddevice \"AndroidDevice\")\\>\n\n### devices[​](#android-devices \"Direct link to devices\")\n\nReturns the list of detected Android devices.\n\n**Usage**\n\n``` javascript\nawait android.devices();\nawait android.devices(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `host` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Optional host to establish ADB server connection. Default to `127.0.0.1`.\n\n  - `omitDriverInstall` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Prevents automatic playwright driver installation on attach. Assumes that the drivers have been installed already.\n\n  - `port` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Optional port to establish ADB server connection. Default to `5037`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[AndroidDevice](class-androiddevice \"AndroidDevice\")\\>\\>\n\n### launchServer[​](#android-launch-server \"Direct link to launchServer\")\n\nLaunches Playwright Android server that clients can connect to. See the following example:\n\n**Usage**\n\nServer Side:\n\n``` javascript\nconst { _android } = require('playwright');\n\n(async () => {\n  const browserServer = await _android.launchServer({\n    // If you have multiple devices connected and want to use a specific one.\n    // deviceSerialNumber: '<deviceSerialNumber>',\n  });\n  const wsEndpoint = browserServer.wsEndpoint();\n  console.log(wsEndpoint);\n})();\n```\n\nClient Side:\n\n``` javascript\nconst { _android } = require('playwright');\n\n(async () => {\n  const device = await _android.connect('<wsEndpoint>');\n\n  console.log(device.model());\n  console.log(device.serial());\n  await device.shell('am force-stop com.android.chrome');\n  const context = await device.launchBrowser();\n\n  const page = await context.newPage();\n  await page.goto('https://webkit.org/');\n  console.log(await page.evaluate(() => window.location.href));\n  await page.screenshot({ path: 'page-chrome-1.png' });\n\n  await context.close();\n})();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `adbHost` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Optional host to establish ADB server connection. Default to `127.0.0.1`.\n\n  - `adbPort` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Optional port to establish ADB server connection. Default to `5037`.\n\n  - `deviceSerialNumber` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Optional device serial number to launch the browser on. If not specified, it will throw if multiple devices are connected.\n\n  - `host` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Host to use for the web socket. It is optional and if it is omitted, the server will accept connections on the unspecified IPv6 address (::) when IPv6 is available, or the unspecified IPv4 address (0.0.0.0) otherwise. Consider hardening it with picking a specific interface.\n\n  - `omitDriverInstall` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Prevents automatic playwright driver installation on attach. Assumes that the drivers have been installed already.\n\n  - `port` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Port to use for the web socket. Defaults to 0 that picks any available port.\n\n  - `wsPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Path at which to serve the Android Server. For security, this defaults to an unguessable string.\n\n    > warning\n    >\n    > Any process or web page (including those running in Playwright) with knowledge of the `wsPath` can take control of the OS user. For this reason, you should use an unguessable token when using this option.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[BrowserServer](class-browserserver \"BrowserServer\")\\>\n\n### setDefaultTimeout[​](#android-set-default-timeout \"Direct link to setDefaultTimeout\")\n\nThis setting will change the default maximum time for all the methods accepting `timeout` option.\n\n**Usage**\n\n``` javascript\nandroid.setDefaultTimeout(timeout);\n```\n\n**Arguments**\n\n- `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Maximum time in milliseconds\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-android](https://playwright.dev/docs/api/class-android)"
- name: android.connect
  id: api/class-android#android-connect
  summary: This methods attaches Playwright to an existing Android device
  belongs_to: Android
  description: |-
    ### connect[​](#android-connect "Direct link to connect")

    This methods attaches Playwright to an existing Android device. Use [android.launchServer()](class-android#android-launch-server) to launch a new Android server instance.

    **Usage**

    ``` javascript
    await android.connect(wsEndpoint);
    await android.connect(wsEndpoint, options);
    ```

    **Arguments**

    - `wsEndpoint` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A browser websocket endpoint to connect to.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `headers`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        Additional HTTP headers to be sent with web socket connect request. Optional.

      - `slowMo` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on. Defaults to `0`.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds to wait for the connection to be established. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[AndroidDevice](class-androiddevice "AndroidDevice")\>
- name: android.devices
  id: api/class-android#android-devices
  summary: Returns the list of detected Android devices
  belongs_to: Android
  description: |-
    ### devices[​](#android-devices "Direct link to devices")

    Returns the list of detected Android devices.

    **Usage**

    ``` javascript
    await android.devices();
    await android.devices(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `host` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Optional host to establish ADB server connection. Default to `127.0.0.1`.

      - `omitDriverInstall` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Prevents automatic playwright driver installation on attach. Assumes that the drivers have been installed already.

      - `port` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Optional port to establish ADB server connection. Default to `5037`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[AndroidDevice](class-androiddevice "AndroidDevice")\>\>

    &nbsp;
- name: android.launchServer
  id: api/class-android#android-launch-server
  summary: Launches Playwright Android server that clients can connect to
  belongs_to: Android
  description: |-
    ### launchServer[​](#android-launch-server "Direct link to launchServer")

    Launches Playwright Android server that clients can connect to. See the following example:

    **Usage**

    Server Side:

    ``` javascript
    const { _android } = require('playwright');

    (async () => {
      const browserServer = await _android.launchServer({
        // If you have multiple devices connected and want to use a specific one.
        // deviceSerialNumber: '<deviceSerialNumber>',
      });
      const wsEndpoint = browserServer.wsEndpoint();
      console.log(wsEndpoint);
    })();
    ```

    Client Side:

    ``` javascript
    const { _android } = require('playwright');

    (async () => {
      const device = await _android.connect('<wsEndpoint>');

      console.log(device.model());
      console.log(device.serial());
      await device.shell('am force-stop com.android.chrome');
      const context = await device.launchBrowser();

      const page = await context.newPage();
      await page.goto('https://webkit.org/');
      console.log(await page.evaluate(() => window.location.href));
      await page.screenshot({ path: 'page-chrome-1.png' });

      await context.close();
    })();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `adbHost` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Optional host to establish ADB server connection. Default to `127.0.0.1`.

      - `adbPort` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Optional port to establish ADB server connection. Default to `5037`.

      - `deviceSerialNumber` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Optional device serial number to launch the browser on. If not specified, it will throw if multiple devices are connected.

      - `host` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Host to use for the web socket. It is optional and if it is omitted, the server will accept connections on the unspecified IPv6 address (::) when IPv6 is available, or the unspecified IPv4 address (0.0.0.0) otherwise. Consider hardening it with picking a specific interface.

      - `omitDriverInstall` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Prevents automatic playwright driver installation on attach. Assumes that the drivers have been installed already.

      - `port` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Port to use for the web socket. Defaults to 0 that picks any available port.

      - `wsPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Path at which to serve the Android Server. For security, this defaults to an unguessable string.

        > warning
        >
        > Any process or web page (including those running in Playwright) with knowledge of the `wsPath` can take control of the OS user. For this reason, you should use an unguessable token when using this option.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[BrowserServer](class-browserserver "BrowserServer")\>

    &nbsp;
- name: android.setDefaultTimeout
  id: api/class-android#android-set-default-timeout
  summary: This setting will change the default maximum time for all the methods accepting timeout option
  belongs_to: Android
  description: "### setDefaultTimeout[​](#android-set-default-timeout \"Direct link to setDefaultTimeout\")\n\nThis setting will change the default maximum time for all the methods accepting `timeout` option.\n\n**Usage**\n\n``` javascript\nandroid.setDefaultTimeout(timeout);\n```\n\n**Arguments**\n\n- `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Maximum time in milliseconds\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-android](https://playwright.dev/docs/api/class-android)"
- name: AndroidDevice
  id: api/class-androiddevice
  summary: AndroidDevice represents a connected device, either real hardware or emulated
  description: "# AndroidDevice\n\n[AndroidDevice](class-androiddevice \"AndroidDevice\") represents a connected device, either real hardware or emulated. Devices can be obtained using [android.devices()](class-android#android-devices).\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### close[​](#android-device-close \"Direct link to close\")\n\nDisconnects from the device.\n\n**Usage**\n\n``` javascript\nawait androidDevice.close();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### drag[​](#android-device-drag \"Direct link to drag\")\n\nDrags the widget defined by `selector` towards `dest` point.\n\n**Usage**\n\n``` javascript\nawait androidDevice.drag(selector, dest);\nawait androidDevice.drag(selector, dest, options);\n```\n\n**Arguments**\n\n- `selector` \\[AndroidSelector\\]\n\n  Selector to drag.\n\n- `dest` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n  - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Point to drag to.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `speed` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Optional speed of the drag in pixels per second.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [androidDevice.setDefaultTimeout()](class-androiddevice#android-device-set-default-timeout) method.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### fill[​](#android-device-fill \"Direct link to fill\")\n\nFills the specific `selector` input box with `text`.\n\n**Usage**\n\n``` javascript\nawait androidDevice.fill(selector, text);\nawait androidDevice.fill(selector, text, options);\n```\n\n**Arguments**\n\n- `selector` \\[AndroidSelector\\]\n\n  Selector to fill.\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Text to be filled in the input box.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [androidDevice.setDefaultTimeout()](class-androiddevice#android-device-set-default-timeout) method.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### fling[​](#android-device-fling \"Direct link to fling\")\n\nFlings the widget defined by `selector` in the specified `direction`.\n\n**Usage**\n\n``` javascript\nawait androidDevice.fling(selector, direction);\nawait androidDevice.fling(selector, direction, options);\n```\n\n**Arguments**\n\n- `selector` \\[AndroidSelector\\]\n\n  Selector to fling.\n\n- `direction` \"down\" \\| \"up\" \\| \"left\" \\| \"right\"\n\n  Fling direction.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `speed` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Optional speed of the fling in pixels per second.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [androidDevice.setDefaultTimeout()](class-androiddevice#android-device-set-default-timeout) method.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### info[​](#android-device-info \"Direct link to info\")\n\nReturns information about a widget defined by `selector`.\n\n**Usage**\n\n``` javascript\nawait androidDevice.info(selector);\n```\n\n**Arguments**\n\n- `selector` \\[AndroidSelector\\]\n\n  Selector to return information about.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<\\[AndroidElementInfo\\]\\>\n\n### installApk[​](#android-device-install-apk \"Direct link to installApk\")\n\nInstalls an apk on the device.\n\n**Usage**\n\n``` javascript\nawait androidDevice.installApk(file);\nawait androidDevice.installApk(file, options);\n```\n\n**Arguments**\n\n- `file` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\n\n  Either a path to the apk file, or apk file content.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `args` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    Optional arguments to pass to the `shell:cmd package install` call. Defaults to `-r -t -S`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### launchBrowser[​](#android-device-launch-browser \"Direct link to launchBrowser\")\n\nLaunches Chrome browser on the device, and returns its persistent context.\n\n**Usage**\n\n``` javascript\nawait androidDevice.launchBrowser();\nawait androidDevice.launchBrowser(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `acceptDownloads` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.\n\n  - `args` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    > warning\n    >\n    > Use custom browser args at your own risk, as some of them may break Playwright functionality.\n\n    Additional arguments to pass to the browser instance. The list of Chromium flags can be found [here](https://peter.sh/experiments/chromium-command-line-switches/).\n\n  - `baseURL` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    When using [page.goto()](class-page#page-goto), [page.route()](class-page#page-route), [page.waitForURL()](class-page#page-wait-for-url), [page.waitForRequest()](class-page#page-wait-for-request), or [page.waitForResponse()](class-page#page-wait-for-response) it takes the base URL in consideration by using the [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL. Unset by default. Examples:\n\n    - baseURL: `http://localhost:3000` and navigating to `/bar.html` results in `http://localhost:3000/bar.html`\n    - baseURL: `http://localhost:3000/foo/` and navigating to `./bar.html` results in `http://localhost:3000/foo/bar.html`\n    - baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in `http://localhost:3000/bar.html`\n\n  - `bypassCSP` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Toggles bypassing page's Content-Security-Policy. Defaults to `false`.\n\n  - `colorScheme` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| \"light\" \\| \"dark\" \\| \"no-preference\" *(optional)*\n\n    Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'light'`.\n\n  - `command` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Optional package name to launch instead of default Chrome for Android.\n\n  - `deviceScaleFactor` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Specify device scale factor (can be thought of as dpr). Defaults to `1`. Learn more about [emulating devices with device scale factor](../emulation#devices).\n\n  - `extraHTTPHeaders` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    An object containing additional HTTP headers to be sent with every request. Defaults to none.\n\n  - `forcedColors` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| \"active\" \\| \"none\" *(optional)*\n\n    Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'none'`.\n\n  - `geolocation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `latitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Latitude between -90 and 90.\n\n    - `longitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Longitude between -180 and 180.\n\n    - `accuracy` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n      Non-negative accuracy value. Defaults to `0`.\n\n  - `hasTouch` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Specifies if viewport supports touch events. Defaults to false. Learn more about [mobile emulation](../emulation#devices).\n\n  - `httpCredentials` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Restrain sending http credentials on specific origin (scheme://host:port).\n\n    - `send` \"unauthorized\" \\| \"always\" *(optional)*\n\n      This option only applies to the requests sent from corresponding [APIRequestContext](class-apirequestcontext \"APIRequestContext\") and does not affect requests sent from the browser. `'always'` - `Authorization` header with basic authentication credentials will be sent with the each API request. `'unauthorized` - the credentials are only sent when 401 (Unauthorized) response with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.\n\n    Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no origin is specified, the username and password are sent to any servers upon unauthorized responses.\n\n  - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.\n\n  - `isMobile` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether the `meta viewport` tag is taken into account and touch events are enabled. isMobile is a part of device, so you don't actually need to set it manually. Defaults to `false` and is not supported in Firefox. Learn more about [mobile emulation](../emulation#ismobile).\n\n  - `javaScriptEnabled` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether or not to enable JavaScript in the context. Defaults to `true`. Learn more about [disabling JavaScript](../emulation#javascript-enabled).\n\n  - `locale` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default locale. Learn more about emulation in our [emulation guide](../emulation#locale--timezone).\n\n  - `logger` [Logger](class-logger \"Logger\") *(optional)*\n\n    Logger sink for Playwright logging.\n\n  - `offline` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to emulate network being offline. Defaults to `false`. Learn more about [network emulation](../emulation#offline).\n\n  - `permissions` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    A list of permissions to grant to all pages in this context. See [browserContext.grantPermissions()](class-browsercontext#browser-context-grant-permissions) for more details. Defaults to none.\n\n  - `proxy` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `server` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.\n\n    - `bypass` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional comma-separated domains to bypass proxy, for example `\".com, chromium.org, .domain.com\"`.\n\n    - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional username to use if HTTP proxy requires authentication.\n\n    - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional password to use if HTTP proxy requires authentication.\n\n    Network proxy settings.\n\n  - `recordHar` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `omitContent` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n      Optional setting to control whether to omit request content from the HAR. Defaults to `false`. Deprecated, use `content` policy instead.\n\n    - `content` \"omit\" \\| \"embed\" \\| \"attach\" *(optional)*\n\n      Optional setting to control resource content management. If `omit` is specified, content is not persisted. If `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is specified, content is stored inline the HAR file as per HAR specification. Defaults to `attach` for `.zip` output files and to `embed` for all other file extensions.\n\n    - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Path on the filesystem to write the HAR file to. If the file name ends with `.zip`, `content: 'attach'` is used by default.\n\n    - `mode` \"full\" \\| \"minimal\" *(optional)*\n\n      When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page, cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `full`.\n\n    - `urlFilter` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") *(optional)*\n\n      A glob or regex pattern to filter requests that are stored in the HAR. When a `baseURL` via the context options was provided and the passed URL is a path, it gets merged via the [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor. Defaults to none.\n\n    Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file. If not specified, the HAR is not recorded. Make sure to await [browserContext.close()](class-browsercontext#browser-context-close) for the HAR to be saved.\n\n  - `recordVideo` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `dir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Path to the directory to put videos into.\n\n    - `size` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n      - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n        Video frame width.\n\n      - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n        Video frame height.\n\n      Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.\n\n    Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded. Make sure to await [browserContext.close()](class-browsercontext#browser-context-close) for videos to be saved.\n\n  - `reducedMotion` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| \"reduce\" \\| \"no-preference\" *(optional)*\n\n    Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'no-preference'`.\n\n  - `screen` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      page width in pixels.\n\n    - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      page height in pixels.\n\n    Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the `viewport` is set.\n\n  - `serviceWorkers` \"allow\" \\| \"block\" *(optional)*\n\n    Whether to allow sites to register Service workers. Defaults to `'allow'`.\n\n    - `'allow'`: [Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) can be registered.\n    - `'block'`: Playwright will block all registration of Service Workers.\n\n  - `strictSelectors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    If set to true, enables strict selectors mode for this context. In the strict selectors mode all operations on selectors that imply single target DOM element will throw when more than one element matches the selector. This option does not affect any Locator APIs (Locators are always strict). Defaults to `false`. See [Locator](class-locator \"Locator\") to learn more about the strict mode.\n\n  - `timezoneId` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Changes the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1) for a list of supported timezone IDs. Defaults to the system timezone.\n\n  - `userAgent` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Specific user agent to use in this context.\n\n  - `videoSize` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    > Deprecated\n    >\n    > Use `recordVideo` instead.\n\n    - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Video frame width.\n\n    - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Video frame height.\n\n  - `videosPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    > Deprecated\n    >\n    > Use `recordVideo` instead.\n\n  - `viewport` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      page width in pixels.\n\n    - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      page height in pixels.\n\n    Emulates consistent viewport for each page. Defaults to an 1280x720 viewport. Use `null` to disable the consistent viewport emulation. Learn more about [viewport emulation](../emulation#viewport).\n\n    > note\n    >\n    > The `null` value opts out from the default presets, makes viewport depend on the host window size defined by the operating system. It makes the execution of the tests non-deterministic.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[BrowserContext](class-browsercontext \"BrowserContext\")\\>\n\n### longTap[​](#android-device-long-tap \"Direct link to longTap\")\n\nPerforms a long tap on the widget defined by `selector`.\n\n**Usage**\n\n``` javascript\nawait androidDevice.longTap(selector);\nawait androidDevice.longTap(selector, options);\n```\n\n**Arguments**\n\n- `selector` \\[AndroidSelector\\]\n\n  Selector to tap on.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [androidDevice.setDefaultTimeout()](class-androiddevice#android-device-set-default-timeout) method.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### model[​](#android-device-model \"Direct link to model\")\n\nDevice model.\n\n**Usage**\n\n``` javascript\nandroidDevice.model();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### open[​](#android-device-open \"Direct link to open\")\n\nLaunches a process in the shell on the device and returns a socket to communicate with the launched process.\n\n**Usage**\n\n``` javascript\nawait androidDevice.open(command);\n```\n\n**Arguments**\n\n- `command` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[AndroidSocket](class-androidsocket \"AndroidSocket\")\\>\n\n### pinchClose[​](#android-device-pinch-close \"Direct link to pinchClose\")\n\nPinches the widget defined by `selector` in the closing direction.\n\n**Usage**\n\n``` javascript\nawait androidDevice.pinchClose(selector, percent);\nawait androidDevice.pinchClose(selector, percent, options);\n```\n\n**Arguments**\n\n- `selector` \\[AndroidSelector\\]\n\n  Selector to pinch close.\n\n- `percent` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  The size of the pinch as a percentage of the widget's size.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `speed` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Optional speed of the pinch in pixels per second.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [androidDevice.setDefaultTimeout()](class-androiddevice#android-device-set-default-timeout) method.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### pinchOpen[​](#android-device-pinch-open \"Direct link to pinchOpen\")\n\nPinches the widget defined by `selector` in the open direction.\n\n**Usage**\n\n``` javascript\nawait androidDevice.pinchOpen(selector, percent);\nawait androidDevice.pinchOpen(selector, percent, options);\n```\n\n**Arguments**\n\n- `selector` \\[AndroidSelector\\]\n\n  Selector to pinch open.\n\n- `percent` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  The size of the pinch as a percentage of the widget's size.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `speed` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Optional speed of the pinch in pixels per second.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [androidDevice.setDefaultTimeout()](class-androiddevice#android-device-set-default-timeout) method.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### press[​](#android-device-press \"Direct link to press\")\n\nPresses the specific `key` in the widget defined by `selector`.\n\n**Usage**\n\n``` javascript\nawait androidDevice.press(selector, key);\nawait androidDevice.press(selector, key, options);\n```\n\n**Arguments**\n\n- `selector` \\[AndroidSelector\\]\n\n  Selector to press the key in.\n\n- `key` \\[AndroidKey\\]\n\n  The key to press.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [androidDevice.setDefaultTimeout()](class-androiddevice#android-device-set-default-timeout) method.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### push[​](#android-device-push \"Direct link to push\")\n\nCopies a file to the device.\n\n**Usage**\n\n``` javascript\nawait androidDevice.push(file, path);\nawait androidDevice.push(file, path, options);\n```\n\n**Arguments**\n\n- `file` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\n\n  Either a path to the file, or file content.\n\n- `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Path to the file on the device.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `mode` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Optional file mode, defaults to `644` (`rw-r--r--`).\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### screenshot[​](#android-device-screenshot \"Direct link to screenshot\")\n\nReturns the buffer with the captured screenshot of the device.\n\n**Usage**\n\n``` javascript\nawait androidDevice.screenshot();\nawait androidDevice.screenshot(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    The file path to save the image to. If `path` is a relative path, then it is resolved relative to the current working directory. If no path is provided, the image won't be saved to the disk.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\\>\n\n### scroll[​](#android-device-scroll \"Direct link to scroll\")\n\nScrolls the widget defined by `selector` in the specified `direction`.\n\n**Usage**\n\n``` javascript\nawait androidDevice.scroll(selector, direction, percent);\nawait androidDevice.scroll(selector, direction, percent, options);\n```\n\n**Arguments**\n\n- `selector` \\[AndroidSelector\\]\n\n  Selector to scroll.\n\n- `direction` \"down\" \\| \"up\" \\| \"left\" \\| \"right\"\n\n  Scroll direction.\n\n- `percent` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Distance to scroll as a percentage of the widget's size.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `speed` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Optional speed of the scroll in pixels per second.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [androidDevice.setDefaultTimeout()](class-androiddevice#android-device-set-default-timeout) method.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### serial[​](#android-device-serial \"Direct link to serial\")\n\nDevice serial number.\n\n**Usage**\n\n``` javascript\nandroidDevice.serial();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### setDefaultTimeout[​](#android-device-set-default-timeout \"Direct link to setDefaultTimeout\")\n\nThis setting will change the default maximum time for all the methods accepting `timeout` option.\n\n**Usage**\n\n``` javascript\nandroidDevice.setDefaultTimeout(timeout);\n```\n\n**Arguments**\n\n- `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Maximum time in milliseconds\n\n### shell\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-androiddevice](https://playwright.dev/docs/api/class-androiddevice)"
- name: androidDevice.close
  id: api/class-androiddevice#android-device-close
  summary: Disconnects from the device
  belongs_to: AndroidDevice
  description: |-
    ### close[​](#android-device-close "Direct link to close")

    Disconnects from the device.

    **Usage**

    ``` javascript
    await androidDevice.close();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>
- name: androidDevice.drag
  id: api/class-androiddevice#android-device-drag
  summary: Drags the widget defined by selector towards dest point
  belongs_to: AndroidDevice
  description: |-
    ### drag[​](#android-device-drag "Direct link to drag")

    Drags the widget defined by `selector` towards `dest` point.

    **Usage**

    ``` javascript
    await androidDevice.drag(selector, dest);
    await androidDevice.drag(selector, dest, options);
    ```

    **Arguments**

    - `selector` \[AndroidSelector\]

      Selector to drag.

    - `dest` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

      - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Point to drag to.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `speed` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Optional speed of the drag in pixels per second.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [androidDevice.setDefaultTimeout()](class-androiddevice#android-device-set-default-timeout) method.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: androidDevice.fill
  id: api/class-androiddevice#android-device-fill
  summary: Fills the specific selector input box with text
  belongs_to: AndroidDevice
  description: |-
    ### fill[​](#android-device-fill "Direct link to fill")

    Fills the specific `selector` input box with `text`.

    **Usage**

    ``` javascript
    await androidDevice.fill(selector, text);
    await androidDevice.fill(selector, text, options);
    ```

    **Arguments**

    - `selector` \[AndroidSelector\]

      Selector to fill.

    - `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Text to be filled in the input box.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [androidDevice.setDefaultTimeout()](class-androiddevice#android-device-set-default-timeout) method.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: androidDevice.fling
  id: api/class-androiddevice#android-device-fling
  summary: Flings the widget defined by selector in the specified direction
  belongs_to: AndroidDevice
  description: |-
    ### fling[​](#android-device-fling "Direct link to fling")

    Flings the widget defined by `selector` in the specified `direction`.

    **Usage**

    ``` javascript
    await androidDevice.fling(selector, direction);
    await androidDevice.fling(selector, direction, options);
    ```

    **Arguments**

    - `selector` \[AndroidSelector\]

      Selector to fling.

    - `direction` "down" \| "up" \| "left" \| "right"

      Fling direction.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `speed` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Optional speed of the fling in pixels per second.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [androidDevice.setDefaultTimeout()](class-androiddevice#android-device-set-default-timeout) method.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: androidDevice.info
  id: api/class-androiddevice#android-device-info
  summary: Returns information about a widget defined by selector
  belongs_to: AndroidDevice
  description: |-
    ### info[​](#android-device-info "Direct link to info")

    Returns information about a widget defined by `selector`.

    **Usage**

    ``` javascript
    await androidDevice.info(selector);
    ```

    **Arguments**

    - `selector` \[AndroidSelector\]

      Selector to return information about.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<\[AndroidElementInfo\]\>

    &nbsp;
- name: androidDevice.installApk
  id: api/class-androiddevice#android-device-install-apk
  summary: Installs an apk on the device
  belongs_to: AndroidDevice
  description: |-
    ### installApk[​](#android-device-install-apk "Direct link to installApk")

    Installs an apk on the device.

    **Usage**

    ``` javascript
    await androidDevice.installApk(file);
    await androidDevice.installApk(file, options);
    ```

    **Arguments**

    - `file`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")

      Either a path to the apk file, or apk file content.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `args`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        Optional arguments to pass to the `shell:cmd package install` call. Defaults to `-r -t -S`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: androidDevice.launchBrowser
  id: api/class-androiddevice#android-device-launch-browser
  summary: Launches Chrome browser on the device, and returns its persistent context
  belongs_to: AndroidDevice
  description: |-
    ### launchBrowser[​](#android-device-launch-browser "Direct link to launchBrowser")

    Launches Chrome browser on the device, and returns its persistent context.

    **Usage**

    ``` javascript
    await androidDevice.launchBrowser();
    await androidDevice.launchBrowser(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `acceptDownloads` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.

      - `args`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        > warning
        >
        > Use custom browser args at your own risk, as some of them may break Playwright functionality.

        Additional arguments to pass to the browser instance. The list of Chromium flags can be found [here](https://peter.sh/experiments/chromium-command-line-switches/).

      - `baseURL` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        When using [page.goto()](class-page#page-goto), [page.route()](class-page#page-route), [page.waitForURL()](class-page#page-wait-for-url), [page.waitForRequest()](class-page#page-wait-for-request), or [page.waitForResponse()](class-page#page-wait-for-response) it takes the base URL in consideration by using the [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL. Unset by default. Examples:

        - baseURL: `http://localhost:3000` and navigating to `/bar.html` results in `http://localhost:3000/bar.html`
        - baseURL: `http://localhost:3000/foo/` and navigating to `./bar.html` results in `http://localhost:3000/foo/bar.html`
        - baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in `http://localhost:3000/bar.html`

      - `bypassCSP` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Toggles bypassing page's Content-Security-Policy. Defaults to `false`.

      - `colorScheme`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "light" \| "dark" \| "no-preference" *(optional)*

        Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'light'`.

      - `command` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Optional package name to launch instead of default Chrome for Android.

      - `deviceScaleFactor` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Specify device scale factor (can be thought of as dpr). Defaults to `1`. Learn more about [emulating devices with device scale factor](../emulation#devices).

      - `extraHTTPHeaders`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        An object containing additional HTTP headers to be sent with every request. Defaults to none.

      - `forcedColors`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "active" \| "none" *(optional)*

        Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'none'`.

      - `geolocation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `latitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          Latitude between -90 and 90.

        - `longitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          Longitude between -180 and 180.

        - `accuracy` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

          Non-negative accuracy value. Defaults to `0`.

      - `hasTouch` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Specifies if viewport supports touch events. Defaults to false. Learn more about [mobile emulation](../emulation#devices).

      - `httpCredentials` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Restrain sending http credentials on specific origin (scheme://host:port).

        - `send` "unauthorized" \| "always" *(optional)*

          This option only applies to the requests sent from corresponding [APIRequestContext](class-apirequestcontext "APIRequestContext") and does not affect requests sent from the browser. `'always'` - `Authorization` header with basic authentication credentials will be sent with the each API request. `'unauthorized` - the credentials are only sent when 401 (Unauthorized) response with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.

        Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no origin is specified, the username and password are sent to any servers upon unauthorized responses.

      - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

      - `isMobile` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether the `meta viewport` tag is taken into account and touch events are enabled. isMobile is a part of device, so you don't actually need to set it manually. Defaults to `false` and is not supported in Firefox. Learn more about [mobile emulation](../emulation#ismobile).

      - `javaScriptEnabled` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether or not to enable JavaScript in the context. Defaults to `true`. Learn more about [disabling JavaScript](../emulation#javascript-enabled).

      - `locale` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default locale. Learn more about emulation in our [emulation guide](../emulation#locale--timezone).

      - `logger` [Logger](class-logger "Logger") *(optional)*

        Logger sink for Playwright logging.

      - `offline` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to emulate network being offline. Defaults to `false`. Learn more about [network emulation](../emulation#offline).

      - `permissions`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        A list of permissions to grant to all pages in this context. See [browserContext.grantPermissions()](class-browsercontext#browser-context-grant-permissions) for more details. Defaults to none.

      - `proxy` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `server` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.

        - `bypass` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.

        - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Optional username to use if HTTP proxy requires authentication.

        - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Optional password to use if HTTP proxy requires authentication.

        Network proxy settings.

      - `recordHar` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `omitContent` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

          Optional setting to control whether to omit request content from the HAR. Defaults to `false`. Deprecated, use `content` policy instead.

        - `content` "omit" \| "embed" \| "attach" *(optional)*

          Optional setting to control resource content management. If `omit` is specified, content is not persisted. If `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is specified, content is stored inline the HAR file as per HAR specification. Defaults to `attach` for `.zip` output files and to `embed` for all other file extensions.

        - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          Path on the filesystem to write the HAR file to. If the file name ends with `.zip`, `content: 'attach'` is used by default.

        - `mode` "full" \| "minimal" *(optional)*

          When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page, cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `full`.

        - `urlFilter`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") *(optional)*

          A glob or regex pattern to filter requests that are stored in the HAR. When a `baseURL` via the context options was provided and the passed URL is a path, it gets merged via the [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor. Defaults to none.

        Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file. If not specified, the HAR is not recorded. Make sure to await [browserContext.close()](class-browsercontext#browser-context-close) for the HAR to be saved.

      - `recordVideo` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `dir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          Path to the directory to put videos into.

        - `size` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

          - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

            Video frame width.

          - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

            Video frame height.

          Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.

        Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded. Make sure to await [browserContext.close()](class-browsercontext#browser-context-close) for videos to be saved.

      - `reducedMotion`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "reduce" \| "no-preference" *(optional)*

        Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'no-preference'`.

      - `screen` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          page width in pixels.

        - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          page height in pixels.

        Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the `viewport` is set.

      - `serviceWorkers` "allow" \| "block" *(optional)*

        Whether to allow sites to register Service workers. Defaults to `'allow'`.

        - `'allow'`: [Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) can be registered.
        - `'block'`: Playwright will block all registration of Service Workers.

      - `strictSelectors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        If set to true, enables strict selectors mode for this context. In the strict selectors mode all operations on selectors that imply single target DOM element will throw when more than one element matches the selector. This option does not affect any Locator APIs (Locators are always strict). Defaults to `false`. See [Locator](class-locator "Locator") to learn more about the strict mode.

      - `timezoneId` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Changes the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1) for a list of supported timezone IDs. Defaults to the system timezone.

      - `userAgent` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Specific user agent to use in this context.

      - `videoSize` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        > Deprecated
        >
        > Use `recordVideo` instead.

        - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          Video frame width.

        - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          Video frame height.

      - `videosPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        > Deprecated
        >
        > Use `recordVideo` instead.

      - `viewport`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          page width in pixels.

        - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          page height in pixels.

        Emulates consistent viewport for each page. Defaults to an 1280x720 viewport. Use `null` to disable the consistent viewport emulation. Learn more about [viewport emulation](../emulation#viewport).

        > note
        >
        > The `null` value opts out from the default presets, makes viewport depend on the host window size defined by the operating system. It makes the execution of the tests non-deterministic.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[BrowserContext](class-browsercontext "BrowserContext")\>

    &nbsp;
- name: androidDevice.longTap
  id: api/class-androiddevice#android-device-long-tap
  summary: Performs a long tap on the widget defined by selector
  belongs_to: AndroidDevice
  description: |-
    ### longTap[​](#android-device-long-tap "Direct link to longTap")

    Performs a long tap on the widget defined by `selector`.

    **Usage**

    ``` javascript
    await androidDevice.longTap(selector);
    await androidDevice.longTap(selector, options);
    ```

    **Arguments**

    - `selector` \[AndroidSelector\]

      Selector to tap on.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [androidDevice.setDefaultTimeout()](class-androiddevice#android-device-set-default-timeout) method.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: androidDevice.model
  id: api/class-androiddevice#android-device-model
  summary: Device model
  belongs_to: AndroidDevice
  description: |-
    ### model[​](#android-device-model "Direct link to model")

    Device model.

    **Usage**

    ``` javascript
    androidDevice.model();
    ```

    **Returns**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: androidDevice.open
  id: api/class-androiddevice#android-device-open
  summary: Launches a process in the shell on the device and returns a socket to communicate with the launched process
  belongs_to: AndroidDevice
  description: |-
    ### open[​](#android-device-open "Direct link to open")

    Launches a process in the shell on the device and returns a socket to communicate with the launched process.

    **Usage**

    ``` javascript
    await androidDevice.open(command);
    ```

    **Arguments**

    - `command` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[AndroidSocket](class-androidsocket "AndroidSocket")\>

    &nbsp;
- name: androidDevice.pinchClose
  id: api/class-androiddevice#android-device-pinch-close
  summary: Pinches the widget defined by selector in the closing direction
  belongs_to: AndroidDevice
  description: |-
    ### pinchClose[​](#android-device-pinch-close "Direct link to pinchClose")

    Pinches the widget defined by `selector` in the closing direction.

    **Usage**

    ``` javascript
    await androidDevice.pinchClose(selector, percent);
    await androidDevice.pinchClose(selector, percent, options);
    ```

    **Arguments**

    - `selector` \[AndroidSelector\]

      Selector to pinch close.

    - `percent` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      The size of the pinch as a percentage of the widget's size.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `speed` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Optional speed of the pinch in pixels per second.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [androidDevice.setDefaultTimeout()](class-androiddevice#android-device-set-default-timeout) method.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: androidDevice.pinchOpen
  id: api/class-androiddevice#android-device-pinch-open
  summary: Pinches the widget defined by selector in the open direction
  belongs_to: AndroidDevice
  description: |-
    ### pinchOpen[​](#android-device-pinch-open "Direct link to pinchOpen")

    Pinches the widget defined by `selector` in the open direction.

    **Usage**

    ``` javascript
    await androidDevice.pinchOpen(selector, percent);
    await androidDevice.pinchOpen(selector, percent, options);
    ```

    **Arguments**

    - `selector` \[AndroidSelector\]

      Selector to pinch open.

    - `percent` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      The size of the pinch as a percentage of the widget's size.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `speed` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Optional speed of the pinch in pixels per second.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [androidDevice.setDefaultTimeout()](class-androiddevice#android-device-set-default-timeout) method.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: androidDevice.press
  id: api/class-androiddevice#android-device-press
  summary: Presses the specific key in the widget defined by selector
  belongs_to: AndroidDevice
  description: |-
    ### press[​](#android-device-press "Direct link to press")

    Presses the specific `key` in the widget defined by `selector`.

    **Usage**

    ``` javascript
    await androidDevice.press(selector, key);
    await androidDevice.press(selector, key, options);
    ```

    **Arguments**

    - `selector` \[AndroidSelector\]

      Selector to press the key in.

    - `key` \[AndroidKey\]

      The key to press.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [androidDevice.setDefaultTimeout()](class-androiddevice#android-device-set-default-timeout) method.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: androidDevice.push
  id: api/class-androiddevice#android-device-push
  summary: Copies a file to the device
  belongs_to: AndroidDevice
  description: |-
    ### push[​](#android-device-push "Direct link to push")

    Copies a file to the device.

    **Usage**

    ``` javascript
    await androidDevice.push(file, path);
    await androidDevice.push(file, path, options);
    ```

    **Arguments**

    - `file`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")

      Either a path to the file, or file content.

    - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Path to the file on the device.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `mode` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Optional file mode, defaults to `644` (`rw-r--r--`).

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: androidDevice.screenshot
  id: api/class-androiddevice#android-device-screenshot
  summary: Returns the buffer with the captured screenshot of the device
  belongs_to: AndroidDevice
  description: |-
    ### screenshot[​](#android-device-screenshot "Direct link to screenshot")

    Returns the buffer with the captured screenshot of the device.

    **Usage**

    ``` javascript
    await androidDevice.screenshot();
    await androidDevice.screenshot(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        The file path to save the image to. If `path` is a relative path, then it is resolved relative to the current working directory. If no path is provided, the image won't be saved to the disk.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")\>

    &nbsp;
- name: androidDevice.scroll
  id: api/class-androiddevice#android-device-scroll
  summary: Scrolls the widget defined by selector in the specified direction
  belongs_to: AndroidDevice
  description: |-
    ### scroll[​](#android-device-scroll "Direct link to scroll")

    Scrolls the widget defined by `selector` in the specified `direction`.

    **Usage**

    ``` javascript
    await androidDevice.scroll(selector, direction, percent);
    await androidDevice.scroll(selector, direction, percent, options);
    ```

    **Arguments**

    - `selector` \[AndroidSelector\]

      Selector to scroll.

    - `direction` "down" \| "up" \| "left" \| "right"

      Scroll direction.

    - `percent` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Distance to scroll as a percentage of the widget's size.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `speed` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Optional speed of the scroll in pixels per second.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [androidDevice.setDefaultTimeout()](class-androiddevice#android-device-set-default-timeout) method.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: androidDevice.serial
  id: api/class-androiddevice#android-device-serial
  summary: Device serial number
  belongs_to: AndroidDevice
  description: |-
    ### serial[​](#android-device-serial "Direct link to serial")

    Device serial number.

    **Usage**

    ``` javascript
    androidDevice.serial();
    ```

    **Returns**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: androidDevice.setDefaultTimeout
  id: api/class-androiddevice#android-device-set-default-timeout
  summary: This setting will change the default maximum time for all the methods accepting timeout option
  belongs_to: AndroidDevice
  description: "### setDefaultTimeout[​](#android-device-set-default-timeout \"Direct link to setDefaultTimeout\")\n\nThis setting will change the default maximum time for all the methods accepting `timeout` option.\n\n**Usage**\n\n``` javascript\nandroidDevice.setDefaultTimeout(timeout);\n```\n\n**Arguments**\n\n- `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Maximum time in milliseconds\n\n### shell\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-androiddevice](https://playwright.dev/docs/api/class-androiddevice)"
- name: AndroidInput
  id: api/class-androidinput
  summary: Performs a drag between from and to points
  description: "# AndroidInput\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### drag[​](#android-input-drag \"Direct link to drag\")\n\nPerforms a drag between `from` and `to` points.\n\n**Usage**\n\n``` javascript\nawait androidInput.drag(from, to, steps);\n```\n\n**Arguments**\n\n- `from` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n  - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  The start point of the drag.\n\n- `to` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n  - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  The end point of the drag.\n\n- `steps` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  The number of steps in the drag. Each step takes 5 milliseconds to complete.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### press[​](#android-input-press \"Direct link to press\")\n\nPresses the `key`.\n\n**Usage**\n\n``` javascript\nawait androidInput.press(key);\n```\n\n**Arguments**\n\n- `key` \\[AndroidKey\\]\n\n  Key to press.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### swipe[​](#android-input-swipe \"Direct link to swipe\")\n\nSwipes following the path defined by `segments`.\n\n**Usage**\n\n``` javascript\nawait androidInput.swipe(from, segments, steps);\n```\n\n**Arguments**\n\n- `from` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n  - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  The point to start swiping from.\n\n- `segments` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n  - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Points following the `from` point in the swipe gesture.\n\n- `steps` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  The number of steps for each segment. Each step takes 5 milliseconds to complete, so 100 steps means half a second per each segment.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### tap[​](#android-input-tap \"Direct link to tap\")\n\nTaps at the specified `point`.\n\n**Usage**\n\n``` javascript\nawait androidInput.tap(point);\n```\n\n**Arguments**\n\n- `point` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  The point to tap at.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### type[​](#android-input-type \"Direct link to type\")\n\nTypes `text` into currently focused widget.\n\n**Usage**\n\n``` javascript\nawait androidInput.type(text);\n```\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Text to type.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-androidinput](https://playwright.dev/docs/api/class-androidinput)"
- name: androidInput.drag
  id: api/class-androidinput#android-input-drag
  summary: Performs a drag between from and to points
  belongs_to: AndroidInput
  description: |-
    ### drag[​](#android-input-drag "Direct link to drag")

    Performs a drag between `from` and `to` points.

    **Usage**

    ``` javascript
    await androidInput.drag(from, to, steps);
    ```

    **Arguments**

    - `from` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

      - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      The start point of the drag.

    - `to` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

      - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      The end point of the drag.

    - `steps` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      The number of steps in the drag. Each step takes 5 milliseconds to complete.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>
- name: androidInput.press
  id: api/class-androidinput#android-input-press
  summary: Presses the key
  belongs_to: AndroidInput
  description: |-
    ### press[​](#android-input-press "Direct link to press")

    Presses the `key`.

    **Usage**

    ``` javascript
    await androidInput.press(key);
    ```

    **Arguments**

    - `key` \[AndroidKey\]

      Key to press.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: androidInput.swipe
  id: api/class-androidinput#android-input-swipe
  summary: Swipes following the path defined by segments
  belongs_to: AndroidInput
  description: |-
    ### swipe[​](#android-input-swipe "Direct link to swipe")

    Swipes following the path defined by `segments`.

    **Usage**

    ``` javascript
    await androidInput.swipe(from, segments, steps);
    ```

    **Arguments**

    - `from` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

      - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      The point to start swiping from.

    - `segments`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>

      - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Points following the `from` point in the swipe gesture.

    - `steps` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      The number of steps for each segment. Each step takes 5 milliseconds to complete, so 100 steps means half a second per each segment.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: androidInput.tap
  id: api/class-androidinput#android-input-tap
  summary: Taps at the specified point
  belongs_to: AndroidInput
  description: |-
    ### tap[​](#android-input-tap "Direct link to tap")

    Taps at the specified `point`.

    **Usage**

    ``` javascript
    await androidInput.tap(point);
    ```

    **Arguments**

    - `point`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")
      - `x`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      - `y`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      The point to tap at.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: androidInput.type
  id: api/class-androidinput#android-input-type
  summary: Types text into currently focused widget
  belongs_to: AndroidInput
  description: "### type[​](#android-input-type \"Direct link to type\")\n\nTypes `text` into currently focused widget.\n\n**Usage**\n\n``` javascript\nawait androidInput.type(text);\n```\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Text to type.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-androidinput](https://playwright.dev/docs/api/class-androidinput)"
- name: AndroidSocket
  id: api/class-androidsocket
  summary: AndroidSocket is a way to communicate with a process launched on the AndroidDevice
  description: "# AndroidSocket\n\n[AndroidSocket](class-androidsocket \"AndroidSocket\") is a way to communicate with a process launched on the [AndroidDevice](class-androiddevice \"AndroidDevice\"). Use [androidDevice.open()](class-androiddevice#android-device-open) to open a socket.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### close[​](#android-socket-close \"Direct link to close\")\n\nCloses the socket.\n\n**Usage**\n\n``` javascript\nawait androidSocket.close();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### write[​](#android-socket-write \"Direct link to write\")\n\nWrites some `data` to the socket.\n\n**Usage**\n\n``` javascript\nawait androidSocket.write(data);\n```\n\n**Arguments**\n\n- `data` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\n\n  Data to write.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n## Events[​](#events \"Direct link to Events\")\n\n### on('close')[​](#android-socket-event-close \"Direct link to on('close')\")\n\nEmitted when the socket is closed.\n\n**Usage**\n\n``` javascript\nandroidSocket.on('close', data => {});\n```\n\n### on('data')[​](#android-socket-event-data \"Direct link to on('data')\")\n\nEmitted when data is available to read from the socket.\n\n**Usage**\n\n``` javascript\nandroidSocket.on('data', data => {});\n```\n\n**Event data**\n\n- [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-androidsocket](https://playwright.dev/docs/api/class-androidsocket)"
- name: androidSocket.close
  id: api/class-androidsocket#android-socket-close
  summary: Closes the socket
  belongs_to: AndroidSocket
  description: |-
    ### close[​](#android-socket-close "Direct link to close")

    Closes the socket.

    **Usage**

    ``` javascript
    await androidSocket.close();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>
- name: androidSocket.on('close')
  id: api/class-androidsocket#android-socket-event-close
  summary: Emitted when the socket is closed
  belongs_to: AndroidSocket
  description: |-
    ### on('close')[​](#android-socket-event-close "Direct link to on('close')")

    Emitted when the socket is closed.

    **Usage**

    ``` javascript
    androidSocket.on('close', data => {});
    ```
- name: androidSocket.on('data')
  id: api/class-androidsocket#android-socket-event-data
  summary: Emitted when data is available to read from the socket
  belongs_to: AndroidSocket
  description: "### on('data')[​](#android-socket-event-data \"Direct link to on('data')\")\n\nEmitted when data is available to read from the socket.\n\n**Usage**\n\n``` javascript\nandroidSocket.on('data', data => {});\n```\n\n**Event data**\n\n- [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-androidsocket](https://playwright.dev/docs/api/class-androidsocket)"
- name: androidSocket.write
  id: api/class-androidsocket#android-socket-write
  summary: Writes some data to the socket
  belongs_to: AndroidSocket
  description: |-
    ### write[​](#android-socket-write "Direct link to write")

    Writes some `data` to the socket.

    **Usage**

    ``` javascript
    await androidSocket.write(data);
    ```

    **Arguments**

    - `data` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")

      Data to write.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    ## Events[​](#events "Direct link to Events")
- name: AndroidWebView
  id: api/class-androidwebview
  summary: AndroidWebView represents a WebView open on the AndroidDevice
  description: "# AndroidWebView\n\n[AndroidWebView](class-androidwebview \"AndroidWebView\") represents a WebView open on the [AndroidDevice](class-androiddevice \"AndroidDevice\"). WebView is usually obtained using [androidDevice.webView()](class-androiddevice#android-device-web-view).\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### page[​](#android-web-view-page \"Direct link to page\")\n\nConnects to the WebView and returns a regular Playwright [Page](class-page \"Page\") to interact with.\n\n**Usage**\n\n``` javascript\nawait androidWebView.page();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Page](class-page \"Page\")\\>\n\n### pid[​](#android-web-view-pid \"Direct link to pid\")\n\nWebView process PID.\n\n**Usage**\n\n``` javascript\nandroidWebView.pid();\n```\n\n**Returns**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### pkg[​](#android-web-view-pkg \"Direct link to pkg\")\n\nWebView package identifier.\n\n**Usage**\n\n``` javascript\nandroidWebView.pkg();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n## Events[​](#events \"Direct link to Events\")\n\n### on('close')[​](#android-web-view-event-close \"Direct link to on('close')\")\n\nEmitted when the WebView is closed.\n\n**Usage**\n\n``` javascript\nandroidWebView.on('close', data => {});\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-androidwebview](https://playwright.dev/docs/api/class-androidwebview)"
- name: androidWebView.on('close')
  id: api/class-androidwebview#android-web-view-event-close
  summary: Emitted when the WebView is closed
  belongs_to: AndroidWebView
  description: "### on('close')[​](#android-web-view-event-close \"Direct link to on('close')\")\n\nEmitted when the WebView is closed.\n\n**Usage**\n\n``` javascript\nandroidWebView.on('close', data => {});\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-androidwebview](https://playwright.dev/docs/api/class-androidwebview)"
- name: androidWebView.page
  id: api/class-androidwebview#android-web-view-page
  summary: Connects to the WebView and returns a regular Playwright Page to interact with
  belongs_to: AndroidWebView
  description: |-
    ### page[​](#android-web-view-page "Direct link to page")

    Connects to the WebView and returns a regular Playwright [Page](class-page "Page") to interact with.

    **Usage**

    ``` javascript
    await androidWebView.page();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Page](class-page "Page")\>
- name: androidWebView.pid
  id: api/class-androidwebview#android-web-view-pid
  summary: WebView process PID
  belongs_to: AndroidWebView
  description: |-
    ### pid[​](#android-web-view-pid "Direct link to pid")

    WebView process PID.

    **Usage**

    ``` javascript
    androidWebView.pid();
    ```

    **Returns**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: androidWebView.pkg
  id: api/class-androidwebview#android-web-view-pkg
  summary: WebView package identifier
  belongs_to: AndroidWebView
  description: |-
    ### pkg[​](#android-web-view-pkg "Direct link to pkg")

    WebView package identifier.

    **Usage**

    ``` javascript
    androidWebView.pkg();
    ```

    **Returns**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    ## Events[​](#events "Direct link to Events")
- name: Annotations
  id: test-annotations
  summary: Playwright supports tags and annotations that are displayed in the test report
  description: "# Annotations\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright supports tags and annotations that are displayed in the test report.\n\nYou can add your own tags and annotations at any moment, but Playwright comes with a few built-in ones:\n\n- [test.skip()](api/class-test#test-skip) marks the test as irrelevant. Playwright does not run such a test. Use this annotation when the test is not applicable in some configuration.\n- [test.fail()](api/class-test#test-fail) marks the test as failing. Playwright will run this test and ensure it does indeed fail. If the test does not fail, Playwright will complain.\n- [test.fixme()](api/class-test#test-fixme) marks the test as failing. Playwright will not run this test, as opposed to the `fail` annotation. Use `fixme` when running the test is slow or crashes.\n- [test.slow()](api/class-test#test-slow) marks the test as slow and triples the test timeout.\n\nAnnotations can be added to a single test or a group of tests.\n\nBuilt-in annotations can be conditional, in which case they apply when the condition is truthy, and may depend on test fixtures. There could be multiple annotations on the same test, possibly in different configurations.\n\n## Focus a test[​](#focus-a-test \"Direct link to Focus a test\")\n\nYou can focus some tests. When there are focused tests, only these tests run.\n\n``` javascript\ntest.only('focus this test', async ({ page }) => {\n  // Run only focused tests in the entire project.\n});\n```\n\n## Skip a test[​](#skip-a-test \"Direct link to Skip a test\")\n\nMark a test as skipped.\n\n``` javascript\ntest.skip('skip this test', async ({ page }) => {\n  // This test is not run\n});\n```\n\n## Conditionally skip a test[​](#conditionally-skip-a-test \"Direct link to Conditionally skip a test\")\n\nYou can skip certain test based on the condition.\n\n``` javascript\ntest('skip this test', async ({ page, browserName }) => {\n  test.skip(browserName === 'firefox', 'Still working on it');\n});\n```\n\n## Group tests[​](#group-tests \"Direct link to Group tests\")\n\nYou can group tests to give them a logical name or to scope before/after hooks to the group.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.describe('two tests', () => {\n  test('one', async ({ page }) => {\n    // ...\n  });\n\n  test('two', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n## Tag tests[​](#tag-tests \"Direct link to Tag tests\")\n\nSometimes you want to tag your tests as `@fast` or `@slow`, and then filter by tag in the test report. Or you might want to only run tests that have a certain tag.\n\nTo tag a test, either provide an additional details object when declaring a test, or add `@`-token to the test title. Note that tags must start with `@` symbol.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('test login page', {\n  tag: '@fast',\n}, async ({ page }) => {\n  // ...\n});\n\ntest('test full report @slow', async ({ page }) => {\n  // ...\n});\n```\n\nYou can also tag all tests in a group or provide multiple tags:\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.describe('group', {\n  tag: '@report',\n}, () => {\n  test('test report header', async ({ page }) => {\n    // ...\n  });\n\n  test('test full report', {\n    tag: ['@slow', '@vrt'],\n  }, async ({ page }) => {\n    // ...\n  });\n});\n```\n\nYou can now run tests that have a particular tag with [`--grep`](test-cli#reference) command line option.\n\n- Bash\n- PowerShell\n- Batch\n\n``` javascript\nnpx playwright test --grep @fast\n```\n\n``` javascript\nnpx playwright test --grep \"@fast\"\n```\n\n``` javascript\nnpx playwright test --grep @fast\n```\n\nOr if you want the opposite, you can skip the tests with a certain tag:\n\n- Bash\n- PowerShell\n- Batch\n\n``` javascript\nnpx playwright test --grep-invert @fast\n```\n\n``` javascript\nnpx playwright test --grep-invert \"@fast\"\n```\n\n``` javascript\nnpx playwright test --grep-invert @fast\n```\n\nTo run tests containing either tag (logical `OR` operator):\n\n- Bash\n- PowerShell\n- Batch\n\n``` javascript\nnpx playwright test --grep \"@fast|@slow\"\n```\n\n``` javascript\nnpx playwright test --grep --% \"@fast^|@slow\"\n```\n\n``` javascript\nnpx playwright test --grep \"@fast^|@slow\"\n```\n\nOr run tests containing both tags (logical `AND` operator) using regex lookaheads:\n\n``` javascript\nnpx playwright test --grep \"(?=.*@fast)(?=.*@slow)\"\n```\n\nYou can also filter tests in the configuration file via [testConfig.grep](api/class-testconfig#test-config-grep) and [testProject.grep](api/class-testproject#test-project-grep).\n\n## Annotate tests[​](#annotate-tests \"Direct link to Annotate tests\")\n\nIf you would like to annotate your tests with something more substantial than a tag, you can do that when declaring a test. Annotations have a `type` and a `description` for more context and available in reporter API. Playwright's built-in HTML reporter shows all annotations, except those where `type` starts with `_` symbol.\n\nFor example, to annotate a test with an issue url:\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('test login page', {\n  annotation: {\n    type: 'issue',\n    description: 'https://github.com/microsoft/playwright/issues/23180',\n  },\n}, async ({ page }) => {\n  // ...\n});\n```\n\nYou can also annotate all tests in a group or provide multiple annotations:\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.describe('report tests', {\n  annotation: { type: 'category', description: 'report' },\n}, () => {\n  test('test report header', async ({ page }) => {\n    // ...\n  });\n\n  test('test full report', {\n    annotation: [\n      { type: 'issue', description: 'https://github.com/microsoft/playwright/issues/23180' },\n      { type: 'performance', description: 'very slow test!' },\n    ],\n  }, async ({ page }) => {\n    // ...\n  });\n});\n```\n\n## Conditionally skip a group of tests[​](#conditionally-skip-a-group-of-tests \"Direct link to Conditionally skip a group of tests\")\n\nFor example, you can run a group of tests just in Chromium by passing a callback.\n\n``` javascript\ntest.describe('chromium only', () => {\n  test.skip(({ browserName }) => browserName !== 'chromium', 'Chromium only!');\n\n  test.beforeAll(async () => {\n    // This hook is only run in Chromium.\n  });\n\n  test('test 1', async ({ page }) => {\n    // This test is only run in Chromium.\n  });\n\n  test('test 2', async ({ page }) => {\n    // This test is only run in Chromium.\n  });\n});\n```\n\n## Use fixme in `beforeEach` hook[​](#use-fixme-in-beforeeach-hook \"Direct link to use-fixme-in-beforeeach-hook\")\n\nTo avoid running `beforeEach` hooks, you can put annotations in the hook itself.\n\n``` javascript\ntest.beforeEach(async ({ page, isMobile }) => {\n  test.fixme(isMobile, 'Settings page does not work in mobile yet');\n\n  await page.goto('http://localhost:3000/settings');\n});\n\ntest('user profile', async ({ page }) => {\n  await page.getByText('My Profile').click();\n  // ...\n});\n```\n\n## Runtime annotations[​](#runtime-annotations \"Direct link to Runtime annotations\")\n\nWhile the test is already running, you can add annotations to [`test.info().annotations`](api/class-testinfo#test-info-annotations).\n\n``` javascript\ntest('example test', async ({ page, browser }) => {\n  test.info().annotations.push({\n    type: 'browser version',\n    description: browser.version(),\n  });\n\n  // ...\n});\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/test-annotations](https://playwright.dev/docs/test-annotations)"
- name: API testing
  id: api-testing
  summary: Playwright can be used to get access to the REST API of your application
  description: "# API testing\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright can be used to get access to the [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API of your application.\n\nSometimes you may want to send requests to the server directly from Node.js without loading a page and running js code in it. A few examples where it may come in handy:\n\n- Test your server API.\n- Prepare server side state before visiting the web application in a test.\n- Validate server side post-conditions after running some actions in the browser.\n\nAll of that could be achieved via [APIRequestContext](api/class-apirequestcontext \"APIRequestContext\") methods.\n\n## Writing API Test[​](#writing-api-test \"Direct link to Writing API Test\")\n\n[APIRequestContext](api/class-apirequestcontext \"APIRequestContext\") can send all kinds of HTTP(S) requests over network.\n\nThe following example demonstrates how to use Playwright to test issues creation via [GitHub API](https://docs.github.com/en/rest). The test suite will do the following:\n\n- Create a new repository before running tests.\n- Create a few issues and validate server state.\n- Delete the repository after running tests.\n\n### Configuration[​](#configuration \"Direct link to Configuration\")\n\nGitHub API requires authorization, so we'll configure the token once for all tests. While at it, we'll also set the `baseURL` to simplify the tests. You can either put them in the configuration file, or in the test file with `test.use()`.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    // All requests we send go to this API endpoint.\n    baseURL: 'https://api.github.com',\n    extraHTTPHeaders: {\n      // We set this header per GitHub guidelines.\n      'Accept': 'application/vnd.github.v3+json',\n      // Add authorization token to all requests.\n      // Assuming personal access token available in the environment.\n      'Authorization': `token ${process.env.API_TOKEN}`,\n    },\n  }\n});\n```\n\n**Proxy configuration**\n\nIf your tests need to run behind a proxy, you can specify this in the config and the `request` fixture will pick it up automatically:\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    proxy: {\n      server: 'http://my-proxy:8080',\n      username: 'user',\n      password: 'secret'\n    },\n  }\n});\n```\n\n### Writing tests[​](#writing-tests \"Direct link to Writing tests\")\n\nPlaywright Test comes with the built-in `request` fixture that respects configuration options like `baseURL` or `extraHTTPHeaders` we specified and is ready to send some requests.\n\nNow we can add a few tests that will create new issues in the repository.\n\n``` javascript\nconst REPO = 'test-repo-1';\nconst USER = 'github-username';\n\ntest('should create a bug report', async ({ request }) => {\n  const newIssue = await request.post(`/repos/${USER}/${REPO}/issues`, {\n    data: {\n      title: '[Bug] report 1',\n      body: 'Bug description',\n    }\n  });\n  expect(newIssue.ok()).toBeTruthy();\n\n  const issues = await request.get(`/repos/${USER}/${REPO}/issues`);\n  expect(issues.ok()).toBeTruthy();\n  expect(await issues.json()).toContainEqual(expect.objectContaining({\n    title: '[Bug] report 1',\n    body: 'Bug description'\n  }));\n});\n\ntest('should create a feature request', async ({ request }) => {\n  const newIssue = await request.post(`/repos/${USER}/${REPO}/issues`, {\n    data: {\n      title: '[Feature] request 1',\n      body: 'Feature description',\n    }\n  });\n  expect(newIssue.ok()).toBeTruthy();\n\n  const issues = await request.get(`/repos/${USER}/${REPO}/issues`);\n  expect(issues.ok()).toBeTruthy();\n  expect(await issues.json()).toContainEqual(expect.objectContaining({\n    title: '[Feature] request 1',\n    body: 'Feature description'\n  }));\n});\n```\n\n### Setup and teardown[​](#setup-and-teardown \"Direct link to Setup and teardown\")\n\nThese tests assume that repository exists. You probably want to create a new one before running tests and delete it afterwards. Use `beforeAll` and `afterAll` hooks for that.\n\n``` javascript\ntest.beforeAll(async ({ request }) => {\n  // Create a new repository\n  const response = await request.post('/user/repos', {\n    data: {\n      name: REPO\n    }\n  });\n  expect(response.ok()).toBeTruthy();\n});\n\ntest.afterAll(async ({ request }) => {\n  // Delete the repository\n  const response = await request.delete(`/repos/${USER}/${REPO}`);\n  expect(response.ok()).toBeTruthy();\n});\n```\n\n## Using request context[​](#using-request-context \"Direct link to Using request context\")\n\nBehind the scenes, [`request` fixture](api/class-fixtures#fixtures-request) will actually call [apiRequest.newContext()](api/class-apirequest#api-request-new-context). You can always do that manually if you'd like more control. Below is a standalone script that does the same as `beforeAll` and `afterAll` from above.\n\n``` javascript\nimport { request } from '@playwright/test';\nconst REPO = 'test-repo-1';\nconst USER = 'github-username';\n\n(async () => {\n  // Create a context that will issue http requests.\n  const context = await request.newContext({\n    baseURL: 'https://api.github.com',\n  });\n\n  // Create a repository.\n  await context.post('/user/repos', {\n    headers: {\n      'Accept': 'application/vnd.github.v3+json',\n      // Add GitHub personal access token.\n      'Authorization': `token ${process.env.API_TOKEN}`,\n    },\n    data: {\n      name: REPO\n    }\n  });\n\n  // Delete a repository.\n  await context.delete(`/repos/${USER}/${REPO}`, {\n    headers: {\n      'Accept': 'application/vnd.github.v3+json',\n      // Add GitHub personal access token.\n      'Authorization': `token ${process.env.API_TOKEN}`,\n    }\n  });\n})();\n```\n\n## Sending API requests from UI tests[​](#sending-api-requests-from-ui-tests \"Direct link to Sending API requests from UI tests\")\n\nWhile running tests inside browsers you may want to make calls to the HTTP API of your application. It may be helpful if you need to prepare server state before running a test or to check some postconditions on the server after performing some actions in the browser. All of that could be achieved via [APIRequestContext](api/class-apirequestcontext \"APIRequestContext\") methods.\n\n### Establishing preconditions[​](#establishing-preconditions \"Direct link to Establishing preconditions\")\n\nThe following test creates a new issue via API and then navigates to the list of all issues in the project to check that it appears at the top of the list.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\nconst REPO = 'test-repo-1';\nconst USER = 'github-username';\n\n// Request context is reused by all tests in the file.\nlet apiContext;\n\ntest.beforeAll(async ({ playwright }) => {\n  apiContext = await playwright.request.newContext({\n    // All requests we send go to this API endpoint.\n    baseURL: 'https://api.github.com',\n    extraHTTPHeaders: {\n      // We set this header per GitHub guidelines.\n      'Accept': 'application/vnd.github.v3+json',\n      // Add authorization token to all requests.\n      // Assuming personal access token available in the environment.\n      'Authorization': `token ${process.env.API_TOKEN}`,\n    },\n  });\n});\n\ntest.afterAll(async ({ }) => {\n  // Dispose all responses.\n  await apiContext.dispose();\n});\n\ntest('last created issue should be first in the list', async ({ page }) => {\n  const newIssue = await apiContext.post(`/repos/${USER}/${REPO}/issues`, {\n    data: {\n      title: '[Feature] request 1',\n    }\n  });\n  expect(newIssue.ok()).toBeTruthy();\n\n  await page.goto(`https://github.com/${USER}/${REPO}/issues`);\n  const firstIssue = page.locator(`a[data-hovercard-type='issue']`).first();\n  await expect(firstIssue).toHaveText('[Feature] request 1');\n});\n```\n\n### Validating postconditions[​](#validating-postconditions \"Direct link to Validating postconditions\")\n\nThe following test creates a new issue via user interface in the browser and then uses checks if it was created via API:\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\nconst REPO = 'test-repo-1';\nconst USER = 'github-username';\n\n// Request context is reused by all tests in the file.\nlet apiContext;\n\ntest.beforeAll(async ({ playwright }) => {\n  apiContext = await playwright.request.newContext({\n    // All requests we send go to this API endpoint.\n    baseURL: 'https://api.github.com',\n    extraHTTPHeaders: {\n      // We set this header per GitHub guidelines.\n      'Accept': 'application/vnd.github.v3+json',\n      // Add authorization token to all requests.\n      // Assuming personal access token available in the environment.\n      'Authorization': `token ${process.env.API_TOKEN}`,\n    },\n  });\n});\n\ntest.afterAll(async ({ }) => {\n  // Dispose all responses.\n  await apiContext.dispose();\n});\n\ntest('last created issue should be on the server', async ({ page }) => {\n  await page.goto(`https://github.com/${USER}/${REPO}/issues`);\n  await page.getByText('New Issue').click();\n  await page.getByRole('textbox', { name: 'Title' }).fill('Bug report 1');\n  await page.getByRole('textbox', { name: 'Comment body' }).fill('Bug description');\n  await page.getByText('Submit new issue').click();\n  const issueId = page.url().substr(page.url().lastIndexOf('/'));\n\n  const newIssue = await apiContext.get(\n      `https://api.github.com/repos/${USER}/${REPO}/issues/${issueId}`\n  );\n  expect(newIssue.ok()).toBeTruthy();\n  expect(newIssue.json()).toEqual(expect.objectContaining({\n    title: 'Bug report 1'\n  }));\n});\n```\n\n## Reusing authentication state[​](#reusing-authentication-state \"Direct link to Reusing authentication state\")\n\nWeb apps use cookie-based or token-based authentication, where authenticated state is stored as [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies). Playwright provides [apiRequestContext.storageState()](api/class-apirequestcontext#api-request-context-storage-state) method that can be used to retrieve storage state from an authenticated context and then create new contexts with that state.\n\nStorage state is interchangeable between [BrowserContext](api/class-browsercontext \"BrowserContext\") and [APIRequestContext](api/class-apirequestcontext \"APIRequestContext\"). You can use it to log in via API calls and then create a new context with cookies already there. The following code snippet retrieves state from an authenticated [APIRequestContext](api/class-apirequestcontext \"APIRequestContext\") and creates a new [BrowserContext](api/class-browsercontext \"BrowserContext\") with that state.\n\n``` javascript\nconst requestContext = await request.newContext({\n  httpCredentials: {\n    username: 'user',\n    password: 'passwd'\n  }\n});\nawait requestContext.get(`https://api.example.com/login`);\n// Save storage state into the file.\nawait requestContext.storageState({ path: 'state.json' });\n\n// Create a new context with the saved storage state.\nconst context = await browser.newContext({ storageState: 'state.json' });\n```\n\n## Context request vs global request[​](#context-request-vs-global-request \"Direct link to Context request vs global request\")\n\nThere are two types of [APIRequestContext](api/class-apirequestcontext \"APIRequestContext\"):\n\n- associated with a [BrowserContext](api/class-browsercontext \"BrowserContext\")\n- isolated instance, created via [apiRequest.newContext()](api/class-apirequest#api-request-new-context)\n\nThe main difference is that [APIRequestContext](api/class-apirequestcontext \"APIRequestContext\") accessible via [browserContext.request](api/class-browsercontext#browser-context-request) and [page.request](api/class-page#page-request) will populate request's `Cookie` header from the browser context and will automatically update browser cookies if [APIResponse](api/class-apiresponse \"APIResponse\") has `Set-Cookie` header:\n\n``` javascript\ntest('context request will share cookie storage with its browser context', async ({\n  page,\n  context,\n}) => {\n  await context.route('https://www.github.com/', async route => {\n    // Send an API request that shares cookie storage with the browser context.\n    const response = await context.request.fetch(route.request());\n    const responseHeaders = response.headers();\n\n    // The response will have 'Set-Cookie' header.\n    const responseCookies = new Map(responseHeaders['set-cookie']\n        .split('\\n')\n        .map(c => c.split(';', 2)[0].split('=')));\n    // The response will have 3 cookies in 'Set-Cookie' header.\n    expect(responseCookies.size).toBe(3);\n    const contextCookies = await context.cookies();\n    // The browser context will already contain all the cookies from the API response.\n    expect(new Map(contextCookies.map(({ name, value }) =>\n      [name, value])\n    )).toEqual(responseCookies);\n\n    await route.fulfill({\n      response,\n      headers: { ...responseHeaders, foo: 'bar' },\n    });\n  });\n  await page.goto('https://www.github.com/');\n});\n```\n\nIf you don't want [APIRequestContext](api/class-apirequestcontext \"APIRequestContext\") to use and update cookies from the browser context, you can manually create a new instance of [APIRequestContext](api/class-apirequestcontext \"APIRequestContext\") which will have its own isolated cookies:\n\n``` javascript\ntest('global context request has isolated cookie storage', async ({\n  page,\n  context,\n  browser,\n  playwright\n}) => {\n  // Create a new instance of APIRequestContext with isolated cookie storage.\n  const request = await playwright.request.newContext();\n  await context.route('https://www.github.com/', async route => {\n    const response = await request.fetch(route.request());\n    const responseHeaders = response.headers();\n\n    const responseCookies = new Map(responseHeaders['set-cookie']\n        .split('\\n')\n        .map(c => c.split(';', 2)[0].split('=')));\n    // The response will have 3 cookies in 'Set-Cookie' header.\n    expect(responseCookies.size).toBe(3);\n    const contextCookies = await context.cookies();\n    // The browser context will not have any cookies from the isolated API request.\n    expect(contextCookies.length).toBe(0);\n\n    // Manually export cookie storage.\n    const storageState = await request.storageState();\n    // Create a new context and initialize it with the cookies from the global request.\n    const browserContext2 = await browser.newContext({ storageState });\n    const contextCookies2 = await browserContext2.cookies();\n    // The new browser context will already contain all the cookies from the API response.\n    expect(\n        new Map(contextCookies2.map(({ name, value }) => [name, value]))\n    ).toEqual(responseCookies);\n\n    await route.fulfill({\n      response,\n      headers: { ...responseHeaders, foo: 'bar' },\n    });\n  });\n  await page.goto('https://www.github.com/');\n  await request.dispose();\n});\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api-testing](https://playwright.dev/docs/api-testing)"
- name: APIRequest
  id: api/class-apirequest
  summary: Exposes API that can be used for the Web API testing
  description: "# APIRequest\n\nExposes API that can be used for the Web API testing. This class is used for creating [APIRequestContext](class-apirequestcontext \"APIRequestContext\") instance which in turn can be used for sending web requests. An instance of this class can be obtained via [playwright.request](class-playwright#playwright-request). For more information see [APIRequestContext](class-apirequestcontext \"APIRequestContext\").\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### newContext[​](#api-request-new-context \"Direct link to newContext\")\n\nCreates new instances of [APIRequestContext](class-apirequestcontext \"APIRequestContext\").\n\n**Usage**\n\n``` javascript\nawait apiRequest.newContext();\nawait apiRequest.newContext(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `baseURL` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Methods like [apiRequestContext.get()](class-apirequestcontext#api-request-context-get) take the base URL into consideration by using the [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL. Examples:\n\n    - baseURL: `http://localhost:3000` and sending request to `/bar.html` results in `http://localhost:3000/bar.html`\n    - baseURL: `http://localhost:3000/foo/` and sending request to `./bar.html` results in `http://localhost:3000/foo/bar.html`\n    - baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in `http://localhost:3000/bar.html`\n\n  - `clientCertificates` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Exact origin that the certificate is valid for. Origin includes `https` protocol, a hostname and optionally a port.\n\n    - `certPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Path to the file with the certificate in PEM format.\n\n    - `keyPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Path to the file with the private key in PEM format.\n\n    - `pfxPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Path to the PFX or PKCS12 encoded private key and certificate chain.\n\n    - `passphrase` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Passphrase for the private key (PEM or PFX).\n\n    TLS Client Authentication allows the server to request a client certificate and verify it.\n\n    **Details**\n\n    An array of client certificates to be used. Each certificate object must have both `certPath` and `keyPath` or a single `pfxPath` to load the client certificate. Optionally, `passphrase` property should be provided if the certficiate is encrypted. The `origin` property should be provided with an exact match to the request origin that the certificate is valid for.\n\n    > note\n    >\n    > Using Client Certificates in combination with Proxy Servers is not supported.\n\n    > note\n    >\n    > When using WebKit on macOS, accessing `localhost` will not pick up client certificates. You can make it work by replacing `localhost` with `local.playwright`.\n\n  - `extraHTTPHeaders` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    An object containing additional HTTP headers to be sent with every request. Defaults to none.\n\n  - `httpCredentials` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Restrain sending http credentials on specific origin (scheme://host:port).\n\n    - `send` \"unauthorized\" \\| \"always\" *(optional)*\n\n      This option only applies to the requests sent from corresponding [APIRequestContext](class-apirequestcontext \"APIRequestContext\") and does not affect requests sent from the browser. `'always'` - `Authorization` header with basic authentication credentials will be sent with the each API request. `'unauthorized` - the credentials are only sent when 401 (Unauthorized) response with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.\n\n    Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no origin is specified, the username and password are sent to any servers upon unauthorized responses.\n\n  - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.\n\n  - `proxy` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `server` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.\n\n    - `bypass` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional comma-separated domains to bypass proxy, for example `\".com, chromium.org, .domain.com\"`.\n\n    - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional username to use if HTTP proxy requires authentication.\n\n    - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional password to use if HTTP proxy requires authentication.\n\n    Network proxy settings.\n\n  - `storageState` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `cookies` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n      - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      - `domain` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      - `expires` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n        Unix time in seconds.\n\n      - `httpOnly` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n      - `secure` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n      - `sameSite` \"Strict\" \\| \"Lax\" \\| \"None\"\n    - `origins` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n      - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      - `localStorage` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n        - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n        - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Populates context with given storage state. This option can be used to initialize context with logged-in information obtained via [browserContext.storageState()](class-browsercontext#browser-context-storage-state) or [apiRequestContext.storageState()](class-apirequestcontext#api-request-context-storage-state). Either a path to the file with saved storage, or the value returned by one of [browserContext.storageState()](class-browsercontext#browser-context-storage-state) or [apiRequestContext.storageState()](class-apirequestcontext#api-request-context-storage-state) methods.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds to wait for the response. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.\n\n  - `userAgent` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Specific user agent to use in this context.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[APIRequestContext](class-apirequestcontext \"APIRequestContext\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-apirequest](https://playwright.dev/docs/api/class-apirequest)"
- name: apiRequest.newContext
  id: api/class-apirequest#api-request-new-context
  summary: Creates new instances of APIRequestContext
  belongs_to: APIRequest
  description: "### newContext[​](#api-request-new-context \"Direct link to newContext\")\n\nCreates new instances of [APIRequestContext](class-apirequestcontext \"APIRequestContext\").\n\n**Usage**\n\n``` javascript\nawait apiRequest.newContext();\nawait apiRequest.newContext(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `baseURL` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Methods like [apiRequestContext.get()](class-apirequestcontext#api-request-context-get) take the base URL into consideration by using the [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL. Examples:\n\n    - baseURL: `http://localhost:3000` and sending request to `/bar.html` results in `http://localhost:3000/bar.html`\n    - baseURL: `http://localhost:3000/foo/` and sending request to `./bar.html` results in `http://localhost:3000/foo/bar.html`\n    - baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in `http://localhost:3000/bar.html`\n\n  - `clientCertificates`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Exact origin that the certificate is valid for. Origin includes `https` protocol, a hostname and optionally a port.\n\n    - `certPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Path to the file with the certificate in PEM format.\n\n    - `keyPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Path to the file with the private key in PEM format.\n\n    - `pfxPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Path to the PFX or PKCS12 encoded private key and certificate chain.\n\n    - `passphrase` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Passphrase for the private key (PEM or PFX).\n\n    TLS Client Authentication allows the server to request a client certificate and verify it.\n\n    **Details**\n\n    An array of client certificates to be used. Each certificate object must have both `certPath` and `keyPath` or a single `pfxPath` to load the client certificate. Optionally, `passphrase` property should be provided if the certficiate is encrypted. The `origin` property should be provided with an exact match to the request origin that the certificate is valid for.\n\n    > note\n    >\n    > Using Client Certificates in combination with Proxy Servers is not supported.\n\n    > note\n    >\n    > When using WebKit on macOS, accessing `localhost` will not pick up client certificates. You can make it work by replacing `localhost` with `local.playwright`.\n\n  - `extraHTTPHeaders`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    An object containing additional HTTP headers to be sent with every request. Defaults to none.\n\n  - `httpCredentials` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Restrain sending http credentials on specific origin (scheme://host:port).\n\n    - `send` \"unauthorized\" \\| \"always\" *(optional)*\n\n      This option only applies to the requests sent from corresponding [APIRequestContext](class-apirequestcontext \"APIRequestContext\") and does not affect requests sent from the browser. `'always'` - `Authorization` header with basic authentication credentials will be sent with the each API request. `'unauthorized` - the credentials are only sent when 401 (Unauthorized) response with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.\n\n    Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no origin is specified, the username and password are sent to any servers upon unauthorized responses.\n\n  - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.\n\n  - `proxy` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `server` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.\n\n    - `bypass` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional comma-separated domains to bypass proxy, for example `\".com, chromium.org, .domain.com\"`.\n\n    - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional username to use if HTTP proxy requires authentication.\n\n    - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional password to use if HTTP proxy requires authentication.\n\n    Network proxy settings.\n\n  - `storageState`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `cookies`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n      - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      - `value`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      - `domain`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      - `path`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      - `expires`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n        Unix time in seconds.\n\n      - `httpOnly`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n      - `secure`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n      - `sameSite` \"Strict\" \\| \"Lax\" \\| \"None\"\n    - `origins`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n      - `origin`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      - `localStorage`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n        - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n        - `value`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Populates context with given storage state. This option can be used to initialize context with logged-in information obtained via [browserContext.storageState()](class-browsercontext#browser-context-storage-state) or [apiRequestContext.storageState()](class-apirequestcontext#api-request-context-storage-state). Either a path to the file with saved storage, or the value returned by one of [browserContext.storageState()](class-browsercontext#browser-context-storage-state) or [apiRequestContext.storageState()](class-apirequestcontext#api-request-context-storage-state) methods.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds to wait for the response. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.\n\n  - `userAgent` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Specific user agent to use in this context.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[APIRequestContext](class-apirequestcontext \"APIRequestContext\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-apirequest](https://playwright.dev/docs/api/class-apirequest)"
- name: APIRequestContext
  id: api/class-apirequestcontext
  summary: This API is used for the Web API testing
  description: "# APIRequestContext\n\nThis API is used for the Web API testing. You can use it to trigger API endpoints, configure micro-services, prepare environment or the service to your e2e test.\n\nEach Playwright browser context has associated with it [APIRequestContext](class-apirequestcontext \"APIRequestContext\") instance which shares cookie storage with the browser context and can be accessed via [browserContext.request](class-browsercontext#browser-context-request) or [page.request](class-page#page-request). It is also possible to create a new APIRequestContext instance manually by calling [apiRequest.newContext()](class-apirequest#api-request-new-context).\n\n**Cookie management**\n\n[APIRequestContext](class-apirequestcontext \"APIRequestContext\") returned by [browserContext.request](class-browsercontext#browser-context-request) and [page.request](class-page#page-request) shares cookie storage with the corresponding [BrowserContext](class-browsercontext \"BrowserContext\"). Each API request will have `Cookie` header populated with the values from the browser context. If the API response contains `Set-Cookie` header it will automatically update [BrowserContext](class-browsercontext \"BrowserContext\") cookies and requests made from the page will pick them up. This means that if you log in using this API, your e2e test will be logged in and vice versa.\n\nIf you want API requests to not interfere with the browser cookies you should create a new [APIRequestContext](class-apirequestcontext \"APIRequestContext\") by calling [apiRequest.newContext()](class-apirequest#api-request-new-context). Such `APIRequestContext` object will have its own isolated cookie storage.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### delete[​](#api-request-context-delete \"Direct link to delete\")\n\nSends HTTP(S) [DELETE](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE) request and returns its response. The method will populate request cookies from the context and update context cookies from the response. The method will automatically follow redirects.\n\n**Usage**\n\n``` javascript\nawait apiRequestContext.delete(url);\nawait apiRequestContext.delete(url, options);\n```\n\n**Arguments**\n\n- `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Target URL.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `data` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\") \\| [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\") *(optional)*\n\n    Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.\n\n  - `failOnStatusCode` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status codes.\n\n  - `form` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\> *(optional)*\n\n    Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `application/x-www-form-urlencoded` unless explicitly provided.\n\n  - `headers` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by it.\n\n  - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.\n\n  - `maxRedirects` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.\n\n  - `maxRetries` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.\n\n  - `multipart` [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData \"FormData\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") \\| [ReadStream](https://nodejs.org/api/fs.html#class-fsreadstream \"ReadStream\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      File name\n\n    - `mimeType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      File type\n\n    - `buffer` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\n\n      File content\n\n    Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly provided. File values can be passed either as [`fs.ReadStream`](https://nodejs.org/api/fs.html#fs_class_fs_readstream) or as file-like object containing file name, mime-type and its content.\n\n  - `params` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\> *(optional)*\n\n    Query parameters to be sent with the URL.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[APIResponse](class-apiresponse \"APIResponse\")\\>\n\n### dispose[​](#api-request-context-dispose \"Direct link to dispose\")\n\nAll responses returned by [apiRequestContext.get()](class-apirequestcontext#api-request-context-get) and similar methods are stored in the memory, so that you can later call [apiResponse.body()](class-apiresponse#api-response-body).This method discards all its resources, calling any method on disposed [APIRequestContext](class-apirequestcontext \"APIRequestContext\") will throw an exception.\n\n**Usage**\n\n``` javascript\nawait apiRequestContext.dispose();\nawait apiRequestContext.dispose(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `reason` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    The reason to be reported to the operations interrupted by the context disposal.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### fetch[​](#api-request-context-fetch \"Direct link to fetch\")\n\nSends HTTP(S) request and returns its response. The method will populate request cookies from the context and update context cookies from the response. The method will automatically follow redirects.\n\n**Usage**\n\nJSON objects can be passed directly to the request:\n\n``` javascript\nawait request.fetch('https://example.com/api/createBook', {\n  method: 'post',\n  data: {\n    title: 'Book Title',\n    author: 'John Doe',\n  }\n});\n```\n\nThe common way to send file(s) in the body of a request is to upload them as form fields with `multipart/form-data` encoding. Use [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData \"FormData\") to construct request body and pass it to the request as `multipart` parameter:\n\n``` javascript\nconst form = new FormData();\nform.set('name', 'John');\nform.append('name', 'Doe');\n// Send two file fields with the same name.\nform.append('file', new File(['console.log(2024);'], 'f1.js', { type: 'text/javascript' }));\nform.append('file', new File(['hello'], 'f2.txt', { type: 'text/plain' }));\nawait request.fetch('https://example.com/api/uploadForm', {\n  multipart: form\n});\n```\n\n**Arguments**\n\n- `urlOrRequest` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Request](class-request \"Request\")\n\n  Target URL or Request to get all parameters from.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `data` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\") \\| [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\") *(optional)*\n\n    Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.\n\n  - `failOnStatusCode` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status codes.\n\n  - `form` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\> *(optional)*\n\n    Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `application/x-www-form-urlencoded` unless explicitly provided.\n\n  - `headers` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by it.\n\n  - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.\n\n  - `maxRedirects` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.\n\n  - `maxRetries` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.\n\n  - `method` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    If set changes the fetch method (e.g. [PUT](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT) or [POST](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST)). If not specified, GET method is used.\n\n  - `multipart` [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData \"FormData\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") \\| [ReadStream](https://nodejs.org/api/fs.html#class-fsreadstream \"ReadStream\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      File name\n\n    - `mimeType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      File type\n\n    - `buffer` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\n\n      File content\n\n    Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly provided. File values can be passed either as [`fs.ReadStream`](https://nodejs.org/api/fs.html#fs_class_fs_readstream) or as file-like object containing file name, mime-type and its content.\n\n  - `params` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\> *(optional)*\n\n    Query parameters to be sent with the URL.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[APIResponse](class-apiresponse \"APIResponse\")\\>\n\n### get[​](#api-request-context-get \"Direct link to get\")\n\nSends HTTP(S) [GET](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET) request and returns its response. The method will populate request cookies from the context and update context cookies from the response. The method will automatically follow redirects.\n\n**Usage**\n\nRequest parameters can be configured with `params` option, they will be serialized into the URL search parameters:\n\n``` javascript\nawait request.get('https://example.com/api/getText', {\n  params: {\n    'isbn': '1234',\n    'page': 23,\n  }\n});\n```\n\n**Arguments**\n\n- `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Target URL.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `data` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\") \\| [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\") *(optional)*\n\n    Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.\n\n  - `failOnStatusCode` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status codes.\n\n  - `form` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\> *(optional)*\n\n    Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `application/x-www-form-urlencoded` unless explicitly provided.\n\n  - `headers` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by it.\n\n  - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.\n\n  - `maxRedirects` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.\n\n  - `maxRetries` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.\n\n  - `multipart` [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData \"FormData\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") \\| [ReadStream](https://nodejs.org/api/fs.html#class-fsreadstream \"ReadStream\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      File name\n\n    - `mimeType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      File type\n\n    - `buffer` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\n\n      File content\n\n    Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly provided. File values can be passed either as [`fs.ReadStream`](https://nodejs.org/api/fs.html#fs_class_fs_readstream) or as file-like object containing file name, mime-type and its content.\n\n  - `params` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\> *(optional)*\n\n    Query parameters to be sent with the URL.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[APIResponse](class-apiresponse \"APIResponse\")\\>\n\n### head[​](#api-request-context-head \"Direct link to head\")\n\nSends HTTP(S) [HEAD](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD) request and returns its response. The method will populate request cookies from the context and update context cookies from the response. The method will automatically follow redirects.\n\n**Usage**\n\n``` javascript\nawait apiRequestContext.head(url);\nawait apiRequestContext.head(url, options);\n```\n\n**Arguments**\n\n- `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Target URL.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `data` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\") \\| [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\") *(optional)*\n\n    Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.\n\n  - `failOnStatusCode` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status codes.\n\n  - `form` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\> *(optional)*\n\n    Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `application/x-www-form-urlencoded` unless explicitly provided.\n\n  - `headers` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by it.\n\n  - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.\n\n  - `maxRedirects` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.\n\n  - `maxRetries` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.\n\n  - `multipart` [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData \"FormData\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") \\| [ReadStream](https://nodejs.org/api/fs.html#class-fsreadstream \"ReadStream\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      File name\n\n    - `mimeType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      File type\n\n    - `buffer` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\n\n      File content\n\n    Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly provided. File values can be passed either as [`fs.ReadStream`](https://nodejs.org/api/fs.html#fs_class_fs_readstream) or as file-like object containing file name, mime-type and its content.\n\n  - `params` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\> *(optional)*\n\n    Query parameters to be sent with the URL.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[APIResponse](class-apiresponse \"APIResponse\")\\>\n\n### patch[​](#api-request-context-patch \"Direct link to patch\")\n\nSends HTTP(S) [PATCH](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH) request and returns its response. The method will populate request cookies from the context and update context cookies from the response. The method will automatically follow redirects.\n\n**Usage**\n\n``` javascript\nawait apiRequestContext.patch(url);\nawait apiRequestContext.patch(url, options);\n```\n\n**Arguments**\n\n- `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Target URL.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `data` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\") \\| [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\") *(optional)*\n\n    Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.\n\n  - `failOnStatusCode` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status codes.\n\n  - `form` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\> *(optional)*\n\n    Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `application/x-www-form-urlencoded` unless explicitly provided.\n\n  - `headers` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by it.\n\n  - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.\n\n  - `maxRedirects` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.\n\n  - `maxRetries` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.\n\n  - `multipart` [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData \"FormData\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") \\| [ReadStream](https://nodejs.org/api/fs.html#class-fsreadstream \"ReadStream\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      File name\n\n    - `mimeType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      File type\n\n    - `buffer` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\n\n      File content\n\n    Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly provided. File values can be passed either as [`fs.ReadStream`](https://nodejs.org/api/fs.html#fs_class_fs_readstream) or as file-like object containing file name, mime-type and its content.\n\n  - `params` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\> *(optional)*\n\n    Query parameters to be sent with the URL.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[APIResponse](class-apiresponse \"APIResponse\")\\>\n\n### post[​](#api-request-context-post \"Direct link to post\")\n\nSends HTTP(S) [POST](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) request and returns its response. The method will populate request cookies from the context and update context cookies from the response. The method will automatically follow redirects.\n\n**Usage**\n\nJSON objects can be passed directly to the request:\n\n``` javascript\nawait request.post('https://example.com/api/createBook', {\n  data: {\n    title: 'Book Title',\n    author: 'John Doe',\n  }\n});\n```\n\nTo send form data to the server use `form` option. Its value will be encoded into the request body with `application/x-www-form-urlencoded` encoding (see below how to use `multipart/form-data` form encoding to send files):\n\n``` javascript\nawait request.post('https://example.com/api/findBook', {\n  form: {\n    title: 'Book Title',\n    author: 'John Doe',\n  }\n});\n```\n\nThe common way to send file(s) in the body of a request is to upload them as form fields with `multipart/form-data` encoding. Use [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData \"FormData\") to construct request body and pass it to the request as `multipart` parameter:\n\n``` javascript\nconst form = new FormData();\nform.set('name', 'John');\nform.append('name', 'Doe');\n// Send two file fields with the same name.\nform.append('file', new File(['console.log(2024);'], 'f1.js', { type: 'text/javascript' }));\nform.append('file', new File(['hello'], 'f2.txt', { type: 'text/plain' }));\nawait request.post('https://example.com/api/uploadForm', {\n  multipart: form\n});\n```\n\n**Arguments**\n\n- `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Target URL.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `data` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\") \\| [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\") *(optional)*\n\n    Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.\n\n  - `failOnStatusCode` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status codes.\n\n  - `form` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\> *(optional)*\n\n    Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `application/x-www-form-urlencoded` unless explicitly provided.\n\n  - `headers` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by it.\n\n  - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.\n\n  - `maxRedirects` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.\n\n  - `maxRetries` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.\n\n  - `multipart` [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData \"FormData\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") \\| [ReadStream](https://nodejs.org/api/fs.html#class-fsreadstream \"ReadStream\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      File name\n\n    - `mimeType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      File type\n\n    - `buffer` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\n\n      File content\n\n    Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly provided. File values can be passed either as [`fs.ReadStream`](https://nodejs.org/api/fs.html#fs_class_fs_readstream) or as file-like object containing file name, mime-type and its content.\n\n  - `params` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\> *(optional)*\n\n    Query parameters to be sent with the URL.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[APIResponse](class-apiresponse \"APIResponse\")\\>\n\n### put[​](#api-request-context-put \"Direct link to put\")\n\nSends HTTP(S) [PUT](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT) request and returns its response. The method will populate request cookies from the context and update context cookies from the response. The method will automatically follow redirects.\n\n**Usage**\n\n``` javascript\nawait apiRequestContext.put(url);\nawait apiRequestContext.put(url, options);\n```\n\n**Arguments**\n\n- `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Target URL.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `data` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\") \\| [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\") *(optional)*\n\n    Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.\n\n  - `failOnStatusCode` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status codes.\n\n  - `form` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\> *(optional)*\n\n    Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `application/x-www-form-urlencoded` unless explicitly provided.\n\n  - `headers` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by it.\n\n  - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.\n\n  - `maxRedirects` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.\n\n  - `maxRetries` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.\n\n  - `multipart` [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData \"FormData\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") \\| [ReadStream](https://nodejs.org/api/fs.html#class-fsreadstream \"ReadStream\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      File name\n\n    - `mimeType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      File type\n\n    - `buffer` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\n\n      File content\n\n    Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly provided. File values can be passed either as [`fs.ReadStream`](https://nodejs.org/api/fs.html#fs_class_fs_readstream) or as file-like object containing file name, mime-type and its content.\n\n  - `params` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\> *(optional)*\n\n    Query parameters to be sent with the URL.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[APIResponse](class-apiresponse \"APIResponse\")\\>\n\n### storageState[​](#api-request-context-storage-state \"Direct link to storageState\")\n\nReturns storage state for this request context, contains current cookies and local storage snapshot if it was passed to the constructor.\n\n**Usage**\n\n``` javascript\nawait apiRequestContext.storageState();\nawait apiRequestContext.storageState(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    The file path to save the storage state to. If `path` is a relative path, then it is resolved relative to current working directory. If no path is provided, storage state is still returned, but won't be saved to the disk.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `cookies` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `domain` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `expires` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Unix time in seconds.\n\n    - `httpOnly` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    - `secure` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    - `sameSite` \"Strict\" \\| \"Lax\" \\| \"None\"\n  - `origins` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n    - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `localStorage` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n      - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-apirequestcontext](https://playwright.dev/docs/api/class-apirequestcontext)"
- name: apiRequestContext.delete
  id: api/class-apirequestcontext#api-request-context-delete
  summary: Sends HTTP(S) DELETE request and returns its response
  belongs_to: APIRequestContext
  description: |-
    ### delete[​](#api-request-context-delete "Direct link to delete")

    Sends HTTP(S) [DELETE](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE) request and returns its response. The method will populate request cookies from the context and update context cookies from the response. The method will automatically follow redirects.

    **Usage**

    ``` javascript
    await apiRequestContext.delete(url);
    await apiRequestContext.delete(url, options);
    ```

    **Arguments**

    - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Target URL.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `data`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer") \| [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") *(optional)*

        Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.

      - `failOnStatusCode` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status codes.

      - `form`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> *(optional)*

        Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `application/x-www-form-urlencoded` unless explicitly provided.

      - `headers`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by it.

      - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

      - `maxRedirects` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.

      - `maxRetries` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.

      - `multipart`[FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData "FormData") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") \| [ReadStream](https://nodejs.org/api/fs.html#class-fsreadstream "ReadStream") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> *(optional)*

        - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          File name

        - `mimeType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          File type

        - `buffer` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")

          File content

        Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly provided. File values can be passed either as [`fs.ReadStream`](https://nodejs.org/api/fs.html#fs_class_fs_readstream) or as file-like object containing file name, mime-type and its content.

      - `params`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> *(optional)*

        Query parameters to be sent with the URL.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[APIResponse](class-apiresponse "APIResponse")\>
- name: apiRequestContext.dispose
  id: api/class-apirequestcontext#api-request-context-dispose
  summary: All responses returned by apiRequestContext.get() and similar methods are stored in the memory, so that you can later call apiResponse.body().This method discards all its resources, calling any method on disposed APIRequestContext will throw an exception
  belongs_to: APIRequestContext
  description: |-
    ### dispose[​](#api-request-context-dispose "Direct link to dispose")

    All responses returned by [apiRequestContext.get()](class-apirequestcontext#api-request-context-get) and similar methods are stored in the memory, so that you can later call [apiResponse.body()](class-apiresponse#api-response-body).This method discards all its resources, calling any method on disposed [APIRequestContext](class-apirequestcontext "APIRequestContext") will throw an exception.

    **Usage**

    ``` javascript
    await apiRequestContext.dispose();
    await apiRequestContext.dispose(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `reason` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        The reason to be reported to the operations interrupted by the context disposal.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: apiRequestContext.fetch
  id: api/class-apirequestcontext#api-request-context-fetch
  summary: Sends HTTP(S) request and returns its response
  belongs_to: APIRequestContext
  description: |-
    ### fetch[​](#api-request-context-fetch "Direct link to fetch")

    Sends HTTP(S) request and returns its response. The method will populate request cookies from the context and update context cookies from the response. The method will automatically follow redirects.

    **Usage**

    JSON objects can be passed directly to the request:

    ``` javascript
    await request.fetch('https://example.com/api/createBook', {
      method: 'post',
      data: {
        title: 'Book Title',
        author: 'John Doe',
      }
    });
    ```

    The common way to send file(s) in the body of a request is to upload them as form fields with `multipart/form-data` encoding. Use [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData "FormData") to construct request body and pass it to the request as `multipart` parameter:

    ``` javascript
    const form = new FormData();
    form.set('name', 'John');
    form.append('name', 'Doe');
    // Send two file fields with the same name.
    form.append('file', new File(['console.log(2024);'], 'f1.js', { type: 'text/javascript' }));
    form.append('file', new File(['hello'], 'f2.txt', { type: 'text/plain' }));
    await request.fetch('https://example.com/api/uploadForm', {
      multipart: form
    });
    ```

    **Arguments**

    - `urlOrRequest`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Request](class-request "Request")

      Target URL or Request to get all parameters from.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `data`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer") \| [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") *(optional)*

        Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.

      - `failOnStatusCode` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status codes.

      - `form`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> *(optional)*

        Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `application/x-www-form-urlencoded` unless explicitly provided.

      - `headers`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by it.

      - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

      - `maxRedirects` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.

      - `maxRetries` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.

      - `method` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        If set changes the fetch method (e.g. [PUT](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT) or [POST](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST)). If not specified, GET method is used.

      - `multipart`[FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData "FormData") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") \| [ReadStream](https://nodejs.org/api/fs.html#class-fsreadstream "ReadStream") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> *(optional)*

        - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          File name

        - `mimeType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          File type

        - `buffer` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")

          File content

        Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly provided. File values can be passed either as [`fs.ReadStream`](https://nodejs.org/api/fs.html#fs_class_fs_readstream) or as file-like object containing file name, mime-type and its content.

      - `params`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> *(optional)*

        Query parameters to be sent with the URL.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[APIResponse](class-apiresponse "APIResponse")\>

    &nbsp;
- name: apiRequestContext.get
  id: api/class-apirequestcontext#api-request-context-get
  summary: Sends HTTP(S) GET request and returns its response
  belongs_to: APIRequestContext
  description: |-
    ### get[​](#api-request-context-get "Direct link to get")

    Sends HTTP(S) [GET](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET) request and returns its response. The method will populate request cookies from the context and update context cookies from the response. The method will automatically follow redirects.

    **Usage**

    Request parameters can be configured with `params` option, they will be serialized into the URL search parameters:

    ``` javascript
    await request.get('https://example.com/api/getText', {
      params: {
        'isbn': '1234',
        'page': 23,
      }
    });
    ```

    **Arguments**

    - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Target URL.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `data`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer") \| [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") *(optional)*

        Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.

      - `failOnStatusCode` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status codes.

      - `form`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> *(optional)*

        Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `application/x-www-form-urlencoded` unless explicitly provided.

      - `headers`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by it.

      - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

      - `maxRedirects` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.

      - `maxRetries` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.

      - `multipart`[FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData "FormData") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") \| [ReadStream](https://nodejs.org/api/fs.html#class-fsreadstream "ReadStream") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> *(optional)*

        - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          File name

        - `mimeType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          File type

        - `buffer` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")

          File content

        Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly provided. File values can be passed either as [`fs.ReadStream`](https://nodejs.org/api/fs.html#fs_class_fs_readstream) or as file-like object containing file name, mime-type and its content.

      - `params`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> *(optional)*

        Query parameters to be sent with the URL.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[APIResponse](class-apiresponse "APIResponse")\>

    &nbsp;
- name: apiRequestContext.head
  id: api/class-apirequestcontext#api-request-context-head
  summary: Sends HTTP(S) HEAD request and returns its response
  belongs_to: APIRequestContext
  description: |-
    ### head[​](#api-request-context-head "Direct link to head")

    Sends HTTP(S) [HEAD](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD) request and returns its response. The method will populate request cookies from the context and update context cookies from the response. The method will automatically follow redirects.

    **Usage**

    ``` javascript
    await apiRequestContext.head(url);
    await apiRequestContext.head(url, options);
    ```

    **Arguments**

    - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Target URL.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `data`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer") \| [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") *(optional)*

        Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.

      - `failOnStatusCode` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status codes.

      - `form`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> *(optional)*

        Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `application/x-www-form-urlencoded` unless explicitly provided.

      - `headers`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by it.

      - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

      - `maxRedirects` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.

      - `maxRetries` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.

      - `multipart`[FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData "FormData") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") \| [ReadStream](https://nodejs.org/api/fs.html#class-fsreadstream "ReadStream") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> *(optional)*

        - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          File name

        - `mimeType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          File type

        - `buffer` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")

          File content

        Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly provided. File values can be passed either as [`fs.ReadStream`](https://nodejs.org/api/fs.html#fs_class_fs_readstream) or as file-like object containing file name, mime-type and its content.

      - `params`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> *(optional)*

        Query parameters to be sent with the URL.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[APIResponse](class-apiresponse "APIResponse")\>

    &nbsp;
- name: apiRequestContext.patch
  id: api/class-apirequestcontext#api-request-context-patch
  summary: Sends HTTP(S) PATCH request and returns its response
  belongs_to: APIRequestContext
  description: |-
    ### patch[​](#api-request-context-patch "Direct link to patch")

    Sends HTTP(S) [PATCH](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH) request and returns its response. The method will populate request cookies from the context and update context cookies from the response. The method will automatically follow redirects.

    **Usage**

    ``` javascript
    await apiRequestContext.patch(url);
    await apiRequestContext.patch(url, options);
    ```

    **Arguments**

    - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Target URL.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `data`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer") \| [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") *(optional)*

        Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.

      - `failOnStatusCode` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status codes.

      - `form`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> *(optional)*

        Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `application/x-www-form-urlencoded` unless explicitly provided.

      - `headers`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by it.

      - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

      - `maxRedirects` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.

      - `maxRetries` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.

      - `multipart`[FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData "FormData") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") \| [ReadStream](https://nodejs.org/api/fs.html#class-fsreadstream "ReadStream") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> *(optional)*

        - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          File name

        - `mimeType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          File type

        - `buffer` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")

          File content

        Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly provided. File values can be passed either as [`fs.ReadStream`](https://nodejs.org/api/fs.html#fs_class_fs_readstream) or as file-like object containing file name, mime-type and its content.

      - `params`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> *(optional)*

        Query parameters to be sent with the URL.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[APIResponse](class-apiresponse "APIResponse")\>

    &nbsp;
- name: apiRequestContext.post
  id: api/class-apirequestcontext#api-request-context-post
  summary: Sends HTTP(S) POST request and returns its response
  belongs_to: APIRequestContext
  description: |-
    ### post[​](#api-request-context-post "Direct link to post")

    Sends HTTP(S) [POST](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) request and returns its response. The method will populate request cookies from the context and update context cookies from the response. The method will automatically follow redirects.

    **Usage**

    JSON objects can be passed directly to the request:

    ``` javascript
    await request.post('https://example.com/api/createBook', {
      data: {
        title: 'Book Title',
        author: 'John Doe',
      }
    });
    ```

    To send form data to the server use `form` option. Its value will be encoded into the request body with `application/x-www-form-urlencoded` encoding (see below how to use `multipart/form-data` form encoding to send files):

    ``` javascript
    await request.post('https://example.com/api/findBook', {
      form: {
        title: 'Book Title',
        author: 'John Doe',
      }
    });
    ```

    The common way to send file(s) in the body of a request is to upload them as form fields with `multipart/form-data` encoding. Use [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData "FormData") to construct request body and pass it to the request as `multipart` parameter:

    ``` javascript
    const form = new FormData();
    form.set('name', 'John');
    form.append('name', 'Doe');
    // Send two file fields with the same name.
    form.append('file', new File(['console.log(2024);'], 'f1.js', { type: 'text/javascript' }));
    form.append('file', new File(['hello'], 'f2.txt', { type: 'text/plain' }));
    await request.post('https://example.com/api/uploadForm', {
      multipart: form
    });
    ```

    **Arguments**

    - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Target URL.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `data`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer") \| [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") *(optional)*

        Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.

      - `failOnStatusCode` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status codes.

      - `form`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> *(optional)*

        Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `application/x-www-form-urlencoded` unless explicitly provided.

      - `headers`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by it.

      - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

      - `maxRedirects` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.

      - `maxRetries` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.

      - `multipart`[FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData "FormData") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") \| [ReadStream](https://nodejs.org/api/fs.html#class-fsreadstream "ReadStream") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> *(optional)*

        - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          File name

        - `mimeType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          File type

        - `buffer` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")

          File content

        Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly provided. File values can be passed either as [`fs.ReadStream`](https://nodejs.org/api/fs.html#fs_class_fs_readstream) or as file-like object containing file name, mime-type and its content.

      - `params`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> *(optional)*

        Query parameters to be sent with the URL.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[APIResponse](class-apiresponse "APIResponse")\>

    &nbsp;
- name: apiRequestContext.put
  id: api/class-apirequestcontext#api-request-context-put
  summary: Sends HTTP(S) PUT request and returns its response
  belongs_to: APIRequestContext
  description: |-
    ### put[​](#api-request-context-put "Direct link to put")

    Sends HTTP(S) [PUT](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT) request and returns its response. The method will populate request cookies from the context and update context cookies from the response. The method will automatically follow redirects.

    **Usage**

    ``` javascript
    await apiRequestContext.put(url);
    await apiRequestContext.put(url, options);
    ```

    **Arguments**

    - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Target URL.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `data`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer") \| [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") *(optional)*

        Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.

      - `failOnStatusCode` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status codes.

      - `form`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> *(optional)*

        Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `application/x-www-form-urlencoded` unless explicitly provided.

      - `headers`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by it.

      - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

      - `maxRedirects` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.

      - `maxRetries` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.

      - `multipart`[FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData "FormData") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") \| [ReadStream](https://nodejs.org/api/fs.html#class-fsreadstream "ReadStream") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> *(optional)*

        - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          File name

        - `mimeType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          File type

        - `buffer` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")

          File content

        Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly provided. File values can be passed either as [`fs.ReadStream`](https://nodejs.org/api/fs.html#fs_class_fs_readstream) or as file-like object containing file name, mime-type and its content.

      - `params`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> *(optional)*

        Query parameters to be sent with the URL.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[APIResponse](class-apiresponse "APIResponse")\>

    &nbsp;
- name: apiRequestContext.storageState
  id: api/class-apirequestcontext#api-request-context-storage-state
  summary: Returns storage state for this request context, contains current cookies and local storage snapshot if it was passed to the constructor
  belongs_to: APIRequestContext
  description: "### storageState[​](#api-request-context-storage-state \"Direct link to storageState\")\n\nReturns storage state for this request context, contains current cookies and local storage snapshot if it was passed to the constructor.\n\n**Usage**\n\n``` javascript\nawait apiRequestContext.storageState();\nawait apiRequestContext.storageState(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    The file path to save the storage state to. If `path` is a relative path, then it is resolved relative to current working directory. If no path is provided, storage state is still returned, but won't be saved to the disk.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `cookies`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n    - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `value`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `domain`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `path`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `expires`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Unix time in seconds.\n\n    - `httpOnly`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    - `secure`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    - `sameSite` \"Strict\" \\| \"Lax\" \\| \"None\"\n  - `origins`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n    - `origin`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `localStorage`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n      - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      - `value`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-apirequestcontext](https://playwright.dev/docs/api/class-apirequestcontext)"
- name: APIResponse
  id: api/class-apiresponse
  summary: APIResponse class represents responses returned by apiRequestContext.get() and similar methods
  description: "# APIResponse\n\n[APIResponse](class-apiresponse \"APIResponse\") class represents responses returned by [apiRequestContext.get()](class-apirequestcontext#api-request-context-get) and similar methods.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### body[​](#api-response-body \"Direct link to body\")\n\nReturns the buffer with response body.\n\n**Usage**\n\n``` javascript\nawait apiResponse.body();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\\>\n\n### dispose[​](#api-response-dispose \"Direct link to dispose\")\n\nDisposes the body of this response. If not called then the body will stay in memory until the context closes.\n\n**Usage**\n\n``` javascript\nawait apiResponse.dispose();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### headers[​](#api-response-headers \"Direct link to headers\")\n\nAn object with all the response HTTP headers associated with this response.\n\n**Usage**\n\n``` javascript\napiResponse.headers();\n```\n\n**Returns**\n\n- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### headersArray[​](#api-response-headers-array \"Direct link to headersArray\")\n\nAn array with all the request HTTP headers associated with this response. Header names are not lower-cased. Headers with multiple entries, such as `Set-Cookie`, appear in the array multiple times.\n\n**Usage**\n\n``` javascript\napiResponse.headersArray();\n```\n\n**Returns**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Name of the header.\n\n  - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Value of the header.\n\n### json[​](#api-response-json \"Direct link to json\")\n\nReturns the JSON representation of response body.\n\nThis method will throw if the response body is not parsable via `JSON.parse`.\n\n**Usage**\n\n``` javascript\nawait apiResponse.json();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\")\\>\n\n### ok[​](#api-response-ok \"Direct link to ok\")\n\nContains a boolean stating whether the response was successful (status in the range 200-299) or not.\n\n**Usage**\n\n``` javascript\napiResponse.ok();\n```\n\n**Returns**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### status[​](#api-response-status \"Direct link to status\")\n\nContains the status code of the response (e.g., 200 for a success).\n\n**Usage**\n\n``` javascript\napiResponse.status();\n```\n\n**Returns**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### statusText[​](#api-response-status-text \"Direct link to statusText\")\n\nContains the status text of the response (e.g. usually an \"OK\" for a success).\n\n**Usage**\n\n``` javascript\napiResponse.statusText();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### text[​](#api-response-text \"Direct link to text\")\n\nReturns the text representation of response body.\n\n**Usage**\n\n``` javascript\nawait apiResponse.text();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### url[​](#api-response-url \"Direct link to url\")\n\nContains the URL of the response.\n\n**Usage**\n\n``` javascript\napiResponse.url();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-apiresponse](https://playwright.dev/docs/api/class-apiresponse)"
- name: apiResponse.body
  id: api/class-apiresponse#api-response-body
  summary: Returns the buffer with response body
  belongs_to: APIResponse
  description: |-
    ### body[​](#api-response-body "Direct link to body")

    Returns the buffer with response body.

    **Usage**

    ``` javascript
    await apiResponse.body();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")\>
- name: apiResponse.dispose
  id: api/class-apiresponse#api-response-dispose
  summary: Disposes the body of this response
  belongs_to: APIResponse
  description: |-
    ### dispose[​](#api-response-dispose "Direct link to dispose")

    Disposes the body of this response. If not called then the body will stay in memory until the context closes.

    **Usage**

    ``` javascript
    await apiResponse.dispose();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: apiResponse.headers
  id: api/class-apiresponse#api-response-headers
  summary: An object with all the response HTTP headers associated with this response
  belongs_to: APIResponse
  description: |-
    ### headers[​](#api-response-headers "Direct link to headers")

    An object with all the response HTTP headers associated with this response.

    **Usage**

    ``` javascript
    apiResponse.headers();
    ```

    **Returns**

    - [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: apiResponse.headersArray
  id: api/class-apiresponse#api-response-headers-array
  summary: An array with all the request HTTP headers associated with this response
  belongs_to: APIResponse
  description: |-
    ### headersArray[​](#api-response-headers-array "Direct link to headersArray")

    An array with all the request HTTP headers associated with this response. Header names are not lower-cased. Headers with multiple entries, such as `Set-Cookie`, appear in the array multiple times.

    **Usage**

    ``` javascript
    apiResponse.headersArray();
    ```

    **Returns**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        Name of the header.

      - `value`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        Value of the header.

    &nbsp;
- name: apiResponse.json
  id: api/class-apiresponse#api-response-json
  summary: Returns the JSON representation of response body
  belongs_to: APIResponse
  description: |-
    ### json[​](#api-response-json "Direct link to json")

    Returns the JSON representation of response body.

    This method will throw if the response body is not parsable via `JSON.parse`.

    **Usage**

    ``` javascript
    await apiResponse.json();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>

    &nbsp;
- name: apiResponse.ok
  id: api/class-apiresponse#api-response-ok
  summary: Contains a boolean stating whether the response was successful (status in the range 200-299) or not
  belongs_to: APIResponse
  description: |-
    ### ok[​](#api-response-ok "Direct link to ok")

    Contains a boolean stating whether the response was successful (status in the range 200-299) or not.

    **Usage**

    ``` javascript
    apiResponse.ok();
    ```

    **Returns**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: apiResponse.status
  id: api/class-apiresponse#api-response-status
  summary: Contains the status code of the response (e.g., 200 for a success)
  belongs_to: APIResponse
  description: |-
    ### status[​](#api-response-status "Direct link to status")

    Contains the status code of the response (e.g., 200 for a success).

    **Usage**

    ``` javascript
    apiResponse.status();
    ```

    **Returns**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: apiResponse.statusText
  id: api/class-apiresponse#api-response-status-text
  summary: Contains the status text of the response (e.g
  belongs_to: APIResponse
  description: |-
    ### statusText[​](#api-response-status-text "Direct link to statusText")

    Contains the status text of the response (e.g. usually an "OK" for a success).

    **Usage**

    ``` javascript
    apiResponse.statusText();
    ```

    **Returns**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: apiResponse.text
  id: api/class-apiresponse#api-response-text
  summary: Returns the text representation of response body
  belongs_to: APIResponse
  description: |-
    ### text[​](#api-response-text "Direct link to text")

    Returns the text representation of response body.

    **Usage**

    ``` javascript
    await apiResponse.text();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: apiResponse.url
  id: api/class-apiresponse#api-response-url
  summary: Contains the URL of the response
  belongs_to: APIResponse
  description: "### url[​](#api-response-url \"Direct link to url\")\n\nContains the URL of the response.\n\n**Usage**\n\n``` javascript\napiResponse.url();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-apiresponse](https://playwright.dev/docs/api/class-apiresponse)"
- name: APIResponseAssertions
  id: api/class-apiresponseassertions
  summary: The APIResponseAssertions class provides assertion methods that can be used to make assertions about the APIResponse in the tests
  description: "# APIResponseAssertions\n\nThe [APIResponseAssertions](class-apiresponseassertions \"APIResponseAssertions\") class provides assertion methods that can be used to make assertions about the [APIResponse](class-apiresponse \"APIResponse\") in the tests.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('navigates to login', async ({ page }) => {\n  // ...\n  const response = await page.request.get('https://playwright.dev');\n  await expect(response).toBeOK();\n});\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### toBeOK[​](#api-response-assertions-to-be-ok \"Direct link to toBeOK\")\n\nEnsures the response status code is within `200..299` range.\n\n**Usage**\n\n``` javascript\nawait expect(response).toBeOK();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n## Properties[​](#properties \"Direct link to Properties\")\n\n### not[​](#api-response-assertions-not \"Direct link to not\")\n\nMakes the assertion check for the opposite condition. For example, this code tests that the response status is not successful:\n\n``` javascript\nawait expect(response).not.toBeOK();\n```\n\n**Usage**\n\n``` javascript\nexpect(response).not\n```\n\n**Type**\n\n- [APIResponseAssertions](class-apiresponseassertions \"APIResponseAssertions\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-apiresponseassertions](https://playwright.dev/docs/api/class-apiresponseassertions)"
- name: apiResponseAssertions.not
  id: api/class-apiresponseassertions#api-response-assertions-not
  summary: Makes the assertion check for the opposite condition
  belongs_to: APIResponseAssertions
  description: "### not[​](#api-response-assertions-not \"Direct link to not\")\n\nMakes the assertion check for the opposite condition. For example, this code tests that the response status is not successful:\n\n``` javascript\nawait expect(response).not.toBeOK();\n```\n\n**Usage**\n\n``` javascript\nexpect(response).not\n```\n\n**Type**\n\n- [APIResponseAssertions](class-apiresponseassertions \"APIResponseAssertions\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-apiresponseassertions](https://playwright.dev/docs/api/class-apiresponseassertions)"
- name: apiResponseAssertions.toBeOK
  id: api/class-apiresponseassertions#api-response-assertions-to-be-ok
  summary: Ensures the response status code is within 200..299 range
  belongs_to: APIResponseAssertions
  description: |-
    ### toBeOK[​](#api-response-assertions-to-be-ok "Direct link to toBeOK")

    Ensures the response status code is within `200..299` range.

    **Usage**

    ``` javascript
    await expect(response).toBeOK();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    ## Properties[​](#properties "Direct link to Properties")
- name: Assertions
  id: test-assertions
  summary: Playwright includes test assertions in the form of expect function
  description: "# Assertions\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright includes test assertions in the form of `expect` function. To make an assertion, call `expect(value)` and choose a matcher that reflects the expectation. There are many [generic matchers](api/class-genericassertions) like `toEqual`, `toContain`, `toBeTruthy` that can be used to assert any conditions.\n\n``` javascript\nexpect(success).toBeTruthy();\n```\n\nPlaywright also includes web-specific [async matchers](api/class-locatorassertions) that will wait until the expected condition is met. Consider the following example:\n\n``` javascript\nawait expect(page.getByTestId('status')).toHaveText('Submitted');\n```\n\nPlaywright will be re-testing the element with the test id of `status` until the fetched element has the `\"Submitted\"` text. It will re-fetch the element and check it over and over, until the condition is met or until the timeout is reached. You can either pass this timeout or configure it once via the [testConfig.expect](api/class-testconfig#test-config-expect) value in the test config.\n\nBy default, the timeout for assertions is set to 5 seconds. Learn more about [various timeouts](test-timeouts).\n\n## Auto-retrying assertions[​](#auto-retrying-assertions \"Direct link to Auto-retrying assertions\")\n\nThe following assertions will retry until the assertion passes, or the assertion timeout is reached. Note that retrying assertions are async, so you must `await` them.\n\n| Assertion                                                                                                                            | Description                                                                                                |\n|:-------------------------------------------------------------------------------------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------|\n| [await expect(locator).toBeAttached()](api/class-locatorassertions#locator-assertions-to-be-attached)                                | Element is attached                                                                                        |\n| [await expect(locator).toBeChecked()](api/class-locatorassertions#locator-assertions-to-be-checked)                                  | Checkbox is checked                                                                                        |\n| [await expect(locator).toBeDisabled()](api/class-locatorassertions#locator-assertions-to-be-disabled)                                | Element is disabled                                                                                        |\n| [await expect(locator).toBeEditable()](api/class-locatorassertions#locator-assertions-to-be-editable)                                | Element is editable                                                                                        |\n| [await expect(locator).toBeEmpty()](api/class-locatorassertions#locator-assertions-to-be-empty)                                      | Container is empty                                                                                         |\n| [await expect(locator).toBeEnabled()](api/class-locatorassertions#locator-assertions-to-be-enabled)                                  | Element is enabled                                                                                         |\n| [await expect(locator).toBeFocused()](api/class-locatorassertions#locator-assertions-to-be-focused)                                  | Element is focused                                                                                         |\n| [await expect(locator).toBeHidden()](api/class-locatorassertions#locator-assertions-to-be-hidden)                                    | Element is not visible                                                                                     |\n| [await expect(locator).toBeInViewport()](api/class-locatorassertions#locator-assertions-to-be-in-viewport)                           | Element intersects viewport                                                                                |\n| [await expect(locator).toBeVisible()](api/class-locatorassertions#locator-assertions-to-be-visible)                                  | Element is visible                                                                                         |\n| [await expect(locator).toContainText()](api/class-locatorassertions#locator-assertions-to-contain-text)                              | Element contains text                                                                                      |\n| [await expect(locator).toHaveAccessibleDescription()](api/class-locatorassertions#locator-assertions-to-have-accessible-description) | Element has a matching [accessible description](https://w3c.github.io/accname/#dfn-accessible-description) |\n| [await expect(locator).toHaveAccessibleName()](api/class-locatorassertions#locator-assertions-to-have-accessible-name)               | Element has a matching [accessible name](https://w3c.github.io/accname/#dfn-accessible-name)               |\n| [await expect(locator).toHaveAttribute()](api/class-locatorassertions#locator-assertions-to-have-attribute)                          | Element has a DOM attribute                                                                                |\n| [await expect(locator).toHaveClass()](api/class-locatorassertions#locator-assertions-to-have-class)                                  | Element has a class property                                                                               |\n| [await expect(locator).toHaveCount()](api/class-locatorassertions#locator-assertions-to-have-count)                                  | List has exact number of children                                                                          |\n| [await expect(locator).toHaveCSS()](api/class-locatorassertions#locator-assertions-to-have-css)                                      | Element has CSS property                                                                                   |\n| [await expect(locator).toHaveId()](api/class-locatorassertions#locator-assertions-to-have-id)                                        | Element has an ID                                                                                          |\n| [await expect(locator).toHaveJSProperty()](api/class-locatorassertions#locator-assertions-to-have-js-property)                       | Element has a JavaScript property                                                                          |\n| [await expect(locator).toHaveRole()](api/class-locatorassertions#locator-assertions-to-have-role)                                    | Element has a specific [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles)                              |\n| [await expect(locator).toHaveScreenshot()](api/class-locatorassertions#locator-assertions-to-have-screenshot-1)                      | Element has a screenshot                                                                                   |\n| [await expect(locator).toHaveText()](api/class-locatorassertions#locator-assertions-to-have-text)                                    | Element matches text                                                                                       |\n| [await expect(locator).toHaveValue()](api/class-locatorassertions#locator-assertions-to-have-value)                                  | Input has a value                                                                                          |\n| [await expect(locator).toHaveValues()](api/class-locatorassertions#locator-assertions-to-have-values)                                | Select has options selected                                                                                |\n| [await expect(page).toHaveScreenshot()](api/class-pageassertions#page-assertions-to-have-screenshot-1)                               | Page has a screenshot                                                                                      |\n| [await expect(page).toHaveTitle()](api/class-pageassertions#page-assertions-to-have-title)                                           | Page has a title                                                                                           |\n| [await expect(page).toHaveURL()](api/class-pageassertions#page-assertions-to-have-url)                                               | Page has a URL                                                                                             |\n| [await expect(response).toBeOK()](api/class-apiresponseassertions#api-response-assertions-to-be-ok)                                  | Response has an OK status                                                                                  |\n\n## Non-retrying assertions[​](#non-retrying-assertions \"Direct link to Non-retrying assertions\")\n\nThese assertions allow to test any conditions, but do not auto-retry. Most of the time, web pages show information asynchronously, and using non-retrying assertions can lead to a flaky test.\n\nPrefer [auto-retrying](#auto-retrying-assertions) assertions whenever possible. For more complex assertions that need to be retried, use [`expect.poll`](#expectpoll) or [`expect.toPass`](#expecttopass).\n\n| Assertion                                                                                                            | Description                                           |\n|:---------------------------------------------------------------------------------------------------------------------|:------------------------------------------------------|\n| [expect(value).toBe()](api/class-genericassertions#generic-assertions-to-be)                                         | Value is the same                                     |\n| [expect(value).toBeCloseTo()](api/class-genericassertions#generic-assertions-to-be-close-to)                         | Number is approximately equal                         |\n| [expect(value).toBeDefined()](api/class-genericassertions#generic-assertions-to-be-defined)                          | Value is not `undefined`                              |\n| [expect(value).toBeFalsy()](api/class-genericassertions#generic-assertions-to-be-falsy)                              | Value is falsy, e.g. `false`, `0`, `null`, etc.       |\n| [expect(value).toBeGreaterThan()](api/class-genericassertions#generic-assertions-to-be-greater-than)                 | Number is more than                                   |\n| [expect(value).toBeGreaterThanOrEqual()](api/class-genericassertions#generic-assertions-to-be-greater-than-or-equal) | Number is more than or equal                          |\n| [expect(value).toBeInstanceOf()](api/class-genericassertions#generic-assertions-to-be-instance-of)                   | Object is an instance of a class                      |\n| [expect(value).toBeLessThan()](api/class-genericassertions#generic-assertions-to-be-less-than)                       | Number is less than                                   |\n| [expect(value).toBeLessThanOrEqual()](api/class-genericassertions#generic-assertions-to-be-less-than-or-equal)       | Number is less than or equal                          |\n| [expect(value).toBeNaN()](api/class-genericassertions#generic-assertions-to-be-na-n)                                 | Value is `NaN`                                        |\n| [expect(value).toBeNull()](api/class-genericassertions#generic-assertions-to-be-null)                                | Value is `null`                                       |\n| [expect(value).toBeTruthy()](api/class-genericassertions#generic-assertions-to-be-truthy)                            | Value is truthy, i.e. not `false`, `0`, `null`, etc.  |\n| [expect(value).toBeUndefined()](api/class-genericassertions#generic-assertions-to-be-undefined)                      | Value is `undefined`                                  |\n| [expect(value).toContain()](api/class-genericassertions#generic-assertions-to-contain-1)                             | String contains a substring                           |\n| [expect(value).toContain()](api/class-genericassertions#generic-assertions-to-contain-2)                             | Array or set contains an element                      |\n| [expect(value).toContainEqual()](api/class-genericassertions#generic-assertions-to-contain-equal)                    | Array or set contains a similar element               |\n| [expect(value).toEqual()](api/class-genericassertions#generic-assertions-to-equal)                                   | Value is similar - deep equality and pattern matching |\n| [expect(value).toHaveLength()](api/class-genericassertions#generic-assertions-to-have-length)                        | Array or string has length                            |\n| [expect(value).toHaveProperty()](api/class-genericassertions#generic-assertions-to-have-property)                    | Object has a property                                 |\n| [expect(value).toMatch()](api/class-genericassertions#generic-assertions-to-match)                                   | String matches a regular expression                   |\n| [expect(value).toMatchObject()](api/class-genericassertions#generic-assertions-to-match-object)                      | Object contains specified properties                  |\n| [expect(value).toStrictEqual()](api/class-genericassertions#generic-assertions-to-strict-equal)                      | Value is similar, including property types            |\n| [expect(value).toThrow()](api/class-genericassertions#generic-assertions-to-throw)                                   | Function throws an error                              |\n| [expect(value).any()](api/class-genericassertions#generic-assertions-any)                                            | Matches any instance of a class/primitive             |\n| [expect(value).anything()](api/class-genericassertions#generic-assertions-anything)                                  | Matches anything                                      |\n| [expect(value).arrayContaining()](api/class-genericassertions#generic-assertions-array-containing)                   | Array contains specific elements                      |\n| [expect(value).closeTo()](api/class-genericassertions#generic-assertions-close-to)                                   | Number is approximately equal                         |\n| [expect(value).objectContaining()](api/class-genericassertions#generic-assertions-object-containing)                 | Object contains specific properties                   |\n| [expect(value).stringContaining()](api/class-genericassertions#generic-assertions-string-containing)                 | String contains a substring                           |\n| [expect(value).stringMatching()](api/class-genericassertions#generic-assertions-string-matching)                     | String matches a regular expression                   |\n\n## Negating matchers[​](#negating-matchers \"Direct link to Negating matchers\")\n\nIn general, we can expect the opposite to be true by adding a `.not` to the front of the matchers:\n\n``` javascript\nexpect(value).not.toEqual(0);\nawait expect(locator).not.toContainText('some text');\n```\n\n## Soft assertions[​](#soft-assertions \"Direct link to Soft assertions\")\n\nBy default, failed assertion will terminate test execution. Playwright also supports *soft assertions*: failed soft assertions **do not** terminate test execution, but mark the test as failed.\n\n``` javascript\n// Make a few checks that will not stop the test when failed...\nawait expect.soft(page.getByTestId('status')).toHaveText('Success');\nawait expect.soft(page.getByTestId('eta')).toHaveText('1 day');\n\n// ... and continue the test to check more things.\nawait page.getByRole('link', { name: 'next page' }).click();\nawait expect.soft(page.getByRole('heading', { name: 'Make another order' })).toBeVisible();\n```\n\nAt any point during test execution, you can check whether there were any soft assertion failures:\n\n``` javascript\n// Make a few checks that will not stop the test when failed...\nawait expect.soft(page.getByTestId('status')).toHaveText('Success');\nawait expect.soft(page.getByTestId('eta')).toHaveText('1 day');\n\n// Avoid running further if there were soft assertion failures.\nexpect(test.info().errors).toHaveLength(0);\n```\n\nNote that soft assertions only work with Playwright test runner.\n\n## Custom expect message[​](#custom-expect-message \"Direct link to Custom expect message\")\n\nYou can specify a custom expect message as a second argument to the `expect` function, for example:\n\n``` javascript\nawait expect(page.getByText('Name'), 'should be logged in').toBeVisible();\n```\n\nThis message will be shown in reporters, both for passing and failing expects, providing more context about the assertion.\n\nWhen expect passes, you might see a successful step like this:\n\n``` javascript\n✅ should be logged in    @example.spec.ts:18\n```\n\nWhen expect fails, the error would look like this:\n\n``` javascript\n    Error: should be logged in\n\n    Call log:\n      - expect.toBeVisible with timeout 5000ms\n      - waiting for \"getByText('Name')\"\n\n\n      2 |\n      3 | test('example test', async({ page }) => {\n    > 4 |   await expect(page.getByText('Name'), 'should be logged in').toBeVisible();\n        |                                                                  ^\n      5 | });\n      6 |\n```\n\nSoft assertions also support custom message:\n\n``` javascript\nexpect.soft(value, 'my soft assertion').toBe(56);\n```\n\n## expect.configure[​](#expectconfigure \"Direct link to expect.configure\")\n\nYou can create your own pre-configured `expect` instance to have its own defaults such as `timeout` and `soft`.\n\n``` javascript\nconst slowExpect = expect.configure({ timeout: 10000 });\nawait slowExpect(locator).toHaveText('Submit');\n\n// Always do soft assertions.\nconst softExpect = expect.configure({ soft: true });\nawait softExpect(locator).toHaveText('Submit');\n```\n\n## expect.poll[​](#expectpoll \"Direct link to expect.poll\")\n\nYou can convert any synchronous `expect` to an asynchronous polling one using `expect.poll`.\n\nThe following method will poll given function until it returns HTTP status 200:\n\n``` javascript\nawait expect.poll(async () => {\n  const response = await page.request.get('https://api.example.com');\n  return response.status();\n}, {\n  // Custom expect message for reporting, optional.\n  message: 'make sure API eventually succeeds',\n  // Poll for 10 seconds; defaults to 5 seconds. Pass 0 to disable timeout.\n  timeout: 10000,\n}).toBe(200);\n```\n\nYou can also specify custom polling intervals:\n\n``` javascript\nawait expect.poll(async () => {\n  const response = await page.request.get('https://api.example.com');\n  return response.status();\n}, {\n  // Probe, wait 1s, probe, wait 2s, probe, wait 10s, probe, wait 10s, probe\n  // ... Defaults to [100, 250, 500, 1000].\n  intervals: [1_000, 2_000, 10_000],\n  timeout: 60_000\n}).toBe(200);\n```\n\n## expect.toPass[​](#expecttopass \"Direct link to expect.toPass\")\n\nYou can retry blocks of code until they are passing successfully.\n\n``` javascript\nawait expect(async () => {\n  const response = await page.request.get('https://api.example.com');\n  expect(response.status()).toBe(200);\n}).toPass();\n```\n\nYou can also specify custom timeout and retry intervals:\n\n``` javascript\nawait expect(async () => {\n  const response = await page.request.get('https://api.example.com');\n  expect(response.status()).toBe(200);\n}).toPass({\n  // Probe, wait 1s, probe, wait 2s, probe, wait 10s, probe, wait 10s, probe\n  // ... Defaults to [100, 250, 500, 1000].\n  intervals: [1_000, 2_000, 10_000],\n  timeout: 60_000\n});\n```\n\nNote that by default `toPass` has timeout 0 and does not respect custom [expect timeout](test-timeouts#expect-timeout).\n\n## Add custom matchers using expect.extend[​](#add-custom-matchers-using-expectextend \"Direct link to Add custom matchers using expect.extend\")\n\nYou can extend Playwright assertions by providing custom matchers. These matchers will be available on the `expect` object.\n\nIn this example we add a custom `toHaveAmount` function. Custom matcher should return a `message` callback and a `pass` flag indicating whether the assertion passed.\n\n``` javascript\nimport { expect as baseExpect } from '@playwright/test';\nimport type { Page, Locator } from '@playwright/test';\n\nexport { test } from '@playwright/test';\n\nexport const expect = baseExpect.extend({\n  async toHaveAmount(locator: Locator, expected: number, options?: { timeout?: number }) {\n    const assertionName = 'toHaveAmount';\n    let pass: boolean;\n    let matcherResult: any;\n    try {\n      await baseExpect(locator).toHaveAttribute('data-amount', String(expected), options);\n      pass = true;\n    } catch (e: any) {\n      matcherResult = e.matcherResult;\n      pass = false;\n    }\n\n    const message = pass\n      ? () => this.utils.matcherHint(assertionName, undefined, undefined, { isNot: this.isNot }) +\n          '\\n\\n' +\n          `Locator: ${locator}\\n` +\n          `Expected: ${this.isNot ? 'not' : ''}${this.utils.printExpected(expected)}\\n` +\n          (matcherResult ? `Received: ${this.utils.printReceived(matcherResult.actual)}` : '')\n      : () =>  this.utils.matcherHint(assertionName, undefined, undefined, { isNot: this.isNot }) +\n          '\\n\\n' +\n          `Locator: ${locator}\\n` +\n          `Expected: ${this.utils.printExpected(expected)}\\n` +\n          (matcherResult ? `Received: ${this.utils.printReceived(matcherResult.actual)}` : '');\n\n    return {\n      message,\n      pass,\n      name: assertionName,\n      expected,\n      actual: matcherResult?.actual,\n    };\n  },\n});\n```\n\nNow we can use `toHaveAmount` in the test.\n\n``` javascript\nimport { test, expect } from './fixtures';\n\ntest('amount', async () => {\n  await expect(page.locator('.cart')).toHaveAmount(4);\n});\n```\n\n### Compatibility with expect library[​](#compatibility-with-expect-library \"Direct link to Compatibility with expect library\")\n\n> note\n>\n> Do not confuse Playwright's `expect` with the [`expect` library](https://jestjs.io/docs/expect). The latter is not fully integrated with Playwright test runner, so make sure to use Playwright's own `expect`.\n\n### Combine custom matchers from multiple modules[​](#combine-custom-matchers-from-multiple-modules \"Direct link to Combine custom matchers from multiple modules\")\n\nYou can combine custom matchers from multiple files or modules.\n\n``` javascript\nimport { mergeTests, mergeExpects } from '@playwright/test';\nimport { test as dbTest, expect as dbExpect } from 'database-test-utils';\nimport { test as a11yTest, expect as a11yExpect } from 'a11y-test-utils';\n\nexport const expect = mergeExpects(dbExpect, a11yExpect);\nexport const test = mergeTests(dbTest, a11yTest);\n```\n\n``` javascript\nimport { test, expect } from './fixtures';\n\ntest('passes', async ({ database }) => {\n  await expect(database).toHaveDatabaseUser('admin');\n});\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/test-assertions](https://playwright.dev/docs/test-assertions)"
- name: Authentication
  id: auth
  summary: Playwright executes tests in isolated environments called browser contexts
  description: "# Authentication\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright executes tests in isolated environments called [browser contexts](browser-contexts). This isolation model improves reproducibility and prevents cascading test failures. Tests can load existing authenticated state. This eliminates the need to authenticate in every test and speeds up test execution.\n\n## Core concepts[​](#core-concepts \"Direct link to Core concepts\")\n\nRegardless of the authentication strategy you choose, you are likely to store authenticated browser state on the file system.\n\nWe recommend to create `playwright/.auth` directory and add it to your `.gitignore`. Your authentication routine will produce authenticated browser state and save it to a file in this `playwright/.auth` directory. Later on, tests will reuse this state and start already authenticated.\n\n- Bash\n- PowerShell\n- Batch\n\n``` javascript\nmkdir -p playwright/.auth\necho $'\\nplaywright/.auth' >> .gitignore\n```\n\n``` javascript\nNew-Item -ItemType Directory -Force -Path playwright\\.auth\nAdd-Content -path .gitignore \"`r`nplaywright/.auth\"\n```\n\n``` javascript\nmd playwright\\.auth\necho. >> .gitignore\necho \"playwright/.auth\" >> .gitignore\n```\n\n## Basic: shared account in all tests[​](#basic-shared-account-in-all-tests \"Direct link to Basic: shared account in all tests\")\n\nThis is the **recommended** approach for tests **without server-side state**. Authenticate once in the **setup project**, save the authentication state, and then reuse it to bootstrap each test already authenticated.\n\n**When to use**\n\n- When you can imagine all your tests running at the same time with the same account, without affecting each other.\n\n**When not to use**\n\n- Your tests modify server-side state. For example, one test checks the rendering of the settings page, while the other test is changing the setting, and you run tests in parallel. In this case, tests must use different accounts.\n- Your authentication is browser-specific.\n\n**Details**\n\nCreate `tests/auth.setup.ts` that will prepare authenticated browser state for all other tests.\n\n``` javascript\nimport { test as setup, expect } from '@playwright/test';\n\nconst authFile = 'playwright/.auth/user.json';\n\nsetup('authenticate', async ({ page }) => {\n  // Perform authentication steps. Replace these actions with your own.\n  await page.goto('https://github.com/login');\n  await page.getByLabel('Username or email address').fill('username');\n  await page.getByLabel('Password').fill('password');\n  await page.getByRole('button', { name: 'Sign in' }).click();\n  // Wait until the page receives the cookies.\n  //\n  // Sometimes login flow sets cookies in the process of several redirects.\n  // Wait for the final URL to ensure that the cookies are actually set.\n  await page.waitForURL('https://github.com/');\n  // Alternatively, you can wait until the page reaches a state where all cookies are set.\n  await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();\n\n  // End of authentication steps.\n\n  await page.context().storageState({ path: authFile });\n});\n```\n\nCreate a new `setup` project in the config and declare it as a [dependency](test-projects#dependencies) for all your testing projects. This project will always run and authenticate before all the tests. All testing projects should use the authenticated state as `storageState`.\n\n``` javascript\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    // Setup project\n    { name: 'setup', testMatch: /.*\\.setup\\.ts/ },\n\n    {\n      name: 'chromium',\n      use: {\n        ...devices['Desktop Chrome'],\n        // Use prepared auth state.\n        storageState: 'playwright/.auth/user.json',\n      },\n      dependencies: ['setup'],\n    },\n\n    {\n      name: 'firefox',\n      use: {\n        ...devices['Desktop Firefox'],\n        // Use prepared auth state.\n        storageState: 'playwright/.auth/user.json',\n      },\n      dependencies: ['setup'],\n    },\n  ],\n});\n```\n\nTests start already authenticated because we specified `storageState` in the config.\n\n``` javascript\nimport { test } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  // page is authenticated\n});\n```\n\n### Authenticating in UI mode[​](#authenticating-in-ui-mode \"Direct link to Authenticating in UI mode\")\n\nUI mode will not run the `setup` project by default to improve testing speed. We recommend to authenticate by manually running the `auth.setup.ts` from time to time, whenever existing authentication expires.\n\nFirst [enable the `setup` project in the filters](test-ui-mode#filtering-tests), then click the triangle button next to `auth.setup.ts` file, and then disable the `setup` project in the filters again.\n\n## Moderate: one account per parallel worker[​](#moderate-one-account-per-parallel-worker \"Direct link to Moderate: one account per parallel worker\")\n\nThis is the **recommended** approach for tests that **modify server-side state**. In Playwright, worker processes run in parallel. In this approach, each parallel worker is authenticated once. All tests ran by worker are reusing the same authentication state. We will need multiple testing accounts, one per each parallel worker.\n\n**When to use**\n\n- Your tests modify shared server-side state. For example, one test checks the rendering of the settings page, while the other test is changing the setting.\n\n**When not to use**\n\n- Your tests do not modify any shared server-side state. In this case, all tests can use a single shared account.\n\n**Details**\n\nWe will authenticate once per [worker process](test-parallel#worker-processes), each with a unique account.\n\nCreate `playwright/fixtures.ts` file that will [override `storageState` fixture](test-fixtures#overriding-fixtures) to authenticate once per worker. Use [testInfo.parallelIndex](api/class-testinfo#test-info-parallel-index) to differentiate between workers.\n\n``` javascript\nimport { test as baseTest, expect } from '@playwright/test';\nimport fs from 'fs';\nimport path from 'path';\n\nexport * from '@playwright/test';\nexport const test = baseTest.extend<{}, { workerStorageState: string }>({\n  // Use the same storage state for all tests in this worker.\n  storageState: ({ workerStorageState }, use) => use(workerStorageState),\n\n  // Authenticate once per worker with a worker-scoped fixture.\n  workerStorageState: [async ({ browser }, use) => {\n    // Use parallelIndex as a unique identifier for each worker.\n    const id = test.info().parallelIndex;\n    const fileName = path.resolve(test.info().project.outputDir, `.auth/${id}.json`);\n\n    if (fs.existsSync(fileName)) {\n      // Reuse existing authentication state if any.\n      await use(fileName);\n      return;\n    }\n\n    // Important: make sure we authenticate in a clean environment by unsetting storage state.\n    const page = await browser.newPage({ storageState: undefined });\n\n    // Acquire a unique account, for example create a new one.\n    // Alternatively, you can have a list of precreated accounts for testing.\n    // Make sure that accounts are unique, so that multiple team members\n    // can run tests at the same time without interference.\n    const account = await acquireAccount(id);\n\n    // Perform authentication steps. Replace these actions with your own.\n    await page.goto('https://github.com/login');\n    await page.getByLabel('Username or email address').fill(account.username);\n    await page.getByLabel('Password').fill(account.password);\n    await page.getByRole('button', { name: 'Sign in' }).click();\n    // Wait until the page receives the cookies.\n    //\n    // Sometimes login flow sets cookies in the process of several redirects.\n    // Wait for the final URL to ensure that the cookies are actually set.\n    await page.waitForURL('https://github.com/');\n    // Alternatively, you can wait until the page reaches a state where all cookies are set.\n    await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();\n\n    // End of authentication steps.\n\n    await page.context().storageState({ path: fileName });\n    await page.close();\n    await use(fileName);\n  }, { scope: 'worker' }],\n});\n```\n\nNow, each test file should import `test` from our fixtures file instead of `@playwright/test`. No changes are needed in the config.\n\n``` javascript\n// Important: import our fixtures.\nimport { test, expect } from '../playwright/fixtures';\n\ntest('test', async ({ page }) => {\n  // page is authenticated\n});\n```\n\n## Advanced scenarios[​](#advanced-scenarios \"Direct link to Advanced scenarios\")\n\n### Authenticate with API request[​](#authenticate-with-api-request \"Direct link to Authenticate with API request\")\n\n**When to use**\n\n- Your web application supports authenticating via API that is easier/faster than interacting with the app UI.\n\n**Details**\n\nWe will send the API request with [APIRequestContext](api/class-apirequestcontext \"APIRequestContext\") and then save authenticated state as usual.\n\nIn the [setup project](#basic-shared-account-in-all-tests):\n\n``` javascript\nimport { test as setup } from '@playwright/test';\n\nconst authFile = 'playwright/.auth/user.json';\n\nsetup('authenticate', async ({ request }) => {\n  // Send authentication request. Replace with your own.\n  await request.post('https://github.com/login', {\n    form: {\n      'user': 'user',\n      'password': 'password'\n    }\n  });\n  await request.storageState({ path: authFile });\n});\n```\n\nAlternatively, in a [worker fixture](#moderate-one-account-per-parallel-worker):\n\n``` javascript\nimport { test as baseTest, request } from '@playwright/test';\nimport fs from 'fs';\nimport path from 'path';\n\nexport * from '@playwright/test';\nexport const test = baseTest.extend<{}, { workerStorageState: string }>({\n  // Use the same storage state for all tests in this worker.\n  storageState: ({ workerStorageState }, use) => use(workerStorageState),\n\n  // Authenticate once per worker with a worker-scoped fixture.\n  workerStorageState: [async ({}, use) => {\n    // Use parallelIndex as a unique identifier for each worker.\n    const id = test.info().parallelIndex;\n    const fileName = path.resolve(test.info().project.outputDir, `.auth/${id}.json`);\n\n    if (fs.existsSync(fileName)) {\n      // Reuse existing authentication state if any.\n      await use(fileName);\n      return;\n    }\n\n    // Important: make sure we authenticate in a clean environment by unsetting storage state.\n    const context = await request.newContext({ storageState: undefined });\n\n    // Acquire a unique account, for example create a new one.\n    // Alternatively, you can have a list of precreated accounts for testing.\n    // Make sure that accounts are unique, so that multiple team members\n    // can run tests at the same time without interference.\n    const account = await acquireAccount(id);\n\n    // Send authentication request. Replace with your own.\n    await context.post('https://github.com/login', {\n      form: {\n        'user': 'user',\n        'password': 'password'\n      }\n    });\n\n    await context.storageState({ path: fileName });\n    await context.dispose();\n    await use(fileName);\n  }, { scope: 'worker' }],\n});\n```\n\n### Multiple signed in roles[​](#multiple-signed-in-roles \"Direct link to Multiple signed in roles\")\n\n**When to use**\n\n- You have more than one role in your end to end tests, but you can reuse accounts across all tests.\n\n**Details**\n\nWe will authenticate multiple times in the setup project.\n\n``` javascript\nimport { test as setup, expect } from '@playwright/test';\n\nconst adminFile = 'playwright/.auth/admin.json';\n\nsetup('authenticate as admin', async ({ page }) => {\n  // Perform authentication steps. Replace these actions with your own.\n  await page.goto('https://github.com/login');\n  await page.getByLabel('Username or email address').fill('admin');\n  await page.getByLabel('Password').fill('password');\n  await page.getByRole('button', { name: 'Sign in' }).click();\n  // Wait until the page receives the cookies.\n  //\n  // Sometimes login flow sets cookies in the process of several redirects.\n  // Wait for the final URL to ensure that the cookies are actually set.\n  await page.waitForURL('https://github.com/');\n  // Alternatively, you can wait until the page reaches a state where all cookies are set.\n  await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();\n\n  // End of authentication steps.\n\n  await page.context().storageState({ path: adminFile });\n});\n\nconst userFile = 'playwright/.auth/user.json';\n\nsetup('authenticate as user', async ({ page }) => {\n  // Perform authentication steps. Replace these actions with your own.\n  await page.goto('https://github.com/login');\n  await page.getByLabel('Username or email address').fill('user');\n  await page.getByLabel('Password').fill('password');\n  await page.getByRole('button', { name: 'Sign in' }).click();\n  // Wait until the page receives the cookies.\n  //\n  // Sometimes login flow sets cookies in the process of several redirects.\n  // Wait for the final URL to ensure that the cookies are actually set.\n  await page.waitForURL('https://github.com/');\n  // Alternatively, you can wait until the page reaches a state where all cookies are set.\n  await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();\n\n  // End of authentication steps.\n\n  await page.context().storageState({ path: userFile });\n});\n```\n\nAfter that, specify `storageState` for each test file or test group, **instead of** setting it in the config.\n\n``` javascript\nimport { test } from '@playwright/test';\n\ntest.use({ storageState: 'playwright/.auth/admin.json' });\n\ntest('admin test', async ({ page }) => {\n  // page is authenticated as admin\n});\n\ntest.describe(() => {\n  test.use({ storageState: 'playwright/.auth/user.json' });\n\n  test('user test', async ({ page }) => {\n    // page is authenticated as a user\n  });\n});\n```\n\nSee also about [authenticating in the UI mode](#authenticating-in-ui-mode).\n\n### Testing multiple roles together[​](#testing-multiple-roles-together \"Direct link to Testing multiple roles together\")\n\n**When to use**\n\n- You need to test how multiple authenticated roles interact together, in a single test.\n\n**Details**\n\nUse multiple [BrowserContext](api/class-browsercontext \"BrowserContext\")s and [Page](api/class-page \"Page\")s with different storage states in the same test.\n\n``` javascript\nimport { test } from '@playwright/test';\n\ntest('admin and user', async ({ browser }) => {\n  // adminContext and all pages inside, including adminPage, are signed in as \"admin\".\n  const adminContext = await browser.newContext({ storageState: 'playwright/.auth/admin.json' });\n  const adminPage = await adminContext.newPage();\n\n  // userContext and all pages inside, including userPage, are signed in as \"user\".\n  const userContext = await browser.newContext({ storageState: 'playwright/.auth/user.json' });\n  const userPage = await userContext.newPage();\n\n  // ... interact with both adminPage and userPage ...\n\n  await adminContext.close();\n  await userContext.close();\n});\n```\n\n### Testing multiple roles with POM fixtures[​](#testing-multiple-roles-with-pom-fixtures \"Direct link to Testing multiple roles with POM fixtures\")\n\n**When to use**\n\n- You need to test how multiple authenticated roles interact together, in a single test.\n\n**Details**\n\nYou can introduce fixtures that will provide a page authenticated as each role.\n\nBelow is an example that [creates fixtures](test-fixtures#creating-a-fixture) for two [Page Object Models](pom) - admin POM and user POM. It assumes `adminStorageState.json` and `userStorageState.json` files were created in the global setup.\n\n``` javascript\nimport { test as base, type Page, type Locator } from '@playwright/test';\n\n// Page Object Model for the \"admin\" page.\n// Here you can add locators and helper methods specific to the admin page.\nclass AdminPage {\n  // Page signed in as \"admin\".\n  page: Page;\n\n  // Example locator pointing to \"Welcome, Admin\" greeting.\n  greeting: Locator;\n\n  constructor(page: Page) {\n    this.page = page;\n    this.greeting = page.locator('#greeting');\n  }\n}\n\n// Page Object Model for the \"user\" page.\n// Here you can add locators and helper methods specific to the user page.\nclass UserPage {\n  // Page signed in as \"user\".\n  page: Page;\n\n  // Example locator pointing to \"Welcome, User\" greeting.\n  greeting: Locator;\n\n  constructor(page: Page) {\n    this.page = page;\n    this.greeting = page.locator('#greeting');\n  }\n}\n\n// Declare the types of your fixtures.\ntype MyFixtures = {\n  adminPage: AdminPage;\n  userPage: UserPage;\n};\n\nexport * from '@playwright/test';\nexport const test = base.extend<MyFixtures>({\n  adminPage: async ({ browser }, use) => {\n    const context = await browser.newContext({ storageState: 'playwright/.auth/admin.json' });\n    const adminPage = new AdminPage(await context.newPage());\n    await use(adminPage);\n    await context.close();\n  },\n  userPage: async ({ browser }, use) => {\n    const context = await browser.newContext({ storageState: 'playwright/.auth/user.json' });\n    const userPage = new UserPage(await context.newPage());\n    await use(userPage);\n    await context.close();\n  },\n});\n```\n\n``` javascript\n// Import test with our new fixtures.\nimport { test, expect } from '../playwright/fixtures';\n\n// Use adminPage and userPage fixtures in the test.\ntest('admin and user', async ({ adminPage, userPage }) => {\n  // ... interact with both adminPage and userPage ...\n  await expect(adminPage.greeting).toHaveText('Welcome, Admin');\n  await expect(userPage.greeting).toHaveText('Welcome, User');\n});\n```\n\n### Session storage[​](#session-storage \"Direct link to Session storage\")\n\nReusing authenticated state covers [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies) and [local storage](https://developer.mozilla.org/en-US/docs/Web/API/Storage) based authentication. Rarely, [session storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage) is used for storing information associated with the signed-in state. Session storage is specific to a particular domain and is not persisted across page loads. Playwright does not provide API to persist session storage, but the following snippet can be used to save/load session storage.\n\n``` javascript\n// Get session storage and store as env variable\nconst sessionStorage = await page.evaluate(() => JSON.stringify(sessionStorage));\nfs.writeFileSync('playwright/.auth/session.json', sessionStorage, 'utf-8');\n\n// Set session storage in a new context\nconst sessionStorage = JSON.parse(fs.readFileSync('playwright/.auth/session.json', 'utf-8'));\nawait context.addInitScript(storage => {\n  if (window.location.hostname === 'example.com') {\n    for (const [key, value] of Object.entries(storage))\n      window.sessionStorage.setItem(key, value);\n  }\n}, sessionStorage);\n```\n\n### Avoid authentication in some tests[​](#avoid-authentication-in-some-tests \"Direct link to Avoid authentication in some tests\")\n\nYou can reset storage state in a test file to avoid authentication that was set up for the whole project.\n\n``` javascript\nimport { test } from '@playwright/test';\n\n// Reset storage state for this file to avoid being authenticated\ntest.use({ storageState: { cookies: [], origins: [] } });\n\ntest('not signed in test', async ({ page }) => {\n  // ...\n});\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/auth](https://playwright.dev/docs/auth)"
- name: Auto-waiting
  id: actionability
  summary: Playwright performs a range of actionability checks on the elements before making actions to ensure these actions behave as expected
  description: "# Auto-waiting\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright performs a range of actionability checks on the elements before making actions to ensure these actions behave as expected. It auto-waits for all the relevant checks to pass and only then performs the requested action. If the required checks do not pass within the given `timeout`, action fails with the `TimeoutError`.\n\nFor example, for [locator.click()](api/class-locator#locator-click), Playwright will ensure that:\n\n- locator resolves to exactly one element\n- element is [Visible](#visible \"Visible\")\n- element is [Stable](#stable \"Stable\"), as in not animating or completed animation\n- element [Receives Events](#receives-events \"Receives Events\"), as in not obscured by other elements\n- element is [Enabled](#enabled \"Enabled\")\n\nHere is the complete list of actionability checks performed for each action:\n\n| Action                                                                                   | [Visible](#visible \"Visible\") | [Stable](#stable \"Stable\") | [Receives Events](#receives-events \"Receives Events\") | [Enabled](#enabled \"Enabled\") | [Editable](#editable \"Editable\") |\n|:-----------------------------------------------------------------------------------------|:-----------------------------:|:--------------------------:|:-----------------------------------------------------:|:-----------------------------:|:--------------------------------:|\n| [locator.check()](api/class-locator#locator-check)                                       |              Yes              |            Yes             |                          Yes                          |              Yes              |                \\-                |\n| [locator.click()](api/class-locator#locator-click)                                       |              Yes              |            Yes             |                          Yes                          |              Yes              |                \\-                |\n| [locator.dblclick()](api/class-locator#locator-dblclick)                                 |              Yes              |            Yes             |                          Yes                          |              Yes              |                \\-                |\n| [locator.setChecked()](api/class-locator#locator-set-checked)                            |              Yes              |            Yes             |                          Yes                          |              Yes              |                \\-                |\n| [locator.tap()](api/class-locator#locator-tap)                                           |              Yes              |            Yes             |                          Yes                          |              Yes              |                \\-                |\n| [locator.uncheck()](api/class-locator#locator-uncheck)                                   |              Yes              |            Yes             |                          Yes                          |              Yes              |                \\-                |\n| [locator.hover()](api/class-locator#locator-hover)                                       |              Yes              |            Yes             |                          Yes                          |              \\-               |                \\-                |\n| [locator.dragTo()](api/class-locator#locator-drag-to)                                    |              Yes              |            Yes             |                          Yes                          |              \\-               |                \\-                |\n| [locator.screenshot()](api/class-locator#locator-screenshot)                             |              Yes              |            Yes             |                          \\-                           |              \\-               |                \\-                |\n| [locator.fill()](api/class-locator#locator-fill)                                         |              Yes              |             \\-             |                          \\-                           |              Yes              |               Yes                |\n| [locator.clear()](api/class-locator#locator-clear)                                       |              Yes              |             \\-             |                          \\-                           |              Yes              |               Yes                |\n| [locator.selectOption()](api/class-locator#locator-select-option)                        |              Yes              |             \\-             |                          \\-                           |              Yes              |                \\-                |\n| [locator.selectText()](api/class-locator#locator-select-text)                            |              Yes              |             \\-             |                          \\-                           |              \\-               |                \\-                |\n| [locator.scrollIntoViewIfNeeded()](api/class-locator#locator-scroll-into-view-if-needed) |              \\-               |            Yes             |                          \\-                           |              \\-               |                \\-                |\n| [locator.blur()](api/class-locator#locator-blur)                                         |              \\-               |             \\-             |                          \\-                           |              \\-               |                \\-                |\n| [locator.dispatchEvent()](api/class-locator#locator-dispatch-event)                      |              \\-               |             \\-             |                          \\-                           |              \\-               |                \\-                |\n| [locator.focus()](api/class-locator#locator-focus)                                       |              \\-               |             \\-             |                          \\-                           |              \\-               |                \\-                |\n| [locator.press()](api/class-locator#locator-press)                                       |              \\-               |             \\-             |                          \\-                           |              \\-               |                \\-                |\n| [locator.pressSequentially()](api/class-locator#locator-press-sequentially)              |              \\-               |             \\-             |                          \\-                           |              \\-               |                \\-                |\n| [locator.setInputFiles()](api/class-locator#locator-set-input-files)                     |              \\-               |             \\-             |                          \\-                           |              \\-               |                \\-                |\n\n## Forcing actions[​](#forcing-actions \"Direct link to Forcing actions\")\n\nSome actions like [locator.click()](api/class-locator#locator-click) support `force` option that disables non-essential actionability checks, for example passing truthy `force` to [locator.click()](api/class-locator#locator-click) method will not check that the target element actually receives click events.\n\n## Assertions[​](#assertions \"Direct link to Assertions\")\n\nPlaywright includes auto-retrying assertions that remove flakiness by waiting until the condition is met, similarly to auto-waiting before actions.\n\n| Assertion                                                                                                | Description                       |\n|:---------------------------------------------------------------------------------------------------------|:----------------------------------|\n| [expect(locator).toBeAttached()](api/class-locatorassertions#locator-assertions-to-be-attached)          | Element is attached               |\n| [expect(locator).toBeChecked()](api/class-locatorassertions#locator-assertions-to-be-checked)            | Checkbox is checked               |\n| [expect(locator).toBeDisabled()](api/class-locatorassertions#locator-assertions-to-be-disabled)          | Element is disabled               |\n| [expect(locator).toBeEditable()](api/class-locatorassertions#locator-assertions-to-be-editable)          | Element is editable               |\n| [expect(locator).toBeEmpty()](api/class-locatorassertions#locator-assertions-to-be-empty)                | Container is empty                |\n| [expect(locator).toBeEnabled()](api/class-locatorassertions#locator-assertions-to-be-enabled)            | Element is enabled                |\n| [expect(locator).toBeFocused()](api/class-locatorassertions#locator-assertions-to-be-focused)            | Element is focused                |\n| [expect(locator).toBeHidden()](api/class-locatorassertions#locator-assertions-to-be-hidden)              | Element is not visible            |\n| [expect(locator).toBeInViewport()](api/class-locatorassertions#locator-assertions-to-be-in-viewport)     | Element intersects viewport       |\n| [expect(locator).toBeVisible()](api/class-locatorassertions#locator-assertions-to-be-visible)            | Element is visible                |\n| [expect(locator).toContainText()](api/class-locatorassertions#locator-assertions-to-contain-text)        | Element contains text             |\n| [expect(locator).toHaveAttribute()](api/class-locatorassertions#locator-assertions-to-have-attribute)    | Element has a DOM attribute       |\n| [expect(locator).toHaveClass()](api/class-locatorassertions#locator-assertions-to-have-class)            | Element has a class property      |\n| [expect(locator).toHaveCount()](api/class-locatorassertions#locator-assertions-to-have-count)            | List has exact number of children |\n| [expect(locator).toHaveCSS()](api/class-locatorassertions#locator-assertions-to-have-css)                | Element has CSS property          |\n| [expect(locator).toHaveId()](api/class-locatorassertions#locator-assertions-to-have-id)                  | Element has an ID                 |\n| [expect(locator).toHaveJSProperty()](api/class-locatorassertions#locator-assertions-to-have-js-property) | Element has a JavaScript property |\n| [expect(locator).toHaveText()](api/class-locatorassertions#locator-assertions-to-have-text)              | Element matches text              |\n| [expect(locator).toHaveValue()](api/class-locatorassertions#locator-assertions-to-have-value)            | Input has a value                 |\n| [expect(locator).toHaveValues()](api/class-locatorassertions#locator-assertions-to-have-values)          | Select has options selected       |\n| [expect(page).toHaveTitle()](api/class-pageassertions#page-assertions-to-have-title)                     | Page has a title                  |\n| [expect(page).toHaveURL()](api/class-pageassertions#page-assertions-to-have-url)                         | Page has a URL                    |\n| [expect(response).toBeOK()](api/class-apiresponseassertions#api-response-assertions-to-be-ok)            | Response has an OK status         |\n\nLearn more in the [assertions guide](test-assertions).\n\n## Visible[​](#visible \"Direct link to Visible\")\n\nElement is considered visible when it has non-empty bounding box and does not have `visibility:hidden` computed style.\n\nNote that according to this definition:\n\n- Elements of zero size **are not** considered visible.\n- Elements with `display:none` **are not** considered visible.\n- Elements with `opacity:0` **are** considered visible.\n\n## Stable[​](#stable \"Direct link to Stable\")\n\nElement is considered stable when it has maintained the same bounding box for at least two consecutive animation frames.\n\n## Enabled[​](#enabled \"Direct link to Enabled\")\n\nElement is considered enabled unless it is a `<button>`, `<select>`, `<input>` or `<textarea>` with a `disabled` property.\n\n## Editable[​](#editable \"Direct link to Editable\")\n\nElement is considered editable when it is [enabled](#enabled \"Enabled\") and does not have `readonly` property set.\n\n## Receives Events[​](#receives-events \"Direct link to Receives Events\")\n\nElement is considered receiving pointer events when it is the hit target of the pointer event at the action point. For example, when clicking at the point `(10;10)`, Playwright checks whether some other element (usually an overlay) will instead capture the click at `(10;10)`.\n\nFor example, consider a scenario where Playwright will click `Sign Up` button regardless of when the [locator.click()](api/class-locator#locator-click) call was made:\n\n- page is checking that user name is unique and `Sign Up` button is disabled;\n- after checking with the server, the disabled `Sign Up` button is replaced with another one that is now enabled.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/actionability](https://playwright.dev/docs/actionability)"
- name: Best Practices
  id: best-practices
  summary: This guide should help you to make sure you are following our best practices and writing tests that are more resilient
  description: "# Best Practices\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nThis guide should help you to make sure you are following our best practices and writing tests that are more resilient.\n\n## Testing philosophy[​](#testing-philosophy \"Direct link to Testing philosophy\")\n\n### Test user-visible behavior[​](#test-user-visible-behavior \"Direct link to Test user-visible behavior\")\n\nAutomated tests should verify that the application code works for the end users, and avoid relying on implementation details such as things which users will not typically use, see, or even know about such as the name of a function, whether something is an array, or the CSS class of some element. The end user will see or interact with what is rendered on the page, so your test should typically only see/interact with the same rendered output.\n\n### Make tests as isolated as possible[​](#make-tests-as-isolated-as-possible \"Direct link to Make tests as isolated as possible\")\n\nEach test should be completely isolated from another test and should run independently with its own local storage, session storage, data, cookies etc. [Test isolation](browser-contexts) improves reproducibility, makes debugging easier and prevents cascading test failures.\n\nIn order to avoid repetition for a particular part of your test you can use [before and after hooks](api/class-test). Within your test file add a before hook to run a part of your test before each test such as going to a particular URL or logging in to a part of your app. This keeps your tests isolated as no test relies on another. However it is also ok to have a little duplication when tests are simple enough especially if it keeps your tests clearer and easier to read and maintain.\n\n``` javascript\nimport { test } from '@playwright/test';\n\ntest.beforeEach(async ({ page }) => {\n  // Runs before each test and signs in each page.\n  await page.goto('https://github.com/login');\n  await page.getByLabel('Username or email address').fill('username');\n  await page.getByLabel('Password').fill('password');\n  await page.getByRole('button', { name: 'Sign in' }).click();\n});\n\ntest('first', async ({ page }) => {\n  // page is signed in.\n});\n\ntest('second', async ({ page }) => {\n  // page is signed in.\n});\n```\n\nYou can also reuse the signed-in state in the tests with [setup project](auth#basic-shared-account-in-all-tests). That way you can log in only once and then skip the log in step for all of the tests.\n\n### Avoid testing third-party dependencies[​](#avoid-testing-third-party-dependencies \"Direct link to Avoid testing third-party dependencies\")\n\nOnly test what you control. Don't try to test links to external sites or third party servers that you do not control. Not only is it time consuming and can slow down your tests but also you cannot control the content of the page you are linking to, or if there are cookie banners or overlay pages or anything else that might cause your test to fail.\n\nInstead, use the [Playwright Network API](network#handle-requests) and guarantee the response needed.\n\n``` javascript\nawait page.route('**/api/fetch_data_third_party_dependency', route => route.fulfill({\n  status: 200,\n  body: testData,\n}));\nawait page.goto('https://example.com');\n```\n\n### Testing with a database[​](#testing-with-a-database \"Direct link to Testing with a database\")\n\nIf working with a database then make sure you control the data. Test against a staging environment and make sure it doesn't change. For visual regression tests make sure the operating system and browser versions are the same.\n\n## Best Practices[​](#best-practices \"Direct link to Best Practices\")\n\n### Use locators[​](#use-locators \"Direct link to Use locators\")\n\nIn order to write end to end tests we need to first find elements on the webpage. We can do this by using Playwright's built in [locators](locators). Locators come with auto waiting and retry-ability. Auto waiting means that Playwright performs a range of actionability checks on the elements, such as ensuring the element is visible and enabled before it performs the click. To make tests resilient, we recommend prioritizing user-facing attributes and explicit contracts.\n\n``` javascript\n// 👍\npage.getByRole('button', { name: 'submit' });\n```\n\n#### Use chaining and filtering[​](#use-chaining-and-filtering \"Direct link to Use chaining and filtering\")\n\nLocators can be [chained](locators#matching-inside-a-locator) to narrow down the search to a particular part of the page.\n\n``` javascript\nconst product = page.getByRole('listitem').filter({ hasText: 'Product 2' });\n```\n\nYou can also [filter locators](locators#filtering-locators) by text or by another locator.\n\n``` javascript\nawait page\n    .getByRole('listitem')\n    .filter({ hasText: 'Product 2' })\n    .getByRole('button', { name: 'Add to cart' })\n    .click();\n```\n\n#### Prefer user-facing attributes to XPath or CSS selectors[​](#prefer-user-facing-attributes-to-xpath-or-css-selectors \"Direct link to Prefer user-facing attributes to XPath or CSS selectors\")\n\nYour DOM can easily change so having your tests depend on your DOM structure can lead to failing tests. For example consider selecting this button by its CSS classes. Should the designer change something then the class might change breaking your test.\n\n``` javascript\n// 👎\npage.locator('button.buttonIcon.episode-actions-later');\n```\n\nUse locators that are resilient to changes in the DOM.\n\n``` javascript\n// 👍\npage.getByRole('button', { name: 'submit' });\n```\n\n### Generate locators[​](#generate-locators \"Direct link to Generate locators\")\n\nPlaywright has a [test generator](codegen) that can generate tests and pick locators for you. It will look at your page and figure out the best locator, prioritizing role, text and test id locators. If the generator finds multiple elements matching the locator, it will improve the locator to make it resilient and uniquely identify the target element, so you don't have to worry about failing tests due to locators.\n\n#### Use `codegen` to generate locators[​](#use-codegen-to-generate-locators \"Direct link to use-codegen-to-generate-locators\")\n\nTo pick a locator run the `codegen` command followed by the URL that you would like to pick a locator from.\n\n``` javascript\nnpx playwright codegen playwright.dev\n```\n\nThis will open a new browser window as well as the Playwright inspector. To pick a locator first click on the 'Record' button to stop the recording. By default when you run the `codegen` command it will start a new recording. Once you stop the recording the 'Pick Locator' button will be available to click.\n\nYou can then hover over any element on your page in the browser window and see the locator highlighted below your cursor. Clicking on an element will add the locator into the Playwright inspector. You can either copy the locator and paste into your test file or continue to explore the locator by editing it in the Playwright Inspector, for example by modifying the text, and seeing the results in the browser window.\n\n#### Use the VS Code extension to generate locators[​](#use-the-vs-code-extension-to-generate-locators \"Direct link to Use the VS Code extension to generate locators\")\n\nYou can also use the [VS Code Extension](getting-started-vscode) to generate locators as well as record a test. The VS Code extension also gives you a great developer experience when writing, running, and debugging tests.\n\n### Use web first assertions[​](#use-web-first-assertions \"Direct link to Use web first assertions\")\n\nAssertions are a way to verify that the expected result and the actual result matched or not. By using [web first assertions](test-assertions) Playwright will wait until the expected condition is met. For example, when testing an alert message, a test would click a button that makes a message appear and check that the alert message is there. If the alert message takes half a second to appear, assertions such as `toBeVisible()` will wait and retry if needed.\n\n``` javascript\n// 👍\nawait expect(page.getByText('welcome')).toBeVisible();\n\n// 👎\nexpect(await page.getByText('welcome').isVisible()).toBe(true);\n```\n\n#### Don't use manual assertions[​](#dont-use-manual-assertions \"Direct link to Don't use manual assertions\")\n\nDon't use manual assertions that are not awaiting the expect. In the code below the await is inside the expect rather than before it. When using assertions such as `isVisible()` the test won't wait a single second, it will just check the locator is there and return immediately.\n\n``` javascript\n// 👎\nexpect(await page.getByText('welcome').isVisible()).toBe(true);\n```\n\nUse web first assertions such as `toBeVisible()` instead.\n\n``` javascript\n// 👍\nawait expect(page.getByText('welcome')).toBeVisible();\n```\n\n### Configure debugging[​](#configure-debugging \"Direct link to Configure debugging\")\n\n#### Local debugging[​](#local-debugging \"Direct link to Local debugging\")\n\nFor local debugging we recommend you [debug your tests live in VSCode.](getting-started-vscode#live-debugging) by installing the [VS Code extension](getting-started-vscode). You can run tests in debug mode by right clicking on the line next to the test you want to run which will open a browser window and pause at where the breakpoint is set.\n\nYou can live debug your test by clicking or editing the locators in your test in VS Code which will highlight this locator in the browser window as well as show you any other matching locators found on the page.\n\nYou can also debug your tests with the Playwright inspector by running your tests with the `--debug` flag.\n\n``` javascript\nnpx playwright test --debug\n```\n\nYou can then step through your test, view actionability logs and edit the locator live and see it highlighted in the browser window. This will show you which locators match, how many of them there are.\n\nTo debug a specific test add the name of the test file and the line number of the test followed by the `--debug` flag.\n\n``` javascript\nnpx playwright test example.spec.ts:9 --debug\n```\n\n#### Debugging on CI[​](#debugging-on-ci \"Direct link to Debugging on CI\")\n\nFor CI failures, use the Playwright [trace viewer](trace-viewer) instead of videos and screenshots. The trace viewer gives you a full trace of your tests as a local Progressive Web App (PWA) that can easily be shared. With the trace viewer you can view the timeline, inspect DOM snapshots for each action using dev tools, view network requests and more.\n\nTraces are configured in the Playwright config file and are set to run on CI on the first retry of a failed test. We don't recommend setting this to `on` so that traces are run on every test as it's very performance heavy. However you can run a trace locally when developing with the `--trace` flag.\n\n``` javascript\nnpx playwright test --trace on\n```\n\nOnce you run this command your traces will be recorded for each test and can be viewed directly from the HTML report.\n\n``` javascript\nnpx playwright show-report\n```\n\nTraces can be opened by clicking on the icon next to the test or by opening each of the test reports and scrolling down to the traces section.\n\n### Use Playwright's Tooling[​](#use-playwrights-tooling \"Direct link to Use Playwright's Tooling\")\n\nPlaywright comes with a range of tooling to help you write tests.\n\n- The [VS Code extension](getting-started-vscode) gives you a great developer experience when writing, running, and debugging tests.\n- The [test generator](codegen) can generate tests and pick locators for you.\n- The [trace viewer](trace-viewer) gives you a full trace of your tests as a local PWA that can easily be shared. With the trace viewer you can view the timeline, inspect DOM snapshots for each action, view network requests and more.\n- The [UI Mode](test-ui-mode) lets you explore, run and debug tests with a time travel experience complete with watch mode. All test files are loaded into the testing sidebar where you can expand each file and describe block to individually run, view, watch and debug each test.\n- [TypeScript](test-typescript) in Playwright works out of the box and gives you better IDE integrations. Your IDE will show you everything you can do and highlight when you do something wrong. No TypeScript experience is needed and it is not necessary for your code to be in TypeScript, all you need to do is create your tests with a `.ts` extension.\n\n### Test across all browsers[​](#test-across-all-browsers \"Direct link to Test across all browsers\")\n\nPlaywright makes it easy to test your site across all [browsers](test-projects#configure-projects-for-multiple-browsers) no matter what platform you are on. Testing across all browsers ensures your app works for all users. In your config file you can set up projects adding the name and which browser or device to use.\n\n``` javascript\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n  ],\n});\n```\n\n### Keep your Playwright dependency up to date[​](#keep-your-playwright-dependency-up-to-date \"Direct link to Keep your Playwright dependency up to date\")\n\nBy keeping your Playwright version up to date you will be able to test your app on the latest browser versions and catch failures before the latest browser version is released to the public.\n\n``` javascript\nnpm install -D @playwright/test@latest\n```\n\nCheck the [release notes](release-notes) to see what the latest version is and what changes have been released.\n\nYou can see what version of Playwright you have by running the following command.\n\n``` javascript\nnpx playwright --version\n```\n\n### Run tests on CI[​](#run-tests-on-ci \"Direct link to Run tests on CI\")\n\nSetup CI/CD and run your tests frequently. The more often you run your tests the better. Ideally you should run your tests on each commit and pull request. Playwright comes with a [GitHub actions workflow](ci-intro) so that tests will run on CI for you with no setup required. Playwright can also be setup on the [CI environment](ci) of your choice.\n\nUse Linux when running your tests on CI as it is cheaper. Developers can use whatever environment when running locally but use linux on CI.\n\n### Lint your tests[​](#lint-your-tests \"Direct link to Lint your tests\")\n\nLinting the tests helps catching errors early. Use [`@typescript-eslint/no-floating-promises`](https://typescript-eslint.io/rules/no-floating-promises/) [ESLint](https://eslint.org) rule to make sure there are no missing awaits before the asynchronous calls to the Playwright API.\n\n### Use parallelism and sharding[​](#use-parallelism-and-sharding \"Direct link to Use parallelism and sharding\")\n\nPlaywright runs tests in [parallel](test-parallel) by default. Tests in a single file are run in order, in the same worker process. If you have many independent tests in a single file, you might want to run them in parallel\n\n``` javascript\nimport { test } from '@playwright/test';\n\ntest.describe.configure({ mode: 'parallel' });\n\ntest('runs in parallel 1', async ({ page }) => { /* ... */ });\ntest('runs in parallel 2', async ({ page }) => { /* ... */ });\n```\n\nPlaywright can [shard](test-parallel#shard-tests-between-multiple-machines) a test suite, so that it can be executed on multiple machines.\n\n``` javascript\nnpx playwright test --shard=1/3\n```\n\n## Productivity tips[​](#productivity-tips \"Direct link to Productivity tips\")\n\n### Use Soft assertions[​](#use-soft-assertions \"Direct link to Use Soft assertions\")\n\nIf your test fails, Playwright will give you an error message showing what part of the test failed which you can see either in VS Code, the terminal, the HTML report, or the trace viewer. However, you can also use [soft assertions](test-assertions#soft-assertions). These do not immediately terminate the test execution, but rather compile and display a list of failed assertions once the test ended.\n\n``` javascript\n// Make a few checks that will not stop the test when failed...\nawait expect.soft(page.getByTestId('status')).toHaveText('Success');\n\n// ... and continue the test to check more things.\nawait page.getByRole('link', { name: 'next page' }).click();\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/best-practices](https://playwright.dev/docs/best-practices)"
- name: Browser
  id: api/class-browser
  summary: A Browser is created via browserType.launch()
  description: "# Browser\n\n- extends: [EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter \"EventEmitter\")\n\nA Browser is created via [browserType.launch()](class-browsertype#browser-type-launch). An example of using a [Browser](class-browser \"Browser\") to create a [Page](class-page \"Page\"):\n\n``` javascript\nconst { firefox } = require('playwright');  // Or 'chromium' or 'webkit'.\n\n(async () => {\n  const browser = await firefox.launch();\n  const page = await browser.newPage();\n  await page.goto('https://example.com');\n  await browser.close();\n})();\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### browserType[​](#browser-browser-type \"Direct link to browserType\")\n\nGet the browser type (chromium, firefox or webkit) that the browser belongs to.\n\n**Usage**\n\n``` javascript\nbrowser.browserType();\n```\n\n**Returns**\n\n- [BrowserType](class-browsertype \"BrowserType\")\n\n### close[​](#browser-close \"Direct link to close\")\n\nAdded before v1.9\n\nIn case this browser is obtained using [browserType.launch()](class-browsertype#browser-type-launch), closes the browser and all of its pages (if any were opened).\n\nIn case this browser is connected to, clears all created contexts belonging to this browser and disconnects from the browser server.\n\n> note\n>\n> This is similar to force quitting the browser. Therefore, you should call [browserContext.close()](class-browsercontext#browser-context-close) on any [BrowserContext](class-browsercontext \"BrowserContext\")'s you explicitly created earlier with [browser.newContext()](class-browser#browser-new-context) **before** calling [browser.close()](class-browser#browser-close).\n\nThe [Browser](class-browser \"Browser\") object itself is considered to be disposed and cannot be used anymore.\n\n**Usage**\n\n``` javascript\nawait browser.close();\nawait browser.close(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `reason` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    The reason to be reported to the operations interrupted by the browser closure.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### contexts[​](#browser-contexts \"Direct link to contexts\")\n\nAdded before v1.9\n\nReturns an array of all open browser contexts. In a newly created browser, this will return zero browser contexts.\n\n**Usage**\n\n``` javascript\nconst browser = await pw.webkit.launch();\nconsole.log(browser.contexts().length); // prints `0`\n\nconst context = await browser.newContext();\nconsole.log(browser.contexts().length); // prints `1`\n```\n\n**Returns**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[BrowserContext](class-browsercontext \"BrowserContext\")\\>\n\n### isConnected[​](#browser-is-connected \"Direct link to isConnected\")\n\nAdded before v1.9\n\nIndicates that the browser is connected.\n\n**Usage**\n\n``` javascript\nbrowser.isConnected();\n```\n\n**Returns**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### newBrowserCDPSession[​](#browser-new-browser-cdp-session \"Direct link to newBrowserCDPSession\")\n\n> note\n>\n> CDP Sessions are only supported on Chromium-based browsers.\n\nReturns the newly created browser session.\n\n**Usage**\n\n``` javascript\nawait browser.newBrowserCDPSession();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[CDPSession](class-cdpsession \"CDPSession\")\\>\n\n### newContext[​](#browser-new-context \"Direct link to newContext\")\n\nAdded before v1.9\n\nCreates a new browser context. It won't share cookies/cache with other browser contexts.\n\n> note\n>\n> If directly using this method to create [BrowserContext](class-browsercontext \"BrowserContext\")s, it is best practice to explicitly close the returned context via [browserContext.close()](class-browsercontext#browser-context-close) when your code is done with the [BrowserContext](class-browsercontext \"BrowserContext\"), and before calling [browser.close()](class-browser#browser-close). This will ensure the `context` is closed gracefully and any artifacts—like HARs and videos—are fully flushed and saved.\n\n**Usage**\n\n``` javascript\n(async () => {\n  const browser = await playwright.firefox.launch();  // Or 'chromium' or 'webkit'.\n  // Create a new incognito browser context.\n  const context = await browser.newContext();\n  // Create a new page in a pristine context.\n  const page = await context.newPage();\n  await page.goto('https://example.com');\n\n  // Gracefully close up everything\n  await context.close();\n  await browser.close();\n})();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `acceptDownloads` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.\n\n  - `baseURL` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    When using [page.goto()](class-page#page-goto), [page.route()](class-page#page-route), [page.waitForURL()](class-page#page-wait-for-url), [page.waitForRequest()](class-page#page-wait-for-request), or [page.waitForResponse()](class-page#page-wait-for-response) it takes the base URL in consideration by using the [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL. Unset by default. Examples:\n\n    - baseURL: `http://localhost:3000` and navigating to `/bar.html` results in `http://localhost:3000/bar.html`\n    - baseURL: `http://localhost:3000/foo/` and navigating to `./bar.html` results in `http://localhost:3000/foo/bar.html`\n    - baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in `http://localhost:3000/bar.html`\n\n  - `bypassCSP` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Toggles bypassing page's Content-Security-Policy. Defaults to `false`.\n\n  - `clientCertificates` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Exact origin that the certificate is valid for. Origin includes `https` protocol, a hostname and optionally a port.\n\n    - `certPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Path to the file with the certificate in PEM format.\n\n    - `keyPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Path to the file with the private key in PEM format.\n\n    - `pfxPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Path to the PFX or PKCS12 encoded private key and certificate chain.\n\n    - `passphrase` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Passphrase for the private key (PEM or PFX).\n\n    TLS Client Authentication allows the server to request a client certificate and verify it.\n\n    **Details**\n\n    An array of client certificates to be used. Each certificate object must have both `certPath` and `keyPath` or a single `pfxPath` to load the client certificate. Optionally, `passphrase` property should be provided if the certficiate is encrypted. The `origin` property should be provided with an exact match to the request origin that the certificate is valid for.\n\n    > note\n    >\n    > Using Client Certificates in combination with Proxy Servers is not supported.\n\n    > note\n    >\n    > When using WebKit on macOS, accessing `localhost` will not pick up client certificates. You can make it work by replacing `localhost` with `local.playwright`.\n\n  - `colorScheme` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| \"light\" \\| \"dark\" \\| \"no-preference\" *(optional)*\n\n    Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'light'`.\n\n  - `deviceScaleFactor` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Specify device scale factor (can be thought of as dpr). Defaults to `1`. Learn more about [emulating devices with device scale factor](../emulation#devices).\n\n  - `extraHTTPHeaders` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    An object containing additional HTTP headers to be sent with every request. Defaults to none.\n\n  - `forcedColors` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| \"active\" \\| \"none\" *(optional)*\n\n    Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'none'`.\n\n  - `geolocation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `latitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Latitude between -90 and 90.\n\n    - `longitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Longitude between -180 and 180.\n\n    - `accuracy` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n      Non-negative accuracy value. Defaults to `0`.\n\n  - `hasTouch` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Specifies if viewport supports touch events. Defaults to false. Learn more about [mobile emulation](../emulation#devices).\n\n  - `httpCredentials` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Restrain sending http credentials on specific origin (scheme://host:port).\n\n    - `send` \"unauthorized\" \\| \"always\" *(optional)*\n\n      This option only applies to the requests sent from corresponding [APIRequestContext](class-apirequestcontext \"APIRequestContext\") and does not affect requests sent from the browser. `'always'` - `Authorization` header with basic authentication credentials will be sent with the each API request. `'unauthorized` - the credentials are only sent when 401 (Unauthorized) response with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.\n\n    Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no origin is specified, the username and password are sent to any servers upon unauthorized responses.\n\n  - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.\n\n  - `isMobile` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether the `meta viewport` tag is taken into account and touch events are enabled. isMobile is a part of device, so you don't actually need to set it manually. Defaults to `false` and is not supported in Firefox. Learn more about [mobile emulation](../emulation#ismobile).\n\n  - `javaScriptEnabled` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether or not to enable JavaScript in the context. Defaults to `true`. Learn more about [disabling JavaScript](../emulation#javascript-enabled).\n\n  - `locale` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default locale. Learn more about emulation in our [emulation guide](../emulation#locale--timezone).\n\n  - `logger` [Logger](class-logger \"Logger\") *(optional)*\n\n    Logger sink for Playwright logging.\n\n  - `offline` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to emulate network being offline. Defaults to `false`. Learn more about [network emulation](../emulation#offline).\n\n  - `permissions` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    A list of permissions to grant to all pages in this context. See [browserContext.grantPermissions()](class-browsercontext#browser-context-grant-permissions) for more details. Defaults to none.\n\n  - `proxy` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `server` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.\n\n    - `bypass` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional comma-separated domains to bypass proxy, for example `\".com, chromium.org, .domain.com\"`.\n\n    - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional username to use if HTTP proxy requires authentication.\n\n    - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional password to use if HTTP proxy requires authentication.\n\n    Network proxy settings to use with this context. Defaults to none.\n\n    > note\n    >\n    > For Chromium on Windows the browser needs to be launched with the global proxy for this option to work. If all contexts override the proxy, global proxy will be never used and can be any string, for example `launch({ proxy: { server: 'http://per-context' } })`.\n\n  - `recordHar` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `omitContent` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n      Optional setting to control whether to omit request content from the HAR. Defaults to `false`. Deprecated, use `content` policy instead.\n\n    - `content` \"omit\" \\| \"embed\" \\| \"attach\" *(optional)*\n\n      Optional setting to control resource content management. If `omit` is specified, content is not persisted. If `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is specified, content is stored inline the HAR file as per HAR specification. Defaults to `attach` for `.zip` output files and to `embed` for all other file extensions.\n\n    - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Path on the filesystem to write the HAR file to. If the file name ends with `.zip`, `content: 'attach'` is used by default.\n\n    - `mode` \"full\" \\| \"minimal\" *(optional)*\n\n      When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page, cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `full`.\n\n    - `urlFilter` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") *(optional)*\n\n      A glob or regex pattern to filter requests that are stored in the HAR. When a `baseURL` via the context options was provided and the passed URL is a path, it gets merged via the [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor. Defaults to none.\n\n    Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file. If not specified, the HAR is not recorded. Make sure to await [browserContext.close()](class-browsercontext#browser-context-close) for the HAR to be saved.\n\n  - `recordVideo` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `dir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Path to the directory to put videos into.\n\n    - `size` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n      - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n        Video frame width.\n\n      - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n        Video frame height.\n\n      Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.\n\n    Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded. Make sure to await [browserContext.close()](class-browsercontext#browser-context-close) for videos to be saved.\n\n  - `reducedMotion` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| \"reduce\" \\| \"no-preference\" *(optional)*\n\n    Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'no-preference'`.\n\n  - `screen` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      page width in pixels.\n\n    - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      page height in pixels.\n\n    Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the `viewport` is set.\n\n  - `serviceWorkers` \"allow\" \\| \"block\" *(optional)*\n\n    Whether to allow sites to register Service workers. Defaults to `'allow'`.\n\n    - `'allow'`: [Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) can be registered.\n    - `'block'`: Playwright will block all registration of Service Workers.\n\n  - `storageState` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `cookies` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n      - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      - `domain` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n        Domain and path are required. For the cookie to apply to all subdomains as well, prefix domain with a dot, like this: \".example.com\"\n\n      - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n        Domain and path are required\n\n      - `expires` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n        Unix time in seconds.\n\n      - `httpOnly` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n      - `secure` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n      - `sameSite` \"Strict\" \\| \"Lax\" \\| \"None\"\n\n        sameSite flag\n\n      Cookies to set for context\n    - `origins` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n      - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      - `localStorage` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n        - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n        - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      localStorage to set for context\n\n    Learn more about [storage state and auth](../auth).\n\n    Populates context with given storage state. This option can be used to initialize context with logged-in information obtained via [browserContext.storageState()](class-browsercontext#browser-context-storage-state).\n\n  - `strictSelectors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    If set to true, enables strict selectors mode for this context. In the strict selectors mode all operations on selectors that imply single target DOM element will throw when more than one element matches the selector. This option does not affect any Locator APIs (Locators are always strict). Defaults to `false`. See [Locator](class-locator \"Locator\") to learn more about the strict mode.\n\n  - `timezoneId` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Changes the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1) for a list of supported timezone IDs. Defaults to the system timezone.\n\n  - `userAgent` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Specific user agent to use in this context.\n\n  - `videoSize` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    > Deprecated\n    >\n    > Use `recordVideo` instead.\n\n    - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Video frame width.\n\n    - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Video frame height.\n\n  - `videosPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    > Deprecated\n    >\n    > Use `recordVideo` instead.\n\n  - `viewport` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      page width in pixels.\n\n    - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      page height in pixels.\n\n    Emulates consistent viewport for each page. Defaults to an 1280x720 viewport. Use `null` to disable the consistent viewport emulation. Learn more about [viewport emulation](../emulation#viewport).\n\n    > note\n    >\n    > The `null` value opts out from the default presets, makes viewport depend on the host window size defined by the operating system. It makes the execution of the tests non-deterministic.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[BrowserContext](class-browsercontext \"BrowserContext\")\\>\n\n### newPage[​](#browser-new-page \"Direct link to newPage\")\n\nAdded before v1.9\n\nCreates a new page in a new browser context. Closing this page will close the context as well.\n\nThis is a convenience API that should only be used for the single-page scenarios and short snippets. Production code and testing frameworks should explicitly create [browser.newContext()](class-browser#browser-new-context) followed by the [browserContext.newPage()](class-browsercontext#browser-context-new-page) to control their exact life times.\n\n**Usage**\n\n``` javascript\nawait browser.newPage();\nawait browser.newPage(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `acceptDownloads` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.\n\n  - `baseURL` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    When using [page.goto()](class-page#page-goto), [page.route()](class-page#page-route), [page.waitForURL()](class-page#page-wait-for-url), [page.waitForRequest()](class-page#page-wait-for-request), or [page.waitForResponse()](class-page#page-wait-for-response) it takes the base URL in consideration by using the [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL. Unset by default. Examples:\n\n    - baseURL: `http://localhost:3000` and navigating to `/bar.html` results in `http://localhost:3000/bar.html`\n    - baseURL: `http://localhost:3000/foo/` and navigating to `./bar.html` results in `http://localhost:3000/foo/bar.html`\n    - baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in `http://localhost:3000/bar.html`\n\n  - `bypassCSP` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Toggles bypassing page's Content-Security-Policy. Defaults to `false`.\n\n  - `clientCertificates` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Exact origin that the certificate is valid for. Origin includes `https` protocol, a hostname and optionally a port.\n\n    - `certPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Path to the file with the certificate in PEM format.\n\n    - `keyPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Path to the file with the private key in PEM format.\n\n    - `pfxPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Path to the PFX or PKCS12 encoded private key and certificate chain.\n\n    - `passphrase` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Passphrase for the private key (PEM or PFX).\n\n    TLS Client Authentication allows the server to request a client certificate and verify it.\n\n    **Details**\n\n    An array of client certificates to be used. Each certificate object must have both `certPath` and `keyPath` or a single `pfxPath` to load the client certificate. Optionally, `passphrase` property should be provided if the certficiate is encrypted. The `origin` property should be provided with an exact match to the request origin that the certificate is valid for.\n\n    > note\n    >\n    > Using Client Certificates in combination with Proxy Servers is not supported.\n\n    > note\n    >\n    > When using WebKit on macOS, accessing `localhost` will not pick up client certificates. You can make it work by replacing `localhost` with `local.playwright`.\n\n  - `colorScheme` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| \"light\" \\| \"dark\" \\| \"no-preference\" *(optional)*\n\n    Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'light'`.\n\n  - `deviceScaleFactor` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Specify device scale factor (can be thought of as dpr). Defaults to `1`. Learn more about [emulating devices with device scale factor](../emulation#devices).\n\n  - `extraHTTPHeaders` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    An object containing additional HTTP headers to be sent with every request. Defaults to none.\n\n  - `forcedColors` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| \"active\" \\| \"none\" *(optional)*\n\n    Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'none'`.\n\n  - `geolocation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `latitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Latitude between -90 and 90.\n\n    - `longitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Longitude between -180 and 180.\n\n    - `accuracy` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n      Non-negative accuracy value. Defaults to `0`.\n\n  - `hasTouch` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Specifies if viewport supports touch events. Defaults to false. Learn more about [mobile emulation](../emulation#devices).\n\n  - `httpCredentials` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Restrain sending http credentials on specific origin (scheme://host:port).\n\n    - `send` \"unauthorized\" \\| \"always\" *(optional)*\n\n      This option only applies to the requests sent from corresponding [APIRequestContext](class-apirequestcontext \"APIRequestContext\") and does not affect requests sent from the browser. `'always'` - `Authorization` header with basic authentication credentials will be sent with the each API request. `'unauthorized` - the credentials are only sent when 401 (Unauthorized) response with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.\n\n    Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no origin is specified, the username and password are sent to any servers upon unauthorized responses.\n\n  - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.\n\n  - `isMobile` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether the `meta viewport` tag is taken into account and touch events are enabled. isMobile is a part of device, so you don't actually need to set it manually. Defaults to `false` and is not supported in Firefox. Learn more about [mobile emulation](../emulation#ismobile).\n\n  - `javaScriptEnabled` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether or not to enable JavaScript in the context. Defaults to `true`. Learn more about [disabling JavaScript](../emulation#javascript-enabled).\n\n  - `locale` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default locale. Learn more about emulation in our [emulation guide](../emulation#locale--timezone).\n\n  - `logger` [Logger](class-logger \"Logger\") *(optional)*\n\n    Logger sink for Playwright logging.\n\n  - `offline` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to emulate network being offline. Defaults to `false`. Learn more about [network emulation](../emulation#offline).\n\n  - `permissions` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    A list of permissions to grant to all pages in this context. See [browserContext.grantPermissions()](class-browsercontext#browser-context-grant-permissions) for more details. Defaults to none.\n\n  - `proxy` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `server` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.\n\n    - `bypass` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional comma-separated domains to bypass proxy, for example `\".com, chromium.org, .domain.com\"`.\n\n    - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional username to use if HTTP proxy requires authentication.\n\n    - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional password to use if HTTP proxy requires authentication.\n\n    Network proxy settings to use with this context. Defaults to none.\n\n    > note\n    >\n    > For Chromium on Windows the browser needs to be launched with the global proxy for this option to work. If all contexts override the proxy, global proxy will be never used and can be any string, for example `launch({ proxy: { server: 'http://per-context' } })`.\n\n  - `recordHar` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `omitContent` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n      Optional setting to control whether to omit request content from the HAR. Defaults to `false`. Deprecated, use `content` policy instead.\n\n    - `content` \"omit\" \\| \"embed\" \\| \"attach\" *(optional)*\n\n      Optional setting to control resource content management. If `omit` is specified, content is not persisted. If `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is specified, content is stored inline the HAR file as per HAR specification. Defaults to `attach` for `.zip` output files and to `embed` for all other file extensions.\n\n    - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Path on the filesystem to write the HAR file to. If the file name ends with `.zip`, `content: 'attach'` is used by default.\n\n    - `mode` \"full\" \\| \"minimal\" *(optional)*\n\n      When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page, cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `full`.\n\n    - `urlFilter` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") *(optional)*\n\n      A glob or regex pattern to filter requests that are stored in the HAR. When a `baseURL` via the context options was provided and the passed URL is a path, it gets merged via the [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor. Defaults to none.\n\n    Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file. If not specified, the HAR is not recorded. Make sure to await [browserContext.close()](class-browsercontext#browser-context-close) for the HAR to be saved.\n\n  - `recordVideo` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `dir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Path to the directory to put videos into.\n\n    - `size` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n      - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n        Video frame width.\n\n      - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n        Video frame height.\n\n      Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.\n\n    Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded. Make sure to await [browserContext.close()](class-browsercontext#browser-context-close) for videos to be saved.\n\n  - `reducedMotion` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| \"reduce\" \\| \"no-preference\" *(optional)*\n\n    Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'no-preference'`.\n\n  - `screen` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      page width in pixels.\n\n    - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      page height in pixels.\n\n    Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the `viewport` is set.\n\n  - `serviceWorkers` \"allow\" \\| \"block\" *(optional)*\n\n    Whether to allow sites to register Service workers. Defaults to `'allow'`.\n\n    - `'allow'`: [Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) can be registered.\n    - `'block'`: Playwright will block all registration of Service Workers.\n\n  - `storageState` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `cookies` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n      - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      - `domain` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n        Domain and path are required. For the cookie to apply to all subdomains as well, prefix domain with a dot, like this: \".example.com\"\n\n      - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n        Domain and path are required\n\n      - `expires` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n        Unix time in seconds.\n\n      - `httpOnly` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n      - `secure` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n      - `sameSite` \"Strict\" \\| \"Lax\" \\| \"None\"\n\n        sameSite flag\n\n      Cookies to set for context\n    - `origins` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n      - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      - `localStorage` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n        - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n        - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      localStorage to set for context\n\n    Learn more about [storage state and auth](../auth).\n\n    Populates context with given storage state. This option can be used to initialize context with logged-in information obtained via [browserContext.storageState()](class-browsercontext#browser-context-storage-state).\n\n  - `strictSelectors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    If set to true, enables strict selectors mode for this context. In the strict selectors mode all operations on selectors that imply single target DOM element will throw when more than one element matches the selector. This option does not affect any Locator APIs (Locators are always strict). Defaults to `false`. See [Locator](class-locator \"Locator\") to learn more about the strict mode.\n\n  - `timezoneId` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Changes the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1) for a list of supported timezone IDs. Defaults to the system timezone.\n\n  - `userAgent` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Specific user agent to use in this context.\n\n  - `videoSize` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    > Deprecated\n    >\n    > Use `recordVideo` instead.\n\n    - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Video frame width.\n\n    - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Video frame height.\n\n  - `videosPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    > Deprecated\n    >\n    > Use `recordVideo` instead.\n\n  - `viewport` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      page width in pixels.\n\n    - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      page height in pixels.\n\n    Emulates consistent viewport for each page. Defaults to an 1280x720 viewport. Use `null` to disable the consistent viewport emulation. Learn more about [viewport emulation](../emulation#viewport).\n\n    > note\n    >\n    > The `null` value opts out from the default presets, makes viewport depend on the host window size defined by the operating system. It makes the execution of the tests non-deterministic.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Page](class-page \"Page\")\\>\n\n### startTracing[​](#browser-start-tracing \"Direct link to startTracing\")\n\n> note\n>\n> This API controls [Chromium Tracing](https://www.chromium.org/developers/how-tos/trace-event-profiling-tool) which is a low-level chromium-specific debugging tool. API to control [Playwright Tracing](../trace-viewer) could be found [here](class-tracing).\n\nYou can use [browser.startTracing()](class-browser#browser-start-tracing) and [browser.stopTracing()](class-browser#browser-stop-tracing) to create a trace file that can be opened in Chrome DevTools performance panel.\n\n**Usage**\n\n``` javascript\nawait browser.startTracing(page, { path: 'trace.json' });\nawait page.goto('https://www.google.com');\nawait browser.stopTracing();\n```\n\n**Arguments**\n\n- `page` [Page](class-page \"Page\") *(optional)*\n\n  Optional, if specified, tracing includes screenshots of the given page.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `categories` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    specify custom categories to use instead of default.\n\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    A path to write the trace file to.\n\n  - `screenshots` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    captures screenshots in the trace.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### stopTracing[​](#browser-stop-tracing \"Direct link to stopTracing\")\n\n> note\n>\n> This API controls [Chromium Tracing](https://www.chromium.org/developers/how-tos/trace-event-profiling-tool) which is a low-level chromium-specific debugging tool. API to control [Playwright Tracing](../trace-viewer) could be found [here](class-tracing).\n\nReturns the buffer with trace data.\n\n**Usage**\n\n``` javascript\nawait browser.stopTracing();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\\>\n\n### version[​](#browser-version \"Direct link to version\")\n\nAdded before v1.9\n\nReturns the browser version.\n\n**Usage**\n\n``` javascript\nbrowser.version();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n## Events[​](#events \"Direct link to Events\")\n\n### on('disconnected')[​](#browser-event-disconnected \"Direct link to on('disconnected')\")\n\nAdded before v1.9\n\nEmitted when Browser gets disconnected from the browser application. This might happen because of one of the following:\n\n- Browser application is closed or crashed.\n- The [browser.close()](class-browser#browser-close) method was called.\n\n**Usage**\n\n``` javascript\nbrowser.on('disconnected', data => {});\n```\n\n**Event data**\n\n- [Browser](class-browser \"Browser\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-browser](https://playwright.dev/docs/api/class-browser)"
- name: browser.browserType
  id: api/class-browser#browser-browser-type
  summary: Get the browser type (chromium, firefox or webkit) that the browser belongs to
  belongs_to: Browser
  description: |-
    ### browserType[​](#browser-browser-type "Direct link to browserType")

    Get the browser type (chromium, firefox or webkit) that the browser belongs to.

    **Usage**

    ``` javascript
    browser.browserType();
    ```

    **Returns**

    - [BrowserType](class-browsertype "BrowserType")
- name: browser.close
  id: api/class-browser#browser-close
  summary: In case this browser is obtained using browserType.launch(), closes the browser and all of its pages (if any were opened)
  belongs_to: Browser
  description: |-
    ### close[​](#browser-close "Direct link to close")

    Added before v1.9

    In case this browser is obtained using [browserType.launch()](class-browsertype#browser-type-launch), closes the browser and all of its pages (if any were opened).

    In case this browser is connected to, clears all created contexts belonging to this browser and disconnects from the browser server.

    > note
    >
    > This is similar to force quitting the browser. Therefore, you should call [browserContext.close()](class-browsercontext#browser-context-close) on any [BrowserContext](class-browsercontext "BrowserContext")'s you explicitly created earlier with [browser.newContext()](class-browser#browser-new-context) **before** calling [browser.close()](class-browser#browser-close).

    The [Browser](class-browser "Browser") object itself is considered to be disposed and cannot be used anymore.

    **Usage**

    ``` javascript
    await browser.close();
    await browser.close(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `reason` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        The reason to be reported to the operations interrupted by the browser closure.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: browser.contexts
  id: api/class-browser#browser-contexts
  summary: Returns an array of all open browser contexts
  belongs_to: Browser
  description: |-
    ### contexts[​](#browser-contexts "Direct link to contexts")

    Added before v1.9

    Returns an array of all open browser contexts. In a newly created browser, this will return zero browser contexts.

    **Usage**

    ``` javascript
    const browser = await pw.webkit.launch();
    console.log(browser.contexts().length); // prints `0`

    const context = await browser.newContext();
    console.log(browser.contexts().length); // prints `1`
    ```

    **Returns**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[BrowserContext](class-browsercontext "BrowserContext")\>

    &nbsp;
- name: browser.isConnected
  id: api/class-browser#browser-is-connected
  summary: Indicates that the browser is connected
  belongs_to: Browser
  description: |-
    ### isConnected[​](#browser-is-connected "Direct link to isConnected")

    Added before v1.9

    Indicates that the browser is connected.

    **Usage**

    ``` javascript
    browser.isConnected();
    ```

    **Returns**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: browser.newBrowserCDPSession
  id: api/class-browser#browser-new-browser-cdp-session
  summary: CDP Sessions are only supported on Chromium-based browsers
  belongs_to: Browser
  description: |-
    ### newBrowserCDPSession[​](#browser-new-browser-cdp-session "Direct link to newBrowserCDPSession")

    > note
    >
    > CDP Sessions are only supported on Chromium-based browsers.

    Returns the newly created browser session.

    **Usage**

    ``` javascript
    await browser.newBrowserCDPSession();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[CDPSession](class-cdpsession "CDPSession")\>

    &nbsp;
- name: browser.newContext
  id: api/class-browser#browser-new-context
  summary: Creates a new browser context
  belongs_to: Browser
  description: |-
    ### newContext[​](#browser-new-context "Direct link to newContext")

    Added before v1.9

    Creates a new browser context. It won't share cookies/cache with other browser contexts.

    > note
    >
    > If directly using this method to create [BrowserContext](class-browsercontext "BrowserContext")s, it is best practice to explicitly close the returned context via [browserContext.close()](class-browsercontext#browser-context-close) when your code is done with the [BrowserContext](class-browsercontext "BrowserContext"), and before calling [browser.close()](class-browser#browser-close). This will ensure the `context` is closed gracefully and any artifacts—like HARs and videos—are fully flushed and saved.

    **Usage**

    ``` javascript
    (async () => {
      const browser = await playwright.firefox.launch();  // Or 'chromium' or 'webkit'.
      // Create a new incognito browser context.
      const context = await browser.newContext();
      // Create a new page in a pristine context.
      const page = await context.newPage();
      await page.goto('https://example.com');

      // Gracefully close up everything
      await context.close();
      await browser.close();
    })();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `acceptDownloads` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.

      - `baseURL` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        When using [page.goto()](class-page#page-goto), [page.route()](class-page#page-route), [page.waitForURL()](class-page#page-wait-for-url), [page.waitForRequest()](class-page#page-wait-for-request), or [page.waitForResponse()](class-page#page-wait-for-response) it takes the base URL in consideration by using the [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL. Unset by default. Examples:

        - baseURL: `http://localhost:3000` and navigating to `/bar.html` results in `http://localhost:3000/bar.html`
        - baseURL: `http://localhost:3000/foo/` and navigating to `./bar.html` results in `http://localhost:3000/foo/bar.html`
        - baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in `http://localhost:3000/bar.html`

      - `bypassCSP` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Toggles bypassing page's Content-Security-Policy. Defaults to `false`.

      - `clientCertificates`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> *(optional)*

        - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          Exact origin that the certificate is valid for. Origin includes `https` protocol, a hostname and optionally a port.

        - `certPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Path to the file with the certificate in PEM format.

        - `keyPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Path to the file with the private key in PEM format.

        - `pfxPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Path to the PFX or PKCS12 encoded private key and certificate chain.

        - `passphrase` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Passphrase for the private key (PEM or PFX).

        TLS Client Authentication allows the server to request a client certificate and verify it.

        **Details**

        An array of client certificates to be used. Each certificate object must have both `certPath` and `keyPath` or a single `pfxPath` to load the client certificate. Optionally, `passphrase` property should be provided if the certficiate is encrypted. The `origin` property should be provided with an exact match to the request origin that the certificate is valid for.

        > note
        >
        > Using Client Certificates in combination with Proxy Servers is not supported.

        > note
        >
        > When using WebKit on macOS, accessing `localhost` will not pick up client certificates. You can make it work by replacing `localhost` with `local.playwright`.

      - `colorScheme`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "light" \| "dark" \| "no-preference" *(optional)*

        Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'light'`.

      - `deviceScaleFactor` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Specify device scale factor (can be thought of as dpr). Defaults to `1`. Learn more about [emulating devices with device scale factor](../emulation#devices).

      - `extraHTTPHeaders`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        An object containing additional HTTP headers to be sent with every request. Defaults to none.

      - `forcedColors`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "active" \| "none" *(optional)*

        Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'none'`.

      - `geolocation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `latitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          Latitude between -90 and 90.

        - `longitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          Longitude between -180 and 180.

        - `accuracy` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

          Non-negative accuracy value. Defaults to `0`.

      - `hasTouch` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Specifies if viewport supports touch events. Defaults to false. Learn more about [mobile emulation](../emulation#devices).

      - `httpCredentials` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Restrain sending http credentials on specific origin (scheme://host:port).

        - `send` "unauthorized" \| "always" *(optional)*

          This option only applies to the requests sent from corresponding [APIRequestContext](class-apirequestcontext "APIRequestContext") and does not affect requests sent from the browser. `'always'` - `Authorization` header with basic authentication credentials will be sent with the each API request. `'unauthorized` - the credentials are only sent when 401 (Unauthorized) response with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.

        Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no origin is specified, the username and password are sent to any servers upon unauthorized responses.

      - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

      - `isMobile` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether the `meta viewport` tag is taken into account and touch events are enabled. isMobile is a part of device, so you don't actually need to set it manually. Defaults to `false` and is not supported in Firefox. Learn more about [mobile emulation](../emulation#ismobile).

      - `javaScriptEnabled` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether or not to enable JavaScript in the context. Defaults to `true`. Learn more about [disabling JavaScript](../emulation#javascript-enabled).

      - `locale` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default locale. Learn more about emulation in our [emulation guide](../emulation#locale--timezone).

      - `logger` [Logger](class-logger "Logger") *(optional)*

        Logger sink for Playwright logging.

      - `offline` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to emulate network being offline. Defaults to `false`. Learn more about [network emulation](../emulation#offline).

      - `permissions`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        A list of permissions to grant to all pages in this context. See [browserContext.grantPermissions()](class-browsercontext#browser-context-grant-permissions) for more details. Defaults to none.

      - `proxy` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `server` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.

        - `bypass` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.

        - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Optional username to use if HTTP proxy requires authentication.

        - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Optional password to use if HTTP proxy requires authentication.

        Network proxy settings to use with this context. Defaults to none.

        > note
        >
        > For Chromium on Windows the browser needs to be launched with the global proxy for this option to work. If all contexts override the proxy, global proxy will be never used and can be any string, for example `launch({ proxy: { server: 'http://per-context' } })`.

      - `recordHar` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `omitContent` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

          Optional setting to control whether to omit request content from the HAR. Defaults to `false`. Deprecated, use `content` policy instead.

        - `content` "omit" \| "embed" \| "attach" *(optional)*

          Optional setting to control resource content management. If `omit` is specified, content is not persisted. If `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is specified, content is stored inline the HAR file as per HAR specification. Defaults to `attach` for `.zip` output files and to `embed` for all other file extensions.

        - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          Path on the filesystem to write the HAR file to. If the file name ends with `.zip`, `content: 'attach'` is used by default.

        - `mode` "full" \| "minimal" *(optional)*

          When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page, cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `full`.

        - `urlFilter`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") *(optional)*

          A glob or regex pattern to filter requests that are stored in the HAR. When a `baseURL` via the context options was provided and the passed URL is a path, it gets merged via the [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor. Defaults to none.

        Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file. If not specified, the HAR is not recorded. Make sure to await [browserContext.close()](class-browsercontext#browser-context-close) for the HAR to be saved.

      - `recordVideo` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `dir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          Path to the directory to put videos into.

        - `size` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

          - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

            Video frame width.

          - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

            Video frame height.

          Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.

        Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded. Make sure to await [browserContext.close()](class-browsercontext#browser-context-close) for videos to be saved.

      - `reducedMotion`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "reduce" \| "no-preference" *(optional)*

        Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'no-preference'`.

      - `screen` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          page width in pixels.

        - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          page height in pixels.

        Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the `viewport` is set.

      - `serviceWorkers` "allow" \| "block" *(optional)*

        Whether to allow sites to register Service workers. Defaults to `'allow'`.

        - `'allow'`: [Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) can be registered.
        - `'block'`: Playwright will block all registration of Service Workers.

      - `storageState`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `cookies`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
          - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          - `value`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          - `domain`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

            Domain and path are required. For the cookie to apply to all subdomains as well, prefix domain with a dot, like this: ".example.com"

          - `path`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

            Domain and path are required

          - `expires`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

            Unix time in seconds.

          - `httpOnly`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

          - `secure`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

          - `sameSite` "Strict" \| "Lax" \| "None"

            sameSite flag

          Cookies to set for context
        - `origins`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
          - `origin`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          - `localStorage`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>

            - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

            - `value`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          localStorage to set for context

        Learn more about [storage state and auth](../auth).

        Populates context with given storage state. This option can be used to initialize context with logged-in information obtained via [browserContext.storageState()](class-browsercontext#browser-context-storage-state).

      - `strictSelectors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        If set to true, enables strict selectors mode for this context. In the strict selectors mode all operations on selectors that imply single target DOM element will throw when more than one element matches the selector. This option does not affect any Locator APIs (Locators are always strict). Defaults to `false`. See [Locator](class-locator "Locator") to learn more about the strict mode.

      - `timezoneId` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Changes the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1) for a list of supported timezone IDs. Defaults to the system timezone.

      - `userAgent` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Specific user agent to use in this context.

      - `videoSize` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        > Deprecated
        >
        > Use `recordVideo` instead.

        - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          Video frame width.

        - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          Video frame height.

      - `videosPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        > Deprecated
        >
        > Use `recordVideo` instead.

      - `viewport`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          page width in pixels.

        - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          page height in pixels.

        Emulates consistent viewport for each page. Defaults to an 1280x720 viewport. Use `null` to disable the consistent viewport emulation. Learn more about [viewport emulation](../emulation#viewport).

        > note
        >
        > The `null` value opts out from the default presets, makes viewport depend on the host window size defined by the operating system. It makes the execution of the tests non-deterministic.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[BrowserContext](class-browsercontext "BrowserContext")\>

    &nbsp;
- name: browser.newPage
  id: api/class-browser#browser-new-page
  summary: Creates a new page in a new browser context
  belongs_to: Browser
  description: |-
    ### newPage[​](#browser-new-page "Direct link to newPage")

    Added before v1.9

    Creates a new page in a new browser context. Closing this page will close the context as well.

    This is a convenience API that should only be used for the single-page scenarios and short snippets. Production code and testing frameworks should explicitly create [browser.newContext()](class-browser#browser-new-context) followed by the [browserContext.newPage()](class-browsercontext#browser-context-new-page) to control their exact life times.

    **Usage**

    ``` javascript
    await browser.newPage();
    await browser.newPage(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `acceptDownloads` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.

      - `baseURL` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        When using [page.goto()](class-page#page-goto), [page.route()](class-page#page-route), [page.waitForURL()](class-page#page-wait-for-url), [page.waitForRequest()](class-page#page-wait-for-request), or [page.waitForResponse()](class-page#page-wait-for-response) it takes the base URL in consideration by using the [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL. Unset by default. Examples:

        - baseURL: `http://localhost:3000` and navigating to `/bar.html` results in `http://localhost:3000/bar.html`
        - baseURL: `http://localhost:3000/foo/` and navigating to `./bar.html` results in `http://localhost:3000/foo/bar.html`
        - baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in `http://localhost:3000/bar.html`

      - `bypassCSP` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Toggles bypassing page's Content-Security-Policy. Defaults to `false`.

      - `clientCertificates`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> *(optional)*

        - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          Exact origin that the certificate is valid for. Origin includes `https` protocol, a hostname and optionally a port.

        - `certPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Path to the file with the certificate in PEM format.

        - `keyPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Path to the file with the private key in PEM format.

        - `pfxPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Path to the PFX or PKCS12 encoded private key and certificate chain.

        - `passphrase` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Passphrase for the private key (PEM or PFX).

        TLS Client Authentication allows the server to request a client certificate and verify it.

        **Details**

        An array of client certificates to be used. Each certificate object must have both `certPath` and `keyPath` or a single `pfxPath` to load the client certificate. Optionally, `passphrase` property should be provided if the certficiate is encrypted. The `origin` property should be provided with an exact match to the request origin that the certificate is valid for.

        > note
        >
        > Using Client Certificates in combination with Proxy Servers is not supported.

        > note
        >
        > When using WebKit on macOS, accessing `localhost` will not pick up client certificates. You can make it work by replacing `localhost` with `local.playwright`.

      - `colorScheme`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "light" \| "dark" \| "no-preference" *(optional)*

        Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'light'`.

      - `deviceScaleFactor` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Specify device scale factor (can be thought of as dpr). Defaults to `1`. Learn more about [emulating devices with device scale factor](../emulation#devices).

      - `extraHTTPHeaders`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        An object containing additional HTTP headers to be sent with every request. Defaults to none.

      - `forcedColors`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "active" \| "none" *(optional)*

        Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'none'`.

      - `geolocation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `latitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          Latitude between -90 and 90.

        - `longitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          Longitude between -180 and 180.

        - `accuracy` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

          Non-negative accuracy value. Defaults to `0`.

      - `hasTouch` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Specifies if viewport supports touch events. Defaults to false. Learn more about [mobile emulation](../emulation#devices).

      - `httpCredentials` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Restrain sending http credentials on specific origin (scheme://host:port).

        - `send` "unauthorized" \| "always" *(optional)*

          This option only applies to the requests sent from corresponding [APIRequestContext](class-apirequestcontext "APIRequestContext") and does not affect requests sent from the browser. `'always'` - `Authorization` header with basic authentication credentials will be sent with the each API request. `'unauthorized` - the credentials are only sent when 401 (Unauthorized) response with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.

        Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no origin is specified, the username and password are sent to any servers upon unauthorized responses.

      - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

      - `isMobile` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether the `meta viewport` tag is taken into account and touch events are enabled. isMobile is a part of device, so you don't actually need to set it manually. Defaults to `false` and is not supported in Firefox. Learn more about [mobile emulation](../emulation#ismobile).

      - `javaScriptEnabled` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether or not to enable JavaScript in the context. Defaults to `true`. Learn more about [disabling JavaScript](../emulation#javascript-enabled).

      - `locale` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default locale. Learn more about emulation in our [emulation guide](../emulation#locale--timezone).

      - `logger` [Logger](class-logger "Logger") *(optional)*

        Logger sink for Playwright logging.

      - `offline` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to emulate network being offline. Defaults to `false`. Learn more about [network emulation](../emulation#offline).

      - `permissions`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        A list of permissions to grant to all pages in this context. See [browserContext.grantPermissions()](class-browsercontext#browser-context-grant-permissions) for more details. Defaults to none.

      - `proxy` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `server` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.

        - `bypass` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.

        - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Optional username to use if HTTP proxy requires authentication.

        - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Optional password to use if HTTP proxy requires authentication.

        Network proxy settings to use with this context. Defaults to none.

        > note
        >
        > For Chromium on Windows the browser needs to be launched with the global proxy for this option to work. If all contexts override the proxy, global proxy will be never used and can be any string, for example `launch({ proxy: { server: 'http://per-context' } })`.

      - `recordHar` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `omitContent` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

          Optional setting to control whether to omit request content from the HAR. Defaults to `false`. Deprecated, use `content` policy instead.

        - `content` "omit" \| "embed" \| "attach" *(optional)*

          Optional setting to control resource content management. If `omit` is specified, content is not persisted. If `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is specified, content is stored inline the HAR file as per HAR specification. Defaults to `attach` for `.zip` output files and to `embed` for all other file extensions.

        - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          Path on the filesystem to write the HAR file to. If the file name ends with `.zip`, `content: 'attach'` is used by default.

        - `mode` "full" \| "minimal" *(optional)*

          When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page, cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `full`.

        - `urlFilter`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") *(optional)*

          A glob or regex pattern to filter requests that are stored in the HAR. When a `baseURL` via the context options was provided and the passed URL is a path, it gets merged via the [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor. Defaults to none.

        Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file. If not specified, the HAR is not recorded. Make sure to await [browserContext.close()](class-browsercontext#browser-context-close) for the HAR to be saved.

      - `recordVideo` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `dir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          Path to the directory to put videos into.

        - `size` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

          - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

            Video frame width.

          - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

            Video frame height.

          Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.

        Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded. Make sure to await [browserContext.close()](class-browsercontext#browser-context-close) for videos to be saved.

      - `reducedMotion`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "reduce" \| "no-preference" *(optional)*

        Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'no-preference'`.

      - `screen` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          page width in pixels.

        - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          page height in pixels.

        Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the `viewport` is set.

      - `serviceWorkers` "allow" \| "block" *(optional)*

        Whether to allow sites to register Service workers. Defaults to `'allow'`.

        - `'allow'`: [Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) can be registered.
        - `'block'`: Playwright will block all registration of Service Workers.

      - `storageState`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `cookies`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
          - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          - `value`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          - `domain`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

            Domain and path are required. For the cookie to apply to all subdomains as well, prefix domain with a dot, like this: ".example.com"

          - `path`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

            Domain and path are required

          - `expires`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

            Unix time in seconds.

          - `httpOnly`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

          - `secure`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

          - `sameSite` "Strict" \| "Lax" \| "None"

            sameSite flag

          Cookies to set for context
        - `origins`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
          - `origin`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          - `localStorage`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>

            - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

            - `value`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          localStorage to set for context

        Learn more about [storage state and auth](../auth).

        Populates context with given storage state. This option can be used to initialize context with logged-in information obtained via [browserContext.storageState()](class-browsercontext#browser-context-storage-state).

      - `strictSelectors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        If set to true, enables strict selectors mode for this context. In the strict selectors mode all operations on selectors that imply single target DOM element will throw when more than one element matches the selector. This option does not affect any Locator APIs (Locators are always strict). Defaults to `false`. See [Locator](class-locator "Locator") to learn more about the strict mode.

      - `timezoneId` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Changes the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1) for a list of supported timezone IDs. Defaults to the system timezone.

      - `userAgent` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Specific user agent to use in this context.

      - `videoSize` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        > Deprecated
        >
        > Use `recordVideo` instead.

        - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          Video frame width.

        - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          Video frame height.

      - `videosPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        > Deprecated
        >
        > Use `recordVideo` instead.

      - `viewport`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          page width in pixels.

        - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          page height in pixels.

        Emulates consistent viewport for each page. Defaults to an 1280x720 viewport. Use `null` to disable the consistent viewport emulation. Learn more about [viewport emulation](../emulation#viewport).

        > note
        >
        > The `null` value opts out from the default presets, makes viewport depend on the host window size defined by the operating system. It makes the execution of the tests non-deterministic.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Page](class-page "Page")\>

    &nbsp;
- name: browser.on('disconnected')
  id: api/class-browser#browser-event-disconnected
  summary: Emitted when Browser gets disconnected from the browser application
  belongs_to: Browser
  description: "### on('disconnected')[​](#browser-event-disconnected \"Direct link to on('disconnected')\")\n\nAdded before v1.9\n\nEmitted when Browser gets disconnected from the browser application. This might happen because of one of the following:\n\n- Browser application is closed or crashed.\n- The [browser.close()](class-browser#browser-close) method was called.\n\n**Usage**\n\n``` javascript\nbrowser.on('disconnected', data => {});\n```\n\n**Event data**\n\n- [Browser](class-browser \"Browser\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-browser](https://playwright.dev/docs/api/class-browser)"
- name: browser.startTracing
  id: api/class-browser#browser-start-tracing
  summary: This API controls Chromium Tracing which is a low-level chromium-specific debugging tool
  belongs_to: Browser
  description: |-
    ### startTracing[​](#browser-start-tracing "Direct link to startTracing")

    > note
    >
    > This API controls [Chromium Tracing](https://www.chromium.org/developers/how-tos/trace-event-profiling-tool) which is a low-level chromium-specific debugging tool. API to control [Playwright Tracing](../trace-viewer) could be found [here](class-tracing).

    You can use [browser.startTracing()](class-browser#browser-start-tracing) and [browser.stopTracing()](class-browser#browser-stop-tracing) to create a trace file that can be opened in Chrome DevTools performance panel.

    **Usage**

    ``` javascript
    await browser.startTracing(page, { path: 'trace.json' });
    await page.goto('https://www.google.com');
    await browser.stopTracing();
    ```

    **Arguments**

    - `page` [Page](class-page "Page") *(optional)*

      Optional, if specified, tracing includes screenshots of the given page.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `categories`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        specify custom categories to use instead of default.

      - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        A path to write the trace file to.

      - `screenshots` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        captures screenshots in the trace.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: browser.stopTracing
  id: api/class-browser#browser-stop-tracing
  summary: This API controls Chromium Tracing which is a low-level chromium-specific debugging tool
  belongs_to: Browser
  description: |-
    ### stopTracing[​](#browser-stop-tracing "Direct link to stopTracing")

    > note
    >
    > This API controls [Chromium Tracing](https://www.chromium.org/developers/how-tos/trace-event-profiling-tool) which is a low-level chromium-specific debugging tool. API to control [Playwright Tracing](../trace-viewer) could be found [here](class-tracing).

    Returns the buffer with trace data.

    **Usage**

    ``` javascript
    await browser.stopTracing();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")\>

    &nbsp;
- name: browser.version
  id: api/class-browser#browser-version
  summary: Returns the browser version
  belongs_to: Browser
  description: |-
    ### version[​](#browser-version "Direct link to version")

    Added before v1.9

    Returns the browser version.

    **Usage**

    ``` javascript
    browser.version();
    ```

    **Returns**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    ## Events[​](#events "Direct link to Events")
- name: BrowserContext
  id: api/class-browsercontext
  summary: BrowserContexts provide a way to operate multiple independent browser sessions
  description: "# BrowserContext\n\n- extends: [EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter \"EventEmitter\")\n\nBrowserContexts provide a way to operate multiple independent browser sessions.\n\nIf a page opens another page, e.g. with a `window.open` call, the popup will belong to the parent page's browser context.\n\nPlaywright allows creating \"incognito\" browser contexts with [browser.newContext()](class-browser#browser-new-context) method. \"Incognito\" browser contexts don't write any browsing data to disk.\n\n``` javascript\n// Create a new incognito browser context\nconst context = await browser.newContext();\n// Create a new page inside context.\nconst page = await context.newPage();\nawait page.goto('https://example.com');\n// Dispose context once it's no longer needed.\nawait context.close();\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### addCookies[​](#browser-context-add-cookies \"Direct link to addCookies\")\n\nAdded before v1.9\n\nAdds cookies into this browser context. All pages within this context will have these cookies installed. Cookies can be obtained via [browserContext.cookies()](class-browsercontext#browser-context-cookies).\n\n**Usage**\n\n``` javascript\nawait browserContext.addCookies([cookieObject1, cookieObject2]);\n```\n\n**Arguments**\n\n- `cookies` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Either url or domain / path are required. Optional.\n\n  - `domain` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    For the cookie to apply to all subdomains as well, prefix domain with a dot, like this: \".example.com\". Either url or domain / path are required. Optional.\n\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Either url or domain / path are required Optional.\n\n  - `expires` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Unix time in seconds. Optional.\n\n  - `httpOnly` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Optional.\n\n  - `secure` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Optional.\n\n  - `sameSite` \"Strict\" \\| \"Lax\" \\| \"None\" *(optional)*\n\n    Optional.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### addInitScript[​](#browser-context-add-init-script \"Direct link to addInitScript\")\n\nAdded before v1.9\n\nAdds a script which would be evaluated in one of the following scenarios:\n\n- Whenever a page is created in the browser context or is navigated.\n- Whenever a child frame is attached or navigated in any page in the browser context. In this case, the script is evaluated in the context of the newly attached frame.\n\nThe script is evaluated after the document was created but before any of its scripts were run. This is useful to amend the JavaScript environment, e.g. to seed `Math.random`.\n\n**Usage**\n\nAn example of overriding `Math.random` before the page loads:\n\n``` javascript\n// preload.js\nMath.random = () => 42;\n```\n\n``` javascript\n// In your playwright script, assuming the preload.js file is in same directory.\nawait browserContext.addInitScript({\n  path: 'preload.js'\n});\n```\n\n> note\n>\n> The order of evaluation of multiple scripts installed via [browserContext.addInitScript()](class-browsercontext#browser-context-add-init-script) and [page.addInitScript()](class-page#page-add-init-script) is not defined.\n\n**Arguments**\n\n- `script` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Path to the JavaScript file. If `path` is a relative path, then it is resolved relative to the current working directory. Optional.\n\n  - `content` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Raw script content. Optional.\n\n  Script to be evaluated in all pages in the browser context.\n\n- `arg` [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\") *(optional)*\n\n  Optional argument to pass to `script` (only supported when passing a function).\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### backgroundPages[​](#browser-context-background-pages \"Direct link to backgroundPages\")\n\n> note\n>\n> Background pages are only supported on Chromium-based browsers.\n\nAll existing background pages in the context.\n\n**Usage**\n\n``` javascript\nbrowserContext.backgroundPages();\n```\n\n**Returns**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Page](class-page \"Page\")\\>\n\n### browser[​](#browser-context-browser \"Direct link to browser\")\n\nAdded before v1.9\n\nReturns the browser instance of the context. If it was launched as a persistent context null gets returned.\n\n**Usage**\n\n``` javascript\nbrowserContext.browser();\n```\n\n**Returns**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Browser](class-browser \"Browser\")\n\n### clearCookies[​](#browser-context-clear-cookies \"Direct link to clearCookies\")\n\nAdded before v1.9\n\nRemoves cookies from context. Accepts optional filter.\n\n**Usage**\n\n``` javascript\nawait context.clearCookies();\nawait context.clearCookies({ name: 'session-id' });\nawait context.clearCookies({ domain: 'my-origin.com' });\nawait context.clearCookies({ domain: /.*my-origin\\.com/ });\nawait context.clearCookies({ path: '/api/v1' });\nawait context.clearCookies({ name: 'session-id', domain: 'my-origin.com' });\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `domain` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") *(optional)*\n\n    Only removes cookies with the given domain.\n\n  - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") *(optional)*\n\n    Only removes cookies with the given name.\n\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") *(optional)*\n\n    Only removes cookies with the given path.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### clearPermissions[​](#browser-context-clear-permissions \"Direct link to clearPermissions\")\n\nAdded before v1.9\n\nClears all permission overrides for the browser context.\n\n**Usage**\n\n``` javascript\nconst context = await browser.newContext();\nawait context.grantPermissions(['clipboard-read']);\n// do stuff ..\ncontext.clearPermissions();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### close[​](#browser-context-close \"Direct link to close\")\n\nAdded before v1.9\n\nCloses the browser context. All the pages that belong to the browser context will be closed.\n\n> note\n>\n> The default browser context cannot be closed.\n\n**Usage**\n\n``` javascript\nawait browserContext.close();\nawait browserContext.close(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `reason` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    The reason to be reported to the operations interrupted by the context closure.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### cookies[​](#browser-context-cookies \"Direct link to cookies\")\n\nAdded before v1.9\n\nIf no URLs are specified, this method returns all cookies. If URLs are specified, only cookies that affect those URLs are returned.\n\n**Usage**\n\n``` javascript\nawait browserContext.cookies();\nawait browserContext.cookies(urls);\n```\n\n**Arguments**\n\n- `urls` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n  Optional list of URLs.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\\>\n  - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  - `domain` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  - `expires` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Unix time in seconds.\n\n  - `httpOnly` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n  - `secure` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n  - `sameSite` \"Strict\" \\| \"Lax\" \\| \"None\"\n\n### exposeBinding[​](#browser-context-expose-binding \"Direct link to exposeBinding\")\n\nAdded before v1.9\n\nThe method adds a function called `name` on the `window` object of every frame in every page in the context. When called, the function executes `callback` and returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\") which resolves to the return value of `callback`. If the `callback` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\"), it will be awaited.\n\nThe first argument of the `callback` function contains information about the caller: `{ browserContext: BrowserContext, page: Page, frame: Frame }`.\n\nSee [page.exposeBinding()](class-page#page-expose-binding) for page-only version.\n\n**Usage**\n\nAn example of exposing page URL to all frames in all pages in the context:\n\n``` javascript\nconst { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.\n\n(async () => {\n  const browser = await webkit.launch({ headless: false });\n  const context = await browser.newContext();\n  await context.exposeBinding('pageURL', ({ page }) => page.url());\n  const page = await context.newPage();\n  await page.setContent(`\n    <script>\n      async function onClick() {\n        document.querySelector('div').textContent = await window.pageURL();\n      }\n    </script>\n    <button onclick=\"onClick()\">Click me</button>\n    <div></div>\n  `);\n  await page.getByRole('button').click();\n})();\n```\n\n**Arguments**\n\n- `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Name of the function on the window object.\n\n- `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")\n\n  Callback function that will be called in the Playwright's context.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `handle` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option will be removed in the future.\n\n    Whether to pass the argument as a handle, instead of passing by value. When passing a handle, only one argument is supported. When passing by value, multiple arguments are supported.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### exposeFunction[​](#browser-context-expose-function \"Direct link to exposeFunction\")\n\nAdded before v1.9\n\nThe method adds a function called `name` on the `window` object of every frame in every page in the context. When called, the function executes `callback` and returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\") which resolves to the return value of `callback`.\n\nIf the `callback` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\"), it will be awaited.\n\nSee [page.exposeFunction()](class-page#page-expose-function) for page-only version.\n\n**Usage**\n\nAn example of adding a `sha256` function to all pages in the context:\n\n``` javascript\nconst { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.\nconst crypto = require('crypto');\n\n(async () => {\n  const browser = await webkit.launch({ headless: false });\n  const context = await browser.newContext();\n  await context.exposeFunction('sha256', text =>\n    crypto.createHash('sha256').update(text).digest('hex'),\n  );\n  const page = await context.newPage();\n  await page.setContent(`\n    <script>\n      async function onClick() {\n        document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');\n      }\n    </script>\n    <button onclick=\"onClick()\">Click me</button>\n    <div></div>\n  `);\n  await page.getByRole('button').click();\n})();\n```\n\n**Arguments**\n\n- `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Name of the function on the window object.\n\n- `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")\n\n  Callback function that will be called in the Playwright's context.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### grantPermissions[​](#browser-context-grant-permissions \"Direct link to grantPermissions\")\n\nAdded before v1.9\n\nGrants specified permissions to the browser context. Only grants corresponding permissions to the given origin if specified.\n\n**Usage**\n\n``` javascript\nawait browserContext.grantPermissions(permissions);\nawait browserContext.grantPermissions(permissions, options);\n```\n\n**Arguments**\n\n- `permissions` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n  A permission or an array of permissions to grant. Permissions can be one of the following values:\n\n  - `'accelerometer'`\n  - `'accessibility-events'`\n  - `'ambient-light-sensor'`\n  - `'background-sync'`\n  - `'camera'`\n  - `'clipboard-read'`\n  - `'clipboard-write'`\n  - `'geolocation'`\n  - `'gyroscope'`\n  - `'magnetometer'`\n  - `'microphone'`\n  - `'midi-sysex'` (system-exclusive midi)\n  - `'midi'`\n  - `'notifications'`\n  - `'payment-handler'`\n  - `'storage-access'`\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    The [origin](https://developer.mozilla.org/en-US/docs/Glossary/Origin \"Origin\") to grant permissions to, e.g. \"[https://example.com](https://example.com)\".\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### newCDPSession[​](#browser-context-new-cdp-session \"Direct link to newCDPSession\")\n\n> note\n>\n> CDP sessions are only supported on Chromium-based browsers.\n\nReturns the newly created session.\n\n**Usage**\n\n``` javascript\nawait browserContext.newCDPSession(page);\n```\n\n**Arguments**\n\n- `page` [Page](class-page \"Page\") \\| [Frame](class-frame \"Frame\")\n\n  Target to create new session for. For backwards-compatibility, this parameter is named `page`, but it can be a `Page` or `Frame` type.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[CDPSession](class-cdpsession \"CDPSession\")\\>\n\n### newPage[​](#browser-context-new-page \"Direct link to newPage\")\n\nAdded before v1.9\n\nCreates a new page in the browser context.\n\n**Usage**\n\n``` javascript\nawait browserContext.newPage();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Page](class-page \"Page\")\\>\n\n### pages[​](#browser-context-pages \"Direct link to pages\")\n\nAdded before v1.9\n\nReturns all open pages in the context.\n\n**Usage**\n\n``` javascript\nbrowserContext.pages();\n```\n\n**Returns**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Page](class-page \"Page\")\\>\n\n### route[​](#browser-context-route \"Direct link to route\")\n\nAdded before v1.9\n\nRouting provides the capability to modify network requests that are made by any page in the browser context. Once route is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or aborted.\n\n> note\n>\n> [browserContext.route()](class-browsercontext#browser-context-route) will not intercept requests intercepted by Service Worker. See [this](https://github.com/microsoft/playwright/issues/1090) issue. We recommend disabling Service Workers when using request interception by setting `Browser.newContext.serviceWorkers` to `'block'`.\n\n**Usage**\n\nAn example of a naive handler that aborts all image requests:\n\n``` javascript\nconst context = await browser.newContext();\nawait context.route('**/*.{png,jpg,jpeg}', route => route.abort());\nconst page = await context.newPage();\nawait page.goto('https://example.com');\nawait browser.close();\n```\n\nor the same snippet using a regex pattern instead:\n\n``` javascript\nconst context = await browser.newContext();\nawait context.route(/(\\.png$)|(\\.jpg$)/, route => route.abort());\nconst page = await context.newPage();\nawait page.goto('https://example.com');\nawait browser.close();\n```\n\nIt is possible to examine the request to decide the route action. For example, mocking all requests that contain some post data, and leaving all other requests as is:\n\n``` javascript\nawait context.route('/api/**', async route => {\n  if (route.request().postData().includes('my-string'))\n    await route.fulfill({ body: 'mocked-data' });\n  else\n    await route.continue();\n});\n```\n\nPage routes (set up with [page.route()](class-page#page-route)) take precedence over browser context routes when request matches both handlers.\n\nTo remove a route with its handler you can use [browserContext.unroute()](class-browsercontext#browser-context-unroute).\n\n> note\n>\n> Enabling routing disables http cache.\n\n**Arguments**\n\n- `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") \\| [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([URL](https://nodejs.org/api/url.html \"URL\")):[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n  A glob pattern, regex pattern or predicate receiving [URL](https://nodejs.org/api/url.html \"URL\") to match while routing. When a `baseURL` via the context options was provided and the passed URL is a path, it gets merged via the [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor.\n\n- `handler` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([Route](class-route \"Route\"), [Request](class-request \"Request\")):[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n  handler function to route the request.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `times` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    How often a route should be used. By default it will be used every time.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### routeFromHAR[​](#browser-context-route-from-har \"Direct link to routeFromHAR\")\n\nIf specified the network requests that are made in the context will be served from the HAR file. Read more about [Replaying from HAR](../mock#replaying-from-har).\n\nPlaywright will not serve requests intercepted by Service Worker from the HAR file. See [this](https://github.com/microsoft/playwright/issues/1090) issue. We recommend disabling Service Workers when using request interception by setting `Browser.newContext.serviceWorkers` to `'block'`.\n\n**Usage**\n\n``` javascript\nawait browserContext.routeFromHAR(har);\nawait browserContext.routeFromHAR(har, options);\n```\n\n**Arguments**\n\n- `har` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Path to a [HAR](http://www.softwareishard.com/blog/har-12-spec) file with prerecorded network data. If `path` is a relative path, then it is resolved relative to the current working directory.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `notFound` \"abort\" \\| \"fallback\" *(optional)*\n\n    - If set to 'abort' any request not found in the HAR file will be aborted.\n    - If set to 'fallback' falls through to the next route handler in the handler chain.\n\n    Defaults to abort.\n\n  - `update` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    If specified, updates the given HAR with the actual network information instead of serving from file. The file is written to disk when [browserContext.close()](class-browsercontext#browser-context-close) is called.\n\n  - `updateContent` \"embed\" \\| \"attach\" *(optional)*\n\n    Optional setting to control resource content management. If `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is specified, content is stored inline the HAR file.\n\n  - `updateMode` \"full\" \\| \"minimal\" *(optional)*\n\n    When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page, cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `minimal`.\n\n  - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") *(optional)*\n\n    A glob pattern, regular expression or predicate to match the request URL. Only requests with URL matching the pattern will be served from the HAR file. If not specified, all requests are served from the HAR file.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### serviceWorkers[​](#browser-context-service-workers \"Direct link to serviceWorkers\")\n\n> note\n>\n> Service workers are only supported on Chromium-based browsers.\n\nAll existing service workers in the context.\n\n**Usage**\n\n``` javascript\nbrowserContext.serviceWorkers();\n```\n\n**Returns**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Worker](class-worker \"Worker\")\\>\n\n### setDefaultNavigationTimeout[​](#browser-context-set-default-navigation-timeout \"Direct link to setDefaultNavigationTimeout\")\n\nAdded before v1.9\n\nThis setting will change the default maximum navigation time for the following methods and related shortcuts:\n\n- [page.goBack()](class-page#page-go-back)\n- [page.goForward()](class-page#page-go-forward)\n- [page.goto()](class-page#page-goto)\n- [page.reload()](class-page#page-reload)\n- [page.setContent()](class-page#page-set-content)\n- [page.waitForNavigation()](class-page#page-wait-for-navigation)\n\n> note\n>\n> [page.setDefaultNavigationTimeout()](class-page#page-set-default-navigation-timeout) and [page.setDefaultTimeout()](class-page#page-set-default-timeout) take priority over [browserContext.setDefaultNavigationTimeout()](class-browsercontext#browser-context-set-default-navigation-timeout).\n\n**Usage**\n\n``` javascript\nbrowserContext.setDefaultNavigationTimeout(timeout);\n```\n\n**Arguments**\n\n- `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Maximum navigation time in milliseconds\n\n### setDefaultTimeout[​](#browser-context-set-default-timeout \"Direct link to setDefaultTimeout\")\n\nAdded before v1.9\n\nThis setting will change the default maximum time for all the methods accepting `timeout` option.\n\n> note\n>\n> [page.setDefaultNavigationTimeout()](class-page#page-set-default-navigation-timeout), [page.setDefaultTimeout()](class-page#page-set-default-timeout) and [browserContext.setDefaultNavigationTimeout()](class-browsercontext#browser-context-set-default-navigation-timeout) take priority over [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout).\n\n**Usage**\n\n``` javascript\nbrowserContext.setDefaultTimeout(timeout);\n```\n\n**Arguments**\n\n- `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Maximum time in milliseconds\n\n### setExtraHTTPHeaders[​](#browser-context-set-extra-http-headers \"Direct link to setExtraHTTPHeaders\")\n\nAdded before v1.9\n\nThe extra HTTP headers will be sent with every request initiated by any page in the context. These headers are merged with page-specific extra HTTP headers set with [page.setExtraHTTPHeaders()](class-page#page-set-extra-http-headers). If page overrides a particular header, page-specific header value will be used instead of the browser context header value.\n\n> note\n>\n> [browserContext.setExtraHTTPHeaders()](class-browsercontext#browser-context-set-extra-http-headers) does not guarantee the order of headers in the outgoing requests.\n\n**Usage**\n\n``` javascript\nawait browserContext.setExtraHTTPHeaders(headers);\n```\n\n**Arguments**\n\n- `headers` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n  An object containing additional HTTP headers to be sent with every request. All header values must be strings.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### setGeolocation[​](#browser-context-set-geolocation \"Direct link to setGeolocation\")\n\nAdded before v1.9\n\nSets the context's geolocation. Passing `null` or `undefined` emulates position unavailable.\n\n**Usage**\n\n``` javascript\nawait browserContext.setGeolocation({ latitude: 59.95, longitude: 30.31667 });\n```\n\n> note\n>\n> Consider using [browserContext.grantPermissions()](class-browsercontext#browser-context-grant-permissions) to grant permissions for the browser context pages to read its geolocation.\n\n**Arguments**\n\n- `geolocation` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `latitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Latitude between -90 and 90.\n\n  - `longitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Longitude between -180 and 180.\n\n  - `accuracy` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Non-negative accuracy value. Defaults to `0`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### setOffline[​](#browser-context-set-offline \"Direct link to setOffline\")\n\nAdded before v1.9\n\n**Usage**\n\n``` javascript\nawait browserContext.setOffline(offline);\n```\n\n**Arguments**\n\n- `offline` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n  Whether to emulate network being offline for the browser context.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### storageState[​](#browser-context-storage-state \"Direct link to storageState\")\n\nAdded before v1.9\n\nReturns storage state for this browser context, contains current cookies and local storage snapshot.\n\n**Usage**\n\n``` javascript\nawait browserContext.storageState();\nawait browserContext.storageState(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    The file path to save the storage state to. If `path` is a relative path, then it is resolved relative to current working directory. If no path is provided, storage state is still returned, but won't be saved to the disk.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `cookies` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `domain` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `expires` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Unix time in seconds.\n\n    - `httpOnly` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    - `secure` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    - `sameSite` \"Strict\" \\| \"Lax\" \\| \"None\"\n  - `origins` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n    - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `localStorage` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n      - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### unroute[​](#browser-context-unroute \"Direct link to unroute\")\n\nAdded before v1.9\n\nRemoves a route created with [browserContext.route()](class-browsercontext#browser-context-route). When `handler` is not specified, removes all routes for the `url`.\n\n**Usage**\n\n``` javascript\nawait browserContext.unroute(url);\nawait browserContext.unroute(url, handler);\n```\n\n**Arguments**\n\n- `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") \\| [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([URL](https://nodejs.org/api/url.html \"URL\")):[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n  A glob pattern, regex pattern or predicate receiving [URL](https://nodejs.org/api/url.html \"URL\") used to register a routing with [browserContext.route()](class-browsercontext#browser-context-route).\n\n- `handler` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([Route](class-route \"Route\"), [Request](class-request \"Request\")):[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  Optional handler function used to register a routing with [browserContext.route()](class-browsercontext#browser-context-route).\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### unrouteAll[​](#browser-context-unroute-all \"Direct link to unrouteAll\")\n\nRemoves all routes created with [browserContext.route()](class-browsercontext#browser-context-route) and [browserContext.routeFromHAR()](class-browsercontext#browser-context-route-from-har).\n\n**Usage**\n\n``` javascript\nawait browserContext.unrouteAll();\nawait browserContext.unrouteAll(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `behavior` \"wait\" \\| \"ignoreErrors\" \\| \"default\" *(optional)*\n\n    Specifies whether to wait for already running handlers and what to do if they throw errors:\n\n    - `'default'` - do not wait for current handler calls (if any) to finish, if unrouted handler throws, it may result in unhandled error\n    - `'wait'` - wait for current handler calls (if any) to finish\n    - `'ignoreErrors'` - do not wait for current handler calls (if any) to finish, all errors thrown by the handlers after unrouting are silently caught\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### waitForEvent[​](#browser-context-wait-for-event \"Direct link to waitForEvent\")\n\nAdded before v1.9\n\nWaits for event to fire and passes its value into the predicate function. Returns when the predicate returns truthy value. Will throw an error if the context closes before the event is fired. Returns the event data value.\n\n**Usage**\n\n``` javascript\nconst pagePromise = context.waitForEvent('page');\nawait page.getByRole('button').click();\nconst page = await pagePromise;\n```\n\n**Arguments**\n\n- `event` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Event name, same one would pass into `browserContext.on(event)`.\n\n- `optionsOrPredicate` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `predicate` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")\n\n    Receives the event data and resolves to truthy value when the waiting should resolve.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time to wait for in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) method.\n\n  Either a predicate that receives an event or an options object. Optional.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `predicate` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\") *(optional)*\n\n    Receives the event data and resolves to truthy value when the waiting should resolve.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n## Properties[​](#properties \"Direct link to Properties\")\n\n### clock[​](#browser-context-clock \"Direct link to clock\")\n\nPlaywright has ability to mock clock and passage of time.\n\n**Usage**\n\n``` javascript\nbrowserContext.clock\n```\n\n**Type**\n\n- [Clock](class-clock \"Clock\")\n\n### request[​](#browser-context-request \"Direct link to request\")\n\nAPI testing helper associated with this context. Requests made with this API will use context cookies.\n\n**Usage**\n\n``` javascript\nbrowserContext.request\n```\n\n**Type**\n\n- [APIRequestContext](class-apirequestcontext \"APIRequestContext\")\n\n### tracing[​](#browser-context-tracing \"Direct link to tracing\")\n\n**Usage**\n\n``` javascript\nbrowserContext.tracing\n```\n\n**Type**\n\n- [Tracing](class-tracing \"Tracing\")\n\n## Events[​](#events \"Direct link to Events\")\n\n### on('backgroundpage')[​](#browser-context-event-background-page \"Direct link to on('backgroundpage')\")\n\n> note\n>\n> Only works with Chromium browser's persistent context.\n\nEmitted when new background page is created in the context.\n\n``` javascript\nconst backgroundPage = await context.waitForEvent('backgroundpage');\n```\n\n**Usage**\n\n``` javascript\nbrowserContext.on('backgroundpage', data => {});\n```\n\n**Event data**\n\n- [Page](class-page \"Page\")\n\n### on('close')[​](#browser-context-event-close \"Direct link to on('close')\")\n\nAdded before v1.9\n\nEmitted when Browser context gets closed. This might happen because of one of the following:\n\n- Browser context is closed.\n- Browser application is closed or crashed.\n- The [browser.close()](class-browser#browser-close) method was called.\n\n**Usage**\n\n``` javascript\nbrowserContext.on('close', data => {});\n```\n\n**Event data**\n\n- [BrowserContext](class-browsercontext \"BrowserContext\")\n\n### on('console')[​](#browser-context-event-console \"Direct link to on('console')\")\n\nEmitted when JavaScript within the page calls one of console API methods, e.g. `console.log` or `console.dir`.\n\nThe arguments passed into `console.log` and the page are available on the [ConsoleMessage](class-consolemessage \"ConsoleMessage\") event handler argument.\n\n**Usage**\n\n``` javascript\ncontext.on('console', async msg => {\n  const values = [];\n  for (const arg of msg.args())\n    values.push(await arg.jsonValue());\n  console.log(...values);\n});\nawait page.evaluate(() => console.log('hello', 5, { foo: 'bar' }));\n```\n\n**Event data**\n\n- [ConsoleMessage](class-consolemessage \"ConsoleMessage\")\n\n### on('dialog')[​](#browser-context-event-dialog \"Direct link to on('dialog')\")\n\nEmitted when a JavaScript dialog appears, such as `alert`, `prompt`, `confirm` or `beforeunload`. Listener **must** either [dialog.accept()](class-dialog#dialog-accept) or [dialog.dismiss()](class-dialog#dialog-dismiss) the dialog - otherwise the page will [freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#never_blocking) waiting for the dialog, and actions like click will never finish.\n\n**Usage**\n\n``` javascript\ncontext.on('dialog', dialog => {\n  dialog.accept();\n});\n```\n\n> note\n>\n> When no [page.on('dialog')](class-page#page-event-dialog) or [browserContext.on('dialog')](class-browsercontext#browser-context-event-dialog) listeners are present, all dialogs are automatically dismissed.\n\n**Event data**\n\n- [Dialog](class-dialog \"Dialog\")\n\n### on('page')[​](#browser-context-event-page \"Direct link to on('page')\")\n\nAdded before v1.9\n\nThe event is emitted when a new Page is created in the BrowserContext. The page may still be loading. The event will also fire for popup pages. See also [page.on('popup')](class-page#page-event-popup) to receive events about popups relevant to a specific page.\n\nThe earliest moment that page is available is when it has navigated to the initial url. For example, when opening a popup with `window.open('http://example.com')`, this event will fire when the network request to \"[http://example.com](http://example.com)\" is done and its response has started loading in the popup. If you would like to route/listen to this network request, use [browserContext.route()](class-browsercontext#browser-context-route) and [browserContext.on('request')](class-browsercontext#browser-context-event-request) respectively instead of similar methods on the [Page](class-page \"Page\").\n\n``` javascript\nconst newPagePromise = context.waitForEvent('page');\nawait page.getByText('open new page').click();\nconst newPage = await newPagePromise;\nconsole.log(await newPage.evaluate('location.href'));\n```\n\n> note\n>\n> Use [page.waitForLoadState()](class-page#page-wait-for-load-state) to wait until the page gets to a particular state (you should not need it in most cases).\n\n**Usage**\n\n``` javascript\nbrowserContext.on('page', data => {});\n```\n\n**Event data**\n\n- [Page](class-page \"Page\")\n\n### on('request')[​](#browser-context-event-request \"Direct link to on('request')\")\n\nEmitted when a request is issued from any pages created through this context. The [request](class-request \"Request\") object is read-only. To only listen for requests from a particular page, use [page.on('request')](class-page#page-event-request).\n\nIn order to intercept and mutate requests, see [browserContext.route()](class-browsercontext#browser-context-route) or [page.route()](class-page#page-route).\n\n**Usage**\n\n``` javascript\nbrowserContext.on('request', data => {});\n```\n\n**Event data**\n\n- [Request](class-request \"Request\")\n\n### on('requestfailed')[​](#browser-context-event-request-failed \"Direct link to on('requestfailed')\")\n\nEmitted when a request fails, for example by timing out. To only listen for failed requests from a particular page, use [page.on('requestfailed')](class-page#page-event-request-failed).\n\n> note\n>\n> HTTP Error responses, such as 404 or 503, are still successful responses from HTTP standpoint, so request will complete with [browserContext.on('requestfinished')](class-browsercontext#browser-context-event-request-finished) event and not with [browserContext.on('requestfailed')](class-browsercontext#browser-context-event-request-failed).\n\n**Usage**\n\n``` javascript\nbrowserContext.on('requestfailed', data => {});\n```\n\n**Event data**\n\n- [Request](class-request \"Request\")\n\n### on('requestfinished')[​](#browser-context-event-request-finished \"Direct link to on('requestfinished')\")\n\nEmitted when a request finishes successfully after downloading the response body. For a successful response, the sequence of events is `request`, `response` and `requestfinished`. To listen for successful requests from a particular page, use [page.on('requestfinished')](class-page#page-event-request-finished).\n\n**Usage**\n\n``` javascript\nbrowserContext.on('requestfinished', data => {});\n```\n\n**Event data**\n\n- [Request](class-request \"Request\")\n\n### on('response')[​](#browser-context-event-response \"Direct link to on('response')\")\n\nEmitted when [response](class-response \"Response\") status and headers are received for a request. For a successful response, the sequence of events is `request`, `response` and `requestfinished`. To listen for response events from a particular page, use [page.on('response')](class-page#page-event-response).\n\n**Usage**\n\n``` javascript\nbrowserContext.on('response', data => {});\n```\n\n**Event data**\n\n- [Response](class-response \"Response\")\n\n### on('serviceworker')[​](#browser-context-event-service-worker \"Direct link to on('serviceworker')\")\n\n> note\n>\n> Service workers are only supported on Chromium-based browsers.\n\nEmitted when new service worker is created in the context.\n\n**Usage**\n\n``` javascript\nbrowserContext.on('serviceworker', data => {});\n```\n\n**Event data**\n\n- [Worker](class-worker \"Worker\")\n\n### on('weberror')[​](#browser-context-event-web-error \"Direct link to on('weberror')\")\n\nEmitted when exception is unhandled in any of the pages in this context. To listen for errors from a particular page, use [page.on('pageerror')](class-page#page-event-page-error) instead.\n\n**Usage**\n\n``` javascript\nbrowserContext.on('weberror', data => {});\n```\n\n**Event data**\n\n- [WebError](class-weberror \"WebError\")\n\n## Deprecated[​](#deprecated \"Direct link to Deprecated\")\n\n### setHTTPCredentials[​](#browser-context-set-http-credentials \"Direct link to setHTTPCredentials\")\n\nAdded before v1.9\n\n> Deprecated\n>\n> Browsers may cache credentials after successful authentication. Create a new browser context instead.\n\n**Usage**\n\n``` javascript\nawait browserContext.setHTTPCredentials(httpCredentials);\n```\n\n**Arguments**\n\n- `httpCredentials` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-browsercontext](https://playwright.dev/docs/api/class-browsercontext)"
- name: browserContext.addCookies
  id: api/class-browsercontext#browser-context-add-cookies
  summary: Adds cookies into this browser context
  belongs_to: BrowserContext
  description: |-
    ### addCookies[​](#browser-context-add-cookies "Direct link to addCookies")

    Added before v1.9

    Adds cookies into this browser context. All pages within this context will have these cookies installed. Cookies can be obtained via [browserContext.cookies()](class-browsercontext#browser-context-cookies).

    **Usage**

    ``` javascript
    await browserContext.addCookies([cookieObject1, cookieObject2]);
    ```

    **Arguments**

    - `cookies`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      - `value`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      - `url`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")*(optional)*

        Either url or domain / path are required. Optional.

      - `domain`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")*(optional)*

        For the cookie to apply to all subdomains as well, prefix domain with a dot, like this: ".example.com". Either url or domain / path are required. Optional.

      - `path`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")*(optional)*

        Either url or domain / path are required Optional.

      - `expires`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")*(optional)*

        Unix time in seconds. Optional.

      - `httpOnly`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")*(optional)*

        Optional.

      - `secure`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")*(optional)*

        Optional.

      - `sameSite` "Strict" \| "Lax" \| "None" *(optional)*

        Optional.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>
- name: browserContext.addInitScript
  id: api/class-browsercontext#browser-context-add-init-script
  summary: The script is evaluated after the document was created but before any of its scripts were run
  belongs_to: BrowserContext
  description: |-
    ### addInitScript[​](#browser-context-add-init-script "Direct link to addInitScript")

    Added before v1.9

    Adds a script which would be evaluated in one of the following scenarios:

    - Whenever a page is created in the browser context or is navigated.
    - Whenever a child frame is attached or navigated in any page in the browser context. In this case, the script is evaluated in the context of the newly attached frame.

    The script is evaluated after the document was created but before any of its scripts were run. This is useful to amend the JavaScript environment, e.g. to seed `Math.random`.

    **Usage**

    An example of overriding `Math.random` before the page loads:

    ``` javascript
    // preload.js
    Math.random = () => 42;
    ```

    ``` javascript
    // In your playwright script, assuming the preload.js file is in same directory.
    await browserContext.addInitScript({
      path: 'preload.js'
    });
    ```

    > note
    >
    > The order of evaluation of multiple scripts installed via [browserContext.addInitScript()](class-browsercontext#browser-context-add-init-script) and [page.addInitScript()](class-page#page-add-init-script) is not defined.

    **Arguments**

    - `script`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

      - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Path to the JavaScript file. If `path` is a relative path, then it is resolved relative to the current working directory. Optional.

      - `content` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Raw script content. Optional.

      Script to be evaluated in all pages in the browser context.

    - `arg` [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") *(optional)*

      Optional argument to pass to `script` (only supported when passing a function).

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: browserContext.backgroundPages
  id: api/class-browsercontext#browser-context-background-pages
  summary: Background pages are only supported on Chromium-based browsers
  belongs_to: BrowserContext
  description: |-
    ### backgroundPages[​](#browser-context-background-pages "Direct link to backgroundPages")

    > note
    >
    > Background pages are only supported on Chromium-based browsers.

    All existing background pages in the context.

    **Usage**

    ``` javascript
    browserContext.backgroundPages();
    ```

    **Returns**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Page](class-page "Page")\>

    &nbsp;
- name: browserContext.browser
  id: api/class-browsercontext#browser-context-browser
  summary: Returns the browser instance of the context
  belongs_to: BrowserContext
  description: |-
    ### browser[​](#browser-context-browser "Direct link to browser")

    Added before v1.9

    Returns the browser instance of the context. If it was launched as a persistent context null gets returned.

    **Usage**

    ``` javascript
    browserContext.browser();
    ```

    **Returns**

    - [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Browser](class-browser "Browser")

    &nbsp;
- name: browserContext.clearCookies
  id: api/class-browsercontext#browser-context-clear-cookies
  summary: Removes cookies from context
  belongs_to: BrowserContext
  description: |-
    ### clearCookies[​](#browser-context-clear-cookies "Direct link to clearCookies")

    Added before v1.9

    Removes cookies from context. Accepts optional filter.

    **Usage**

    ``` javascript
    await context.clearCookies();
    await context.clearCookies({ name: 'session-id' });
    await context.clearCookies({ domain: 'my-origin.com' });
    await context.clearCookies({ domain: /.*my-origin\.com/ });
    await context.clearCookies({ path: '/api/v1' });
    await context.clearCookies({ name: 'session-id', domain: 'my-origin.com' });
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `domain`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") *(optional)*

        Only removes cookies with the given domain.

      - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") *(optional)*

        Only removes cookies with the given name.

      - `path`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") *(optional)*

        Only removes cookies with the given path.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: browserContext.clearPermissions
  id: api/class-browsercontext#browser-context-clear-permissions
  summary: Clears all permission overrides for the browser context
  belongs_to: BrowserContext
  description: |-
    ### clearPermissions[​](#browser-context-clear-permissions "Direct link to clearPermissions")

    Added before v1.9

    Clears all permission overrides for the browser context.

    **Usage**

    ``` javascript
    const context = await browser.newContext();
    await context.grantPermissions(['clipboard-read']);
    // do stuff ..
    context.clearPermissions();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: browserContext.clock
  id: api/class-browsercontext#browser-context-clock
  summary: Playwright has ability to mock clock and passage of time
  belongs_to: BrowserContext
  description: |-
    ### clock[​](#browser-context-clock "Direct link to clock")

    Playwright has ability to mock clock and passage of time.

    **Usage**

    ``` javascript
    browserContext.clock
    ```

    **Type**

    - [Clock](class-clock "Clock")

    &nbsp;
- name: browserContext.close
  id: api/class-browsercontext#browser-context-close
  summary: Closes the browser context
  belongs_to: BrowserContext
  description: |-
    ### close[​](#browser-context-close "Direct link to close")

    Added before v1.9

    Closes the browser context. All the pages that belong to the browser context will be closed.

    > note
    >
    > The default browser context cannot be closed.

    **Usage**

    ``` javascript
    await browserContext.close();
    await browserContext.close(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `reason` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        The reason to be reported to the operations interrupted by the context closure.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: browserContext.cookies
  id: api/class-browsercontext#browser-context-cookies
  summary: If no URLs are specified, this method returns all cookies
  belongs_to: BrowserContext
  description: |-
    ### cookies[​](#browser-context-cookies "Direct link to cookies")

    Added before v1.9

    If no URLs are specified, this method returns all cookies. If URLs are specified, only cookies that affect those URLs are returned.

    **Usage**

    ``` javascript
    await browserContext.cookies();
    await browserContext.cookies(urls);
    ```

    **Arguments**

    - `urls`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

      Optional list of URLs.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\>
      - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      - `value`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      - `domain`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      - `path`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      - `expires`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Unix time in seconds.

      - `httpOnly`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

      - `secure`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

      - `sameSite` "Strict" \| "Lax" \| "None"

    &nbsp;
- name: browserContext.exposeBinding
  id: api/class-browsercontext#browser-context-expose-binding
  summary: The method adds a function called name on the window object of every frame in every page in the context
  belongs_to: BrowserContext
  description: |-
    ### exposeBinding[​](#browser-context-expose-binding "Direct link to exposeBinding")

    Added before v1.9

    The method adds a function called `name` on the `window` object of every frame in every page in the context. When called, the function executes `callback` and returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise") which resolves to the return value of `callback`. If the `callback` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), it will be awaited.

    The first argument of the `callback` function contains information about the caller: `{ browserContext: BrowserContext, page: Page, frame: Frame }`.

    See [page.exposeBinding()](class-page#page-expose-binding) for page-only version.

    **Usage**

    An example of exposing page URL to all frames in all pages in the context:

    ``` javascript
    const { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.

    (async () => {
      const browser = await webkit.launch({ headless: false });
      const context = await browser.newContext();
      await context.exposeBinding('pageURL', ({ page }) => page.url());
      const page = await context.newPage();
      await page.setContent(`
        <script>
          async function onClick() {
            document.querySelector('div').textContent = await window.pageURL();
          }
        </script>
        <button onclick="onClick()">Click me</button>
        <div></div>
      `);
      await page.getByRole('button').click();
    })();
    ```

    **Arguments**

    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Name of the function on the window object.

    - `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")

      Callback function that will be called in the Playwright's context.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `handle` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option will be removed in the future.

        Whether to pass the argument as a handle, instead of passing by value. When passing a handle, only one argument is supported. When passing by value, multiple arguments are supported.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: browserContext.exposeFunction
  id: api/class-browsercontext#browser-context-expose-function
  summary: The method adds a function called name on the window object of every frame in every page in the context
  belongs_to: BrowserContext
  description: |-
    ### exposeFunction[​](#browser-context-expose-function "Direct link to exposeFunction")

    Added before v1.9

    The method adds a function called `name` on the `window` object of every frame in every page in the context. When called, the function executes `callback` and returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise") which resolves to the return value of `callback`.

    If the `callback` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), it will be awaited.

    See [page.exposeFunction()](class-page#page-expose-function) for page-only version.

    **Usage**

    An example of adding a `sha256` function to all pages in the context:

    ``` javascript
    const { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.
    const crypto = require('crypto');

    (async () => {
      const browser = await webkit.launch({ headless: false });
      const context = await browser.newContext();
      await context.exposeFunction('sha256', text =>
        crypto.createHash('sha256').update(text).digest('hex'),
      );
      const page = await context.newPage();
      await page.setContent(`
        <script>
          async function onClick() {
            document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');
          }
        </script>
        <button onclick="onClick()">Click me</button>
        <div></div>
      `);
      await page.getByRole('button').click();
    })();
    ```

    **Arguments**

    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Name of the function on the window object.

    - `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")

      Callback function that will be called in the Playwright's context.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: browserContext.grantPermissions
  id: api/class-browsercontext#browser-context-grant-permissions
  summary: Grants specified permissions to the browser context
  belongs_to: BrowserContext
  description: |-
    ### grantPermissions[​](#browser-context-grant-permissions "Direct link to grantPermissions")

    Added before v1.9

    Grants specified permissions to the browser context. Only grants corresponding permissions to the given origin if specified.

    **Usage**

    ``` javascript
    await browserContext.grantPermissions(permissions);
    await browserContext.grantPermissions(permissions, options);
    ```

    **Arguments**

    - `permissions`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

      A permission or an array of permissions to grant. Permissions can be one of the following values:

      - `'accelerometer'`
      - `'accessibility-events'`
      - `'ambient-light-sensor'`
      - `'background-sync'`
      - `'camera'`
      - `'clipboard-read'`
      - `'clipboard-write'`
      - `'geolocation'`
      - `'gyroscope'`
      - `'magnetometer'`
      - `'microphone'`
      - `'midi-sysex'` (system-exclusive midi)
      - `'midi'`
      - `'notifications'`
      - `'payment-handler'`
      - `'storage-access'`

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        The [origin](https://developer.mozilla.org/en-US/docs/Glossary/Origin "Origin") to grant permissions to, e.g. "[https://example.com](https://example.com)".

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: browserContext.newCDPSession
  id: api/class-browsercontext#browser-context-new-cdp-session
  summary: CDP sessions are only supported on Chromium-based browsers
  belongs_to: BrowserContext
  description: |-
    ### newCDPSession[​](#browser-context-new-cdp-session "Direct link to newCDPSession")

    > note
    >
    > CDP sessions are only supported on Chromium-based browsers.

    Returns the newly created session.

    **Usage**

    ``` javascript
    await browserContext.newCDPSession(page);
    ```

    **Arguments**

    - `page`[Page](class-page "Page") \| [Frame](class-frame "Frame")

      Target to create new session for. For backwards-compatibility, this parameter is named `page`, but it can be a `Page` or `Frame` type.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[CDPSession](class-cdpsession "CDPSession")\>

    &nbsp;
- name: browserContext.newPage
  id: api/class-browsercontext#browser-context-new-page
  summary: Creates a new page in the browser context
  belongs_to: BrowserContext
  description: |-
    ### newPage[​](#browser-context-new-page "Direct link to newPage")

    Added before v1.9

    Creates a new page in the browser context.

    **Usage**

    ``` javascript
    await browserContext.newPage();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Page](class-page "Page")\>

    &nbsp;
- name: browserContext.on('backgroundpage')
  id: api/class-browsercontext#browser-context-event-background-page
  summary: Only works with Chromium browser's persistent context
  belongs_to: BrowserContext
  description: |-
    ### on('backgroundpage')[​](#browser-context-event-background-page "Direct link to on('backgroundpage')")

    > note
    >
    > Only works with Chromium browser's persistent context.

    Emitted when new background page is created in the context.

    ``` javascript
    const backgroundPage = await context.waitForEvent('backgroundpage');
    ```

    **Usage**

    ``` javascript
    browserContext.on('backgroundpage', data => {});
    ```

    **Event data**

    - [Page](class-page "Page")

    &nbsp;
- name: browserContext.on('close')
  id: api/class-browsercontext#browser-context-event-close
  summary: Emitted when Browser context gets closed
  belongs_to: BrowserContext
  description: |-
    ### on('close')[​](#browser-context-event-close "Direct link to on('close')")

    Added before v1.9

    Emitted when Browser context gets closed. This might happen because of one of the following:

    - Browser context is closed.
    - Browser application is closed or crashed.
    - The [browser.close()](class-browser#browser-close) method was called.

    **Usage**

    ``` javascript
    browserContext.on('close', data => {});
    ```

    **Event data**

    - [BrowserContext](class-browsercontext "BrowserContext")

    &nbsp;
- name: browserContext.on('console')
  id: api/class-browsercontext#browser-context-event-console
  summary: Emitted when JavaScript within the page calls one of console API methods, e.g
  belongs_to: BrowserContext
  description: |-
    ### on('console')[​](#browser-context-event-console "Direct link to on('console')")

    Emitted when JavaScript within the page calls one of console API methods, e.g. `console.log` or `console.dir`.

    The arguments passed into `console.log` and the page are available on the [ConsoleMessage](class-consolemessage "ConsoleMessage") event handler argument.

    **Usage**

    ``` javascript
    context.on('console', async msg => {
      const values = [];
      for (const arg of msg.args())
        values.push(await arg.jsonValue());
      console.log(...values);
    });
    await page.evaluate(() => console.log('hello', 5, { foo: 'bar' }));
    ```

    **Event data**

    - [ConsoleMessage](class-consolemessage "ConsoleMessage")

    &nbsp;
- name: browserContext.on('dialog')
  id: api/class-browsercontext#browser-context-event-dialog
  summary: Emitted when a JavaScript dialog appears, such as alert, prompt, confirm or beforeunload
  belongs_to: BrowserContext
  description: |-
    ### on('dialog')[​](#browser-context-event-dialog "Direct link to on('dialog')")

    Emitted when a JavaScript dialog appears, such as `alert`, `prompt`, `confirm` or `beforeunload`. Listener **must** either [dialog.accept()](class-dialog#dialog-accept) or [dialog.dismiss()](class-dialog#dialog-dismiss) the dialog - otherwise the page will [freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#never_blocking) waiting for the dialog, and actions like click will never finish.

    **Usage**

    ``` javascript
    context.on('dialog', dialog => {
      dialog.accept();
    });
    ```

    > note
    >
    > When no [page.on('dialog')](class-page#page-event-dialog) or [browserContext.on('dialog')](class-browsercontext#browser-context-event-dialog) listeners are present, all dialogs are automatically dismissed.

    **Event data**

    - [Dialog](class-dialog "Dialog")

    &nbsp;
- name: browserContext.on('page')
  id: api/class-browsercontext#browser-context-event-page
  summary: The event is emitted when a new Page is created in the BrowserContext
  belongs_to: BrowserContext
  description: |-
    ### on('page')[​](#browser-context-event-page "Direct link to on('page')")

    Added before v1.9

    The event is emitted when a new Page is created in the BrowserContext. The page may still be loading. The event will also fire for popup pages. See also [page.on('popup')](class-page#page-event-popup) to receive events about popups relevant to a specific page.

    The earliest moment that page is available is when it has navigated to the initial url. For example, when opening a popup with `window.open('http://example.com')`, this event will fire when the network request to "[http://example.com](http://example.com)" is done and its response has started loading in the popup. If you would like to route/listen to this network request, use [browserContext.route()](class-browsercontext#browser-context-route) and [browserContext.on('request')](class-browsercontext#browser-context-event-request) respectively instead of similar methods on the [Page](class-page "Page").

    ``` javascript
    const newPagePromise = context.waitForEvent('page');
    await page.getByText('open new page').click();
    const newPage = await newPagePromise;
    console.log(await newPage.evaluate('location.href'));
    ```

    > note
    >
    > Use [page.waitForLoadState()](class-page#page-wait-for-load-state) to wait until the page gets to a particular state (you should not need it in most cases).

    **Usage**

    ``` javascript
    browserContext.on('page', data => {});
    ```

    **Event data**

    - [Page](class-page "Page")

    &nbsp;
- name: browserContext.on('request')
  id: api/class-browsercontext#browser-context-event-request
  summary: Emitted when a request is issued from any pages created through this context
  belongs_to: BrowserContext
  description: |-
    ### on('request')[​](#browser-context-event-request "Direct link to on('request')")

    Emitted when a request is issued from any pages created through this context. The [request](class-request "Request") object is read-only. To only listen for requests from a particular page, use [page.on('request')](class-page#page-event-request).

    In order to intercept and mutate requests, see [browserContext.route()](class-browsercontext#browser-context-route) or [page.route()](class-page#page-route).

    **Usage**

    ``` javascript
    browserContext.on('request', data => {});
    ```

    **Event data**

    - [Request](class-request "Request")

    &nbsp;
- name: browserContext.on('requestfailed')
  id: api/class-browsercontext#browser-context-event-request-failed
  summary: Emitted when a request fails, for example by timing out
  belongs_to: BrowserContext
  description: |-
    ### on('requestfailed')[​](#browser-context-event-request-failed "Direct link to on('requestfailed')")

    Emitted when a request fails, for example by timing out. To only listen for failed requests from a particular page, use [page.on('requestfailed')](class-page#page-event-request-failed).

    > note
    >
    > HTTP Error responses, such as 404 or 503, are still successful responses from HTTP standpoint, so request will complete with [browserContext.on('requestfinished')](class-browsercontext#browser-context-event-request-finished) event and not with [browserContext.on('requestfailed')](class-browsercontext#browser-context-event-request-failed).

    **Usage**

    ``` javascript
    browserContext.on('requestfailed', data => {});
    ```

    **Event data**

    - [Request](class-request "Request")

    &nbsp;
- name: browserContext.on('requestfinished')
  id: api/class-browsercontext#browser-context-event-request-finished
  summary: Emitted when a request finishes successfully after downloading the response body
  belongs_to: BrowserContext
  description: |-
    ### on('requestfinished')[​](#browser-context-event-request-finished "Direct link to on('requestfinished')")

    Emitted when a request finishes successfully after downloading the response body. For a successful response, the sequence of events is `request`, `response` and `requestfinished`. To listen for successful requests from a particular page, use [page.on('requestfinished')](class-page#page-event-request-finished).

    **Usage**

    ``` javascript
    browserContext.on('requestfinished', data => {});
    ```

    **Event data**

    - [Request](class-request "Request")

    &nbsp;
- name: browserContext.on('response')
  id: api/class-browsercontext#browser-context-event-response
  summary: Emitted when response status and headers are received for a request
  belongs_to: BrowserContext
  description: |-
    ### on('response')[​](#browser-context-event-response "Direct link to on('response')")

    Emitted when [response](class-response "Response") status and headers are received for a request. For a successful response, the sequence of events is `request`, `response` and `requestfinished`. To listen for response events from a particular page, use [page.on('response')](class-page#page-event-response).

    **Usage**

    ``` javascript
    browserContext.on('response', data => {});
    ```

    **Event data**

    - [Response](class-response "Response")

    &nbsp;
- name: browserContext.on('serviceworker')
  id: api/class-browsercontext#browser-context-event-service-worker
  summary: Service workers are only supported on Chromium-based browsers
  belongs_to: BrowserContext
  description: |-
    ### on('serviceworker')[​](#browser-context-event-service-worker "Direct link to on('serviceworker')")

    > note
    >
    > Service workers are only supported on Chromium-based browsers.

    Emitted when new service worker is created in the context.

    **Usage**

    ``` javascript
    browserContext.on('serviceworker', data => {});
    ```

    **Event data**

    - [Worker](class-worker "Worker")

    &nbsp;
- name: browserContext.on('weberror')
  id: api/class-browsercontext#browser-context-event-web-error
  summary: Emitted when exception is unhandled in any of the pages in this context
  belongs_to: BrowserContext
  description: |-
    ### on('weberror')[​](#browser-context-event-web-error "Direct link to on('weberror')")

    Emitted when exception is unhandled in any of the pages in this context. To listen for errors from a particular page, use [page.on('pageerror')](class-page#page-event-page-error) instead.

    **Usage**

    ``` javascript
    browserContext.on('weberror', data => {});
    ```

    **Event data**

    - [WebError](class-weberror "WebError")

    ## Deprecated[​](#deprecated "Direct link to Deprecated")
- name: browserContext.pages
  id: api/class-browsercontext#browser-context-pages
  summary: Returns all open pages in the context
  belongs_to: BrowserContext
  description: |-
    ### pages[​](#browser-context-pages "Direct link to pages")

    Added before v1.9

    Returns all open pages in the context.

    **Usage**

    ``` javascript
    browserContext.pages();
    ```

    **Returns**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Page](class-page "Page")\>

    &nbsp;
- name: browserContext.request
  id: api/class-browsercontext#browser-context-request
  summary: API testing helper associated with this context
  belongs_to: BrowserContext
  description: |-
    ### request[​](#browser-context-request "Direct link to request")

    API testing helper associated with this context. Requests made with this API will use context cookies.

    **Usage**

    ``` javascript
    browserContext.request
    ```

    **Type**

    - [APIRequestContext](class-apirequestcontext "APIRequestContext")

    &nbsp;
- name: browserContext.route
  id: api/class-browsercontext#browser-context-route
  summary: Routing provides the capability to modify network requests that are made by any page in the browser context
  belongs_to: BrowserContext
  description: |-
    ### route[​](#browser-context-route "Direct link to route")

    Added before v1.9

    Routing provides the capability to modify network requests that are made by any page in the browser context. Once route is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or aborted.

    > note
    >
    > [browserContext.route()](class-browsercontext#browser-context-route) will not intercept requests intercepted by Service Worker. See [this](https://github.com/microsoft/playwright/issues/1090) issue. We recommend disabling Service Workers when using request interception by setting `Browser.newContext.serviceWorkers` to `'block'`.

    **Usage**

    An example of a naive handler that aborts all image requests:

    ``` javascript
    const context = await browser.newContext();
    await context.route('**/*.{png,jpg,jpeg}', route => route.abort());
    const page = await context.newPage();
    await page.goto('https://example.com');
    await browser.close();
    ```

    or the same snippet using a regex pattern instead:

    ``` javascript
    const context = await browser.newContext();
    await context.route(/(\.png$)|(\.jpg$)/, route => route.abort());
    const page = await context.newPage();
    await page.goto('https://example.com');
    await browser.close();
    ```

    It is possible to examine the request to decide the route action. For example, mocking all requests that contain some post data, and leaving all other requests as is:

    ``` javascript
    await context.route('/api/**', async route => {
      if (route.request().postData().includes('my-string'))
        await route.fulfill({ body: 'mocked-data' });
      else
        await route.continue();
    });
    ```

    Page routes (set up with [page.route()](class-page#page-route)) take precedence over browser context routes when request matches both handlers.

    To remove a route with its handler you can use [browserContext.unroute()](class-browsercontext#browser-context-unroute).

    > note
    >
    > Enabling routing disables http cache.

    **Arguments**

    - `url`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([URL](https://nodejs.org/api/url.html "URL")):[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

      A glob pattern, regex pattern or predicate receiving [URL](https://nodejs.org/api/url.html "URL") to match while routing. When a `baseURL` via the context options was provided and the passed URL is a path, it gets merged via the [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor.

    - `handler`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Route](class-route "Route"), [Request](class-request "Request")):[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

      handler function to route the request.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `times` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        How often a route should be used. By default it will be used every time.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: browserContext.routeFromHAR
  id: api/class-browsercontext#browser-context-route-from-har
  summary: If specified the network requests that are made in the context will be served from the HAR file
  belongs_to: BrowserContext
  description: |-
    ### routeFromHAR[​](#browser-context-route-from-har "Direct link to routeFromHAR")

    If specified the network requests that are made in the context will be served from the HAR file. Read more about [Replaying from HAR](../mock#replaying-from-har).

    Playwright will not serve requests intercepted by Service Worker from the HAR file. See [this](https://github.com/microsoft/playwright/issues/1090) issue. We recommend disabling Service Workers when using request interception by setting `Browser.newContext.serviceWorkers` to `'block'`.

    **Usage**

    ``` javascript
    await browserContext.routeFromHAR(har);
    await browserContext.routeFromHAR(har, options);
    ```

    **Arguments**

    - `har` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Path to a [HAR](http://www.softwareishard.com/blog/har-12-spec) file with prerecorded network data. If `path` is a relative path, then it is resolved relative to the current working directory.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `notFound` "abort" \| "fallback" *(optional)*

        - If set to 'abort' any request not found in the HAR file will be aborted.
        - If set to 'fallback' falls through to the next route handler in the handler chain.

        Defaults to abort.

      - `update` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        If specified, updates the given HAR with the actual network information instead of serving from file. The file is written to disk when [browserContext.close()](class-browsercontext#browser-context-close) is called.

      - `updateContent` "embed" \| "attach" *(optional)*

        Optional setting to control resource content management. If `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is specified, content is stored inline the HAR file.

      - `updateMode` "full" \| "minimal" *(optional)*

        When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page, cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `minimal`.

      - `url`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") *(optional)*

        A glob pattern, regular expression or predicate to match the request URL. Only requests with URL matching the pattern will be served from the HAR file. If not specified, all requests are served from the HAR file.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: browserContext.serviceWorkers
  id: api/class-browsercontext#browser-context-service-workers
  summary: Service workers are only supported on Chromium-based browsers
  belongs_to: BrowserContext
  description: |-
    ### serviceWorkers[​](#browser-context-service-workers "Direct link to serviceWorkers")

    > note
    >
    > Service workers are only supported on Chromium-based browsers.

    All existing service workers in the context.

    **Usage**

    ``` javascript
    browserContext.serviceWorkers();
    ```

    **Returns**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Worker](class-worker "Worker")\>

    &nbsp;
- name: browserContext.setDefaultNavigationTimeout
  id: api/class-browsercontext#browser-context-set-default-navigation-timeout
  summary: page.setDefaultNavigationTimeout() and page.setDefaultTimeout() take priority over browserContext.setDefaultNavigationTimeout()
  belongs_to: BrowserContext
  description: |-
    ### setDefaultNavigationTimeout[​](#browser-context-set-default-navigation-timeout "Direct link to setDefaultNavigationTimeout")

    Added before v1.9

    This setting will change the default maximum navigation time for the following methods and related shortcuts:

    - [page.goBack()](class-page#page-go-back)
    - [page.goForward()](class-page#page-go-forward)
    - [page.goto()](class-page#page-goto)
    - [page.reload()](class-page#page-reload)
    - [page.setContent()](class-page#page-set-content)
    - [page.waitForNavigation()](class-page#page-wait-for-navigation)

    > note
    >
    > [page.setDefaultNavigationTimeout()](class-page#page-set-default-navigation-timeout) and [page.setDefaultTimeout()](class-page#page-set-default-timeout) take priority over [browserContext.setDefaultNavigationTimeout()](class-browsercontext#browser-context-set-default-navigation-timeout).

    **Usage**

    ``` javascript
    browserContext.setDefaultNavigationTimeout(timeout);
    ```

    **Arguments**

    - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Maximum navigation time in milliseconds

    &nbsp;
- name: browserContext.setDefaultTimeout
  id: api/class-browsercontext#browser-context-set-default-timeout
  summary: This setting will change the default maximum time for all the methods accepting timeout option
  belongs_to: BrowserContext
  description: |-
    ### setDefaultTimeout[​](#browser-context-set-default-timeout "Direct link to setDefaultTimeout")

    Added before v1.9

    This setting will change the default maximum time for all the methods accepting `timeout` option.

    > note
    >
    > [page.setDefaultNavigationTimeout()](class-page#page-set-default-navigation-timeout), [page.setDefaultTimeout()](class-page#page-set-default-timeout) and [browserContext.setDefaultNavigationTimeout()](class-browsercontext#browser-context-set-default-navigation-timeout) take priority over [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout).

    **Usage**

    ``` javascript
    browserContext.setDefaultTimeout(timeout);
    ```

    **Arguments**

    - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Maximum time in milliseconds

    &nbsp;
- name: browserContext.setExtraHTTPHeaders
  id: api/class-browsercontext#browser-context-set-extra-http-headers
  summary: The extra HTTP headers will be sent with every request initiated by any page in the context
  belongs_to: BrowserContext
  description: |-
    ### setExtraHTTPHeaders[​](#browser-context-set-extra-http-headers "Direct link to setExtraHTTPHeaders")

    Added before v1.9

    The extra HTTP headers will be sent with every request initiated by any page in the context. These headers are merged with page-specific extra HTTP headers set with [page.setExtraHTTPHeaders()](class-page#page-set-extra-http-headers). If page overrides a particular header, page-specific header value will be used instead of the browser context header value.

    > note
    >
    > [browserContext.setExtraHTTPHeaders()](class-browsercontext#browser-context-set-extra-http-headers) does not guarantee the order of headers in the outgoing requests.

    **Usage**

    ``` javascript
    await browserContext.setExtraHTTPHeaders(headers);
    ```

    **Arguments**

    - `headers`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

      An object containing additional HTTP headers to be sent with every request. All header values must be strings.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: browserContext.setGeolocation
  id: api/class-browsercontext#browser-context-set-geolocation
  summary: Sets the context's geolocation
  belongs_to: BrowserContext
  description: |-
    ### setGeolocation[​](#browser-context-set-geolocation "Direct link to setGeolocation")

    Added before v1.9

    Sets the context's geolocation. Passing `null` or `undefined` emulates position unavailable.

    **Usage**

    ``` javascript
    await browserContext.setGeolocation({ latitude: 59.95, longitude: 30.31667 });
    ```

    > note
    >
    > Consider using [browserContext.grantPermissions()](class-browsercontext#browser-context-grant-permissions) to grant permissions for the browser context pages to read its geolocation.

    **Arguments**

    - `geolocation`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")
      - `latitude`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Latitude between -90 and 90.

      - `longitude`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Longitude between -180 and 180.

      - `accuracy`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")*(optional)*

        Non-negative accuracy value. Defaults to `0`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: browserContext.setHTTPCredentials
  id: api/class-browsercontext#browser-context-set-http-credentials
  summary: Browsers may cache credentials after successful authentication
  belongs_to: BrowserContext
  description: "### setHTTPCredentials[​](#browser-context-set-http-credentials \"Direct link to setHTTPCredentials\")\n\nAdded before v1.9\n\n> Deprecated\n>\n> Browsers may cache credentials after successful authentication. Create a new browser context instead.\n\n**Usage**\n\n``` javascript\nawait browserContext.setHTTPCredentials(httpCredentials);\n```\n\n**Arguments**\n\n- `httpCredentials`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `username`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  - `password`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-browsercontext](https://playwright.dev/docs/api/class-browsercontext)"
- name: browserContext.setOffline
  id: api/class-browsercontext#browser-context-set-offline
  summary: Whether to emulate network being offline for the browser context
  belongs_to: BrowserContext
  description: |-
    ### setOffline[​](#browser-context-set-offline "Direct link to setOffline")

    Added before v1.9

    **Usage**

    ``` javascript
    await browserContext.setOffline(offline);
    ```

    **Arguments**

    - `offline` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

      Whether to emulate network being offline for the browser context.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: browserContext.storageState
  id: api/class-browsercontext#browser-context-storage-state
  summary: Returns storage state for this browser context, contains current cookies and local storage snapshot
  belongs_to: BrowserContext
  description: |-
    ### storageState[​](#browser-context-storage-state "Direct link to storageState")

    Added before v1.9

    Returns storage state for this browser context, contains current cookies and local storage snapshot.

    **Usage**

    ``` javascript
    await browserContext.storageState();
    await browserContext.storageState(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        The file path to save the storage state to. If `path` is a relative path, then it is resolved relative to current working directory. If no path is provided, storage state is still returned, but won't be saved to the disk.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `cookies`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
        - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `value`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `domain`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `path`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `expires`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          Unix time in seconds.

        - `httpOnly`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

        - `secure`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

        - `sameSite` "Strict" \| "Lax" \| "None"
      - `origins`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
        - `origin`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `localStorage`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>

          - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          - `value`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: browserContext.tracing
  id: api/class-browsercontext#browser-context-tracing
  summary: null
  belongs_to: BrowserContext
  description: |-
    ### tracing[​](#browser-context-tracing "Direct link to tracing")

    **Usage**

    ``` javascript
    browserContext.tracing
    ```

    **Type**

    - [Tracing](class-tracing "Tracing")

    ## Events[​](#events "Direct link to Events")
- name: browserContext.unroute
  id: api/class-browsercontext#browser-context-unroute
  summary: Removes a route created with browserContext.route()
  belongs_to: BrowserContext
  description: |-
    ### unroute[​](#browser-context-unroute "Direct link to unroute")

    Added before v1.9

    Removes a route created with [browserContext.route()](class-browsercontext#browser-context-route). When `handler` is not specified, removes all routes for the `url`.

    **Usage**

    ``` javascript
    await browserContext.unroute(url);
    await browserContext.unroute(url, handler);
    ```

    **Arguments**

    - `url`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([URL](https://nodejs.org/api/url.html "URL")):[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

      A glob pattern, regex pattern or predicate receiving [URL](https://nodejs.org/api/url.html "URL") used to register a routing with [browserContext.route()](class-browsercontext#browser-context-route).

    - `handler`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Route](class-route "Route"), [Request](class-request "Request")):[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      Optional handler function used to register a routing with [browserContext.route()](class-browsercontext#browser-context-route).

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: browserContext.unrouteAll
  id: api/class-browsercontext#browser-context-unroute-all
  summary: Removes all routes created with browserContext.route() and browserContext.routeFromHAR()
  belongs_to: BrowserContext
  description: |-
    ### unrouteAll[​](#browser-context-unroute-all "Direct link to unrouteAll")

    Removes all routes created with [browserContext.route()](class-browsercontext#browser-context-route) and [browserContext.routeFromHAR()](class-browsercontext#browser-context-route-from-har).

    **Usage**

    ``` javascript
    await browserContext.unrouteAll();
    await browserContext.unrouteAll(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `behavior` "wait" \| "ignoreErrors" \| "default" *(optional)*

        Specifies whether to wait for already running handlers and what to do if they throw errors:

        - `'default'` - do not wait for current handler calls (if any) to finish, if unrouted handler throws, it may result in unhandled error
        - `'wait'` - wait for current handler calls (if any) to finish
        - `'ignoreErrors'` - do not wait for current handler calls (if any) to finish, all errors thrown by the handlers after unrouting are silently caught

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: browserContext.waitForEvent
  id: api/class-browsercontext#browser-context-wait-for-event
  summary: Waits for event to fire and passes its value into the predicate function
  belongs_to: BrowserContext
  description: |-
    ### waitForEvent[​](#browser-context-wait-for-event "Direct link to waitForEvent")

    Added before v1.9

    Waits for event to fire and passes its value into the predicate function. Returns when the predicate returns truthy value. Will throw an error if the context closes before the event is fired. Returns the event data value.

    **Usage**

    ``` javascript
    const pagePromise = context.waitForEvent('page');
    await page.getByRole('button').click();
    const page = await pagePromise;
    ```

    **Arguments**

    - `event` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Event name, same one would pass into `browserContext.on(event)`.

    - `optionsOrPredicate`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `predicate` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")

        Receives the event data and resolves to truthy value when the waiting should resolve.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time to wait for in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) method.

      Either a predicate that receives an event or an options object. Optional.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `predicate` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function") *(optional)*

        Receives the event data and resolves to truthy value when the waiting should resolve.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>

    ## Properties[​](#properties "Direct link to Properties")
- name: Browsers
  id: browsers
  summary: Each version of Playwright needs specific versions of browser binaries to operate
  description: "# Browsers\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nEach version of Playwright needs specific versions of browser binaries to operate. You will need to use the Playwright CLI to install these browsers.\n\nWith every release, Playwright updates the versions of the browsers it supports, so that the latest Playwright would support the latest browsers at any moment. It means that every time you update Playwright, you might need to re-run the `install` CLI command.\n\n## Install browsers[​](#install-browsers \"Direct link to Install browsers\")\n\nPlaywright can install supported browsers. Running the command without arguments will install the default browsers.\n\n``` javascript\nnpx playwright install\n```\n\nYou can also install specific browsers by providing an argument:\n\n``` javascript\nnpx playwright install webkit\n```\n\nSee all supported browsers:\n\n``` javascript\nnpx playwright install --help\n```\n\n## Install system dependencies[​](#install-system-dependencies \"Direct link to Install system dependencies\")\n\nSystem dependencies can get installed automatically. This is useful for CI environments.\n\n``` javascript\nnpx playwright install-deps\n```\n\nYou can also install the dependencies for a single browser by passing it as an argument:\n\n``` javascript\nnpx playwright install-deps chromium\n```\n\nIt's also possible to combine `install-deps` with `install` so that the browsers and OS dependencies are installed with a single command.\n\n``` javascript\nnpx playwright install --with-deps chromium\n```\n\nSee [system requirements](intro#system-requirements) for officially supported operating systems.\n\n## Update Playwright regularly[​](#update-playwright-regularly \"Direct link to Update Playwright regularly\")\n\nBy keeping your Playwright version up to date you will be able to use new features and test your app on the latest browser versions and catch failures before the latest browser version is released to the public.\n\n``` javascript\n# Update playwright\nnpm install -D @playwright/test@latest\n\n# Install new browsers\nnpx playwright install\n```\n\nCheck the [release notes](release-notes) to see what the latest version is and what changes have been released.\n\n``` javascript\n# See what version of Playwright you have by running the following command\nnpx playwright --version\n```\n\n## Configure Browsers[​](#configure-browsers \"Direct link to Configure Browsers\")\n\nPlaywright can run tests on Chromium, WebKit and Firefox browsers as well as branded browsers such as Google Chrome and Microsoft Edge. It can also run on emulated tablet and mobile devices. See the [registry of device parameters](https://github.com/microsoft/playwright/blob/main/packages/playwright-core/src/server/deviceDescriptorsSource.json) for a complete list of selected desktop, tablet and mobile devices.\n\n### Run tests on different browsers[​](#run-tests-on-different-browsers \"Direct link to Run tests on different browsers\")\n\nPlaywright can run your tests in multiple browsers and configurations by setting up **projects** in the config. You can also add [different options](test-configuration) for each project.\n\n``` javascript\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    /* Test against desktop browsers */\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n    /* Test against mobile viewports. */\n    {\n      name: 'Mobile Chrome',\n      use: { ...devices['Pixel 5'] },\n    },\n    {\n      name: 'Mobile Safari',\n      use: { ...devices['iPhone 12'] },\n    },\n    /* Test against branded browsers. */\n    {\n      name: 'Google Chrome',\n      use: { ...devices['Desktop Chrome'], channel: 'chrome' }, // or 'chrome-beta'\n    },\n    {\n      name: 'Microsoft Edge',\n      use: { ...devices['Desktop Edge'], channel: 'msedge' }, // or 'msedge-dev'\n    },\n  ],\n});\n```\n\nPlaywright will run all projects by default.\n\n``` javascript\nnpx playwright test\n\nRunning 7 tests using 5 workers\n\n  ✓ [chromium] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [firefox] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [webkit] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [Mobile Chrome] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [Mobile Safari] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [Google Chrome] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [Microsoft Edge] › example.spec.ts:3:1 › basic test (2s)\n```\n\nUse the `--project` command line option to run a single project.\n\n``` javascript\nnpx playwright test --project=firefox\n\nRunning 1 test using 1 worker\n\n  ✓ [firefox] › example.spec.ts:3:1 › basic test (2s)\n```\n\nWith the VS Code extension you can run your tests on different browsers by checking the checkbox next to the browser name in the Playwright sidebar. These names are defined in your Playwright config file under the projects section. The default config when installing Playwright gives you 3 projects, Chromium, Firefox and WebKit. The first project is selected by default.\n\nTo run tests on multiple projects(browsers), select each project by checking the checkboxes next to the project name.\n\n### Chromium[​](#chromium \"Direct link to Chromium\")\n\nFor Google Chrome, Microsoft Edge and other Chromium-based browsers, by default, Playwright uses open source Chromium builds. Since the Chromium project is ahead of the branded browsers, when the world is on Google Chrome N, Playwright already supports Chromium N+1 that will be released in Google Chrome and Microsoft Edge a few weeks later.\n\n### Google Chrome & Microsoft Edge[​](#google-chrome--microsoft-edge \"Direct link to Google Chrome & Microsoft Edge\")\n\nWhile Playwright can download and use the recent Chromium build, it can operate against the branded Google Chrome and Microsoft Edge browsers available on the machine (note that Playwright doesn't install them by default). In particular, the current Playwright version will support Stable and Beta channels of these browsers.\n\nAvailable channels are `chrome`, `msedge`, `chrome-beta`, `msedge-beta` or `msedge-dev`.\n\n> warning\n>\n> Certain Enterprise Browser Policies may impact Playwright's ability to launch and control Google Chrome and Microsoft Edge. Running in an environment with browser policies is outside of the Playwright project's scope.\n\n``` javascript\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    /* Test against branded browsers. */\n    {\n      name: 'Google Chrome',\n      use: { ...devices['Desktop Chrome'], channel: 'chrome' }, // or 'chrome-beta'\n    },\n    {\n      name: 'Microsoft Edge',\n      use: { ...devices['Desktop Edge'], channel: 'msedge' }, // or \"msedge-beta\" or 'msedge-dev'\n    },\n  ],\n});\n```\n\n#### Installing Google Chrome & Microsoft Edge[​](#installing-google-chrome--microsoft-edge \"Direct link to Installing Google Chrome & Microsoft Edge\")\n\nIf Google Chrome or Microsoft Edge is not available on your machine, you can install them using the Playwright command line tool:\n\n``` javascript\nnpx playwright install msedge\n```\n\n> warning\n>\n> Google Chrome or Microsoft Edge installations will be installed at the default global location of your operating system overriding your current browser installation.\n\nRun with the `--help` option to see a full a list of browsers that can be installed.\n\n#### When to use Google Chrome & Microsoft Edge and when not to?[​](#when-to-use-google-chrome--microsoft-edge-and-when-not-to \"Direct link to When to use Google Chrome & Microsoft Edge and when not to?\")\n\n##### Defaults[​](#defaults \"Direct link to Defaults\")\n\nUsing the default Playwright configuration with the latest Chromium is a good idea most of the time. Since Playwright is ahead of Stable channels for the browsers, it gives peace of mind that the upcoming Google Chrome or Microsoft Edge releases won't break your site. You catch breakage early and have a lot of time to fix it before the official Chrome update.\n\n##### Regression testing[​](#regression-testing \"Direct link to Regression testing\")\n\nHaving said that, testing policies often require regression testing to be performed against the current publicly available browsers. In this case, you can opt into one of the stable channels, `\"chrome\"` or `\"msedge\"`.\n\n##### Media codecs[​](#media-codecs \"Direct link to Media codecs\")\n\nAnother reason for testing using official binaries is to test functionality related to media codecs. Chromium does not have all the codecs that Google Chrome or Microsoft Edge are bundling due to various licensing considerations and agreements. If your site relies on this kind of codecs (which is rarely the case), you will also want to use the official channel.\n\n##### Enterprise policy[​](#enterprise-policy \"Direct link to Enterprise policy\")\n\nGoogle Chrome and Microsoft Edge respect enterprise policies, which include limitations to the capabilities, network proxy, mandatory extensions that stand in the way of testing. So if you are part of the organization that uses such policies, it is easiest to use bundled Chromium for your local testing, you can still opt into stable channels on the bots that are typically free of such restrictions.\n\n### Firefox[​](#firefox \"Direct link to Firefox\")\n\nPlaywright's Firefox version matches the recent [Firefox Stable](https://www.mozilla.org/en-US/firefox/new/) build. Playwright doesn't work with the branded version of Firefox since it relies on patches.\n\n### WebKit[​](#webkit \"Direct link to WebKit\")\n\nPlaywright's WebKit is derived from the latest WebKit main branch sources, often before these updates are incorporated into Apple Safari and other WebKit-based browsers. This gives a lot of lead time to react on the potential browser update issues. Playwright doesn't work with the branded version of Safari since it relies on patches. Instead, you can test using the most recent WebKit build. Note that avialability of certain features, which depend heavily on the underlying platform, may vary between operating systems.\n\n## Install behind a firewall or a proxy[​](#install-behind-a-firewall-or-a-proxy \"Direct link to Install behind a firewall or a proxy\")\n\nBy default, Playwright downloads browsers from Microsoft's CDN.\n\nSometimes companies maintain an internal proxy that blocks direct access to the public resources. In this case, Playwright can be configured to download browsers via a proxy server.\n\n- Bash\n- PowerShell\n- Batch\n\n``` javascript\nHTTPS_PROXY=https://192.0.2.1 npx playwright install\n```\n\n``` javascript\n$Env:HTTPS_PROXY=\"https://192.0.2.1\"\nnpx playwright install\n```\n\n``` javascript\nset HTTPS_PROXY=https://192.0.2.1\nnpx playwright install\n```\n\nIf the requests of the proxy get intercepted with a custom untrusted certificate authority (CA) and it yields to `Error: self signed certificate in certificate chain` while downloading the browsers, you must set your custom root certificates via the [`NODE_EXTRA_CA_CERTS`](https://nodejs.org/api/cli.html#node_extra_ca_certsfile) environment variable before installing the browsers:\n\n- Bash\n- PowerShell\n- Batch\n\n``` javascript\nexport NODE_EXTRA_CA_CERTS=\"/path/to/cert.pem\"\n```\n\n``` javascript\n$Env:NODE_EXTRA_CA_CERTS=\"C:\\certs\\root.crt\"\n```\n\n``` javascript\nset NODE_EXTRA_CA_CERTS=\"C:\\certs\\root.crt\"\n```\n\nIf your network is slow to connect to Playwright browser archive, you can increase the connection timeout in milliseconds with `PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT` environment variable:\n\n- Bash\n- PowerShell\n- Batch\n\n``` javascript\nPLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000 npx playwright install\n```\n\n``` javascript\n$Env:PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=\"120000\"\nnpx playwright install\n```\n\n``` javascript\nset PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000\nnpx playwright install\n```\n\nIf you are [installing dependencies](#install-system-dependencies) and need to use a proxy on Linux, make sure to run the command as a root user. Otherwise, Playwright will attempt to become a root and will not pass environment variables like `HTTPS_PROXY` to the linux package manager.\n\n``` javascript\nsudo HTTPS_PROXY=https://192.0.2.1 npx playwright install-deps\n```\n\n## Download from artifact repository[​](#download-from-artifact-repository \"Direct link to Download from artifact repository\")\n\nBy default, Playwright downloads browsers from Microsoft's CDN.\n\nSometimes companies maintain an internal artifact repository to host browser binaries. In this case, Playwright can be configured to download from a custom location using the `PLAYWRIGHT_DOWNLOAD_HOST` env variable.\n\n- Bash\n- PowerShell\n- Batch\n\n``` javascript\nPLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 npx playwright install\n```\n\n``` javascript\n$Env:PLAYWRIGHT_DOWNLOAD_HOST=\"http://192.0.2.1\"\nnpx playwright install\n```\n\n``` javascript\nset PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1\nnpx playwright install\n```\n\nIt is also possible to use a per-browser download hosts using `PLAYWRIGHT_CHROMIUM_DOWNLOAD_HOST`, `PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST` and `PLAYWRIGHT_WEBKIT_DOWNLOAD_HOST` env variables that take precedence over `PLAYWRIGHT_DOWNLOAD_HOST`.\n\n- Bash\n- PowerShell\n- Batch\n\n``` javascript\nPLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3 PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 npx playwright install\n```\n\n``` javascript\n$Env:PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=\"http://203.0.113.3\"\n$Env:PLAYWRIGHT_DOWNLOAD_HOST=\"http://192.0.2.1\"\nnpx playwright install\n```\n\n``` javascript\nset PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3\nset PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1\nnpx playwright install\n```\n\n## Managing browser binaries[​](#managing-browser-binaries \"Direct link to Managing browser binaries\")\n\nPlaywright downloads Chromium, WebKit and Firefox browsers into the OS-specific cache folders:\n\n- `%USERPROFILE%\\AppData\\Local\\ms-playwright` on Windows\n- `~/Library/Caches/ms-playwright` on macOS\n- `~/.cache/ms-playwright` on Linux\n\nThese browsers will take a few hundred megabytes of disk space when installed:\n\n``` javascript\ndu -hs ~/Library/Caches/ms-playwright/*\n281M  chromium-XXXXXX\n187M  firefox-XXXX\n180M  webkit-XXXX\n```\n\nYou can override default behavior using environment variables. When installing Playwright, ask it to download browsers into a specific location:\n\n- Bash\n- PowerShell\n- Batch\n\n``` javascript\nPLAYWRIGHT_BROWSERS_PATH=$HOME/pw-browsers npx playwright install\n```\n\n``` javascript\n$Env:PLAYWRIGHT_BROWSERS_PATH=\"$Env:USERPROFILE\\pw-browsers\"\nnpx playwright install\n```\n\n``` javascript\nset PLAYWRIGHT_BROWSERS_PATH=%USERPROFILE%\\pw-browsers\nnpx playwright install\n```\n\nWhen running Playwright scripts, ask it to search for browsers in a shared location.\n\n- Bash\n- PowerShell\n- Batch\n\n``` javascript\nPLAYWRIGHT_BROWSERS_PATH=$HOME/pw-browsers npx playwright test\n```\n\n``` javascript\n$Env:PLAYWRIGHT_BROWSERS_PATH=\"$Env:USERPROFILE\\pw-browsers\"\nnpx playwright test\n```\n\n``` javascript\nset PLAYWRIGHT_BROWSERS_PATH=%USERPROFILE%\\pw-browsers\nnpx playwright test\n```\n\nPlaywright keeps track of packages that need those browsers and will garbage collect them as you update Playwright to the newer versions.\n\n> note\n>\n> Developers can opt-in in this mode via exporting `PLAYWRIGHT_BROWSERS_PATH=$HOME/pw-browsers` in their `.bashrc`.\n\n### Hermetic install[​](#hermetic-install \"Direct link to Hermetic install\")\n\nYou can opt into the hermetic install and place binaries in the local folder:\n\n- Bash\n- PowerShell\n- Batch\n\n``` javascript\n# Places binaries to node_modules/playwright-core/.local-browsers\nPLAYWRIGHT_BROWSERS_PATH=0 npx playwright install\n```\n\n``` javascript\n# Places binaries to node_modules\\playwright-core\\.local-browsers\n$Env:PLAYWRIGHT_BROWSERS_PATH=0\nnpx playwright install\n```\n\n``` javascript\n# Places binaries to node_modules\\playwright-core\\.local-browsers\nset PLAYWRIGHT_BROWSERS_PATH=0\nnpx playwright install\n```\n\n> note\n>\n> `PLAYWRIGHT_BROWSERS_PATH` does not change installation path for Google Chrome and Microsoft Edge.\n\n### Stale browser removal[​](#stale-browser-removal \"Direct link to Stale browser removal\")\n\nPlaywright keeps track of the clients that use its browsers. When there are no more clients that require a particular version of the browser, that version is deleted from the system. That way you can safely use Playwright instances of different versions and at the same time, you don't waste disk space for the browsers that are no longer in use.\n\nTo opt-out from the unused browser removal, you can set the `PLAYWRIGHT_SKIP_BROWSER_GC=1` environment variable.\n\n### Uninstall browsers[​](#uninstall-browsers \"Direct link to Uninstall browsers\")\n\nThis will remove the browsers (chromium, firefox, webkit) of the current Playwright installation:\n\n``` javascript\nnpx playwright uninstall\n```\n\nTo remove browsers of other Playwright installations as well, pass `--all` flag:\n\n``` javascript\nnpx playwright uninstall --all\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/browsers](https://playwright.dev/docs/browsers)"
- name: BrowserServer
  id: api/class-browserserver
  summary: Closes the browser gracefully and makes sure the process is terminated
  description: "# BrowserServer\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### close[​](#browser-server-close \"Direct link to close\")\n\nAdded before v1.9\n\nCloses the browser gracefully and makes sure the process is terminated.\n\n**Usage**\n\n``` javascript\nawait browserServer.close();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### kill[​](#browser-server-kill \"Direct link to kill\")\n\nAdded before v1.9\n\nKills the browser process and waits for the process to exit.\n\n**Usage**\n\n``` javascript\nawait browserServer.kill();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### process[​](#browser-server-process \"Direct link to process\")\n\nAdded before v1.9\n\nSpawned browser application process.\n\n**Usage**\n\n``` javascript\nbrowserServer.process();\n```\n\n**Returns**\n\n- [ChildProcess](https://nodejs.org/api/child_process.html \"ChildProcess\")\n\n### wsEndpoint[​](#browser-server-ws-endpoint \"Direct link to wsEndpoint\")\n\nAdded before v1.9\n\nBrowser websocket url.\n\nBrowser websocket endpoint which can be used as an argument to [browserType.connect()](class-browsertype#browser-type-connect) to establish connection to the browser.\n\nNote that if the listen `host` option in `launchServer` options is not specified, localhost will be output anyway, even if the actual listening address is an unspecified address.\n\n**Usage**\n\n``` javascript\nbrowserServer.wsEndpoint();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n## Events[​](#events \"Direct link to Events\")\n\n### on('close')[​](#browser-server-event-close \"Direct link to on('close')\")\n\nAdded before v1.9\n\nEmitted when the browser server closes.\n\n**Usage**\n\n``` javascript\nbrowserServer.on('close', data => {});\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-browserserver](https://playwright.dev/docs/api/class-browserserver)"
- name: browserServer.close
  id: api/class-browserserver#browser-server-close
  summary: Closes the browser gracefully and makes sure the process is terminated
  belongs_to: BrowserServer
  description: |-
    ### close[​](#browser-server-close "Direct link to close")

    Added before v1.9

    Closes the browser gracefully and makes sure the process is terminated.

    **Usage**

    ``` javascript
    await browserServer.close();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>
- name: browserServer.kill
  id: api/class-browserserver#browser-server-kill
  summary: Kills the browser process and waits for the process to exit
  belongs_to: BrowserServer
  description: |-
    ### kill[​](#browser-server-kill "Direct link to kill")

    Added before v1.9

    Kills the browser process and waits for the process to exit.

    **Usage**

    ``` javascript
    await browserServer.kill();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: browserServer.on('close')
  id: api/class-browserserver#browser-server-event-close
  summary: Emitted when the browser server closes
  belongs_to: BrowserServer
  description: "### on('close')[​](#browser-server-event-close \"Direct link to on('close')\")\n\nAdded before v1.9\n\nEmitted when the browser server closes.\n\n**Usage**\n\n``` javascript\nbrowserServer.on('close', data => {});\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-browserserver](https://playwright.dev/docs/api/class-browserserver)"
- name: browserServer.process
  id: api/class-browserserver#browser-server-process
  summary: Spawned browser application process
  belongs_to: BrowserServer
  description: |-
    ### process[​](#browser-server-process "Direct link to process")

    Added before v1.9

    Spawned browser application process.

    **Usage**

    ``` javascript
    browserServer.process();
    ```

    **Returns**

    - [ChildProcess](https://nodejs.org/api/child_process.html "ChildProcess")

    &nbsp;
- name: browserServer.wsEndpoint
  id: api/class-browserserver#browser-server-ws-endpoint
  summary: Browser websocket url
  belongs_to: BrowserServer
  description: |-
    ### wsEndpoint[​](#browser-server-ws-endpoint "Direct link to wsEndpoint")

    Added before v1.9

    Browser websocket url.

    Browser websocket endpoint which can be used as an argument to [browserType.connect()](class-browsertype#browser-type-connect) to establish connection to the browser.

    Note that if the listen `host` option in `launchServer` options is not specified, localhost will be output anyway, even if the actual listening address is an unspecified address.

    **Usage**

    ``` javascript
    browserServer.wsEndpoint();
    ```

    **Returns**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    ## Events[​](#events "Direct link to Events")
- name: BrowserType
  id: api/class-browsertype
  summary: BrowserType provides methods to launch a specific browser instance or connect to an existing one
  description: "# BrowserType\n\nBrowserType provides methods to launch a specific browser instance or connect to an existing one. The following is a typical example of using Playwright to drive automation:\n\n``` javascript\nconst { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.\n\n(async () => {\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n  await page.goto('https://example.com');\n  // other actions...\n  await browser.close();\n})();\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### connect[​](#browser-type-connect \"Direct link to connect\")\n\nAdded before v1.9\n\nThis method attaches Playwright to an existing browser instance. When connecting to another browser launched via `BrowserType.launchServer` in Node.js, the major and minor version needs to match the client version (1.2.3 → is compatible with 1.2.x).\n\n**Usage**\n\n``` javascript\nawait browserType.connect(wsEndpoint);\nawait browserType.connect(wsEndpoint, options);\n```\n\n**Arguments**\n\n- `wsEndpoint` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A browser websocket endpoint to connect to.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `exposeNetwork` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    This option exposes network available on the connecting client to the browser being connected to. Consists of a list of rules separated by comma.\n\n    Available rules:\n\n    1.  Hostname pattern, for example: `example.com`, `*.org:99`, `x.*.y.com`, `*foo.org`.\n    2.  IP literal, for example: `127.0.0.1`, `0.0.0.0:99`, `[::1]`, `[0:0::1]:99`.\n    3.  `<loopback>` that matches local loopback interfaces: `localhost`, `*.localhost`, `127.0.0.1`, `[::1]`.\n\n    Some common examples:\n\n    1.  `\"*\"` to expose all network.\n    2.  `\"<loopback>\"` to expose localhost network.\n    3.  `\"*.test.internal-domain,*.staging.internal-domain,<loopback>\"` to expose test/staging deployments and localhost.\n\n  - `headers` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    Additional HTTP headers to be sent with web socket connect request. Optional.\n\n  - `logger` [Logger](class-logger \"Logger\") *(optional)*\n\n    Logger sink for Playwright logging. Optional.\n\n  - `slowMo` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on. Defaults to 0.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds to wait for the connection to be established. Defaults to `0` (no timeout).\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Browser](class-browser \"Browser\")\\>\n\n### connectOverCDP[​](#browser-type-connect-over-cdp \"Direct link to connectOverCDP\")\n\nThis method attaches Playwright to an existing browser instance using the Chrome DevTools Protocol.\n\nThe default browser context is accessible via [browser.contexts()](class-browser#browser-contexts).\n\n> note\n>\n> Connecting over the Chrome DevTools Protocol is only supported for Chromium-based browsers.\n\n**Usage**\n\n``` javascript\nconst browser = await playwright.chromium.connectOverCDP('http://localhost:9222');\nconst defaultContext = browser.contexts()[0];\nconst page = defaultContext.pages()[0];\n```\n\n**Arguments**\n\n- `endpointURL` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A CDP websocket endpoint or http url to connect to. For example `http://localhost:9222/` or `ws://127.0.0.1:9222/devtools/browser/387adf4c-243f-4051-a181-46798f4a46f4`.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `endpointURL` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Deprecated, use the first argument instead. Optional.\n\n  - `headers` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    Additional HTTP headers to be sent with connect request. Optional.\n\n  - `logger` [Logger](class-logger \"Logger\") *(optional)*\n\n    Logger sink for Playwright logging. Optional.\n\n  - `slowMo` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on. Defaults to 0.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds to wait for the connection to be established. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Browser](class-browser \"Browser\")\\>\n\n### executablePath[​](#browser-type-executable-path \"Direct link to executablePath\")\n\nAdded before v1.9\n\nA path where Playwright expects to find a bundled browser executable.\n\n**Usage**\n\n``` javascript\nbrowserType.executablePath();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### launch[​](#browser-type-launch \"Direct link to launch\")\n\nAdded before v1.9\n\nReturns the browser instance.\n\n**Usage**\n\nYou can use `ignoreDefaultArgs` to filter out `--mute-audio` from default arguments:\n\n``` javascript\nconst browser = await chromium.launch({  // Or 'firefox' or 'webkit'.\n  ignoreDefaultArgs: ['--mute-audio']\n});\n```\n\n> **Chromium-only** Playwright can also be used to control the Google Chrome or Microsoft Edge browsers, but it works best with the version of Chromium it is bundled with. There is no guarantee it will work with any other version. Use `executablePath` option with extreme caution.\n>\n> If Google Chrome (rather than Chromium) is preferred, a [Chrome Canary](https://www.google.com/chrome/browser/canary.html) or [Dev Channel](https://www.chromium.org/getting-involved/dev-channel) build is suggested.\n>\n> Stock browsers like Google Chrome and Microsoft Edge are suitable for tests that require proprietary media codecs for video playback. See [this article](https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/) for other differences between Chromium and Chrome. [This article](https://chromium.googlesource.com/chromium/src/+/lkgr/docs/chromium_browser_vs_google_chrome.md) describes some differences for Linux users.\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `args` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    > warning\n    >\n    > Use custom browser args at your own risk, as some of them may break Playwright functionality.\n\n    Additional arguments to pass to the browser instance. The list of Chromium flags can be found [here](https://peter.sh/experiments/chromium-command-line-switches/).\n\n  - `channel` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Browser distribution channel. Supported values are \"chrome\", \"chrome-beta\", \"chrome-dev\", \"chrome-canary\", \"msedge\", \"msedge-beta\", \"msedge-dev\", \"msedge-canary\". Read more about using [Google Chrome and Microsoft Edge](../browsers#google-chrome--microsoft-edge).\n\n  - `chromiumSandbox` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Enable Chromium sandboxing. Defaults to `false`.\n\n  - `devtools` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > Use [debugging tools](../debug) instead.\n\n    **Chromium-only** Whether to auto-open a Developer Tools panel for each tab. If this option is `true`, the `headless` option will be set `false`.\n\n  - `downloadsPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    If specified, accepted downloads are downloaded into this directory. Otherwise, temporary directory is created and is deleted when browser is closed. In either case, the downloads are deleted when the browser context they were created in is closed.\n\n  - `env` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\> *(optional)*\n\n    Specify environment variables that will be visible to the browser. Defaults to `process.env`.\n\n  - `executablePath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Path to a browser executable to run instead of the bundled one. If `executablePath` is a relative path, then it is resolved relative to the current working directory. Note that Playwright only works with the bundled Chromium, Firefox or WebKit, use at your own risk.\n\n  - `firefoxUserPrefs` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\> *(optional)*\n\n    Firefox user preferences. Learn more about the Firefox user preferences at [`about:config`](https://support.mozilla.org/en-US/kb/about-config-editor-firefox).\n\n  - `handleSIGHUP` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Close the browser process on SIGHUP. Defaults to `true`.\n\n  - `handleSIGINT` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Close the browser process on Ctrl-C. Defaults to `true`.\n\n  - `handleSIGTERM` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Close the browser process on SIGTERM. Defaults to `true`.\n\n  - `headless` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to run browser in headless mode. More details for [Chromium](https://developers.google.com/web/updates/2017/04/headless-chrome) and [Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode). Defaults to `true` unless the `devtools` option is `true`.\n\n  - `ignoreDefaultArgs` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    If `true`, Playwright does not pass its own configurations args and only uses the ones from `args`. If an array is given, then filters out the given default arguments. Dangerous option; use with care. Defaults to `false`.\n\n  - `logger` [Logger](class-logger \"Logger\") *(optional)*\n\n    Logger sink for Playwright logging.\n\n  - `proxy` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `server` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.\n\n    - `bypass` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional comma-separated domains to bypass proxy, for example `\".com, chromium.org, .domain.com\"`.\n\n    - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional username to use if HTTP proxy requires authentication.\n\n    - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional password to use if HTTP proxy requires authentication.\n\n    Network proxy settings.\n\n  - `slowMo` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds to wait for the browser instance to start. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.\n\n  - `tracesDir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    If specified, traces are saved into this directory.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Browser](class-browser \"Browser\")\\>\n\n### launchPersistentContext[​](#browser-type-launch-persistent-context \"Direct link to launchPersistentContext\")\n\nAdded before v1.9\n\nReturns the persistent browser context instance.\n\nLaunches browser that uses persistent storage located at `userDataDir` and returns the only context. Closing this context will automatically close the browser.\n\n**Usage**\n\n``` javascript\nawait browserType.launchPersistentContext(userDataDir);\nawait browserType.launchPersistentContext(userDataDir, options);\n```\n\n**Arguments**\n\n- `userDataDir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Path to a User Data Directory, which stores browser session data like cookies and local storage. More details for [Chromium](https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md#introduction) and [Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Command_Line_Options#User_Profile). Note that Chromium's user data directory is the **parent** directory of the \"Profile Path\" seen at `chrome://version`. Pass an empty string to use a temporary directory instead.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `acceptDownloads` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.\n\n  - `args` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    > warning\n    >\n    > Use custom browser args at your own risk, as some of them may break Playwright functionality.\n\n    Additional arguments to pass to the browser instance. The list of Chromium flags can be found [here](https://peter.sh/experiments/chromium-command-line-switches/).\n\n  - `baseURL` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    When using [page.goto()](class-page#page-goto), [page.route()](class-page#page-route), [page.waitForURL()](class-page#page-wait-for-url), [page.waitForRequest()](class-page#page-wait-for-request), or [page.waitForResponse()](class-page#page-wait-for-response) it takes the base URL in consideration by using the [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL. Unset by default. Examples:\n\n    - baseURL: `http://localhost:3000` and navigating to `/bar.html` results in `http://localhost:3000/bar.html`\n    - baseURL: `http://localhost:3000/foo/` and navigating to `./bar.html` results in `http://localhost:3000/foo/bar.html`\n    - baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in `http://localhost:3000/bar.html`\n\n  - `bypassCSP` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Toggles bypassing page's Content-Security-Policy. Defaults to `false`.\n\n  - `channel` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Browser distribution channel. Supported values are \"chrome\", \"chrome-beta\", \"chrome-dev\", \"chrome-canary\", \"msedge\", \"msedge-beta\", \"msedge-dev\", \"msedge-canary\". Read more about using [Google Chrome and Microsoft Edge](../browsers#google-chrome--microsoft-edge).\n\n  - `chromiumSandbox` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Enable Chromium sandboxing. Defaults to `false`.\n\n  - `clientCertificates` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Exact origin that the certificate is valid for. Origin includes `https` protocol, a hostname and optionally a port.\n\n    - `certPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Path to the file with the certificate in PEM format.\n\n    - `keyPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Path to the file with the private key in PEM format.\n\n    - `pfxPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Path to the PFX or PKCS12 encoded private key and certificate chain.\n\n    - `passphrase` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Passphrase for the private key (PEM or PFX).\n\n    TLS Client Authentication allows the server to request a client certificate and verify it.\n\n    **Details**\n\n    An array of client certificates to be used. Each certificate object must have both `certPath` and `keyPath` or a single `pfxPath` to load the client certificate. Optionally, `passphrase` property should be provided if the certficiate is encrypted. The `origin` property should be provided with an exact match to the request origin that the certificate is valid for.\n\n    > note\n    >\n    > Using Client Certificates in combination with Proxy Servers is not supported.\n\n    > note\n    >\n    > When using WebKit on macOS, accessing `localhost` will not pick up client certificates. You can make it work by replacing `localhost` with `local.playwright`.\n\n  - `colorScheme` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| \"light\" \\| \"dark\" \\| \"no-preference\" *(optional)*\n\n    Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'light'`.\n\n  - `deviceScaleFactor` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Specify device scale factor (can be thought of as dpr). Defaults to `1`. Learn more about [emulating devices with device scale factor](../emulation#devices).\n\n  - `devtools` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > Use [debugging tools](../debug) instead.\n\n    **Chromium-only** Whether to auto-open a Developer Tools panel for each tab. If this option is `true`, the `headless` option will be set `false`.\n\n  - `downloadsPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    If specified, accepted downloads are downloaded into this directory. Otherwise, temporary directory is created and is deleted when browser is closed. In either case, the downloads are deleted when the browser context they were created in is closed.\n\n  - `env` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\> *(optional)*\n\n    Specify environment variables that will be visible to the browser. Defaults to `process.env`.\n\n  - `executablePath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Path to a browser executable to run instead of the bundled one. If `executablePath` is a relative path, then it is resolved relative to the current working directory. Note that Playwright only works with the bundled Chromium, Firefox or WebKit, use at your own risk.\n\n  - `extraHTTPHeaders` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    An object containing additional HTTP headers to be sent with every request. Defaults to none.\n\n  - `firefoxUserPrefs` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\> *(optional)*\n\n    Firefox user preferences. Learn more about the Firefox user preferences at [`about:config`](https://support.mozilla.org/en-US/kb/about-config-editor-firefox).\n\n  - `forcedColors` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| \"active\" \\| \"none\" *(optional)*\n\n    Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'none'`.\n\n  - `geolocation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `latitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Latitude between -90 and 90.\n\n    - `longitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Longitude between -180 and 180.\n\n    - `accuracy` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n      Non-negative accuracy value. Defaults to `0`.\n\n  - `handleSIGHUP` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Close the browser process on SIGHUP. Defaults to `true`.\n\n  - `handleSIGINT` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Close the browser process on Ctrl-C. Defaults to `true`.\n\n  - `handleSIGTERM` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Close the browser process on SIGTERM. Defaults to `true`.\n\n  - `hasTouch` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Specifies if viewport supports touch events. Defaults to false. Learn more about [mobile emulation](../emulation#devices).\n\n  - `headless` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to run browser in headless mode. More details for [Chromium](https://developers.google.com/web/updates/2017/04/headless-chrome) and [Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode). Defaults to `true` unless the `devtools` option is `true`.\n\n  - `httpCredentials` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Restrain sending http credentials on specific origin (scheme://host:port).\n\n    - `send` \"unauthorized\" \\| \"always\" *(optional)*\n\n      This option only applies to the requests sent from corresponding [APIRequestContext](class-apirequestcontext \"APIRequestContext\") and does not affect requests sent from the browser. `'always'` - `Authorization` header with basic authentication credentials will be sent with the each API request. `'unauthorized` - the credentials are only sent when 401 (Unauthorized) response with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.\n\n    Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no origin is specified, the username and password are sent to any servers upon unauthorized responses.\n\n  - `ignoreDefaultArgs` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    If `true`, Playwright does not pass its own configurations args and only uses the ones from `args`. If an array is given, then filters out the given default arguments. Dangerous option; use with care. Defaults to `false`.\n\n  - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.\n\n  - `isMobile` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether the `meta viewport` tag is taken into account and touch events are enabled. isMobile is a part of device, so you don't actually need to set it manually. Defaults to `false` and is not supported in Firefox. Learn more about [mobile emulation](../emulation#ismobile).\n\n  - `javaScriptEnabled` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether or not to enable JavaScript in the context. Defaults to `true`. Learn more about [disabling JavaScript](../emulation#javascript-enabled).\n\n  - `locale` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default locale. Learn more about emulation in our [emulation guide](../emulation#locale--timezone).\n\n  - `logger` [Logger](class-logger \"Logger\") *(optional)*\n\n    Logger sink for Playwright logging.\n\n  - `offline` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to emulate network being offline. Defaults to `false`. Learn more about [network emulation](../emulation#offline).\n\n  - `permissions` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    A list of permissions to grant to all pages in this context. See [browserContext.grantPermissions()](class-browsercontext#browser-context-grant-permissions) for more details. Defaults to none.\n\n  - `proxy` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `server` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.\n\n    - `bypass` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional comma-separated domains to bypass proxy, for example `\".com, chromium.org, .domain.com\"`.\n\n    - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional username to use if HTTP proxy requires authentication.\n\n    - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional password to use if HTTP proxy requires authentication.\n\n    Network proxy settings.\n\n  - `recordHar` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `omitContent` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n      Optional setting to control whether to omit request content from the HAR. Defaults to `false`. Deprecated, use `content` policy instead.\n\n    - `content` \"omit\" \\| \"embed\" \\| \"attach\" *(optional)*\n\n      Optional setting to control resource content management. If `omit` is specified, content is not persisted. If `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is specified, content is stored inline the HAR file as per HAR specification. Defaults to `attach` for `.zip` output files and to `embed` for all other file extensions.\n\n    - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Path on the filesystem to write the HAR file to. If the file name ends with `.zip`, `content: 'attach'` is used by default.\n\n    - `mode` \"full\" \\| \"minimal\" *(optional)*\n\n      When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page, cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `full`.\n\n    - `urlFilter` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") *(optional)*\n\n      A glob or regex pattern to filter requests that are stored in the HAR. When a `baseURL` via the context options was provided and the passed URL is a path, it gets merged via the [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor. Defaults to none.\n\n    Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file. If not specified, the HAR is not recorded. Make sure to await [browserContext.close()](class-browsercontext#browser-context-close) for the HAR to be saved.\n\n  - `recordVideo` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `dir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Path to the directory to put videos into.\n\n    - `size` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n      - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n        Video frame width.\n\n      - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n        Video frame height.\n\n      Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.\n\n    Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded. Make sure to await [browserContext.close()](class-browsercontext#browser-context-close) for videos to be saved.\n\n  - `reducedMotion` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| \"reduce\" \\| \"no-preference\" *(optional)*\n\n    Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'no-preference'`.\n\n  - `screen` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      page width in pixels.\n\n    - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      page height in pixels.\n\n    Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the `viewport` is set.\n\n  - `serviceWorkers` \"allow\" \\| \"block\" *(optional)*\n\n    Whether to allow sites to register Service workers. Defaults to `'allow'`.\n\n    - `'allow'`: [Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) can be registered.\n    - `'block'`: Playwright will block all registration of Service Workers.\n\n  - `slowMo` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on.\n\n  - `strictSelectors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    If set to true, enables strict selectors mode for this context. In the strict selectors mode all operations on selectors that imply single target DOM element will throw when more than one element matches the selector. This option does not affect any Locator APIs (Locators are always strict). Defaults to `false`. See [Locator](class-locator \"Locator\") to learn more about the strict mode.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds to wait for the browser instance to start. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.\n\n  - `timezoneId` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Changes the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1) for a list of supported timezone IDs. Defaults to the system timezone.\n\n  - `tracesDir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    If specified, traces are saved into this directory.\n\n  - `userAgent` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Specific user agent to use in this context.\n\n  - `videoSize` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    > Deprecated\n    >\n    > Use `recordVideo` instead.\n\n    - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Video frame width.\n\n    - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Video frame height.\n\n  - `videosPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    > Deprecated\n    >\n    > Use `recordVideo` instead.\n\n  - `viewport` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      page width in pixels.\n\n    - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      page height in pixels.\n\n    Emulates consistent viewport for each page. Defaults to an 1280x720 viewport. Use `null` to disable the consistent viewport emulation. Learn more about [viewport emulation](../emulation#viewport).\n\n    > note\n    >\n    > The `null` value opts out from the default presets, makes viewport depend on the host window size defined by the operating system. It makes the execution of the tests non-deterministic.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[BrowserContext](class-browsercontext \"BrowserContext\")\\>\n\n### launchServer[​](#browser-type-launch-server \"Direct link to launchServer\")\n\nAdded before v1.9\n\nReturns the browser app instance. You can connect to it via [browserType.connect()](class-browsertype#browser-type-connect), which requires the major/minor client/server version to match (1.2.3 → is compatible with 1.2.x).\n\n**Usage**\n\nLaunches browser server that client can connect to. An example of launching a browser executable and connecting to it later:\n\n``` javascript\nconst { chromium } = require('playwright');  // Or 'webkit' or 'firefox'.\n\n(async () => {\n  const browserServer = await chromium.launchServer();\n  const wsEndpoint = browserServer.wsEndpoint();\n  // Use web socket endpoint later to establish a connection.\n  const browser = await chromium.connect(wsEndpoint);\n  // Close browser instance.\n  await browserServer.close();\n})();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `args` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    > warning\n    >\n    > Use custom browser args at your own risk, as some of them may break Playwright functionality.\n\n    Additional arguments to pass to the browser instance. The list of Chromium flags can be found [here](https://peter.sh/experiments/chromium-command-line-switches/).\n\n  - `channel` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Browser distribution channel. Supported values are \"chrome\", \"chrome-beta\", \"chrome-dev\", \"chrome-canary\", \"msedge\", \"msedge-beta\", \"msedge-dev\", \"msedge-canary\". Read more about using [Google Chrome and Microsoft Edge](../browsers#google-chrome--microsoft-edge).\n\n  - `chromiumSandbox` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Enable Chromium sandboxing. Defaults to `false`.\n\n  - `devtools` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > Use [debugging tools](../debug) instead.\n\n    **Chromium-only** Whether to auto-open a Developer Tools panel for each tab. If this option is `true`, the `headless` option will be set `false`.\n\n  - `downloadsPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    If specified, accepted downloads are downloaded into this directory. Otherwise, temporary directory is created and is deleted when browser is closed. In either case, the downloads are deleted when the browser context they were created in is closed.\n\n  - `env` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\> *(optional)*\n\n    Specify environment variables that will be visible to the browser. Defaults to `process.env`.\n\n  - `executablePath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Path to a browser executable to run instead of the bundled one. If `executablePath` is a relative path, then it is resolved relative to the current working directory. Note that Playwright only works with the bundled Chromium, Firefox or WebKit, use at your own risk.\n\n  - `firefoxUserPrefs` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\> *(optional)*\n\n    Firefox user preferences. Learn more about the Firefox user preferences at [`about:config`](https://support.mozilla.org/en-US/kb/about-config-editor-firefox).\n\n  - `handleSIGHUP` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Close the browser process on SIGHUP. Defaults to `true`.\n\n  - `handleSIGINT` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Close the browser process on Ctrl-C. Defaults to `true`.\n\n  - `handleSIGTERM` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Close the browser process on SIGTERM. Defaults to `true`.\n\n  - `headless` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to run browser in headless mode. More details for [Chromium](https://developers.google.com/web/updates/2017/04/headless-chrome) and [Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode). Defaults to `true` unless the `devtools` option is `true`.\n\n  - `host` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Host to use for the web socket. It is optional and if it is omitted, the server will accept connections on the unspecified IPv6 address (::) when IPv6 is available, or the unspecified IPv4 address (0.0.0.0) otherwise. Consider hardening it with picking a specific interface.\n\n  - `ignoreDefaultArgs` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    If `true`, Playwright does not pass its own configurations args and only uses the ones from `args`. If an array is given, then filters out the given default arguments. Dangerous option; use with care. Defaults to `false`.\n\n  - `logger` [Logger](class-logger \"Logger\") *(optional)*\n\n    Logger sink for Playwright logging.\n\n  - `port` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Port to use for the web socket. Defaults to 0 that picks any available port.\n\n  - `proxy` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `server` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.\n\n    - `bypass` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional comma-separated domains to bypass proxy, for example `\".com, chromium.org, .domain.com\"`.\n\n    - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional username to use if HTTP proxy requires authentication.\n\n    - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional password to use if HTTP proxy requires authentication.\n\n    Network proxy settings.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds to wait for the browser instance to start. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.\n\n  - `tracesDir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    If specified, traces are saved into this directory.\n\n  - `wsPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Path at which to serve the Browser Server. For security, this defaults to an unguessable string.\n\n    > warning\n    >\n    > Any process or web page (including those running in Playwright) with knowledge of the `wsPath` can take control of the OS user. For this reason, you should use an unguessable token when using this option.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[BrowserServer](class-browserserver \"BrowserServer\")\\>\n\n### name[​](#browser-type-name \"Direct link to name\")\n\nAdded before v1.9\n\nReturns browser name. For example: `'chromium'`, `'webkit'` or `'firefox'`.\n\n**Usage**\n\n``` javascript\nbrowserType.name();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-browsertype](https://playwright.dev/docs/api/class-browsertype)"
- name: browserType.connect
  id: api/class-browsertype#browser-type-connect
  summary: This method attaches Playwright to an existing browser instance
  belongs_to: BrowserType
  description: |-
    ### connect[​](#browser-type-connect "Direct link to connect")

    Added before v1.9

    This method attaches Playwright to an existing browser instance. When connecting to another browser launched via `BrowserType.launchServer` in Node.js, the major and minor version needs to match the client version (1.2.3 → is compatible with 1.2.x).

    **Usage**

    ``` javascript
    await browserType.connect(wsEndpoint);
    await browserType.connect(wsEndpoint, options);
    ```

    **Arguments**

    - `wsEndpoint` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A browser websocket endpoint to connect to.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `exposeNetwork` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        This option exposes network available on the connecting client to the browser being connected to. Consists of a list of rules separated by comma.

        Available rules:

        1.  Hostname pattern, for example: `example.com`, `*.org:99`, `x.*.y.com`, `*foo.org`.
        2.  IP literal, for example: `127.0.0.1`, `0.0.0.0:99`, `[::1]`, `[0:0::1]:99`.
        3.  `<loopback>` that matches local loopback interfaces: `localhost`, `*.localhost`, `127.0.0.1`, `[::1]`.

        Some common examples:

        1.  `"*"` to expose all network.
        2.  `"<loopback>"` to expose localhost network.
        3.  `"*.test.internal-domain,*.staging.internal-domain,<loopback>"` to expose test/staging deployments and localhost.

      - `headers`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        Additional HTTP headers to be sent with web socket connect request. Optional.

      - `logger` [Logger](class-logger "Logger") *(optional)*

        Logger sink for Playwright logging. Optional.

      - `slowMo` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on. Defaults to 0.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds to wait for the connection to be established. Defaults to `0` (no timeout).

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Browser](class-browser "Browser")\>
- name: browserType.connectOverCDP
  id: api/class-browsertype#browser-type-connect-over-cdp
  summary: This method attaches Playwright to an existing browser instance using the Chrome DevTools Protocol
  belongs_to: BrowserType
  description: |-
    ### connectOverCDP[​](#browser-type-connect-over-cdp "Direct link to connectOverCDP")

    This method attaches Playwright to an existing browser instance using the Chrome DevTools Protocol.

    The default browser context is accessible via [browser.contexts()](class-browser#browser-contexts).

    > note
    >
    > Connecting over the Chrome DevTools Protocol is only supported for Chromium-based browsers.

    **Usage**

    ``` javascript
    const browser = await playwright.chromium.connectOverCDP('http://localhost:9222');
    const defaultContext = browser.contexts()[0];
    const page = defaultContext.pages()[0];
    ```

    **Arguments**

    - `endpointURL` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A CDP websocket endpoint or http url to connect to. For example `http://localhost:9222/` or `ws://127.0.0.1:9222/devtools/browser/387adf4c-243f-4051-a181-46798f4a46f4`.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `endpointURL` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Deprecated, use the first argument instead. Optional.

      - `headers`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        Additional HTTP headers to be sent with connect request. Optional.

      - `logger` [Logger](class-logger "Logger") *(optional)*

        Logger sink for Playwright logging. Optional.

      - `slowMo` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on. Defaults to 0.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds to wait for the connection to be established. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Browser](class-browser "Browser")\>

    &nbsp;
- name: browserType.executablePath
  id: api/class-browsertype#browser-type-executable-path
  summary: A path where Playwright expects to find a bundled browser executable
  belongs_to: BrowserType
  description: |-
    ### executablePath[​](#browser-type-executable-path "Direct link to executablePath")

    Added before v1.9

    A path where Playwright expects to find a bundled browser executable.

    **Usage**

    ``` javascript
    browserType.executablePath();
    ```

    **Returns**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: browserType.launch
  id: api/class-browsertype#browser-type-launch
  summary: Returns the browser instance
  belongs_to: BrowserType
  description: |-
    ### launch[​](#browser-type-launch "Direct link to launch")

    Added before v1.9

    Returns the browser instance.

    **Usage**

    You can use `ignoreDefaultArgs` to filter out `--mute-audio` from default arguments:

    ``` javascript
    const browser = await chromium.launch({  // Or 'firefox' or 'webkit'.
      ignoreDefaultArgs: ['--mute-audio']
    });
    ```

    > **Chromium-only** Playwright can also be used to control the Google Chrome or Microsoft Edge browsers, but it works best with the version of Chromium it is bundled with. There is no guarantee it will work with any other version. Use `executablePath` option with extreme caution.
    >
    > If Google Chrome (rather than Chromium) is preferred, a [Chrome Canary](https://www.google.com/chrome/browser/canary.html) or [Dev Channel](https://www.chromium.org/getting-involved/dev-channel) build is suggested.
    >
    > Stock browsers like Google Chrome and Microsoft Edge are suitable for tests that require proprietary media codecs for video playback. See [this article](https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/) for other differences between Chromium and Chrome. [This article](https://chromium.googlesource.com/chromium/src/+/lkgr/docs/chromium_browser_vs_google_chrome.md) describes some differences for Linux users.

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `args`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        > warning
        >
        > Use custom browser args at your own risk, as some of them may break Playwright functionality.

        Additional arguments to pass to the browser instance. The list of Chromium flags can be found [here](https://peter.sh/experiments/chromium-command-line-switches/).

      - `channel` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Browser distribution channel. Supported values are "chrome", "chrome-beta", "chrome-dev", "chrome-canary", "msedge", "msedge-beta", "msedge-dev", "msedge-canary". Read more about using [Google Chrome and Microsoft Edge](../browsers#google-chrome--microsoft-edge).

      - `chromiumSandbox` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Enable Chromium sandboxing. Defaults to `false`.

      - `devtools` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > Use [debugging tools](../debug) instead.

        **Chromium-only** Whether to auto-open a Developer Tools panel for each tab. If this option is `true`, the `headless` option will be set `false`.

      - `downloadsPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        If specified, accepted downloads are downloaded into this directory. Otherwise, temporary directory is created and is deleted when browser is closed. In either case, the downloads are deleted when the browser context they were created in is closed.

      - `env`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> *(optional)*

        Specify environment variables that will be visible to the browser. Defaults to `process.env`.

      - `executablePath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Path to a browser executable to run instead of the bundled one. If `executablePath` is a relative path, then it is resolved relative to the current working directory. Note that Playwright only works with the bundled Chromium, Firefox or WebKit, use at your own risk.

      - `firefoxUserPrefs`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> *(optional)*

        Firefox user preferences. Learn more about the Firefox user preferences at [`about:config`](https://support.mozilla.org/en-US/kb/about-config-editor-firefox).

      - `handleSIGHUP` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Close the browser process on SIGHUP. Defaults to `true`.

      - `handleSIGINT` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Close the browser process on Ctrl-C. Defaults to `true`.

      - `handleSIGTERM` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Close the browser process on SIGTERM. Defaults to `true`.

      - `headless` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to run browser in headless mode. More details for [Chromium](https://developers.google.com/web/updates/2017/04/headless-chrome) and [Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode). Defaults to `true` unless the `devtools` option is `true`.

      - `ignoreDefaultArgs`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        If `true`, Playwright does not pass its own configurations args and only uses the ones from `args`. If an array is given, then filters out the given default arguments. Dangerous option; use with care. Defaults to `false`.

      - `logger` [Logger](class-logger "Logger") *(optional)*

        Logger sink for Playwright logging.

      - `proxy` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `server` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.

        - `bypass` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.

        - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Optional username to use if HTTP proxy requires authentication.

        - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Optional password to use if HTTP proxy requires authentication.

        Network proxy settings.

      - `slowMo` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds to wait for the browser instance to start. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.

      - `tracesDir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        If specified, traces are saved into this directory.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Browser](class-browser "Browser")\>

    &nbsp;
- name: browserType.launchPersistentContext
  id: api/class-browsertype#browser-type-launch-persistent-context
  summary: Returns the persistent browser context instance
  belongs_to: BrowserType
  description: |-
    ### launchPersistentContext[​](#browser-type-launch-persistent-context "Direct link to launchPersistentContext")

    Added before v1.9

    Returns the persistent browser context instance.

    Launches browser that uses persistent storage located at `userDataDir` and returns the only context. Closing this context will automatically close the browser.

    **Usage**

    ``` javascript
    await browserType.launchPersistentContext(userDataDir);
    await browserType.launchPersistentContext(userDataDir, options);
    ```

    **Arguments**

    - `userDataDir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Path to a User Data Directory, which stores browser session data like cookies and local storage. More details for [Chromium](https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md#introduction) and [Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Command_Line_Options#User_Profile). Note that Chromium's user data directory is the **parent** directory of the "Profile Path" seen at `chrome://version`. Pass an empty string to use a temporary directory instead.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `acceptDownloads` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.

      - `args`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        > warning
        >
        > Use custom browser args at your own risk, as some of them may break Playwright functionality.

        Additional arguments to pass to the browser instance. The list of Chromium flags can be found [here](https://peter.sh/experiments/chromium-command-line-switches/).

      - `baseURL` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        When using [page.goto()](class-page#page-goto), [page.route()](class-page#page-route), [page.waitForURL()](class-page#page-wait-for-url), [page.waitForRequest()](class-page#page-wait-for-request), or [page.waitForResponse()](class-page#page-wait-for-response) it takes the base URL in consideration by using the [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL. Unset by default. Examples:

        - baseURL: `http://localhost:3000` and navigating to `/bar.html` results in `http://localhost:3000/bar.html`
        - baseURL: `http://localhost:3000/foo/` and navigating to `./bar.html` results in `http://localhost:3000/foo/bar.html`
        - baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in `http://localhost:3000/bar.html`

      - `bypassCSP` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Toggles bypassing page's Content-Security-Policy. Defaults to `false`.

      - `channel` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Browser distribution channel. Supported values are "chrome", "chrome-beta", "chrome-dev", "chrome-canary", "msedge", "msedge-beta", "msedge-dev", "msedge-canary". Read more about using [Google Chrome and Microsoft Edge](../browsers#google-chrome--microsoft-edge).

      - `chromiumSandbox` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Enable Chromium sandboxing. Defaults to `false`.

      - `clientCertificates`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> *(optional)*

        - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          Exact origin that the certificate is valid for. Origin includes `https` protocol, a hostname and optionally a port.

        - `certPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Path to the file with the certificate in PEM format.

        - `keyPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Path to the file with the private key in PEM format.

        - `pfxPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Path to the PFX or PKCS12 encoded private key and certificate chain.

        - `passphrase` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Passphrase for the private key (PEM or PFX).

        TLS Client Authentication allows the server to request a client certificate and verify it.

        **Details**

        An array of client certificates to be used. Each certificate object must have both `certPath` and `keyPath` or a single `pfxPath` to load the client certificate. Optionally, `passphrase` property should be provided if the certficiate is encrypted. The `origin` property should be provided with an exact match to the request origin that the certificate is valid for.

        > note
        >
        > Using Client Certificates in combination with Proxy Servers is not supported.

        > note
        >
        > When using WebKit on macOS, accessing `localhost` will not pick up client certificates. You can make it work by replacing `localhost` with `local.playwright`.

      - `colorScheme`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "light" \| "dark" \| "no-preference" *(optional)*

        Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'light'`.

      - `deviceScaleFactor` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Specify device scale factor (can be thought of as dpr). Defaults to `1`. Learn more about [emulating devices with device scale factor](../emulation#devices).

      - `devtools` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > Use [debugging tools](../debug) instead.

        **Chromium-only** Whether to auto-open a Developer Tools panel for each tab. If this option is `true`, the `headless` option will be set `false`.

      - `downloadsPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        If specified, accepted downloads are downloaded into this directory. Otherwise, temporary directory is created and is deleted when browser is closed. In either case, the downloads are deleted when the browser context they were created in is closed.

      - `env`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> *(optional)*

        Specify environment variables that will be visible to the browser. Defaults to `process.env`.

      - `executablePath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Path to a browser executable to run instead of the bundled one. If `executablePath` is a relative path, then it is resolved relative to the current working directory. Note that Playwright only works with the bundled Chromium, Firefox or WebKit, use at your own risk.

      - `extraHTTPHeaders`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        An object containing additional HTTP headers to be sent with every request. Defaults to none.

      - `firefoxUserPrefs`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> *(optional)*

        Firefox user preferences. Learn more about the Firefox user preferences at [`about:config`](https://support.mozilla.org/en-US/kb/about-config-editor-firefox).

      - `forcedColors`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "active" \| "none" *(optional)*

        Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'none'`.

      - `geolocation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `latitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          Latitude between -90 and 90.

        - `longitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          Longitude between -180 and 180.

        - `accuracy` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

          Non-negative accuracy value. Defaults to `0`.

      - `handleSIGHUP` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Close the browser process on SIGHUP. Defaults to `true`.

      - `handleSIGINT` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Close the browser process on Ctrl-C. Defaults to `true`.

      - `handleSIGTERM` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Close the browser process on SIGTERM. Defaults to `true`.

      - `hasTouch` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Specifies if viewport supports touch events. Defaults to false. Learn more about [mobile emulation](../emulation#devices).

      - `headless` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to run browser in headless mode. More details for [Chromium](https://developers.google.com/web/updates/2017/04/headless-chrome) and [Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode). Defaults to `true` unless the `devtools` option is `true`.

      - `httpCredentials` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Restrain sending http credentials on specific origin (scheme://host:port).

        - `send` "unauthorized" \| "always" *(optional)*

          This option only applies to the requests sent from corresponding [APIRequestContext](class-apirequestcontext "APIRequestContext") and does not affect requests sent from the browser. `'always'` - `Authorization` header with basic authentication credentials will be sent with the each API request. `'unauthorized` - the credentials are only sent when 401 (Unauthorized) response with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.

        Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no origin is specified, the username and password are sent to any servers upon unauthorized responses.

      - `ignoreDefaultArgs`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        If `true`, Playwright does not pass its own configurations args and only uses the ones from `args`. If an array is given, then filters out the given default arguments. Dangerous option; use with care. Defaults to `false`.

      - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

      - `isMobile` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether the `meta viewport` tag is taken into account and touch events are enabled. isMobile is a part of device, so you don't actually need to set it manually. Defaults to `false` and is not supported in Firefox. Learn more about [mobile emulation](../emulation#ismobile).

      - `javaScriptEnabled` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether or not to enable JavaScript in the context. Defaults to `true`. Learn more about [disabling JavaScript](../emulation#javascript-enabled).

      - `locale` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default locale. Learn more about emulation in our [emulation guide](../emulation#locale--timezone).

      - `logger` [Logger](class-logger "Logger") *(optional)*

        Logger sink for Playwright logging.

      - `offline` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to emulate network being offline. Defaults to `false`. Learn more about [network emulation](../emulation#offline).

      - `permissions`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        A list of permissions to grant to all pages in this context. See [browserContext.grantPermissions()](class-browsercontext#browser-context-grant-permissions) for more details. Defaults to none.

      - `proxy` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `server` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.

        - `bypass` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.

        - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Optional username to use if HTTP proxy requires authentication.

        - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Optional password to use if HTTP proxy requires authentication.

        Network proxy settings.

      - `recordHar` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `omitContent` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

          Optional setting to control whether to omit request content from the HAR. Defaults to `false`. Deprecated, use `content` policy instead.

        - `content` "omit" \| "embed" \| "attach" *(optional)*

          Optional setting to control resource content management. If `omit` is specified, content is not persisted. If `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is specified, content is stored inline the HAR file as per HAR specification. Defaults to `attach` for `.zip` output files and to `embed` for all other file extensions.

        - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          Path on the filesystem to write the HAR file to. If the file name ends with `.zip`, `content: 'attach'` is used by default.

        - `mode` "full" \| "minimal" *(optional)*

          When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page, cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `full`.

        - `urlFilter`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") *(optional)*

          A glob or regex pattern to filter requests that are stored in the HAR. When a `baseURL` via the context options was provided and the passed URL is a path, it gets merged via the [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor. Defaults to none.

        Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file. If not specified, the HAR is not recorded. Make sure to await [browserContext.close()](class-browsercontext#browser-context-close) for the HAR to be saved.

      - `recordVideo` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `dir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          Path to the directory to put videos into.

        - `size` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

          - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

            Video frame width.

          - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

            Video frame height.

          Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.

        Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded. Make sure to await [browserContext.close()](class-browsercontext#browser-context-close) for videos to be saved.

      - `reducedMotion`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "reduce" \| "no-preference" *(optional)*

        Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'no-preference'`.

      - `screen` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          page width in pixels.

        - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          page height in pixels.

        Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the `viewport` is set.

      - `serviceWorkers` "allow" \| "block" *(optional)*

        Whether to allow sites to register Service workers. Defaults to `'allow'`.

        - `'allow'`: [Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) can be registered.
        - `'block'`: Playwright will block all registration of Service Workers.

      - `slowMo` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on.

      - `strictSelectors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        If set to true, enables strict selectors mode for this context. In the strict selectors mode all operations on selectors that imply single target DOM element will throw when more than one element matches the selector. This option does not affect any Locator APIs (Locators are always strict). Defaults to `false`. See [Locator](class-locator "Locator") to learn more about the strict mode.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds to wait for the browser instance to start. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.

      - `timezoneId` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Changes the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1) for a list of supported timezone IDs. Defaults to the system timezone.

      - `tracesDir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        If specified, traces are saved into this directory.

      - `userAgent` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Specific user agent to use in this context.

      - `videoSize` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        > Deprecated
        >
        > Use `recordVideo` instead.

        - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          Video frame width.

        - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          Video frame height.

      - `videosPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        > Deprecated
        >
        > Use `recordVideo` instead.

      - `viewport`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          page width in pixels.

        - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          page height in pixels.

        Emulates consistent viewport for each page. Defaults to an 1280x720 viewport. Use `null` to disable the consistent viewport emulation. Learn more about [viewport emulation](../emulation#viewport).

        > note
        >
        > The `null` value opts out from the default presets, makes viewport depend on the host window size defined by the operating system. It makes the execution of the tests non-deterministic.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[BrowserContext](class-browsercontext "BrowserContext")\>

    &nbsp;
- name: browserType.launchServer
  id: api/class-browsertype#browser-type-launch-server
  summary: Returns the browser app instance
  belongs_to: BrowserType
  description: |-
    ### launchServer[​](#browser-type-launch-server "Direct link to launchServer")

    Added before v1.9

    Returns the browser app instance. You can connect to it via [browserType.connect()](class-browsertype#browser-type-connect), which requires the major/minor client/server version to match (1.2.3 → is compatible with 1.2.x).

    **Usage**

    Launches browser server that client can connect to. An example of launching a browser executable and connecting to it later:

    ``` javascript
    const { chromium } = require('playwright');  // Or 'webkit' or 'firefox'.

    (async () => {
      const browserServer = await chromium.launchServer();
      const wsEndpoint = browserServer.wsEndpoint();
      // Use web socket endpoint later to establish a connection.
      const browser = await chromium.connect(wsEndpoint);
      // Close browser instance.
      await browserServer.close();
    })();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `args`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        > warning
        >
        > Use custom browser args at your own risk, as some of them may break Playwright functionality.

        Additional arguments to pass to the browser instance. The list of Chromium flags can be found [here](https://peter.sh/experiments/chromium-command-line-switches/).

      - `channel` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Browser distribution channel. Supported values are "chrome", "chrome-beta", "chrome-dev", "chrome-canary", "msedge", "msedge-beta", "msedge-dev", "msedge-canary". Read more about using [Google Chrome and Microsoft Edge](../browsers#google-chrome--microsoft-edge).

      - `chromiumSandbox` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Enable Chromium sandboxing. Defaults to `false`.

      - `devtools` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > Use [debugging tools](../debug) instead.

        **Chromium-only** Whether to auto-open a Developer Tools panel for each tab. If this option is `true`, the `headless` option will be set `false`.

      - `downloadsPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        If specified, accepted downloads are downloaded into this directory. Otherwise, temporary directory is created and is deleted when browser is closed. In either case, the downloads are deleted when the browser context they were created in is closed.

      - `env`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> *(optional)*

        Specify environment variables that will be visible to the browser. Defaults to `process.env`.

      - `executablePath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Path to a browser executable to run instead of the bundled one. If `executablePath` is a relative path, then it is resolved relative to the current working directory. Note that Playwright only works with the bundled Chromium, Firefox or WebKit, use at your own risk.

      - `firefoxUserPrefs`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\> *(optional)*

        Firefox user preferences. Learn more about the Firefox user preferences at [`about:config`](https://support.mozilla.org/en-US/kb/about-config-editor-firefox).

      - `handleSIGHUP` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Close the browser process on SIGHUP. Defaults to `true`.

      - `handleSIGINT` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Close the browser process on Ctrl-C. Defaults to `true`.

      - `handleSIGTERM` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Close the browser process on SIGTERM. Defaults to `true`.

      - `headless` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to run browser in headless mode. More details for [Chromium](https://developers.google.com/web/updates/2017/04/headless-chrome) and [Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode). Defaults to `true` unless the `devtools` option is `true`.

      - `host` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Host to use for the web socket. It is optional and if it is omitted, the server will accept connections on the unspecified IPv6 address (::) when IPv6 is available, or the unspecified IPv4 address (0.0.0.0) otherwise. Consider hardening it with picking a specific interface.

      - `ignoreDefaultArgs`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        If `true`, Playwright does not pass its own configurations args and only uses the ones from `args`. If an array is given, then filters out the given default arguments. Dangerous option; use with care. Defaults to `false`.

      - `logger` [Logger](class-logger "Logger") *(optional)*

        Logger sink for Playwright logging.

      - `port` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Port to use for the web socket. Defaults to 0 that picks any available port.

      - `proxy` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `server` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.

        - `bypass` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.

        - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Optional username to use if HTTP proxy requires authentication.

        - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Optional password to use if HTTP proxy requires authentication.

        Network proxy settings.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds to wait for the browser instance to start. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.

      - `tracesDir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        If specified, traces are saved into this directory.

      - `wsPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Path at which to serve the Browser Server. For security, this defaults to an unguessable string.

        > warning
        >
        > Any process or web page (including those running in Playwright) with knowledge of the `wsPath` can take control of the OS user. For this reason, you should use an unguessable token when using this option.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[BrowserServer](class-browserserver "BrowserServer")\>

    &nbsp;
- name: browserType.name
  id: api/class-browsertype#browser-type-name
  summary: Returns browser name
  belongs_to: BrowserType
  description: "### name[​](#browser-type-name \"Direct link to name\")\n\nAdded before v1.9\n\nReturns browser name. For example: `'chromium'`, `'webkit'` or `'firefox'`.\n\n**Usage**\n\n``` javascript\nbrowserType.name();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-browsertype](https://playwright.dev/docs/api/class-browsertype)"
- name: Canary releases
  id: canary-releases
  summary: Playwright for Node.js has a canary releases system
  description: "# Canary releases\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright for Node.js has a canary releases system.\n\nIt permits you to **test new unreleased features** instead of waiting for a full release. They get released daily on the `next` NPM tag of Playwright.\n\nIt is a good way to **give feedback to maintainers**, ensuring the newly implemented feature works as intended.\n\n> note\n>\n> Using a canary release in production might seem risky, but in practice, it's not. A canary release passes all automated tests and is used to test e.g. the HTML report, Trace Viewer, or Playwright Inspector with end-to-end tests.\n\n``` javascript\nnpm install -D @playwright/test@next\n```\n\n## Next npm Dist Tag[​](#next-npm-dist-tag \"Direct link to Next npm Dist Tag\")\n\nFor any code-related commit on `main`, the continuous integration will publish a daily canary release under the `@next` npm dist tag.\n\nYou can see on [npm](https://www.npmjs.com/package/@playwright/test?activeTab=versions) the current dist tags:\n\n- `latest`: stable releases\n- `next`: next releases, published daily\n- `beta`: after a release-branch was cut, usually a week before a stable release each commit gets published under this tag\n\n## Using a Canary Release[​](#using-a-canary-release \"Direct link to Using a Canary Release\")\n\n``` javascript\nnpm install -D @playwright/test@next\n```\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\nThe stable and the `next` documentation is published on [playwright.dev](https://playwright.dev). To see the `next` documentation, press Shift on the keyboard `5` times.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/canary-releases](https://playwright.dev/docs/canary-releases)"
- name: CDPSession
  id: api/class-cdpsession
  summary: Detaches the CDPSession from the target
  description: "# CDPSession\n\n- extends: [EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter \"EventEmitter\")\n\nThe `CDPSession` instances are used to talk raw Chrome Devtools Protocol:\n\n- protocol methods can be called with `session.send` method.\n- protocol events can be subscribed to with `session.on` method.\n\nUseful links:\n\n- Documentation on DevTools Protocol can be found here: [DevTools Protocol Viewer](https://chromedevtools.github.io/devtools-protocol/).\n- Getting Started with DevTools Protocol: [https://github.com/aslushnikov/getting-started-with-cdp/blob/master/README.md](https://github.com/aslushnikov/getting-started-with-cdp/blob/master/README.md)\n\n``` javascript\nconst client = await page.context().newCDPSession(page);\nawait client.send('Animation.enable');\nclient.on('Animation.animationCreated', () => console.log('Animation created!'));\nconst response = await client.send('Animation.getPlaybackRate');\nconsole.log('playback rate is ' + response.playbackRate);\nawait client.send('Animation.setPlaybackRate', {\n  playbackRate: response.playbackRate / 2\n});\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### detach[​](#cdp-session-detach \"Direct link to detach\")\n\nAdded before v1.9\n\nDetaches the CDPSession from the target. Once detached, the CDPSession object won't emit any events and can't be used to send messages.\n\n**Usage**\n\n``` javascript\nawait cdpSession.detach();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### send[​](#cdp-session-send \"Direct link to send\")\n\nAdded before v1.9\n\n**Usage**\n\n``` javascript\nawait cdpSession.send(method);\nawait cdpSession.send(method, params);\n```\n\n**Arguments**\n\n- `method` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Protocol method name.\n\n- `params` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  Optional method parameters.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-cdpsession](https://playwright.dev/docs/api/class-cdpsession)"
- name: cdpSession.detach
  id: api/class-cdpsession#cdp-session-detach
  summary: Detaches the CDPSession from the target
  belongs_to: CDPSession
  description: |-
    ### detach[​](#cdp-session-detach "Direct link to detach")

    Added before v1.9

    Detaches the CDPSession from the target. Once detached, the CDPSession object won't emit any events and can't be used to send messages.

    **Usage**

    ``` javascript
    await cdpSession.detach();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>
- name: cdpSession.send
  id: api/class-cdpsession#cdp-session-send
  summary: Protocol method name
  belongs_to: CDPSession
  description: "### send[​](#cdp-session-send \"Direct link to send\")\n\nAdded before v1.9\n\n**Usage**\n\n``` javascript\nawait cdpSession.send(method);\nawait cdpSession.send(method, params);\n```\n\n**Arguments**\n\n- `method` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Protocol method name.\n\n- `params` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  Optional method parameters.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-cdpsession](https://playwright.dev/docs/api/class-cdpsession)"
- name: Chrome extensions
  id: chrome-extensions
  summary: Extensions only work in Chrome / Chromium launched with a persistent context
  description: "# Chrome extensions\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\n> note\n>\n> Extensions only work in Chrome / Chromium launched with a persistent context. Use custom browser args at your own risk, as some of them may break Playwright functionality.\n\nThe following is code for getting a handle to the [background page](https://developer.chrome.com/extensions/background_pages) of a [Manifest v2](https://developer.chrome.com/docs/extensions/mv2/) extension whose source is located in `./my-extension`:\n\n``` javascript\nconst { chromium } = require('playwright');\n\n(async () => {\n  const pathToExtension = require('path').join(__dirname, 'my-extension');\n  const userDataDir = '/tmp/test-user-data-dir';\n  const browserContext = await chromium.launchPersistentContext(userDataDir, {\n    headless: false,\n    args: [\n      `--disable-extensions-except=${pathToExtension}`,\n      `--load-extension=${pathToExtension}`\n    ]\n  });\n  let [backgroundPage] = browserContext.backgroundPages();\n  if (!backgroundPage)\n    backgroundPage = await browserContext.waitForEvent('backgroundpage');\n\n  // Test the background page as you would any other page.\n  await browserContext.close();\n})();\n```\n\n## Testing[​](#testing \"Direct link to Testing\")\n\nTo have the extension loaded when running tests you can use a test fixture to set the context. You can also dynamically retrieve the extension id and use it to load and test the popup page for example.\n\nFirst, add fixtures that will load the extension:\n\n``` javascript\nimport { test as base, chromium, type BrowserContext } from '@playwright/test';\nimport path from 'path';\n\nexport const test = base.extend<{\n  context: BrowserContext;\n  extensionId: string;\n}>({\n  context: async ({ }, use) => {\n    const pathToExtension = path.join(__dirname, 'my-extension');\n    const context = await chromium.launchPersistentContext('', {\n      headless: false,\n      args: [\n        `--disable-extensions-except=${pathToExtension}`,\n        `--load-extension=${pathToExtension}`,\n      ],\n    });\n    await use(context);\n    await context.close();\n  },\n  extensionId: async ({ context }, use) => {\n    /*\n    // for manifest v2:\n    let [background] = context.backgroundPages()\n    if (!background)\n      background = await context.waitForEvent('backgroundpage')\n    */\n\n    // for manifest v3:\n    let [background] = context.serviceWorkers();\n    if (!background)\n      background = await context.waitForEvent('serviceworker');\n\n    const extensionId = background.url().split('/')[2];\n    await use(extensionId);\n  },\n});\nexport const expect = test.expect;\n```\n\nThen use these fixtures in a test:\n\n``` javascript\nimport { test, expect } from './fixtures';\n\ntest('example test', async ({ page }) => {\n  await page.goto('https://example.com');\n  await expect(page.locator('body')).toHaveText('Changed by my-extension');\n});\n\ntest('popup page', async ({ page, extensionId }) => {\n  await page.goto(`chrome-extension://${extensionId}/popup.html`);\n  await expect(page.locator('body')).toHaveText('my-extension popup');\n});\n```\n\n## Headless mode[​](#headless-mode \"Direct link to Headless mode\")\n\n> danger\n>\n> `headless=new` mode is not officially supported by Playwright and might result in unexpected behavior.\n\nBy default, Chrome's headless mode in Playwright does not support Chrome extensions. To overcome this limitation, you can run Chrome's persistent context with a new headless mode by using the following code:\n\n``` javascript\n// ...\n\nconst pathToExtension = path.join(__dirname, 'my-extension');\nconst context = await chromium.launchPersistentContext('', {\n  headless: false,\n  args: [\n    `--headless=new`,\n    `--disable-extensions-except=${pathToExtension}`,\n    `--load-extension=${pathToExtension}`,\n  ],\n});\n// ...\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/chrome-extensions](https://playwright.dev/docs/chrome-extensions)"
- name: CI GitHub Actions
  id: ci-intro
  summary: Playwright tests can be run on any CI provider
  description: "# CI GitHub Actions\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright tests can be run on any CI provider. In this section we will cover running tests on GitHub using GitHub actions. If you would like to see how to configure other CI providers check out our detailed [doc on Continuous Integration](ci).\n\nWhen [installing Playwright](index) using the [VS Code extension](getting-started-vscode) or with `npm init playwright@latest` you are given the option to add a [GitHub Actions](https://docs.github.com/en/actions) workflow. This creates a `playwright.yml` file inside a `.github/workflows` folder containing everything you need so that your tests run on each push and pull request into the main/master branch.\n\n#### You will learn[​](#you-will-learn \"Direct link to You will learn\")\n\n- [How to run tests on push/pull_request](ci-intro#on-pushpull_request)\n- [How to view test logs](ci-intro#viewing-test-logs)\n- [How to view the HTML report](ci-intro#viewing-the-html-report)\n- [How to view the trace](ci-intro#viewing-the-trace)\n- [How to publish report on the web](ci-intro#publishing-report-on-the-web)\n\n## Setting up GitHub Actions[​](#setting-up-github-actions \"Direct link to Setting up GitHub Actions\")\n\n### On push/pull_request[​](#on-pushpull_request \"Direct link to On push/pull_request\")\n\nTests will run on push or pull request on branches main/master. The [workflow](https://docs.github.com/en/actions/using-workflows/about-workflows) will install all dependencies, install Playwright and then run the tests. It will also create the HTML report.\n\n``` javascript\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-node@v4\n      with:\n        node-version: 18\n    - name: Install dependencies\n      run: npm ci\n    - name: Install Playwright Browsers\n      run: npx playwright install --with-deps\n    - name: Run Playwright tests\n      run: npx playwright test\n    - uses: actions/upload-artifact@v4\n      if: ${{ !cancelled() }}\n      with:\n        name: playwright-report\n        path: playwright-report/\n        retention-days: 30\n```\n\n### On push/pull_request (sharded)[​](#on-pushpull_request-sharded \"Direct link to On push/pull_request (sharded)\")\n\nGitHub Actions supports [sharding tests between multiple jobs](https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs). Check out our [sharding doc](test-sharding) to learn more about sharding and to see a [GitHub actions example](test-sharding#github-actions-example) of how to configure a job to run your tests on multiple machines as well as how to merge the HTML reports.\n\n### Via Containers[​](#via-containers \"Direct link to Via Containers\")\n\nGitHub Actions support [running jobs in a container](https://docs.github.com/en/actions/using-jobs/running-jobs-in-a-container) by using the [`jobs.<job_id>.container`](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idcontainer) option. This is useful to not pollute the host environment with dependencies and to have a consistent environment for e.g. screenshots/visual regression testing across different operating systems.\n\n``` javascript\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  playwright:\n    name: 'Playwright Tests'\n    runs-on: ubuntu-latest\n    container:\n      image: mcr.microsoft.com/playwright:v1.46.0-jammy\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 18\n      - name: Install dependencies\n        run: npm ci\n      - name: Run your tests\n        run: npx playwright test\n        env:\n          HOME: /root\n```\n\n### On deployment[​](#on-deployment \"Direct link to On deployment\")\n\nThis will start the tests after a [GitHub Deployment](https://developer.github.com/v3/repos/deployments/) went into the `success` state. Services like Vercel use this pattern so you can run your end-to-end tests on their deployed environment.\n\n``` javascript\nname: Playwright Tests\non:\n  deployment_status:\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    if: github.event.deployment_status.state == 'success'\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-node@v4\n      with:\n        node-version: 18\n    - name: Install dependencies\n      run: npm ci\n    - name: Install Playwright\n      run: npx playwright install --with-deps\n    - name: Run Playwright tests\n      run: npx playwright test\n      env:\n        PLAYWRIGHT_TEST_BASE_URL: ${{ github.event.deployment_status.target_url }}\n```\n\n### Fail-Fast[​](#fail-fast \"Direct link to Fail-Fast\")\n\nEven with sharding enabled, large test suites can take very long to execute. Running changed test files first on PRs will give you a faster feedback loop and use less CI resources.\n\n``` javascript\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-node@v4\n      with:\n        node-version: 18\n    - name: Install dependencies\n      run: npm ci\n    - name: Install Playwright Browsers\n      run: npx playwright install --with-deps\n    - name: Run changed Playwright tests\n      run: npx playwright test --only-changed=$GITHUB_BASE_REF\n      if: github.event_name == 'pull_request'\n    - name: Run Playwright tests\n      run: npx playwright test\n    - uses: actions/upload-artifact@v4\n      if: ${{ !cancelled() }}\n      with:\n        name: playwright-report\n        path: playwright-report/\n        retention-days: 30\n```\n\n## Create a Repo and Push to GitHub[​](#create-a-repo-and-push-to-github \"Direct link to Create a Repo and Push to GitHub\")\n\nOnce you have your [GitHub actions workflow](#setting-up-github-actions) setup then all you need to do is [Create a repo on GitHub](https://docs.github.com/en/get-started/quickstart/create-a-repo) or push your code to an existing repository. Follow the instructions on GitHub and don't forget to [initialize a git repository](https://github.com/git-guides/git-init) using the `git init` command so you can [add](https://github.com/git-guides/git-add), [commit](https://github.com/git-guides/git-commit) and [push](https://github.com/git-guides/git-push) your code.\n\n## Opening the Workflows[​](#opening-the-workflows \"Direct link to Opening the Workflows\")\n\nClick on the **Actions** tab to see the workflows. Here you will see if your tests have passed or failed.\n\n###### [​](#-1 \"Direct link to -1\")\n\n## Viewing Test Logs[​](#viewing-test-logs \"Direct link to Viewing Test Logs\")\n\nClicking on the workflow run will show you the all the actions that GitHub performed and clicking on **Run Playwright tests** will show the error messages, what was expected and what was received as well as the call log.\n\n###### [​](#-2 \"Direct link to -2\")\n\n## HTML Report[​](#html-report \"Direct link to HTML Report\")\n\nThe HTML Report shows you a full report of your tests. You can filter the report by browsers, passed tests, failed tests, skipped tests and flaky tests.\n\n### Downloading the HTML Report[​](#downloading-the-html-report \"Direct link to Downloading the HTML Report\")\n\nIn the Artifacts section click on the **playwright-report** to download your report in the format of a zip file.\n\n### Viewing the HTML Report[​](#viewing-the-html-report \"Direct link to Viewing the HTML Report\")\n\nLocally opening the report will not work as expected as you need a web server in order for everything to work correctly. First, extract the zip, preferably in a folder that already has Playwright installed. Using the command line change into the directory where the report is and use `npx playwright show-report` followed by the name of the extracted folder. This will serve up the report and enable you to view it in your browser.\n\n``` javascript\nnpx playwright show-report name-of-my-extracted-playwright-report\n```\n\nTo learn more about reports check out our detailed guide on [HTML Reporter](test-reporters#html-reporter)\n\n## Viewing the Trace[​](#viewing-the-trace \"Direct link to Viewing the Trace\")\n\nOnce you have served the report using `npx playwright show-report`, click on the trace icon next to the test's file name as seen in the image above. You can then view the trace of your tests and inspect each action to try to find out why the tests are failing.\n\n## Publishing report on the web[​](#publishing-report-on-the-web \"Direct link to Publishing report on the web\")\n\nDownloading the HTML report as a zip file is not very convenient. However, we can utilize Azure Storage's static websites hosting capabilities to easily and efficiently serve HTML reports on the Internet, requiring minimal configuration.\n\n1.  Create an [Azure Storage account](https://learn.microsoft.com/en-us/azure/storage/common/storage-account-create).\n\n2.  Enable [Static website hosting](https://learn.microsoft.com/en-us/azure/storage/blobs/storage-blob-static-website-how-to#enable-static-website-hosting) for the storage account.\n\n3.  Create a Service Principal in Azure and grant it access to Azure Blob storage. Upon successful execution, the command will display the credentials which will be used in the next step.\n\n    ``` javascript\n    az ad sp create-for-rbac --name \"github-actions\" --role \"Storage Blob Data Contributor\" --scopes /subscriptions/<SUBSCRIPTION_ID>/resourceGroups/<RESOURCE_GROUP_NAME>/providers/Microsoft.Storage/storageAccounts/<STORAGE_ACCOUNT_NAME>\n    ```\n\n4.  Use the credentials from the previous step to set up encrypted secrets in your GitHub repository. Go to your repository's settings, under [GitHub Actions secrets](https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository), and add the following secrets:\n\n    - `AZCOPY_SPA_APPLICATION_ID`\n    - `AZCOPY_SPA_CLIENT_SECRET`\n    - `AZCOPY_TENANT_ID`\n\n    For a detailed guide on how to authorize a service principal using a client secret, refer to [this Microsoft documentation](https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azcopy-authorize-azure-active-directory#authorize-a-service-principal-by-using-a-client-secret-1).\n\n5.  Add a step that uploads the HTML report to Azure Storage.\n\n    ``` javascript\n    ...\n        - name: Upload HTML report to Azure\n          shell: bash\n          run: |\n            REPORT_DIR='run-${{ github.run_id }}-${{ github.run_attempt }}'\n            azcopy cp --recursive \"./playwright-report/*\" \"https://<STORAGE_ACCOUNT_NAME>.blob.core.windows.net/\\$web/$REPORT_DIR\"\n            echo \"::notice title=HTML report url::https://<STORAGE_ACCOUNT_NAME>.z1.web.core.windows.net/$REPORT_DIR/index.html\"\n          env:\n            AZCOPY_AUTO_LOGIN_TYPE: SPN\n            AZCOPY_SPA_APPLICATION_ID: '${{ secrets.AZCOPY_SPA_APPLICATION_ID }}'\n            AZCOPY_SPA_CLIENT_SECRET: '${{ secrets.AZCOPY_SPA_CLIENT_SECRET }}'\n            AZCOPY_TENANT_ID: '${{ secrets.AZCOPY_TENANT_ID }}'\n    ```\n\nThe contents of the `$web` storage container can be accessed from a browser by using the [public URL](https://learn.microsoft.com/en-us/azure/storage/blobs/storage-blob-static-website-how-to?tabs=azure-portal#portal-find-url) of the website.\n\n> note\n>\n> This step will not work for pull requests created from a forked repository because such workflow [doesn't have access to the secrets](https://docs.github.com/en/actions/security-guides/encrypted-secrets#using-encrypted-secrets-in-a-workflow).\n\n## What's Next[​](#whats-next \"Direct link to What's Next\")\n\n- [Learn how to use Locators](locators)\n- [Learn how to perform Actions](input)\n- [Learn how to write Assertions](test-assertions)\n- [Learn more about the Trace Viewer](trace-viewer)\n- [Learn more about running tests on other CI providers](ci)\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/ci-intro](https://playwright.dev/docs/ci-intro)"
- name: Clock
  id: api/class-clock
  summary: Accurately simulating time-dependent behavior is essential for verifying the correctness of applications
  description: "# Clock\n\nAccurately simulating time-dependent behavior is essential for verifying the correctness of applications. Learn more about [clock emulation](../clock).\n\nNote that clock is installed for the entire [BrowserContext](class-browsercontext \"BrowserContext\"), so the time in all the pages and iframes is controlled by the same clock.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### fastForward[​](#clock-fast-forward \"Direct link to fastForward\")\n\nAdvance the clock by jumping forward in time. Only fires due timers at most once. This is equivalent to user closing the laptop lid for a while and reopening it later, after given time.\n\n**Usage**\n\n``` javascript\nawait page.clock.fastForward(1000);\nawait page.clock.fastForward('30:00');\n```\n\n**Arguments**\n\n- `ticks` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Time may be the number of milliseconds to advance the clock by or a human-readable string. Valid string formats are \"08\" for eight seconds, \"01:00\" for one minute and \"02:34:10\" for two hours, 34 minutes and ten seconds.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### install[​](#clock-install \"Direct link to install\")\n\nInstall fake implementations for the following time-related functions:\n\n- `Date`\n- `setTimeout`\n- `clearTimeout`\n- `setInterval`\n- `clearInterval`\n- `requestAnimationFrame`\n- `cancelAnimationFrame`\n- `requestIdleCallback`\n- `cancelIdleCallback`\n- `performance`\n\nFake timers are used to manually control the flow of time in tests. They allow you to advance time, fire timers, and control the behavior of time-dependent functions. See [clock.runFor()](class-clock#clock-run-for) and [clock.fastForward()](class-clock#clock-fast-forward) for more information.\n\n**Usage**\n\n``` javascript\nawait clock.install();\nawait clock.install(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `time` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| \\[Date\\] *(optional)*\n\n    Time to initialize with, current system time by default.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### pauseAt[​](#clock-pause-at \"Direct link to pauseAt\")\n\nAdvance the clock by jumping forward in time and pause the time. Once this method is called, no timers are fired unless [clock.runFor()](class-clock#clock-run-for), [clock.fastForward()](class-clock#clock-fast-forward), [clock.pauseAt()](class-clock#clock-pause-at) or [clock.resume()](class-clock#clock-resume) is called.\n\nOnly fires due timers at most once. This is equivalent to user closing the laptop lid for a while and reopening it at the specified time and pausing.\n\n**Usage**\n\n``` javascript\nawait page.clock.pauseAt(new Date('2020-02-02'));\nawait page.clock.pauseAt('2020-02-02');\n```\n\n**Arguments**\n\n- `time` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| \\[Date\\]\n\n  Time to pause at.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### resume[​](#clock-resume \"Direct link to resume\")\n\nResumes timers. Once this method is called, time resumes flowing, timers are fired as usual.\n\n**Usage**\n\n``` javascript\nawait clock.resume();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### runFor[​](#clock-run-for \"Direct link to runFor\")\n\nAdvance the clock, firing all the time-related callbacks.\n\n**Usage**\n\n``` javascript\nawait page.clock.runFor(1000);\nawait page.clock.runFor('30:00');\n```\n\n**Arguments**\n\n- `ticks` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Time may be the number of milliseconds to advance the clock by or a human-readable string. Valid string formats are \"08\" for eight seconds, \"01:00\" for one minute and \"02:34:10\" for two hours, 34 minutes and ten seconds.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### setFixedTime[​](#clock-set-fixed-time \"Direct link to setFixedTime\")\n\nMakes `Date.now` and `new Date()` return fixed fake time at all times, keeps all the timers running.\n\n**Usage**\n\n``` javascript\nawait page.clock.setFixedTime(Date.now());\nawait page.clock.setFixedTime(new Date('2020-02-02'));\nawait page.clock.setFixedTime('2020-02-02');\n```\n\n**Arguments**\n\n- `time` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| \\[Date\\]\n\n  Time to be set in milliseconds.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### setSystemTime[​](#clock-set-system-time \"Direct link to setSystemTime\")\n\nSets current system time but does not trigger any timers.\n\n**Usage**\n\n``` javascript\nawait page.clock.setSystemTime(Date.now());\nawait page.clock.setSystemTime(new Date('2020-02-02'));\nawait page.clock.setSystemTime('2020-02-02');\n```\n\n**Arguments**\n\n- `time` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| \\[Date\\]\n\n  Time to be set in milliseconds.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-clock](https://playwright.dev/docs/api/class-clock)"
- name: Clock
  id: clock
  summary: Accurately simulating time-dependent behavior is essential for verifying the correctness of applications
  description: "# Clock\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nAccurately simulating time-dependent behavior is essential for verifying the correctness of applications. Utilizing [Clock](api/class-clock \"Clock\") functionality allows developers to manipulate and control time within tests, enabling the precise validation of features such as rendering time, timeouts, scheduled tasks without the delays and variability of real-time execution.\n\nThe [Clock](api/class-clock \"Clock\") API provides the following methods to control time:\n\n- `setFixedTime`: Sets the fixed time for `Date.now()` and `new Date()`.\n- `install`: initializes the clock and allows you to:\n  - `pauseAt`: Pauses the time at a specific time.\n  - `fastForward`: Fast forwards the time.\n  - `runFor`: Runs the time for a specific duration.\n  - `resume`: Resumes the time.\n- `setSystemTime`: Sets the current system time.\n\nThe recommended approach is to use `setFixedTime` to set the time to a specific value. If that doesn't work for your use case, you can use `install` which allows you to pause time later on, fast forward it, tick it, etc. `setSystemTime` is only recommended for advanced use cases.\n\n> note\n>\n> [page.clock](api/class-page#page-clock) overrides native global classes and functions related to time allowing them to be manually controlled: - `Date` - `setTimeout` - `clearTimeout` - `setInterval` - `clearInterval` - `requestAnimationFrame` - `cancelAnimationFrame` - `requestIdleCallback` - `cancelIdleCallback` - `performance`\n\n## Test with predefined time[​](#test-with-predefined-time \"Direct link to Test with predefined time\")\n\nOften you only need to fake `Date.now` while keeping the timers going. That way the time flows naturally, but `Date.now` always returns a fixed value.\n\n``` html\n<div id=\"current-time\" data-testid=\"current-time\"></div>\n<script>\n  const renderTime = () => {\n    document.getElementById('current-time').textContent =\n        new Date().toLocaleString();\n  };\n  setInterval(renderTime, 1000);\n</script>\n```\n\n``` javascript\nawait page.clock.setFixedTime(new Date('2024-02-02T10:00:00'));\nawait page.goto('http://localhost:3333');\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:00:00 AM');\n\nawait page.clock.setFixedTime(new Date('2024-02-02T10:30:00'));\n// We know that the page has a timer that updates the time every second.\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:30:00 AM');\n```\n\n## Consistent time and timers[​](#consistent-time-and-timers \"Direct link to Consistent time and timers\")\n\nSometimes your timers depend on `Date.now` and are confused when the `Date.now` value does not change over time. In this case, you can install the clock and fast forward to the time of interest when testing.\n\n``` html\n<div id=\"current-time\" data-testid=\"current-time\"></div>\n<script>\n  const renderTime = () => {\n    document.getElementById('current-time').textContent =\n        new Date().toLocaleString();\n  };\n  setInterval(renderTime, 1000);\n</script>\n```\n\n``` javascript\n// Initialize clock with some time before the test time and let the page load\n// naturally. `Date.now` will progress as the timers fire.\nawait page.clock.install({ time: new Date('2024-02-02T08:00:00') });\nawait page.goto('http://localhost:3333');\n\n// Pretend that the user closed the laptop lid and opened it again at 10am,\n// Pause the time once reached that point.\nawait page.clock.pauseAt(new Date('2024-02-02T10:00:00'));\n\n// Assert the page state.\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:00:00 AM');\n\n// Close the laptop lid again and open it at 10:30am.\nawait page.clock.fastForward('30:00');\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:30:00 AM');\n```\n\n## Test inactivity monitoring[​](#test-inactivity-monitoring \"Direct link to Test inactivity monitoring\")\n\nInactivity monitoring is a common feature in web applications that logs out users after a period of inactivity. Testing this feature can be tricky because you need to wait for a long time to see the effect. With the help of the clock, you can speed up time and test this feature quickly.\n\n``` html\n<div id=\"remaining-time\" data-testid=\"remaining-time\"></div>\n<script>\n  const endTime = Date.now() + 5 * 60_000;\n  const renderTime = () => {\n    const diffInSeconds = Math.round((endTime - Date.now()) / 1000);\n    if (diffInSeconds <= 0) {\n      document.getElementById('remaining-time').textContent =\n        'You have been logged out due to inactivity.';\n    } else {\n      document.getElementById('remaining-time').textContent =\n        `You will be logged out in ${diffInSeconds} seconds.`;\n    }\n    setTimeout(renderTime, 1000);\n  };\n  renderTime();\n</script>\n<button type=\"button\">Interaction</button>\n```\n\n``` javascript\n// Initial time does not matter for the test, so we can pick current time.\nawait page.clock.install();\nawait page.goto('http://localhost:3333');\n// Interact with the page\nawait page.getByRole('button').click();\n\n// Fast forward time 5 minutes as if the user did not do anything.\n// Fast forward is like closing the laptop lid and opening it after 5 minutes.\n// All the timers due will fire once immediately, as in the real browser.\nawait page.clock.fastForward('05:00');\n\n// Check that the user was logged out automatically.\nawait expect(page.getByText('You have been logged out due to inactivity.')).toBeVisible();\n```\n\n## Tick through time manually, firing all the timers consistently[​](#tick-through-time-manually-firing-all-the-timers-consistently \"Direct link to Tick through time manually, firing all the timers consistently\")\n\nIn rare cases, you may want to tick through time manually, firing all timers and animation frames in the process to achieve a fine-grained control over the passage of time.\n\n``` html\n<div id=\"current-time\" data-testid=\"current-time\"></div>\n<script>\n  const renderTime = () => {\n    document.getElementById('current-time').textContent =\n        new Date().toLocaleString();\n  };\n  setInterval(renderTime, 1000);\n</script>\n```\n\n``` javascript\n// Initialize clock with a specific time, let the page load naturally.\nawait page.clock.install({ time: new Date('2024-02-02T08:00:00') });\nawait page.goto('http://localhost:3333');\n\n// Pause the time flow, stop the timers, you now have manual control\n// over the page time.\nawait page.clock.pauseAt(new Date('2024-02-02T10:00:00'));\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:00:00 AM');\n\n// Tick through time manually, firing all timers in the process.\n// In this case, time will be updated in the screen 2 times.\nawait page.clock.runFor(2000);\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:00:02 AM');\n```\n\n## Related Videos[​](#related-videos \"Direct link to Related Videos\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/clock](https://playwright.dev/docs/clock)"
- name: clock.fastForward
  id: api/class-clock#clock-fast-forward
  summary: Advance the clock by jumping forward in time
  belongs_to: Clock
  description: |-
    ### fastForward[​](#clock-fast-forward "Direct link to fastForward")

    Advance the clock by jumping forward in time. Only fires due timers at most once. This is equivalent to user closing the laptop lid for a while and reopening it later, after given time.

    **Usage**

    ``` javascript
    await page.clock.fastForward(1000);
    await page.clock.fastForward('30:00');
    ```

    **Arguments**

    - `ticks`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Time may be the number of milliseconds to advance the clock by or a human-readable string. Valid string formats are "08" for eight seconds, "01:00" for one minute and "02:34:10" for two hours, 34 minutes and ten seconds.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>
- name: clock.install
  id: api/class-clock#clock-install
  summary: Fake timers are used to manually control the flow of time in tests
  belongs_to: Clock
  description: |-
    ### install[​](#clock-install "Direct link to install")

    Install fake implementations for the following time-related functions:

    - `Date`
    - `setTimeout`
    - `clearTimeout`
    - `setInterval`
    - `clearInterval`
    - `requestAnimationFrame`
    - `cancelAnimationFrame`
    - `requestIdleCallback`
    - `cancelIdleCallback`
    - `performance`

    Fake timers are used to manually control the flow of time in tests. They allow you to advance time, fire timers, and control the behavior of time-dependent functions. See [clock.runFor()](class-clock#clock-run-for) and [clock.fastForward()](class-clock#clock-fast-forward) for more information.

    **Usage**

    ``` javascript
    await clock.install();
    await clock.install(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `time`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| \[Date\] *(optional)*

        Time to initialize with, current system time by default.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: clock.pauseAt
  id: api/class-clock#clock-pause-at
  summary: Advance the clock by jumping forward in time and pause the time
  belongs_to: Clock
  description: |-
    ### pauseAt[​](#clock-pause-at "Direct link to pauseAt")

    Advance the clock by jumping forward in time and pause the time. Once this method is called, no timers are fired unless [clock.runFor()](class-clock#clock-run-for), [clock.fastForward()](class-clock#clock-fast-forward), [clock.pauseAt()](class-clock#clock-pause-at) or [clock.resume()](class-clock#clock-resume) is called.

    Only fires due timers at most once. This is equivalent to user closing the laptop lid for a while and reopening it at the specified time and pausing.

    **Usage**

    ``` javascript
    await page.clock.pauseAt(new Date('2020-02-02'));
    await page.clock.pauseAt('2020-02-02');
    ```

    **Arguments**

    - `time`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| \[Date\]

      Time to pause at.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: clock.resume
  id: api/class-clock#clock-resume
  summary: Resumes timers
  belongs_to: Clock
  description: |-
    ### resume[​](#clock-resume "Direct link to resume")

    Resumes timers. Once this method is called, time resumes flowing, timers are fired as usual.

    **Usage**

    ``` javascript
    await clock.resume();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: clock.runFor
  id: api/class-clock#clock-run-for
  summary: Advance the clock, firing all the time-related callbacks
  belongs_to: Clock
  description: |-
    ### runFor[​](#clock-run-for "Direct link to runFor")

    Advance the clock, firing all the time-related callbacks.

    **Usage**

    ``` javascript
    await page.clock.runFor(1000);
    await page.clock.runFor('30:00');
    ```

    **Arguments**

    - `ticks`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Time may be the number of milliseconds to advance the clock by or a human-readable string. Valid string formats are "08" for eight seconds, "01:00" for one minute and "02:34:10" for two hours, 34 minutes and ten seconds.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: clock.setFixedTime
  id: api/class-clock#clock-set-fixed-time
  summary: Makes Date.now and new Date() return fixed fake time at all times, keeps all the timers running
  belongs_to: Clock
  description: |-
    ### setFixedTime[​](#clock-set-fixed-time "Direct link to setFixedTime")

    Makes `Date.now` and `new Date()` return fixed fake time at all times, keeps all the timers running.

    **Usage**

    ``` javascript
    await page.clock.setFixedTime(Date.now());
    await page.clock.setFixedTime(new Date('2020-02-02'));
    await page.clock.setFixedTime('2020-02-02');
    ```

    **Arguments**

    - `time`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| \[Date\]

      Time to be set in milliseconds.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: clock.setSystemTime
  id: api/class-clock#clock-set-system-time
  summary: Sets current system time but does not trigger any timers
  belongs_to: Clock
  description: "### setSystemTime[​](#clock-set-system-time \"Direct link to setSystemTime\")\n\nSets current system time but does not trigger any timers.\n\n**Usage**\n\n``` javascript\nawait page.clock.setSystemTime(Date.now());\nawait page.clock.setSystemTime(new Date('2020-02-02'));\nawait page.clock.setSystemTime('2020-02-02');\n```\n\n**Arguments**\n\n- `time`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| \\[Date\\]\n\n  Time to be set in milliseconds.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-clock](https://playwright.dev/docs/api/class-clock)"
- name: Command line
  id: test-cli
  summary: Here are the most common options available in the command line
  description: "# Command line\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nHere are the most common options available in the command line.\n\n- Run all the tests\n\n  ``` javascript\n  npx playwright test\n  ```\n\n- Run a single test file\n\n  ``` javascript\n  npx playwright test tests/todo-page.spec.ts\n  ```\n\n- Run a set of test files\n\n  ``` javascript\n  npx playwright test tests/todo-page/ tests/landing-page/\n  ```\n\n- Run files that have `my-spec` or `my-spec-2` in the file name\n\n  ``` javascript\n  npx playwright test my-spec my-spec-2\n  ```\n\n- Run tests that are in line 42 in my-spec.ts\n\n  ``` javascript\n  npx playwright test my-spec.ts:42\n  ```\n\n- Run the test with the title\n\n  ``` javascript\n  npx playwright test -g \"add a todo item\"\n  ```\n\n- Run tests in headed browsers\n\n  ``` javascript\n  npx playwright test --headed\n  ```\n\n- Run all the tests against a specific project\n\n  ``` javascript\n  npx playwright test --project=chromium\n  ```\n\n- Disable [parallelization](test-parallel)\n\n  ``` javascript\n  npx playwright test --workers=1\n  ```\n\n- Choose a [reporter](test-reporters)\n\n  ``` javascript\n  npx playwright test --reporter=dot\n  ```\n\n- Run in debug mode with [Playwright Inspector](debug)\n\n  ``` javascript\n  npx playwright test --debug\n  ```\n\n- Run tests in interactive UI mode, with a built-in watch mode (Preview)\n\n  ``` javascript\n  npx playwright test --ui\n  ```\n\n- Ask for help\n\n  ``` javascript\n  npx playwright test --help\n  ```\n\n## Reference[​](#reference \"Direct link to Reference\")\n\nComplete set of Playwright Test options is available in the [configuration file](test-use-options). Following options can be passed to a command line and take priority over the configuration file:\n\n| Option                                | Description|\n|:--------------------------------------||\n| Non-option arguments                  | Each argument is treated as a regular expression matched against the full test file path. Only tests from the files matching the pattern will be executed. Special symbols like `$` or `*` should be escaped with `\\`. In many shells/terminals you may need to quote the arguments.                                                                                                                                                                                                                                                                         |\n| `-c <file>` or `--config <file>`      | Configuration file. If not passed, defaults to `playwright.config.ts` or `playwright.config.js` in the current directory.                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| `--debug`                             | Run tests with Playwright Inspector. Shortcut for `PWDEBUG=1` environment variable and `--timeout=0 --max-failures=1 --headed --workers=1` options.                                                                                                                                                                                                                                                                                                                                                                                                          |\n| `--fail-on-flaky-tests`               | Fails test runs that contain flaky tests. By default flaky tests count as successes.                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| `--forbid-only`                       | Whether to disallow `test.only`. Useful on CI.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| `--global-timeout <number>`           | Total timeout for the whole test run in milliseconds. By default, there is no global timeout. Learn more about [various timeouts](test-timeouts).                                                                                                                                                                                                                                                                                                                                                                                                            |\n| `-g <grep>` or `--grep <grep>`        | Only run tests matching this regular expression. For example, this will run `'should add to cart'` when passed `-g \"add to cart\"`. The regular expression will be tested against the string that consists of the project name, test file name, `test.describe` titles if any, test title and all test tags, separated by spaces, e.g. `chromium my-test.spec.ts my-suite my-test @smoke`. The filter does not apply to the tests from dependency projects, i.e. Playwright will still run all tests from [project dependencies](test-projects#dependencies). |\n| `--grep-invert <grep>`                | Only run tests **not** matching this regular expression. The opposite of `--grep`. The filter does not apply to the tests from dependency projects, i.e. Playwright will still run all tests from [project dependencies](test-projects#dependencies).                                                                                                                                                                                                                                                                                                        |\n| `--headed`                            | Run tests in headed browsers. Useful for debugging.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| `--ignore-snapshots`                  | Whether to ignore [snapshots](test-snapshots). Use this when snapshot expectations are known to be different, e.g. running tests on Linux against Windows screenshots.                                                                                                                                                                                                                                                                                                                                                                                       |\n| `--last-failed`                       | Only re-run the failures|\n| `--list`                              | list all the tests, but do not run them.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| `--max-failures <N>` or `-x`          | Stop after the first `N` test failures. Passing `-x` stops after the first failure.                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| `--no-deps`                           | Ignore the dependencies between projects and behave as if they were not specified.                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| `--output <dir>`                      | Directory for artifacts produced by tests, defaults to `test-results`.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| `--only-changed [ref]`                | Only run test files that have been changed between working tree and \"ref\". Defaults to running all uncommitted changes with ref=HEAD. Only supports Git.                                                                                                                                                                                                                                                                                                                                                                                                     |\n| `--pass-with-no-tests`                | Allows the test suite to pass when no files are found.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| `--project <name>`                    | Only run tests from the specified [projects](test-projects), supports '\\*' wildcard. Defaults to running all projects defined in the configuration file.                                                                                                                                                                                                                                                                                                                                                                                                     |\n| `--quiet`                             | Whether to suppress stdout and stderr from the tests.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| `--repeat-each <N>`                   | Run each test `N` times, defaults to one.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| `--reporter <reporter>`               | Choose a reporter: minimalist `dot`, concise `line` or detailed `list`. See [reporters](test-reporters) for more information. You can also pass a path to a [custom reporter](test-reporters#custom-reporters) file.                                                                                                                                                                                                                                                                                                                                         |\n| `--retries <number>`                  | The maximum number of [retries](test-retries#retries) for flaky tests, defaults to zero (no retries).                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| `--shard <shard>`                     | [Shard](test-parallel#shard-tests-between-multiple-machines) tests and execute only selected shard, specified in the form `current/all`, 1-based, for example `3/5`.                                                                                                                                                                                                                                                                                                                                                                                         |\n| `--timeout <number>`                  | Maximum timeout in milliseconds for each test, defaults to 30 seconds. Learn more about [various timeouts](test-timeouts).                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| `--trace <mode>`                      | Force tracing mode, can be `on`, `off`, `on-first-retry`, `on-all-retries`, `retain-on-failure`                                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| `--update-snapshots` or `-u`          | Whether to update [snapshots](test-snapshots) with actual results instead of comparing them. Use this when snapshot expectations have changed.                                                                                                                                                                                                                                                                                                                                                                                                               |\n| `--workers <number>` or `-j <number>` | The maximum number of concurrent worker processes that run in [parallel](test-parallel).                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/test-cli](https://playwright.dev/docs/test-cli)"
- name: Components (experimental)
  id: test-components
  summary: Playwright Test can now test your components
  description: "# Components (experimental)\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright Test can now test your components.\n\n## Example[​](#example \"Direct link to Example\")\n\nHere is what a typical component test looks like:\n\n``` javascript\ntest('event should work', async ({ mount }) => {\n  let clicked = false;\n\n  // Mount a component. Returns locator pointing to the component.\n  const component = await mount(\n    <Button title=\"Submit\" onClick={() => { clicked = true }}></Button>\n  );\n\n  // As with any Playwright test, assert locator text.\n  await expect(component).toContainText('Submit');\n\n  // Perform locator click. This will trigger the event.\n  await component.click();\n\n  // Assert that respective events have been fired.\n  expect(clicked).toBeTruthy();\n});\n```\n\n## How to get started[​](#how-to-get-started \"Direct link to How to get started\")\n\nAdding Playwright Test to an existing project is easy. Below are the steps to enable Playwright Test for a React, Vue, Svelte or Solid project.\n\n### Step 1: Install Playwright Test for components for your respective framework[​](#step-1-install-playwright-test-for-components-for-your-respective-framework \"Direct link to Step 1: Install Playwright Test for components for your respective framework\")\n\n- npm\n- yarn\n- pnpm\n\n``` javascript\nnpm init playwright@latest -- --ct\n```\n\n``` javascript\nyarn create playwright --ct\n```\n\n``` javascript\npnpm create playwright --ct\n```\n\nThis step creates several files in your workspace:\n\n``` html\n<html lang=\"en\">\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"./index.ts\"></script>\n  </body>\n</html>\n```\n\nThis file defines an html file that will be used to render components during testing. It must contain element with `id=\"root\"`, that's where components are mounted. It must also link the script called `playwright/index.{js,ts,jsx,tsx}`.\n\nYou can include stylesheets, apply theme and inject code into the page where component is mounted using this script. It can be either a `.js`, `.ts`, `.jsx` or `.tsx` file.\n\n``` javascript\n// Apply theme here, add anything your component needs at runtime here.\n```\n\n### Step 2. Create a test file `src/App.spec.{ts,tsx}`[​](#step-2-create-a-test-file-srcappspectstsx \"Direct link to step-2-create-a-test-file-srcappspectstsx\")\n\n- React\n- Solid\n- Svelte\n- Vue\n\n``` javascript\nimport { test, expect } from '@playwright/experimental-ct-react';\nimport App from './App';\n\ntest.use({ viewport: { width: 500, height: 500 } });\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(<App />);\n  await expect(component).toContainText('Learn React');\n});\n```\n\n``` javascript\nimport { test, expect } from '@playwright/experimental-ct-vue';\nimport App from './App.vue';\n\ntest.use({ viewport: { width: 500, height: 500 } });\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(App);\n  await expect(component).toContainText('Vite + Vue');\n});\n```\n\nIf using TypeScript and Vue make sure to add a `vue.d.ts` file to your project:\n\n``` javascript\ndeclare module '*.vue';\n```\n\n``` javascript\nimport { test, expect } from '@playwright/experimental-ct-svelte';\nimport App from './App.svelte';\n\ntest.use({ viewport: { width: 500, height: 500 } });\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(App);\n  await expect(component).toContainText('Vite + Svelte');\n});\n```\n\n``` javascript\nimport { test, expect } from '@playwright/experimental-ct-solid';\nimport App from './App';\n\ntest.use({ viewport: { width: 500, height: 500 } });\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(<App />);\n  await expect(component).toContainText('Learn Solid');\n});\n```\n\n### Step 3. Run the tests[​](#step-3-run-the-tests \"Direct link to Step 3. Run the tests\")\n\nYou can run tests using the [VS Code extension](getting-started-vscode) or the command line.\n\n``` javascript\nnpm run test-ct\n```\n\n### Further reading: configure reporting, browsers, tracing[​](#further-reading-configure-reporting-browsers-tracing \"Direct link to Further reading: configure reporting, browsers, tracing\")\n\nRefer to [Playwright config](test-configuration) for configuring your project.\n\n## Test stories[​](#test-stories \"Direct link to Test stories\")\n\nWhen Playwright Test is used to test web components, tests run in Node.js, while components run in the real browser. This brings together the best of both worlds: components run in the real browser environment, real clicks are triggered, real layout is executed, visual regression is possible. At the same time, test can use all the powers of Node.js as well as all the Playwright Test features. As a result, the same parallel, parametrized tests with the same post-mortem Tracing story are available during component testing.\n\nThis however, is introducing a number of limitations:\n\n- You can't pass complex live objects to your component. Only plain JavaScript objects and built-in types like strings, numbers, dates etc. can be passed.\n\n``` javascript\ntest('this will work', async ({ mount }) => {\n  const component = await mount(<ProcessViewer process={{ name: 'playwright' }}/>);\n});\n\ntest('this will not work', async ({ mount }) => {\n  // `process` is a Node object, we can't pass it to the browser and expect it to work.\n  const component = await mount(<ProcessViewer process={process}/>);\n});\n```\n\n- You can't pass data to your component synchronously in a callback:\n\n``` javascript\ntest('this will not work', async ({ mount }) => {\n  // () => 'red' callback lives in Node. If `ColorPicker` component in the browser calls the parameter function\n  // `colorGetter` it won't get result synchronously. It'll be able to get it via await, but that is not how\n  // components are typically built.\n  const component = await mount(<ColorPicker colorGetter={() => 'red'}/>);\n});\n```\n\nWorking around these and other limitations is quick and elegant: for every use case of the tested component, create a wrapper of this component designed specifically for test. Not only it will mitigate the limitations, but it will also offer powerful abstractions for testing where you would be able to define environment, theme and other aspects of your component rendering.\n\nLet's say you'd like to test following component:\n\n``` javascript\nimport React from 'react';\n\ntype InputMediaProps = {\n  // Media is a complex browser object we can't send to Node while testing.\n  onChange(media: Media): void;\n};\n\nexport function InputMedia(props: InputMediaProps) {\n  return <></> as any;\n}\n```\n\nCreate a story file for your component:\n\n``` javascript\nimport React from 'react';\nimport InputMedia from './import-media';\n\ntype InputMediaForTestProps = {\n  onMediaChange(mediaName: string): void;\n};\n\nexport function InputMediaForTest(props: InputMediaForTestProps) {\n  // Instead of sending a complex `media` object to the test, send the media name.\n  return <InputMedia onChange={media => props.onMediaChange(media.name)} />;\n}\n// Export more stories here.\n```\n\nThen test the component via testing the story:\n\n``` javascript\ntest('changes the image', async ({ mount }) => {\n  let mediaSelected: string | null = null;\n\n  const component = await mount(\n    <InputMediaForTest\n      onMediaChange={mediaName => {\n        mediaSelected = mediaName;\n      }}\n    />\n  );\n  await component\n    .getByTestId('imageInput')\n    .setInputFiles('src/assets/logo.png');\n\n  await expect(component.getByAltText(/selected image/i)).toBeVisible();\n  await expect.poll(() => mediaSelected).toBe('logo.png');\n});\n```\n\nAs a result, for every component you'll have a story file that exports all the stories that are actually tested. These stories live in the browser and \"convert\" complex object into the simple objects that can be accessed in the test.\n\n## Under the hood[​](#under-the-hood \"Direct link to Under the hood\")\n\nHere is how component testing works:\n\n- Once the tests are executed, Playwright creates a list of components that the tests need.\n- It then compiles a bundle that includes these components and serves it using a local static web server.\n- Upon the `mount` call within the test, Playwright navigates to the facade page `/playwright/index.html` of this bundle and tells it to render the component.\n- Events are marshalled back to the Node.js environment to allow verification.\n\nPlaywright is using [Vite](https://vitejs.dev/) to create the components bundle and serve it.\n\n## API reference[​](#api-reference \"Direct link to API reference\")\n\n### props[​](#props \"Direct link to props\")\n\nProvide props to a component when mounted.\n\n- React\n- Solid\n- Svelte\n- Vue\n\n``` javascript\ntest('props', async ({ mount }) => {\n  const component = await mount(<Component msg=\"greetings\" />);\n});\n```\n\n``` javascript\ntest('props', async ({ mount }) => {\n  const component = await mount(<Component msg=\"greetings\" />);\n});\n```\n\n``` javascript\ntest('props', async ({ mount }) => {\n  const component = await mount(Component, { props: { msg: 'greetings' } });\n});\n```\n\n``` javascript\ntest('props', async ({ mount }) => {\n  const component = await mount(Component, { props: { msg: 'greetings' } });\n});\n```\n\n### callbacks / events[​](#callbacks--events \"Direct link to callbacks / events\")\n\nProvide callbacks/events to a component when mounted.\n\n- React\n- Solid\n- Svelte\n- Vue\n\n``` javascript\ntest('callback', async ({ mount }) => {\n  const component = await mount(<Component callback={() => {}} />);\n});\n```\n\n``` javascript\ntest('callback', async ({ mount }) => {\n  const component = await mount(<Component callback={() => {}} />);\n});\n```\n\n``` javascript\ntest('event', async ({ mount }) => {\n  const component = await mount(Component, { on: { callback() {} } });\n});\n```\n\n``` javascript\ntest('event', async ({ mount }) => {\n  const component = await mount(Component, { on: { callback() {} } });\n});\n```\n\n### children / slots[​](#children--slots \"Direct link to children / slots\")\n\nProvide children/slots to a component when mounted.\n\n- React\n- Solid\n- Svelte\n- Vue\n\n``` javascript\ntest('children', async ({ mount }) => {\n  const component = await mount(<Component>Child</Component>);\n});\n```\n\n``` javascript\ntest('children', async ({ mount }) => {\n  const component = await mount(<Component>Child</Component>);\n});\n```\n\n``` javascript\ntest('slot', async ({ mount }) => {\n  const component = await mount(Component, { slots: { default: 'Slot' } });\n});\n```\n\n``` javascript\ntest('slot', async ({ mount }) => {\n  const component = await mount(Component, { slots: { default: 'Slot' } });\n});\n```\n\n### hooks[​](#hooks \"Direct link to hooks\")\n\nYou can use `beforeMount` and `afterMount` hooks to configure your app. This lets you set up things like your app router, fake server etc. giving you the flexibility you need. You can also pass custom configuration from the `mount` call from a test, which is accessible from the `hooksConfig` fixture. This includes any config that needs to be run before or after mounting the component. An example of configuring a router is provided below:\n\n- React\n- Solid\n- Vue3\n- Vue2\n\n``` javascript\nimport { beforeMount, afterMount } from '@playwright/experimental-ct-react/hooks';\nimport { BrowserRouter } from 'react-router-dom';\n\nexport type HooksConfig = {\n  enableRouting?: boolean;\n}\n\nbeforeMount<HooksConfig>(async ({ App, hooksConfig }) => {\n  if (hooksConfig?.enableRouting)\n    return <BrowserRouter><App /></BrowserRouter>;\n});\n```\n\n``` javascript\nimport { test, expect } from '@playwright/experimental-ct-react';\nimport type { HooksConfig } from '../playwright';\nimport { ProductsPage } from './pages/ProductsPage';\n\ntest('configure routing through hooks config', async ({ page, mount }) => {\n  const component = await mount<HooksConfig>(<ProductsPage />, {\n    hooksConfig: { enableRouting: true },\n  });\n  await expect(component.getByRole('link')).toHaveAttribute('href', '/products/42');\n});\n```\n\n``` javascript\nimport { beforeMount, afterMount } from '@playwright/experimental-ct-solid/hooks';\nimport { Router } from '@solidjs/router';\n\nexport type HooksConfig = {\n  enableRouting?: boolean;\n}\n\nbeforeMount<HooksConfig>(async ({ App, hooksConfig }) => {\n  if (hooksConfig?.enableRouting)\n    return <Router><App /></Router>;\n});\n```\n\n``` javascript\nimport { test, expect } from '@playwright/experimental-ct-solid';\nimport type { HooksConfig } from '../playwright';\nimport { ProductsPage } from './pages/ProductsPage';\n\ntest('configure routing through hooks config', async ({ page, mount }) => {\n  const component = await mount<HooksConfig>(<ProductsPage />, {\n    hooksConfig: { enableRouting: true },\n  });\n  await expect(component.getByRole('link')).toHaveAttribute('href', '/products/42');\n});\n```\n\n``` javascript\nimport { beforeMount, afterMount } from '@playwright/experimental-ct-vue/hooks';\nimport { router } from '../src/router';\n\nexport type HooksConfig = {\n  enableRouting?: boolean;\n}\n\nbeforeMount<HooksConfig>(async ({ app, hooksConfig }) => {\n  if (hooksConfig?.enableRouting)\n    app.use(router);\n});\n```\n\n``` javascript\nimport { test, expect } from '@playwright/experimental-ct-vue';\nimport type { HooksConfig } from '../playwright';\nimport ProductsPage from './pages/ProductsPage.vue';\n\ntest('configure routing through hooks config', async ({ page, mount }) => {\n  const component = await mount<HooksConfig>(ProductsPage, {\n    hooksConfig: { enableRouting: true },\n  });\n  await expect(component.getByRole('link')).toHaveAttribute('href', '/products/42');\n});\n```\n\n``` javascript\nimport { beforeMount, afterMount } from '@playwright/experimental-ct-vue2/hooks';\nimport Router from 'vue-router';\nimport { router } from '../src/router';\n\nexport type HooksConfig = {\n  enableRouting?: boolean;\n}\n\nbeforeMount<HooksConfig>(async ({ app, hooksConfig }) => {\n  if (hooksConfig?.enableRouting) {\n    Vue.use(Router);\n    return { router }\n  }\n});\n```\n\n``` javascript\nimport { test, expect } from '@playwright/experimental-ct-vue2';\nimport type { HooksConfig } from '../playwright';\nimport ProductsPage from './pages/ProductsPage.vue';\n\ntest('configure routing through hooks config', async ({ page, mount }) => {\n  const component = await mount<HooksConfig>(ProductsPage, {\n    hooksConfig: { enableRouting: true },\n  });\n  await expect(component.getByRole('link')).toHaveAttribute('href', '/products/42');\n});\n```\n\n### unmount[​](#unmount \"Direct link to unmount\")\n\nUnmount the mounted component from the DOM. This is useful for testing the component's behavior upon unmounting. Use cases include testing an \"Are you sure you want to leave?\" modal or ensuring proper cleanup of event handlers to prevent memory leaks.\n\n- React\n- Solid\n- Svelte\n- Vue\n\n``` javascript\ntest('unmount', async ({ mount }) => {\n  const component = await mount(<Component/>);\n  await component.unmount();\n});\n```\n\n``` javascript\ntest('unmount', async ({ mount }) => {\n  const component = await mount(<Component/>);\n  await component.unmount();\n});\n```\n\n``` javascript\ntest('unmount', async ({ mount }) => {\n  const component = await mount(Component);\n  await component.unmount();\n});\n```\n\n``` javascript\ntest('unmount', async ({ mount }) => {\n  const component = await mount(Component);\n  await component.unmount();\n});\n```\n\n### update[​](#update \"Direct link to update\")\n\nUpdate props, slots/children, and/or events/callbacks of a mounted component. These component inputs can change at any time and are typically provided by the parent component, but sometimes it is necessary to ensure that your components behave appropriately to new inputs.\n\n- React\n- Solid\n- Svelte\n- Vue\n\n``` javascript\ntest('update', async ({ mount }) => {\n  const component = await mount(<Component/>);\n  await component.update(\n      <Component msg=\"greetings\" callback={() => {}}>Child</Component>\n  );\n});\n```\n\n``` javascript\ntest('update', async ({ mount }) => {\n  const component = await mount(<Component/>);\n  await component.update(\n      <Component msg=\"greetings\" callback={() => {}}>Child</Component>\n  );\n});\n```\n\n``` javascript\ntest('update', async ({ mount }) => {\n  const component = await mount(<Component/>);\n  await component.update({\n    props: { msg: 'greetings' },\n    on: { callback: () => {} },\n    slots: { default: 'Child' }\n  });\n});\n```\n\n``` javascript\ntest('update', async ({ mount }) => {\n  const component = await mount(<Component/>);\n  await component.update({\n    props: { msg: 'greetings' },\n    on: { callback: () => {} },\n    slots: { default: 'Child' }\n  });\n});\n```\n\n### Handling network requests[​](#handling-network-requests \"Direct link to Handling network requests\")\n\nPlaywright provides an **experimental** `router` fixture to intercept and handle network requests. There are two ways to use the `router` fixture:\n\n- Call `router.route(url, handler)` that behaves similarly to [page.route()](api/class-page#page-route). See the [network mocking guide](mock) for more details.\n- Call `router.use(handlers)` and pass [MSW library](https://mswjs.io/) request handlers to it.\n\nHere is an example of reusing your existing MSW handlers in the test.\n\n``` javascript\nimport { handlers } from '@src/mocks/handlers';\n\ntest.beforeEach(async ({ router }) => {\n  // install common handlers before each test\n  await router.use(...handlers);\n});\n\ntest('example test', async ({ mount }) => {\n  // test as usual, your handlers are active\n  // ...\n});\n```\n\nYou can also introduce a one-off handler for a specific test.\n\n``` javascript\nimport { http, HttpResponse } from 'msw';\n\ntest('example test', async ({ mount, router }) => {\n  await router.use(http.get('/data', async ({ request }) => {\n    return HttpResponse.json({ value: 'mocked' });\n  }));\n\n  // test as usual, your handler is active\n  // ...\n});\n```\n\n## Frequently asked questions[​](#frequently-asked-questions \"Direct link to Frequently asked questions\")\n\n### What's the difference between `@playwright/test` and `@playwright/experimental-ct-{react,svelte,vue,solid}`?[​](#whats-the-difference-between-playwrighttest-and-playwrightexperimental-ct-reactsveltevuesolid \"Direct link to whats-the-difference-between-playwrighttest-and-playwrightexperimental-ct-reactsveltevuesolid\")\n\n``` javascript\ntest('…', async ({ mount, page, context }) => {\n  // …\n});\n```\n\n`@playwright/experimental-ct-{react,svelte,vue,solid}` wrap `@playwright/test` to provide an additional built-in component-testing specific fixture called `mount`:\n\n- React\n- Solid\n- Svelte\n- Vue\n\n``` javascript\nimport { test, expect } from '@playwright/experimental-ct-react';\nimport HelloWorld from './HelloWorld';\n\ntest.use({ viewport: { width: 500, height: 500 } });\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(<HelloWorld msg=\"greetings\" />);\n  await expect(component).toContainText('Greetings');\n});\n```\n\n``` javascript\nimport { test, expect } from '@playwright/experimental-ct-vue';\nimport HelloWorld from './HelloWorld.vue';\n\ntest.use({ viewport: { width: 500, height: 500 } });\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(HelloWorld, {\n    props: {\n      msg: 'Greetings',\n    },\n  });\n  await expect(component).toContainText('Greetings');\n});\n```\n\n``` javascript\nimport { test, expect } from '@playwright/experimental-ct-svelte';\nimport HelloWorld from './HelloWorld.svelte';\n\ntest.use({ viewport: { width: 500, height: 500 } });\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(HelloWorld, {\n    props: {\n      msg: 'Greetings',\n    },\n  });\n  await expect(component).toContainText('Greetings');\n});\n```\n\n``` javascript\nimport { test, expect } from '@playwright/experimental-ct-solid';\nimport HelloWorld from './HelloWorld';\n\ntest.use({ viewport: { width: 500, height: 500 } });\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(<HelloWorld msg=\"greetings\" />);\n  await expect(component).toContainText('Greetings');\n});\n```\n\nAdditionally, it adds some config options you can use in your `playwright-ct.config.{ts,js}`.\n\nFinally, under the hood, each test re-uses the `context` and `page` fixture as a speed optimization for Component Testing. It resets them in between each test so it should be functionally equivalent to `@playwright/test`'s guarantee that you get a new, isolated `context` and `page` fixture per-test.\n\n### I have a project that already uses Vite. Can I reuse the config?[​](#i-have-a-project-that-already-uses-vite-can-i-reuse-the-config \"Direct link to I have a project that already uses Vite. Can I reuse the config?\")\n\nAt this point, Playwright is bundler-agnostic, so it is not reusing your existing Vite config. Your config might have a lot of things we won't be able to reuse. So for now, you would copy your path mappings and other high level settings into the `ctViteConfig` property of Playwright config.\n\n``` javascript\nimport { defineConfig } from '@playwright/experimental-ct-react';\n\nexport default defineConfig({\n  use: {\n    ctViteConfig: {\n      // ...\n    },\n  },\n});\n```\n\nYou can specify plugins via Vite config for testing settings. Note that once you start specifying plugins, you are responsible for specifying the framework plugin as well, `vue()` in this case:\n\n``` javascript\nimport { defineConfig, devices } from '@playwright/experimental-ct-vue';\n\nimport { resolve } from 'path';\nimport vue from '@vitejs/plugin-vue';\nimport AutoImport from 'unplugin-auto-import/vite';\nimport Components from 'unplugin-vue-components/vite';\n\nexport default defineConfig({\n  testDir: './tests/component',\n  use: {\n    trace: 'on-first-retry',\n    ctViteConfig: {\n      plugins: [\n        vue(),\n        AutoImport({\n          imports: [\n            'vue',\n            'vue-router',\n            '@vueuse/head',\n            'pinia',\n            {\n              '@/store': ['useStore'],\n            },\n          ],\n          dts: 'src/auto-imports.d.ts',\n          eslintrc: {\n            enabled: true,\n          },\n        }),\n        Components({\n          dirs: ['src/components'],\n          extensions: ['vue'],\n        }),\n      ],\n      resolve: {\n        alias: {\n          '@': resolve(__dirname, './src'),\n        },\n      },\n    },\n  },\n});\n```\n\n### How can I test components that uses Pinia?[​](#how-can-i-test-components-that-uses-pinia \"Direct link to How can I test components that uses Pinia?\")\n\nPinia needs to be initialized in `playwright/index.{js,ts,jsx,tsx}`. If you do this inside a `beforeMount` hook, the `initialState` can be overwritten on a per-test basis:\n\n``` javascript\nimport { beforeMount, afterMount } from '@playwright/experimental-ct-vue/hooks';\nimport { createTestingPinia } from '@pinia/testing';\nimport type { StoreState } from 'pinia';\nimport type { useStore } from '../src/store';\n\nexport type HooksConfig = {\n  store?: StoreState<ReturnType<typeof useStore>>;\n}\n\nbeforeMount<HooksConfig>(async ({ hooksConfig }) => {\n  createTestingPinia({\n    initialState: hooksConfig?.store,\n    /**\n     * Use http intercepting to mock api calls instead:\n     * https://playwright.dev/docs/mock#mock-api-requests\n     */\n    stubActions: false,\n    createSpy(args) {\n      console.log('spy', args)\n      return () => console.log('spy-returns')\n    },\n  });\n});\n```\n\n``` javascript\nimport { test, expect } from '@playwright/experimental-ct-vue';\nimport type { HooksConfig } from '../playwright';\nimport Store from './Store.vue';\n\ntest('override initialState ', async ({ mount }) => {\n  const component = await mount<HooksConfig>(Store, {\n    hooksConfig: {\n      store: { name: 'override initialState' }\n    }\n  });\n  await expect(component).toContainText('override initialState');\n});\n```\n\n### How do I access the component's methods or its instance?[​](#how-do-i-access-the-components-methods-or-its-instance \"Direct link to How do I access the component's methods or its instance?\")\n\nAccessing a component's internal methods or its instance within test code is neither recommended nor supported. Instead, focus on observing and interacting with the component from a user's perspective, typically by clicking or verifying if something is visible on the page. Tests become less fragile and more valuable when they avoid interacting with internal implementation details, such as the component instance or its methods. Keep in mind that if a test fails when run from a user’s perspective, it likely means the automated test has uncovered a genuine bug in your code.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/test-components](https://playwright.dev/docs/test-components)"
- name: ConsoleMessage
  id: api/class-consolemessage
  summary: ConsoleMessage objects are dispatched by page via the page.on('console') event
  description: "# ConsoleMessage\n\n[ConsoleMessage](class-consolemessage \"ConsoleMessage\") objects are dispatched by page via the [page.on('console')](class-page#page-event-console) event. For each console message logged in the page there will be corresponding event in the Playwright context.\n\n``` javascript\n// Listen for all console logs\npage.on('console', msg => console.log(msg.text()));\n\n// Listen for all console events and handle errors\npage.on('console', msg => {\n  if (msg.type() === 'error')\n    console.log(`Error text: \"${msg.text()}\"`);\n});\n\n// Get the next console log\nconst msgPromise = page.waitForEvent('console');\nawait page.evaluate(() => {\n  console.log('hello', 42, { foo: 'bar' });  // Issue console.log inside the page\n});\nconst msg = await msgPromise;\n\n// Deconstruct console log arguments\nawait msg.args()[0].jsonValue(); // hello\nawait msg.args()[1].jsonValue(); // 42\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### args[​](#console-message-args \"Direct link to args\")\n\nAdded before v1.9\n\nList of arguments passed to a `console` function call. See also [page.on('console')](class-page#page-event-console).\n\n**Usage**\n\n``` javascript\nconsoleMessage.args();\n```\n\n**Returns**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[JSHandle](class-jshandle \"JSHandle\")\\>\n\n### location[​](#console-message-location \"Direct link to location\")\n\nAdded before v1.9\n\n**Usage**\n\n``` javascript\nconsoleMessage.location();\n```\n\n**Returns**\n\n- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    URL of the resource.\n\n  - `lineNumber` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    0-based line number in the resource.\n\n  - `columnNumber` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    0-based column number in the resource.\n\n### page[​](#console-message-page \"Direct link to page\")\n\nThe page that produced this console message, if any.\n\n**Usage**\n\n``` javascript\nconsoleMessage.page();\n```\n\n**Returns**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Page](class-page \"Page\")\n\n### text[​](#console-message-text \"Direct link to text\")\n\nAdded before v1.9\n\nThe text of the console message.\n\n**Usage**\n\n``` javascript\nconsoleMessage.text();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### type[​](#console-message-type \"Direct link to type\")\n\nAdded before v1.9\n\nOne of the following values: `'log'`, `'debug'`, `'info'`, `'error'`, `'warning'`, `'dir'`, `'dirxml'`, `'table'`, `'trace'`, `'clear'`, `'startGroup'`, `'startGroupCollapsed'`, `'endGroup'`, `'assert'`, `'profile'`, `'profileEnd'`, `'count'`, `'timeEnd'`.\n\n**Usage**\n\n``` javascript\nconsoleMessage.type();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-consolemessage](https://playwright.dev/docs/api/class-consolemessage)"
- name: consoleMessage.args
  id: api/class-consolemessage#console-message-args
  summary: List of arguments passed to a console function call
  belongs_to: ConsoleMessage
  description: |-
    ### args[​](#console-message-args "Direct link to args")

    Added before v1.9

    List of arguments passed to a `console` function call. See also [page.on('console')](class-page#page-event-console).

    **Usage**

    ``` javascript
    consoleMessage.args();
    ```

    **Returns**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[JSHandle](class-jshandle "JSHandle")\>
- name: consoleMessage.location
  id: api/class-consolemessage#console-message-location
  summary: URL of the resource
  belongs_to: ConsoleMessage
  description: |-
    ### location[​](#console-message-location "Direct link to location")

    Added before v1.9

    **Usage**

    ``` javascript
    consoleMessage.location();
    ```

    **Returns**

    - [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")
      - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        URL of the resource.

      - `lineNumber` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        0-based line number in the resource.

      - `columnNumber` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        0-based column number in the resource.

    &nbsp;
- name: consoleMessage.page
  id: api/class-consolemessage#console-message-page
  summary: The page that produced this console message, if any
  belongs_to: ConsoleMessage
  description: |-
    ### page[​](#console-message-page "Direct link to page")

    The page that produced this console message, if any.

    **Usage**

    ``` javascript
    consoleMessage.page();
    ```

    **Returns**

    - [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Page](class-page "Page")

    &nbsp;
- name: consoleMessage.text
  id: api/class-consolemessage#console-message-text
  summary: The text of the console message
  belongs_to: ConsoleMessage
  description: |-
    ### text[​](#console-message-text "Direct link to text")

    Added before v1.9

    The text of the console message.

    **Usage**

    ``` javascript
    consoleMessage.text();
    ```

    **Returns**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: consoleMessage.type
  id: api/class-consolemessage#console-message-type
  summary: © 2024 Microsoft Licensed under the Apache License, Version 2.0
  belongs_to: ConsoleMessage
  description: "### type[​](#console-message-type \"Direct link to type\")\n\nAdded before v1.9\n\nOne of the following values: `'log'`, `'debug'`, `'info'`, `'error'`, `'warning'`, `'dir'`, `'dirxml'`, `'table'`, `'trace'`, `'clear'`, `'startGroup'`, `'startGroupCollapsed'`, `'endGroup'`, `'assert'`, `'profile'`, `'profileEnd'`, `'count'`, `'timeEnd'`.\n\n**Usage**\n\n``` javascript\nconsoleMessage.type();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-consolemessage](https://playwright.dev/docs/api/class-consolemessage)"
- name: Continuous Integration
  id: ci
  summary: Playwright tests can be executed in CI environments
  description: "# Continuous Integration\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright tests can be executed in CI environments. We have created sample configurations for common CI providers.\n\n3 steps to get your tests running on CI:\n\n1.  **Ensure CI agent can run browsers**: Use [our Docker image](docker) in Linux agents or install your dependencies using the [CLI](browsers#install-system-dependencies).\n\n2.  **Install Playwright**:\n\n    ``` javascript\n    # Install NPM packages\n    npm ci\n\n    # Install Playwright browsers and dependencies\n    npx playwright install --with-deps\n    ```\n\n3.  **Run your tests**:\n\n    ``` javascript\n    npx playwright test\n    ```\n\n## Workers[​](#workers \"Direct link to Workers\")\n\nWe recommend setting [workers](api/class-testconfig#test-config-workers) to \"1\" in CI environments to prioritize stability and reproducibility. Running tests sequentially ensures each test gets the full system resources, avoiding potential conflicts. However, if you have a powerful self-hosted CI system, you may enable [parallel](test-parallel) tests. For wider parallelization, consider [sharding](test-parallel#shard-tests-between-multiple-machines) - distributing tests across multiple CI jobs.\n\n``` javascript\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  // Opt out of parallel tests on CI.\n  workers: process.env.CI ? 1 : undefined,\n});\n```\n\n## CI configurations[​](#ci-configurations \"Direct link to CI configurations\")\n\nThe [Command line tools](browsers#install-system-dependencies) can be used to install all operating system dependencies on GitHub Actions.\n\n### GitHub Actions[​](#github-actions \"Direct link to GitHub Actions\")\n\nCheck out our [GitHub Actions](ci-intro) guide for more information on how to run your tests on GitHub.\n\n### Docker[​](#docker \"Direct link to Docker\")\n\nWe have a [pre-built Docker image](docker) which can either be used directly, or as a reference to update your existing Docker definitions.\n\nSuggested configuration\n\n1.  Using `--ipc=host` is also recommended when using Chromium. Without it Chromium can run out of memory and crash. Learn more about this option in [Docker docs](https://docs.docker.com/engine/reference/run/#ipc-settings---ipc).\n2.  Seeing other weird errors when launching Chromium? Try running your container with `docker run --cap-add=SYS_ADMIN` when developing locally.\n3.  Using `--init` Docker flag or [dumb-init](https://github.com/Yelp/dumb-init) is recommended to avoid special treatment for processes with PID=1. This is a common reason for zombie processes.\n\n### Azure Pipelines[​](#azure-pipelines \"Direct link to Azure Pipelines\")\n\nFor Windows or macOS agents, no additional configuration required, just install Playwright and run your tests.\n\nFor Linux agents, you can use [our Docker container](docker) with Azure Pipelines support [running containerized jobs](https://docs.microsoft.com/en-us/azure/devops/pipelines/process/container-phases?view=azure-devops). Alternatively, you can use [Command line tools](browsers#install-system-dependencies) to install all necessary dependencies.\n\nFor running the Playwright tests use this pipeline task:\n\n``` javascript\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n- task: NodeTool@0\n  inputs:\n    versionSpec: '18'\n  displayName: 'Install Node.js'\n- script: npm ci\n  displayName: 'npm ci'\n- script: npx playwright install --with-deps\n  displayName: 'Install Playwright browsers'\n- script: npx playwright test\n  displayName: 'Run Playwright tests'\n  env:\n    CI: 'true'\n```\n\n#### Uploading playwright-report folder with Azure Pipelines[​](#uploading-playwright-report-folder-with-azure-pipelines \"Direct link to Uploading playwright-report folder with Azure Pipelines\")\n\nThis will make the pipeline run fail if any of the playwright tests fails. If you also want to integrate the test results with Azure DevOps, use the task `PublishTestResults` task like so:\n\n``` javascript\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n- task: NodeTool@0\n  inputs:\n    versionSpec: '18'\n  displayName: 'Install Node.js'\n\n- script: npm ci\n  displayName: 'npm ci'\n- script: npx playwright install --with-deps\n  displayName: 'Install Playwright browsers'\n- script: npx playwright test\n  displayName: 'Run Playwright tests'\n  env:\n    CI: 'true'\n- task: PublishTestResults@2\n  displayName: 'Publish test results'\n  inputs:\n    searchFolder: 'test-results'\n    testResultsFormat: 'JUnit'\n    testResultsFiles: 'e2e-junit-results.xml'\n    mergeTestResults: true\n    failTaskOnFailedTests: true\n    testRunTitle: 'My End-To-End Tests'\n  condition: succeededOrFailed()\n- task: PublishPipelineArtifact@1\n  inputs:\n    targetPath: playwright-report\n    artifact: playwright-report\n    publishLocation: 'pipeline'\n  condition: succeededOrFailed()\n```\n\nNote: The JUnit reporter needs to be configured accordingly via\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['junit', { outputFile: 'test-results/e2e-junit-results.xml' }]],\n});\n```\n\nin `playwright.config.ts`.\n\n#### Azure Pipelines (sharded)[​](#azure-pipelines-sharded \"Direct link to Azure Pipelines (sharded)\")\n\n``` javascript\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nstrategy:\n  matrix:\n    chromium-1:\n      project: chromium\n      shard: 1/3\n    chromium-2:\n      project: chromium\n      shard: 2/3\n    chromium-3:\n      project: chromium\n      shard: 3/3\n    firefox-1:\n      project: firefox\n      shard: 1/3\n    firefox-2:\n      project: firefox\n      shard: 2/3\n    firefox-3:\n      project: firefox\n      shard: 3/3\n    webkit-1:\n      project: webkit\n      shard: 1/3\n    webkit-2:\n      project: webkit\n      shard: 2/3\n    webkit-3:\n      project: webkit\n      shard: 3/3\nsteps:\n- task: NodeTool@0\n  inputs:\n    versionSpec: '18'\n  displayName: 'Install Node.js'\n\n- script: npm ci\n  displayName: 'npm ci'\n- script: npx playwright install --with-deps\n  displayName: 'Install Playwright browsers'\n- script: npx playwright test --project=$(project) --shard=$(shard)\n  displayName: 'Run Playwright tests'\n  env:\n    CI: 'true'\n```\n\n#### Azure Pipelines (containerized)[​](#azure-pipelines-containerized \"Direct link to Azure Pipelines (containerized)\")\n\n``` javascript\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\ncontainer: mcr.microsoft.com/playwright:v1.46.0-jammy\n\nsteps:\n- task: NodeTool@0\n  inputs:\n    versionSpec: '18'\n  displayName: 'Install Node.js'\n\n- script: npm ci\n  displayName: 'npm ci'\n- script: npx playwright test\n  displayName: 'Run Playwright tests'\n  env:\n    CI: 'true'\n```\n\n### CircleCI[​](#circleci \"Direct link to CircleCI\")\n\nRunning Playwright on CircleCI is very similar to running on GitHub Actions. In order to specify the pre-built Playwright [Docker image](docker), simply modify the agent definition with `docker:` in your config like so:\n\n``` javascript\nexecutors:\n  pw-jammy-development:\n    docker:\n      - image: mcr.microsoft.com/playwright:v1.46.0-jammy\n```\n\nNote: When using the docker agent definition, you are specifying the resource class of where playwright runs to the 'medium' tier [here](https://circleci.com/docs/configuration-reference?#docker-execution-environment). The default behavior of Playwright is to set the number of workers to the detected core count (2 in the case of the medium tier). Overriding the number of workers to greater than this number will cause unnecessary timeouts and failures.\n\n#### Sharding in CircleCI[​](#sharding-in-circleci \"Direct link to Sharding in CircleCI\")\n\nSharding in CircleCI is indexed with 0 which means that you will need to override the default parallelism ENV VARS. The following example demonstrates how to run Playwright with a CircleCI Parallelism of 4 by adding 1 to the `CIRCLE_NODE_INDEX` to pass into the `--shard` cli arg.\n\n``` javascript\n  playwright-job-name:\n    executor: pw-jammy-development\n    parallelism: 4\n    steps:\n      - run: SHARD=\"$((${CIRCLE_NODE_INDEX}+1))\"; npx playwright test -- --shard=${SHARD}/${CIRCLE_NODE_TOTAL}\n```\n\n### Jenkins[​](#jenkins \"Direct link to Jenkins\")\n\nJenkins supports Docker agents for pipelines. Use the [Playwright Docker image](docker) to run tests on Jenkins.\n\n``` javascript\npipeline {\n   agent { docker { image 'mcr.microsoft.com/playwright:v1.46.0-jammy' } }\n   stages {\n      stage('e2e-tests') {\n         steps {\n            sh 'npm ci'\n            sh 'npx playwright test'\n         }\n      }\n   }\n}\n```\n\n### Bitbucket Pipelines[​](#bitbucket-pipelines \"Direct link to Bitbucket Pipelines\")\n\nBitbucket Pipelines can use public [Docker images as build environments](https://confluence.atlassian.com/bitbucket/use-docker-images-as-build-environments-792298897.html). To run Playwright tests on Bitbucket, use our public Docker image ([see Dockerfile](docker)).\n\n``` javascript\nimage: mcr.microsoft.com/playwright:v1.46.0-jammy\n```\n\n### GitLab CI[​](#gitlab-ci \"Direct link to GitLab CI\")\n\nTo run Playwright tests on GitLab, use our public Docker image ([see Dockerfile](docker)).\n\n``` javascript\nstages:\n  - test\n\ntests:\n  stage: test\n  image: mcr.microsoft.com/playwright:v1.46.0-jammy\n  script:\n  ...\n```\n\n#### Sharding[​](#sharding \"Direct link to Sharding\")\n\nGitLab CI supports [sharding tests between multiple jobs](https://docs.gitlab.com/ee/ci/jobs/job_control.html#parallelize-large-jobs) using the [parallel](https://docs.gitlab.com/ee/ci/yaml/index.html#parallel) keyword. The test job will be split into multiple smaller jobs that run in parallel. Parallel jobs are named sequentially from `job_name 1/N` to `job_name N/N`.\n\n``` javascript\nstages:\n  - test\n\ntests:\n  stage: test\n  image: mcr.microsoft.com/playwright:v1.46.0-jammy\n  parallel: 7\n  script:\n    - npm ci\n    - npx playwright test --shard=$CI_NODE_INDEX/$CI_NODE_TOTAL\n```\n\nGitLab CI also supports sharding tests between multiple jobs using the [parallel:matrix](https://docs.gitlab.com/ee/ci/yaml/index.html#parallelmatrix) option. The test job will run multiple times in parallel in a single pipeline, but with different variable values for each instance of the job. In the example below, we have 2 `PROJECT` values and 10 `SHARD` values, resulting in a total of 20 jobs to be run.\n\n``` javascript\nstages:\n  - test\n\ntests:\n  stage: test\n  image: mcr.microsoft.com/playwright:v1.46.0-jammy\n  parallel:\n    matrix:\n      - PROJECT: ['chromium', 'webkit']\n        SHARD: ['1/10', '2/10', '3/10', '4/10', '5/10', '6/10', '7/10', '8/10', '9/10', '10/10']\n  script:\n    - npm ci\n    - npx playwright test --project=$PROJECT --shard=$SHARD\n```\n\n### Google Cloud Build[​](#google-cloud-build \"Direct link to Google Cloud Build\")\n\nTo run Playwright tests on Google Cloud Build, use our public Docker image ([see Dockerfile](docker)).\n\n``` javascript\nsteps:\n- name: mcr.microsoft.com/playwright:v1.46.0-jammy\n  script: \n  ...\n  env:\n  - 'CI=true'\n```\n\n### Drone[​](#drone \"Direct link to Drone\")\n\nTo run Playwright tests on Drone, use our public Docker image ([see Dockerfile](docker)).\n\n``` javascript\nkind: pipeline\nname: default\ntype: docker\n\nsteps:\n  - name: test\n    image: mcr.microsoft.com/playwright:v1.46.0-jammy\n    commands:\n      - npx playwright test\n```\n\n## Caching browsers[​](#caching-browsers \"Direct link to Caching browsers\")\n\nCaching browser binaries is not recommended, since the amount of time it takes to restore the cache is comparable to the time it takes to download the binaries. Especially under Linux, [operating system dependencies](browsers#install-system-dependencies) need to be installed, which are not cacheable.\n\nIf you still want to cache the browser binaries between CI runs, cache [these directories](browsers#managing-browser-binaries) in your CI configuration, against a hash of the Playwright version.\n\n## Debugging browser launches[​](#debugging-browser-launches \"Direct link to Debugging browser launches\")\n\nPlaywright supports the `DEBUG` environment variable to output debug logs during execution. Setting it to `pw:browser` is helpful while debugging `Error: Failed to launch browser` errors.\n\n``` javascript\nDEBUG=pw:browser npx playwright test\n```\n\n## Running headed[​](#running-headed \"Direct link to Running headed\")\n\nBy default, Playwright launches browsers in headless mode. See in our [Running tests](running-tests#run-tests-in-headed-mode) guide how to run tests in headed mode.\n\nOn Linux agents, headed execution requires [Xvfb](https://en.wikipedia.org/wiki/Xvfb) to be installed. Our [Docker image](docker) and GitHub Action have Xvfb pre-installed. To run browsers in headed mode with Xvfb, add `xvfb-run` before the actual command.\n\n``` javascript\nxvfb-run npx playwright test\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/ci](https://playwright.dev/docs/ci)"
- name: Coverage
  id: api/class-coverage
  summary: Coverage gathers information about parts of JavaScript and CSS that were used by the page
  description: "# Coverage\n\nCoverage gathers information about parts of JavaScript and CSS that were used by the page.\n\nAn example of using JavaScript coverage to produce Istanbul report for page load:\n\n> note\n>\n> Coverage APIs are only supported on Chromium-based browsers.\n\n``` javascript\nconst { chromium } = require('playwright');\nconst v8toIstanbul = require('v8-to-istanbul');\n\n(async () => {\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n  await page.coverage.startJSCoverage();\n  await page.goto('https://chromium.org');\n  const coverage = await page.coverage.stopJSCoverage();\n  for (const entry of coverage) {\n    const converter = v8toIstanbul('', 0, { source: entry.source });\n    await converter.load();\n    converter.applyCoverage(entry.functions);\n    console.log(JSON.stringify(converter.toIstanbul()));\n  }\n  await browser.close();\n})();\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### startCSSCoverage[​](#coverage-start-css-coverage \"Direct link to startCSSCoverage\")\n\nReturns coverage is started\n\n**Usage**\n\n``` javascript\nawait coverage.startCSSCoverage();\nawait coverage.startCSSCoverage(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `resetOnNavigation` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to reset coverage on every navigation. Defaults to `true`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### startJSCoverage[​](#coverage-start-js-coverage \"Direct link to startJSCoverage\")\n\nReturns coverage is started\n\n> note\n>\n> Anonymous scripts are ones that don't have an associated url. These are scripts that are dynamically created on the page using `eval` or `new Function`. If `reportAnonymousScripts` is set to `true`, anonymous scripts will have `__playwright_evaluation_script__` as their URL.\n\n**Usage**\n\n``` javascript\nawait coverage.startJSCoverage();\nawait coverage.startJSCoverage(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `reportAnonymousScripts` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether anonymous scripts generated by the page should be reported. Defaults to `false`.\n\n  - `resetOnNavigation` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to reset coverage on every navigation. Defaults to `true`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### stopCSSCoverage[​](#coverage-stop-css-coverage \"Direct link to stopCSSCoverage\")\n\nReturns the array of coverage reports for all stylesheets\n\n> note\n>\n> CSS Coverage doesn't include dynamically injected style tags without sourceURLs.\n\n**Usage**\n\n``` javascript\nawait coverage.stopCSSCoverage();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\\>\n  - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    StyleSheet URL\n\n  - `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    StyleSheet content, if available.\n\n  - `ranges` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n    - `start` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      A start offset in text, inclusive\n\n    - `end` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      An end offset in text, exclusive\n\n    StyleSheet ranges that were used. Ranges are sorted and non-overlapping.\n\n### stopJSCoverage[​](#coverage-stop-js-coverage \"Direct link to stopJSCoverage\")\n\nReturns the array of coverage reports for all scripts\n\n> note\n>\n> JavaScript Coverage doesn't include anonymous scripts by default. However, scripts with sourceURLs are reported.\n\n**Usage**\n\n``` javascript\nawait coverage.stopJSCoverage();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\\>\n  - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Script URL\n\n  - `scriptId` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Script ID\n\n  - `source` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Script content, if applicable.\n\n  - `functions` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n    - `functionName` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `isBlockCoverage` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    - `ranges` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n      - `count` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      - `startOffset` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      - `endOffset` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    V8-specific coverage format.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-coverage](https://playwright.dev/docs/api/class-coverage)"
- name: coverage.startCSSCoverage
  id: api/class-coverage#coverage-start-css-coverage
  summary: Whether to reset coverage on every navigation
  belongs_to: Coverage
  description: |-
    ### startCSSCoverage[​](#coverage-start-css-coverage "Direct link to startCSSCoverage")

    Returns coverage is started

    **Usage**

    ``` javascript
    await coverage.startCSSCoverage();
    await coverage.startCSSCoverage(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `resetOnNavigation` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to reset coverage on every navigation. Defaults to `true`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>
- name: coverage.startJSCoverage
  id: api/class-coverage#coverage-start-js-coverage
  summary: Anonymous scripts are ones that don't have an associated url
  belongs_to: Coverage
  description: |-
    ### startJSCoverage[​](#coverage-start-js-coverage "Direct link to startJSCoverage")

    Returns coverage is started

    > note
    >
    > Anonymous scripts are ones that don't have an associated url. These are scripts that are dynamically created on the page using `eval` or `new Function`. If `reportAnonymousScripts` is set to `true`, anonymous scripts will have `__playwright_evaluation_script__` as their URL.

    **Usage**

    ``` javascript
    await coverage.startJSCoverage();
    await coverage.startJSCoverage(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `reportAnonymousScripts` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether anonymous scripts generated by the page should be reported. Defaults to `false`.

      - `resetOnNavigation` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to reset coverage on every navigation. Defaults to `true`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: coverage.stopCSSCoverage
  id: api/class-coverage#coverage-stop-css-coverage
  summary: CSS Coverage doesn't include dynamically injected style tags without sourceURLs
  belongs_to: Coverage
  description: |-
    ### stopCSSCoverage[​](#coverage-stop-css-coverage "Direct link to stopCSSCoverage")

    Returns the array of coverage reports for all stylesheets

    > note
    >
    > CSS Coverage doesn't include dynamically injected style tags without sourceURLs.

    **Usage**

    ``` javascript
    await coverage.stopCSSCoverage();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\>
      - `url`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        StyleSheet URL

      - `text`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")*(optional)*

        StyleSheet content, if available.

      - `ranges`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>

        - `start`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          A start offset in text, inclusive

        - `end`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          An end offset in text, exclusive

        StyleSheet ranges that were used. Ranges are sorted and non-overlapping.

    &nbsp;
- name: coverage.stopJSCoverage
  id: api/class-coverage#coverage-stop-js-coverage
  summary: JavaScript Coverage doesn't include anonymous scripts by default
  belongs_to: Coverage
  description: "### stopJSCoverage[​](#coverage-stop-js-coverage \"Direct link to stopJSCoverage\")\n\nReturns the array of coverage reports for all scripts\n\n> note\n>\n> JavaScript Coverage doesn't include anonymous scripts by default. However, scripts with sourceURLs are reported.\n\n**Usage**\n\n``` javascript\nawait coverage.stopJSCoverage();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\\>\n  - `url`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Script URL\n\n  - `scriptId`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Script ID\n\n  - `source`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")*(optional)*\n\n    Script content, if applicable.\n\n  - `functions`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n    - `functionName`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `isBlockCoverage`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    - `ranges`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n      - `count`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      - `startOffset`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      - `endOffset`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    V8-specific coverage format.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-coverage](https://playwright.dev/docs/api/class-coverage)"
- name: Debugging Tests
  id: debug
  summary: We recommend using the VS Code Extension for debugging for a better developer experience
  description: "# Debugging Tests\n\n## VS Code debugger[​](#vs-code-debugger \"Direct link to VS Code debugger\")\n\nWe recommend using the [VS Code Extension](getting-started-vscode) for debugging for a better developer experience. With the VS Code extension you can debug your tests right in VS Code, see error messages, set breakpoints and step through your tests.\n\n### Error Messages[​](#error-messages \"Direct link to Error Messages\")\n\nIf your test fails VS Code will show you error messages right in the editor showing what was expected, what was received as well as a complete call log.\n\n### Live Debugging[​](#live-debugging \"Direct link to Live Debugging\")\n\nYou can debug your test live in VS Code. After running a test with the `Show Browser` option checked, click on any of the locators in VS Code and it will be highlighted in the Browser window. Playwright will also show you if there are multiple matches.\n\nYou can also edit the locators in VS Code and Playwright will show you the changes live in the browser window.\n\n### Picking a Locator[​](#picking-a-locator \"Direct link to Picking a Locator\")\n\nPick a [locator](locators) and copy it into your test file by clicking the **Pick locator** button form the testing sidebar. Then in the browser click the element you require and it will now show up in the **Pick locator** box in VS Code. Press 'enter' on your keyboard to copy the locator into the clipboard and then paste anywhere in your code. Or press 'escape' if you want to cancel.\n\nPlaywright will look at your page and figure out the best locator, prioritizing [role, text and test id locators](locators). If Playwright finds multiple elements matching the locator, it will improve the locator to make it resilient and uniquely identify the target element, so you don't have to worry about failing tests due to locators.\n\n### Run in Debug Mode[​](#run-in-debug-mode \"Direct link to Run in Debug Mode\")\n\nTo set a breakpoint click next to the line number where you want the breakpoint to be until a red dot appears. Run the tests in debug mode by right clicking on the line next to the test you want to run.\n\nA browser window will open and the test will run and pause at where the breakpoint is set. You can step through the tests, pause the test and rerun the tests from the menu in VS Code.\n\n### Debug in different Browsers[​](#debug-in-different-browsers \"Direct link to Debug in different Browsers\")\n\nBy default, debugging is done using the Chromium profile. You can debug your tests on different browsers by right clicking on the debug icon in the testing sidebar and clicking on the 'Select Default Profile' option from the dropdown.\n\nThen choose the test profile you would like to use for debugging your tests. Each time you run your test in debug mode it will use the profile you selected. You can run tests in debug mode by right clicking the line number where your test is and selecting 'Debug Test' from the menu.\n\nTo learn more about debugging, see [Debugging in Visual Studio Code](https://code.visualstudio.com/docs/editor/debugging).\n\n## Playwright Inspector[​](#playwright-inspector \"Direct link to Playwright Inspector\")\n\nThe Playwright Inspector is a GUI tool to help you debug your Playwright tests. It allows you to step through your tests, live edit locators, pick locators and see actionability logs.\n\n### Run in debug mode[​](#run-in-debug-mode-1 \"Direct link to Run in debug mode\")\n\nRun your tests with the `--debug` flag to open the inspector. This configures Playwright for debugging and opens the inspector. Additional useful defaults are configured when `--debug` is used:\n\n- Browsers launch in headed mode\n- Default timeout is set to 0 (= no timeout)\n\n#### Debug all tests on all browsers[​](#debug-all-tests-on-all-browsers \"Direct link to Debug all tests on all browsers\")\n\nTo debug all tests run the test command with the `--debug` flag. This will run tests one by one, and open the inspector and a browser window for each test.\n\n``` javascript\nnpx playwright test --debug\n```\n\n#### Debug one test on all browsers[​](#debug-one-test-on-all-browsers \"Direct link to Debug one test on all browsers\")\n\nTo debug one test on a specific line, run the test command followed by the name of the test file and the line number of the test you want to debug, followed by the `--debug` flag. This will run a single test in each browser configured in your [`playwright.config`](test-projects#configure-projects-for-multiple-browsers) and open the inspector.\n\n``` javascript\nnpx playwright test example.spec.ts:10 --debug\n```\n\n#### Debug on a specific browser[​](#debug-on-a-specific-browser \"Direct link to Debug on a specific browser\")\n\nIn Playwright you can configure projects in your [`playwright.config`](test-projects#configure-projects-for-multiple-browsers). Once configured you can then debug your tests on a specific browser or mobile viewport using the `--project` flag followed by the name of the project configured in your `playwright.config`.\n\n``` javascript\nnpx playwright test --project=chromium --debug\nnpx playwright test --project=\"Mobile Safari\" --debug\nnpx playwright test --project=\"Microsoft Edge\" --debug\n```\n\n#### Debug one test on a specific browser[​](#debug-one-test-on-a-specific-browser \"Direct link to Debug one test on a specific browser\")\n\nTo run one test on a specific browser add the name of the test file and the line number of the test you want to debug as well as the `--project` flag followed by the name of the project.\n\n``` javascript\nnpx playwright test example.spec.ts:10 --project=webkit --debug\n```\n\n### Stepping through your tests[​](#stepping-through-your-tests \"Direct link to Stepping through your tests\")\n\nYou can play, pause or step through each action of your test using the toolbar at the top of the Inspector. You can see the current action highlighted in the test code, and matching elements highlighted in the browser window.\n\n### Run a test from a specific breakpoint[​](#run-a-test-from-a-specific-breakpoint \"Direct link to Run a test from a specific breakpoint\")\n\nTo speed up the debugging process you can add a [page.pause()](api/class-page#page-pause) method to your test. This way you won't have to step through each action of your test to get to the point where you want to debug.\n\n``` javascript\nawait page.pause();\n```\n\nOnce you add a `page.pause()` call, run your tests in debug mode. Clicking the \"Resume\" button in the Inspector will run the test and only stop on the `page.pause()`.\n\n### Live editing locators[​](#live-editing-locators \"Direct link to Live editing locators\")\n\nWhile running in debug mode you can live edit the locators. Next to the 'Pick Locator' button there is a field showing the [locator](locators) that the test is paused on. You can edit this locator directly in the **Pick Locator** field, and matching elements will be highlighted in the browser window.\n\n### Picking locators[​](#picking-locators \"Direct link to Picking locators\")\n\nWhile debugging, you might need to choose a more resilient locator. You can do this by clicking on the **Pick Locator** button and hovering over any element in the browser window. While hovering over an element you will see the code needed to locate this element highlighted below. Clicking an element in the browser will add the locator into the field where you can then either tweak it or copy it into your code.\n\nPlaywright will look at your page and figure out the best locator, prioritizing [role, text and test id locators](locators). If Playwright finds multiple elements matching the locator, it will improve the locator to make it resilient and uniquely identify the target element, so you don't have to worry about failing tests due to locators.\n\n### Actionability logs[​](#actionability-logs \"Direct link to Actionability logs\")\n\nBy the time Playwright has paused on a click action, it has already performed [actionability checks](actionability) that can be found in the log. This can help you understand what happened during your test and what Playwright did or tried to do. The log tells you if the element was visible, enabled and stable, if the locator resolved to an element, scrolled into view, and so much more. If actionability can't be reached, it will show the action as pending.\n\n## Trace Viewer[​](#trace-viewer \"Direct link to Trace Viewer\")\n\nPlaywright [Trace Viewer](trace-viewer) is a GUI tool that lets you explore recorded Playwright traces of your tests. You can go back and forward through each action on the left side, and visually see what was happening during the action. In the middle of the screen, you can see a DOM snapshot for the action. On the right side you can see action details, such as time, parameters, return value and log. You can also explore console messages, network requests and the source code.\n\nTo learn more about how to record traces and use the Trace Viewer, check out the [Trace Viewer](trace-viewer) guide.\n\n## Browser Developer Tools[​](#browser-developer-tools \"Direct link to Browser Developer Tools\")\n\nWhen running in Debug Mode with `PWDEBUG=console`, a `playwright` object is available in the Developer tools console. Developer tools can help you to:\n\n- Inspect the DOM tree and **find element selectors**\n- **See console logs** during execution (or learn how to [read logs via API](api/class-page#page-event-console))\n- Check **network activity** and other developer tools features\n\nThis will also set the default timeouts of Playwright to 0 (= no timeout).\n\nTo debug your tests using the browser developer tools, start by setting a breakpoint in your test to pause the execution using the [page.pause()](api/class-page#page-pause) method.\n\n``` javascript\nawait page.pause();\n```\n\nOnce you have set a breakpoint in your test, you can then run your test with `PWDEBUG=console`.\n\n- Bash\n- PowerShell\n- Batch\n\n``` javascript\nPWDEBUG=console npx playwright test\n```\n\n``` javascript\n$env:PWDEBUG=\"console\"\nnpx playwright test\n```\n\n``` javascript\nset PWDEBUG=console\nnpx playwright test\n```\n\nOnce Playwright launches the browser window, you can open the developer tools. The `playwright` object will be available in the console panel.\n\n#### playwright.$(selector)[​](#playwrightselector \"Direct link to playwright.$(selector)\")\n\nQuery the Playwright selector, using the actual Playwright query engine, for example:\n\n``` javascript\nplaywright.$('.auth-form >> text=Log in');\n\n<button>Log in</button>\n```\n\n#### playwright.$$(selector)[​](#playwrightselector-1 \"Direct link to playwright.$$(selector)\")\n\nSame as `playwright.$`, but returns all matching elements.\n\n``` javascript\nplaywright.$$('li >> text=John')\n\n[<li>, <li>, <li>, <li>]\n```\n\n#### playwright.inspect(selector)[​](#playwrightinspectselector \"Direct link to playwright.inspect(selector)\")\n\nReveal element in the Elements panel.\n\n``` javascript\nplaywright.inspect('text=Log in')\n```\n\n#### playwright.locator(selector)[​](#playwrightlocatorselector \"Direct link to playwright.locator(selector)\")\n\nCreate a locator and query matching elements, for example:\n\n``` javascript\nplaywright.locator('.auth-form', { hasText: 'Log in' });\n\nLocator ()\n  - element: button\n  - elements: [button]\n```\n\n#### playwright.selector(element)[​](#playwrightselectorelement \"Direct link to playwright.selector(element)\")\n\nGenerates selector for the given element. For example, select an element in the Elements panel and pass `$0`:\n\n``` javascript\nplaywright.selector($0)\n\n\"div[id=\"glow-ingress-block\"] >> text=/.*Hello.*/\"\n```\n\n## Verbose API logs[​](#verbose-api-logs \"Direct link to Verbose API logs\")\n\nPlaywright supports verbose logging with the `DEBUG` environment variable.\n\n- Bash\n- PowerShell\n- Batch\n\n``` javascript\nDEBUG=pw:api npx playwright test\n```\n\n``` javascript\n$env:DEBUG=\"pw:api\"\nnpx playwright test\n```\n\n``` javascript\nset DEBUG=pw:api\nnpx playwright test\n```\n\n> note\n>\n> **For WebKit**: launching WebKit Inspector during the execution will prevent the Playwright script from executing any further and will reset pre-configured user agent and device emulation.\n\n## Headed mode[​](#headed-mode \"Direct link to Headed mode\")\n\nPlaywright runs browsers in headless mode by default. To change this behavior, use `headless: false` as a launch option.\n\nYou can also use the `slowMo` option to slow down execution (by N milliseconds per operation) and follow along while debugging.\n\n``` javascript\n// Chromium, Firefox, or WebKit\nawait chromium.launch({ headless: false, slowMo: 100 });\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/debug](https://playwright.dev/docs/debug)"
- name: Dialog
  id: api/class-dialog
  summary: Dialog objects are dispatched by page via the page.on('dialog') event
  description: "# Dialog\n\n[Dialog](class-dialog \"Dialog\") objects are dispatched by page via the [page.on('dialog')](class-page#page-event-dialog) event.\n\nAn example of using `Dialog` class:\n\n``` javascript\nconst { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.\n\n(async () => {\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n  page.on('dialog', async dialog => {\n    console.log(dialog.message());\n    await dialog.dismiss();\n  });\n  await page.evaluate(() => alert('1'));\n  await browser.close();\n})();\n```\n\n> note\n>\n> Dialogs are dismissed automatically, unless there is a [page.on('dialog')](class-page#page-event-dialog) listener. When listener is present, it **must** either [dialog.accept()](class-dialog#dialog-accept) or [dialog.dismiss()](class-dialog#dialog-dismiss) the dialog - otherwise the page will [freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#never_blocking) waiting for the dialog, and actions like click will never finish.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### accept[​](#dialog-accept \"Direct link to accept\")\n\nAdded before v1.9\n\nReturns when the dialog has been accepted.\n\n**Usage**\n\n``` javascript\nawait dialog.accept();\nawait dialog.accept(promptText);\n```\n\n**Arguments**\n\n- `promptText` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  A text to enter in prompt. Does not cause any effects if the dialog's `type` is not prompt. Optional.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### defaultValue[​](#dialog-default-value \"Direct link to defaultValue\")\n\nAdded before v1.9\n\nIf dialog is prompt, returns default prompt value. Otherwise, returns empty string.\n\n**Usage**\n\n``` javascript\ndialog.defaultValue();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### dismiss[​](#dialog-dismiss \"Direct link to dismiss\")\n\nAdded before v1.9\n\nReturns when the dialog has been dismissed.\n\n**Usage**\n\n``` javascript\nawait dialog.dismiss();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### message[​](#dialog-message \"Direct link to message\")\n\nAdded before v1.9\n\nA message displayed in the dialog.\n\n**Usage**\n\n``` javascript\ndialog.message();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### page[​](#dialog-page \"Direct link to page\")\n\nThe page that initiated this dialog, if available.\n\n**Usage**\n\n``` javascript\ndialog.page();\n```\n\n**Returns**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Page](class-page \"Page\")\n\n### type[​](#dialog-type \"Direct link to type\")\n\nAdded before v1.9\n\nReturns dialog's type, can be one of `alert`, `beforeunload`, `confirm` or `prompt`.\n\n**Usage**\n\n``` javascript\ndialog.type();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-dialog](https://playwright.dev/docs/api/class-dialog)"
- name: dialog.accept
  id: api/class-dialog#dialog-accept
  summary: Returns when the dialog has been accepted
  belongs_to: Dialog
  description: |-
    ### accept[​](#dialog-accept "Direct link to accept")

    Added before v1.9

    Returns when the dialog has been accepted.

    **Usage**

    ``` javascript
    await dialog.accept();
    await dialog.accept(promptText);
    ```

    **Arguments**

    - `promptText` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      A text to enter in prompt. Does not cause any effects if the dialog's `type` is not prompt. Optional.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>
- name: dialog.defaultValue
  id: api/class-dialog#dialog-default-value
  summary: If dialog is prompt, returns default prompt value
  belongs_to: Dialog
  description: |-
    ### defaultValue[​](#dialog-default-value "Direct link to defaultValue")

    Added before v1.9

    If dialog is prompt, returns default prompt value. Otherwise, returns empty string.

    **Usage**

    ``` javascript
    dialog.defaultValue();
    ```

    **Returns**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: dialog.dismiss
  id: api/class-dialog#dialog-dismiss
  summary: Returns when the dialog has been dismissed
  belongs_to: Dialog
  description: |-
    ### dismiss[​](#dialog-dismiss "Direct link to dismiss")

    Added before v1.9

    Returns when the dialog has been dismissed.

    **Usage**

    ``` javascript
    await dialog.dismiss();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: dialog.message
  id: api/class-dialog#dialog-message
  summary: A message displayed in the dialog
  belongs_to: Dialog
  description: |-
    ### message[​](#dialog-message "Direct link to message")

    Added before v1.9

    A message displayed in the dialog.

    **Usage**

    ``` javascript
    dialog.message();
    ```

    **Returns**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: dialog.page
  id: api/class-dialog#dialog-page
  summary: The page that initiated this dialog, if available
  belongs_to: Dialog
  description: |-
    ### page[​](#dialog-page "Direct link to page")

    The page that initiated this dialog, if available.

    **Usage**

    ``` javascript
    dialog.page();
    ```

    **Returns**

    - [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Page](class-page "Page")

    &nbsp;
- name: dialog.type
  id: api/class-dialog#dialog-type
  summary: Returns dialog's type, can be one of alert, beforeunload, confirm or prompt
  belongs_to: Dialog
  description: "### type[​](#dialog-type \"Direct link to type\")\n\nAdded before v1.9\n\nReturns dialog's type, can be one of `alert`, `beforeunload`, `confirm` or `prompt`.\n\n**Usage**\n\n``` javascript\ndialog.type();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-dialog](https://playwright.dev/docs/api/class-dialog)"
- name: Dialogs
  id: dialogs
  summary: Playwright can interact with the web page dialogs such as alert, confirm, prompt as well as beforeunload confirmation
  description: "# Dialogs\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright can interact with the web page dialogs such as [`alert`](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert), [`confirm`](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm), [`prompt`](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt) as well as [`beforeunload`](https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event) confirmation. For print dialogs, see [Print](#print-dialogs).\n\n## alert(), confirm(), prompt() dialogs[​](#alert-confirm-prompt-dialogs \"Direct link to alert(), confirm(), prompt() dialogs\")\n\nBy default, dialogs are auto-dismissed by Playwright, so you don't have to handle them. However, you can register a dialog handler before the action that triggers the dialog to either [dialog.accept()](api/class-dialog#dialog-accept) or [dialog.dismiss()](api/class-dialog#dialog-dismiss) it.\n\n``` javascript\npage.on('dialog', dialog => dialog.accept());\nawait page.getByRole('button').click();\n```\n\n> note\n>\n> [page.on('dialog')](api/class-page#page-event-dialog) listener **must handle** the dialog. Otherwise your action will stall, be it [locator.click()](api/class-locator#locator-click) or something else. That's because dialogs in Web are modals and therefore block further page execution until they are handled.\n\nAs a result, the following snippet will never resolve:\n\n> warning\n>\n> WRONG!\n\n``` javascript\npage.on('dialog', dialog => console.log(dialog.message()));\nawait page.getByRole('button').click(); // Will hang here\n```\n\n> note\n>\n> If there is no listener for [page.on('dialog')](api/class-page#page-event-dialog), all dialogs are automatically dismissed.\n\n## beforeunload dialog[​](#beforeunload-dialog \"Direct link to beforeunload dialog\")\n\nWhen [page.close()](api/class-page#page-close) is invoked with the truthy `runBeforeUnload` value, the page runs its unload handlers. This is the only case when [page.close()](api/class-page#page-close) does not wait for the page to actually close, because it might be that the page stays open in the end of the operation.\n\nYou can register a dialog handler to handle the `beforeunload` dialog yourself:\n\n``` javascript\npage.on('dialog', async dialog => {\n  assert(dialog.type() === 'beforeunload');\n  await dialog.dismiss();\n});\nawait page.close({ runBeforeUnload: true });\n```\n\n## Print dialogs[​](#print-dialogs \"Direct link to Print dialogs\")\n\nIn order to assert that a print dialog via [`window.print`](https://developer.mozilla.org/en-US/docs/Web/API/Window/print) was triggered, you can use the following snippet:\n\n``` javascript\nawait page.goto('<url>');\n\nawait page.evaluate('(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()');\nawait page.getByText('Print it!').click();\n\nawait page.waitForFunction('window.waitForPrintDialog');\n```\n\nThis will wait for the print dialog to be opened after the button is clicked. Make sure to evaluate the script before clicking the button / after the page is loaded.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/dialogs](https://playwright.dev/docs/dialogs)"
- name: Docker
  id: docker
  summary: Dockerfile.jammy can be used to run Playwright scripts in Docker environment
  description: "# Docker\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\n[Dockerfile.jammy](https://github.com/microsoft/playwright/blob/main/utils/docker/Dockerfile.jammy \"Dockerfile.jammy\") can be used to run Playwright scripts in Docker environment. This image includes the [Playwright browsers](browsers#install-browsers) and [browser system dependencies](browsers#install-system-dependencies). The Playwright package/dependency is not included in the image and should be installed separately.\n\n## Usage[​](#usage \"Direct link to Usage\")\n\nThis Docker image is published to [Microsoft Artifact Registry](https://mcr.microsoft.com/en-us/product/playwright/about \"Microsoft Artifact Registry\").\n\n> info\n>\n> This Docker image is intended to be used for testing and development purposes only. It is not recommended to use this Docker image to visit untrusted websites.\n\n### Pull the image[​](#pull-the-image \"Direct link to Pull the image\")\n\n``` javascript\ndocker pull mcr.microsoft.com/playwright:v1.46.0-jammy\n```\n\n### Run the image[​](#run-the-image \"Direct link to Run the image\")\n\nBy default, the Docker image will use the `root` user to run the browsers. This will disable the Chromium sandbox which is not available with root. If you run trusted code (e.g. End-to-end tests) and want to avoid the hassle of managing separate user then the root user may be fine. For web scraping or crawling, we recommend to create a separate user inside the Docker container and use the seccomp profile.\n\n#### End-to-end tests[​](#end-to-end-tests \"Direct link to End-to-end tests\")\n\nOn trusted websites, you can avoid creating a separate user and use root for it since you trust the code which will run on the browsers.\n\n``` javascript\ndocker run -it --rm --ipc=host mcr.microsoft.com/playwright:v1.46.0-jammy /bin/bash\n```\n\n#### Crawling and scraping[​](#crawling-and-scraping \"Direct link to Crawling and scraping\")\n\nOn untrusted websites, it's recommended to use a separate user for launching the browsers in combination with the seccomp profile. Inside the container or if you are using the Docker image as a base image you have to use `adduser` for it.\n\n``` javascript\ndocker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright:v1.46.0-jammy /bin/bash\n```\n\n[`seccomp_profile.json`](https://github.com/microsoft/playwright/blob/main/utils/docker/seccomp_profile.json) is needed to run Chromium with sandbox. This is a [default Docker seccomp profile](https://github.com/docker/engine/blob/d0d99b04cf6e00ed3fc27e81fc3d94e7eda70af3/profiles/seccomp/default.json) with extra user namespace cloning permissions:\n\n``` javascript\n{\n  \"comment\": \"Allow create user namespaces\",\n  \"names\": [\n    \"clone\",\n    \"setns\",\n    \"unshare\"\n  ],\n  \"action\": \"SCMP_ACT_ALLOW\",\n  \"args\": [],\n  \"includes\": {},\n  \"excludes\": {}\n}\n```\n\n> note\n>\n> Using `--ipc=host` is recommended when using Chrome ([Docker docs](https://docs.docker.com/engine/reference/run/#ipc-settings---ipc)). Chrome can run out of memory without this flag.\n\n### Using on CI[​](#using-on-ci \"Direct link to Using on CI\")\n\nSee our [Continuous Integration guides](ci) for sample configs.\n\n## Image tags[​](#image-tags \"Direct link to Image tags\")\n\nSee [all available image tags](https://mcr.microsoft.com/en-us/product/playwright/about \"all available image tags\").\n\nWe currently publish images with the following tags:\n\n- `:next` - tip-of-tree image version based on Ubuntu 22.04 LTS (Jammy Jellyfish).\n- `:next-jammy` - tip-of-tree image version based on Ubuntu 22.04 LTS (Jammy Jellyfish).\n- `:v1.46.0` - Playwright v1.46.0 release docker image based on Ubuntu 22.04 LTS (Jammy Jellyfish).\n- `:v1.46.0-noble` - Playwright v1.46.0 release docker image based on Ubuntu 24.04 LTS (Noble Numbat).\n- `:v1.46.0-jammy` - Playwright v1.46.0 release docker image based on Ubuntu 22.04 LTS (Jammy Jellyfish).\n- `:v1.46.0-focal` - Playwright v1.46.0 release docker image based on Ubuntu 20.04 LTS (Focal Fossa).\n\n> note\n>\n> It is recommended to always pin your Docker image to a specific version if possible. If the Playwright version in your Docker image does not match the version in your project/tests, Playwright will be unable to locate browser executables.\n\n### Base images[​](#base-images \"Direct link to Base images\")\n\nWe currently publish images based on the following [Ubuntu](https://hub.docker.com/_/ubuntu) versions:\n\n- **Ubuntu 24.04 LTS** (Noble Numbat), image tags include `noble`\n- **Ubuntu 22.04 LTS** (Jammy Jellyfish), image tags include `jammy`\n- **Ubuntu 20.04 LTS** (Focal Fossa), image tags include `focal`\n\n#### Alpine[​](#alpine \"Direct link to Alpine\")\n\nBrowser builds for Firefox and WebKit are built for the [glibc](https://en.wikipedia.org/wiki/Glibc) library. Alpine Linux and other distributions that are based on the [musl](https://en.wikipedia.org/wiki/Musl) standard library are not supported.\n\n## Build your own image[​](#build-your-own-image \"Direct link to Build your own image\")\n\nTo run Playwright inside Docker, you need to have Node.js, [Playwright browsers](browsers#install-browsers) and [browser system dependencies](browsers#install-system-dependencies) installed. See the following Dockerfile:\n\n``` javascript\nFROM node:20-bookworm\n\nRUN npx -y playwright@1.46.0 install --with-deps\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/docker](https://playwright.dev/docs/docker)"
- name: Download
  id: api/class-download
  summary: Download objects are dispatched by page via the page.on('download') event
  description: "# Download\n\n[Download](class-download \"Download\") objects are dispatched by page via the [page.on('download')](class-page#page-event-download) event.\n\nAll the downloaded files belonging to the browser context are deleted when the browser context is closed.\n\nDownload event is emitted once the download starts. Download path becomes available once download completes.\n\n``` javascript\n// Start waiting for download before clicking. Note no await.\nconst downloadPromise = page.waitForEvent('download');\nawait page.getByText('Download file').click();\nconst download = await downloadPromise;\n\n// Wait for the download process to complete and save the downloaded file somewhere.\nawait download.saveAs('/path/to/save/at/' + download.suggestedFilename());\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### cancel[​](#download-cancel \"Direct link to cancel\")\n\nCancels a download. Will not fail if the download is already finished or canceled. Upon successful cancellations, `download.failure()` would resolve to `'canceled'`.\n\n**Usage**\n\n``` javascript\nawait download.cancel();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### createReadStream[​](#download-create-read-stream \"Direct link to createReadStream\")\n\nAdded before v1.9\n\nReturns a readable stream for a successful download, or throws for a failed/canceled download.\n\n**Usage**\n\n``` javascript\nawait download.createReadStream();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Readable](https://nodejs.org/api/stream.html#stream_class_stream_readable \"Readable\")\\>\n\n### delete[​](#download-delete \"Direct link to delete\")\n\nAdded before v1.9\n\nDeletes the downloaded file. Will wait for the download to finish if necessary.\n\n**Usage**\n\n``` javascript\nawait download.delete();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### failure[​](#download-failure \"Direct link to failure\")\n\nAdded before v1.9\n\nReturns download error if any. Will wait for the download to finish if necessary.\n\n**Usage**\n\n``` javascript\nawait download.failure();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### page[​](#download-page \"Direct link to page\")\n\nGet the page that the download belongs to.\n\n**Usage**\n\n``` javascript\ndownload.page();\n```\n\n**Returns**\n\n- [Page](class-page \"Page\")\n\n### path[​](#download-path \"Direct link to path\")\n\nAdded before v1.9\n\nReturns path to the downloaded file for a successful download, or throws for a failed/canceled download. The method will wait for the download to finish if necessary. The method throws when connected remotely.\n\nNote that the download's file name is a random GUID, use [download.suggestedFilename()](class-download#download-suggested-filename) to get suggested file name.\n\n**Usage**\n\n``` javascript\nawait download.path();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### saveAs[​](#download-save-as \"Direct link to saveAs\")\n\nAdded before v1.9\n\nCopy the download to a user-specified path. It is safe to call this method while the download is still in progress. Will wait for the download to finish if necessary.\n\n**Usage**\n\n``` javascript\nawait download.saveAs('/path/to/save/at/' + download.suggestedFilename());\n```\n\n**Arguments**\n\n- `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Path where the download should be copied.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### suggestedFilename[​](#download-suggested-filename \"Direct link to suggestedFilename\")\n\nAdded before v1.9\n\nReturns suggested filename for this download. It is typically computed by the browser from the [`Content-Disposition`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition) response header or the `download` attribute. See the spec on [whatwg](https://html.spec.whatwg.org/#downloading-resources). Different browsers can use different logic for computing it.\n\n**Usage**\n\n``` javascript\ndownload.suggestedFilename();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### url[​](#download-url \"Direct link to url\")\n\nAdded before v1.9\n\nReturns downloaded url.\n\n**Usage**\n\n``` javascript\ndownload.url();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-download](https://playwright.dev/docs/api/class-download)"
- name: download.cancel
  id: api/class-download#download-cancel
  summary: Cancels a download
  belongs_to: Download
  description: |-
    ### cancel[​](#download-cancel "Direct link to cancel")

    Cancels a download. Will not fail if the download is already finished or canceled. Upon successful cancellations, `download.failure()` would resolve to `'canceled'`.

    **Usage**

    ``` javascript
    await download.cancel();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>
- name: download.createReadStream
  id: api/class-download#download-create-read-stream
  summary: Returns a readable stream for a successful download, or throws for a failed/canceled download
  belongs_to: Download
  description: |-
    ### createReadStream[​](#download-create-read-stream "Direct link to createReadStream")

    Added before v1.9

    Returns a readable stream for a successful download, or throws for a failed/canceled download.

    **Usage**

    ``` javascript
    await download.createReadStream();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Readable](https://nodejs.org/api/stream.html#stream_class_stream_readable "Readable")\>

    &nbsp;
- name: download.delete
  id: api/class-download#download-delete
  summary: Deletes the downloaded file
  belongs_to: Download
  description: |-
    ### delete[​](#download-delete "Direct link to delete")

    Added before v1.9

    Deletes the downloaded file. Will wait for the download to finish if necessary.

    **Usage**

    ``` javascript
    await download.delete();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: download.failure
  id: api/class-download#download-failure
  summary: Returns download error if any
  belongs_to: Download
  description: |-
    ### failure[​](#download-failure "Direct link to failure")

    Added before v1.9

    Returns download error if any. Will wait for the download to finish if necessary.

    **Usage**

    ``` javascript
    await download.failure();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: download.page
  id: api/class-download#download-page
  summary: Get the page that the download belongs to
  belongs_to: Download
  description: |-
    ### page[​](#download-page "Direct link to page")

    Get the page that the download belongs to.

    **Usage**

    ``` javascript
    download.page();
    ```

    **Returns**

    - [Page](class-page "Page")

    &nbsp;
- name: download.path
  id: api/class-download#download-path
  summary: Returns path to the downloaded file for a successful download, or throws for a failed/canceled download
  belongs_to: Download
  description: |-
    ### path[​](#download-path "Direct link to path")

    Added before v1.9

    Returns path to the downloaded file for a successful download, or throws for a failed/canceled download. The method will wait for the download to finish if necessary. The method throws when connected remotely.

    Note that the download's file name is a random GUID, use [download.suggestedFilename()](class-download#download-suggested-filename) to get suggested file name.

    **Usage**

    ``` javascript
    await download.path();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: download.saveAs
  id: api/class-download#download-save-as
  summary: Copy the download to a user-specified path
  belongs_to: Download
  description: |-
    ### saveAs[​](#download-save-as "Direct link to saveAs")

    Added before v1.9

    Copy the download to a user-specified path. It is safe to call this method while the download is still in progress. Will wait for the download to finish if necessary.

    **Usage**

    ``` javascript
    await download.saveAs('/path/to/save/at/' + download.suggestedFilename());
    ```

    **Arguments**

    - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Path where the download should be copied.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: download.suggestedFilename
  id: api/class-download#download-suggested-filename
  summary: Returns suggested filename for this download
  belongs_to: Download
  description: |-
    ### suggestedFilename[​](#download-suggested-filename "Direct link to suggestedFilename")

    Added before v1.9

    Returns suggested filename for this download. It is typically computed by the browser from the [`Content-Disposition`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition) response header or the `download` attribute. See the spec on [whatwg](https://html.spec.whatwg.org/#downloading-resources). Different browsers can use different logic for computing it.

    **Usage**

    ``` javascript
    download.suggestedFilename();
    ```

    **Returns**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: download.url
  id: api/class-download#download-url
  summary: Returns downloaded url
  belongs_to: Download
  description: "### url[​](#download-url \"Direct link to url\")\n\nAdded before v1.9\n\nReturns downloaded url.\n\n**Usage**\n\n``` javascript\ndownload.url();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-download](https://playwright.dev/docs/api/class-download)"
- name: Downloads
  id: downloads
  summary: For every attachment downloaded by the page, page.on('download') event is emitted
  description: "# Downloads\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nFor every attachment downloaded by the page, [page.on('download')](api/class-page#page-event-download) event is emitted. All these attachments are downloaded into a temporary folder. You can obtain the download url, file name and payload stream using the [Download](api/class-download \"Download\") object from the event.\n\nYou can specify where to persist downloaded files using the `downloadsPath` option in [browserType.launch()](api/class-browsertype#browser-type-launch).\n\n> note\n>\n> Downloaded files are deleted when the browser context that produced them is closed.\n\nHere is the simplest way to handle the file download:\n\n``` javascript\n// Start waiting for download before clicking. Note no await.\nconst downloadPromise = page.waitForEvent('download');\nawait page.getByText('Download file').click();\nconst download = await downloadPromise;\n\n// Wait for the download process to complete and save the downloaded file somewhere.\nawait download.saveAs('/path/to/save/at/' + download.suggestedFilename());\n```\n\n#### Variations[​](#variations \"Direct link to Variations\")\n\nIf you have no idea what initiates the download, you can still handle the event:\n\n``` javascript\npage.on('download', download => download.path().then(console.log));\n```\n\nNote that handling the event forks the control flow and makes the script harder to follow. Your scenario might end while you are downloading a file since your main control flow is not awaiting for this operation to resolve.\n\n> note\n>\n> For uploading files, see the [uploading files](input#upload-files) section.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/downloads](https://playwright.dev/docs/downloads)"
- name: Electron
  id: api/class-electron
  summary: Playwright has experimental support for Electron automation
  description: "# Electron\n\nPlaywright has **experimental** support for Electron automation. You can access electron namespace via:\n\n``` javascript\nconst { _electron } = require('playwright');\n```\n\nAn example of the Electron automation script would be:\n\n``` javascript\nconst { _electron: electron } = require('playwright');\n\n(async () => {\n  // Launch Electron app.\n  const electronApp = await electron.launch({ args: ['main.js'] });\n\n  // Evaluation expression in the Electron context.\n  const appPath = await electronApp.evaluate(async ({ app }) => {\n    // This runs in the main Electron process, parameter here is always\n    // the result of the require('electron') in the main app script.\n    return app.getAppPath();\n  });\n  console.log(appPath);\n\n  // Get the first window that the app opens, wait if necessary.\n  const window = await electronApp.firstWindow();\n  // Print the title.\n  console.log(await window.title());\n  // Capture a screenshot.\n  await window.screenshot({ path: 'intro.png' });\n  // Direct Electron console to Node terminal.\n  window.on('console', console.log);\n  // Click button.\n  await window.click('text=Click me');\n  // Exit app.\n  await electronApp.close();\n})();\n```\n\n**Supported Electron versions are:**\n\n- v12.2.0+\n- v13.4.0+\n- v14+\n\n**Known issues:**\n\nIf you are not able to launch Electron and it will end up in timeouts during launch, try the following:\n\n- Ensure that `nodeCliInspect` ([FuseV1Options.EnableNodeCliInspectArguments](https://www.electronjs.org/docs/latest/tutorial/fuses#nodecliinspect)) fuse is **not** set to `false`.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### launch[​](#electron-launch \"Direct link to launch\")\n\nLaunches electron application specified with the `executablePath`.\n\n**Usage**\n\n``` javascript\nawait electron.launch();\nawait electron.launch(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `acceptDownloads` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.\n\n  - `args` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    Additional arguments to pass to the application when launching. You typically pass the main script name here.\n\n  - `bypassCSP` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Toggles bypassing page's Content-Security-Policy. Defaults to `false`.\n\n  - `colorScheme` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| \"light\" \\| \"dark\" \\| \"no-preference\" *(optional)*\n\n    Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'light'`.\n\n  - `cwd` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Current working directory to launch application from.\n\n  - `env` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    Specifies environment variables that will be visible to Electron. Defaults to `process.env`.\n\n  - `executablePath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Launches given Electron application. If not specified, launches the default Electron executable installed in this package, located at `node_modules/.bin/electron`.\n\n  - `extraHTTPHeaders` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    An object containing additional HTTP headers to be sent with every request. Defaults to none.\n\n  - `geolocation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `latitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Latitude between -90 and 90.\n\n    - `longitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Longitude between -180 and 180.\n\n    - `accuracy` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n      Non-negative accuracy value. Defaults to `0`.\n\n  - `httpCredentials` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Restrain sending http credentials on specific origin (scheme://host:port).\n\n    - `send` \"unauthorized\" \\| \"always\" *(optional)*\n\n      This option only applies to the requests sent from corresponding [APIRequestContext](class-apirequestcontext \"APIRequestContext\") and does not affect requests sent from the browser. `'always'` - `Authorization` header with basic authentication credentials will be sent with the each API request. `'unauthorized` - the credentials are only sent when 401 (Unauthorized) response with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.\n\n    Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no origin is specified, the username and password are sent to any servers upon unauthorized responses.\n\n  - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.\n\n  - `locale` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default locale. Learn more about emulation in our [emulation guide](../emulation#locale--timezone).\n\n  - `offline` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to emulate network being offline. Defaults to `false`. Learn more about [network emulation](../emulation#offline).\n\n  - `recordHar` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `omitContent` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n      Optional setting to control whether to omit request content from the HAR. Defaults to `false`. Deprecated, use `content` policy instead.\n\n    - `content` \"omit\" \\| \"embed\" \\| \"attach\" *(optional)*\n\n      Optional setting to control resource content management. If `omit` is specified, content is not persisted. If `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is specified, content is stored inline the HAR file as per HAR specification. Defaults to `attach` for `.zip` output files and to `embed` for all other file extensions.\n\n    - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Path on the filesystem to write the HAR file to. If the file name ends with `.zip`, `content: 'attach'` is used by default.\n\n    - `mode` \"full\" \\| \"minimal\" *(optional)*\n\n      When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page, cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `full`.\n\n    - `urlFilter` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") *(optional)*\n\n      A glob or regex pattern to filter requests that are stored in the HAR. When a `baseURL` via the context options was provided and the passed URL is a path, it gets merged via the [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor. Defaults to none.\n\n    Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file. If not specified, the HAR is not recorded. Make sure to await [browserContext.close()](class-browsercontext#browser-context-close) for the HAR to be saved.\n\n  - `recordVideo` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `dir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Path to the directory to put videos into.\n\n    - `size` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n      - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n        Video frame width.\n\n      - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n        Video frame height.\n\n      Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.\n\n    Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded. Make sure to await [browserContext.close()](class-browsercontext#browser-context-close) for videos to be saved.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds to wait for the application to start. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.\n\n  - `timezoneId` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Changes the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1) for a list of supported timezone IDs. Defaults to the system timezone.\n\n  - `tracesDir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    If specified, traces are saved into this directory.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[ElectronApplication](class-electronapplication \"ElectronApplication\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-electron](https://playwright.dev/docs/api/class-electron)"
- name: electron.launch
  id: api/class-electron#electron-launch
  summary: Launches electron application specified with the executablePath
  belongs_to: Electron
  description: "### launch[​](#electron-launch \"Direct link to launch\")\n\nLaunches electron application specified with the `executablePath`.\n\n**Usage**\n\n``` javascript\nawait electron.launch();\nawait electron.launch(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `acceptDownloads` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.\n\n  - `args`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    Additional arguments to pass to the application when launching. You typically pass the main script name here.\n\n  - `bypassCSP` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Toggles bypassing page's Content-Security-Policy. Defaults to `false`.\n\n  - `colorScheme`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| \"light\" \\| \"dark\" \\| \"no-preference\" *(optional)*\n\n    Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'light'`.\n\n  - `cwd` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Current working directory to launch application from.\n\n  - `env`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    Specifies environment variables that will be visible to Electron. Defaults to `process.env`.\n\n  - `executablePath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Launches given Electron application. If not specified, launches the default Electron executable installed in this package, located at `node_modules/.bin/electron`.\n\n  - `extraHTTPHeaders`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    An object containing additional HTTP headers to be sent with every request. Defaults to none.\n\n  - `geolocation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `latitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Latitude between -90 and 90.\n\n    - `longitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Longitude between -180 and 180.\n\n    - `accuracy` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n      Non-negative accuracy value. Defaults to `0`.\n\n  - `httpCredentials` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Restrain sending http credentials on specific origin (scheme://host:port).\n\n    - `send` \"unauthorized\" \\| \"always\" *(optional)*\n\n      This option only applies to the requests sent from corresponding [APIRequestContext](class-apirequestcontext \"APIRequestContext\") and does not affect requests sent from the browser. `'always'` - `Authorization` header with basic authentication credentials will be sent with the each API request. `'unauthorized` - the credentials are only sent when 401 (Unauthorized) response with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.\n\n    Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no origin is specified, the username and password are sent to any servers upon unauthorized responses.\n\n  - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.\n\n  - `locale` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default locale. Learn more about emulation in our [emulation guide](../emulation#locale--timezone).\n\n  - `offline` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to emulate network being offline. Defaults to `false`. Learn more about [network emulation](../emulation#offline).\n\n  - `recordHar` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `omitContent` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n      Optional setting to control whether to omit request content from the HAR. Defaults to `false`. Deprecated, use `content` policy instead.\n\n    - `content` \"omit\" \\| \"embed\" \\| \"attach\" *(optional)*\n\n      Optional setting to control resource content management. If `omit` is specified, content is not persisted. If `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is specified, content is stored inline the HAR file as per HAR specification. Defaults to `attach` for `.zip` output files and to `embed` for all other file extensions.\n\n    - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Path on the filesystem to write the HAR file to. If the file name ends with `.zip`, `content: 'attach'` is used by default.\n\n    - `mode` \"full\" \\| \"minimal\" *(optional)*\n\n      When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page, cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `full`.\n\n    - `urlFilter`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") *(optional)*\n\n      A glob or regex pattern to filter requests that are stored in the HAR. When a `baseURL` via the context options was provided and the passed URL is a path, it gets merged via the [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor. Defaults to none.\n\n    Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file. If not specified, the HAR is not recorded. Make sure to await [browserContext.close()](class-browsercontext#browser-context-close) for the HAR to be saved.\n\n  - `recordVideo` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `dir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Path to the directory to put videos into.\n\n    - `size` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n      - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n        Video frame width.\n\n      - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n        Video frame height.\n\n      Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.\n\n    Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded. Make sure to await [browserContext.close()](class-browsercontext#browser-context-close) for videos to be saved.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds to wait for the application to start. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.\n\n  - `timezoneId` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Changes the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1) for a list of supported timezone IDs. Defaults to the system timezone.\n\n  - `tracesDir` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    If specified, traces are saved into this directory.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[ElectronApplication](class-electronapplication \"ElectronApplication\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-electron](https://playwright.dev/docs/api/class-electron)"
- name: ElectronApplication
  id: api/class-electronapplication
  summary: Electron application representation
  description: "# ElectronApplication\n\nElectron application representation. You can use [electron.launch()](class-electron#electron-launch) to obtain the application instance. This instance you can control main electron process as well as work with Electron windows:\n\n``` javascript\nconst { _electron: electron } = require('playwright');\n\n(async () => {\n  // Launch Electron app.\n  const electronApp = await electron.launch({ args: ['main.js'] });\n\n  // Evaluation expression in the Electron context.\n  const appPath = await electronApp.evaluate(async ({ app }) => {\n    // This runs in the main Electron process, parameter here is always\n    // the result of the require('electron') in the main app script.\n    return app.getAppPath();\n  });\n  console.log(appPath);\n\n  // Get the first window that the app opens, wait if necessary.\n  const window = await electronApp.firstWindow();\n  // Print the title.\n  console.log(await window.title());\n  // Capture a screenshot.\n  await window.screenshot({ path: 'intro.png' });\n  // Direct Electron console to Node terminal.\n  window.on('console', console.log);\n  // Click button.\n  await window.click('text=Click me');\n  // Exit app.\n  await electronApp.close();\n})();\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### browserWindow[​](#electron-application-browser-window \"Direct link to browserWindow\")\n\nReturns the BrowserWindow object that corresponds to the given Playwright page.\n\n**Usage**\n\n``` javascript\nawait electronApplication.browserWindow(page);\n```\n\n**Arguments**\n\n- `page` [Page](class-page \"Page\")\n\n  Page to retrieve the window for.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[JSHandle](class-jshandle \"JSHandle\")\\>\n\n### close[​](#electron-application-close \"Direct link to close\")\n\nCloses Electron application.\n\n**Usage**\n\n``` javascript\nawait electronApplication.close();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### context[​](#electron-application-context \"Direct link to context\")\n\nThis method returns browser context that can be used for setting up context-wide routing, etc.\n\n**Usage**\n\n``` javascript\nelectronApplication.context();\n```\n\n**Returns**\n\n- [BrowserContext](class-browsercontext \"BrowserContext\")\n\n### evaluate[​](#electron-application-evaluate \"Direct link to evaluate\")\n\nReturns the return value of `pageFunction`.\n\nIf the function passed to the [electronApplication.evaluate()](class-electronapplication#electron-application-evaluate) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\"), then [electronApplication.evaluate()](class-electronapplication#electron-application-evaluate) would wait for the promise to resolve and return its value.\n\nIf the function passed to the [electronApplication.evaluate()](class-electronapplication#electron-application-evaluate) returns a non-[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\") value, then [electronApplication.evaluate()](class-electronapplication#electron-application-evaluate) returns `undefined`. Playwright also supports transferring some additional values that are not serializable by `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`.\n\n**Usage**\n\n``` javascript\nawait electronApplication.evaluate(pageFunction);\nawait electronApplication.evaluate(pageFunction, arg);\n```\n\n**Arguments**\n\n- `pageFunction` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\") \\| [Electron](class-electron \"Electron\")\n\n  Function to be evaluated in the main Electron process.\n\n- `arg` [EvaluationArgument](../evaluating#evaluation-argument \"EvaluationArgument\") *(optional)*\n\n  Optional argument to pass to `pageFunction`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\")\\>\n\n### evaluateHandle[​](#electron-application-evaluate-handle \"Direct link to evaluateHandle\")\n\nReturns the return value of `pageFunction` as a [JSHandle](class-jshandle \"JSHandle\").\n\nThe only difference between [electronApplication.evaluate()](class-electronapplication#electron-application-evaluate) and [electronApplication.evaluateHandle()](class-electronapplication#electron-application-evaluate-handle) is that [electronApplication.evaluateHandle()](class-electronapplication#electron-application-evaluate-handle) returns [JSHandle](class-jshandle \"JSHandle\").\n\nIf the function passed to the [electronApplication.evaluateHandle()](class-electronapplication#electron-application-evaluate-handle) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\"), then [electronApplication.evaluateHandle()](class-electronapplication#electron-application-evaluate-handle) would wait for the promise to resolve and return its value.\n\n**Usage**\n\n``` javascript\nawait electronApplication.evaluateHandle(pageFunction);\nawait electronApplication.evaluateHandle(pageFunction, arg);\n```\n\n**Arguments**\n\n- `pageFunction` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\") \\| [Electron](class-electron \"Electron\")\n\n  Function to be evaluated in the main Electron process.\n\n- `arg` [EvaluationArgument](../evaluating#evaluation-argument \"EvaluationArgument\") *(optional)*\n\n  Optional argument to pass to `pageFunction`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[JSHandle](class-jshandle \"JSHandle\")\\>\n\n### firstWindow[​](#electron-application-first-window \"Direct link to firstWindow\")\n\nConvenience method that waits for the first application window to be opened.\n\n**Usage**\n\n``` javascript\nconst electronApp = await electron.launch({\n  args: ['main.js']\n});\nconst window = await electronApp.firstWindow();\n// ...\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout).\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Page](class-page \"Page\")\\>\n\n### process[​](#electron-application-process \"Direct link to process\")\n\nReturns the main process for this Electron Application.\n\n**Usage**\n\n``` javascript\nelectronApplication.process();\n```\n\n**Returns**\n\n- [ChildProcess](https://nodejs.org/api/child_process.html \"ChildProcess\")\n\n### waitForEvent[​](#electron-application-wait-for-event \"Direct link to waitForEvent\")\n\nWaits for event to fire and passes its value into the predicate function. Returns when the predicate returns truthy value. Will throw an error if the application is closed before the event is fired. Returns the event data value.\n\n**Usage**\n\n``` javascript\nconst windowPromise = electronApp.waitForEvent('window');\nawait mainWindow.click('button');\nconst window = await windowPromise;\n```\n\n**Arguments**\n\n- `event` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Event name, same one typically passed into `*.on(event)`.\n\n- `optionsOrPredicate` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `predicate` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")\n\n    receives the event data and resolves to truthy value when the waiting should resolve.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout).\n\n  Either a predicate that receives an event or an options object. Optional.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n### windows[​](#electron-application-windows \"Direct link to windows\")\n\nConvenience method that returns all the opened windows.\n\n**Usage**\n\n``` javascript\nelectronApplication.windows();\n```\n\n**Returns**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Page](class-page \"Page\")\\>\n\n## Events[​](#events \"Direct link to Events\")\n\n### on('close')[​](#electron-application-event-close \"Direct link to on('close')\")\n\nThis event is issued when the application process has been terminated.\n\n**Usage**\n\n``` javascript\nelectronApplication.on('close', data => {});\n```\n\n### on('console')[​](#electron-application-event-console \"Direct link to on('console')\")\n\nEmitted when JavaScript within the Electron main process calls one of console API methods, e.g. `console.log` or `console.dir`.\n\nThe arguments passed into `console.log` are available on the [ConsoleMessage](class-consolemessage \"ConsoleMessage\") event handler argument.\n\n**Usage**\n\n``` javascript\nelectronApp.on('console', async msg => {\n  const values = [];\n  for (const arg of msg.args())\n    values.push(await arg.jsonValue());\n  console.log(...values);\n});\nawait electronApp.evaluate(() => console.log('hello', 5, { foo: 'bar' }));\n```\n\n**Event data**\n\n- [ConsoleMessage](class-consolemessage \"ConsoleMessage\")\n\n### on('window')[​](#electron-application-event-window \"Direct link to on('window')\")\n\nThis event is issued for every window that is created **and loaded** in Electron. It contains a [Page](class-page \"Page\") that can be used for Playwright automation.\n\n**Usage**\n\n``` javascript\nelectronApplication.on('window', data => {});\n```\n\n**Event data**\n\n- [Page](class-page \"Page\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-electronapplication](https://playwright.dev/docs/api/class-electronapplication)"
- name: electronApplication.browserWindow
  id: api/class-electronapplication#electron-application-browser-window
  summary: Returns the BrowserWindow object that corresponds to the given Playwright page
  belongs_to: ElectronApplication
  description: |-
    ### browserWindow[​](#electron-application-browser-window "Direct link to browserWindow")

    Returns the BrowserWindow object that corresponds to the given Playwright page.

    **Usage**

    ``` javascript
    await electronApplication.browserWindow(page);
    ```

    **Arguments**

    - `page` [Page](class-page "Page")

      Page to retrieve the window for.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[JSHandle](class-jshandle "JSHandle")\>
- name: electronApplication.close
  id: api/class-electronapplication#electron-application-close
  summary: Closes Electron application
  belongs_to: ElectronApplication
  description: |-
    ### close[​](#electron-application-close "Direct link to close")

    Closes Electron application.

    **Usage**

    ``` javascript
    await electronApplication.close();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: electronApplication.context
  id: api/class-electronapplication#electron-application-context
  summary: This method returns browser context that can be used for setting up context-wide routing, etc
  belongs_to: ElectronApplication
  description: |-
    ### context[​](#electron-application-context "Direct link to context")

    This method returns browser context that can be used for setting up context-wide routing, etc.

    **Usage**

    ``` javascript
    electronApplication.context();
    ```

    **Returns**

    - [BrowserContext](class-browsercontext "BrowserContext")

    &nbsp;
- name: electronApplication.evaluate
  id: api/class-electronapplication#electron-application-evaluate
  summary: Returns the return value of pageFunction
  belongs_to: ElectronApplication
  description: |-
    ### evaluate[​](#electron-application-evaluate "Direct link to evaluate")

    Returns the return value of `pageFunction`.

    If the function passed to the [electronApplication.evaluate()](class-electronapplication#electron-application-evaluate) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [electronApplication.evaluate()](class-electronapplication#electron-application-evaluate) would wait for the promise to resolve and return its value.

    If the function passed to the [electronApplication.evaluate()](class-electronapplication#electron-application-evaluate) returns a non-[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") value, then [electronApplication.evaluate()](class-electronapplication#electron-application-evaluate) returns `undefined`. Playwright also supports transferring some additional values that are not serializable by `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`.

    **Usage**

    ``` javascript
    await electronApplication.evaluate(pageFunction);
    await electronApplication.evaluate(pageFunction, arg);
    ```

    **Arguments**

    - `pageFunction`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function") \| [Electron](class-electron "Electron")

      Function to be evaluated in the main Electron process.

    - `arg` [EvaluationArgument](../evaluating#evaluation-argument "EvaluationArgument") *(optional)*

      Optional argument to pass to `pageFunction`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>

    &nbsp;
- name: electronApplication.evaluateHandle
  id: api/class-electronapplication#electron-application-evaluate-handle
  summary: Returns the return value of pageFunction as a JSHandle
  belongs_to: ElectronApplication
  description: |-
    ### evaluateHandle[​](#electron-application-evaluate-handle "Direct link to evaluateHandle")

    Returns the return value of `pageFunction` as a [JSHandle](class-jshandle "JSHandle").

    The only difference between [electronApplication.evaluate()](class-electronapplication#electron-application-evaluate) and [electronApplication.evaluateHandle()](class-electronapplication#electron-application-evaluate-handle) is that [electronApplication.evaluateHandle()](class-electronapplication#electron-application-evaluate-handle) returns [JSHandle](class-jshandle "JSHandle").

    If the function passed to the [electronApplication.evaluateHandle()](class-electronapplication#electron-application-evaluate-handle) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [electronApplication.evaluateHandle()](class-electronapplication#electron-application-evaluate-handle) would wait for the promise to resolve and return its value.

    **Usage**

    ``` javascript
    await electronApplication.evaluateHandle(pageFunction);
    await electronApplication.evaluateHandle(pageFunction, arg);
    ```

    **Arguments**

    - `pageFunction`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function") \| [Electron](class-electron "Electron")

      Function to be evaluated in the main Electron process.

    - `arg` [EvaluationArgument](../evaluating#evaluation-argument "EvaluationArgument") *(optional)*

      Optional argument to pass to `pageFunction`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[JSHandle](class-jshandle "JSHandle")\>

    &nbsp;
- name: electronApplication.firstWindow
  id: api/class-electronapplication#electron-application-first-window
  summary: Convenience method that waits for the first application window to be opened
  belongs_to: ElectronApplication
  description: |-
    ### firstWindow[​](#electron-application-first-window "Direct link to firstWindow")

    Convenience method that waits for the first application window to be opened.

    **Usage**

    ``` javascript
    const electronApp = await electron.launch({
      args: ['main.js']
    });
    const window = await electronApp.firstWindow();
    // ...
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout).

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Page](class-page "Page")\>

    &nbsp;
- name: electronApplication.on('close')
  id: api/class-electronapplication#electron-application-event-close
  summary: This event is issued when the application process has been terminated
  belongs_to: ElectronApplication
  description: |-
    ### on('close')[​](#electron-application-event-close "Direct link to on('close')")

    This event is issued when the application process has been terminated.

    **Usage**

    ``` javascript
    electronApplication.on('close', data => {});
    ```
- name: electronApplication.on('console')
  id: api/class-electronapplication#electron-application-event-console
  summary: Emitted when JavaScript within the Electron main process calls one of console API methods, e.g
  belongs_to: ElectronApplication
  description: |-
    ### on('console')[​](#electron-application-event-console "Direct link to on('console')")

    Emitted when JavaScript within the Electron main process calls one of console API methods, e.g. `console.log` or `console.dir`.

    The arguments passed into `console.log` are available on the [ConsoleMessage](class-consolemessage "ConsoleMessage") event handler argument.

    **Usage**

    ``` javascript
    electronApp.on('console', async msg => {
      const values = [];
      for (const arg of msg.args())
        values.push(await arg.jsonValue());
      console.log(...values);
    });
    await electronApp.evaluate(() => console.log('hello', 5, { foo: 'bar' }));
    ```

    **Event data**

    - [ConsoleMessage](class-consolemessage "ConsoleMessage")

    &nbsp;
- name: electronApplication.on('window')
  id: api/class-electronapplication#electron-application-event-window
  summary: This event is issued for every window that is created and loaded in Electron
  belongs_to: ElectronApplication
  description: "### on('window')[​](#electron-application-event-window \"Direct link to on('window')\")\n\nThis event is issued for every window that is created **and loaded** in Electron. It contains a [Page](class-page \"Page\") that can be used for Playwright automation.\n\n**Usage**\n\n``` javascript\nelectronApplication.on('window', data => {});\n```\n\n**Event data**\n\n- [Page](class-page \"Page\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-electronapplication](https://playwright.dev/docs/api/class-electronapplication)"
- name: electronApplication.process
  id: api/class-electronapplication#electron-application-process
  summary: Returns the main process for this Electron Application
  belongs_to: ElectronApplication
  description: |-
    ### process[​](#electron-application-process "Direct link to process")

    Returns the main process for this Electron Application.

    **Usage**

    ``` javascript
    electronApplication.process();
    ```

    **Returns**

    - [ChildProcess](https://nodejs.org/api/child_process.html "ChildProcess")

    &nbsp;
- name: electronApplication.waitForEvent
  id: api/class-electronapplication#electron-application-wait-for-event
  summary: Waits for event to fire and passes its value into the predicate function
  belongs_to: ElectronApplication
  description: |-
    ### waitForEvent[​](#electron-application-wait-for-event "Direct link to waitForEvent")

    Waits for event to fire and passes its value into the predicate function. Returns when the predicate returns truthy value. Will throw an error if the application is closed before the event is fired. Returns the event data value.

    **Usage**

    ``` javascript
    const windowPromise = electronApp.waitForEvent('window');
    await mainWindow.click('button');
    const window = await windowPromise;
    ```

    **Arguments**

    - `event` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Event name, same one typically passed into `*.on(event)`.

    - `optionsOrPredicate`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `predicate` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")

        receives the event data and resolves to truthy value when the waiting should resolve.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout).

      Either a predicate that receives an event or an options object. Optional.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>

    &nbsp;
- name: electronApplication.windows
  id: api/class-electronapplication#electron-application-windows
  summary: Convenience method that returns all the opened windows
  belongs_to: ElectronApplication
  description: |-
    ### windows[​](#electron-application-windows "Direct link to windows")

    Convenience method that returns all the opened windows.

    **Usage**

    ``` javascript
    electronApplication.windows();
    ```

    **Returns**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Page](class-page "Page")\>

    ## Events[​](#events "Direct link to Events")
- name: ElementHandle
  id: api/class-elementhandle
  summary: ElementHandle represents an in-page DOM element
  description: "# ElementHandle\n\n- extends: [JSHandle](class-jshandle \"JSHandle\")\n\nElementHandle represents an in-page DOM element. ElementHandles can be created with the [page.$()](class-page#page-query-selector) method.\n\n> Discouraged\n>\n> The use of ElementHandle is discouraged, use [Locator](class-locator \"Locator\") objects and web-first assertions instead.\n\n``` javascript\nconst hrefElement = await page.$('a');\nawait hrefElement.click();\n```\n\nElementHandle prevents DOM element from garbage collection unless the handle is disposed with [jsHandle.dispose()](class-jshandle#js-handle-dispose). ElementHandles are auto-disposed when their origin frame gets navigated.\n\nElementHandle instances can be used as an argument in [page.$eval()](class-page#page-eval-on-selector) and [page.evaluate()](class-page#page-evaluate) methods.\n\nThe difference between the [Locator](class-locator \"Locator\") and ElementHandle is that the ElementHandle points to a particular element, while [Locator](class-locator \"Locator\") captures the logic of how to retrieve an element.\n\nIn the example below, handle points to a particular DOM element on page. If that element changes text or is used by React to render an entirely different component, handle is still pointing to that very DOM element. This can lead to unexpected behaviors.\n\n``` javascript\nconst handle = await page.$('text=Submit');\n// ...\nawait handle.hover();\nawait handle.click();\n```\n\nWith the locator, every time the `element` is used, up-to-date DOM element is located in the page using the selector. So in the snippet below, underlying DOM element is going to be located twice.\n\n``` javascript\nconst locator = page.getByText('Submit');\n// ...\nawait locator.hover();\nawait locator.click();\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### boundingBox[​](#element-handle-bounding-box \"Direct link to boundingBox\")\n\nAdded before v1.9\n\nThis method returns the bounding box of the element, or `null` if the element is not visible. The bounding box is calculated relative to the main frame viewport - which is usually the same as the browser window.\n\nScrolling affects the returned bounding box, similarly to [Element.getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect). That means `x` and/or `y` may be negative.\n\nElements from child frames return the bounding box relative to the main frame, unlike the [Element.getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect).\n\nAssuming the page is static, it is safe to use bounding box coordinates to perform input. For example, the following snippet should click the center of the element.\n\n**Usage**\n\n``` javascript\nconst box = await elementHandle.boundingBox();\nawait page.mouse.click(box.x + box.width / 2, box.y + box.height / 2);\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    the x coordinate of the element in pixels.\n\n  - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    the y coordinate of the element in pixels.\n\n  - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    the width of the element in pixels.\n\n  - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    the height of the element in pixels.\n\n### contentFrame[​](#element-handle-content-frame \"Direct link to contentFrame\")\n\nAdded before v1.9\n\nReturns the content frame for element handles referencing iframe nodes, or `null` otherwise\n\n**Usage**\n\n``` javascript\nawait elementHandle.contentFrame();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Frame](class-frame \"Frame\")\\>\n\n### ownerFrame[​](#element-handle-owner-frame \"Direct link to ownerFrame\")\n\nAdded before v1.9\n\nReturns the frame containing the given element.\n\n**Usage**\n\n``` javascript\nawait elementHandle.ownerFrame();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Frame](class-frame \"Frame\")\\>\n\n### waitForElementState[​](#element-handle-wait-for-element-state \"Direct link to waitForElementState\")\n\nAdded before v1.9\n\nReturns when the element satisfies the `state`.\n\nDepending on the `state` parameter, this method waits for one of the [actionability](../actionability) checks to pass. This method throws when the element is detached while waiting, unless waiting for the `\"hidden\"` state.\n\n- `\"visible\"` Wait until the element is [visible](../actionability#visible).\n- `\"hidden\"` Wait until the element is [not visible](../actionability#visible) or not attached. Note that waiting for hidden does not throw when the element detaches.\n- `\"stable\"` Wait until the element is both [visible](../actionability#visible) and [stable](../actionability#stable).\n- `\"enabled\"` Wait until the element is [enabled](../actionability#enabled).\n- `\"disabled\"` Wait until the element is [not enabled](../actionability#enabled).\n- `\"editable\"` Wait until the element is [editable](../actionability#editable).\n\nIf the element does not satisfy the condition for the `timeout` milliseconds, this method will throw.\n\n**Usage**\n\n``` javascript\nawait elementHandle.waitForElementState(state);\nawait elementHandle.waitForElementState(state, options);\n```\n\n**Arguments**\n\n- `state` \"visible\" \\| \"hidden\" \\| \"stable\" \\| \"enabled\" \\| \"disabled\" \\| \"editable\"\n\n  A state to wait for, see below for more details.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n## Deprecated[​](#deprecated \"Direct link to Deprecated\")\n\n### $[​](#element-handle-query-selector \"Direct link to $\")\n\n> Discouraged\n>\n> Use locator-based [page.locator()](class-page#page-locator) instead. Read more about [locators](../locators).\n\nThe method finds an element matching the specified selector in the `ElementHandle`'s subtree. If no elements match the selector, returns `null`.\n\n**Usage**\n\n``` javascript\nawait elementHandle.$(selector);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to query for.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [ElementHandle](class-elementhandle \"ElementHandle\")\\>\n\n### $$[​](#element-handle-query-selector-all \"Direct link to $$\")\n\n> Discouraged\n>\n> Use locator-based [page.locator()](class-page#page-locator) instead. Read more about [locators](../locators).\n\nThe method finds all elements matching the specified selector in the `ElementHandle`s subtree. If no elements match the selector, returns empty array.\n\n**Usage**\n\n``` javascript\nawait elementHandle.$$(selector);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to query for.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[ElementHandle](class-elementhandle \"ElementHandle\")\\>\\>\n\n### $eval[​](#element-handle-eval-on-selector \"Direct link to $eval\")\n\n> Discouraged\n>\n> This method does not wait for the element to pass actionability checks and therefore can lead to the flaky tests. Use [locator.evaluate()](class-locator#locator-evaluate), other [Locator](class-locator \"Locator\") helper methods or web-first assertions instead.\n\nReturns the return value of `pageFunction`.\n\nThe method finds an element matching the specified selector in the `ElementHandle`s subtree and passes it as a first argument to `pageFunction`. If no elements match the selector, the method throws an error.\n\nIf `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\"), then [elementHandle.$eval()](class-elementhandle#element-handle-eval-on-selector) would wait for the promise to resolve and return its value.\n\n**Usage**\n\n``` javascript\nconst tweetHandle = await page.$('.tweet');\nexpect(await tweetHandle.$eval('.like', node => node.innerText)).toBe('100');\nexpect(await tweetHandle.$eval('.retweets', node => node.innerText)).toBe('10');\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to query for.\n\n- `pageFunction` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([Element](https://developer.mozilla.org/en-US/docs/Web/API/element \"Element\")) \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Function to be evaluated in the page context.\n\n- `arg` [EvaluationArgument](../evaluating#evaluation-argument \"EvaluationArgument\") *(optional)*\n\n  Optional argument to pass to `pageFunction`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\")\\>\n\n### $$eval[​](#element-handle-eval-on-selector-all \"Direct link to $$eval\")\n\n> Discouraged\n>\n> In most cases, [locator.evaluateAll()](class-locator#locator-evaluate-all), other [Locator](class-locator \"Locator\") helper methods and web-first assertions do a better job.\n\nReturns the return value of `pageFunction`.\n\nThe method finds all elements matching the specified selector in the `ElementHandle`'s subtree and passes an array of matched elements as a first argument to `pageFunction`.\n\nIf `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\"), then [elementHandle.$$eval()](class-elementhandle#element-handle-eval-on-selector-all) would wait for the promise to resolve and return its value.\n\n**Usage**\n\n``` html\n<div class=\"feed\">\n  <div class=\"tweet\">Hello!</div>\n  <div class=\"tweet\">Hi!</div>\n</div>\n```\n\n``` javascript\nconst feedHandle = await page.$('.feed');\nexpect(await feedHandle.$$eval('.tweet', nodes =>\n  nodes.map(n => n.innerText))).toEqual(['Hello!', 'Hi!'],\n);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to query for.\n\n- `pageFunction` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Element](https://developer.mozilla.org/en-US/docs/Web/API/element \"Element\")\\>) \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Function to be evaluated in the page context.\n\n- `arg` [EvaluationArgument](../evaluating#evaluation-argument \"EvaluationArgument\") *(optional)*\n\n  Optional argument to pass to `pageFunction`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\")\\>\n\n### check[​](#element-handle-check \"Direct link to check\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.check()](class-locator#locator-check) instead. Read more about [locators](../locators).\n\nThis method checks the element by performing the following steps:\n\n1.  Ensure that element is a checkbox or a radio input. If not, this method throws. If the element is already checked, this method returns immediately.\n2.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.\n3.  Scroll the element into view if needed.\n4.  Use [page.mouse](class-page#page-mouse) to click in the center of the element.\n5.  Ensure that the element is now checked. If not, this method throws.\n\nIf the element is detached from the DOM at any moment during the action, this method throws.\n\nWhen all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror \"TimeoutError\"). Passing zero timeout disables this.\n\n**Usage**\n\n``` javascript\nawait elementHandle.check();\nawait elementHandle.check(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### click[​](#element-handle-click \"Direct link to click\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.click()](class-locator#locator-click) instead. Read more about [locators](../locators).\n\nThis method clicks the element by performing the following steps:\n\n1.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.\n2.  Scroll the element into view if needed.\n3.  Use [page.mouse](class-page#page-mouse) to click in the center of the element, or the specified `position`.\n4.  Wait for initiated navigations to either succeed or fail, unless `noWaitAfter` option is set.\n\nIf the element is detached from the DOM at any moment during the action, this method throws.\n\nWhen all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror \"TimeoutError\"). Passing zero timeout disables this.\n\n**Usage**\n\n``` javascript\nawait elementHandle.click();\nawait elementHandle.click(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `button` \"left\" \\| \"right\" \\| \"middle\" *(optional)*\n\n    Defaults to `left`.\n\n  - `clickCount` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail \"UIEvent.detail\").\n\n  - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.\n\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `modifiers` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<\"Alt\" \\| \"Control\" \\| \"ControlOrMeta\" \\| \"Meta\" \\| \"Shift\"\\> *(optional)*\n\n    Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. \"ControlOrMeta\" resolves to \"Control\" on Windows and Linux and to \"Meta\" on macOS.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option will default to `true` in the future.\n\n    Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.\n\n  - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### dblclick[​](#element-handle-dblclick \"Direct link to dblclick\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.dblclick()](class-locator#locator-dblclick) instead. Read more about [locators](../locators).\n\nThis method double clicks the element by performing the following steps:\n\n1.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.\n2.  Scroll the element into view if needed.\n3.  Use [page.mouse](class-page#page-mouse) to double click in the center of the element, or the specified `position`.\n\nIf the element is detached from the DOM at any moment during the action, this method throws.\n\nWhen all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror \"TimeoutError\"). Passing zero timeout disables this.\n\n> note\n>\n> `elementHandle.dblclick()` dispatches two `click` events and a single `dblclick` event.\n\n**Usage**\n\n``` javascript\nawait elementHandle.dblclick();\nawait elementHandle.dblclick(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `button` \"left\" \\| \"right\" \\| \"middle\" *(optional)*\n\n    Defaults to `left`.\n\n  - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.\n\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `modifiers` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<\"Alt\" \\| \"Control\" \\| \"ControlOrMeta\" \\| \"Meta\" \\| \"Shift\"\\> *(optional)*\n\n    Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. \"ControlOrMeta\" resolves to \"Control\" on Windows and Linux and to \"Meta\" on macOS.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### dispatchEvent[​](#element-handle-dispatch-event \"Direct link to dispatchEvent\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.dispatchEvent()](class-locator#locator-dispatch-event) instead. Read more about [locators](../locators).\n\nThe snippet below dispatches the `click` event on the element. Regardless of the visibility state of the element, `click` is dispatched. This is equivalent to calling [element.click()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click).\n\n**Usage**\n\n``` javascript\nawait elementHandle.dispatchEvent('click');\n```\n\nUnder the hood, it creates an instance of an event based on the given `type`, initializes it with `eventInit` properties and dispatches it on the element. Events are `composed`, `cancelable` and bubble by default.\n\nSince `eventInit` is event-specific, please refer to the events documentation for the lists of initial properties:\n\n- [DeviceMotionEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/DeviceMotionEvent)\n- [DeviceOrientationEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/DeviceOrientationEvent)\n- [DragEvent](https://developer.mozilla.org/en-US/docs/Web/API/DragEvent/DragEvent)\n- [Event](https://developer.mozilla.org/en-US/docs/Web/API/Event/Event)\n- [FocusEvent](https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/FocusEvent)\n- [KeyboardEvent](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent)\n- [MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent)\n- [PointerEvent](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/PointerEvent)\n- [TouchEvent](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/TouchEvent)\n- [WheelEvent](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/WheelEvent)\n\nYou can also specify `JSHandle` as the property value if you want live objects to be passed into the event:\n\n``` javascript\n// Note you can only create DataTransfer in Chromium and Firefox\nconst dataTransfer = await page.evaluateHandle(() => new DataTransfer());\nawait elementHandle.dispatchEvent('dragstart', { dataTransfer });\n```\n\n**Arguments**\n\n- `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  DOM event type: `\"click\"`, `\"dragstart\"`, etc.\n\n- `eventInit` [EvaluationArgument](../evaluating#evaluation-argument \"EvaluationArgument\") *(optional)*\n\n  Optional event-specific initialization properties.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### fill[​](#element-handle-fill \"Direct link to fill\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.fill()](class-locator#locator-fill) instead. Read more about [locators](../locators).\n\nThis method waits for [actionability](../actionability) checks, focuses the element, fills it and triggers an `input` event after filling. Note that you can pass an empty string to clear the input field.\n\nIf the target element is not an `<input>`, `<textarea>` or `[contenteditable]` element, this method throws an error. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be filled instead.\n\nTo send fine-grained keyboard events, use [locator.pressSequentially()](class-locator#locator-press-sequentially).\n\n**Usage**\n\n``` javascript\nawait elementHandle.fill(value);\nawait elementHandle.fill(value, options);\n```\n\n**Arguments**\n\n- `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Value to set for the `<input>`, `<textarea>` or `[contenteditable]` element.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### focus[​](#element-handle-focus \"Direct link to focus\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.focus()](class-locator#locator-focus) instead. Read more about [locators](../locators).\n\nCalls [focus](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus) on the element.\n\n**Usage**\n\n``` javascript\nawait elementHandle.focus();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### getAttribute[​](#element-handle-get-attribute \"Direct link to getAttribute\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.getAttribute()](class-locator#locator-get-attribute) instead. Read more about [locators](../locators).\n\nReturns element attribute value.\n\n**Usage**\n\n``` javascript\nawait elementHandle.getAttribute(name);\n```\n\n**Arguments**\n\n- `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Attribute name to get the value for.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### hover[​](#element-handle-hover \"Direct link to hover\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.hover()](class-locator#locator-hover) instead. Read more about [locators](../locators).\n\nThis method hovers over the element by performing the following steps:\n\n1.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.\n2.  Scroll the element into view if needed.\n3.  Use [page.mouse](class-page#page-mouse) to hover over the center of the element, or the specified `position`.\n\nIf the element is detached from the DOM at any moment during the action, this method throws.\n\nWhen all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror \"TimeoutError\"). Passing zero timeout disables this.\n\n**Usage**\n\n``` javascript\nawait elementHandle.hover();\nawait elementHandle.hover(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `modifiers` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<\"Alt\" \\| \"Control\" \\| \"ControlOrMeta\" \\| \"Meta\" \\| \"Shift\"\\> *(optional)*\n\n    Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. \"ControlOrMeta\" resolves to \"Control\" on Windows and Linux and to \"Meta\" on macOS.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### innerHTML[​](#element-handle-inner-html \"Direct link to innerHTML\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.innerHTML()](class-locator#locator-inner-html) instead. Read more about [locators](../locators).\n\nReturns the `element.innerHTML`.\n\n**Usage**\n\n``` javascript\nawait elementHandle.innerHTML();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### innerText[​](#element-handle-inner-text \"Direct link to innerText\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.innerText()](class-locator#locator-inner-text) instead. Read more about [locators](../locators).\n\nReturns the `element.innerText`.\n\n**Usage**\n\n``` javascript\nawait elementHandle.innerText();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### inputValue[​](#element-handle-input-value \"Direct link to inputValue\")\n\n> Discouraged\n>\n> Use locator-based [locator.inputValue()](class-locator#locator-input-value) instead. Read more about [locators](../locators).\n\nReturns `input.value` for the selected `<input>` or `<textarea>` or `<select>` element.\n\nThrows for non-input elements. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), returns the value of the control.\n\n**Usage**\n\n``` javascript\nawait elementHandle.inputValue();\nawait elementHandle.inputValue(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### isChecked[​](#element-handle-is-checked \"Direct link to isChecked\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.isChecked()](class-locator#locator-is-checked) instead. Read more about [locators](../locators).\n\nReturns whether the element is checked. Throws if the element is not a checkbox or radio input.\n\n**Usage**\n\n``` javascript\nawait elementHandle.isChecked();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\>\n\n### isDisabled[​](#element-handle-is-disabled \"Direct link to isDisabled\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.isDisabled()](class-locator#locator-is-disabled) instead. Read more about [locators](../locators).\n\nReturns whether the element is disabled, the opposite of [enabled](../actionability#enabled).\n\n**Usage**\n\n``` javascript\nawait elementHandle.isDisabled();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\>\n\n### isEditable[​](#element-handle-is-editable \"Direct link to isEditable\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.isEditable()](class-locator#locator-is-editable) instead. Read more about [locators](../locators).\n\nReturns whether the element is [editable](../actionability#editable).\n\n**Usage**\n\n``` javascript\nawait elementHandle.isEditable();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\>\n\n### isEnabled[​](#element-handle-is-enabled \"Direct link to isEnabled\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.isEnabled()](class-locator#locator-is-enabled) instead. Read more about [locators](../locators).\n\nReturns whether the element is [enabled](../actionability#enabled).\n\n**Usage**\n\n``` javascript\nawait elementHandle.isEnabled();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\>\n\n### isHidden[​](#element-handle-is-hidden \"Direct link to isHidden\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.isHidden()](class-locator#locator-is-hidden) instead. Read more about [locators](../locators).\n\nReturns whether the element is hidden, the opposite of [visible](../actionability#visible).\n\n**Usage**\n\n``` javascript\nawait elementHandle.isHidden();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\>\n\n### isVisible[​](#element-handle-is-visible \"Direct link to isVisible\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.isVisible()](class-locator#locator-is-visible) instead. Read more about [locators](../locators).\n\nReturns whether the element is [visible](../actionability#visible).\n\n**Usage**\n\n``` javascript\nawait elementHandle.isVisible();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\>\n\n### press[​](#element-handle-press \"Direct link to press\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.press()](class-locator#locator-press) instead. Read more about [locators](../locators).\n\nFocuses the element, and then uses [keyboard.down()](class-keyboard#keyboard-down) and [keyboard.up()](class-keyboard#keyboard-up).\n\n`key` can specify the intended [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) value or a single character to generate the text for. A superset of the `key` values can be found [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values). Examples of the keys are:\n\n`F1` - `F12`, `Digit0`- `Digit9`, `KeyA`- `KeyZ`, `Backquote`, `Minus`, `Equal`, `Backslash`, `Backspace`, `Tab`, `Delete`, `Escape`, `ArrowDown`, `End`, `Enter`, `Home`, `Insert`, `PageDown`, `PageUp`, `ArrowRight`, `ArrowUp`, etc.\n\nFollowing modification shortcuts are also supported: `Shift`, `Control`, `Alt`, `Meta`, `ShiftLeft`, `ControlOrMeta`.\n\nHolding down `Shift` will type the text that corresponds to the `key` in the upper case.\n\nIf `key` is a single character, it is case-sensitive, so the values `a` and `A` will generate different respective texts.\n\nShortcuts such as `key: \"Control+o\"`, `key: \"Control++` or `key: \"Control+Shift+T\"` are supported as well. When specified with the modifier, modifier is pressed and being held while the subsequent key is being pressed.\n\n**Usage**\n\n``` javascript\nawait elementHandle.press(key);\nawait elementHandle.press(key, options);\n```\n\n**Arguments**\n\n- `key` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option will default to `true` in the future.\n\n    Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### screenshot[​](#element-handle-screenshot \"Direct link to screenshot\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.screenshot()](class-locator#locator-screenshot) instead. Read more about [locators](../locators).\n\nThis method captures a screenshot of the page, clipped to the size and position of this particular element. If the element is covered by other elements, it will not be actually visible on the screenshot. If the element is a scrollable container, only the currently scrolled content will be visible on the screenshot.\n\nThis method waits for the [actionability](../actionability) checks, then scrolls element into view before taking a screenshot. If the element is detached from DOM, the method throws an error.\n\nReturns the buffer with the captured screenshot.\n\n**Usage**\n\n``` javascript\nawait elementHandle.screenshot();\nawait elementHandle.screenshot(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `animations` \"disabled\" \\| \"allow\" *(optional)*\n\n    When set to `\"disabled\"`, stops CSS animations, CSS transitions and Web Animations. Animations get different treatment depending on their duration:\n\n    - finite animations are fast-forwarded to completion, so they'll fire `transitionend` event.\n    - infinite animations are canceled to initial state, and then played over after the screenshot.\n\n    Defaults to `\"allow\"` that leaves animations untouched.\n\n  - `caret` \"hide\" \\| \"initial\" *(optional)*\n\n    When set to `\"hide\"`, screenshot will hide text caret. When set to `\"initial\"`, text caret behavior will not be changed. Defaults to `\"hide\"`.\n\n  - `mask` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Locator](class-locator \"Locator\")\\> *(optional)*\n\n    Specify locators that should be masked when the screenshot is taken. Masked elements will be overlaid with a pink box `#FF00FF` (customized by `maskColor`) that completely covers its bounding box.\n\n  - `maskColor` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Specify the color of the overlay box for masked elements, in [CSS color format](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Default color is pink `#FF00FF`.\n\n  - `omitBackground` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images. Defaults to `false`.\n\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    The file path to save the image to. The screenshot type will be inferred from file extension. If `path` is a relative path, then it is resolved relative to the current working directory. If no path is provided, the image won't be saved to the disk.\n\n  - `quality` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    The quality of the image, between 0-100. Not applicable to `png` images.\n\n  - `scale` \"css\" \\| \"device\" *(optional)*\n\n    When set to `\"css\"`, screenshot will have a single pixel per each css pixel on the page. For high-dpi devices, this will keep screenshots small. Using `\"device\"` option will produce a single pixel per each device pixel, so screenshots of high-dpi devices will be twice as large or even larger.\n\n    Defaults to `\"device\"`.\n\n  - `style` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Text of the stylesheet to apply while making the screenshot. This is where you can hide dynamic elements, make elements invisible or change their properties to help you creating repeatable screenshots. This stylesheet pierces the Shadow DOM and applies to the inner frames.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `type` \"png\" \\| \"jpeg\" *(optional)*\n\n    Specify screenshot type, defaults to `png`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\\>\n\n### scrollIntoViewIfNeeded[​](#element-handle-scroll-into-view-if-needed \"Direct link to scrollIntoViewIfNeeded\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.scrollIntoViewIfNeeded()](class-locator#locator-scroll-into-view-if-needed) instead. Read more about [locators](../locators).\n\nThis method waits for [actionability](../actionability) checks, then tries to scroll element into view, unless it is completely visible as defined by [IntersectionObserver](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)'s `ratio`.\n\nThrows when `elementHandle` does not point to an element [connected](https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected) to a Document or a ShadowRoot.\n\nSee [scrolling](../input#scrolling) for alternative ways to scroll.\n\n**Usage**\n\n``` javascript\nawait elementHandle.scrollIntoViewIfNeeded();\nawait elementHandle.scrollIntoViewIfNeeded(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### selectOption[​](#element-handle-select-option \"Direct link to selectOption\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.selectOption()](class-locator#locator-select-option) instead. Read more about [locators](../locators).\n\nThis method waits for [actionability](../actionability) checks, waits until all specified options are present in the `<select>` element and selects these options.\n\nIf the target element is not a `<select>` element, this method throws an error. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be used instead.\n\nReturns the array of option values that have been successfully selected.\n\nTriggers a `change` and `input` event once all the provided options have been selected.\n\n**Usage**\n\n``` javascript\n// Single selection matching the value or label\nhandle.selectOption('blue');\n\n// single selection matching the label\nhandle.selectOption({ label: 'Blue' });\n\n// multiple selection\nhandle.selectOption(['red', 'green', 'blue']);\n```\n\n**Arguments**\n\n- `values` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [ElementHandle](class-elementhandle \"ElementHandle\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[ElementHandle](class-elementhandle \"ElementHandle\")\\> \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Matches by `option.value`. Optional.\n\n  - `label` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Matches by `option.label`. Optional.\n\n  - `index` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Matches by the index. Optional.\n\n  Options to select. If the `<select>` has the `multiple` attribute, all matching options are selected, otherwise only the first option matching one of the passed options is selected. String values are matching both values and labels. Option is considered matching if all specified properties match.\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option will default to `true` in the future.\n\n    Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\\>\n\n### selectText[​](#element-handle-select-text \"Direct link to selectText\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.selectText()](class-locator#locator-select-text) instead. Read more about [locators](../locators).\n\nThis method waits for [actionability](../actionability) checks, then focuses the element and selects all its text content.\n\nIf the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), focuses and selects text in the control instead.\n\n**Usage**\n\n``` javascript\nawait elementHandle.selectText();\nawait elementHandle.selectText(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### setChecked[​](#element-handle-set-checked \"Direct link to setChecked\")\n\n> Discouraged\n>\n> Use locator-based [locator.setChecked()](class-locator#locator-set-checked) instead. Read more about [locators](../locators).\n\nThis method checks or unchecks an element by performing the following steps:\n\n1.  Ensure that element is a checkbox or a radio input. If not, this method throws.\n2.  If the element already has the right checked state, this method returns immediately.\n3.  Wait for [actionability](../actionability) checks on the matched element, unless `force` option is set. If the element is detached during the checks, the whole action is retried.\n4.  Scroll the element into view if needed.\n5.  Use [page.mouse](class-page#page-mouse) to click in the center of the element.\n6.  Ensure that the element is now checked or unchecked. If not, this method throws.\n\nWhen all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror \"TimeoutError\"). Passing zero timeout disables this.\n\n**Usage**\n\n``` javascript\nawait elementHandle.setChecked(checked);\nawait elementHandle.setChecked(checked, options);\n```\n\n**Arguments**\n\n- `checked` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n  Whether to check or uncheck the checkbox.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### setInputFiles[​](#element-handle-set-input-files \"Direct link to setInputFiles\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.setInputFiles()](class-locator#locator-set-input-files) instead. Read more about [locators](../locators).\n\nSets the value of the file input to these file paths or files. If some of the `filePaths` are relative paths, then they are resolved relative to the current working directory. For empty array, clears the selected files. For inputs with a `[webkitdirectory]` attribute, only a single directory path is supported.\n\nThis method expects [ElementHandle](class-elementhandle \"ElementHandle\") to point to an [input element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input). However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), targets the control instead.\n\n**Usage**\n\n``` javascript\nawait elementHandle.setInputFiles(files);\nawait elementHandle.setInputFiles(files, options);\n```\n\n**Arguments**\n\n- `files` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    File name\n\n  - `mimeType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    File type\n\n  - `buffer` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\n\n    File content\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### tap[​](#element-handle-tap \"Direct link to tap\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.tap()](class-locator#locator-tap) instead. Read more about [locators](../locators).\n\nThis method taps the element by performing the following steps:\n\n1.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.\n2.  Scroll the element into view if needed.\n3.  Use [page.touchscreen](class-page#page-touchscreen) to tap the center of the element, or the specified `position`.\n\nIf the element is detached from the DOM at any moment during the action, this method throws.\n\nWhen all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror \"TimeoutError\"). Passing zero timeout disables this.\n\n> note\n>\n> `elementHandle.tap()` requires that the `hasTouch` option of the browser context be set to true.\n\n**Usage**\n\n``` javascript\nawait elementHandle.tap();\nawait elementHandle.tap(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `modifiers` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<\"Alt\" \\| \"Control\" \\| \"ControlOrMeta\" \\| \"Meta\" \\| \"Shift\"\\> *(optional)*\n\n    Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. \"ControlOrMeta\" resolves to \"Control\" on Windows and Linux and to \"Meta\" on macOS.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### textContent[​](#element-handle-text-content \"Direct link to textContent\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.textContent()](class-locator#locator-text-content) instead. Read more about [locators](../locators).\n\nReturns the `node.textContent`.\n\n**Usage**\n\n``` javascript\nawait elementHandle.textContent();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### type[​](#element-handle-type \"Direct link to type\")\n\nAdded before v1.9\n\n> Deprecated\n>\n> In most cases, you should use [locator.fill()](class-locator#locator-fill) instead. You only need to press keys one by one if there is special keyboard handling on the page - in this case use [locator.pressSequentially()](class-locator#locator-press-sequentially).\n\nFocuses the element, and then sends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the text.\n\nTo press a special key, like `Control` or `ArrowDown`, use [elementHandle.press()](class-elementhandle#element-handle-press).\n\n**Usage**\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A text to type into a focused element.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to wait between key presses in milliseconds. Defaults to 0.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### uncheck[​](#element-handle-uncheck \"Direct link to uncheck\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.uncheck()](class-locator#locator-uncheck) instead. Read more about [locators](../locators).\n\nThis method checks the element by performing the following steps:\n\n1.  Ensure that element is a checkbox or a radio input. If not, this method throws. If the element is already unchecked, this method returns immediately.\n2.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.\n3.  Scroll the element into view if needed.\n4.  Use [page.mouse](class-page#page-mouse) to click in the center of the element.\n5.  Ensure that the element is now unchecked. If not, this method throws.\n\nIf the element is detached from the DOM at any moment during the action, this method throws.\n\nWhen all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror \"TimeoutError\"). Passing zero timeout disables this.\n\n**Usage**\n\n``` javascript\nawait elementHandle.uncheck();\nawait elementHandle.uncheck(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### waitForSelector[​](#element-handle-wait-for-selector \"Direct link to waitForSelector\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use web assertions that assert visibility or a locator-based [locator.waitFor()](class-locator#locator-wait-for) instead.\n\nReturns element specified by selector when it satisfies `state` option. Returns `null` if waiting for `hidden` or `detached`.\n\nWait for the `selector` relative to the element handle to satisfy `state` option (either appear/disappear from dom, or become visible/hidden). If at the moment of calling the method `selector` already satisfies the condition, the method will return immediately. If the selector doesn't satisfy the condition for the `timeout` milliseconds, the function will throw.\n\n**Usage**\n\n``` javascript\nawait page.setContent(`<div><span></span></div>`);\nconst div = await page.$('div');\n// Waiting for the 'span' selector relative to the div.\nconst span = await div.waitForSelector('span', { state: 'attached' });\n```\n\n> note\n>\n> This method does not work across navigations, use [page.waitForSelector()](class-page#page-wait-for-selector) instead.\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to query for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `state` \"attached\" \\| \"detached\" \\| \"visible\" \\| \"hidden\" *(optional)*\n\n    Defaults to `'visible'`. Can be either:\n\n    - `'attached'` - wait for element to be present in DOM.\n    - `'detached'` - wait for element to not be present in DOM.\n    - `'visible'` - wait for element to have non-empty bounding box and no `visibility:hidden`. Note that element without any content or with `display:none` has an empty bounding box and is not considered visible.\n    - `'hidden'` - wait for element to be either detached from DOM, or have an empty bounding box or `visibility:hidden`. This is opposite to the `'visible'` option.\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [ElementHandle](class-elementhandle \"ElementHandle\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-elementhandle](https://playwright.dev/docs/api/class-elementhandle)"
- name: elementHandle.$
  id: api/class-elementhandle#element-handle-query-selector
  summary: Use locator-based page.locator() instead
  belongs_to: ElementHandle
  description: |-
    ### $[​](#element-handle-query-selector "Direct link to $")

    > Discouraged
    >
    > Use locator-based [page.locator()](class-page#page-locator) instead. Read more about [locators](../locators).

    The method finds an element matching the specified selector in the `ElementHandle`'s subtree. If no elements match the selector, returns `null`.

    **Usage**

    ``` javascript
    await elementHandle.$(selector);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to query for.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [ElementHandle](class-elementhandle "ElementHandle")\>

    &nbsp;
- name: elementHandle.$$
  id: api/class-elementhandle#element-handle-query-selector-all
  summary: Use locator-based page.locator() instead
  belongs_to: ElementHandle
  description: |-
    ### $$[​](#element-handle-query-selector-all "Direct link to $$")

    > Discouraged
    >
    > Use locator-based [page.locator()](class-page#page-locator) instead. Read more about [locators](../locators).

    The method finds all elements matching the specified selector in the `ElementHandle`s subtree. If no elements match the selector, returns empty array.

    **Usage**

    ``` javascript
    await elementHandle.$$(selector);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to query for.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[ElementHandle](class-elementhandle "ElementHandle")\>\>

    &nbsp;
- name: elementHandle.$$eval
  id: api/class-elementhandle#element-handle-eval-on-selector-all
  summary: In most cases, locator.evaluateAll(), other Locator helper methods and web-first assertions do a better job
  belongs_to: ElementHandle
  description: |-
    ### $$eval[​](#element-handle-eval-on-selector-all "Direct link to $$eval")

    > Discouraged
    >
    > In most cases, [locator.evaluateAll()](class-locator#locator-evaluate-all), other [Locator](class-locator "Locator") helper methods and web-first assertions do a better job.

    Returns the return value of `pageFunction`.

    The method finds all elements matching the specified selector in the `ElementHandle`'s subtree and passes an array of matched elements as a first argument to `pageFunction`.

    If `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [elementHandle.$$eval()](class-elementhandle#element-handle-eval-on-selector-all) would wait for the promise to resolve and return its value.

    **Usage**

    ``` html
    <div class="feed">
      <div class="tweet">Hello!</div>
      <div class="tweet">Hi!</div>
    </div>
    ```

    ``` javascript
    const feedHandle = await page.$('.feed');
    expect(await feedHandle.$$eval('.tweet', nodes =>
      nodes.map(n => n.innerText))).toEqual(['Hello!', 'Hi!'],
    );
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to query for.

    - `pageFunction`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Element](https://developer.mozilla.org/en-US/docs/Web/API/element "Element")\>) \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Function to be evaluated in the page context.

    - `arg` [EvaluationArgument](../evaluating#evaluation-argument "EvaluationArgument") *(optional)*

      Optional argument to pass to `pageFunction`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>

    &nbsp;
- name: elementHandle.$eval
  id: api/class-elementhandle#element-handle-eval-on-selector
  summary: This method does not wait for the element to pass actionability checks and therefore can lead to the flaky tests
  belongs_to: ElementHandle
  description: |-
    ### $eval[​](#element-handle-eval-on-selector "Direct link to $eval")

    > Discouraged
    >
    > This method does not wait for the element to pass actionability checks and therefore can lead to the flaky tests. Use [locator.evaluate()](class-locator#locator-evaluate), other [Locator](class-locator "Locator") helper methods or web-first assertions instead.

    Returns the return value of `pageFunction`.

    The method finds an element matching the specified selector in the `ElementHandle`s subtree and passes it as a first argument to `pageFunction`. If no elements match the selector, the method throws an error.

    If `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [elementHandle.$eval()](class-elementhandle#element-handle-eval-on-selector) would wait for the promise to resolve and return its value.

    **Usage**

    ``` javascript
    const tweetHandle = await page.$('.tweet');
    expect(await tweetHandle.$eval('.like', node => node.innerText)).toBe('100');
    expect(await tweetHandle.$eval('.retweets', node => node.innerText)).toBe('10');
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to query for.

    - `pageFunction`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Element](https://developer.mozilla.org/en-US/docs/Web/API/element "Element")) \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Function to be evaluated in the page context.

    - `arg` [EvaluationArgument](../evaluating#evaluation-argument "EvaluationArgument") *(optional)*

      Optional argument to pass to `pageFunction`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>

    &nbsp;
- name: elementHandle.boundingBox
  id: api/class-elementhandle#element-handle-bounding-box
  summary: This method returns the bounding box of the element, or null if the element is not visible
  belongs_to: ElementHandle
  description: |-
    ### boundingBox[​](#element-handle-bounding-box "Direct link to boundingBox")

    Added before v1.9

    This method returns the bounding box of the element, or `null` if the element is not visible. The bounding box is calculated relative to the main frame viewport - which is usually the same as the browser window.

    Scrolling affects the returned bounding box, similarly to [Element.getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect). That means `x` and/or `y` may be negative.

    Elements from child frames return the bounding box relative to the main frame, unlike the [Element.getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect).

    Assuming the page is static, it is safe to use bounding box coordinates to perform input. For example, the following snippet should click the center of the element.

    **Usage**

    ``` javascript
    const box = await elementHandle.boundingBox();
    await page.mouse.click(box.x + box.width / 2, box.y + box.height / 2);
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `x`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        the x coordinate of the element in pixels.

      - `y`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        the y coordinate of the element in pixels.

      - `width`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        the width of the element in pixels.

      - `height`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        the height of the element in pixels.
- name: elementHandle.check
  id: api/class-elementhandle#element-handle-check
  summary: Use locator-based locator.check() instead
  belongs_to: ElementHandle
  description: |-
    ### check[​](#element-handle-check "Direct link to check")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.check()](class-locator#locator-check) instead. Read more about [locators](../locators).

    This method checks the element by performing the following steps:

    1.  Ensure that element is a checkbox or a radio input. If not, this method throws. If the element is already checked, this method returns immediately.
    2.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.
    3.  Scroll the element into view if needed.
    4.  Use [page.mouse](class-page#page-mouse) to click in the center of the element.
    5.  Ensure that the element is now checked. If not, this method throws.

    If the element is detached from the DOM at any moment during the action, this method throws.

    When all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror "TimeoutError"). Passing zero timeout disables this.

    **Usage**

    ``` javascript
    await elementHandle.check();
    await elementHandle.check(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: elementHandle.click
  id: api/class-elementhandle#element-handle-click
  summary: Use locator-based locator.click() instead
  belongs_to: ElementHandle
  description: |-
    ### click[​](#element-handle-click "Direct link to click")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.click()](class-locator#locator-click) instead. Read more about [locators](../locators).

    This method clicks the element by performing the following steps:

    1.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.
    2.  Scroll the element into view if needed.
    3.  Use [page.mouse](class-page#page-mouse) to click in the center of the element, or the specified `position`.
    4.  Wait for initiated navigations to either succeed or fail, unless `noWaitAfter` option is set.

    If the element is detached from the DOM at any moment during the action, this method throws.

    When all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror "TimeoutError"). Passing zero timeout disables this.

    **Usage**

    ``` javascript
    await elementHandle.click();
    await elementHandle.click(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `button` "left" \| "right" \| "middle" *(optional)*

        Defaults to `left`.

      - `clickCount` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail "UIEvent.detail").

      - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.

      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `modifiers`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<"Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\> *(optional)*

        Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option will default to `true` in the future.

        Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.

      - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: elementHandle.contentFrame
  id: api/class-elementhandle#element-handle-content-frame
  summary: null
  belongs_to: ElementHandle
  description: |-
    ### contentFrame[​](#element-handle-content-frame "Direct link to contentFrame")

    Added before v1.9

    Returns the content frame for element handles referencing iframe nodes, or `null` otherwise

    **Usage**

    ``` javascript
    await elementHandle.contentFrame();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Frame](class-frame "Frame")\>

    &nbsp;
- name: elementHandle.dblclick
  id: api/class-elementhandle#element-handle-dblclick
  summary: Use locator-based locator.dblclick() instead
  belongs_to: ElementHandle
  description: |-
    ### dblclick[​](#element-handle-dblclick "Direct link to dblclick")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.dblclick()](class-locator#locator-dblclick) instead. Read more about [locators](../locators).

    This method double clicks the element by performing the following steps:

    1.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.
    2.  Scroll the element into view if needed.
    3.  Use [page.mouse](class-page#page-mouse) to double click in the center of the element, or the specified `position`.

    If the element is detached from the DOM at any moment during the action, this method throws.

    When all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror "TimeoutError"). Passing zero timeout disables this.

    > note
    >
    > `elementHandle.dblclick()` dispatches two `click` events and a single `dblclick` event.

    **Usage**

    ``` javascript
    await elementHandle.dblclick();
    await elementHandle.dblclick(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `button` "left" \| "right" \| "middle" *(optional)*

        Defaults to `left`.

      - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.

      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `modifiers`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<"Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\> *(optional)*

        Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: elementHandle.dispatchEvent
  id: api/class-elementhandle#element-handle-dispatch-event
  summary: Use locator-based locator.dispatchEvent() instead
  belongs_to: ElementHandle
  description: |-
    ### dispatchEvent[​](#element-handle-dispatch-event "Direct link to dispatchEvent")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.dispatchEvent()](class-locator#locator-dispatch-event) instead. Read more about [locators](../locators).

    The snippet below dispatches the `click` event on the element. Regardless of the visibility state of the element, `click` is dispatched. This is equivalent to calling [element.click()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click).

    **Usage**

    ``` javascript
    await elementHandle.dispatchEvent('click');
    ```

    Under the hood, it creates an instance of an event based on the given `type`, initializes it with `eventInit` properties and dispatches it on the element. Events are `composed`, `cancelable` and bubble by default.

    Since `eventInit` is event-specific, please refer to the events documentation for the lists of initial properties:

    - [DeviceMotionEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/DeviceMotionEvent)
    - [DeviceOrientationEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/DeviceOrientationEvent)
    - [DragEvent](https://developer.mozilla.org/en-US/docs/Web/API/DragEvent/DragEvent)
    - [Event](https://developer.mozilla.org/en-US/docs/Web/API/Event/Event)
    - [FocusEvent](https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/FocusEvent)
    - [KeyboardEvent](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent)
    - [MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent)
    - [PointerEvent](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/PointerEvent)
    - [TouchEvent](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/TouchEvent)
    - [WheelEvent](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/WheelEvent)

    You can also specify `JSHandle` as the property value if you want live objects to be passed into the event:

    ``` javascript
    // Note you can only create DataTransfer in Chromium and Firefox
    const dataTransfer = await page.evaluateHandle(() => new DataTransfer());
    await elementHandle.dispatchEvent('dragstart', { dataTransfer });
    ```

    **Arguments**

    - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      DOM event type: `"click"`, `"dragstart"`, etc.

    - `eventInit` [EvaluationArgument](../evaluating#evaluation-argument "EvaluationArgument") *(optional)*

      Optional event-specific initialization properties.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: elementHandle.fill
  id: api/class-elementhandle#element-handle-fill
  summary: Use locator-based locator.fill() instead
  belongs_to: ElementHandle
  description: |-
    ### fill[​](#element-handle-fill "Direct link to fill")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.fill()](class-locator#locator-fill) instead. Read more about [locators](../locators).

    This method waits for [actionability](../actionability) checks, focuses the element, fills it and triggers an `input` event after filling. Note that you can pass an empty string to clear the input field.

    If the target element is not an `<input>`, `<textarea>` or `[contenteditable]` element, this method throws an error. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be filled instead.

    To send fine-grained keyboard events, use [locator.pressSequentially()](class-locator#locator-press-sequentially).

    **Usage**

    ``` javascript
    await elementHandle.fill(value);
    await elementHandle.fill(value, options);
    ```

    **Arguments**

    - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Value to set for the `<input>`, `<textarea>` or `[contenteditable]` element.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: elementHandle.focus
  id: api/class-elementhandle#element-handle-focus
  summary: Use locator-based locator.focus() instead
  belongs_to: ElementHandle
  description: |-
    ### focus[​](#element-handle-focus "Direct link to focus")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.focus()](class-locator#locator-focus) instead. Read more about [locators](../locators).

    Calls [focus](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus) on the element.

    **Usage**

    ``` javascript
    await elementHandle.focus();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: elementHandle.getAttribute
  id: api/class-elementhandle#element-handle-get-attribute
  summary: Use locator-based locator.getAttribute() instead
  belongs_to: ElementHandle
  description: |-
    ### getAttribute[​](#element-handle-get-attribute "Direct link to getAttribute")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.getAttribute()](class-locator#locator-get-attribute) instead. Read more about [locators](../locators).

    Returns element attribute value.

    **Usage**

    ``` javascript
    await elementHandle.getAttribute(name);
    ```

    **Arguments**

    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Attribute name to get the value for.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: elementHandle.hover
  id: api/class-elementhandle#element-handle-hover
  summary: Use locator-based locator.hover() instead
  belongs_to: ElementHandle
  description: |-
    ### hover[​](#element-handle-hover "Direct link to hover")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.hover()](class-locator#locator-hover) instead. Read more about [locators](../locators).

    This method hovers over the element by performing the following steps:

    1.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.
    2.  Scroll the element into view if needed.
    3.  Use [page.mouse](class-page#page-mouse) to hover over the center of the element, or the specified `position`.

    If the element is detached from the DOM at any moment during the action, this method throws.

    When all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror "TimeoutError"). Passing zero timeout disables this.

    **Usage**

    ``` javascript
    await elementHandle.hover();
    await elementHandle.hover(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `modifiers`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<"Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\> *(optional)*

        Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: elementHandle.innerHTML
  id: api/class-elementhandle#element-handle-inner-html
  summary: Use locator-based locator.innerHTML() instead
  belongs_to: ElementHandle
  description: |-
    ### innerHTML[​](#element-handle-inner-html "Direct link to innerHTML")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.innerHTML()](class-locator#locator-inner-html) instead. Read more about [locators](../locators).

    Returns the `element.innerHTML`.

    **Usage**

    ``` javascript
    await elementHandle.innerHTML();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: elementHandle.innerText
  id: api/class-elementhandle#element-handle-inner-text
  summary: Use locator-based locator.innerText() instead
  belongs_to: ElementHandle
  description: |-
    ### innerText[​](#element-handle-inner-text "Direct link to innerText")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.innerText()](class-locator#locator-inner-text) instead. Read more about [locators](../locators).

    Returns the `element.innerText`.

    **Usage**

    ``` javascript
    await elementHandle.innerText();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: elementHandle.inputValue
  id: api/class-elementhandle#element-handle-input-value
  summary: Use locator-based locator.inputValue() instead
  belongs_to: ElementHandle
  description: |-
    ### inputValue[​](#element-handle-input-value "Direct link to inputValue")

    > Discouraged
    >
    > Use locator-based [locator.inputValue()](class-locator#locator-input-value) instead. Read more about [locators](../locators).

    Returns `input.value` for the selected `<input>` or `<textarea>` or `<select>` element.

    Throws for non-input elements. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), returns the value of the control.

    **Usage**

    ``` javascript
    await elementHandle.inputValue();
    await elementHandle.inputValue(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: elementHandle.isChecked
  id: api/class-elementhandle#element-handle-is-checked
  summary: Use locator-based locator.isChecked() instead
  belongs_to: ElementHandle
  description: |-
    ### isChecked[​](#element-handle-is-checked "Direct link to isChecked")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.isChecked()](class-locator#locator-is-checked) instead. Read more about [locators](../locators).

    Returns whether the element is checked. Throws if the element is not a checkbox or radio input.

    **Usage**

    ``` javascript
    await elementHandle.isChecked();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    &nbsp;
- name: elementHandle.isDisabled
  id: api/class-elementhandle#element-handle-is-disabled
  summary: Use locator-based locator.isDisabled() instead
  belongs_to: ElementHandle
  description: |-
    ### isDisabled[​](#element-handle-is-disabled "Direct link to isDisabled")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.isDisabled()](class-locator#locator-is-disabled) instead. Read more about [locators](../locators).

    Returns whether the element is disabled, the opposite of [enabled](../actionability#enabled).

    **Usage**

    ``` javascript
    await elementHandle.isDisabled();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    &nbsp;
- name: elementHandle.isEditable
  id: api/class-elementhandle#element-handle-is-editable
  summary: Use locator-based locator.isEditable() instead
  belongs_to: ElementHandle
  description: |-
    ### isEditable[​](#element-handle-is-editable "Direct link to isEditable")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.isEditable()](class-locator#locator-is-editable) instead. Read more about [locators](../locators).

    Returns whether the element is [editable](../actionability#editable).

    **Usage**

    ``` javascript
    await elementHandle.isEditable();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    &nbsp;
- name: elementHandle.isEnabled
  id: api/class-elementhandle#element-handle-is-enabled
  summary: Use locator-based locator.isEnabled() instead
  belongs_to: ElementHandle
  description: |-
    ### isEnabled[​](#element-handle-is-enabled "Direct link to isEnabled")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.isEnabled()](class-locator#locator-is-enabled) instead. Read more about [locators](../locators).

    Returns whether the element is [enabled](../actionability#enabled).

    **Usage**

    ``` javascript
    await elementHandle.isEnabled();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    &nbsp;
- name: elementHandle.isHidden
  id: api/class-elementhandle#element-handle-is-hidden
  summary: Use locator-based locator.isHidden() instead
  belongs_to: ElementHandle
  description: |-
    ### isHidden[​](#element-handle-is-hidden "Direct link to isHidden")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.isHidden()](class-locator#locator-is-hidden) instead. Read more about [locators](../locators).

    Returns whether the element is hidden, the opposite of [visible](../actionability#visible).

    **Usage**

    ``` javascript
    await elementHandle.isHidden();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    &nbsp;
- name: elementHandle.isVisible
  id: api/class-elementhandle#element-handle-is-visible
  summary: Use locator-based locator.isVisible() instead
  belongs_to: ElementHandle
  description: |-
    ### isVisible[​](#element-handle-is-visible "Direct link to isVisible")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.isVisible()](class-locator#locator-is-visible) instead. Read more about [locators](../locators).

    Returns whether the element is [visible](../actionability#visible).

    **Usage**

    ``` javascript
    await elementHandle.isVisible();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    &nbsp;
- name: elementHandle.ownerFrame
  id: api/class-elementhandle#element-handle-owner-frame
  summary: Returns the frame containing the given element
  belongs_to: ElementHandle
  description: |-
    ### ownerFrame[​](#element-handle-owner-frame "Direct link to ownerFrame")

    Added before v1.9

    Returns the frame containing the given element.

    **Usage**

    ``` javascript
    await elementHandle.ownerFrame();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Frame](class-frame "Frame")\>

    &nbsp;
- name: elementHandle.press
  id: api/class-elementhandle#element-handle-press
  summary: Use locator-based locator.press() instead
  belongs_to: ElementHandle
  description: |-
    ### press[​](#element-handle-press "Direct link to press")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.press()](class-locator#locator-press) instead. Read more about [locators](../locators).

    Focuses the element, and then uses [keyboard.down()](class-keyboard#keyboard-down) and [keyboard.up()](class-keyboard#keyboard-up).

    `key` can specify the intended [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) value or a single character to generate the text for. A superset of the `key` values can be found [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values). Examples of the keys are:

    `F1` - `F12`, `Digit0`- `Digit9`, `KeyA`- `KeyZ`, `Backquote`, `Minus`, `Equal`, `Backslash`, `Backspace`, `Tab`, `Delete`, `Escape`, `ArrowDown`, `End`, `Enter`, `Home`, `Insert`, `PageDown`, `PageUp`, `ArrowRight`, `ArrowUp`, etc.

    Following modification shortcuts are also supported: `Shift`, `Control`, `Alt`, `Meta`, `ShiftLeft`, `ControlOrMeta`.

    Holding down `Shift` will type the text that corresponds to the `key` in the upper case.

    If `key` is a single character, it is case-sensitive, so the values `a` and `A` will generate different respective texts.

    Shortcuts such as `key: "Control+o"`, `key: "Control++` or `key: "Control+Shift+T"` are supported as well. When specified with the modifier, modifier is pressed and being held while the subsequent key is being pressed.

    **Usage**

    ``` javascript
    await elementHandle.press(key);
    await elementHandle.press(key, options);
    ```

    **Arguments**

    - `key` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option will default to `true` in the future.

        Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: elementHandle.screenshot
  id: api/class-elementhandle#element-handle-screenshot
  summary: Use locator-based locator.screenshot() instead
  belongs_to: ElementHandle
  description: |-
    ### screenshot[​](#element-handle-screenshot "Direct link to screenshot")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.screenshot()](class-locator#locator-screenshot) instead. Read more about [locators](../locators).

    This method captures a screenshot of the page, clipped to the size and position of this particular element. If the element is covered by other elements, it will not be actually visible on the screenshot. If the element is a scrollable container, only the currently scrolled content will be visible on the screenshot.

    This method waits for the [actionability](../actionability) checks, then scrolls element into view before taking a screenshot. If the element is detached from DOM, the method throws an error.

    Returns the buffer with the captured screenshot.

    **Usage**

    ``` javascript
    await elementHandle.screenshot();
    await elementHandle.screenshot(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `animations` "disabled" \| "allow" *(optional)*

        When set to `"disabled"`, stops CSS animations, CSS transitions and Web Animations. Animations get different treatment depending on their duration:

        - finite animations are fast-forwarded to completion, so they'll fire `transitionend` event.
        - infinite animations are canceled to initial state, and then played over after the screenshot.

        Defaults to `"allow"` that leaves animations untouched.

      - `caret` "hide" \| "initial" *(optional)*

        When set to `"hide"`, screenshot will hide text caret. When set to `"initial"`, text caret behavior will not be changed. Defaults to `"hide"`.

      - `mask`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Locator](class-locator "Locator")\> *(optional)*

        Specify locators that should be masked when the screenshot is taken. Masked elements will be overlaid with a pink box `#FF00FF` (customized by `maskColor`) that completely covers its bounding box.

      - `maskColor` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Specify the color of the overlay box for masked elements, in [CSS color format](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Default color is pink `#FF00FF`.

      - `omitBackground` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images. Defaults to `false`.

      - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        The file path to save the image to. The screenshot type will be inferred from file extension. If `path` is a relative path, then it is resolved relative to the current working directory. If no path is provided, the image won't be saved to the disk.

      - `quality` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        The quality of the image, between 0-100. Not applicable to `png` images.

      - `scale` "css" \| "device" *(optional)*

        When set to `"css"`, screenshot will have a single pixel per each css pixel on the page. For high-dpi devices, this will keep screenshots small. Using `"device"` option will produce a single pixel per each device pixel, so screenshots of high-dpi devices will be twice as large or even larger.

        Defaults to `"device"`.

      - `style` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Text of the stylesheet to apply while making the screenshot. This is where you can hide dynamic elements, make elements invisible or change their properties to help you creating repeatable screenshots. This stylesheet pierces the Shadow DOM and applies to the inner frames.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `type` "png" \| "jpeg" *(optional)*

        Specify screenshot type, defaults to `png`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")\>

    &nbsp;
- name: elementHandle.scrollIntoViewIfNeeded
  id: api/class-elementhandle#element-handle-scroll-into-view-if-needed
  summary: Use locator-based locator.scrollIntoViewIfNeeded() instead
  belongs_to: ElementHandle
  description: |-
    ### scrollIntoViewIfNeeded[​](#element-handle-scroll-into-view-if-needed "Direct link to scrollIntoViewIfNeeded")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.scrollIntoViewIfNeeded()](class-locator#locator-scroll-into-view-if-needed) instead. Read more about [locators](../locators).

    This method waits for [actionability](../actionability) checks, then tries to scroll element into view, unless it is completely visible as defined by [IntersectionObserver](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)'s `ratio`.

    Throws when `elementHandle` does not point to an element [connected](https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected) to a Document or a ShadowRoot.

    See [scrolling](../input#scrolling) for alternative ways to scroll.

    **Usage**

    ``` javascript
    await elementHandle.scrollIntoViewIfNeeded();
    await elementHandle.scrollIntoViewIfNeeded(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: elementHandle.selectOption
  id: api/class-elementhandle#element-handle-select-option
  summary: Use locator-based locator.selectOption() instead
  belongs_to: ElementHandle
  description: |-
    ### selectOption[​](#element-handle-select-option "Direct link to selectOption")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.selectOption()](class-locator#locator-select-option) instead. Read more about [locators](../locators).

    This method waits for [actionability](../actionability) checks, waits until all specified options are present in the `<select>` element and selects these options.

    If the target element is not a `<select>` element, this method throws an error. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be used instead.

    Returns the array of option values that have been successfully selected.

    Triggers a `change` and `input` event once all the provided options have been selected.

    **Usage**

    ``` javascript
    // Single selection matching the value or label
    handle.selectOption('blue');

    // single selection matching the label
    handle.selectOption({ label: 'Blue' });

    // multiple selection
    handle.selectOption(['red', 'green', 'blue']);
    ```

    **Arguments**

    - `values`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [ElementHandle](class-elementhandle "ElementHandle") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[ElementHandle](class-elementhandle "ElementHandle")\> \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `value`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")*(optional)*

        Matches by `option.value`. Optional.

      - `label`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")*(optional)*

        Matches by `option.label`. Optional.

      - `index`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")*(optional)*

        Matches by the index. Optional.

      Options to select. If the `<select>` has the `multiple` attribute, all matching options are selected, otherwise only the first option matching one of the passed options is selected. String values are matching both values and labels. Option is considered matching if all specified properties match.
    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option will default to `true` in the future.

        Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>\>

    &nbsp;
- name: elementHandle.selectText
  id: api/class-elementhandle#element-handle-select-text
  summary: Use locator-based locator.selectText() instead
  belongs_to: ElementHandle
  description: |-
    ### selectText[​](#element-handle-select-text "Direct link to selectText")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.selectText()](class-locator#locator-select-text) instead. Read more about [locators](../locators).

    This method waits for [actionability](../actionability) checks, then focuses the element and selects all its text content.

    If the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), focuses and selects text in the control instead.

    **Usage**

    ``` javascript
    await elementHandle.selectText();
    await elementHandle.selectText(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: elementHandle.setChecked
  id: api/class-elementhandle#element-handle-set-checked
  summary: Use locator-based locator.setChecked() instead
  belongs_to: ElementHandle
  description: |-
    ### setChecked[​](#element-handle-set-checked "Direct link to setChecked")

    > Discouraged
    >
    > Use locator-based [locator.setChecked()](class-locator#locator-set-checked) instead. Read more about [locators](../locators).

    This method checks or unchecks an element by performing the following steps:

    1.  Ensure that element is a checkbox or a radio input. If not, this method throws.
    2.  If the element already has the right checked state, this method returns immediately.
    3.  Wait for [actionability](../actionability) checks on the matched element, unless `force` option is set. If the element is detached during the checks, the whole action is retried.
    4.  Scroll the element into view if needed.
    5.  Use [page.mouse](class-page#page-mouse) to click in the center of the element.
    6.  Ensure that the element is now checked or unchecked. If not, this method throws.

    When all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror "TimeoutError"). Passing zero timeout disables this.

    **Usage**

    ``` javascript
    await elementHandle.setChecked(checked);
    await elementHandle.setChecked(checked, options);
    ```

    **Arguments**

    - `checked` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

      Whether to check or uncheck the checkbox.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: elementHandle.setInputFiles
  id: api/class-elementhandle#element-handle-set-input-files
  summary: Use locator-based locator.setInputFiles() instead
  belongs_to: ElementHandle
  description: |-
    ### setInputFiles[​](#element-handle-set-input-files "Direct link to setInputFiles")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.setInputFiles()](class-locator#locator-set-input-files) instead. Read more about [locators](../locators).

    Sets the value of the file input to these file paths or files. If some of the `filePaths` are relative paths, then they are resolved relative to the current working directory. For empty array, clears the selected files. For inputs with a `[webkitdirectory]` attribute, only a single directory path is supported.

    This method expects [ElementHandle](class-elementhandle "ElementHandle") to point to an [input element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input). However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), targets the control instead.

    **Usage**

    ``` javascript
    await elementHandle.setInputFiles(files);
    await elementHandle.setInputFiles(files, options);
    ```

    **Arguments**

    - `files`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        File name

      - `mimeType`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        File type

      - `buffer`[Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")

        File content
    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: elementHandle.tap
  id: api/class-elementhandle#element-handle-tap
  summary: Use locator-based locator.tap() instead
  belongs_to: ElementHandle
  description: |-
    ### tap[​](#element-handle-tap "Direct link to tap")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.tap()](class-locator#locator-tap) instead. Read more about [locators](../locators).

    This method taps the element by performing the following steps:

    1.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.
    2.  Scroll the element into view if needed.
    3.  Use [page.touchscreen](class-page#page-touchscreen) to tap the center of the element, or the specified `position`.

    If the element is detached from the DOM at any moment during the action, this method throws.

    When all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror "TimeoutError"). Passing zero timeout disables this.

    > note
    >
    > `elementHandle.tap()` requires that the `hasTouch` option of the browser context be set to true.

    **Usage**

    ``` javascript
    await elementHandle.tap();
    await elementHandle.tap(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `modifiers`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<"Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\> *(optional)*

        Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: elementHandle.textContent
  id: api/class-elementhandle#element-handle-text-content
  summary: Use locator-based locator.textContent() instead
  belongs_to: ElementHandle
  description: |-
    ### textContent[​](#element-handle-text-content "Direct link to textContent")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.textContent()](class-locator#locator-text-content) instead. Read more about [locators](../locators).

    Returns the `node.textContent`.

    **Usage**

    ``` javascript
    await elementHandle.textContent();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: elementHandle.type
  id: api/class-elementhandle#element-handle-type
  summary: In most cases, you should use locator.fill() instead
  belongs_to: ElementHandle
  description: |-
    ### type[​](#element-handle-type "Direct link to type")

    Added before v1.9

    > Deprecated
    >
    > In most cases, you should use [locator.fill()](class-locator#locator-fill) instead. You only need to press keys one by one if there is special keyboard handling on the page - in this case use [locator.pressSequentially()](class-locator#locator-press-sequentially).

    Focuses the element, and then sends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the text.

    To press a special key, like `Control` or `ArrowDown`, use [elementHandle.press()](class-elementhandle#element-handle-press).

    **Usage**

    **Arguments**

    - `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A text to type into a focused element.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to wait between key presses in milliseconds. Defaults to 0.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: elementHandle.uncheck
  id: api/class-elementhandle#element-handle-uncheck
  summary: Use locator-based locator.uncheck() instead
  belongs_to: ElementHandle
  description: |-
    ### uncheck[​](#element-handle-uncheck "Direct link to uncheck")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.uncheck()](class-locator#locator-uncheck) instead. Read more about [locators](../locators).

    This method checks the element by performing the following steps:

    1.  Ensure that element is a checkbox or a radio input. If not, this method throws. If the element is already unchecked, this method returns immediately.
    2.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.
    3.  Scroll the element into view if needed.
    4.  Use [page.mouse](class-page#page-mouse) to click in the center of the element.
    5.  Ensure that the element is now unchecked. If not, this method throws.

    If the element is detached from the DOM at any moment during the action, this method throws.

    When all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror "TimeoutError"). Passing zero timeout disables this.

    **Usage**

    ``` javascript
    await elementHandle.uncheck();
    await elementHandle.uncheck(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: elementHandle.waitForElementState
  id: api/class-elementhandle#element-handle-wait-for-element-state
  summary: Returns when the element satisfies the state
  belongs_to: ElementHandle
  description: |-
    ### waitForElementState[​](#element-handle-wait-for-element-state "Direct link to waitForElementState")

    Added before v1.9

    Returns when the element satisfies the `state`.

    Depending on the `state` parameter, this method waits for one of the [actionability](../actionability) checks to pass. This method throws when the element is detached while waiting, unless waiting for the `"hidden"` state.

    - `"visible"` Wait until the element is [visible](../actionability#visible).
    - `"hidden"` Wait until the element is [not visible](../actionability#visible) or not attached. Note that waiting for hidden does not throw when the element detaches.
    - `"stable"` Wait until the element is both [visible](../actionability#visible) and [stable](../actionability#stable).
    - `"enabled"` Wait until the element is [enabled](../actionability#enabled).
    - `"disabled"` Wait until the element is [not enabled](../actionability#enabled).
    - `"editable"` Wait until the element is [editable](../actionability#editable).

    If the element does not satisfy the condition for the `timeout` milliseconds, this method will throw.

    **Usage**

    ``` javascript
    await elementHandle.waitForElementState(state);
    await elementHandle.waitForElementState(state, options);
    ```

    **Arguments**

    - `state` "visible" \| "hidden" \| "stable" \| "enabled" \| "disabled" \| "editable"

      A state to wait for, see below for more details.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    ## Deprecated[​](#deprecated "Direct link to Deprecated")
- name: elementHandle.waitForSelector
  id: api/class-elementhandle#element-handle-wait-for-selector
  summary: Use web assertions that assert visibility or a locator-based locator.waitFor() instead
  belongs_to: ElementHandle
  description: "### waitForSelector[​](#element-handle-wait-for-selector \"Direct link to waitForSelector\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use web assertions that assert visibility or a locator-based [locator.waitFor()](class-locator#locator-wait-for) instead.\n\nReturns element specified by selector when it satisfies `state` option. Returns `null` if waiting for `hidden` or `detached`.\n\nWait for the `selector` relative to the element handle to satisfy `state` option (either appear/disappear from dom, or become visible/hidden). If at the moment of calling the method `selector` already satisfies the condition, the method will return immediately. If the selector doesn't satisfy the condition for the `timeout` milliseconds, the function will throw.\n\n**Usage**\n\n``` javascript\nawait page.setContent(`<div><span></span></div>`);\nconst div = await page.$('div');\n// Waiting for the 'span' selector relative to the div.\nconst span = await div.waitForSelector('span', { state: 'attached' });\n```\n\n> note\n>\n> This method does not work across navigations, use [page.waitForSelector()](class-page#page-wait-for-selector) instead.\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to query for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `state` \"attached\" \\| \"detached\" \\| \"visible\" \\| \"hidden\" *(optional)*\n\n    Defaults to `'visible'`. Can be either:\n\n    - `'attached'` - wait for element to be present in DOM.\n    - `'detached'` - wait for element to not be present in DOM.\n    - `'visible'` - wait for element to have non-empty bounding box and no `visibility:hidden`. Note that element without any content or with `display:none` has an empty bounding box and is not considered visible.\n    - `'hidden'` - wait for element to be either detached from DOM, or have an empty bounding box or `visibility:hidden`. This is opposite to the `'visible'` option.\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [ElementHandle](class-elementhandle \"ElementHandle\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-elementhandle](https://playwright.dev/docs/api/class-elementhandle)"
- name: Emulation
  id: emulation
  summary: With Playwright you can test your app on any browser as well as emulate a real device such as a mobile phone or tablet
  description: "# Emulation\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nWith Playwright you can test your app on any browser as well as emulate a real device such as a mobile phone or tablet. Simply configure the devices you would like to emulate and Playwright will simulate the browser behavior such as `\"userAgent\"`, `\"screenSize\"`, `\"viewport\"` and if it `\"hasTouch\"` enabled. You can also emulate the `\"geolocation\"`, `\"locale\"` and `\"timezone\"` for all tests or for a specific test as well as set the `\"permissions\"` to show notifications or change the `\"colorScheme\"`.\n\n## Devices[​](#devices \"Direct link to Devices\")\n\nPlaywright comes with a [registry of device parameters](https://github.com/microsoft/playwright/blob/main/packages/playwright-core/src/server/deviceDescriptorsSource.json) using [playwright.devices](api/class-playwright#playwright-devices) for selected desktop, tablet and mobile devices. It can be used to simulate browser behavior for a specific device such as user agent, screen size, viewport and if it has touch enabled. All tests will run with the specified device parameters.\n\n- Test\n- Library\n\n``` javascript\nimport { defineConfig, devices } from '@playwright/test'; // import devices\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: {\n        ...devices['Desktop Chrome'],\n      },\n    },\n    {\n      name: 'Mobile Safari',\n      use: {\n        ...devices['iPhone 13'],\n      },\n    },\n  ],\n});\n```\n\n``` javascript\nconst { chromium, devices } = require('playwright');\nconst browser = await chromium.launch();\n\nconst iphone13 = devices['iPhone 13'];\nconst context = await browser.newContext({\n  ...iphone13,\n});\n```\n\n## Viewport[​](#viewport \"Direct link to Viewport\")\n\nThe viewport is included in the device but you can override it for some tests with [page.setViewportSize()](api/class-page#page-set-viewport-size).\n\n- Test\n- Library\n\n``` javascript\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: {\n        ...devices['Desktop Chrome'],\n        // It is important to define the `viewport` property after destructuring `devices`,\n        // since devices also define the `viewport` for that device.\n        viewport: { width: 1280, height: 720 },\n      },\n    },\n  ]\n});\n```\n\n``` javascript\n// Create context with given viewport\nconst context = await browser.newContext({\n  viewport: { width: 1280, height: 1024 }\n});\n```\n\nTest file:\n\n- Test\n- Library\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.use({\n  viewport: { width: 1600, height: 1200 },\n});\n\ntest('my test', async ({ page }) => {\n  // ...\n});\n```\n\n``` javascript\n// Create context with given viewport\nconst context = await browser.newContext({\n  viewport: { width: 1280, height: 1024 }\n});\n\n// Resize viewport for individual page\nawait page.setViewportSize({ width: 1600, height: 1200 });\n\n// Emulate high-DPI\nconst context = await browser.newContext({\n  viewport: { width: 2560, height: 1440 },\n  deviceScaleFactor: 2,\n});\n```\n\nThe same works inside a test file.\n\n- Test\n- Library\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.describe('specific viewport block', () => {\n  test.use({ viewport: { width: 1600, height: 1200 } });\n\n  test('my test', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n``` javascript\n// Create context with given viewport\nconst context = await browser.newContext({\n  viewport: { width: 1600, height: 1200 }\n});\nconst page = await context.newPage();\n```\n\n## isMobile[​](#ismobile \"Direct link to isMobile\")\n\nWhether the meta viewport tag is taken into account and touch events are enabled.\n\n``` javascript\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: {\n        ...devices['Desktop Chrome'],\n        // It is important to define the `isMobile` property after destructuring `devices`,\n        // since devices also define the `isMobile` for that device.\n        isMobile: false,\n      },\n    },\n  ]\n});\n```\n\n## Locale & Timezone[​](#locale--timezone \"Direct link to Locale & Timezone\")\n\nEmulate the user Locale and Timezone which can be set globally for all tests in the config and then overridden for particular tests.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Emulates the user locale.\n    locale: 'en-GB',\n\n    // Emulates the user timezone.\n    timezoneId: 'Europe/Paris',\n  },\n});\n```\n\n- Test\n- Library\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.use({\n  locale: 'de-DE',\n  timezoneId: 'Europe/Berlin',\n});\n\ntest('my test for de lang in Berlin timezone', async ({ page }) => {\n  await page.goto('https://www.bing.com');\n  // ...\n});\n```\n\n``` javascript\nconst context = await browser.newContext({\n  locale: 'de-DE',\n  timezoneId: 'Europe/Berlin',\n});\n```\n\n## Permissions[​](#permissions \"Direct link to Permissions\")\n\nAllow app to show system notifications.\n\n- Test\n- Library\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Grants specified permissions to the browser context.\n    permissions: ['notifications'],\n  },\n});\n```\n\n``` javascript\nconst context = await browser.newContext({\n  permissions: ['notifications'],\n});\n```\n\nAllow notifications for a specific domain.\n\n- Test\n- Library\n\n``` javascript\nimport { test } from '@playwright/test';\n\ntest.beforeEach(async ({ context }) => {\n  // Runs before each test and signs in each page.\n  await context.grantPermissions(['notifications'], { origin: 'https://skype.com' });\n});\n\ntest('first', async ({ page }) => {\n  // page has notifications permission for https://skype.com.\n});\n```\n\n``` javascript\nawait context.grantPermissions(['notifications'], { origin: 'https://skype.com' });\n```\n\nRevoke all permissions with [browserContext.clearPermissions()](api/class-browsercontext#browser-context-clear-permissions).\n\n``` javascript\n// Library\nawait context.clearPermissions();\n```\n\n## Geolocation[​](#geolocation \"Direct link to Geolocation\")\n\nGrant `\"geolocation\"` permissions and set geolocation to a specific area.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Context geolocation\n    geolocation: { longitude: 12.492507, latitude: 41.889938 },\n    permissions: ['geolocation'],\n  },\n});\n```\n\n- Test\n- Library\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.use({\n  geolocation: { longitude: 41.890221, latitude: 12.492348 },\n  permissions: ['geolocation'],\n});\n\ntest('my test with geolocation', async ({ page }) => {\n  // ...\n});\n```\n\n``` javascript\nconst context = await browser.newContext({\n  geolocation: { longitude: 41.890221, latitude: 12.492348 },\n  permissions: ['geolocation']\n});\n```\n\nChange the location later:\n\n- Test\n- Library\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.use({\n  geolocation: { longitude: 41.890221, latitude: 12.492348 },\n  permissions: ['geolocation'],\n});\n\ntest('my test with geolocation', async ({ page, context }) => {\n  // overwrite the location for this test\n  await context.setGeolocation({ longitude: 48.858455, latitude: 2.294474 });\n});\n```\n\n``` javascript\nawait context.setGeolocation({ longitude: 48.858455, latitude: 2.294474 });\n```\n\n**Note** you can only change geolocation for all pages in the context.\n\n## Color Scheme and Media[​](#color-scheme-and-media \"Direct link to Color Scheme and Media\")\n\nEmulate the users `\"colorScheme\"`. Supported values are 'light', 'dark', 'no-preference'. You can also emulate the media type with [page.emulateMedia()](api/class-page#page-emulate-media).\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    colorScheme: 'dark',\n  },\n});\n```\n\n- Test\n- Library\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.use({\n  colorScheme: 'dark' // or 'light'\n});\n\ntest('my test with dark mode', async ({ page }) => {\n  // ...\n});\n```\n\n``` javascript\n// Create context with dark mode\nconst context = await browser.newContext({\n  colorScheme: 'dark' // or 'light'\n});\n\n// Create page with dark mode\nconst page = await browser.newPage({\n  colorScheme: 'dark' // or 'light'\n});\n\n// Change color scheme for the page\nawait page.emulateMedia({ colorScheme: 'dark' });\n\n// Change media for page\nawait page.emulateMedia({ media: 'print' });\n```\n\n## User Agent[​](#user-agent \"Direct link to User Agent\")\n\nThe User Agent is included in the device and therefore you will rarely need to change it however if you do need to test a different user agent you can override it with the `userAgent` property.\n\n- Test\n- Library\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.use({ userAgent: 'My user agent' });\n\ntest('my user agent test', async ({ page }) => {\n  // ...\n});\n```\n\n``` javascript\nconst context = await browser.newContext({\n  userAgent: 'My user agent'\n});\n```\n\n## Offline[​](#offline \"Direct link to Offline\")\n\nEmulate the network being offline.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    offline: true\n  },\n});\n```\n\n## JavaScript Enabled[​](#javascript-enabled \"Direct link to JavaScript Enabled\")\n\nEmulate a user scenario where JavaScript is disabled.\n\n- Test\n- Library\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.use({ javaScriptEnabled: false });\n\ntest('test with no JavaScript', async ({ page }) => {\n  // ...\n});\n```\n\n``` javascript\nconst context = await browser.newContext({\n  javaScriptEnabled: false\n});\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/emulation](https://playwright.dev/docs/emulation)"
- name: Evaluating JavaScript
  id: evaluating
  summary: Playwright scripts run in your Playwright environment
  description: "# Evaluating JavaScript\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright scripts run in your Playwright environment. Your page scripts run in the browser page environment. Those environments don't intersect, they are running in different virtual machines in different processes and even potentially on different computers.\n\nThe [page.evaluate()](api/class-page#page-evaluate) API can run a JavaScript function in the context of the web page and bring results back to the Playwright environment. Browser globals like `window` and `document` can be used in `evaluate`.\n\n``` javascript\nconst href = await page.evaluate(() => document.location.href);\n```\n\nIf the result is a Promise or if the function is asynchronous evaluate will automatically wait until it's resolved:\n\n``` javascript\nconst status = await page.evaluate(async () => {\n  const response = await fetch(location.href);\n  return response.status;\n});\n```\n\n## Evaluation Argument[​](#evaluation-argument \"Direct link to Evaluation Argument\")\n\nPlaywright evaluation methods like [page.evaluate()](api/class-page#page-evaluate) take a single optional argument. This argument can be a mix of [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\") values and [JSHandle](api/class-jshandle \"JSHandle\") or [ElementHandle](api/class-elementhandle \"ElementHandle\") instances. Handles are automatically converted to the value they represent.\n\n``` javascript\n// A primitive value.\nawait page.evaluate(num => num, 42);\n\n// An array.\nawait page.evaluate(array => array.length, [1, 2, 3]);\n\n// An object.\nawait page.evaluate(object => object.foo, { foo: 'bar' });\n\n// A single handle.\nconst button = await page.evaluateHandle('window.button');\nawait page.evaluate(button => button.textContent, button);\n\n// Alternative notation using elementHandle.evaluate.\nawait button.evaluate((button, from) => button.textContent.substring(from), 5);\n\n// Object with multiple handles.\nconst button1 = await page.evaluateHandle('window.button1');\nconst button2 = await page.evaluateHandle('window.button2');\nawait page.evaluate(\n    o => o.button1.textContent + o.button2.textContent,\n    { button1, button2 });\n\n// Object destructuring works. Note that property names must match\n// between the destructured object and the argument.\n// Also note the required parenthesis.\nawait page.evaluate(\n    ({ button1, button2 }) => button1.textContent + button2.textContent,\n    { button1, button2 });\n\n// Array works as well. Arbitrary names can be used for destructuring.\n// Note the required parenthesis.\nawait page.evaluate(\n    ([b1, b2]) => b1.textContent + b2.textContent,\n    [button1, button2]);\n\n// Any non-cyclic mix of serializables and handles works.\nawait page.evaluate(\n    x => x.button1.textContent + x.list[0].textContent + String(x.foo),\n    { button1, list: [button2], foo: null });\n```\n\nRight:\n\n``` javascript\nconst data = { text: 'some data', value: 1 };\n// Pass |data| as a parameter.\nconst result = await page.evaluate(data => {\n  window.myApp.use(data);\n}, data);\n```\n\nWrong:\n\n``` javascript\nconst data = { text: 'some data', value: 1 };\nconst result = await page.evaluate(() => {\n  // There is no |data| in the web page.\n  window.myApp.use(data);\n});\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/evaluating](https://playwright.dev/docs/evaluating)"
- name: Events
  id: events
  summary: Playwright allows listening to various types of events happening on the web page, such as network requests, creation of child pages, dedicated workers etc
  description: "# Events\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright allows listening to various types of events happening on the web page, such as network requests, creation of child pages, dedicated workers etc. There are several ways to subscribe to such events, such as waiting for events or adding or removing event listeners.\n\n## Waiting for event[​](#waiting-for-event \"Direct link to Waiting for event\")\n\nMost of the time, scripts will need to wait for a particular event to happen. Below are some of the typical event awaiting patterns.\n\nWait for a request with the specified url using [page.waitForRequest()](api/class-page#page-wait-for-request):\n\n``` javascript\n// Start waiting for request before goto. Note no await.\nconst requestPromise = page.waitForRequest('**/*logo*.png');\nawait page.goto('https://wikipedia.org');\nconst request = await requestPromise;\nconsole.log(request.url());\n```\n\nWait for popup window:\n\n``` javascript\n// Start waiting for popup before clicking. Note no await.\nconst popupPromise = page.waitForEvent('popup');\nawait page.getByText('open the popup').click();\nconst popup = await popupPromise;\nawait popup.goto('https://wikipedia.org');\n```\n\n## Adding/removing event listener[​](#addingremoving-event-listener \"Direct link to Adding/removing event listener\")\n\nSometimes, events happen in random time and instead of waiting for them, they need to be handled. Playwright supports traditional language mechanisms for subscribing and unsubscribing from the events:\n\n``` javascript\npage.on('request', request => console.log(`Request sent: ${request.url()}`));\nconst listener = request => console.log(`Request finished: ${request.url()}`);\npage.on('requestfinished', listener);\nawait page.goto('https://wikipedia.org');\n\npage.off('requestfinished', listener);\nawait page.goto('https://www.openstreetmap.org/');\n```\n\n## Adding one-off listeners[​](#adding-one-off-listeners \"Direct link to Adding one-off listeners\")\n\nIf a certain event needs to be handled once, there is a convenience API for that:\n\n``` javascript\npage.once('dialog', dialog => dialog.accept('2021'));\nawait page.evaluate(\"prompt('Enter a number:')\");\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/events](https://playwright.dev/docs/events)"
- name: Extensibility
  id: extensibility
  summary: Playwright supports custom selector engines, registered with selectors.register()
  description: "# Extensibility\n\n## Custom selector engines[​](#custom-selector-engines \"Direct link to Custom selector engines\")\n\nPlaywright supports custom selector engines, registered with [selectors.register()](api/class-selectors#selectors-register).\n\nSelector engine should have the following properties:\n\n- `query` function to query first element matching `selector` relative to the `root`.\n- `queryAll` function to query all elements matching `selector` relative to the `root`.\n\nBy default the engine is run directly in the frame's JavaScript context and, for example, can call an application-defined function. To isolate the engine from any JavaScript in the frame, but leave access to the DOM, register the engine with `{contentScript: true}` option. Content script engine is safer because it is protected from any tampering with the global objects, for example altering `Node.prototype` methods. All built-in selector engines run as content scripts. Note that running as a content script is not guaranteed when the engine is used together with other custom engines.\n\nSelectors must be registered before creating the page.\n\nAn example of registering selector engine that queries elements based on a tag name:\n\n``` javascript\nimport { test as base } from '@playwright/test';\n\nexport { expect } from '@playwright/test';\n\n// Must be a function that evaluates to a selector engine instance.\nconst createTagNameEngine = () => ({\n  // Returns the first element matching given selector in the root's subtree.\n  query(root, selector) {\n    return root.querySelector(selector);\n  },\n\n  // Returns all elements matching given selector in the root's subtree.\n  queryAll(root, selector) {\n    return Array.from(root.querySelectorAll(selector));\n  }\n});\n\nexport const test = base.extend<{}, { selectorRegistration: void }>({\n  // Register selectors once per worker.\n  selectorRegistration: [async ({ playwright }, use) => {\n    // Register the engine. Selectors will be prefixed with \"tag=\".\n    await playwright.selectors.register('tag', createTagNameEngine);\n    await use();\n  }, { scope: 'worker', auto: true }],\n});\n```\n\n``` javascript\nimport { test, expect } from './baseTest';\n\ntest('selector engine test', async ({ page }) => {\n  // Now we can use 'tag=' selectors.\n  const button = page.locator('tag=button');\n  await button.click();\n\n  // We can combine it with built-in locators.\n  await page.locator('tag=div').getByText('Click me').click();\n\n  // We can use it in any methods supporting selectors.\n  await expect(page.locator('tag=button')).toHaveCount(3);\n});\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/extensibility](https://playwright.dev/docs/extensibility)"
- name: FileChooser
  id: api/class-filechooser
  summary: FileChooser objects are dispatched by the page in the page.on('filechooser') event
  description: "# FileChooser\n\n[FileChooser](class-filechooser \"FileChooser\") objects are dispatched by the page in the [page.on('filechooser')](class-page#page-event-file-chooser) event.\n\n``` javascript\n// Start waiting for file chooser before clicking. Note no await.\nconst fileChooserPromise = page.waitForEvent('filechooser');\nawait page.getByText('Upload file').click();\nconst fileChooser = await fileChooserPromise;\nawait fileChooser.setFiles(path.join(__dirname, 'myfile.pdf'));\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### element[​](#file-chooser-element \"Direct link to element\")\n\nAdded before v1.9\n\nReturns input element associated with this file chooser.\n\n**Usage**\n\n``` javascript\nfileChooser.element();\n```\n\n**Returns**\n\n- [ElementHandle](class-elementhandle \"ElementHandle\")\n\n### isMultiple[​](#file-chooser-is-multiple \"Direct link to isMultiple\")\n\nAdded before v1.9\n\nReturns whether this file chooser accepts multiple files.\n\n**Usage**\n\n``` javascript\nfileChooser.isMultiple();\n```\n\n**Returns**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### page[​](#file-chooser-page \"Direct link to page\")\n\nAdded before v1.9\n\nReturns page this file chooser belongs to.\n\n**Usage**\n\n``` javascript\nfileChooser.page();\n```\n\n**Returns**\n\n- [Page](class-page \"Page\")\n\n### setFiles[​](#file-chooser-set-files \"Direct link to setFiles\")\n\nAdded before v1.9\n\nSets the value of the file input this chooser is associated with. If some of the `filePaths` are relative paths, then they are resolved relative to the current working directory. For empty array, clears the selected files.\n\n**Usage**\n\n``` javascript\nawait fileChooser.setFiles(files);\nawait fileChooser.setFiles(files, options);\n```\n\n**Arguments**\n\n- `files` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    File name\n\n  - `mimeType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    File type\n\n  - `buffer` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\n\n    File content\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-filechooser](https://playwright.dev/docs/api/class-filechooser)"
- name: fileChooser.element
  id: api/class-filechooser#file-chooser-element
  summary: Returns input element associated with this file chooser
  belongs_to: FileChooser
  description: |-
    ### element[​](#file-chooser-element "Direct link to element")

    Added before v1.9

    Returns input element associated with this file chooser.

    **Usage**

    ``` javascript
    fileChooser.element();
    ```

    **Returns**

    - [ElementHandle](class-elementhandle "ElementHandle")
- name: fileChooser.isMultiple
  id: api/class-filechooser#file-chooser-is-multiple
  summary: Returns whether this file chooser accepts multiple files
  belongs_to: FileChooser
  description: |-
    ### isMultiple[​](#file-chooser-is-multiple "Direct link to isMultiple")

    Added before v1.9

    Returns whether this file chooser accepts multiple files.

    **Usage**

    ``` javascript
    fileChooser.isMultiple();
    ```

    **Returns**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: fileChooser.page
  id: api/class-filechooser#file-chooser-page
  summary: Returns page this file chooser belongs to
  belongs_to: FileChooser
  description: |-
    ### page[​](#file-chooser-page "Direct link to page")

    Added before v1.9

    Returns page this file chooser belongs to.

    **Usage**

    ``` javascript
    fileChooser.page();
    ```

    **Returns**

    - [Page](class-page "Page")

    &nbsp;
- name: fileChooser.setFiles
  id: api/class-filechooser#file-chooser-set-files
  summary: Sets the value of the file input this chooser is associated with
  belongs_to: FileChooser
  description: "### setFiles[​](#file-chooser-set-files \"Direct link to setFiles\")\n\nAdded before v1.9\n\nSets the value of the file input this chooser is associated with. If some of the `filePaths` are relative paths, then they are resolved relative to the current working directory. For empty array, clears the selected files.\n\n**Usage**\n\n``` javascript\nawait fileChooser.setFiles(files);\nawait fileChooser.setFiles(files, options);\n```\n\n**Arguments**\n\n- `files`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    File name\n\n  - `mimeType`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    File type\n\n  - `buffer`[Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\n\n    File content\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-filechooser](https://playwright.dev/docs/api/class-filechooser)"
- name: Fixtures
  id: api/class-fixtures
  summary: Playwright Test is based on the concept of the test fixtures
  description: "# Fixtures\n\nPlaywright Test is based on the concept of the [test fixtures](../test-fixtures). Test fixtures are used to establish environment for each test, giving the test everything it needs and nothing else.\n\nPlaywright Test looks at each test declaration, analyses the set of fixtures the test needs and prepares those fixtures specifically for the test. Values prepared by the fixtures are merged into a single object that is available to the `test`, hooks, annotations and other fixtures as a first parameter.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  // ...\n});\n```\n\nGiven the test above, Playwright Test will set up the `page` fixture before running the test, and tear it down after the test has finished. `page` fixture provides a [Page](class-page \"Page\") object that is available to the test.\n\nPlaywright Test comes with builtin fixtures listed below, and you can add your own fixtures as well. Playwright Test also [provides options](class-testoptions \"TestOptions\") to configure [fixtures.browser](class-fixtures#fixtures-browser), [fixtures.context](class-fixtures#fixtures-context) and [fixtures.page](class-fixtures#fixtures-page).\n\n## Properties[​](#properties \"Direct link to Properties\")\n\n### browser[​](#fixtures-browser \"Direct link to browser\")\n\n[Browser](class-browser \"Browser\") instance is shared between all tests in the [same worker](../test-parallel) - this makes testing efficient. However, each test runs in an isolated [BrowserContext](class-browsercontext \"BrowserContext\") and gets a fresh environment.\n\nLearn how to [configure browser](../test-configuration) and see [available options](class-testoptions \"TestOptions\").\n\n**Usage**\n\n``` javascript\ntest.beforeAll(async ({ browser }) => {\n  const page = await browser.newPage();\n  // ...\n});\n```\n\n**Type**\n\n- [Browser](class-browser \"Browser\")\n\n### browserName[​](#fixtures-browser-name \"Direct link to browserName\")\n\nName of the browser that runs tests. Defaults to `'chromium'`. Useful to [annotate tests](../test-annotations) based on the browser.\n\n**Usage**\n\n``` javascript\ntest('skip this test in Firefox', async ({ page, browserName }) => {\n  test.skip(browserName === 'firefox', 'Still working on it');\n  // ...\n});\n```\n\n**Type**\n\n- \"chromium\" \\| \"firefox\" \\| \"webkit\"\n\n### context[​](#fixtures-context \"Direct link to context\")\n\nIsolated [BrowserContext](class-browsercontext \"BrowserContext\") instance, created for each test. Since contexts are isolated between each other, every test gets a fresh environment, even when multiple tests run in a single [Browser](class-browser \"Browser\") for maximum efficiency.\n\nLearn how to [configure context](../test-configuration) and see [available options](class-testoptions \"TestOptions\").\n\nDefault [fixtures.page](class-fixtures#fixtures-page) belongs to this context.\n\n**Usage**\n\n``` javascript\ntest('example test', async ({ page, context }) => {\n  await context.route('*external.com/*', route => route.abort());\n  // ...\n});\n```\n\n**Type**\n\n- [BrowserContext](class-browsercontext \"BrowserContext\")\n\n### page[​](#fixtures-page \"Direct link to page\")\n\nIsolated [Page](class-page \"Page\") instance, created for each test. Pages are isolated between tests due to [fixtures.context](class-fixtures#fixtures-context) isolation.\n\nThis is the most common fixture used in a test.\n\n**Usage**\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  await page.goto('/signin');\n  await page.getByLabel('User Name').fill('user');\n  await page.getByLabel('Password').fill('password');\n  await page.getByText('Sign in').click();\n  // ...\n});\n```\n\n**Type**\n\n- [Page](class-page \"Page\")\n\n### request[​](#fixtures-request \"Direct link to request\")\n\nIsolated [APIRequestContext](class-apirequestcontext \"APIRequestContext\") instance for each test.\n\n**Usage**\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ request }) => {\n  await request.post('/signin', {\n    data: {\n      username: 'user',\n      password: 'password'\n    }\n  });\n  // ...\n});\n```\n\n**Type**\n\n- [APIRequestContext](class-apirequestcontext \"APIRequestContext\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-fixtures](https://playwright.dev/docs/api/class-fixtures)"
- name: Fixtures
  id: test-fixtures
  summary: Playwright Test is based on the concept of test fixtures
  description: "# Fixtures\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright Test is based on the concept of test fixtures. Test fixtures are used to establish the environment for each test, giving the test everything it needs and nothing else. Test fixtures are isolated between tests. With fixtures, you can group tests based on their meaning, instead of their common setup.\n\n### Built-in fixtures[​](#built-in-fixtures \"Direct link to Built-in fixtures\")\n\nYou have already used test fixtures in your first test.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n\n  await expect(page).toHaveTitle(/Playwright/);\n});\n```\n\nThe `{ page }` argument tells Playwright Test to setup the `page` fixture and provide it to your test function.\n\nHere is a list of the pre-defined fixtures that you are likely to use most of the time:\n\n| Fixture     | Type                                                                                                   | Description                                                                                                                                   |\n|:------------|:-------------------------------------------------------------------------------------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------|\n| page        | [Page](api/class-page \"Page\")                                                                          | Isolated page for this test run.                                                                                                              |\n| context     | [BrowserContext](api/class-browsercontext \"BrowserContext\")                                            | Isolated context for this test run. The `page` fixture belongs to this context as well. Learn how to [configure context](test-configuration). |\n| browser     | [Browser](api/class-browser \"Browser\")                                                                 | Browsers are shared across tests to optimize resources. Learn how to [configure browser](test-configuration).                                 |\n| browserName | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") | The name of the browser currently running the test. Either `chromium`, `firefox` or `webkit`.                                                 |\n| request     | [APIRequestContext](api/class-apirequestcontext \"APIRequestContext\")                                   | Isolated [APIRequestContext](api/class-apirequestcontext) instance for this test run.                                                         |\n\n### Without fixtures[​](#without-fixtures \"Direct link to Without fixtures\")\n\nHere is how typical test environment setup differs between traditional test style and the fixture-based one.\n\n`TodoPage` is a class that helps interacting with a \"todo list\" page of the web app, following the [Page Object Model](pom) pattern. It uses Playwright's `page` internally.\n\nClick to expand the code for the\n\n`TodoPage`\n\n``` javascript\nimport type { Page, Locator } from '@playwright/test';\n\nexport class TodoPage {\n  private readonly inputBox: Locator;\n  private readonly todoItems: Locator;\n\n  constructor(public readonly page: Page) {\n    this.inputBox = this.page.locator('input.new-todo');\n    this.todoItems = this.page.getByTestId('todo-item');\n  }\n\n  async goto() {\n    await this.page.goto('https://demo.playwright.dev/todomvc/');\n  }\n\n  async addToDo(text: string) {\n    await this.inputBox.fill(text);\n    await this.inputBox.press('Enter');\n  }\n\n  async remove(text: string) {\n    const todo = this.todoItems.filter({ hasText: text });\n    await todo.hover();\n    await todo.getByLabel('Delete').click();\n  }\n\n  async removeAll() {\n    while ((await this.todoItems.count()) > 0) {\n      await this.todoItems.first().hover();\n      await this.todoItems.getByLabel('Delete').first().click();\n    }\n  }\n}\n```\n\n``` javascript\nconst { test } = require('@playwright/test');\nconst { TodoPage } = require('./todo-page');\n\ntest.describe('todo tests', () => {\n  let todoPage;\n\n  test.beforeEach(async ({ page }) => {\n    todoPage = new TodoPage(page);\n    await todoPage.goto();\n    await todoPage.addToDo('item1');\n    await todoPage.addToDo('item2');\n  });\n\n  test.afterEach(async () => {\n    await todoPage.removeAll();\n  });\n\n  test('should add an item', async () => {\n    await todoPage.addToDo('my item');\n    // ...\n  });\n\n  test('should remove an item', async () => {\n    await todoPage.remove('item1');\n    // ...\n  });\n});\n```\n\n### With fixtures[​](#with-fixtures \"Direct link to With fixtures\")\n\nFixtures have a number of advantages over before/after hooks:\n\n- Fixtures **encapsulate** setup and teardown in the same place so it is easier to write.\n- Fixtures are **reusable** between test files - you can define them once and use in all your tests. That's how Playwright's built-in `page` fixture works.\n- Fixtures are **on-demand** - you can define as many fixtures as you'd like, and Playwright Test will setup only the ones needed by your test and nothing else.\n- Fixtures are **composable** - they can depend on each other to provide complex behaviors.\n- Fixtures are **flexible**. Tests can use any combinations of the fixtures to tailor precise environment they need, without affecting other tests.\n- Fixtures simplify **grouping**. You no longer need to wrap tests in `describe`s that set up environment, and are free to group your tests by their meaning instead.\n\nClick to expand the code for the\n\n`TodoPage`\n\n``` javascript\nimport type { Page, Locator } from '@playwright/test';\n\nexport class TodoPage {\n  private readonly inputBox: Locator;\n  private readonly todoItems: Locator;\n\n  constructor(public readonly page: Page) {\n    this.inputBox = this.page.locator('input.new-todo');\n    this.todoItems = this.page.getByTestId('todo-item');\n  }\n\n  async goto() {\n    await this.page.goto('https://demo.playwright.dev/todomvc/');\n  }\n\n  async addToDo(text: string) {\n    await this.inputBox.fill(text);\n    await this.inputBox.press('Enter');\n  }\n\n  async remove(text: string) {\n    const todo = this.todoItems.filter({ hasText: text });\n    await todo.hover();\n    await todo.getByLabel('Delete').click();\n  }\n\n  async removeAll() {\n    while ((await this.todoItems.count()) > 0) {\n      await this.todoItems.first().hover();\n      await this.todoItems.getByLabel('Delete').first().click();\n    }\n  }\n}\n```\n\n``` javascript\nimport { test as base } from '@playwright/test';\nimport { TodoPage } from './todo-page';\n\n// Extend basic test by providing a \"todoPage\" fixture.\nconst test = base.extend<{ todoPage: TodoPage }>({\n  todoPage: async ({ page }, use) => {\n    const todoPage = new TodoPage(page);\n    await todoPage.goto();\n    await todoPage.addToDo('item1');\n    await todoPage.addToDo('item2');\n    await use(todoPage);\n    await todoPage.removeAll();\n  },\n});\n\ntest('should add an item', async ({ todoPage }) => {\n  await todoPage.addToDo('my item');\n  // ...\n});\n\ntest('should remove an item', async ({ todoPage }) => {\n  await todoPage.remove('item1');\n  // ...\n});\n```\n\n## Creating a fixture[​](#creating-a-fixture \"Direct link to Creating a fixture\")\n\nTo create your own fixture, use [test.extend()](api/class-test#test-extend) to create a new `test` object that will include it.\n\nBelow we create two fixtures `todoPage` and `settingsPage` that follow the [Page Object Model](pom) pattern.\n\nClick to expand the code for the\n\n`TodoPage` and `SettingsPage`\n\n``` javascript\nimport type { Page, Locator } from '@playwright/test';\n\nexport class TodoPage {\n  private readonly inputBox: Locator;\n  private readonly todoItems: Locator;\n\n  constructor(public readonly page: Page) {\n    this.inputBox = this.page.locator('input.new-todo');\n    this.todoItems = this.page.getByTestId('todo-item');\n  }\n\n  async goto() {\n    await this.page.goto('https://demo.playwright.dev/todomvc/');\n  }\n\n  async addToDo(text: string) {\n    await this.inputBox.fill(text);\n    await this.inputBox.press('Enter');\n  }\n\n  async remove(text: string) {\n    const todo = this.todoItems.filter({ hasText: text });\n    await todo.hover();\n    await todo.getByLabel('Delete').click();\n  }\n\n  async removeAll() {\n    while ((await this.todoItems.count()) > 0) {\n      await this.todoItems.first().hover();\n      await this.todoItems.getByLabel('Delete').first().click();\n    }\n  }\n}\n```\n\nSettingsPage is similar:\n\n``` javascript\nimport type { Page } from '@playwright/test';\n\nexport class SettingsPage {\n  constructor(public readonly page: Page) {\n  }\n\n  async switchToDarkMode() {\n    // ...\n  }\n}\n```\n\n``` javascript\nimport { test as base } from '@playwright/test';\nimport { TodoPage } from './todo-page';\nimport { SettingsPage } from './settings-page';\n\n// Declare the types of your fixtures.\ntype MyFixtures = {\n  todoPage: TodoPage;\n  settingsPage: SettingsPage;\n};\n\n// Extend base test by providing \"todoPage\" and \"settingsPage\".\n// This new \"test\" can be used in multiple test files, and each of them will get the fixtures.\nexport const test = base.extend<MyFixtures>({\n  todoPage: async ({ page }, use) => {\n    // Set up the fixture.\n    const todoPage = new TodoPage(page);\n    await todoPage.goto();\n    await todoPage.addToDo('item1');\n    await todoPage.addToDo('item2');\n\n    // Use the fixture value in the test.\n    await use(todoPage);\n\n    // Clean up the fixture.\n    await todoPage.removeAll();\n  },\n\n  settingsPage: async ({ page }, use) => {\n    await use(new SettingsPage(page));\n  },\n});\nexport { expect } from '@playwright/test';\n```\n\n> note\n>\n> Custom fixture names should start with a letter or underscore, and can contain only letters, numbers, underscores.\n\n## Using a fixture[​](#using-a-fixture \"Direct link to Using a fixture\")\n\nJust mention fixture in your test function argument, and test runner will take care of it. Fixtures are also available in hooks and other fixtures. If you use TypeScript, fixtures will have the right type.\n\nBelow we use the `todoPage` and `settingsPage` fixtures defined above.\n\n``` javascript\nimport { test, expect } from './my-test';\n\ntest.beforeEach(async ({ settingsPage }) => {\n  await settingsPage.switchToDarkMode();\n});\n\ntest('basic test', async ({ todoPage, page }) => {\n  await todoPage.addToDo('something nice');\n  await expect(page.getByTestId('todo-title')).toContainText(['something nice']);\n});\n```\n\n## Overriding fixtures[​](#overriding-fixtures \"Direct link to Overriding fixtures\")\n\nIn addition to creating your own fixtures, you can also override existing fixtures to fit your needs. Consider the following example which overrides the `page` fixture by automatically navigating to some `baseURL`:\n\n``` javascript\nimport { test as base } from '@playwright/test';\n\nexport const test = base.extend({\n  page: async ({ baseURL, page }, use) => {\n    await page.goto(baseURL);\n    await use(page);\n  },\n});\n```\n\nNotice that in this example, the `page` fixture is able to depend on other built-in fixtures such as [testOptions.baseURL](api/class-testoptions#test-options-base-url). We can now configure `baseURL` in the configuration file, or locally in the test file with [test.use()](api/class-test#test-use).\n\n``` javascript\ntest.use({ baseURL: 'https://playwright.dev' });\n```\n\nFixtures can also be overridden where the base fixture is completely replaced with something different. For example, we could override the [testOptions.storageState](api/class-testoptions#test-options-storage-state) fixture to provide our own data.\n\n``` javascript\nimport { test as base } from '@playwright/test';\n\nexport const test = base.extend({\n  storageState: async ({}, use) => {\n    const cookie = await getAuthCookie();\n    await use({ cookies: [cookie] });\n  },\n});\n```\n\n## Worker-scoped fixtures[​](#worker-scoped-fixtures \"Direct link to Worker-scoped fixtures\")\n\nPlaywright Test uses [worker processes](test-parallel) to run test files. Similarly to how test fixtures are set up for individual test runs, worker fixtures are set up for each worker process. That's where you can set up services, run servers, etc. Playwright Test will reuse the worker process for as many test files as it can, provided their worker fixtures match and hence environments are identical.\n\nBelow we'll create an `account` fixture that will be shared by all tests in the same worker, and override the `page` fixture to login into this account for each test. To generate unique accounts, we'll use the [workerInfo.workerIndex](api/class-workerinfo#worker-info-worker-index) that is available to any test or fixture. Note the tuple-like syntax for the worker fixture - we have to pass `{scope: 'worker'}` so that test runner sets up this fixture once per worker.\n\n``` javascript\nimport { test as base } from '@playwright/test';\n\ntype Account = {\n  username: string;\n  password: string;\n};\n\n// Note that we pass worker fixture types as a second template parameter.\nexport const test = base.extend<{}, { account: Account }>({\n  account: [async ({ browser }, use, workerInfo) => {\n    // Unique username.\n    const username = 'user' + workerInfo.workerIndex;\n    const password = 'verysecure';\n\n    // Create the account with Playwright.\n    const page = await browser.newPage();\n    await page.goto('/signup');\n    await page.getByLabel('User Name').fill(username);\n    await page.getByLabel('Password').fill(password);\n    await page.getByText('Sign up').click();\n    // Make sure everything is ok.\n    await expect(page.getByTestId('result')).toHaveText('Success');\n    // Do not forget to cleanup.\n    await page.close();\n\n    // Use the account value.\n    await use({ username, password });\n  }, { scope: 'worker' }],\n\n  page: async ({ page, account }, use) => {\n    // Sign in with our account.\n    const { username, password } = account;\n    await page.goto('/signin');\n    await page.getByLabel('User Name').fill(username);\n    await page.getByLabel('Password').fill(password);\n    await page.getByText('Sign in').click();\n    await expect(page.getByTestId('userinfo')).toHaveText(username);\n\n    // Use signed-in page in the test.\n    await use(page);\n  },\n});\nexport { expect } from '@playwright/test';\n```\n\n## Automatic fixtures[​](#automatic-fixtures \"Direct link to Automatic fixtures\")\n\nAutomatic fixtures are set up for each test/worker, even when the test does not list them directly. To create an automatic fixture, use the tuple syntax and pass `{ auto: true }`.\n\nHere is an example fixture that automatically attaches debug logs when the test fails, so we can later review the logs in the reporter. Note how it uses [TestInfo](api/class-testinfo \"TestInfo\") object that is available in each test/fixture to retrieve metadata about the test being run.\n\n``` javascript\nimport * as debug from 'debug';\nimport * as fs from 'fs';\nimport { test as base } from '@playwright/test';\n\nexport const test = base.extend<{ saveLogs: void }>({\n  saveLogs: [async ({}, use, testInfo) => {\n    // Collecting logs during the test.\n    const logs = [];\n    debug.log = (...args) => logs.push(args.map(String).join(''));\n    debug.enable('myserver');\n\n    await use();\n\n    // After the test we can check whether the test passed or failed.\n    if (testInfo.status !== testInfo.expectedStatus) {\n      // outputPath() API guarantees a unique file name.\n      const logFile = testInfo.outputPath('logs.txt');\n      await fs.promises.writeFile(logFile, logs.join('\\n'), 'utf8');\n      testInfo.attachments.push({ name: 'logs', contentType: 'text/plain', path: logFile });\n    }\n  }, { auto: true }],\n});\nexport { expect } from '@playwright/test';\n```\n\n## Fixture timeout[​](#fixture-timeout \"Direct link to Fixture timeout\")\n\nBy default, fixture shares timeout with the test. However, for slow fixtures, especially [worker-scoped](#worker-scoped-fixtures) ones, it is convenient to have a separate timeout. This way you can keep the overall test timeout small, and give the slow fixture more time.\n\n``` javascript\nimport { test as base, expect } from '@playwright/test';\n\nconst test = base.extend<{ slowFixture: string }>({\n  slowFixture: [async ({}, use) => {\n    // ... perform a slow operation ...\n    await use('hello');\n  }, { timeout: 60000 }]\n});\n\ntest('example test', async ({ slowFixture }) => {\n  // ...\n});\n```\n\n## Fixtures-options[​](#fixtures-options \"Direct link to Fixtures-options\")\n\n> note\n>\n> Overriding custom fixtures in the config file has changed in version 1.18. [Learn more](release-notes#breaking-change-custom-config-options).\n\nPlaywright Test supports running multiple test projects that can be separately configured. You can use \"option\" fixtures to make your configuration options declarative and type-checked. Learn more about [parametrizing tests](test-parameterize).\n\nBelow we'll create a `defaultItem` option in addition to the `todoPage` fixture from other examples. This option will be set in configuration file. Note the tuple syntax and `{ option: true }` argument.\n\nClick to expand the code for the\n\n`TodoPage`\n\n``` javascript\nimport type { Page, Locator } from '@playwright/test';\n\nexport class TodoPage {\n  private readonly inputBox: Locator;\n  private readonly todoItems: Locator;\n\n  constructor(public readonly page: Page) {\n    this.inputBox = this.page.locator('input.new-todo');\n    this.todoItems = this.page.getByTestId('todo-item');\n  }\n\n  async goto() {\n    await this.page.goto('https://demo.playwright.dev/todomvc/');\n  }\n\n  async addToDo(text: string) {\n    await this.inputBox.fill(text);\n    await this.inputBox.press('Enter');\n  }\n\n  async remove(text: string) {\n    const todo = this.todoItems.filter({ hasText: text });\n    await todo.hover();\n    await todo.getByLabel('Delete').click();\n  }\n\n  async removeAll() {\n    while ((await this.todoItems.count()) > 0) {\n      await this.todoItems.first().hover();\n      await this.todoItems.getByLabel('Delete').first().click();\n    }\n  }\n}\n```\n\n``` javascript\nimport { test as base } from '@playwright/test';\nimport { TodoPage } from './todo-page';\n\n// Declare your options to type-check your configuration.\nexport type MyOptions = {\n  defaultItem: string;\n};\ntype MyFixtures = {\n  todoPage: TodoPage;\n};\n\n// Specify both option and fixture types.\nexport const test = base.extend<MyOptions & MyFixtures>({\n  // Define an option and provide a default value.\n  // We can later override it in the config.\n  defaultItem: ['Something nice', { option: true }],\n\n  // Our \"todoPage\" fixture depends on the option.\n  todoPage: async ({ page, defaultItem }, use) => {\n    const todoPage = new TodoPage(page);\n    await todoPage.goto();\n    await todoPage.addToDo(defaultItem);\n    await use(todoPage);\n    await todoPage.removeAll();\n  },\n});\nexport { expect } from '@playwright/test';\n```\n\nWe can now use `todoPage` fixture as usual, and set the `defaultItem` option in the config file.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\nimport type { MyOptions } from './my-test';\n\nexport default defineConfig<MyOptions>({\n  projects: [\n    {\n      name: 'shopping',\n      use: { defaultItem: 'Buy milk' },\n    },\n    {\n      name: 'wellbeing',\n      use: { defaultItem: 'Exercise!' },\n    },\n  ]\n});\n```\n\n## Execution order[​](#execution-order \"Direct link to Execution order\")\n\nEach fixture has a setup and teardown phase separated by the `await use()` call in the fixture. Setup is executed before the fixture is used by the test/hook, and teardown is executed when the fixture will not be used by the test/hook anymore.\n\nFixtures follow these rules to determine the execution order:\n\n- When fixture A depends on fixture B: B is always set up before A and torn down after A.\n- Non-automatic fixtures are executed lazily, only when the test/hook needs them.\n- Test-scoped fixtures are torn down after each test, while worker-scoped fixtures are only torn down when the worker process executing tests is shutdown.\n\nConsider the following example:\n\n``` javascript\nimport { test as base } from '@playwright/test';\n\nconst test = base.extend<{\n  testFixture: string,\n  autoTestFixture: string,\n  unusedFixture: string,\n}, {\n  workerFixture: string,\n  autoWorkerFixture: string,\n}>({\n  workerFixture: [async ({ browser }) => {\n    // workerFixture setup...\n    await use('workerFixture');\n    // workerFixture teardown...\n  }, { scope: 'worker' }],\n\n  autoWorkerFixture: [async ({ browser }) => {\n    // autoWorkerFixture setup...\n    await use('autoWorkerFixture');\n    // autoWorkerFixture teardown...\n  }, { scope: 'worker', auto: true }],\n\n  testFixture: [async ({ page, workerFixture }) => {\n    // testFixture setup...\n    await use('testFixture');\n    // testFixture teardown...\n  }, { scope: 'test' }],\n\n  autoTestFixture: [async () => {\n    // autoTestFixture setup...\n    await use('autoTestFixture');\n    // autoTestFixture teardown...\n  }, { scope: 'test', auto: true }],\n\n  unusedFixture: [async ({ page }) => {\n    // unusedFixture setup...\n    await use('unusedFixture');\n    // unusedFixture teardown...\n  }, { scope: 'test' }],\n});\n\ntest.beforeAll(async () => { /* ... */ });\ntest.beforeEach(async ({ page }) => { /* ... */ });\ntest('first test', async ({ page }) => { /* ... */ });\ntest('second test', async ({ testFixture }) => { /* ... */ });\ntest.afterEach(async () => { /* ... */ });\ntest.afterAll(async () => { /* ... */ });\n```\n\nNormally, if all tests pass and no errors are thrown, the order of execution is as following.\n\n- worker setup and `beforeAll` section:\n  - `browser` setup because it is required by `autoWorkerFixture`.\n  - `autoWorkerFixture` setup because automatic worker fixtures are always set up before anything else.\n  - `beforeAll` runs.\n- `first test` section:\n  - `autoTestFixture` setup because automatic test fixtures are always set up before test and `beforeEach` hooks.\n  - `page` setup because it is required in `beforeEach` hook.\n  - `beforeEach` runs.\n  - `first test` runs.\n  - `afterEach` runs.\n  - `page` teardown because it is a test-scoped fixture and should be torn down after the test finishes.\n  - `autoTestFixture` teardown because it is a test-scoped fixture and should be torn down after the test finishes.\n- `second test` section:\n  - `autoTestFixture` setup because automatic test fixtures are always set up before test and `beforeEach` hooks.\n  - `page` setup because it is required in `beforeEach` hook.\n  - `beforeEach` runs.\n  - `workerFixture` setup because it is required by `testFixture` that is required by the `second test`.\n  - `testFixture` setup because it is required by the `second test`.\n  - `second test` runs.\n  - `afterEach` runs.\n  - `testFixture` teardown because it is a test-scoped fixture and should be torn down after the test finishes.\n  - `page` teardown because it is a test-scoped fixture and should be torn down after the test finishes.\n  - `autoTestFixture` teardown because it is a test-scoped fixture and should be torn down after the test finishes.\n- `afterAll` and worker teardown section:\n  - `afterAll` runs.\n  - `workerFixture` teardown because it is a workers-scoped fixture and should be torn down once at the end.\n  - `autoWorkerFixture` teardown because it is a workers-scoped fixture and should be torn down once at the end.\n  - `browser` teardown because it is a workers-scoped fixture and should be torn down once at the end.\n\nA few observations:\n\n- `page` and `autoTestFixture` are set up and torn down for each test, as test-scoped fixtures.\n- `unusedFixture` is never set up because it is not used by any tests/hooks.\n- `testFixture` depends on `workerFixture` and triggers its setup.\n- `workerFixture` is lazily set up before the second test, but torn down once during worker shutdown, as a worker-scoped fixture.\n- `autoWorkerFixture` is set up for `beforeAll` hook, but `autoTestFixture` is not.\n\n## Combine custom fixtures from multiple modules[​](#combine-custom-fixtures-from-multiple-modules \"Direct link to Combine custom fixtures from multiple modules\")\n\nYou can merge test fixtures from multiple files or modules:\n\n``` javascript\nimport { mergeTests } from '@playwright/test';\nimport { test as dbTest } from 'database-test-utils';\nimport { test as a11yTest } from 'a11y-test-utils';\n\nexport const test = mergeTests(dbTest, a11yTest);\n```\n\n``` javascript\nimport { test } from './fixtures';\n\ntest('passes', async ({ database, page, a11y }) => {\n  // use database and a11y fixtures.\n});\n```\n\n## Box fixtures[​](#box-fixtures \"Direct link to Box fixtures\")\n\nUsually, custom fixtures are reported as separate steps in in the UI mode, Trace Viewer and various test reports. They also appear in error messages from the test runner. For frequently-used fixtures, this can mean lots of noise. You can stop the fixtures steps from being shown in the UI by \"boxing\" it.\n\n``` javascript\nimport { test as base } from '@playwright/test';\n\nexport const test = base.extend({\n  helperFixture: [async ({}, use, testInfo) => {\n    // ...\n  }, { box: true }],\n});\n```\n\nThis is useful for non-interesting helper fixtures. For example, an [automatic](test-fixtures#automatic-fixtures) fixture that sets up some common data can be safely hidden from a test report.\n\n## Custom fixture title[​](#custom-fixture-title \"Direct link to Custom fixture title\")\n\nInstead of the usual fixture name, you can give fixtures a custom title that will be shown in test reports and error messages.\n\n``` javascript\nimport { test as base } from '@playwright/test';\n\nexport const test = base.extend({\n  innerFixture: [async ({}, use, testInfo) => {\n    // ...\n  }, { title: 'my fixture' }],\n});\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/test-fixtures](https://playwright.dev/docs/test-fixtures)"
- name: fixtures.browser
  id: api/class-fixtures#fixtures-browser
  summary: Browser instance is shared between all tests in the same worker - this makes testing efficient
  belongs_to: Fixtures
  description: |-
    ### browser[​](#fixtures-browser "Direct link to browser")

    [Browser](class-browser "Browser") instance is shared between all tests in the [same worker](../test-parallel) - this makes testing efficient. However, each test runs in an isolated [BrowserContext](class-browsercontext "BrowserContext") and gets a fresh environment.

    Learn how to [configure browser](../test-configuration) and see [available options](class-testoptions "TestOptions").

    **Usage**

    ``` javascript
    test.beforeAll(async ({ browser }) => {
      const page = await browser.newPage();
      // ...
    });
    ```

    **Type**

    - [Browser](class-browser "Browser")
- name: fixtures.browserName
  id: api/class-fixtures#fixtures-browser-name
  summary: Name of the browser that runs tests
  belongs_to: Fixtures
  description: |-
    ### browserName[​](#fixtures-browser-name "Direct link to browserName")

    Name of the browser that runs tests. Defaults to `'chromium'`. Useful to [annotate tests](../test-annotations) based on the browser.

    **Usage**

    ``` javascript
    test('skip this test in Firefox', async ({ page, browserName }) => {
      test.skip(browserName === 'firefox', 'Still working on it');
      // ...
    });
    ```

    **Type**

    - "chromium" \| "firefox" \| "webkit"

    &nbsp;
- name: fixtures.context
  id: api/class-fixtures#fixtures-context
  summary: Isolated BrowserContext instance, created for each test
  belongs_to: Fixtures
  description: |-
    ### context[​](#fixtures-context "Direct link to context")

    Isolated [BrowserContext](class-browsercontext "BrowserContext") instance, created for each test. Since contexts are isolated between each other, every test gets a fresh environment, even when multiple tests run in a single [Browser](class-browser "Browser") for maximum efficiency.

    Learn how to [configure context](../test-configuration) and see [available options](class-testoptions "TestOptions").

    Default [fixtures.page](class-fixtures#fixtures-page) belongs to this context.

    **Usage**

    ``` javascript
    test('example test', async ({ page, context }) => {
      await context.route('*external.com/*', route => route.abort());
      // ...
    });
    ```

    **Type**

    - [BrowserContext](class-browsercontext "BrowserContext")

    &nbsp;
- name: fixtures.page
  id: api/class-fixtures#fixtures-page
  summary: Isolated Page instance, created for each test
  belongs_to: Fixtures
  description: |-
    ### page[​](#fixtures-page "Direct link to page")

    Isolated [Page](class-page "Page") instance, created for each test. Pages are isolated between tests due to [fixtures.context](class-fixtures#fixtures-context) isolation.

    This is the most common fixture used in a test.

    **Usage**

    ``` javascript
    import { test, expect } from '@playwright/test';

    test('basic test', async ({ page }) => {
      await page.goto('/signin');
      await page.getByLabel('User Name').fill('user');
      await page.getByLabel('Password').fill('password');
      await page.getByText('Sign in').click();
      // ...
    });
    ```

    **Type**

    - [Page](class-page "Page")

    &nbsp;
- name: fixtures.request
  id: api/class-fixtures#fixtures-request
  summary: Isolated APIRequestContext instance for each test
  belongs_to: Fixtures
  description: "### request[​](#fixtures-request \"Direct link to request\")\n\nIsolated [APIRequestContext](class-apirequestcontext \"APIRequestContext\") instance for each test.\n\n**Usage**\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ request }) => {\n  await request.post('/signin', {\n    data: {\n      username: 'user',\n      password: 'password'\n    }\n  });\n  // ...\n});\n```\n\n**Type**\n\n- [APIRequestContext](class-apirequestcontext \"APIRequestContext\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-fixtures](https://playwright.dev/docs/api/class-fixtures)"
- name: Frame
  id: api/class-frame
  summary: At every point of time, page exposes its current frame tree via the page.mainFrame() and frame.childFrames() methods
  description: "# Frame\n\nAt every point of time, page exposes its current frame tree via the [page.mainFrame()](class-page#page-main-frame) and [frame.childFrames()](class-frame#frame-child-frames) methods.\n\n[Frame](class-frame \"Frame\") object's lifecycle is controlled by three events, dispatched on the page object:\n\n- [page.on('frameattached')](class-page#page-event-frame-attached) - fired when the frame gets attached to the page. A Frame can be attached to the page only once.\n- [page.on('framenavigated')](class-page#page-event-frame-navigated) - fired when the frame commits navigation to a different URL.\n- [page.on('framedetached')](class-page#page-event-frame-detached) - fired when the frame gets detached from the page. A Frame can be detached from the page only once.\n\nAn example of dumping frame tree:\n\n``` javascript\nconst { firefox } = require('playwright');  // Or 'chromium' or 'webkit'.\n\n(async () => {\n  const browser = await firefox.launch();\n  const page = await browser.newPage();\n  await page.goto('https://www.google.com/chrome/browser/canary.html');\n  dumpFrameTree(page.mainFrame(), '');\n  await browser.close();\n\n  function dumpFrameTree(frame, indent) {\n    console.log(indent + frame.url());\n    for (const child of frame.childFrames())\n      dumpFrameTree(child, indent + '  ');\n  }\n})();\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### addScriptTag[​](#frame-add-script-tag \"Direct link to addScriptTag\")\n\nAdded before v1.9\n\nReturns the added tag when the script's onload fires or when the script content was injected into frame.\n\nAdds a `<script>` tag into the page with the desired url or content.\n\n**Usage**\n\n``` javascript\nawait frame.addScriptTag();\nawait frame.addScriptTag(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `content` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Raw JavaScript content to be injected into frame.\n\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Path to the JavaScript file to be injected into frame. If `path` is a relative path, then it is resolved relative to the current working directory.\n\n  - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Script type. Use 'module' in order to load a JavaScript ES6 module. See [script](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script) for more details.\n\n  - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    URL of a script to be added.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[ElementHandle](class-elementhandle \"ElementHandle\")\\>\n\n### addStyleTag[​](#frame-add-style-tag \"Direct link to addStyleTag\")\n\nAdded before v1.9\n\nReturns the added tag when the stylesheet's onload fires or when the CSS content was injected into frame.\n\nAdds a `<link rel=\"stylesheet\">` tag into the page with the desired url or a `<style type=\"text/css\">` tag with the content.\n\n**Usage**\n\n``` javascript\nawait frame.addStyleTag();\nawait frame.addStyleTag(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `content` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Raw CSS content to be injected into frame.\n\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Path to the CSS file to be injected into frame. If `path` is a relative path, then it is resolved relative to the current working directory.\n\n  - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    URL of the `<link>` tag.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[ElementHandle](class-elementhandle \"ElementHandle\")\\>\n\n### childFrames[​](#frame-child-frames \"Direct link to childFrames\")\n\nAdded before v1.9\n\n**Usage**\n\n``` javascript\nframe.childFrames();\n```\n\n**Returns**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Frame](class-frame \"Frame\")\\>\n\n### content[​](#frame-content \"Direct link to content\")\n\nAdded before v1.9\n\nGets the full HTML contents of the frame, including the doctype.\n\n**Usage**\n\n``` javascript\nawait frame.content();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### dragAndDrop[​](#frame-drag-and-drop \"Direct link to dragAndDrop\")\n\n**Usage**\n\n``` javascript\nawait frame.dragAndDrop(source, target);\nawait frame.dragAndDrop(source, target, options);\n```\n\n**Arguments**\n\n- `source` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element to drag. If there are multiple elements satisfying the selector, the first will be used.\n\n- `target` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element to drop onto. If there are multiple elements satisfying the selector, the first will be used.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `sourcePosition` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Clicks on the source element at this point relative to the top-left corner of the element's padding box. If not specified, some visible point of the element is used.\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `targetPosition` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Drops on the target element at this point relative to the top-left corner of the element's padding box. If not specified, some visible point of the element is used.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### evaluate[​](#frame-evaluate \"Direct link to evaluate\")\n\nAdded before v1.9\n\nReturns the return value of `pageFunction`.\n\nIf the function passed to the [frame.evaluate()](class-frame#frame-evaluate) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\"), then [frame.evaluate()](class-frame#frame-evaluate) would wait for the promise to resolve and return its value.\n\nIf the function passed to the [frame.evaluate()](class-frame#frame-evaluate) returns a non-[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\") value, then [frame.evaluate()](class-frame#frame-evaluate) returns `undefined`. Playwright also supports transferring some additional values that are not serializable by `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`.\n\n**Usage**\n\n``` javascript\nconst result = await frame.evaluate(([x, y]) => {\n  return Promise.resolve(x * y);\n}, [7, 8]);\nconsole.log(result); // prints \"56\"\n```\n\nA string can also be passed in instead of a function.\n\n``` javascript\nconsole.log(await frame.evaluate('1 + 2')); // prints \"3\"\n```\n\n[ElementHandle](class-elementhandle \"ElementHandle\") instances can be passed as an argument to the [frame.evaluate()](class-frame#frame-evaluate):\n\n``` javascript\nconst bodyHandle = await frame.evaluate('document.body');\nconst html = await frame.evaluate(([body, suffix]) =>\n  body.innerHTML + suffix, [bodyHandle, 'hello'],\n);\nawait bodyHandle.dispose();\n```\n\n**Arguments**\n\n- `pageFunction` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Function to be evaluated in the page context.\n\n- `arg` [EvaluationArgument](../evaluating#evaluation-argument \"EvaluationArgument\") *(optional)*\n\n  Optional argument to pass to `pageFunction`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\")\\>\n\n### evaluateHandle[​](#frame-evaluate-handle \"Direct link to evaluateHandle\")\n\nAdded before v1.9\n\nReturns the return value of `pageFunction` as a [JSHandle](class-jshandle \"JSHandle\").\n\nThe only difference between [frame.evaluate()](class-frame#frame-evaluate) and [frame.evaluateHandle()](class-frame#frame-evaluate-handle) is that [frame.evaluateHandle()](class-frame#frame-evaluate-handle) returns [JSHandle](class-jshandle \"JSHandle\").\n\nIf the function, passed to the [frame.evaluateHandle()](class-frame#frame-evaluate-handle), returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\"), then [frame.evaluateHandle()](class-frame#frame-evaluate-handle) would wait for the promise to resolve and return its value.\n\n**Usage**\n\n``` javascript\n// Handle for the window object\nconst aWindowHandle = await frame.evaluateHandle(() => Promise.resolve(window));\n```\n\nA string can also be passed in instead of a function.\n\n``` javascript\nconst aHandle = await frame.evaluateHandle('document'); // Handle for the 'document'.\n```\n\n[JSHandle](class-jshandle \"JSHandle\") instances can be passed as an argument to the [frame.evaluateHandle()](class-frame#frame-evaluate-handle):\n\n``` javascript\nconst aHandle = await frame.evaluateHandle(() => document.body);\nconst resultHandle = await frame.evaluateHandle(([body, suffix]) =>\n  body.innerHTML + suffix, [aHandle, 'hello'],\n);\nconsole.log(await resultHandle.jsonValue());\nawait resultHandle.dispose();\n```\n\n**Arguments**\n\n- `pageFunction` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Function to be evaluated in the page context.\n\n- `arg` [EvaluationArgument](../evaluating#evaluation-argument \"EvaluationArgument\") *(optional)*\n\n  Optional argument to pass to `pageFunction`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[JSHandle](class-jshandle \"JSHandle\")\\>\n\n### frameElement[​](#frame-frame-element \"Direct link to frameElement\")\n\nAdded before v1.9\n\nReturns the `frame` or `iframe` element handle which corresponds to this frame.\n\nThis is an inverse of [elementHandle.contentFrame()](class-elementhandle#element-handle-content-frame). Note that returned handle actually belongs to the parent frame.\n\nThis method throws an error if the frame has been detached before `frameElement()` returns.\n\n**Usage**\n\n``` javascript\nconst frameElement = await frame.frameElement();\nconst contentFrame = await frameElement.contentFrame();\nconsole.log(frame === contentFrame);  // -> true\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[ElementHandle](class-elementhandle \"ElementHandle\")\\>\n\n### frameLocator[​](#frame-frame-locator \"Direct link to frameLocator\")\n\nWhen working with iframes, you can create a frame locator that will enter the iframe and allow selecting elements in that iframe.\n\n**Usage**\n\nFollowing snippet locates element with text \"Submit\" in the iframe with id `my-frame`, like `<iframe id=\"my-frame\">`:\n\n``` javascript\nconst locator = frame.frameLocator('#my-iframe').getByText('Submit');\nawait locator.click();\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to use when resolving DOM element.\n\n**Returns**\n\n- [FrameLocator](class-framelocator \"FrameLocator\")\n\n### getByAltText[​](#frame-get-by-alt-text \"Direct link to getByAltText\")\n\nAllows locating elements by their alt text.\n\n**Usage**\n\nFor example, this method will find the image by alt text \"Playwright logo\":\n\n``` html\n<img alt='Playwright logo'>\n```\n\n``` javascript\nawait page.getByAltText('Playwright logo').click();\n```\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Text to locate the element for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### getByLabel[​](#frame-get-by-label \"Direct link to getByLabel\")\n\nAllows locating input elements by the text of the associated `<label>` or `aria-labelledby` element, or by the `aria-label` attribute.\n\n**Usage**\n\nFor example, this method will find inputs by label \"Username\" and \"Password\" in the following DOM:\n\n``` html\n<input aria-label=\"Username\">\n<label for=\"password-input\">Password:</label>\n<input id=\"password-input\">\n```\n\n``` javascript\nawait page.getByLabel('Username').fill('john');\nawait page.getByLabel('Password').fill('secret');\n```\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Text to locate the element for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### getByPlaceholder[​](#frame-get-by-placeholder \"Direct link to getByPlaceholder\")\n\nAllows locating input elements by the placeholder text.\n\n**Usage**\n\nFor example, consider the following DOM structure.\n\n``` html\n<input type=\"email\" placeholder=\"name@example.com\" />\n```\n\nYou can fill the input after locating it by the placeholder text:\n\n``` javascript\nawait page\n    .getByPlaceholder('name@example.com')\n    .fill('playwright@microsoft.com');\n```\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Text to locate the element for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### getByRole[​](#frame-get-by-role \"Direct link to getByRole\")\n\nAllows locating elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n\n**Usage**\n\nConsider the following DOM structure.\n\n``` html\n<h3>Sign up</h3>\n<label>\n  <input type=\"checkbox\" /> Subscribe\n</label>\n<br/>\n<button>Submit</button>\n```\n\nYou can locate each element by it's implicit role:\n\n``` javascript\nawait expect(page.getByRole('heading', { name: 'Sign up' })).toBeVisible();\n\nawait page.getByRole('checkbox', { name: 'Subscribe' }).check();\n\nawait page.getByRole('button', { name: /submit/i }).click();\n```\n\n**Arguments**\n\n- `role` \"alert\" \\| \"alertdialog\" \\| \"application\" \\| \"article\" \\| \"banner\" \\| \"blockquote\" \\| \"button\" \\| \"caption\" \\| \"cell\" \\| \"checkbox\" \\| \"code\" \\| \"columnheader\" \\| \"combobox\" \\| \"complementary\" \\| \"contentinfo\" \\| \"definition\" \\| \"deletion\" \\| \"dialog\" \\| \"directory\" \\| \"document\" \\| \"emphasis\" \\| \"feed\" \\| \"figure\" \\| \"form\" \\| \"generic\" \\| \"grid\" \\| \"gridcell\" \\| \"group\" \\| \"heading\" \\| \"img\" \\| \"insertion\" \\| \"link\" \\| \"list\" \\| \"listbox\" \\| \"listitem\" \\| \"log\" \\| \"main\" \\| \"marquee\" \\| \"math\" \\| \"meter\" \\| \"menu\" \\| \"menubar\" \\| \"menuitem\" \\| \"menuitemcheckbox\" \\| \"menuitemradio\" \\| \"navigation\" \\| \"none\" \\| \"note\" \\| \"option\" \\| \"paragraph\" \\| \"presentation\" \\| \"progressbar\" \\| \"radio\" \\| \"radiogroup\" \\| \"region\" \\| \"row\" \\| \"rowgroup\" \\| \"rowheader\" \\| \"scrollbar\" \\| \"search\" \\| \"searchbox\" \\| \"separator\" \\| \"slider\" \\| \"spinbutton\" \\| \"status\" \\| \"strong\" \\| \"subscript\" \\| \"superscript\" \\| \"switch\" \\| \"tab\" \\| \"table\" \\| \"tablist\" \\| \"tabpanel\" \\| \"term\" \\| \"textbox\" \\| \"time\" \\| \"timer\" \\| \"toolbar\" \\| \"tooltip\" \\| \"tree\" \\| \"treegrid\" \\| \"treeitem\"\n\n  Required aria role.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `checked` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    An attribute that is usually set by `aria-checked` or native `<input type=checkbox>` controls.\n\n    Learn more about [`aria-checked`](https://www.w3.org/TR/wai-aria-1.2/#aria-checked).\n\n  - `disabled` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    An attribute that is usually set by `aria-disabled` or `disabled`.\n\n    > note\n    >\n    > Unlike most other attributes, `disabled` is inherited through the DOM hierarchy. Learn more about [`aria-disabled`](https://www.w3.org/TR/wai-aria-1.2/#aria-disabled).\n\n  - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether `name` is matched exactly: case-sensitive and whole-string. Defaults to false. Ignored when `name` is a regular expression. Note that exact match still trims whitespace.\n\n  - `expanded` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    An attribute that is usually set by `aria-expanded`.\n\n    Learn more about [`aria-expanded`](https://www.w3.org/TR/wai-aria-1.2/#aria-expanded).\n\n  - `includeHidden` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Option that controls whether hidden elements are matched. By default, only non-hidden elements, as [defined by ARIA](https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion), are matched by role selector.\n\n    Learn more about [`aria-hidden`](https://www.w3.org/TR/wai-aria-1.2/#aria-hidden).\n\n  - `level` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    A number attribute that is usually present for roles `heading`, `listitem`, `row`, `treeitem`, with default values for `<h1>-<h6>` elements.\n\n    Learn more about [`aria-level`](https://www.w3.org/TR/wai-aria-1.2/#aria-level).\n\n  - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") *(optional)*\n\n    Option to match the [accessible name](https://w3c.github.io/accname/#dfn-accessible-name). By default, matching is case-insensitive and searches for a substring, use `exact` to control this behavior.\n\n    Learn more about [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n\n  - `pressed` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    An attribute that is usually set by `aria-pressed`.\n\n    Learn more about [`aria-pressed`](https://www.w3.org/TR/wai-aria-1.2/#aria-pressed).\n\n  - `selected` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    An attribute that is usually set by `aria-selected`.\n\n    Learn more about [`aria-selected`](https://www.w3.org/TR/wai-aria-1.2/#aria-selected).\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n**Details**\n\nRole selector **does not replace** accessibility audits and conformance tests, but rather gives early feedback about the ARIA guidelines.\n\nMany html elements have an implicitly [defined role](https://w3c.github.io/html-aam/#html-element-role-mappings) that is recognized by the role selector. You can find all the [supported roles here](https://www.w3.org/TR/wai-aria-1.2/#role_definitions). ARIA guidelines **do not recommend** duplicating implicit roles and attributes by setting `role` and/or `aria-*` attributes to default values.\n\n### getByTestId[​](#frame-get-by-test-id \"Direct link to getByTestId\")\n\nLocate element by the test id.\n\n**Usage**\n\nConsider the following DOM structure.\n\n``` html\n<button data-testid=\"directions\">Itinéraire</button>\n```\n\nYou can locate the element by it's test id:\n\n``` javascript\nawait page.getByTestId('directions').click();\n```\n\n**Arguments**\n\n- `testId` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Id to locate the element by.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n**Details**\n\nBy default, the `data-testid` attribute is used as a test id. Use [selectors.setTestIdAttribute()](class-selectors#selectors-set-test-id-attribute) to configure a different test id attribute if necessary.\n\n``` javascript\n// Set custom test id attribute from @playwright/test config:\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    testIdAttribute: 'data-pw'\n  },\n});\n```\n\n### getByText[​](#frame-get-by-text \"Direct link to getByText\")\n\nAllows locating elements that contain given text.\n\nSee also [locator.filter()](class-locator#locator-filter) that allows to match by another criteria, like an accessible role, and then filter by the text content.\n\n**Usage**\n\nConsider the following DOM structure:\n\n``` html\n<div>Hello <span>world</span></div>\n<div>Hello</div>\n```\n\nYou can locate by text substring, exact string, or a regular expression:\n\n``` javascript\n// Matches <span>\npage.getByText('world');\n\n// Matches first <div>\npage.getByText('Hello world');\n\n// Matches second <div>\npage.getByText('Hello', { exact: true });\n\n// Matches both <div>s\npage.getByText(/Hello/);\n\n// Matches second <div>\npage.getByText(/^hello$/i);\n```\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Text to locate the element for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n**Details**\n\nMatching by text always normalizes whitespace, even with exact match. For example, it turns multiple spaces into one, turns line breaks into spaces and ignores leading and trailing whitespace.\n\nInput elements of the type `button` and `submit` are matched by their `value` instead of the text content. For example, locating by text `\"Log in\"` matches `<input type=button value=\"Log in\">`.\n\n### getByTitle[​](#frame-get-by-title \"Direct link to getByTitle\")\n\nAllows locating elements by their title attribute.\n\n**Usage**\n\nConsider the following DOM structure.\n\n``` html\n<span title='Issues count'>25 issues</span>\n```\n\nYou can check the issues count after locating it by the title text:\n\n``` javascript\nawait expect(page.getByTitle('Issues count')).toHaveText('25 issues');\n```\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Text to locate the element for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### goto[​](#frame-goto \"Direct link to goto\")\n\nAdded before v1.9\n\nReturns the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect.\n\nThe method will throw an error if:\n\n- there's an SSL error (e.g. in case of self-signed certificates).\n- target URL is invalid.\n- the `timeout` is exceeded during navigation.\n- the remote server does not respond or is unreachable.\n- the main resource failed to load.\n\nThe method will not throw an error when any valid HTTP status code is returned by the remote server, including 404 \"Not Found\" and 500 \"Internal Server Error\". The status code for such responses can be retrieved by calling [response.status()](class-response#response-status).\n\n> note\n>\n> The method either throws an error or returns a main resource response. The only exceptions are navigation to `about:blank` or navigation to the same URL with a different hash, which would succeed and return `null`.\n\n> note\n>\n> Headless mode doesn't support navigation to a PDF document. See the [upstream issue](https://bugs.chromium.org/p/chromium/issues/detail?id=761295).\n\n**Usage**\n\n``` javascript\nawait frame.goto(url);\nawait frame.goto(url, options);\n```\n\n**Arguments**\n\n- `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  URL to navigate frame to. The url should include scheme, e.g. `https://`.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `referer` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Referer header value. If provided it will take preference over the referer header value set by [page.setExtraHTTPHeaders()](class-page#page-set-extra-http-headers).\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum operation time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `navigationTimeout` option in the config, or by using the [browserContext.setDefaultNavigationTimeout()](class-browsercontext#browser-context-set-default-navigation-timeout), [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout), [page.setDefaultNavigationTimeout()](class-page#page-set-default-navigation-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `waitUntil` \"load\" \\| \"domcontentloaded\" \\| \"networkidle\" \\| \"commit\" *(optional)*\n\n    When to consider operation succeeded, defaults to `load`. Events can be either:\n\n    - `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.\n    - `'load'` - consider operation to be finished when the `load` event is fired.\n    - `'networkidle'` - **DISCOURAGED** consider operation to be finished when there are no network connections for at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.\n    - `'commit'` - consider operation to be finished when network response is received and the document started loading.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Response](class-response \"Response\")\\>\n\n### isDetached[​](#frame-is-detached \"Direct link to isDetached\")\n\nAdded before v1.9\n\nReturns `true` if the frame has been detached, or `false` otherwise.\n\n**Usage**\n\n``` javascript\nframe.isDetached();\n```\n\n**Returns**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### isEnabled[​](#frame-is-enabled \"Direct link to isEnabled\")\n\nAdded before v1.9\n\nReturns whether the element is [enabled](../actionability#enabled).\n\n**Usage**\n\n``` javascript\nawait frame.isEnabled(selector);\nawait frame.isEnabled(selector, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\>\n\n### locator[​](#frame-locator \"Direct link to locator\")\n\nThe method returns an element locator that can be used to perform actions on this page / frame. Locator is resolved to the element immediately before performing an action, so a series of actions on the same locator can in fact be performed on different DOM elements. That would happen if the DOM structure between those actions has changed.\n\n[Learn more about locators](../locators).\n\n[Learn more about locators](../locators).\n\n**Usage**\n\n``` javascript\nframe.locator(selector);\nframe.locator(selector, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to use when resolving DOM element.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `has` [Locator](class-locator \"Locator\") *(optional)*\n\n    Narrows down the results of the method to those which contain elements matching this relative locator. For example, `article` that has `text=Playwright` matches `<article><div>Playwright</div></article>`.\n\n    Inner locator **must be relative** to the outer locator and is queried starting with the outer locator match, not the document root. For example, you can find `content` that has `div` in `<article><content><div>Playwright</div></content></article>`. However, looking for `content` that has `article div` will fail, because the inner locator must be relative and should not use any elements outside the `content`.\n\n    Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](class-framelocator \"FrameLocator\")s.\n\n  - `hasNot` [Locator](class-locator \"Locator\") *(optional)*\n\n    Matches elements that do not contain an element that matches an inner locator. Inner locator is queried against the outer one. For example, `article` that does not have `div` matches `<article><span>Playwright</span></article>`.\n\n    Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](class-framelocator \"FrameLocator\")s.\n\n  - `hasNotText` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") *(optional)*\n\n    Matches elements that do not contain specified text somewhere inside, possibly in a child or a descendant element. When passed a [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), matching is case-insensitive and searches for a substring.\n\n  - `hasText` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") *(optional)*\n\n    Matches elements containing specified text somewhere inside, possibly in a child or a descendant element. When passed a [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), matching is case-insensitive and searches for a substring. For example, `\"Playwright\"` matches `<article><div>Playwright</div></article>`.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### name[​](#frame-name \"Direct link to name\")\n\nAdded before v1.9\n\nReturns frame's name attribute as specified in the tag.\n\nIf the name is empty, returns the id attribute instead.\n\n> note\n>\n> This value is calculated once when the frame is created, and will not update if the attribute is changed later.\n\n**Usage**\n\n``` javascript\nframe.name();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### page[​](#frame-page \"Direct link to page\")\n\nAdded before v1.9\n\nReturns the page containing this frame.\n\n**Usage**\n\n``` javascript\nframe.page();\n```\n\n**Returns**\n\n- [Page](class-page \"Page\")\n\n### parentFrame[​](#frame-parent-frame \"Direct link to parentFrame\")\n\nAdded before v1.9\n\nParent frame, if any. Detached frames and main frames return `null`.\n\n**Usage**\n\n``` javascript\nframe.parentFrame();\n```\n\n**Returns**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Frame](class-frame \"Frame\")\n\n### setContent[​](#frame-set-content \"Direct link to setContent\")\n\nAdded before v1.9\n\nThis method internally calls [document.write()](https://developer.mozilla.org/en-US/docs/Web/API/Document/write), inheriting all its specific characteristics and behaviors.\n\n**Usage**\n\n``` javascript\nawait frame.setContent(html);\nawait frame.setContent(html, options);\n```\n\n**Arguments**\n\n- `html` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  HTML markup to assign to the page.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum operation time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `navigationTimeout` option in the config, or by using the [browserContext.setDefaultNavigationTimeout()](class-browsercontext#browser-context-set-default-navigation-timeout), [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout), [page.setDefaultNavigationTimeout()](class-page#page-set-default-navigation-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `waitUntil` \"load\" \\| \"domcontentloaded\" \\| \"networkidle\" \\| \"commit\" *(optional)*\n\n    When to consider operation succeeded, defaults to `load`. Events can be either:\n\n    - `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.\n    - `'load'` - consider operation to be finished when the `load` event is fired.\n    - `'networkidle'` - **DISCOURAGED** consider operation to be finished when there are no network connections for at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.\n    - `'commit'` - consider operation to be finished when network response is received and the document started loading.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### title[​](#frame-title \"Direct link to title\")\n\nAdded before v1.9\n\nReturns the page title.\n\n**Usage**\n\n``` javascript\nawait frame.title();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### url[​](#frame-url \"Direct link to url\")\n\nAdded before v1.9\n\nReturns frame's url.\n\n**Usage**\n\n``` javascript\nframe.url();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### waitForFunction[​](#frame-wait-for-function \"Direct link to waitForFunction\")\n\nAdded before v1.9\n\nReturns when the `pageFunction` returns a truthy value, returns that value.\n\n**Usage**\n\nThe [frame.waitForFunction()](class-frame#frame-wait-for-function) can be used to observe viewport size change:\n\n``` javascript\nconst { firefox } = require('playwright');  // Or 'chromium' or 'webkit'.\n\n(async () => {\n  const browser = await firefox.launch();\n  const page = await browser.newPage();\n  const watchDog = page.mainFrame().waitForFunction('window.innerWidth < 100');\n  await page.setViewportSize({ width: 50, height: 50 });\n  await watchDog;\n  await browser.close();\n})();\n```\n\nTo pass an argument to the predicate of `frame.waitForFunction` function:\n\n``` javascript\nconst selector = '.foo';\nawait frame.waitForFunction(selector => !!document.querySelector(selector), selector);\n```\n\n**Arguments**\n\n- `pageFunction` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Function to be evaluated in the page context.\n\n- `arg` [EvaluationArgument](../evaluating#evaluation-argument \"EvaluationArgument\") *(optional)*\n\n  Optional argument to pass to `pageFunction`.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `polling` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| \"raf\" *(optional)*\n\n    If `polling` is `'raf'`, then `pageFunction` is constantly executed in `requestAnimationFrame` callback. If `polling` is a number, then it is treated as an interval in milliseconds at which the function would be executed. Defaults to `raf`.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time to wait for in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[JSHandle](class-jshandle \"JSHandle\")\\>\n\n### waitForLoadState[​](#frame-wait-for-load-state \"Direct link to waitForLoadState\")\n\nAdded before v1.9\n\nWaits for the required load state to be reached.\n\nThis returns when the frame reaches a required load state, `load` by default. The navigation must have been committed when this method is called. If current document has already reached the required state, resolves immediately.\n\n> note\n>\n> Most of the time, this method is not needed because Playwright [auto-waits before every action](../actionability).\n\n**Usage**\n\n``` javascript\nawait frame.click('button'); // Click triggers navigation.\nawait frame.waitForLoadState(); // Waits for 'load' state by default.\n```\n\n**Arguments**\n\n- `state` \"load\" \\| \"domcontentloaded\" \\| \"networkidle\" *(optional)*\n\n  Optional load state to wait for, defaults to `load`. If the state has been already reached while loading current document, the method resolves immediately. Can be one of:\n\n  - `'load'` - wait for the `load` event to be fired.\n  - `'domcontentloaded'` - wait for the `DOMContentLoaded` event to be fired.\n  - `'networkidle'` - **DISCOURAGED** wait until there are no network connections for at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum operation time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `navigationTimeout` option in the config, or by using the [browserContext.setDefaultNavigationTimeout()](class-browsercontext#browser-context-set-default-navigation-timeout), [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout), [page.setDefaultNavigationTimeout()](class-page#page-set-default-navigation-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### waitForURL[​](#frame-wait-for-url \"Direct link to waitForURL\")\n\nWaits for the frame to navigate to the given URL.\n\n**Usage**\n\n``` javascript\nawait frame.click('a.delayed-navigation'); // Clicking the link will indirectly cause a navigation\nawait frame.waitForURL('**/target.html');\n```\n\n**Arguments**\n\n- `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") \\| [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([URL](https://nodejs.org/api/url.html \"URL\")):[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n  A glob pattern, regex pattern or predicate receiving [URL](https://nodejs.org/api/url.html \"URL\") to match while waiting for the navigation. Note that if the parameter is a string without wildcard characters, the method will wait for navigation to URL that is exactly equal to the string.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum operation time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `navigationTimeout` option in the config, or by using the [browserContext.setDefaultNavigationTimeout()](class-browsercontext#browser-context-set-default-navigation-timeout), [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout), [page.setDefaultNavigationTimeout()](class-page#page-set-default-navigation-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `waitUntil` \"load\" \\| \"domcontentloaded\" \\| \"networkidle\" \\| \"commit\" *(optional)*\n\n    When to consider operation succeeded, defaults to `load`. Events can be either:\n\n    - `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.\n    - `'load'` - consider operation to be finished when the `load` event is fired.\n    - `'networkidle'` - **DISCOURAGED** consider operation to be finished when there are no network connections for at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.\n    - `'commit'` - consider operation to be finished when network response is received and the document started loading.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n## Deprecated[​](#deprecated \"Direct link to Deprecated\")\n\n### $[​](#frame-query-selector \"Direct link to $\")\n\n> Discouraged\n>\n> Use locator-based [frame.locator()](class-frame#frame-locator) instead. Read more about [locators](../locators).\n\nReturns the ElementHandle pointing to the frame element.\n\n> caution\n>\n> The use of [ElementHandle](class-elementhandle \"ElementHandle\") is discouraged, use [Locator](class-locator \"Locator\") objects and web-first assertions instead.\n\nThe method finds an element matching the specified selector within the frame. If no elements match the selector, returns `null`.\n\n**Usage**\n\n``` javascript\nawait frame.$(selector);\nawait frame.$(selector, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to query for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [ElementHandle](class-elementhandle \"ElementHandle\")\\>\n\n### $$[​](#frame-query-selector-all \"Direct link to $$\")\n\n> Discouraged\n>\n> Use locator-based [frame.locator()](class-frame#frame-locator) instead. Read more about [locators](../locators).\n\nReturns the ElementHandles pointing to the frame elements.\n\n> caution\n>\n> The use of [ElementHandle](class-elementhandle \"ElementHandle\") is discouraged, use [Locator](class-locator \"Locator\") objects instead.\n\nThe method finds all elements matching the specified selector within the frame. If no elements match the selector, returns empty array.\n\n**Usage**\n\n``` javascript\nawait frame.$$(selector);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to query for.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[ElementHandle](class-elementhandle \"ElementHandle\")\\>\\>\n\n### $eval[​](#frame-eval-on-selector \"Direct link to $eval\")\n\n> Discouraged\n>\n> This method does not wait for the element to pass the actionability checks and therefore can lead to the flaky tests. Use [locator.evaluate()](class-locator#locator-evaluate), other [Locator](class-locator \"Locator\") helper methods or web-first assertions instead.\n\nReturns the return value of `pageFunction`.\n\nThe method finds an element matching the specified selector within the frame and passes it as a first argument to `pageFunction`. If no elements match the selector, the method throws an error.\n\nIf `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\"), then [frame.$eval()](class-frame#frame-eval-on-selector) would wait for the promise to resolve and return its value.\n\n**Usage**\n\n``` javascript\nconst searchValue = await frame.$eval('#search', el => el.value);\nconst preloadHref = await frame.$eval('link[rel=preload]', el => el.href);\nconst html = await frame.$eval('.main-container', (e, suffix) => e.outerHTML + suffix, 'hello');\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to query for.\n\n- `pageFunction` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([Element](https://developer.mozilla.org/en-US/docs/Web/API/element \"Element\")) \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Function to be evaluated in the page context.\n\n- `arg` [EvaluationArgument](../evaluating#evaluation-argument \"EvaluationArgument\") *(optional)*\n\n  Optional argument to pass to `pageFunction`.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\")\\>\n\n### $$eval[​](#frame-eval-on-selector-all \"Direct link to $$eval\")\n\n> Discouraged\n>\n> In most cases, [locator.evaluateAll()](class-locator#locator-evaluate-all), other [Locator](class-locator \"Locator\") helper methods and web-first assertions do a better job.\n\nReturns the return value of `pageFunction`.\n\nThe method finds all elements matching the specified selector within the frame and passes an array of matched elements as a first argument to `pageFunction`.\n\nIf `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\"), then [frame.$$eval()](class-frame#frame-eval-on-selector-all) would wait for the promise to resolve and return its value.\n\n**Usage**\n\n``` javascript\nconst divsCounts = await frame.$$eval('div', (divs, min) => divs.length >= min, 10);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to query for.\n\n- `pageFunction` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Element](https://developer.mozilla.org/en-US/docs/Web/API/element \"Element\")\\>) \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Function to be evaluated in the page context.\n\n- `arg` [EvaluationArgument](../evaluating#evaluation-argument \"EvaluationArgument\") *(optional)*\n\n  Optional argument to pass to `pageFunction`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\")\\>\n\n### check[​](#frame-check \"Direct link to check\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.check()](class-locator#locator-check) instead. Read more about [locators](../locators).\n\nThis method checks an element matching `selector` by performing the following steps:\n\n1.  Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.\n2.  Ensure that matched element is a checkbox or a radio input. If not, this method throws. If the element is already checked, this method returns immediately.\n3.  Wait for [actionability](../actionability) checks on the matched element, unless `force` option is set. If the element is detached during the checks, the whole action is retried.\n4.  Scroll the element into view if needed.\n5.  Use [page.mouse](class-page#page-mouse) to click in the center of the element.\n6.  Ensure that the element is now checked. If not, this method throws.\n\nWhen all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror \"TimeoutError\"). Passing zero timeout disables this.\n\n**Usage**\n\n``` javascript\nawait frame.check(selector);\nawait frame.check(selector, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### click[​](#frame-click \"Direct link to click\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.click()](class-locator#locator-click) instead. Read more about [locators](../locators).\n\nThis method clicks an element matching `selector` by performing the following steps:\n\n1.  Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.\n2.  Wait for [actionability](../actionability) checks on the matched element, unless `force` option is set. If the element is detached during the checks, the whole action is retried.\n3.  Scroll the element into view if needed.\n4.  Use [page.mouse](class-page#page-mouse) to click in the center of the element, or the specified `position`.\n5.  Wait for initiated navigations to either succeed or fail, unless `noWaitAfter` option is set.\n\nWhen all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror \"TimeoutError\"). Passing zero timeout disables this.\n\n**Usage**\n\n``` javascript\nawait frame.click(selector);\nawait frame.click(selector, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `button` \"left\" \\| \"right\" \\| \"middle\" *(optional)*\n\n    Defaults to `left`.\n\n  - `clickCount` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail \"UIEvent.detail\").\n\n  - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.\n\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `modifiers` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<\"Alt\" \\| \"Control\" \\| \"ControlOrMeta\" \\| \"Meta\" \\| \"Shift\"\\> *(optional)*\n\n    Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. \"ControlOrMeta\" resolves to \"Control\" on Windows and Linux and to \"Meta\" on macOS.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option will default to `true` in the future.\n\n    Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.\n\n  - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### dblclick[​](#frame-dblclick \"Direct link to dblclick\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.dblclick()](class-locator#locator-dblclick) instead. Read more about [locators](../locators).\n\nThis method double clicks an element matching `selector` by performing the following steps:\n\n1.  Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.\n2.  Wait for [actionability](../actionability) checks on the matched element, unless `force` option is set. If the element is detached during the checks, the whole action is retried.\n3.  Scroll the element into view if needed.\n4.  Use [page.mouse](class-page#page-mouse) to double click in the center of the element, or the specified `position`. if the first click of the `dblclick()` triggers a navigation event, this method will throw.\n\nWhen all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror \"TimeoutError\"). Passing zero timeout disables this.\n\n> note\n>\n> `frame.dblclick()` dispatches two `click` events and a single `dblclick` event.\n\n**Usage**\n\n``` javascript\nawait frame.dblclick(selector);\nawait frame.dblclick(selector, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `button` \"left\" \\| \"right\" \\| \"middle\" *(optional)*\n\n    Defaults to `left`.\n\n  - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.\n\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `modifiers` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<\"Alt\" \\| \"Control\" \\| \"ControlOrMeta\" \\| \"Meta\" \\| \"Shift\"\\> *(optional)*\n\n    Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. \"ControlOrMeta\" resolves to \"Control\" on Windows and Linux and to \"Meta\" on macOS.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### dispatchEvent[​](#frame-dispatch-event \"Direct link to dispatchEvent\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.dispatchEvent()](class-locator#locator-dispatch-event) instead. Read more about [locators](../locators).\n\nThe snippet below dispatches the `click` event on the element. Regardless of the visibility state of the element, `click` is dispatched. This is equivalent to calling [element.click()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click).\n\n**Usage**\n\n``` javascript\nawait frame.dispatchEvent('button#submit', 'click');\n```\n\nUnder the hood, it creates an instance of an event based on the given `type`, initializes it with `eventInit` properties and dispatches it on the element. Events are `composed`, `cancelable` and bubble by default.\n\nSince `eventInit` is event-specific, please refer to the events documentation for the lists of initial properties:\n\n- [DeviceMotionEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/DeviceMotionEvent)\n- [DeviceOrientationEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/DeviceOrientationEvent)\n- [DragEvent](https://developer.mozilla.org/en-US/docs/Web/API/DragEvent/DragEvent)\n- [Event](https://developer.mozilla.org/en-US/docs/Web/API/Event/Event)\n- [FocusEvent](https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/FocusEvent)\n- [KeyboardEvent](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent)\n- [MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent)\n- [PointerEvent](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/PointerEvent)\n- [TouchEvent](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/TouchEvent)\n- [WheelEvent](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/WheelEvent)\n\nYou can also specify `JSHandle` as the property value if you want live objects to be passed into the event:\n\n``` javascript\n// Note you can only create DataTransfer in Chromium and Firefox\nconst dataTransfer = await frame.evaluateHandle(() => new DataTransfer());\nawait frame.dispatchEvent('#source', 'dragstart', { dataTransfer });\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  DOM event type: `\"click\"`, `\"dragstart\"`, etc.\n\n- `eventInit` [EvaluationArgument](../evaluating#evaluation-argument \"EvaluationArgument\") *(optional)*\n\n  Optional event-specific initialization properties.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### fill[​](#frame-fill \"Direct link to fill\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.fill()](class-locator#locator-fill) instead. Read more about [locators](../locators).\n\nThis method waits for an element matching `selector`, waits for [actionability](../actionability) checks, focuses the element, fills it and triggers an `input` event after filling. Note that you can pass an empty string to clear the input field.\n\nIf the target element is not an `<input>`, `<textarea>` or `[contenteditable]` element, this method throws an error. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be filled instead.\n\nTo send fine-grained keyboard events, use [locator.pressSequentially()](class-locator#locator-press-sequentially).\n\n**Usage**\n\n``` javascript\nawait frame.fill(selector, value);\nawait frame.fill(selector, value, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Value to fill for the `<input>`, `<textarea>` or `[contenteditable]` element.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### focus[​](#frame-focus \"Direct link to focus\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.focus()](class-locator#locator-focus) instead. Read more about [locators](../locators).\n\nThis method fetches an element with `selector` and focuses it. If there's no element matching `selector`, the method waits until a matching element appears in the DOM.\n\n**Usage**\n\n``` javascript\nawait frame.focus(selector);\nawait frame.focus(selector, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### getAttribute[​](#frame-get-attribute \"Direct link to getAttribute\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.getAttribute()](class-locator#locator-get-attribute) instead. Read more about [locators](../locators).\n\nReturns element attribute value.\n\n**Usage**\n\n``` javascript\nawait frame.getAttribute(selector, name);\nawait frame.getAttribute(selector, name, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Attribute name to get the value for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### hover[​](#frame-hover \"Direct link to hover\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.hover()](class-locator#locator-hover) instead. Read more about [locators](../locators).\n\nThis method hovers over an element matching `selector` by performing the following steps:\n\n1.  Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.\n2.  Wait for [actionability](../actionability) checks on the matched element, unless `force` option is set. If the element is detached during the checks, the whole action is retried.\n3.  Scroll the element into view if needed.\n4.  Use [page.mouse](class-page#page-mouse) to hover over the center of the element, or the specified `position`.\n\nWhen all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror \"TimeoutError\"). Passing zero timeout disables this.\n\n**Usage**\n\n``` javascript\nawait frame.hover(selector);\nawait frame.hover(selector, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `modifiers` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<\"Alt\" \\| \"Control\" \\| \"ControlOrMeta\" \\| \"Meta\" \\| \"Shift\"\\> *(optional)*\n\n    Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. \"ControlOrMeta\" resolves to \"Control\" on Windows and Linux and to \"Meta\" on macOS.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### innerHTML[​](#frame-inner-html \"Direct link to innerHTML\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.innerHTML()](class-locator#locator-inner-html) instead. Read more about [locators](../locators).\n\nReturns `element.innerHTML`.\n\n**Usage**\n\n``` javascript\nawait frame.innerHTML(selector);\nawait frame.innerHTML(selector, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### innerText[​](#frame-inner-text \"Direct link to innerText\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.innerText()](class-locator#locator-inner-text) instead. Read more about [locators](../locators).\n\nReturns `element.innerText`.\n\n**Usage**\n\n``` javascript\nawait frame.innerText(selector);\nawait frame.innerText(selector, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### inputValue[​](#frame-input-value \"Direct link to inputValue\")\n\n> Discouraged\n>\n> Use locator-based [locator.inputValue()](class-locator#locator-input-value) instead. Read more about [locators](../locators).\n\nReturns `input.value` for the selected `<input>` or `<textarea>` or `<select>` element.\n\nThrows for non-input elements. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), returns the value of the control.\n\n**Usage**\n\n``` javascript\nawait frame.inputValue(selector);\nawait frame.inputValue(selector, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### isChecked[​](#frame-is-checked \"Direct link to isChecked\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.isChecked()](class-locator#locator-is-checked) instead. Read more about [locators](../locators).\n\nReturns whether the element is checked. Throws if the element is not a checkbox or radio input.\n\n**Usage**\n\n``` javascript\nawait frame.isChecked(selector);\nawait frame.isChecked(selector, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\>\n\n### isDisabled[​](#frame-is-disabled \"Direct link to isDisabled\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.isDisabled()](class-locator#locator-is-disabled) instead. Read more about [locators](../locators).\n\nReturns whether the element is disabled, the opposite of [enabled](../actionability#enabled).\n\n**Usage**\n\n``` javascript\nawait frame.isDisabled(selector);\nawait frame.isDisabled(selector, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\>\n\n### isEditable[​](#frame-is-editable \"Direct link to isEditable\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.isEditable()](class-locator#locator-is-editable) instead. Read more about [locators](../locators).\n\nReturns whether the element is [editable](../actionability#editable).\n\n**Usage**\n\n``` javascript\nawait frame.isEditable(selector);\nawait frame.isEditable(selector, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\>\n\n### isHidden[​](#frame-is-hidden \"Direct link to isHidden\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.isHidden()](class-locator#locator-is-hidden) instead. Read more about [locators](../locators).\n\nReturns whether the element is hidden, the opposite of [visible](../actionability#visible). `selector` that does not match any elements is considered hidden.\n\n**Usage**\n\n``` javascript\nawait frame.isHidden(selector);\nawait frame.isHidden(selector, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    > Deprecated\n    >\n    > This option is ignored. [frame.isHidden()](class-frame#frame-is-hidden) does not wait for the element to become hidden and returns immediately.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\>\n\n### isVisible[​](#frame-is-visible \"Direct link to isVisible\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.isVisible()](class-locator#locator-is-visible) instead. Read more about [locators](../locators).\n\nReturns whether the element is [visible](../actionability#visible). `selector` that does not match any elements is considered not visible.\n\n**Usage**\n\n``` javascript\nawait frame.isVisible(selector);\nawait frame.isVisible(selector, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    > Deprecated\n    >\n    > This option is ignored. [frame.isVisible()](class-frame#frame-is-visible) does not wait for the element to become visible and returns immediately.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\>\n\n### press[​](#frame-press \"Direct link to press\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.press()](class-locator#locator-press) instead. Read more about [locators](../locators).\n\n`key` can specify the intended [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) value or a single character to generate the text for. A superset of the `key` values can be found [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values). Examples of the keys are:\n\n`F1` - `F12`, `Digit0`- `Digit9`, `KeyA`- `KeyZ`, `Backquote`, `Minus`, `Equal`, `Backslash`, `Backspace`, `Tab`, `Delete`, `Escape`, `ArrowDown`, `End`, `Enter`, `Home`, `Insert`, `PageDown`, `PageUp`, `ArrowRight`, `ArrowUp`, etc.\n\nFollowing modification shortcuts are also supported: `Shift`, `Control`, `Alt`, `Meta`, `ShiftLeft`, `ControlOrMeta`. `ControlOrMeta` resolves to `Control` on Windows and Linux and to `Meta` on macOS.\n\nHolding down `Shift` will type the text that corresponds to the `key` in the upper case.\n\nIf `key` is a single character, it is case-sensitive, so the values `a` and `A` will generate different respective texts.\n\nShortcuts such as `key: \"Control+o\"`, `key: \"Control++` or `key: \"Control+Shift+T\"` are supported as well. When specified with the modifier, modifier is pressed and being held while the subsequent key is being pressed.\n\n**Usage**\n\n``` javascript\nawait frame.press(selector, key);\nawait frame.press(selector, key, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `key` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option will default to `true` in the future.\n\n    Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### selectOption[​](#frame-select-option \"Direct link to selectOption\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.selectOption()](class-locator#locator-select-option) instead. Read more about [locators](../locators).\n\nThis method waits for an element matching `selector`, waits for [actionability](../actionability) checks, waits until all specified options are present in the `<select>` element and selects these options.\n\nIf the target element is not a `<select>` element, this method throws an error. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be used instead.\n\nReturns the array of option values that have been successfully selected.\n\nTriggers a `change` and `input` event once all the provided options have been selected.\n\n**Usage**\n\n``` javascript\n// Single selection matching the value or label\nframe.selectOption('select#colors', 'blue');\n\n// single selection matching both the value and the label\nframe.selectOption('select#colors', { label: 'Blue' });\n\n// multiple selection\nframe.selectOption('select#colors', 'red', 'green', 'blue');\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to query for.\n\n- `values` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [ElementHandle](class-elementhandle \"ElementHandle\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[ElementHandle](class-elementhandle \"ElementHandle\")\\> \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n  - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Matches by `option.value`. Optional.\n\n  - `label` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Matches by `option.label`. Optional.\n\n  - `index` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Matches by the index. Optional.\n\n  Options to select. If the `<select>` has the `multiple` attribute, all matching options are selected, otherwise only the first option matching one of the passed options is selected. String values are matching both values and labels. Option is considered matching if all specified properties match.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option will default to `true` in the future.\n\n    Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\\>\n\n### setChecked[​](#frame-set-checked \"Direct link to setChecked\")\n\n> Discouraged\n>\n> Use locator-based [locator.setChecked()](class-locator#locator-set-checked) instead. Read more about [locators](../locators).\n\nThis method checks or unchecks an element matching `selector` by performing the following steps:\n\n1.  Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.\n2.  Ensure that matched element is a checkbox or a radio input. If not, this method throws.\n3.  If the element already has the right checked state, this method returns immediately.\n4.  Wait for [actionability](../actionability) checks on the matched element, unless `force` option is set. If the element is detached during the checks, the whole action is retried.\n5.  Scroll the element into view if needed.\n6.  Use [page.mouse](class-page#page-mouse) to click in the center of the element.\n7.  Ensure that the element is now checked or unchecked. If not, this method throws.\n\nWhen all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror \"TimeoutError\"). Passing zero timeout disables this.\n\n**Usage**\n\n``` javascript\nawait frame.setChecked(selector, checked);\nawait frame.setChecked(selector, checked, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `checked` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n  Whether to check or uncheck the checkbox.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### setInputFiles[​](#frame-set-input-files \"Direct link to setInputFiles\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.setInputFiles()](class-locator#locator-set-input-files) instead. Read more about [locators](../locators).\n\nSets the value of the file input to these file paths or files. If some of the `filePaths` are relative paths, then they are resolved relative to the current working directory. For empty array, clears the selected files.\n\nThis method expects `selector` to point to an [input element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input). However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), targets the control instead.\n\n**Usage**\n\n``` javascript\nawait frame.setInputFiles(selector, files);\nawait frame.setInputFiles(selector, files, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `files` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n  - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    File name\n\n  - `mimeType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    File type\n\n  - `buffer` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\n\n    File content\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### tap[​](#frame-tap \"Direct link to tap\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.tap()](class-locator#locator-tap) instead. Read more about [locators](../locators).\n\nThis method taps an element matching `selector` by performing the following steps:\n\n1.  Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.\n2.  Wait for [actionability](../actionability) checks on the matched element, unless `force` option is set. If the element is detached during the checks, the whole action is retried.\n3.  Scroll the element into view if needed.\n4.  Use [page.touchscreen](class-page#page-touchscreen) to tap the center of the element, or the specified `position`.\n\nWhen all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror \"TimeoutError\"). Passing zero timeout disables this.\n\n> note\n>\n> `frame.tap()` requires that the `hasTouch` option of the browser context be set to true.\n\n**Usage**\n\n``` javascript\nawait frame.tap(selector);\nawait frame.tap(selector, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `modifiers` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<\"Alt\" \\| \"Control\" \\| \"ControlOrMeta\" \\| \"Meta\" \\| \"Shift\"\\> *(optional)*\n\n    Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. \"ControlOrMeta\" resolves to \"Control\" on Windows and Linux and to \"Meta\" on macOS.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### textContent[​](#frame-text-content \"Direct link to textContent\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.textContent()](class-locator#locator-text-content) instead. Read more about [locators](../locators).\n\nReturns `element.textContent`.\n\n**Usage**\n\n``` javascript\nawait frame.textContent(selector);\nawait frame.textContent(selector, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### type[​](#frame-type \"Direct link to type\")\n\nAdded before v1.9\n\n> Deprecated\n>\n> In most cases, you should use [locator.fill()](class-locator#locator-fill) instead. You only need to press keys one by one if there is special keyboard handling on the page - in this case use [locator.pressSequentially()](class-locator#locator-press-sequentially).\n\nSends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the text. `frame.type` can be used to send fine-grained keyboard events. To fill values in form fields, use [frame.fill()](class-frame#frame-fill).\n\nTo press a special key, like `Control` or `ArrowDown`, use [keyboard.press()](class-keyboard#keyboard-press).\n\n**Usage**\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A text to type into a focused element.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to wait between key presses in milliseconds. Defaults to 0.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### uncheck[​](#frame-uncheck \"Direct link to uncheck\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use locator-based [locator.uncheck()](class-locator#locator-uncheck) instead. Read more about [locators](../locators).\n\nThis method checks an element matching `selector` by performing the following steps:\n\n1.  Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.\n2.  Ensure that matched element is a checkbox or a radio input. If not, this method throws. If the element is already unchecked, this method returns immediately.\n3.  Wait for [actionability](../actionability) checks on the matched element, unless `force` option is set. If the element is detached during the checks, the whole action is retried.\n4.  Scroll the element into view if needed.\n5.  Use [page.mouse](class-page#page-mouse) to click in the center of the element.\n6.  Ensure that the element is now unchecked. If not, this method throws.\n\nWhen all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror \"TimeoutError\"). Passing zero timeout disables this.\n\n**Usage**\n\n``` javascript\nawait frame.uncheck(selector);\nawait frame.uncheck(selector, options);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### waitForNavigation[​](#frame-wait-for-navigation \"Direct link to waitForNavigation\")\n\nAdded before v1.9\n\n> Deprecated\n>\n> This method is inherently racy, please use [frame.waitForURL()](class-frame#frame-wait-for-url) instead.\n\nWaits for the frame navigation and returns the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with `null`.\n\n**Usage**\n\nThis method waits for the frame to navigate to a new URL. It is useful for when you run code which will indirectly cause the frame to navigate. Consider this example:\n\n``` javascript\n// Start waiting for navigation before clicking. Note no await.\nconst navigationPromise = page.waitForNavigation();\nawait page.getByText('Navigate after timeout').click();\nawait navigationPromise;\n```\n\n> note\n>\n> Usage of the [History API](https://developer.mozilla.org/en-US/docs/Web/API/History_API) to change the URL is considered a navigation.\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum operation time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `navigationTimeout` option in the config, or by using the [browserContext.setDefaultNavigationTimeout()](class-browsercontext#browser-context-set-default-navigation-timeout), [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout), [page.setDefaultNavigationTimeout()](class-page#page-set-default-navigation-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") \\| [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([URL](https://nodejs.org/api/url.html \"URL\")):[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    A glob pattern, regex pattern or predicate receiving [URL](https://nodejs.org/api/url.html \"URL\") to match while waiting for the navigation. Note that if the parameter is a string without wildcard characters, the method will wait for navigation to URL that is exactly equal to the string.\n\n  - `waitUntil` \"load\" \\| \"domcontentloaded\" \\| \"networkidle\" \\| \"commit\" *(optional)*\n\n    When to consider operation succeeded, defaults to `load`. Events can be either:\n\n    - `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.\n    - `'load'` - consider operation to be finished when the `load` event is fired.\n    - `'networkidle'` - **DISCOURAGED** consider operation to be finished when there are no network connections for at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.\n    - `'commit'` - consider operation to be finished when network response is received and the document started loading.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Response](class-response \"Response\")\\>\n\n### waitForSelector[​](#frame-wait-for-selector \"Direct link to waitForSelector\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Use web assertions that assert visibility or a locator-based [locator.waitFor()](class-locator#locator-wait-for) instead. Read more about [locators](../locators).\n\nReturns when element specified by selector satisfies `state` option. Returns `null` if waiting for `hidden` or `detached`.\n\n> note\n>\n> Playwright automatically waits for element to be ready before performing an action. Using [Locator](class-locator \"Locator\") objects and web-first assertions make the code wait-for-selector-free.\n\nWait for the `selector` to satisfy `state` option (either appear/disappear from dom, or become visible/hidden). If at the moment of calling the method `selector` already satisfies the condition, the method will return immediately. If the selector doesn't satisfy the condition for the `timeout` milliseconds, the function will throw.\n\n**Usage**\n\nThis method works across navigations:\n\n``` javascript\nconst { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.\n\n(async () => {\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n  for (const currentURL of ['https://google.com', 'https://bbc.com']) {\n    await page.goto(currentURL);\n    const element = await page.mainFrame().waitForSelector('img');\n    console.log('Loaded image: ' + await element.getAttribute('src'));\n  }\n  await browser.close();\n})();\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to query for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `state` \"attached\" \\| \"detached\" \\| \"visible\" \\| \"hidden\" *(optional)*\n\n    Defaults to `'visible'`. Can be either:\n\n    - `'attached'` - wait for element to be present in DOM.\n    - `'detached'` - wait for element to not be present in DOM.\n    - `'visible'` - wait for element to have non-empty bounding box and no `visibility:hidden`. Note that element without any content or with `display:none` has an empty bounding box and is not considered visible.\n    - `'hidden'` - wait for element to be either detached from DOM, or have an empty bounding box or `visibility:hidden`. This is opposite to the `'visible'` option.\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [ElementHandle](class-elementhandle \"ElementHandle\")\\>\n\n### waitForTimeout[​](#frame-wait-for-timeout \"Direct link to waitForTimeout\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Never wait for timeout in production. Tests that wait for time are inherently flaky. Use [Locator](class-locator \"Locator\") actions and web assertions that wait automatically.\n\nWaits for the given `timeout` in milliseconds.\n\nNote that `frame.waitForTimeout()` should only be used for debugging. Tests using the timer in production are going to be flaky. Use signals such as network events, selectors becoming visible and others instead.\n\n**Usage**\n\n``` javascript\nawait frame.waitForTimeout(timeout);\n```\n\n**Arguments**\n\n- `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  A timeout to wait for\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-frame](https://playwright.dev/docs/api/class-frame)"
- name: frame.$
  id: api/class-frame#frame-query-selector
  summary: Use locator-based frame.locator() instead
  belongs_to: Frame
  description: |-
    ### $[​](#frame-query-selector "Direct link to $")

    > Discouraged
    >
    > Use locator-based [frame.locator()](class-frame#frame-locator) instead. Read more about [locators](../locators).

    Returns the ElementHandle pointing to the frame element.

    > caution
    >
    > The use of [ElementHandle](class-elementhandle "ElementHandle") is discouraged, use [Locator](class-locator "Locator") objects and web-first assertions instead.

    The method finds an element matching the specified selector within the frame. If no elements match the selector, returns `null`.

    **Usage**

    ``` javascript
    await frame.$(selector);
    await frame.$(selector, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to query for.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [ElementHandle](class-elementhandle "ElementHandle")\>

    &nbsp;
- name: frame.$$
  id: api/class-frame#frame-query-selector-all
  summary: Use locator-based frame.locator() instead
  belongs_to: Frame
  description: |-
    ### $$[​](#frame-query-selector-all "Direct link to $$")

    > Discouraged
    >
    > Use locator-based [frame.locator()](class-frame#frame-locator) instead. Read more about [locators](../locators).

    Returns the ElementHandles pointing to the frame elements.

    > caution
    >
    > The use of [ElementHandle](class-elementhandle "ElementHandle") is discouraged, use [Locator](class-locator "Locator") objects instead.

    The method finds all elements matching the specified selector within the frame. If no elements match the selector, returns empty array.

    **Usage**

    ``` javascript
    await frame.$$(selector);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to query for.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[ElementHandle](class-elementhandle "ElementHandle")\>\>

    &nbsp;
- name: frame.$$eval
  id: api/class-frame#frame-eval-on-selector-all
  summary: In most cases, locator.evaluateAll(), other Locator helper methods and web-first assertions do a better job
  belongs_to: Frame
  description: |-
    ### $$eval[​](#frame-eval-on-selector-all "Direct link to $$eval")

    > Discouraged
    >
    > In most cases, [locator.evaluateAll()](class-locator#locator-evaluate-all), other [Locator](class-locator "Locator") helper methods and web-first assertions do a better job.

    Returns the return value of `pageFunction`.

    The method finds all elements matching the specified selector within the frame and passes an array of matched elements as a first argument to `pageFunction`.

    If `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [frame.$$eval()](class-frame#frame-eval-on-selector-all) would wait for the promise to resolve and return its value.

    **Usage**

    ``` javascript
    const divsCounts = await frame.$$eval('div', (divs, min) => divs.length >= min, 10);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to query for.

    - `pageFunction`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Element](https://developer.mozilla.org/en-US/docs/Web/API/element "Element")\>) \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Function to be evaluated in the page context.

    - `arg` [EvaluationArgument](../evaluating#evaluation-argument "EvaluationArgument") *(optional)*

      Optional argument to pass to `pageFunction`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>

    &nbsp;
- name: frame.$eval
  id: api/class-frame#frame-eval-on-selector
  summary: This method does not wait for the element to pass the actionability checks and therefore can lead to the flaky tests
  belongs_to: Frame
  description: |-
    ### $eval[​](#frame-eval-on-selector "Direct link to $eval")

    > Discouraged
    >
    > This method does not wait for the element to pass the actionability checks and therefore can lead to the flaky tests. Use [locator.evaluate()](class-locator#locator-evaluate), other [Locator](class-locator "Locator") helper methods or web-first assertions instead.

    Returns the return value of `pageFunction`.

    The method finds an element matching the specified selector within the frame and passes it as a first argument to `pageFunction`. If no elements match the selector, the method throws an error.

    If `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [frame.$eval()](class-frame#frame-eval-on-selector) would wait for the promise to resolve and return its value.

    **Usage**

    ``` javascript
    const searchValue = await frame.$eval('#search', el => el.value);
    const preloadHref = await frame.$eval('link[rel=preload]', el => el.href);
    const html = await frame.$eval('.main-container', (e, suffix) => e.outerHTML + suffix, 'hello');
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to query for.

    - `pageFunction`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Element](https://developer.mozilla.org/en-US/docs/Web/API/element "Element")) \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Function to be evaluated in the page context.

    - `arg` [EvaluationArgument](../evaluating#evaluation-argument "EvaluationArgument") *(optional)*

      Optional argument to pass to `pageFunction`.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>

    &nbsp;
- name: frame.addScriptTag
  id: api/class-frame#frame-add-script-tag
  summary: Returns the added tag when the script's onload fires or when the script content was injected into frame
  belongs_to: Frame
  description: |-
    ### addScriptTag[​](#frame-add-script-tag "Direct link to addScriptTag")

    Added before v1.9

    Returns the added tag when the script's onload fires or when the script content was injected into frame.

    Adds a `<script>` tag into the page with the desired url or content.

    **Usage**

    ``` javascript
    await frame.addScriptTag();
    await frame.addScriptTag(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `content` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Raw JavaScript content to be injected into frame.

      - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Path to the JavaScript file to be injected into frame. If `path` is a relative path, then it is resolved relative to the current working directory.

      - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Script type. Use 'module' in order to load a JavaScript ES6 module. See [script](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script) for more details.

      - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        URL of a script to be added.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[ElementHandle](class-elementhandle "ElementHandle")\>
- name: frame.addStyleTag
  id: api/class-frame#frame-add-style-tag
  summary: Returns the added tag when the stylesheet's onload fires or when the CSS content was injected into frame
  belongs_to: Frame
  description: |-
    ### addStyleTag[​](#frame-add-style-tag "Direct link to addStyleTag")

    Added before v1.9

    Returns the added tag when the stylesheet's onload fires or when the CSS content was injected into frame.

    Adds a `<link rel="stylesheet">` tag into the page with the desired url or a `<style type="text/css">` tag with the content.

    **Usage**

    ``` javascript
    await frame.addStyleTag();
    await frame.addStyleTag(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `content` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Raw CSS content to be injected into frame.

      - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Path to the CSS file to be injected into frame. If `path` is a relative path, then it is resolved relative to the current working directory.

      - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        URL of the `<link>` tag.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[ElementHandle](class-elementhandle "ElementHandle")\>

    &nbsp;
- name: frame.check
  id: api/class-frame#frame-check
  summary: Use locator-based locator.check() instead
  belongs_to: Frame
  description: |-
    ### check[​](#frame-check "Direct link to check")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.check()](class-locator#locator-check) instead. Read more about [locators](../locators).

    This method checks an element matching `selector` by performing the following steps:

    1.  Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.
    2.  Ensure that matched element is a checkbox or a radio input. If not, this method throws. If the element is already checked, this method returns immediately.
    3.  Wait for [actionability](../actionability) checks on the matched element, unless `force` option is set. If the element is detached during the checks, the whole action is retried.
    4.  Scroll the element into view if needed.
    5.  Use [page.mouse](class-page#page-mouse) to click in the center of the element.
    6.  Ensure that the element is now checked. If not, this method throws.

    When all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror "TimeoutError"). Passing zero timeout disables this.

    **Usage**

    ``` javascript
    await frame.check(selector);
    await frame.check(selector, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: frame.childFrames
  id: api/class-frame#frame-child-frames
  summary: null
  belongs_to: Frame
  description: |-
    ### childFrames[​](#frame-child-frames "Direct link to childFrames")

    Added before v1.9

    **Usage**

    ``` javascript
    frame.childFrames();
    ```

    **Returns**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Frame](class-frame "Frame")\>

    &nbsp;
- name: frame.click
  id: api/class-frame#frame-click
  summary: Use locator-based locator.click() instead
  belongs_to: Frame
  description: |-
    ### click[​](#frame-click "Direct link to click")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.click()](class-locator#locator-click) instead. Read more about [locators](../locators).

    This method clicks an element matching `selector` by performing the following steps:

    1.  Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.
    2.  Wait for [actionability](../actionability) checks on the matched element, unless `force` option is set. If the element is detached during the checks, the whole action is retried.
    3.  Scroll the element into view if needed.
    4.  Use [page.mouse](class-page#page-mouse) to click in the center of the element, or the specified `position`.
    5.  Wait for initiated navigations to either succeed or fail, unless `noWaitAfter` option is set.

    When all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror "TimeoutError"). Passing zero timeout disables this.

    **Usage**

    ``` javascript
    await frame.click(selector);
    await frame.click(selector, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `button` "left" \| "right" \| "middle" *(optional)*

        Defaults to `left`.

      - `clickCount` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail "UIEvent.detail").

      - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.

      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `modifiers`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<"Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\> *(optional)*

        Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option will default to `true` in the future.

        Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.

      - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: frame.content
  id: api/class-frame#frame-content
  summary: Gets the full HTML contents of the frame, including the doctype
  belongs_to: Frame
  description: |-
    ### content[​](#frame-content "Direct link to content")

    Added before v1.9

    Gets the full HTML contents of the frame, including the doctype.

    **Usage**

    ``` javascript
    await frame.content();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: frame.dblclick
  id: api/class-frame#frame-dblclick
  summary: Use locator-based locator.dblclick() instead
  belongs_to: Frame
  description: |-
    ### dblclick[​](#frame-dblclick "Direct link to dblclick")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.dblclick()](class-locator#locator-dblclick) instead. Read more about [locators](../locators).

    This method double clicks an element matching `selector` by performing the following steps:

    1.  Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.
    2.  Wait for [actionability](../actionability) checks on the matched element, unless `force` option is set. If the element is detached during the checks, the whole action is retried.
    3.  Scroll the element into view if needed.
    4.  Use [page.mouse](class-page#page-mouse) to double click in the center of the element, or the specified `position`. if the first click of the `dblclick()` triggers a navigation event, this method will throw.

    When all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror "TimeoutError"). Passing zero timeout disables this.

    > note
    >
    > `frame.dblclick()` dispatches two `click` events and a single `dblclick` event.

    **Usage**

    ``` javascript
    await frame.dblclick(selector);
    await frame.dblclick(selector, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `button` "left" \| "right" \| "middle" *(optional)*

        Defaults to `left`.

      - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.

      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `modifiers`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<"Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\> *(optional)*

        Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: frame.dispatchEvent
  id: api/class-frame#frame-dispatch-event
  summary: Use locator-based locator.dispatchEvent() instead
  belongs_to: Frame
  description: |-
    ### dispatchEvent[​](#frame-dispatch-event "Direct link to dispatchEvent")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.dispatchEvent()](class-locator#locator-dispatch-event) instead. Read more about [locators](../locators).

    The snippet below dispatches the `click` event on the element. Regardless of the visibility state of the element, `click` is dispatched. This is equivalent to calling [element.click()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click).

    **Usage**

    ``` javascript
    await frame.dispatchEvent('button#submit', 'click');
    ```

    Under the hood, it creates an instance of an event based on the given `type`, initializes it with `eventInit` properties and dispatches it on the element. Events are `composed`, `cancelable` and bubble by default.

    Since `eventInit` is event-specific, please refer to the events documentation for the lists of initial properties:

    - [DeviceMotionEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/DeviceMotionEvent)
    - [DeviceOrientationEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/DeviceOrientationEvent)
    - [DragEvent](https://developer.mozilla.org/en-US/docs/Web/API/DragEvent/DragEvent)
    - [Event](https://developer.mozilla.org/en-US/docs/Web/API/Event/Event)
    - [FocusEvent](https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/FocusEvent)
    - [KeyboardEvent](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent)
    - [MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent)
    - [PointerEvent](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/PointerEvent)
    - [TouchEvent](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/TouchEvent)
    - [WheelEvent](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/WheelEvent)

    You can also specify `JSHandle` as the property value if you want live objects to be passed into the event:

    ``` javascript
    // Note you can only create DataTransfer in Chromium and Firefox
    const dataTransfer = await frame.evaluateHandle(() => new DataTransfer());
    await frame.dispatchEvent('#source', 'dragstart', { dataTransfer });
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      DOM event type: `"click"`, `"dragstart"`, etc.

    - `eventInit` [EvaluationArgument](../evaluating#evaluation-argument "EvaluationArgument") *(optional)*

      Optional event-specific initialization properties.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: frame.dragAndDrop
  id: api/class-frame#frame-drag-and-drop
  summary: A selector to search for an element to drag
  belongs_to: Frame
  description: |-
    ### dragAndDrop[​](#frame-drag-and-drop "Direct link to dragAndDrop")

    **Usage**

    ``` javascript
    await frame.dragAndDrop(source, target);
    await frame.dragAndDrop(source, target, options);
    ```

    **Arguments**

    - `source` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element to drag. If there are multiple elements satisfying the selector, the first will be used.

    - `target` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element to drop onto. If there are multiple elements satisfying the selector, the first will be used.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `sourcePosition` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Clicks on the source element at this point relative to the top-left corner of the element's padding box. If not specified, some visible point of the element is used.

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `targetPosition` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Drops on the target element at this point relative to the top-left corner of the element's padding box. If not specified, some visible point of the element is used.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: frame.evaluate
  id: api/class-frame#frame-evaluate
  summary: Returns the return value of pageFunction
  belongs_to: Frame
  description: |-
    ### evaluate[​](#frame-evaluate "Direct link to evaluate")

    Added before v1.9

    Returns the return value of `pageFunction`.

    If the function passed to the [frame.evaluate()](class-frame#frame-evaluate) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [frame.evaluate()](class-frame#frame-evaluate) would wait for the promise to resolve and return its value.

    If the function passed to the [frame.evaluate()](class-frame#frame-evaluate) returns a non-[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") value, then [frame.evaluate()](class-frame#frame-evaluate) returns `undefined`. Playwright also supports transferring some additional values that are not serializable by `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`.

    **Usage**

    ``` javascript
    const result = await frame.evaluate(([x, y]) => {
      return Promise.resolve(x * y);
    }, [7, 8]);
    console.log(result); // prints "56"
    ```

    A string can also be passed in instead of a function.

    ``` javascript
    console.log(await frame.evaluate('1 + 2')); // prints "3"
    ```

    [ElementHandle](class-elementhandle "ElementHandle") instances can be passed as an argument to the [frame.evaluate()](class-frame#frame-evaluate):

    ``` javascript
    const bodyHandle = await frame.evaluate('document.body');
    const html = await frame.evaluate(([body, suffix]) =>
      body.innerHTML + suffix, [bodyHandle, 'hello'],
    );
    await bodyHandle.dispose();
    ```

    **Arguments**

    - `pageFunction`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Function to be evaluated in the page context.

    - `arg` [EvaluationArgument](../evaluating#evaluation-argument "EvaluationArgument") *(optional)*

      Optional argument to pass to `pageFunction`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>

    &nbsp;
- name: frame.evaluateHandle
  id: api/class-frame#frame-evaluate-handle
  summary: Returns the return value of pageFunction as a JSHandle
  belongs_to: Frame
  description: |-
    ### evaluateHandle[​](#frame-evaluate-handle "Direct link to evaluateHandle")

    Added before v1.9

    Returns the return value of `pageFunction` as a [JSHandle](class-jshandle "JSHandle").

    The only difference between [frame.evaluate()](class-frame#frame-evaluate) and [frame.evaluateHandle()](class-frame#frame-evaluate-handle) is that [frame.evaluateHandle()](class-frame#frame-evaluate-handle) returns [JSHandle](class-jshandle "JSHandle").

    If the function, passed to the [frame.evaluateHandle()](class-frame#frame-evaluate-handle), returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [frame.evaluateHandle()](class-frame#frame-evaluate-handle) would wait for the promise to resolve and return its value.

    **Usage**

    ``` javascript
    // Handle for the window object
    const aWindowHandle = await frame.evaluateHandle(() => Promise.resolve(window));
    ```

    A string can also be passed in instead of a function.

    ``` javascript
    const aHandle = await frame.evaluateHandle('document'); // Handle for the 'document'.
    ```

    [JSHandle](class-jshandle "JSHandle") instances can be passed as an argument to the [frame.evaluateHandle()](class-frame#frame-evaluate-handle):

    ``` javascript
    const aHandle = await frame.evaluateHandle(() => document.body);
    const resultHandle = await frame.evaluateHandle(([body, suffix]) =>
      body.innerHTML + suffix, [aHandle, 'hello'],
    );
    console.log(await resultHandle.jsonValue());
    await resultHandle.dispose();
    ```

    **Arguments**

    - `pageFunction`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Function to be evaluated in the page context.

    - `arg` [EvaluationArgument](../evaluating#evaluation-argument "EvaluationArgument") *(optional)*

      Optional argument to pass to `pageFunction`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[JSHandle](class-jshandle "JSHandle")\>

    &nbsp;
- name: frame.fill
  id: api/class-frame#frame-fill
  summary: Use locator-based locator.fill() instead
  belongs_to: Frame
  description: |-
    ### fill[​](#frame-fill "Direct link to fill")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.fill()](class-locator#locator-fill) instead. Read more about [locators](../locators).

    This method waits for an element matching `selector`, waits for [actionability](../actionability) checks, focuses the element, fills it and triggers an `input` event after filling. Note that you can pass an empty string to clear the input field.

    If the target element is not an `<input>`, `<textarea>` or `[contenteditable]` element, this method throws an error. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be filled instead.

    To send fine-grained keyboard events, use [locator.pressSequentially()](class-locator#locator-press-sequentially).

    **Usage**

    ``` javascript
    await frame.fill(selector, value);
    await frame.fill(selector, value, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Value to fill for the `<input>`, `<textarea>` or `[contenteditable]` element.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: frame.focus
  id: api/class-frame#frame-focus
  summary: Use locator-based locator.focus() instead
  belongs_to: Frame
  description: |-
    ### focus[​](#frame-focus "Direct link to focus")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.focus()](class-locator#locator-focus) instead. Read more about [locators](../locators).

    This method fetches an element with `selector` and focuses it. If there's no element matching `selector`, the method waits until a matching element appears in the DOM.

    **Usage**

    ``` javascript
    await frame.focus(selector);
    await frame.focus(selector, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: frame.frameElement
  id: api/class-frame#frame-frame-element
  summary: Returns the frame or iframe element handle which corresponds to this frame
  belongs_to: Frame
  description: |-
    ### frameElement[​](#frame-frame-element "Direct link to frameElement")

    Added before v1.9

    Returns the `frame` or `iframe` element handle which corresponds to this frame.

    This is an inverse of [elementHandle.contentFrame()](class-elementhandle#element-handle-content-frame). Note that returned handle actually belongs to the parent frame.

    This method throws an error if the frame has been detached before `frameElement()` returns.

    **Usage**

    ``` javascript
    const frameElement = await frame.frameElement();
    const contentFrame = await frameElement.contentFrame();
    console.log(frame === contentFrame);  // -> true
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[ElementHandle](class-elementhandle "ElementHandle")\>

    &nbsp;
- name: frame.frameLocator
  id: api/class-frame#frame-frame-locator
  summary: When working with iframes, you can create a frame locator that will enter the iframe and allow selecting elements in that iframe
  belongs_to: Frame
  description: |-
    ### frameLocator[​](#frame-frame-locator "Direct link to frameLocator")

    When working with iframes, you can create a frame locator that will enter the iframe and allow selecting elements in that iframe.

    **Usage**

    Following snippet locates element with text "Submit" in the iframe with id `my-frame`, like `<iframe id="my-frame">`:

    ``` javascript
    const locator = frame.frameLocator('#my-iframe').getByText('Submit');
    await locator.click();
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to use when resolving DOM element.

    **Returns**

    - [FrameLocator](class-framelocator "FrameLocator")

    &nbsp;
- name: frame.getAttribute
  id: api/class-frame#frame-get-attribute
  summary: Use locator-based locator.getAttribute() instead
  belongs_to: Frame
  description: |-
    ### getAttribute[​](#frame-get-attribute "Direct link to getAttribute")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.getAttribute()](class-locator#locator-get-attribute) instead. Read more about [locators](../locators).

    Returns element attribute value.

    **Usage**

    ``` javascript
    await frame.getAttribute(selector, name);
    await frame.getAttribute(selector, name, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Attribute name to get the value for.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: frame.getByAltText
  id: api/class-frame#frame-get-by-alt-text
  summary: Allows locating elements by their alt text
  belongs_to: Frame
  description: |-
    ### getByAltText[​](#frame-get-by-alt-text "Direct link to getByAltText")

    Allows locating elements by their alt text.

    **Usage**

    For example, this method will find the image by alt text "Playwright logo":

    ``` html
    <img alt='Playwright logo'>
    ```

    ``` javascript
    await page.getByAltText('Playwright logo').click();
    ```

    **Arguments**

    - `text`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Text to locate the element for.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: frame.getByLabel
  id: api/class-frame#frame-get-by-label
  summary: Allows locating input elements by the text of the associated <label> or aria-labelledby element, or by the aria-label attribute
  belongs_to: Frame
  description: |-
    ### getByLabel[​](#frame-get-by-label "Direct link to getByLabel")

    Allows locating input elements by the text of the associated `<label>` or `aria-labelledby` element, or by the `aria-label` attribute.

    **Usage**

    For example, this method will find inputs by label "Username" and "Password" in the following DOM:

    ``` html
    <input aria-label="Username">
    <label for="password-input">Password:</label>
    <input id="password-input">
    ```

    ``` javascript
    await page.getByLabel('Username').fill('john');
    await page.getByLabel('Password').fill('secret');
    ```

    **Arguments**

    - `text`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Text to locate the element for.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: frame.getByPlaceholder
  id: api/class-frame#frame-get-by-placeholder
  summary: Allows locating input elements by the placeholder text
  belongs_to: Frame
  description: |-
    ### getByPlaceholder[​](#frame-get-by-placeholder "Direct link to getByPlaceholder")

    Allows locating input elements by the placeholder text.

    **Usage**

    For example, consider the following DOM structure.

    ``` html
    <input type="email" placeholder="name@example.com" />
    ```

    You can fill the input after locating it by the placeholder text:

    ``` javascript
    await page
        .getByPlaceholder('name@example.com')
        .fill('playwright@microsoft.com');
    ```

    **Arguments**

    - `text`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Text to locate the element for.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: frame.getByRole
  id: api/class-frame#frame-get-by-role
  summary: Allows locating elements by their ARIA role, ARIA attributes and accessible name
  belongs_to: Frame
  description: |-
    ### getByRole[​](#frame-get-by-role "Direct link to getByRole")

    Allows locating elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).

    **Usage**

    Consider the following DOM structure.

    ``` html
    <h3>Sign up</h3>
    <label>
      <input type="checkbox" /> Subscribe
    </label>
    <br/>
    <button>Submit</button>
    ```

    You can locate each element by it's implicit role:

    ``` javascript
    await expect(page.getByRole('heading', { name: 'Sign up' })).toBeVisible();

    await page.getByRole('checkbox', { name: 'Subscribe' }).check();

    await page.getByRole('button', { name: /submit/i }).click();
    ```

    **Arguments**

    - `role` "alert" \| "alertdialog" \| "application" \| "article" \| "banner" \| "blockquote" \| "button" \| "caption" \| "cell" \| "checkbox" \| "code" \| "columnheader" \| "combobox" \| "complementary" \| "contentinfo" \| "definition" \| "deletion" \| "dialog" \| "directory" \| "document" \| "emphasis" \| "feed" \| "figure" \| "form" \| "generic" \| "grid" \| "gridcell" \| "group" \| "heading" \| "img" \| "insertion" \| "link" \| "list" \| "listbox" \| "listitem" \| "log" \| "main" \| "marquee" \| "math" \| "meter" \| "menu" \| "menubar" \| "menuitem" \| "menuitemcheckbox" \| "menuitemradio" \| "navigation" \| "none" \| "note" \| "option" \| "paragraph" \| "presentation" \| "progressbar" \| "radio" \| "radiogroup" \| "region" \| "row" \| "rowgroup" \| "rowheader" \| "scrollbar" \| "search" \| "searchbox" \| "separator" \| "slider" \| "spinbutton" \| "status" \| "strong" \| "subscript" \| "superscript" \| "switch" \| "tab" \| "table" \| "tablist" \| "tabpanel" \| "term" \| "textbox" \| "time" \| "timer" \| "toolbar" \| "tooltip" \| "tree" \| "treegrid" \| "treeitem"

      Required aria role.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `checked` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        An attribute that is usually set by `aria-checked` or native `<input type=checkbox>` controls.

        Learn more about [`aria-checked`](https://www.w3.org/TR/wai-aria-1.2/#aria-checked).

      - `disabled` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        An attribute that is usually set by `aria-disabled` or `disabled`.

        > note
        >
        > Unlike most other attributes, `disabled` is inherited through the DOM hierarchy. Learn more about [`aria-disabled`](https://www.w3.org/TR/wai-aria-1.2/#aria-disabled).

      - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether `name` is matched exactly: case-sensitive and whole-string. Defaults to false. Ignored when `name` is a regular expression. Note that exact match still trims whitespace.

      - `expanded` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        An attribute that is usually set by `aria-expanded`.

        Learn more about [`aria-expanded`](https://www.w3.org/TR/wai-aria-1.2/#aria-expanded).

      - `includeHidden` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Option that controls whether hidden elements are matched. By default, only non-hidden elements, as [defined by ARIA](https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion), are matched by role selector.

        Learn more about [`aria-hidden`](https://www.w3.org/TR/wai-aria-1.2/#aria-hidden).

      - `level` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        A number attribute that is usually present for roles `heading`, `listitem`, `row`, `treeitem`, with default values for `<h1>-<h6>` elements.

        Learn more about [`aria-level`](https://www.w3.org/TR/wai-aria-1.2/#aria-level).

      - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") *(optional)*

        Option to match the [accessible name](https://w3c.github.io/accname/#dfn-accessible-name). By default, matching is case-insensitive and searches for a substring, use `exact` to control this behavior.

        Learn more about [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).

      - `pressed` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        An attribute that is usually set by `aria-pressed`.

        Learn more about [`aria-pressed`](https://www.w3.org/TR/wai-aria-1.2/#aria-pressed).

      - `selected` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        An attribute that is usually set by `aria-selected`.

        Learn more about [`aria-selected`](https://www.w3.org/TR/wai-aria-1.2/#aria-selected).

    **Returns**

    - [Locator](class-locator "Locator")

    **Details**

    Role selector **does not replace** accessibility audits and conformance tests, but rather gives early feedback about the ARIA guidelines.

    Many html elements have an implicitly [defined role](https://w3c.github.io/html-aam/#html-element-role-mappings) that is recognized by the role selector. You can find all the [supported roles here](https://www.w3.org/TR/wai-aria-1.2/#role_definitions). ARIA guidelines **do not recommend** duplicating implicit roles and attributes by setting `role` and/or `aria-*` attributes to default values.
- name: frame.getByTestId
  id: api/class-frame#frame-get-by-test-id
  summary: Locate element by the test id
  belongs_to: Frame
  description: |-
    ### getByTestId[​](#frame-get-by-test-id "Direct link to getByTestId")

    Locate element by the test id.

    **Usage**

    Consider the following DOM structure.

    ``` html
    <button data-testid="directions">Itinéraire</button>
    ```

    You can locate the element by it's test id:

    ``` javascript
    await page.getByTestId('directions').click();
    ```

    **Arguments**

    - `testId`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Id to locate the element by.

    **Returns**

    - [Locator](class-locator "Locator")

    **Details**

    By default, the `data-testid` attribute is used as a test id. Use [selectors.setTestIdAttribute()](class-selectors#selectors-set-test-id-attribute) to configure a different test id attribute if necessary.

    ``` javascript
    // Set custom test id attribute from @playwright/test config:
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        testIdAttribute: 'data-pw'
      },
    });
    ```
- name: frame.getByText
  id: api/class-frame#frame-get-by-text
  summary: Allows locating elements that contain given text
  belongs_to: Frame
  description: |-
    ### getByText[​](#frame-get-by-text "Direct link to getByText")

    Allows locating elements that contain given text.

    See also [locator.filter()](class-locator#locator-filter) that allows to match by another criteria, like an accessible role, and then filter by the text content.

    **Usage**

    Consider the following DOM structure:

    ``` html
    <div>Hello <span>world</span></div>
    <div>Hello</div>
    ```

    You can locate by text substring, exact string, or a regular expression:

    ``` javascript
    // Matches <span>
    page.getByText('world');

    // Matches first <div>
    page.getByText('Hello world');

    // Matches second <div>
    page.getByText('Hello', { exact: true });

    // Matches both <div>s
    page.getByText(/Hello/);

    // Matches second <div>
    page.getByText(/^hello$/i);
    ```

    **Arguments**

    - `text`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Text to locate the element for.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.

    **Returns**

    - [Locator](class-locator "Locator")

    **Details**

    Matching by text always normalizes whitespace, even with exact match. For example, it turns multiple spaces into one, turns line breaks into spaces and ignores leading and trailing whitespace.

    Input elements of the type `button` and `submit` are matched by their `value` instead of the text content. For example, locating by text `"Log in"` matches `<input type=button value="Log in">`.
- name: frame.getByTitle
  id: api/class-frame#frame-get-by-title
  summary: Allows locating elements by their title attribute
  belongs_to: Frame
  description: |-
    ### getByTitle[​](#frame-get-by-title "Direct link to getByTitle")

    Allows locating elements by their title attribute.

    **Usage**

    Consider the following DOM structure.

    ``` html
    <span title='Issues count'>25 issues</span>
    ```

    You can check the issues count after locating it by the title text:

    ``` javascript
    await expect(page.getByTitle('Issues count')).toHaveText('25 issues');
    ```

    **Arguments**

    - `text`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Text to locate the element for.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: frame.goto
  id: api/class-frame#frame-goto
  summary: Returns the main resource response
  belongs_to: Frame
  description: |-
    ### goto[​](#frame-goto "Direct link to goto")

    Added before v1.9

    Returns the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect.

    The method will throw an error if:

    - there's an SSL error (e.g. in case of self-signed certificates).
    - target URL is invalid.
    - the `timeout` is exceeded during navigation.
    - the remote server does not respond or is unreachable.
    - the main resource failed to load.

    The method will not throw an error when any valid HTTP status code is returned by the remote server, including 404 "Not Found" and 500 "Internal Server Error". The status code for such responses can be retrieved by calling [response.status()](class-response#response-status).

    > note
    >
    > The method either throws an error or returns a main resource response. The only exceptions are navigation to `about:blank` or navigation to the same URL with a different hash, which would succeed and return `null`.

    > note
    >
    > Headless mode doesn't support navigation to a PDF document. See the [upstream issue](https://bugs.chromium.org/p/chromium/issues/detail?id=761295).

    **Usage**

    ``` javascript
    await frame.goto(url);
    await frame.goto(url, options);
    ```

    **Arguments**

    - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      URL to navigate frame to. The url should include scheme, e.g. `https://`.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `referer` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Referer header value. If provided it will take preference over the referer header value set by [page.setExtraHTTPHeaders()](class-page#page-set-extra-http-headers).

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum operation time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `navigationTimeout` option in the config, or by using the [browserContext.setDefaultNavigationTimeout()](class-browsercontext#browser-context-set-default-navigation-timeout), [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout), [page.setDefaultNavigationTimeout()](class-page#page-set-default-navigation-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `waitUntil` "load" \| "domcontentloaded" \| "networkidle" \| "commit" *(optional)*

        When to consider operation succeeded, defaults to `load`. Events can be either:

        - `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.
        - `'load'` - consider operation to be finished when the `load` event is fired.
        - `'networkidle'` - **DISCOURAGED** consider operation to be finished when there are no network connections for at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
        - `'commit'` - consider operation to be finished when network response is received and the document started loading.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Response](class-response "Response")\>

    &nbsp;
- name: frame.hover
  id: api/class-frame#frame-hover
  summary: Use locator-based locator.hover() instead
  belongs_to: Frame
  description: |-
    ### hover[​](#frame-hover "Direct link to hover")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.hover()](class-locator#locator-hover) instead. Read more about [locators](../locators).

    This method hovers over an element matching `selector` by performing the following steps:

    1.  Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.
    2.  Wait for [actionability](../actionability) checks on the matched element, unless `force` option is set. If the element is detached during the checks, the whole action is retried.
    3.  Scroll the element into view if needed.
    4.  Use [page.mouse](class-page#page-mouse) to hover over the center of the element, or the specified `position`.

    When all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror "TimeoutError"). Passing zero timeout disables this.

    **Usage**

    ``` javascript
    await frame.hover(selector);
    await frame.hover(selector, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `modifiers`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<"Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\> *(optional)*

        Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: frame.innerHTML
  id: api/class-frame#frame-inner-html
  summary: Use locator-based locator.innerHTML() instead
  belongs_to: Frame
  description: |-
    ### innerHTML[​](#frame-inner-html "Direct link to innerHTML")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.innerHTML()](class-locator#locator-inner-html) instead. Read more about [locators](../locators).

    Returns `element.innerHTML`.

    **Usage**

    ``` javascript
    await frame.innerHTML(selector);
    await frame.innerHTML(selector, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: frame.innerText
  id: api/class-frame#frame-inner-text
  summary: Use locator-based locator.innerText() instead
  belongs_to: Frame
  description: |-
    ### innerText[​](#frame-inner-text "Direct link to innerText")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.innerText()](class-locator#locator-inner-text) instead. Read more about [locators](../locators).

    Returns `element.innerText`.

    **Usage**

    ``` javascript
    await frame.innerText(selector);
    await frame.innerText(selector, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: frame.inputValue
  id: api/class-frame#frame-input-value
  summary: Use locator-based locator.inputValue() instead
  belongs_to: Frame
  description: |-
    ### inputValue[​](#frame-input-value "Direct link to inputValue")

    > Discouraged
    >
    > Use locator-based [locator.inputValue()](class-locator#locator-input-value) instead. Read more about [locators](../locators).

    Returns `input.value` for the selected `<input>` or `<textarea>` or `<select>` element.

    Throws for non-input elements. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), returns the value of the control.

    **Usage**

    ``` javascript
    await frame.inputValue(selector);
    await frame.inputValue(selector, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: frame.isChecked
  id: api/class-frame#frame-is-checked
  summary: Use locator-based locator.isChecked() instead
  belongs_to: Frame
  description: |-
    ### isChecked[​](#frame-is-checked "Direct link to isChecked")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.isChecked()](class-locator#locator-is-checked) instead. Read more about [locators](../locators).

    Returns whether the element is checked. Throws if the element is not a checkbox or radio input.

    **Usage**

    ``` javascript
    await frame.isChecked(selector);
    await frame.isChecked(selector, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    &nbsp;
- name: frame.isDetached
  id: api/class-frame#frame-is-detached
  summary: Returns true if the frame has been detached, or false otherwise
  belongs_to: Frame
  description: |-
    ### isDetached[​](#frame-is-detached "Direct link to isDetached")

    Added before v1.9

    Returns `true` if the frame has been detached, or `false` otherwise.

    **Usage**

    ``` javascript
    frame.isDetached();
    ```

    **Returns**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: frame.isDisabled
  id: api/class-frame#frame-is-disabled
  summary: Use locator-based locator.isDisabled() instead
  belongs_to: Frame
  description: |-
    ### isDisabled[​](#frame-is-disabled "Direct link to isDisabled")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.isDisabled()](class-locator#locator-is-disabled) instead. Read more about [locators](../locators).

    Returns whether the element is disabled, the opposite of [enabled](../actionability#enabled).

    **Usage**

    ``` javascript
    await frame.isDisabled(selector);
    await frame.isDisabled(selector, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    &nbsp;
- name: frame.isEditable
  id: api/class-frame#frame-is-editable
  summary: Use locator-based locator.isEditable() instead
  belongs_to: Frame
  description: |-
    ### isEditable[​](#frame-is-editable "Direct link to isEditable")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.isEditable()](class-locator#locator-is-editable) instead. Read more about [locators](../locators).

    Returns whether the element is [editable](../actionability#editable).

    **Usage**

    ``` javascript
    await frame.isEditable(selector);
    await frame.isEditable(selector, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    &nbsp;
- name: frame.isEnabled
  id: api/class-frame#frame-is-enabled
  summary: Returns whether the element is enabled
  belongs_to: Frame
  description: |-
    ### isEnabled[​](#frame-is-enabled "Direct link to isEnabled")

    Added before v1.9

    Returns whether the element is [enabled](../actionability#enabled).

    **Usage**

    ``` javascript
    await frame.isEnabled(selector);
    await frame.isEnabled(selector, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    &nbsp;
- name: frame.isHidden
  id: api/class-frame#frame-is-hidden
  summary: Use locator-based locator.isHidden() instead
  belongs_to: Frame
  description: |-
    ### isHidden[​](#frame-is-hidden "Direct link to isHidden")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.isHidden()](class-locator#locator-is-hidden) instead. Read more about [locators](../locators).

    Returns whether the element is hidden, the opposite of [visible](../actionability#visible). `selector` that does not match any elements is considered hidden.

    **Usage**

    ``` javascript
    await frame.isHidden(selector);
    await frame.isHidden(selector, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        > Deprecated
        >
        > This option is ignored. [frame.isHidden()](class-frame#frame-is-hidden) does not wait for the element to become hidden and returns immediately.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    &nbsp;
- name: frame.isVisible
  id: api/class-frame#frame-is-visible
  summary: Use locator-based locator.isVisible() instead
  belongs_to: Frame
  description: |-
    ### isVisible[​](#frame-is-visible "Direct link to isVisible")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.isVisible()](class-locator#locator-is-visible) instead. Read more about [locators](../locators).

    Returns whether the element is [visible](../actionability#visible). `selector` that does not match any elements is considered not visible.

    **Usage**

    ``` javascript
    await frame.isVisible(selector);
    await frame.isVisible(selector, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        > Deprecated
        >
        > This option is ignored. [frame.isVisible()](class-frame#frame-is-visible) does not wait for the element to become visible and returns immediately.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    &nbsp;
- name: frame.locator
  id: api/class-frame#frame-locator
  summary: The method returns an element locator that can be used to perform actions on this page / frame
  belongs_to: Frame
  description: |-
    ### locator[​](#frame-locator "Direct link to locator")

    The method returns an element locator that can be used to perform actions on this page / frame. Locator is resolved to the element immediately before performing an action, so a series of actions on the same locator can in fact be performed on different DOM elements. That would happen if the DOM structure between those actions has changed.

    [Learn more about locators](../locators).

    [Learn more about locators](../locators).

    **Usage**

    ``` javascript
    frame.locator(selector);
    frame.locator(selector, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to use when resolving DOM element.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `has` [Locator](class-locator "Locator") *(optional)*

        Narrows down the results of the method to those which contain elements matching this relative locator. For example, `article` that has `text=Playwright` matches `<article><div>Playwright</div></article>`.

        Inner locator **must be relative** to the outer locator and is queried starting with the outer locator match, not the document root. For example, you can find `content` that has `div` in `<article><content><div>Playwright</div></content></article>`. However, looking for `content` that has `article div` will fail, because the inner locator must be relative and should not use any elements outside the `content`.

        Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](class-framelocator "FrameLocator")s.

      - `hasNot` [Locator](class-locator "Locator") *(optional)*

        Matches elements that do not contain an element that matches an inner locator. Inner locator is queried against the outer one. For example, `article` that does not have `div` matches `<article><span>Playwright</span></article>`.

        Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](class-framelocator "FrameLocator")s.

      - `hasNotText`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") *(optional)*

        Matches elements that do not contain specified text somewhere inside, possibly in a child or a descendant element. When passed a [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), matching is case-insensitive and searches for a substring.

      - `hasText`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") *(optional)*

        Matches elements containing specified text somewhere inside, possibly in a child or a descendant element. When passed a [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), matching is case-insensitive and searches for a substring. For example, `"Playwright"` matches `<article><div>Playwright</div></article>`.

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: frame.name
  id: api/class-frame#frame-name
  summary: Returns frame's name attribute as specified in the tag
  belongs_to: Frame
  description: |-
    ### name[​](#frame-name "Direct link to name")

    Added before v1.9

    Returns frame's name attribute as specified in the tag.

    If the name is empty, returns the id attribute instead.

    > note
    >
    > This value is calculated once when the frame is created, and will not update if the attribute is changed later.

    **Usage**

    ``` javascript
    frame.name();
    ```

    **Returns**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: frame.page
  id: api/class-frame#frame-page
  summary: Returns the page containing this frame
  belongs_to: Frame
  description: |-
    ### page[​](#frame-page "Direct link to page")

    Added before v1.9

    Returns the page containing this frame.

    **Usage**

    ``` javascript
    frame.page();
    ```

    **Returns**

    - [Page](class-page "Page")

    &nbsp;
- name: frame.parentFrame
  id: api/class-frame#frame-parent-frame
  summary: Parent frame, if any
  belongs_to: Frame
  description: |-
    ### parentFrame[​](#frame-parent-frame "Direct link to parentFrame")

    Added before v1.9

    Parent frame, if any. Detached frames and main frames return `null`.

    **Usage**

    ``` javascript
    frame.parentFrame();
    ```

    **Returns**

    - [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Frame](class-frame "Frame")

    &nbsp;
- name: frame.press
  id: api/class-frame#frame-press
  summary: Use locator-based locator.press() instead
  belongs_to: Frame
  description: |-
    ### press[​](#frame-press "Direct link to press")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.press()](class-locator#locator-press) instead. Read more about [locators](../locators).

    `key` can specify the intended [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) value or a single character to generate the text for. A superset of the `key` values can be found [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values). Examples of the keys are:

    `F1` - `F12`, `Digit0`- `Digit9`, `KeyA`- `KeyZ`, `Backquote`, `Minus`, `Equal`, `Backslash`, `Backspace`, `Tab`, `Delete`, `Escape`, `ArrowDown`, `End`, `Enter`, `Home`, `Insert`, `PageDown`, `PageUp`, `ArrowRight`, `ArrowUp`, etc.

    Following modification shortcuts are also supported: `Shift`, `Control`, `Alt`, `Meta`, `ShiftLeft`, `ControlOrMeta`. `ControlOrMeta` resolves to `Control` on Windows and Linux and to `Meta` on macOS.

    Holding down `Shift` will type the text that corresponds to the `key` in the upper case.

    If `key` is a single character, it is case-sensitive, so the values `a` and `A` will generate different respective texts.

    Shortcuts such as `key: "Control+o"`, `key: "Control++` or `key: "Control+Shift+T"` are supported as well. When specified with the modifier, modifier is pressed and being held while the subsequent key is being pressed.

    **Usage**

    ``` javascript
    await frame.press(selector, key);
    await frame.press(selector, key, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `key` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option will default to `true` in the future.

        Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: frame.selectOption
  id: api/class-frame#frame-select-option
  summary: Use locator-based locator.selectOption() instead
  belongs_to: Frame
  description: |-
    ### selectOption[​](#frame-select-option "Direct link to selectOption")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.selectOption()](class-locator#locator-select-option) instead. Read more about [locators](../locators).

    This method waits for an element matching `selector`, waits for [actionability](../actionability) checks, waits until all specified options are present in the `<select>` element and selects these options.

    If the target element is not a `<select>` element, this method throws an error. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be used instead.

    Returns the array of option values that have been successfully selected.

    Triggers a `change` and `input` event once all the provided options have been selected.

    **Usage**

    ``` javascript
    // Single selection matching the value or label
    frame.selectOption('select#colors', 'blue');

    // single selection matching both the value and the label
    frame.selectOption('select#colors', { label: 'Blue' });

    // multiple selection
    frame.selectOption('select#colors', 'red', 'green', 'blue');
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to query for.

    - `values`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [ElementHandle](class-elementhandle "ElementHandle") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[ElementHandle](class-elementhandle "ElementHandle")\> \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>

      - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Matches by `option.value`. Optional.

      - `label` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Matches by `option.label`. Optional.

      - `index` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Matches by the index. Optional.

      Options to select. If the `<select>` has the `multiple` attribute, all matching options are selected, otherwise only the first option matching one of the passed options is selected. String values are matching both values and labels. Option is considered matching if all specified properties match.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option will default to `true` in the future.

        Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>\>

    &nbsp;
- name: frame.setChecked
  id: api/class-frame#frame-set-checked
  summary: Use locator-based locator.setChecked() instead
  belongs_to: Frame
  description: |-
    ### setChecked[​](#frame-set-checked "Direct link to setChecked")

    > Discouraged
    >
    > Use locator-based [locator.setChecked()](class-locator#locator-set-checked) instead. Read more about [locators](../locators).

    This method checks or unchecks an element matching `selector` by performing the following steps:

    1.  Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.
    2.  Ensure that matched element is a checkbox or a radio input. If not, this method throws.
    3.  If the element already has the right checked state, this method returns immediately.
    4.  Wait for [actionability](../actionability) checks on the matched element, unless `force` option is set. If the element is detached during the checks, the whole action is retried.
    5.  Scroll the element into view if needed.
    6.  Use [page.mouse](class-page#page-mouse) to click in the center of the element.
    7.  Ensure that the element is now checked or unchecked. If not, this method throws.

    When all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror "TimeoutError"). Passing zero timeout disables this.

    **Usage**

    ``` javascript
    await frame.setChecked(selector, checked);
    await frame.setChecked(selector, checked, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `checked` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

      Whether to check or uncheck the checkbox.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: frame.setContent
  id: api/class-frame#frame-set-content
  summary: This method internally calls document.write(), inheriting all its specific characteristics and behaviors
  belongs_to: Frame
  description: |-
    ### setContent[​](#frame-set-content "Direct link to setContent")

    Added before v1.9

    This method internally calls [document.write()](https://developer.mozilla.org/en-US/docs/Web/API/Document/write), inheriting all its specific characteristics and behaviors.

    **Usage**

    ``` javascript
    await frame.setContent(html);
    await frame.setContent(html, options);
    ```

    **Arguments**

    - `html` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      HTML markup to assign to the page.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum operation time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `navigationTimeout` option in the config, or by using the [browserContext.setDefaultNavigationTimeout()](class-browsercontext#browser-context-set-default-navigation-timeout), [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout), [page.setDefaultNavigationTimeout()](class-page#page-set-default-navigation-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `waitUntil` "load" \| "domcontentloaded" \| "networkidle" \| "commit" *(optional)*

        When to consider operation succeeded, defaults to `load`. Events can be either:

        - `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.
        - `'load'` - consider operation to be finished when the `load` event is fired.
        - `'networkidle'` - **DISCOURAGED** consider operation to be finished when there are no network connections for at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
        - `'commit'` - consider operation to be finished when network response is received and the document started loading.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: frame.setInputFiles
  id: api/class-frame#frame-set-input-files
  summary: Use locator-based locator.setInputFiles() instead
  belongs_to: Frame
  description: |-
    ### setInputFiles[​](#frame-set-input-files "Direct link to setInputFiles")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.setInputFiles()](class-locator#locator-set-input-files) instead. Read more about [locators](../locators).

    Sets the value of the file input to these file paths or files. If some of the `filePaths` are relative paths, then they are resolved relative to the current working directory. For empty array, clears the selected files.

    This method expects `selector` to point to an [input element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input). However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), targets the control instead.

    **Usage**

    ``` javascript
    await frame.setInputFiles(selector, files);
    await frame.setInputFiles(selector, files, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `files`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>

      - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        File name

      - `mimeType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        File type

      - `buffer` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")

        File content

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: frame.tap
  id: api/class-frame#frame-tap
  summary: Use locator-based locator.tap() instead
  belongs_to: Frame
  description: |-
    ### tap[​](#frame-tap "Direct link to tap")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.tap()](class-locator#locator-tap) instead. Read more about [locators](../locators).

    This method taps an element matching `selector` by performing the following steps:

    1.  Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.
    2.  Wait for [actionability](../actionability) checks on the matched element, unless `force` option is set. If the element is detached during the checks, the whole action is retried.
    3.  Scroll the element into view if needed.
    4.  Use [page.touchscreen](class-page#page-touchscreen) to tap the center of the element, or the specified `position`.

    When all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror "TimeoutError"). Passing zero timeout disables this.

    > note
    >
    > `frame.tap()` requires that the `hasTouch` option of the browser context be set to true.

    **Usage**

    ``` javascript
    await frame.tap(selector);
    await frame.tap(selector, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `modifiers`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<"Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\> *(optional)*

        Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: frame.textContent
  id: api/class-frame#frame-text-content
  summary: Use locator-based locator.textContent() instead
  belongs_to: Frame
  description: |-
    ### textContent[​](#frame-text-content "Direct link to textContent")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.textContent()](class-locator#locator-text-content) instead. Read more about [locators](../locators).

    Returns `element.textContent`.

    **Usage**

    ``` javascript
    await frame.textContent(selector);
    await frame.textContent(selector, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: frame.title
  id: api/class-frame#frame-title
  summary: Returns the page title
  belongs_to: Frame
  description: |-
    ### title[​](#frame-title "Direct link to title")

    Added before v1.9

    Returns the page title.

    **Usage**

    ``` javascript
    await frame.title();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: frame.type
  id: api/class-frame#frame-type
  summary: In most cases, you should use locator.fill() instead
  belongs_to: Frame
  description: |-
    ### type[​](#frame-type "Direct link to type")

    Added before v1.9

    > Deprecated
    >
    > In most cases, you should use [locator.fill()](class-locator#locator-fill) instead. You only need to press keys one by one if there is special keyboard handling on the page - in this case use [locator.pressSequentially()](class-locator#locator-press-sequentially).

    Sends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the text. `frame.type` can be used to send fine-grained keyboard events. To fill values in form fields, use [frame.fill()](class-frame#frame-fill).

    To press a special key, like `Control` or `ArrowDown`, use [keyboard.press()](class-keyboard#keyboard-press).

    **Usage**

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A text to type into a focused element.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to wait between key presses in milliseconds. Defaults to 0.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: frame.uncheck
  id: api/class-frame#frame-uncheck
  summary: Use locator-based locator.uncheck() instead
  belongs_to: Frame
  description: |-
    ### uncheck[​](#frame-uncheck "Direct link to uncheck")

    Added before v1.9

    > Discouraged
    >
    > Use locator-based [locator.uncheck()](class-locator#locator-uncheck) instead. Read more about [locators](../locators).

    This method checks an element matching `selector` by performing the following steps:

    1.  Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.
    2.  Ensure that matched element is a checkbox or a radio input. If not, this method throws. If the element is already unchecked, this method returns immediately.
    3.  Wait for [actionability](../actionability) checks on the matched element, unless `force` option is set. If the element is detached during the checks, the whole action is retried.
    4.  Scroll the element into view if needed.
    5.  Use [page.mouse](class-page#page-mouse) to click in the center of the element.
    6.  Ensure that the element is now unchecked. If not, this method throws.

    When all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror "TimeoutError"). Passing zero timeout disables this.

    **Usage**

    ``` javascript
    await frame.uncheck(selector);
    await frame.uncheck(selector, options);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element. If there are multiple elements satisfying the selector, the first will be used.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: frame.url
  id: api/class-frame#frame-url
  summary: Returns frame's url
  belongs_to: Frame
  description: |-
    ### url[​](#frame-url "Direct link to url")

    Added before v1.9

    Returns frame's url.

    **Usage**

    ``` javascript
    frame.url();
    ```

    **Returns**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: frame.waitForFunction
  id: api/class-frame#frame-wait-for-function
  summary: Returns when the pageFunction returns a truthy value, returns that value
  belongs_to: Frame
  description: |-
    ### waitForFunction[​](#frame-wait-for-function "Direct link to waitForFunction")

    Added before v1.9

    Returns when the `pageFunction` returns a truthy value, returns that value.

    **Usage**

    The [frame.waitForFunction()](class-frame#frame-wait-for-function) can be used to observe viewport size change:

    ``` javascript
    const { firefox } = require('playwright');  // Or 'chromium' or 'webkit'.

    (async () => {
      const browser = await firefox.launch();
      const page = await browser.newPage();
      const watchDog = page.mainFrame().waitForFunction('window.innerWidth < 100');
      await page.setViewportSize({ width: 50, height: 50 });
      await watchDog;
      await browser.close();
    })();
    ```

    To pass an argument to the predicate of `frame.waitForFunction` function:

    ``` javascript
    const selector = '.foo';
    await frame.waitForFunction(selector => !!document.querySelector(selector), selector);
    ```

    **Arguments**

    - `pageFunction`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Function to be evaluated in the page context.

    - `arg` [EvaluationArgument](../evaluating#evaluation-argument "EvaluationArgument") *(optional)*

      Optional argument to pass to `pageFunction`.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `polling`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| "raf" *(optional)*

        If `polling` is `'raf'`, then `pageFunction` is constantly executed in `requestAnimationFrame` callback. If `polling` is a number, then it is treated as an interval in milliseconds at which the function would be executed. Defaults to `raf`.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time to wait for in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[JSHandle](class-jshandle "JSHandle")\>

    &nbsp;
- name: frame.waitForLoadState
  id: api/class-frame#frame-wait-for-load-state
  summary: Waits for the required load state to be reached
  belongs_to: Frame
  description: |-
    ### waitForLoadState[​](#frame-wait-for-load-state "Direct link to waitForLoadState")

    Added before v1.9

    Waits for the required load state to be reached.

    This returns when the frame reaches a required load state, `load` by default. The navigation must have been committed when this method is called. If current document has already reached the required state, resolves immediately.

    > note
    >
    > Most of the time, this method is not needed because Playwright [auto-waits before every action](../actionability).

    **Usage**

    ``` javascript
    await frame.click('button'); // Click triggers navigation.
    await frame.waitForLoadState(); // Waits for 'load' state by default.
    ```

    **Arguments**

    - `state` "load" \| "domcontentloaded" \| "networkidle" *(optional)*

      Optional load state to wait for, defaults to `load`. If the state has been already reached while loading current document, the method resolves immediately. Can be one of:

      - `'load'` - wait for the `load` event to be fired.
      - `'domcontentloaded'` - wait for the `DOMContentLoaded` event to be fired.
      - `'networkidle'` - **DISCOURAGED** wait until there are no network connections for at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum operation time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `navigationTimeout` option in the config, or by using the [browserContext.setDefaultNavigationTimeout()](class-browsercontext#browser-context-set-default-navigation-timeout), [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout), [page.setDefaultNavigationTimeout()](class-page#page-set-default-navigation-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: frame.waitForNavigation
  id: api/class-frame#frame-wait-for-navigation
  summary: This method is inherently racy, please use frame.waitForURL() instead
  belongs_to: Frame
  description: |-
    ### waitForNavigation[​](#frame-wait-for-navigation "Direct link to waitForNavigation")

    Added before v1.9

    > Deprecated
    >
    > This method is inherently racy, please use [frame.waitForURL()](class-frame#frame-wait-for-url) instead.

    Waits for the frame navigation and returns the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with `null`.

    **Usage**

    This method waits for the frame to navigate to a new URL. It is useful for when you run code which will indirectly cause the frame to navigate. Consider this example:

    ``` javascript
    // Start waiting for navigation before clicking. Note no await.
    const navigationPromise = page.waitForNavigation();
    await page.getByText('Navigate after timeout').click();
    await navigationPromise;
    ```

    > note
    >
    > Usage of the [History API](https://developer.mozilla.org/en-US/docs/Web/API/History_API) to change the URL is considered a navigation.

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum operation time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `navigationTimeout` option in the config, or by using the [browserContext.setDefaultNavigationTimeout()](class-browsercontext#browser-context-set-default-navigation-timeout), [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout), [page.setDefaultNavigationTimeout()](class-page#page-set-default-navigation-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `url`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([URL](https://nodejs.org/api/url.html "URL")):[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        A glob pattern, regex pattern or predicate receiving [URL](https://nodejs.org/api/url.html "URL") to match while waiting for the navigation. Note that if the parameter is a string without wildcard characters, the method will wait for navigation to URL that is exactly equal to the string.

      - `waitUntil` "load" \| "domcontentloaded" \| "networkidle" \| "commit" *(optional)*

        When to consider operation succeeded, defaults to `load`. Events can be either:

        - `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.
        - `'load'` - consider operation to be finished when the `load` event is fired.
        - `'networkidle'` - **DISCOURAGED** consider operation to be finished when there are no network connections for at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
        - `'commit'` - consider operation to be finished when network response is received and the document started loading.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Response](class-response "Response")\>

    &nbsp;
- name: frame.waitForSelector
  id: api/class-frame#frame-wait-for-selector
  summary: Use web assertions that assert visibility or a locator-based locator.waitFor() instead
  belongs_to: Frame
  description: |-
    ### waitForSelector[​](#frame-wait-for-selector "Direct link to waitForSelector")

    Added before v1.9

    > Discouraged
    >
    > Use web assertions that assert visibility or a locator-based [locator.waitFor()](class-locator#locator-wait-for) instead. Read more about [locators](../locators).

    Returns when element specified by selector satisfies `state` option. Returns `null` if waiting for `hidden` or `detached`.

    > note
    >
    > Playwright automatically waits for element to be ready before performing an action. Using [Locator](class-locator "Locator") objects and web-first assertions make the code wait-for-selector-free.

    Wait for the `selector` to satisfy `state` option (either appear/disappear from dom, or become visible/hidden). If at the moment of calling the method `selector` already satisfies the condition, the method will return immediately. If the selector doesn't satisfy the condition for the `timeout` milliseconds, the function will throw.

    **Usage**

    This method works across navigations:

    ``` javascript
    const { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.

    (async () => {
      const browser = await chromium.launch();
      const page = await browser.newPage();
      for (const currentURL of ['https://google.com', 'https://bbc.com']) {
        await page.goto(currentURL);
        const element = await page.mainFrame().waitForSelector('img');
        console.log('Loaded image: ' + await element.getAttribute('src'));
      }
      await browser.close();
    })();
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to query for.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `state` "attached" \| "detached" \| "visible" \| "hidden" *(optional)*

        Defaults to `'visible'`. Can be either:

        - `'attached'` - wait for element to be present in DOM.
        - `'detached'` - wait for element to not be present in DOM.
        - `'visible'` - wait for element to have non-empty bounding box and no `visibility:hidden`. Note that element without any content or with `display:none` has an empty bounding box and is not considered visible.
        - `'hidden'` - wait for element to be either detached from DOM, or have an empty bounding box or `visibility:hidden`. This is opposite to the `'visible'` option.

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [ElementHandle](class-elementhandle "ElementHandle")\>

    &nbsp;
- name: frame.waitForTimeout
  id: api/class-frame#frame-wait-for-timeout
  summary: Never wait for timeout in production
  belongs_to: Frame
  description: "### waitForTimeout[​](#frame-wait-for-timeout \"Direct link to waitForTimeout\")\n\nAdded before v1.9\n\n> Discouraged\n>\n> Never wait for timeout in production. Tests that wait for time are inherently flaky. Use [Locator](class-locator \"Locator\") actions and web assertions that wait automatically.\n\nWaits for the given `timeout` in milliseconds.\n\nNote that `frame.waitForTimeout()` should only be used for debugging. Tests using the timer in production are going to be flaky. Use signals such as network events, selectors becoming visible and others instead.\n\n**Usage**\n\n``` javascript\nawait frame.waitForTimeout(timeout);\n```\n\n**Arguments**\n\n- `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  A timeout to wait for\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-frame](https://playwright.dev/docs/api/class-frame)"
- name: frame.waitForURL
  id: api/class-frame#frame-wait-for-url
  summary: Waits for the frame to navigate to the given URL
  belongs_to: Frame
  description: |-
    ### waitForURL[​](#frame-wait-for-url "Direct link to waitForURL")

    Waits for the frame to navigate to the given URL.

    **Usage**

    ``` javascript
    await frame.click('a.delayed-navigation'); // Clicking the link will indirectly cause a navigation
    await frame.waitForURL('**/target.html');
    ```

    **Arguments**

    - `url`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([URL](https://nodejs.org/api/url.html "URL")):[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

      A glob pattern, regex pattern or predicate receiving [URL](https://nodejs.org/api/url.html "URL") to match while waiting for the navigation. Note that if the parameter is a string without wildcard characters, the method will wait for navigation to URL that is exactly equal to the string.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum operation time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `navigationTimeout` option in the config, or by using the [browserContext.setDefaultNavigationTimeout()](class-browsercontext#browser-context-set-default-navigation-timeout), [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout), [page.setDefaultNavigationTimeout()](class-page#page-set-default-navigation-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `waitUntil` "load" \| "domcontentloaded" \| "networkidle" \| "commit" *(optional)*

        When to consider operation succeeded, defaults to `load`. Events can be either:

        - `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.
        - `'load'` - consider operation to be finished when the `load` event is fired.
        - `'networkidle'` - **DISCOURAGED** consider operation to be finished when there are no network connections for at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
        - `'commit'` - consider operation to be finished when network response is received and the document started loading.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    ## Deprecated[​](#deprecated "Direct link to Deprecated")
- name: FrameLocator
  id: api/class-framelocator
  summary: FrameLocator represents a view to the iframe on the page
  description: "# FrameLocator\n\nFrameLocator represents a view to the `iframe` on the page. It captures the logic sufficient to retrieve the `iframe` and locate elements in that iframe. FrameLocator can be created with either [page.frameLocator()](class-page#page-frame-locator) or [locator.frameLocator()](class-locator#locator-frame-locator) method.\n\n``` javascript\nconst locator = page.frameLocator('#my-frame').getByText('Submit');\nawait locator.click();\n```\n\n**Strictness**\n\nFrame locators are strict. This means that all operations on frame locators will throw if more than one element matches a given selector.\n\n``` javascript\n// Throws if there are several frames in DOM:\nawait page.frameLocator('.result-frame').getByRole('button').click();\n\n// Works because we explicitly tell locator to pick the first frame:\nawait page.frameLocator('.result-frame').first().getByRole('button').click();\n```\n\n**Converting Locator to FrameLocator**\n\nIf you have a [Locator](class-locator \"Locator\") object pointing to an `iframe` it can be converted to [FrameLocator](class-framelocator \"FrameLocator\") using [locator.contentFrame()](class-locator#locator-content-frame).\n\n**Converting FrameLocator to Locator**\n\nIf you have a [FrameLocator](class-framelocator \"FrameLocator\") object it can be converted to [Locator](class-locator \"Locator\") pointing to the same `iframe` using [frameLocator.owner()](class-framelocator#frame-locator-owner).\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### first[​](#frame-locator-first \"Direct link to first\")\n\nReturns locator to the first matching frame.\n\n**Usage**\n\n``` javascript\nframeLocator.first();\n```\n\n**Returns**\n\n- [FrameLocator](class-framelocator \"FrameLocator\")\n\n### frameLocator[​](#frame-locator-frame-locator \"Direct link to frameLocator\")\n\nWhen working with iframes, you can create a frame locator that will enter the iframe and allow selecting elements in that iframe.\n\n**Usage**\n\n``` javascript\nframeLocator.frameLocator(selector);\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to use when resolving DOM element.\n\n**Returns**\n\n- [FrameLocator](class-framelocator \"FrameLocator\")\n\n### getByAltText[​](#frame-locator-get-by-alt-text \"Direct link to getByAltText\")\n\nAllows locating elements by their alt text.\n\n**Usage**\n\nFor example, this method will find the image by alt text \"Playwright logo\":\n\n``` html\n<img alt='Playwright logo'>\n```\n\n``` javascript\nawait page.getByAltText('Playwright logo').click();\n```\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Text to locate the element for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### getByLabel[​](#frame-locator-get-by-label \"Direct link to getByLabel\")\n\nAllows locating input elements by the text of the associated `<label>` or `aria-labelledby` element, or by the `aria-label` attribute.\n\n**Usage**\n\nFor example, this method will find inputs by label \"Username\" and \"Password\" in the following DOM:\n\n``` html\n<input aria-label=\"Username\">\n<label for=\"password-input\">Password:</label>\n<input id=\"password-input\">\n```\n\n``` javascript\nawait page.getByLabel('Username').fill('john');\nawait page.getByLabel('Password').fill('secret');\n```\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Text to locate the element for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### getByPlaceholder[​](#frame-locator-get-by-placeholder \"Direct link to getByPlaceholder\")\n\nAllows locating input elements by the placeholder text.\n\n**Usage**\n\nFor example, consider the following DOM structure.\n\n``` html\n<input type=\"email\" placeholder=\"name@example.com\" />\n```\n\nYou can fill the input after locating it by the placeholder text:\n\n``` javascript\nawait page\n    .getByPlaceholder('name@example.com')\n    .fill('playwright@microsoft.com');\n```\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Text to locate the element for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### getByRole[​](#frame-locator-get-by-role \"Direct link to getByRole\")\n\nAllows locating elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n\n**Usage**\n\nConsider the following DOM structure.\n\n``` html\n<h3>Sign up</h3>\n<label>\n  <input type=\"checkbox\" /> Subscribe\n</label>\n<br/>\n<button>Submit</button>\n```\n\nYou can locate each element by it's implicit role:\n\n``` javascript\nawait expect(page.getByRole('heading', { name: 'Sign up' })).toBeVisible();\n\nawait page.getByRole('checkbox', { name: 'Subscribe' }).check();\n\nawait page.getByRole('button', { name: /submit/i }).click();\n```\n\n**Arguments**\n\n- `role` \"alert\" \\| \"alertdialog\" \\| \"application\" \\| \"article\" \\| \"banner\" \\| \"blockquote\" \\| \"button\" \\| \"caption\" \\| \"cell\" \\| \"checkbox\" \\| \"code\" \\| \"columnheader\" \\| \"combobox\" \\| \"complementary\" \\| \"contentinfo\" \\| \"definition\" \\| \"deletion\" \\| \"dialog\" \\| \"directory\" \\| \"document\" \\| \"emphasis\" \\| \"feed\" \\| \"figure\" \\| \"form\" \\| \"generic\" \\| \"grid\" \\| \"gridcell\" \\| \"group\" \\| \"heading\" \\| \"img\" \\| \"insertion\" \\| \"link\" \\| \"list\" \\| \"listbox\" \\| \"listitem\" \\| \"log\" \\| \"main\" \\| \"marquee\" \\| \"math\" \\| \"meter\" \\| \"menu\" \\| \"menubar\" \\| \"menuitem\" \\| \"menuitemcheckbox\" \\| \"menuitemradio\" \\| \"navigation\" \\| \"none\" \\| \"note\" \\| \"option\" \\| \"paragraph\" \\| \"presentation\" \\| \"progressbar\" \\| \"radio\" \\| \"radiogroup\" \\| \"region\" \\| \"row\" \\| \"rowgroup\" \\| \"rowheader\" \\| \"scrollbar\" \\| \"search\" \\| \"searchbox\" \\| \"separator\" \\| \"slider\" \\| \"spinbutton\" \\| \"status\" \\| \"strong\" \\| \"subscript\" \\| \"superscript\" \\| \"switch\" \\| \"tab\" \\| \"table\" \\| \"tablist\" \\| \"tabpanel\" \\| \"term\" \\| \"textbox\" \\| \"time\" \\| \"timer\" \\| \"toolbar\" \\| \"tooltip\" \\| \"tree\" \\| \"treegrid\" \\| \"treeitem\"\n\n  Required aria role.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `checked` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    An attribute that is usually set by `aria-checked` or native `<input type=checkbox>` controls.\n\n    Learn more about [`aria-checked`](https://www.w3.org/TR/wai-aria-1.2/#aria-checked).\n\n  - `disabled` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    An attribute that is usually set by `aria-disabled` or `disabled`.\n\n    > note\n    >\n    > Unlike most other attributes, `disabled` is inherited through the DOM hierarchy. Learn more about [`aria-disabled`](https://www.w3.org/TR/wai-aria-1.2/#aria-disabled).\n\n  - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether `name` is matched exactly: case-sensitive and whole-string. Defaults to false. Ignored when `name` is a regular expression. Note that exact match still trims whitespace.\n\n  - `expanded` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    An attribute that is usually set by `aria-expanded`.\n\n    Learn more about [`aria-expanded`](https://www.w3.org/TR/wai-aria-1.2/#aria-expanded).\n\n  - `includeHidden` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Option that controls whether hidden elements are matched. By default, only non-hidden elements, as [defined by ARIA](https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion), are matched by role selector.\n\n    Learn more about [`aria-hidden`](https://www.w3.org/TR/wai-aria-1.2/#aria-hidden).\n\n  - `level` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    A number attribute that is usually present for roles `heading`, `listitem`, `row`, `treeitem`, with default values for `<h1>-<h6>` elements.\n\n    Learn more about [`aria-level`](https://www.w3.org/TR/wai-aria-1.2/#aria-level).\n\n  - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") *(optional)*\n\n    Option to match the [accessible name](https://w3c.github.io/accname/#dfn-accessible-name). By default, matching is case-insensitive and searches for a substring, use `exact` to control this behavior.\n\n    Learn more about [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n\n  - `pressed` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    An attribute that is usually set by `aria-pressed`.\n\n    Learn more about [`aria-pressed`](https://www.w3.org/TR/wai-aria-1.2/#aria-pressed).\n\n  - `selected` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    An attribute that is usually set by `aria-selected`.\n\n    Learn more about [`aria-selected`](https://www.w3.org/TR/wai-aria-1.2/#aria-selected).\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n**Details**\n\nRole selector **does not replace** accessibility audits and conformance tests, but rather gives early feedback about the ARIA guidelines.\n\nMany html elements have an implicitly [defined role](https://w3c.github.io/html-aam/#html-element-role-mappings) that is recognized by the role selector. You can find all the [supported roles here](https://www.w3.org/TR/wai-aria-1.2/#role_definitions). ARIA guidelines **do not recommend** duplicating implicit roles and attributes by setting `role` and/or `aria-*` attributes to default values.\n\n### getByTestId[​](#frame-locator-get-by-test-id \"Direct link to getByTestId\")\n\nLocate element by the test id.\n\n**Usage**\n\nConsider the following DOM structure.\n\n``` html\n<button data-testid=\"directions\">Itinéraire</button>\n```\n\nYou can locate the element by it's test id:\n\n``` javascript\nawait page.getByTestId('directions').click();\n```\n\n**Arguments**\n\n- `testId` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Id to locate the element by.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n**Details**\n\nBy default, the `data-testid` attribute is used as a test id. Use [selectors.setTestIdAttribute()](class-selectors#selectors-set-test-id-attribute) to configure a different test id attribute if necessary.\n\n``` javascript\n// Set custom test id attribute from @playwright/test config:\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    testIdAttribute: 'data-pw'\n  },\n});\n```\n\n### getByText[​](#frame-locator-get-by-text \"Direct link to getByText\")\n\nAllows locating elements that contain given text.\n\nSee also [locator.filter()](class-locator#locator-filter) that allows to match by another criteria, like an accessible role, and then filter by the text content.\n\n**Usage**\n\nConsider the following DOM structure:\n\n``` html\n<div>Hello <span>world</span></div>\n<div>Hello</div>\n```\n\nYou can locate by text substring, exact string, or a regular expression:\n\n``` javascript\n// Matches <span>\npage.getByText('world');\n\n// Matches first <div>\npage.getByText('Hello world');\n\n// Matches second <div>\npage.getByText('Hello', { exact: true });\n\n// Matches both <div>s\npage.getByText(/Hello/);\n\n// Matches second <div>\npage.getByText(/^hello$/i);\n```\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Text to locate the element for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n**Details**\n\nMatching by text always normalizes whitespace, even with exact match. For example, it turns multiple spaces into one, turns line breaks into spaces and ignores leading and trailing whitespace.\n\nInput elements of the type `button` and `submit` are matched by their `value` instead of the text content. For example, locating by text `\"Log in\"` matches `<input type=button value=\"Log in\">`.\n\n### getByTitle[​](#frame-locator-get-by-title \"Direct link to getByTitle\")\n\nAllows locating elements by their title attribute.\n\n**Usage**\n\nConsider the following DOM structure.\n\n``` html\n<span title='Issues count'>25 issues</span>\n```\n\nYou can check the issues count after locating it by the title text:\n\n``` javascript\nawait expect(page.getByTitle('Issues count')).toHaveText('25 issues');\n```\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Text to locate the element for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### last[​](#frame-locator-last \"Direct link to last\")\n\nReturns locator to the last matching frame.\n\n**Usage**\n\n``` javascript\nframeLocator.last();\n```\n\n**Returns**\n\n- [FrameLocator](class-framelocator \"FrameLocator\")\n\n### locator[​](#frame-locator-locator \"Direct link to locator\")\n\nThe method finds an element matching the specified selector in the locator's subtree. It also accepts filter options, similar to [locator.filter()](class-locator#locator-filter) method.\n\n[Learn more about locators](../locators).\n\n**Usage**\n\n``` javascript\nframeLocator.locator(selectorOrLocator);\nframeLocator.locator(selectorOrLocator, options);\n```\n\n**Arguments**\n\n- `selectorOrLocator` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Locator](class-locator \"Locator\")\n\n  A selector or locator to use when resolving DOM element.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `has` [Locator](class-locator \"Locator\") *(optional)*\n\n    Narrows down the results of the method to those which contain elements matching this relative locator. For example, `article` that has `text=Playwright` matches `<article><div>Playwright</div></article>`.\n\n    Inner locator **must be relative** to the outer locator and is queried starting with the outer locator match, not the document root. For example, you can find `content` that has `div` in `<article><content><div>Playwright</div></content></article>`. However, looking for `content` that has `article div` will fail, because the inner locator must be relative and should not use any elements outside the `content`.\n\n    Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](class-framelocator \"FrameLocator\")s.\n\n  - `hasNot` [Locator](class-locator \"Locator\") *(optional)*\n\n    Matches elements that do not contain an element that matches an inner locator. Inner locator is queried against the outer one. For example, `article` that does not have `div` matches `<article><span>Playwright</span></article>`.\n\n    Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](class-framelocator \"FrameLocator\")s.\n\n  - `hasNotText` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") *(optional)*\n\n    Matches elements that do not contain specified text somewhere inside, possibly in a child or a descendant element. When passed a [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), matching is case-insensitive and searches for a substring.\n\n  - `hasText` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") *(optional)*\n\n    Matches elements containing specified text somewhere inside, possibly in a child or a descendant element. When passed a [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), matching is case-insensitive and searches for a substring. For example, `\"Playwright\"` matches `<article><div>Playwright</div></article>`.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### nth[​](#frame-locator-nth \"Direct link to nth\")\n\nReturns locator to the n-th matching frame. It's zero based, `nth(0)` selects the first frame.\n\n**Usage**\n\n``` javascript\nframeLocator.nth(index);\n```\n\n**Arguments**\n\n- `index` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n**Returns**\n\n- [FrameLocator](class-framelocator \"FrameLocator\")\n\n### owner[​](#frame-locator-owner \"Direct link to owner\")\n\nReturns a [Locator](class-locator \"Locator\") object pointing to the same `iframe` as this frame locator.\n\nUseful when you have a [FrameLocator](class-framelocator \"FrameLocator\") object obtained somewhere, and later on would like to interact with the `iframe` element.\n\nFor a reverse operation, use [locator.contentFrame()](class-locator#locator-content-frame).\n\n**Usage**\n\n``` javascript\nconst frameLocator = page.frameLocator('iframe[name=\"embedded\"]');\n// ...\nconst locator = frameLocator.owner();\nawait expect(locator).toBeVisible();\n```\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-framelocator](https://playwright.dev/docs/api/class-framelocator)"
- name: frameLocator.first
  id: api/class-framelocator#frame-locator-first
  summary: Returns locator to the first matching frame
  belongs_to: FrameLocator
  description: |-
    ### first[​](#frame-locator-first "Direct link to first")

    Returns locator to the first matching frame.

    **Usage**

    ``` javascript
    frameLocator.first();
    ```

    **Returns**

    - [FrameLocator](class-framelocator "FrameLocator")
- name: frameLocator.frameLocator
  id: api/class-framelocator#frame-locator-frame-locator
  summary: When working with iframes, you can create a frame locator that will enter the iframe and allow selecting elements in that iframe
  belongs_to: FrameLocator
  description: |-
    ### frameLocator[​](#frame-locator-frame-locator "Direct link to frameLocator")

    When working with iframes, you can create a frame locator that will enter the iframe and allow selecting elements in that iframe.

    **Usage**

    ``` javascript
    frameLocator.frameLocator(selector);
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to use when resolving DOM element.

    **Returns**

    - [FrameLocator](class-framelocator "FrameLocator")

    &nbsp;
- name: frameLocator.getByAltText
  id: api/class-framelocator#frame-locator-get-by-alt-text
  summary: Allows locating elements by their alt text
  belongs_to: FrameLocator
  description: |-
    ### getByAltText[​](#frame-locator-get-by-alt-text "Direct link to getByAltText")

    Allows locating elements by their alt text.

    **Usage**

    For example, this method will find the image by alt text "Playwright logo":

    ``` html
    <img alt='Playwright logo'>
    ```

    ``` javascript
    await page.getByAltText('Playwright logo').click();
    ```

    **Arguments**

    - `text`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Text to locate the element for.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: frameLocator.getByLabel
  id: api/class-framelocator#frame-locator-get-by-label
  summary: Allows locating input elements by the text of the associated <label> or aria-labelledby element, or by the aria-label attribute
  belongs_to: FrameLocator
  description: |-
    ### getByLabel[​](#frame-locator-get-by-label "Direct link to getByLabel")

    Allows locating input elements by the text of the associated `<label>` or `aria-labelledby` element, or by the `aria-label` attribute.

    **Usage**

    For example, this method will find inputs by label "Username" and "Password" in the following DOM:

    ``` html
    <input aria-label="Username">
    <label for="password-input">Password:</label>
    <input id="password-input">
    ```

    ``` javascript
    await page.getByLabel('Username').fill('john');
    await page.getByLabel('Password').fill('secret');
    ```

    **Arguments**

    - `text`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Text to locate the element for.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: frameLocator.getByPlaceholder
  id: api/class-framelocator#frame-locator-get-by-placeholder
  summary: Allows locating input elements by the placeholder text
  belongs_to: FrameLocator
  description: |-
    ### getByPlaceholder[​](#frame-locator-get-by-placeholder "Direct link to getByPlaceholder")

    Allows locating input elements by the placeholder text.

    **Usage**

    For example, consider the following DOM structure.

    ``` html
    <input type="email" placeholder="name@example.com" />
    ```

    You can fill the input after locating it by the placeholder text:

    ``` javascript
    await page
        .getByPlaceholder('name@example.com')
        .fill('playwright@microsoft.com');
    ```

    **Arguments**

    - `text`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Text to locate the element for.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: frameLocator.getByRole
  id: api/class-framelocator#frame-locator-get-by-role
  summary: Allows locating elements by their ARIA role, ARIA attributes and accessible name
  belongs_to: FrameLocator
  description: |-
    ### getByRole[​](#frame-locator-get-by-role "Direct link to getByRole")

    Allows locating elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).

    **Usage**

    Consider the following DOM structure.

    ``` html
    <h3>Sign up</h3>
    <label>
      <input type="checkbox" /> Subscribe
    </label>
    <br/>
    <button>Submit</button>
    ```

    You can locate each element by it's implicit role:

    ``` javascript
    await expect(page.getByRole('heading', { name: 'Sign up' })).toBeVisible();

    await page.getByRole('checkbox', { name: 'Subscribe' }).check();

    await page.getByRole('button', { name: /submit/i }).click();
    ```

    **Arguments**

    - `role` "alert" \| "alertdialog" \| "application" \| "article" \| "banner" \| "blockquote" \| "button" \| "caption" \| "cell" \| "checkbox" \| "code" \| "columnheader" \| "combobox" \| "complementary" \| "contentinfo" \| "definition" \| "deletion" \| "dialog" \| "directory" \| "document" \| "emphasis" \| "feed" \| "figure" \| "form" \| "generic" \| "grid" \| "gridcell" \| "group" \| "heading" \| "img" \| "insertion" \| "link" \| "list" \| "listbox" \| "listitem" \| "log" \| "main" \| "marquee" \| "math" \| "meter" \| "menu" \| "menubar" \| "menuitem" \| "menuitemcheckbox" \| "menuitemradio" \| "navigation" \| "none" \| "note" \| "option" \| "paragraph" \| "presentation" \| "progressbar" \| "radio" \| "radiogroup" \| "region" \| "row" \| "rowgroup" \| "rowheader" \| "scrollbar" \| "search" \| "searchbox" \| "separator" \| "slider" \| "spinbutton" \| "status" \| "strong" \| "subscript" \| "superscript" \| "switch" \| "tab" \| "table" \| "tablist" \| "tabpanel" \| "term" \| "textbox" \| "time" \| "timer" \| "toolbar" \| "tooltip" \| "tree" \| "treegrid" \| "treeitem"

      Required aria role.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `checked` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        An attribute that is usually set by `aria-checked` or native `<input type=checkbox>` controls.

        Learn more about [`aria-checked`](https://www.w3.org/TR/wai-aria-1.2/#aria-checked).

      - `disabled` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        An attribute that is usually set by `aria-disabled` or `disabled`.

        > note
        >
        > Unlike most other attributes, `disabled` is inherited through the DOM hierarchy. Learn more about [`aria-disabled`](https://www.w3.org/TR/wai-aria-1.2/#aria-disabled).

      - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether `name` is matched exactly: case-sensitive and whole-string. Defaults to false. Ignored when `name` is a regular expression. Note that exact match still trims whitespace.

      - `expanded` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        An attribute that is usually set by `aria-expanded`.

        Learn more about [`aria-expanded`](https://www.w3.org/TR/wai-aria-1.2/#aria-expanded).

      - `includeHidden` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Option that controls whether hidden elements are matched. By default, only non-hidden elements, as [defined by ARIA](https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion), are matched by role selector.

        Learn more about [`aria-hidden`](https://www.w3.org/TR/wai-aria-1.2/#aria-hidden).

      - `level` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        A number attribute that is usually present for roles `heading`, `listitem`, `row`, `treeitem`, with default values for `<h1>-<h6>` elements.

        Learn more about [`aria-level`](https://www.w3.org/TR/wai-aria-1.2/#aria-level).

      - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") *(optional)*

        Option to match the [accessible name](https://w3c.github.io/accname/#dfn-accessible-name). By default, matching is case-insensitive and searches for a substring, use `exact` to control this behavior.

        Learn more about [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).

      - `pressed` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        An attribute that is usually set by `aria-pressed`.

        Learn more about [`aria-pressed`](https://www.w3.org/TR/wai-aria-1.2/#aria-pressed).

      - `selected` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        An attribute that is usually set by `aria-selected`.

        Learn more about [`aria-selected`](https://www.w3.org/TR/wai-aria-1.2/#aria-selected).

    **Returns**

    - [Locator](class-locator "Locator")

    **Details**

    Role selector **does not replace** accessibility audits and conformance tests, but rather gives early feedback about the ARIA guidelines.

    Many html elements have an implicitly [defined role](https://w3c.github.io/html-aam/#html-element-role-mappings) that is recognized by the role selector. You can find all the [supported roles here](https://www.w3.org/TR/wai-aria-1.2/#role_definitions). ARIA guidelines **do not recommend** duplicating implicit roles and attributes by setting `role` and/or `aria-*` attributes to default values.
- name: frameLocator.getByTestId
  id: api/class-framelocator#frame-locator-get-by-test-id
  summary: Locate element by the test id
  belongs_to: FrameLocator
  description: |-
    ### getByTestId[​](#frame-locator-get-by-test-id "Direct link to getByTestId")

    Locate element by the test id.

    **Usage**

    Consider the following DOM structure.

    ``` html
    <button data-testid="directions">Itinéraire</button>
    ```

    You can locate the element by it's test id:

    ``` javascript
    await page.getByTestId('directions').click();
    ```

    **Arguments**

    - `testId`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Id to locate the element by.

    **Returns**

    - [Locator](class-locator "Locator")

    **Details**

    By default, the `data-testid` attribute is used as a test id. Use [selectors.setTestIdAttribute()](class-selectors#selectors-set-test-id-attribute) to configure a different test id attribute if necessary.

    ``` javascript
    // Set custom test id attribute from @playwright/test config:
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        testIdAttribute: 'data-pw'
      },
    });
    ```
- name: frameLocator.getByText
  id: api/class-framelocator#frame-locator-get-by-text
  summary: Allows locating elements that contain given text
  belongs_to: FrameLocator
  description: |-
    ### getByText[​](#frame-locator-get-by-text "Direct link to getByText")

    Allows locating elements that contain given text.

    See also [locator.filter()](class-locator#locator-filter) that allows to match by another criteria, like an accessible role, and then filter by the text content.

    **Usage**

    Consider the following DOM structure:

    ``` html
    <div>Hello <span>world</span></div>
    <div>Hello</div>
    ```

    You can locate by text substring, exact string, or a regular expression:

    ``` javascript
    // Matches <span>
    page.getByText('world');

    // Matches first <div>
    page.getByText('Hello world');

    // Matches second <div>
    page.getByText('Hello', { exact: true });

    // Matches both <div>s
    page.getByText(/Hello/);

    // Matches second <div>
    page.getByText(/^hello$/i);
    ```

    **Arguments**

    - `text`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Text to locate the element for.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.

    **Returns**

    - [Locator](class-locator "Locator")

    **Details**

    Matching by text always normalizes whitespace, even with exact match. For example, it turns multiple spaces into one, turns line breaks into spaces and ignores leading and trailing whitespace.

    Input elements of the type `button` and `submit` are matched by their `value` instead of the text content. For example, locating by text `"Log in"` matches `<input type=button value="Log in">`.
- name: frameLocator.getByTitle
  id: api/class-framelocator#frame-locator-get-by-title
  summary: Allows locating elements by their title attribute
  belongs_to: FrameLocator
  description: |-
    ### getByTitle[​](#frame-locator-get-by-title "Direct link to getByTitle")

    Allows locating elements by their title attribute.

    **Usage**

    Consider the following DOM structure.

    ``` html
    <span title='Issues count'>25 issues</span>
    ```

    You can check the issues count after locating it by the title text:

    ``` javascript
    await expect(page.getByTitle('Issues count')).toHaveText('25 issues');
    ```

    **Arguments**

    - `text`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Text to locate the element for.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: frameLocator.last
  id: api/class-framelocator#frame-locator-last
  summary: Returns locator to the last matching frame
  belongs_to: FrameLocator
  description: |-
    ### last[​](#frame-locator-last "Direct link to last")

    Returns locator to the last matching frame.

    **Usage**

    ``` javascript
    frameLocator.last();
    ```

    **Returns**

    - [FrameLocator](class-framelocator "FrameLocator")

    &nbsp;
- name: frameLocator.locator
  id: api/class-framelocator#frame-locator-locator
  summary: The method finds an element matching the specified selector in the locator's subtree
  belongs_to: FrameLocator
  description: |-
    ### locator[​](#frame-locator-locator "Direct link to locator")

    The method finds an element matching the specified selector in the locator's subtree. It also accepts filter options, similar to [locator.filter()](class-locator#locator-filter) method.

    [Learn more about locators](../locators).

    **Usage**

    ``` javascript
    frameLocator.locator(selectorOrLocator);
    frameLocator.locator(selectorOrLocator, options);
    ```

    **Arguments**

    - `selectorOrLocator`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Locator](class-locator "Locator")

      A selector or locator to use when resolving DOM element.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `has` [Locator](class-locator "Locator") *(optional)*

        Narrows down the results of the method to those which contain elements matching this relative locator. For example, `article` that has `text=Playwright` matches `<article><div>Playwright</div></article>`.

        Inner locator **must be relative** to the outer locator and is queried starting with the outer locator match, not the document root. For example, you can find `content` that has `div` in `<article><content><div>Playwright</div></content></article>`. However, looking for `content` that has `article div` will fail, because the inner locator must be relative and should not use any elements outside the `content`.

        Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](class-framelocator "FrameLocator")s.

      - `hasNot` [Locator](class-locator "Locator") *(optional)*

        Matches elements that do not contain an element that matches an inner locator. Inner locator is queried against the outer one. For example, `article` that does not have `div` matches `<article><span>Playwright</span></article>`.

        Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](class-framelocator "FrameLocator")s.

      - `hasNotText`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") *(optional)*

        Matches elements that do not contain specified text somewhere inside, possibly in a child or a descendant element. When passed a [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), matching is case-insensitive and searches for a substring.

      - `hasText`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") *(optional)*

        Matches elements containing specified text somewhere inside, possibly in a child or a descendant element. When passed a [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), matching is case-insensitive and searches for a substring. For example, `"Playwright"` matches `<article><div>Playwright</div></article>`.

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: frameLocator.nth
  id: api/class-framelocator#frame-locator-nth
  summary: Returns locator to the n-th matching frame
  belongs_to: FrameLocator
  description: |-
    ### nth[​](#frame-locator-nth "Direct link to nth")

    Returns locator to the n-th matching frame. It's zero based, `nth(0)` selects the first frame.

    **Usage**

    ``` javascript
    frameLocator.nth(index);
    ```

    **Arguments**

    - `index` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    **Returns**

    - [FrameLocator](class-framelocator "FrameLocator")

    &nbsp;
- name: frameLocator.owner
  id: api/class-framelocator#frame-locator-owner
  summary: Returns a Locator object pointing to the same iframe as this frame locator
  belongs_to: FrameLocator
  description: "### owner[​](#frame-locator-owner \"Direct link to owner\")\n\nReturns a [Locator](class-locator \"Locator\") object pointing to the same `iframe` as this frame locator.\n\nUseful when you have a [FrameLocator](class-framelocator \"FrameLocator\") object obtained somewhere, and later on would like to interact with the `iframe` element.\n\nFor a reverse operation, use [locator.contentFrame()](class-locator#locator-content-frame).\n\n**Usage**\n\n``` javascript\nconst frameLocator = page.frameLocator('iframe[name=\"embedded\"]');\n// ...\nconst locator = frameLocator.owner();\nawait expect(locator).toBeVisible();\n```\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-framelocator](https://playwright.dev/docs/api/class-framelocator)"
- name: Frames
  id: frames
  summary: A Page can have one or more Frame objects attached to it
  description: "# Frames\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nA [Page](api/class-page \"Page\") can have one or more [Frame](api/class-frame \"Frame\") objects attached to it. Each page has a main frame and page-level interactions (like `click`) are assumed to operate in the main frame.\n\nA page can have additional frames attached with the `iframe` HTML tag. These frames can be accessed for interactions inside the frame.\n\n``` javascript\n// Locate element inside frame\nconst username = await page.frameLocator('.frame-class').getByLabel('User Name');\nawait username.fill('John');\n```\n\n## Frame objects[​](#frame-objects \"Direct link to Frame objects\")\n\nOne can access frame objects using the [page.frame()](api/class-page#page-frame) API:\n\n``` javascript\n// Get frame using the frame's name attribute\nconst frame = page.frame('frame-login');\n\n// Get frame using frame's URL\nconst frame = page.frame({ url: /.*domain.*/ });\n\n// Interact with the frame\nawait frame.fill('#username-input', 'John');\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/frames](https://playwright.dev/docs/frames)"
- name: FullConfig
  id: api/class-fullconfig
  summary: Resolved configuration which is accessible via testInfo.config and is passed to the test reporters
  description: "# FullConfig\n\nResolved configuration which is accessible via [testInfo.config](class-testinfo#test-info-config) and is passed to the test reporters. To see the format of Playwright configuration file, please see [TestConfig](class-testconfig \"TestConfig\") instead.\n\n## Properties[​](#properties \"Direct link to Properties\")\n\n### configFile[​](#full-config-config-file \"Direct link to configFile\")\n\nPath to the configuration file used to run the tests. The value is an empty string if no config file was used.\n\n**Usage**\n\n``` javascript\nfullConfig.configFile\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### forbidOnly[​](#full-config-forbid-only \"Direct link to forbidOnly\")\n\nSee [testConfig.forbidOnly](class-testconfig#test-config-forbid-only).\n\n**Usage**\n\n``` javascript\nfullConfig.forbidOnly\n```\n\n**Type**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### fullyParallel[​](#full-config-fully-parallel \"Direct link to fullyParallel\")\n\nSee [testConfig.fullyParallel](class-testconfig#test-config-fully-parallel).\n\n**Usage**\n\n``` javascript\nfullConfig.fullyParallel\n```\n\n**Type**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### globalSetup[​](#full-config-global-setup \"Direct link to globalSetup\")\n\nSee [testConfig.globalSetup](class-testconfig#test-config-global-setup).\n\n**Usage**\n\n``` javascript\nfullConfig.globalSetup\n```\n\n**Type**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### globalTeardown[​](#full-config-global-teardown \"Direct link to globalTeardown\")\n\nSee [testConfig.globalTeardown](class-testconfig#test-config-global-teardown).\n\n**Usage**\n\n``` javascript\nfullConfig.globalTeardown\n```\n\n**Type**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### globalTimeout[​](#full-config-global-timeout \"Direct link to globalTimeout\")\n\nSee [testConfig.globalTimeout](class-testconfig#test-config-global-timeout).\n\n**Usage**\n\n``` javascript\nfullConfig.globalTimeout\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### grep[​](#full-config-grep \"Direct link to grep\")\n\nSee [testConfig.grep](class-testconfig#test-config-grep).\n\n**Usage**\n\n``` javascript\nfullConfig.grep\n```\n\n**Type**\n\n- [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\\>\n\n### grepInvert[​](#full-config-grep-invert \"Direct link to grepInvert\")\n\nSee [testConfig.grepInvert](class-testconfig#test-config-grep-invert).\n\n**Usage**\n\n``` javascript\nfullConfig.grepInvert\n```\n\n**Type**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\\>\n\n### maxFailures[​](#full-config-max-failures \"Direct link to maxFailures\")\n\nSee [testConfig.maxFailures](class-testconfig#test-config-max-failures).\n\n**Usage**\n\n``` javascript\nfullConfig.maxFailures\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### metadata[​](#full-config-metadata \"Direct link to metadata\")\n\nSee [testConfig.metadata](class-testconfig#test-config-metadata).\n\n**Usage**\n\n``` javascript\nfullConfig.metadata\n```\n\n**Type**\n\n- [Metadata](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object<string, any>\")\n\n### preserveOutput[​](#full-config-preserve-output \"Direct link to preserveOutput\")\n\nSee [testConfig.preserveOutput](class-testconfig#test-config-preserve-output).\n\n**Usage**\n\n``` javascript\nfullConfig.preserveOutput\n```\n\n**Type**\n\n- \"always\" \\| \"never\" \\| \"failures-only\"\n\n### projects[​](#full-config-projects \"Direct link to projects\")\n\nList of resolved projects.\n\n**Usage**\n\n``` javascript\nfullConfig.projects\n```\n\n**Type**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[FullProject](class-fullproject \"FullProject\")\\>\n\n### quiet[​](#full-config-quiet \"Direct link to quiet\")\n\nSee [testConfig.quiet](class-testconfig#test-config-quiet).\n\n**Usage**\n\n``` javascript\nfullConfig.quiet\n```\n\n**Type**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### reportSlowTests[​](#full-config-report-slow-tests \"Direct link to reportSlowTests\")\n\nSee [testConfig.reportSlowTests](class-testconfig#test-config-report-slow-tests).\n\n**Usage**\n\n``` javascript\nfullConfig.reportSlowTests\n```\n\n**Type**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `max` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    The maximum number of slow test files to report. Defaults to `5`.\n\n  - `threshold` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Test duration in milliseconds that is considered slow. Defaults to 15 seconds.\n\n### reporter[​](#full-config-reporter \"Direct link to reporter\")\n\nSee [testConfig.reporter](class-testconfig#test-config-reporter).\n\n**Usage**\n\n``` javascript\nfullConfig.reporter\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> \\| \"list\" \\| \"dot\" \\| \"line\" \\| \"github\" \\| \"json\" \\| \"junit\" \\| \"null\" \\| \"html\"\n  - `0` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Reporter name or module or file path\n\n  - `1` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n    An object with reporter options if any\n\n### rootDir[​](#full-config-root-dir \"Direct link to rootDir\")\n\nBase directory for all relative paths used in the reporters.\n\n**Usage**\n\n``` javascript\nfullConfig.rootDir\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### shard[​](#full-config-shard \"Direct link to shard\")\n\nSee [testConfig.shard](class-testconfig#test-config-shard).\n\n**Usage**\n\n``` javascript\nfullConfig.shard\n```\n\n**Type**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `total` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    The total number of shards.\n\n  - `current` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    The index of the shard to execute, one-based.\n\n### updateSnapshots[​](#full-config-update-snapshots \"Direct link to updateSnapshots\")\n\nSee [testConfig.updateSnapshots](class-testconfig#test-config-update-snapshots).\n\n**Usage**\n\n``` javascript\nfullConfig.updateSnapshots\n```\n\n**Type**\n\n- \"all\" \\| \"none\" \\| \"missing\"\n\n### version[​](#full-config-version \"Direct link to version\")\n\nPlaywright version.\n\n**Usage**\n\n``` javascript\nfullConfig.version\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### webServer[​](#full-config-web-server \"Direct link to webServer\")\n\nSee [testConfig.webServer](class-testconfig#test-config-web-server).\n\n**Usage**\n\n``` javascript\nfullConfig.webServer\n```\n\n**Type**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n### workers[​](#full-config-workers \"Direct link to workers\")\n\nSee [testConfig.workers](class-testconfig#test-config-workers).\n\n**Usage**\n\n``` javascript\nfullConfig.workers\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-fullconfig](https://playwright.dev/docs/api/class-fullconfig)"
- name: fullConfig.configFile
  id: api/class-fullconfig#full-config-config-file
  summary: Path to the configuration file used to run the tests
  belongs_to: FullConfig
  description: |-
    ### configFile[​](#full-config-config-file "Direct link to configFile")

    Path to the configuration file used to run the tests. The value is an empty string if no config file was used.

    **Usage**

    ``` javascript
    fullConfig.configFile
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")
- name: fullConfig.forbidOnly
  id: api/class-fullconfig#full-config-forbid-only
  summary: See testConfig.forbidOnly
  belongs_to: FullConfig
  description: |-
    ### forbidOnly[​](#full-config-forbid-only "Direct link to forbidOnly")

    See [testConfig.forbidOnly](class-testconfig#test-config-forbid-only).

    **Usage**

    ``` javascript
    fullConfig.forbidOnly
    ```

    **Type**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: fullConfig.fullyParallel
  id: api/class-fullconfig#full-config-fully-parallel
  summary: See testConfig.fullyParallel
  belongs_to: FullConfig
  description: |-
    ### fullyParallel[​](#full-config-fully-parallel "Direct link to fullyParallel")

    See [testConfig.fullyParallel](class-testconfig#test-config-fully-parallel).

    **Usage**

    ``` javascript
    fullConfig.fullyParallel
    ```

    **Type**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: fullConfig.globalSetup
  id: api/class-fullconfig#full-config-global-setup
  summary: See testConfig.globalSetup
  belongs_to: FullConfig
  description: |-
    ### globalSetup[​](#full-config-global-setup "Direct link to globalSetup")

    See [testConfig.globalSetup](class-testconfig#test-config-global-setup).

    **Usage**

    ``` javascript
    fullConfig.globalSetup
    ```

    **Type**

    - [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: fullConfig.globalTeardown
  id: api/class-fullconfig#full-config-global-teardown
  summary: See testConfig.globalTeardown
  belongs_to: FullConfig
  description: |-
    ### globalTeardown[​](#full-config-global-teardown "Direct link to globalTeardown")

    See [testConfig.globalTeardown](class-testconfig#test-config-global-teardown).

    **Usage**

    ``` javascript
    fullConfig.globalTeardown
    ```

    **Type**

    - [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: fullConfig.globalTimeout
  id: api/class-fullconfig#full-config-global-timeout
  summary: See testConfig.globalTimeout
  belongs_to: FullConfig
  description: |-
    ### globalTimeout[​](#full-config-global-timeout "Direct link to globalTimeout")

    See [testConfig.globalTimeout](class-testconfig#test-config-global-timeout).

    **Usage**

    ``` javascript
    fullConfig.globalTimeout
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: fullConfig.grep
  id: api/class-fullconfig#full-config-grep
  summary: See testConfig.grep
  belongs_to: FullConfig
  description: |-
    ### grep[​](#full-config-grep "Direct link to grep")

    See [testConfig.grep](class-testconfig#test-config-grep).

    **Usage**

    ``` javascript
    fullConfig.grep
    ```

    **Type**

    - [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")\>

    &nbsp;
- name: fullConfig.grepInvert
  id: api/class-fullconfig#full-config-grep-invert
  summary: See testConfig.grepInvert
  belongs_to: FullConfig
  description: |-
    ### grepInvert[​](#full-config-grep-invert "Direct link to grepInvert")

    See [testConfig.grepInvert](class-testconfig#test-config-grep-invert).

    **Usage**

    ``` javascript
    fullConfig.grepInvert
    ```

    **Type**

    - [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")\>

    &nbsp;
- name: fullConfig.maxFailures
  id: api/class-fullconfig#full-config-max-failures
  summary: See testConfig.maxFailures
  belongs_to: FullConfig
  description: |-
    ### maxFailures[​](#full-config-max-failures "Direct link to maxFailures")

    See [testConfig.maxFailures](class-testconfig#test-config-max-failures).

    **Usage**

    ``` javascript
    fullConfig.maxFailures
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: fullConfig.metadata
  id: api/class-fullconfig#full-config-metadata
  summary: See testConfig.metadata
  belongs_to: FullConfig
  description: |-
    ### metadata[​](#full-config-metadata "Direct link to metadata")

    See [testConfig.metadata](class-testconfig#test-config-metadata).

    **Usage**

    ``` javascript
    fullConfig.metadata
    ```

    **Type**

    - [Metadata](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object<string, any>")

    &nbsp;
- name: fullConfig.preserveOutput
  id: api/class-fullconfig#full-config-preserve-output
  summary: See testConfig.preserveOutput
  belongs_to: FullConfig
  description: |-
    ### preserveOutput[​](#full-config-preserve-output "Direct link to preserveOutput")

    See [testConfig.preserveOutput](class-testconfig#test-config-preserve-output).

    **Usage**

    ``` javascript
    fullConfig.preserveOutput
    ```

    **Type**

    - "always" \| "never" \| "failures-only"

    &nbsp;
- name: fullConfig.projects
  id: api/class-fullconfig#full-config-projects
  summary: List of resolved projects
  belongs_to: FullConfig
  description: |-
    ### projects[​](#full-config-projects "Direct link to projects")

    List of resolved projects.

    **Usage**

    ``` javascript
    fullConfig.projects
    ```

    **Type**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[FullProject](class-fullproject "FullProject")\>

    &nbsp;
- name: fullConfig.quiet
  id: api/class-fullconfig#full-config-quiet
  summary: See testConfig.quiet
  belongs_to: FullConfig
  description: |-
    ### quiet[​](#full-config-quiet "Direct link to quiet")

    See [testConfig.quiet](class-testconfig#test-config-quiet).

    **Usage**

    ``` javascript
    fullConfig.quiet
    ```

    **Type**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: fullConfig.reporter
  id: api/class-fullconfig#full-config-reporter
  summary: See testConfig.reporter
  belongs_to: FullConfig
  description: |-
    ### reporter[​](#full-config-reporter "Direct link to reporter")

    See [testConfig.reporter](class-testconfig#test-config-reporter).

    **Usage**

    ``` javascript
    fullConfig.reporter
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> \| "list" \| "dot" \| "line" \| "github" \| "json" \| "junit" \| "null" \| "html"
      - `0`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        Reporter name or module or file path

      - `1`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

        An object with reporter options if any

    &nbsp;
- name: fullConfig.reportSlowTests
  id: api/class-fullconfig#full-config-report-slow-tests
  summary: See testConfig.reportSlowTests
  belongs_to: FullConfig
  description: |-
    ### reportSlowTests[​](#full-config-report-slow-tests "Direct link to reportSlowTests")

    See [testConfig.reportSlowTests](class-testconfig#test-config-report-slow-tests).

    **Usage**

    ``` javascript
    fullConfig.reportSlowTests
    ```

    **Type**

    - [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")
      - `max`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        The maximum number of slow test files to report. Defaults to `5`.

      - `threshold`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Test duration in milliseconds that is considered slow. Defaults to 15 seconds.

    &nbsp;
- name: fullConfig.rootDir
  id: api/class-fullconfig#full-config-root-dir
  summary: Base directory for all relative paths used in the reporters
  belongs_to: FullConfig
  description: |-
    ### rootDir[​](#full-config-root-dir "Direct link to rootDir")

    Base directory for all relative paths used in the reporters.

    **Usage**

    ``` javascript
    fullConfig.rootDir
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: fullConfig.shard
  id: api/class-fullconfig#full-config-shard
  summary: See testConfig.shard
  belongs_to: FullConfig
  description: |-
    ### shard[​](#full-config-shard "Direct link to shard")

    See [testConfig.shard](class-testconfig#test-config-shard).

    **Usage**

    ``` javascript
    fullConfig.shard
    ```

    **Type**

    - [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")
      - `total`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        The total number of shards.

      - `current`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        The index of the shard to execute, one-based.

    &nbsp;
- name: fullConfig.updateSnapshots
  id: api/class-fullconfig#full-config-update-snapshots
  summary: See testConfig.updateSnapshots
  belongs_to: FullConfig
  description: |-
    ### updateSnapshots[​](#full-config-update-snapshots "Direct link to updateSnapshots")

    See [testConfig.updateSnapshots](class-testconfig#test-config-update-snapshots).

    **Usage**

    ``` javascript
    fullConfig.updateSnapshots
    ```

    **Type**

    - "all" \| "none" \| "missing"

    &nbsp;
- name: fullConfig.version
  id: api/class-fullconfig#full-config-version
  summary: Playwright version
  belongs_to: FullConfig
  description: |-
    ### version[​](#full-config-version "Direct link to version")

    Playwright version.

    **Usage**

    ``` javascript
    fullConfig.version
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: fullConfig.webServer
  id: api/class-fullconfig#full-config-web-server
  summary: See testConfig.webServer
  belongs_to: FullConfig
  description: |-
    ### webServer[​](#full-config-web-server "Direct link to webServer")

    See [testConfig.webServer](class-testconfig#test-config-web-server).

    **Usage**

    ``` javascript
    fullConfig.webServer
    ```

    **Type**

    - [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

    &nbsp;
- name: fullConfig.workers
  id: api/class-fullconfig#full-config-workers
  summary: See testConfig.workers
  belongs_to: FullConfig
  description: "### workers[​](#full-config-workers \"Direct link to workers\")\n\nSee [testConfig.workers](class-testconfig#test-config-workers).\n\n**Usage**\n\n``` javascript\nfullConfig.workers\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-fullconfig](https://playwright.dev/docs/api/class-fullconfig)"
- name: FullProject
  id: api/class-fullproject
  summary: Runtime representation of the test project configuration
  description: "# FullProject\n\nRuntime representation of the test project configuration. It is accessible in the tests via [testInfo.project](class-testinfo#test-info-project) and [workerInfo.project](class-workerinfo#worker-info-project) and is passed to the test reporters. To see the format of the project in the Playwright configuration file please see [TestProject](class-testproject \"TestProject\") instead.\n\n## Properties[​](#properties \"Direct link to Properties\")\n\n### dependencies[​](#full-project-dependencies \"Direct link to dependencies\")\n\nSee [testProject.dependencies](class-testproject#test-project-dependencies).\n\n**Usage**\n\n``` javascript\nfullProject.dependencies\n```\n\n**Type**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### grep[​](#full-project-grep \"Direct link to grep\")\n\nSee [testProject.grep](class-testproject#test-project-grep).\n\n**Usage**\n\n``` javascript\nfullProject.grep\n```\n\n**Type**\n\n- [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\\>\n\n### grepInvert[​](#full-project-grep-invert \"Direct link to grepInvert\")\n\nSee [testProject.grepInvert](class-testproject#test-project-grep-invert).\n\n**Usage**\n\n``` javascript\nfullProject.grepInvert\n```\n\n**Type**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\\>\n\n### metadata[​](#full-project-metadata \"Direct link to metadata\")\n\nSee [testProject.metadata](class-testproject#test-project-metadata).\n\n**Usage**\n\n``` javascript\nfullProject.metadata\n```\n\n**Type**\n\n- [Metadata](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object<string, any>\")\n\n### name[​](#full-project-name \"Direct link to name\")\n\nSee [testProject.name](class-testproject#test-project-name).\n\n**Usage**\n\n``` javascript\nfullProject.name\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### outputDir[​](#full-project-output-dir \"Direct link to outputDir\")\n\nSee [testProject.outputDir](class-testproject#test-project-output-dir).\n\n**Usage**\n\n``` javascript\nfullProject.outputDir\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### repeatEach[​](#full-project-repeat-each \"Direct link to repeatEach\")\n\nSee [testProject.repeatEach](class-testproject#test-project-repeat-each).\n\n**Usage**\n\n``` javascript\nfullProject.repeatEach\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### retries[​](#full-project-retries \"Direct link to retries\")\n\nSee [testProject.retries](class-testproject#test-project-retries).\n\n**Usage**\n\n``` javascript\nfullProject.retries\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### snapshotDir[​](#full-project-snapshot-dir \"Direct link to snapshotDir\")\n\nSee [testProject.snapshotDir](class-testproject#test-project-snapshot-dir).\n\n**Usage**\n\n``` javascript\nfullProject.snapshotDir\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### teardown[​](#full-project-teardown \"Direct link to teardown\")\n\nSee [testProject.teardown](class-testproject#test-project-teardown).\n\n**Usage**\n\n``` javascript\nfullProject.teardown\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### testDir[​](#full-project-test-dir \"Direct link to testDir\")\n\nSee [testProject.testDir](class-testproject#test-project-test-dir).\n\n**Usage**\n\n``` javascript\nfullProject.testDir\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### testIgnore[​](#full-project-test-ignore \"Direct link to testIgnore\")\n\nSee [testProject.testIgnore](class-testproject#test-project-test-ignore).\n\n**Usage**\n\n``` javascript\nfullProject.testIgnore\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\\>\n\n### testMatch[​](#full-project-test-match \"Direct link to testMatch\")\n\nSee [testProject.testMatch](class-testproject#test-project-test-match).\n\n**Usage**\n\n``` javascript\nfullProject.testMatch\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\\>\n\n### timeout[​](#full-project-timeout \"Direct link to timeout\")\n\nSee [testProject.timeout](class-testproject#test-project-timeout).\n\n**Usage**\n\n``` javascript\nfullProject.timeout\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### use[​](#full-project-use \"Direct link to use\")\n\nSee [testProject.use](class-testproject#test-project-use).\n\n**Usage**\n\n``` javascript\nfullProject.use\n```\n\n**Type**\n\n- [Fixtures](class-fixtures \"Fixtures\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-fullproject](https://playwright.dev/docs/api/class-fullproject)"
- name: fullProject.dependencies
  id: api/class-fullproject#full-project-dependencies
  summary: See testProject.dependencies
  belongs_to: FullProject
  description: |-
    ### dependencies[​](#full-project-dependencies "Direct link to dependencies")

    See [testProject.dependencies](class-testproject#test-project-dependencies).

    **Usage**

    ``` javascript
    fullProject.dependencies
    ```

    **Type**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>
- name: fullProject.grep
  id: api/class-fullproject#full-project-grep
  summary: See testProject.grep
  belongs_to: FullProject
  description: |-
    ### grep[​](#full-project-grep "Direct link to grep")

    See [testProject.grep](class-testproject#test-project-grep).

    **Usage**

    ``` javascript
    fullProject.grep
    ```

    **Type**

    - [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")\>

    &nbsp;
- name: fullProject.grepInvert
  id: api/class-fullproject#full-project-grep-invert
  summary: See testProject.grepInvert
  belongs_to: FullProject
  description: |-
    ### grepInvert[​](#full-project-grep-invert "Direct link to grepInvert")

    See [testProject.grepInvert](class-testproject#test-project-grep-invert).

    **Usage**

    ``` javascript
    fullProject.grepInvert
    ```

    **Type**

    - [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")\>

    &nbsp;
- name: fullProject.metadata
  id: api/class-fullproject#full-project-metadata
  summary: See testProject.metadata
  belongs_to: FullProject
  description: |-
    ### metadata[​](#full-project-metadata "Direct link to metadata")

    See [testProject.metadata](class-testproject#test-project-metadata).

    **Usage**

    ``` javascript
    fullProject.metadata
    ```

    **Type**

    - [Metadata](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object<string, any>")

    &nbsp;
- name: fullProject.name
  id: api/class-fullproject#full-project-name
  summary: See testProject.name
  belongs_to: FullProject
  description: |-
    ### name[​](#full-project-name "Direct link to name")

    See [testProject.name](class-testproject#test-project-name).

    **Usage**

    ``` javascript
    fullProject.name
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: fullProject.outputDir
  id: api/class-fullproject#full-project-output-dir
  summary: See testProject.outputDir
  belongs_to: FullProject
  description: |-
    ### outputDir[​](#full-project-output-dir "Direct link to outputDir")

    See [testProject.outputDir](class-testproject#test-project-output-dir).

    **Usage**

    ``` javascript
    fullProject.outputDir
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: fullProject.repeatEach
  id: api/class-fullproject#full-project-repeat-each
  summary: See testProject.repeatEach
  belongs_to: FullProject
  description: |-
    ### repeatEach[​](#full-project-repeat-each "Direct link to repeatEach")

    See [testProject.repeatEach](class-testproject#test-project-repeat-each).

    **Usage**

    ``` javascript
    fullProject.repeatEach
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: fullProject.retries
  id: api/class-fullproject#full-project-retries
  summary: See testProject.retries
  belongs_to: FullProject
  description: |-
    ### retries[​](#full-project-retries "Direct link to retries")

    See [testProject.retries](class-testproject#test-project-retries).

    **Usage**

    ``` javascript
    fullProject.retries
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: fullProject.snapshotDir
  id: api/class-fullproject#full-project-snapshot-dir
  summary: See testProject.snapshotDir
  belongs_to: FullProject
  description: |-
    ### snapshotDir[​](#full-project-snapshot-dir "Direct link to snapshotDir")

    See [testProject.snapshotDir](class-testproject#test-project-snapshot-dir).

    **Usage**

    ``` javascript
    fullProject.snapshotDir
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: fullProject.teardown
  id: api/class-fullproject#full-project-teardown
  summary: See testProject.teardown
  belongs_to: FullProject
  description: |-
    ### teardown[​](#full-project-teardown "Direct link to teardown")

    See [testProject.teardown](class-testproject#test-project-teardown).

    **Usage**

    ``` javascript
    fullProject.teardown
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: fullProject.testDir
  id: api/class-fullproject#full-project-test-dir
  summary: See testProject.testDir
  belongs_to: FullProject
  description: |-
    ### testDir[​](#full-project-test-dir "Direct link to testDir")

    See [testProject.testDir](class-testproject#test-project-test-dir).

    **Usage**

    ``` javascript
    fullProject.testDir
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: fullProject.testIgnore
  id: api/class-fullproject#full-project-test-ignore
  summary: See testProject.testIgnore
  belongs_to: FullProject
  description: |-
    ### testIgnore[​](#full-project-test-ignore "Direct link to testIgnore")

    See [testProject.testIgnore](class-testproject#test-project-test-ignore).

    **Usage**

    ``` javascript
    fullProject.testIgnore
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")\>

    &nbsp;
- name: fullProject.testMatch
  id: api/class-fullproject#full-project-test-match
  summary: See testProject.testMatch
  belongs_to: FullProject
  description: |-
    ### testMatch[​](#full-project-test-match "Direct link to testMatch")

    See [testProject.testMatch](class-testproject#test-project-test-match).

    **Usage**

    ``` javascript
    fullProject.testMatch
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")\>

    &nbsp;
- name: fullProject.timeout
  id: api/class-fullproject#full-project-timeout
  summary: See testProject.timeout
  belongs_to: FullProject
  description: |-
    ### timeout[​](#full-project-timeout "Direct link to timeout")

    See [testProject.timeout](class-testproject#test-project-timeout).

    **Usage**

    ``` javascript
    fullProject.timeout
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: fullProject.use
  id: api/class-fullproject#full-project-use
  summary: See testProject.use
  belongs_to: FullProject
  description: "### use[​](#full-project-use \"Direct link to use\")\n\nSee [testProject.use](class-testproject#test-project-use).\n\n**Usage**\n\n``` javascript\nfullProject.use\n```\n\n**Type**\n\n- [Fixtures](class-fixtures \"Fixtures\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-fullproject](https://playwright.dev/docs/api/class-fullproject)"
- name: Generating tests
  id: codegen-intro
  summary: Playwright comes with the ability to generate tests out of the box and is a great way to quickly get started with testing
  description: "# Generating tests\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright comes with the ability to generate tests out of the box and is a great way to quickly get started with testing. It will open two windows, a browser window where you interact with the website you wish to test and the Playwright Inspector window where you can record your tests, copy the tests, clear your tests as well as change the language of your tests.\n\n**You will learn**\n\n- [How to record a test](codegen#recording-a-test)\n- [How to generate locators](codegen#generating-locators)\n\n## Running Codegen[​](#running-codegen \"Direct link to Running Codegen\")\n\nUse the `codegen` command to run the test generator followed by the URL of the website you want to generate tests for. The URL is optional and you can always run the command without it and then add the URL directly into the browser window instead.\n\n``` javascript\nnpx playwright codegen demo.playwright.dev/todomvc\n```\n\n### Recording a test[​](#recording-a-test \"Direct link to Recording a test\")\n\nRun `codegen` and perform actions in the browser. Playwright will generate the code for the user interactions. `Codegen` will look at the rendered page and figure out the recommended locator, prioritizing role, text and test id locators. If the generator identifies multiple elements matching the locator, it will improve the locator to make it resilient and uniquely identify the target element, therefore eliminating and reducing test(s) failing and flaking due to locators.\n\nWith the test generator you can record:\n\n- Actions like click or fill by simply interacting with the page\n- Assertions by clicking on one of the icons in the toolbar and then clicking on an element on the page to assert against. You can choose:\n  - `'assert visibility'` to assert that an element is visible\n  - `'assert text'` to assert that an element contains specific text\n  - `'assert value'` to assert that an element has a specific value\n\n###### [​](#-1 \"Direct link to -1\")\n\nWhen you have finished interacting with the page, press the `'record'` button to stop the recording and use the `'copy'` button to copy the generated code to your editor.\n\nUse the `'clear'` button to clear the code to start recording again. Once finished close the Playwright inspector window or stop the terminal command.\n\nTo learn more about generating tests check out or detailed guide on [Codegen](codegen).\n\n### Generating locators[​](#generating-locators \"Direct link to Generating locators\")\n\nYou can generate [locators](locators) with the test generator.\n\n- Press the `'Record'` button to stop the recording and the `'Pick Locator'` button will appear.\n- Click on the `'Pick Locator'` button and then hover over elements in the browser window to see the locator highlighted underneath each element.\n- To choose a locator click on the element you would like to locate and the code for that locator will appear in the locator playground next to the Pick Locator button.\n- You can then edit the locator in the locator playground to fine tune it and see the matching element highlighted in the browser window.\n- Use the copy button to copy the locator and paste it into your code.\n\n###### [​](#-2 \"Direct link to -2\")\n\n### Emulation[​](#emulation \"Direct link to Emulation\")\n\nYou can also generate tests using emulation so as to generate a test for a specific viewport, device, color scheme, as well as emulate the geolocation, language or timezone. The test generator can also generate a test while preserving authenticated state. Check out the [Test Generator](codegen#emulation) guide to learn more.\n\n## What's Next[​](#whats-next \"Direct link to What's Next\")\n\n- [See a trace of your tests](trace-viewer-intro)\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/codegen-intro](https://playwright.dev/docs/codegen-intro)"
- name: GenericAssertions
  id: api/class-genericassertions
  summary: The GenericAssertions class provides assertion methods that can be used to make assertions about any values in the tests
  description: "# GenericAssertions\n\nThe [GenericAssertions](class-genericassertions \"GenericAssertions\") class provides assertion methods that can be used to make assertions about any values in the tests. A new instance of [GenericAssertions](class-genericassertions \"GenericAssertions\") is created by calling [expect()](class-playwrightassertions#playwright-assertions-expect-generic):\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('assert a value', async ({ page }) => {\n  const value = 1;\n  expect(value).toBe(2);\n});\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### any[​](#generic-assertions-any \"Direct link to any\")\n\n`expect.any()` matches any object instance created from the `constructor` or a corresponding primitive type. Use it inside [expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal) to perform pattern matching.\n\n**Usage**\n\n``` javascript\n// Match instance of a class.\nclass Example {}\nexpect(new Example()).toEqual(expect.any(Example));\n\n// Match any number.\nexpect({ prop: 1 }).toEqual({ prop: expect.any(Number) });\n\n// Match any string.\nexpect('abc').toEqual(expect.any(String));\n```\n\n**Arguments**\n\n- `constructor` [Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")\n\n  Constructor of the expected object like `ExampleClass`, or a primitive boxed type like `Number`.\n\n### anything[​](#generic-assertions-anything \"Direct link to anything\")\n\n`expect.anything()` matches everything except `null` and `undefined`. Use it inside [expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal) to perform pattern matching.\n\n**Usage**\n\n``` javascript\nconst value = { prop: 1 };\nexpect(value).toEqual({ prop: expect.anything() });\nexpect(value).not.toEqual({ otherProp: expect.anything() });\n```\n\n### arrayContaining[​](#generic-assertions-array-containing \"Direct link to arrayContaining\")\n\n`expect.arrayContaining()` matches an array that contains all of the elements in the expected array, in any order. Note that received array may be a superset of the expected array and contain some extra elements.\n\nUse this method inside [expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal) to perform pattern matching.\n\n**Usage**\n\n``` javascript\nexpect([1, 2, 3]).toEqual(expect.arrayContaining([3, 1]));\nexpect([1, 2, 3]).not.toEqual(expect.arrayContaining([1, 4]));\n```\n\n**Arguments**\n\n- `expected` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n  Expected array that is a subset of the received value.\n\n### closeTo[​](#generic-assertions-close-to \"Direct link to closeTo\")\n\nCompares floating point numbers for approximate equality. Use this method inside [expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal) to perform pattern matching. When just comparing two numbers, prefer [expect(value).toBeCloseTo()](class-genericassertions#generic-assertions-to-be-close-to).\n\n**Usage**\n\n``` javascript\nexpect({ prop: 0.1 + 0.2 }).not.toEqual({ prop: 0.3 });\nexpect({ prop: 0.1 + 0.2 }).toEqual({ prop: expect.closeTo(0.3, 5) });\n```\n\n**Arguments**\n\n- `expected` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Expected value.\n\n- `numDigits` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n  The number of decimal digits after the decimal point that must be equal.\n\n### objectContaining[​](#generic-assertions-object-containing \"Direct link to objectContaining\")\n\n`expect.objectContaining()` matches an object that contains and matches all of the properties in the expected object. Note that received object may be a superset of the expected object and contain some extra properties.\n\nUse this method inside [expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal) to perform pattern matching. Object properties can be matchers to further relax the expectation. See examples.\n\n**Usage**\n\n``` javascript\n// Assert some of the properties.\nexpect({ foo: 1, bar: 2 }).toEqual(expect.objectContaining({ foo: 1 }));\n\n// Matchers can be used on the properties as well.\nexpect({ foo: 1, bar: 2 }).toEqual(expect.objectContaining({ bar: expect.any(Number) }));\n\n// Complex matching of sub-properties.\nexpect({\n  list: [1, 2, 3],\n  obj: { prop: 'Hello world!', another: 'some other value' },\n  extra: 'extra',\n}).toEqual(expect.objectContaining({\n  list: expect.arrayContaining([2, 3]),\n  obj: expect.objectContaining({ prop: expect.stringContaining('Hello') }),\n}));\n```\n\n**Arguments**\n\n- `expected` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n  Expected object pattern that contains a subset of the properties.\n\n### stringContaining[​](#generic-assertions-string-containing \"Direct link to stringContaining\")\n\n`expect.stringContaining()` matches a string that contains the expected substring. Use this method inside [expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal) to perform pattern matching.\n\n**Usage**\n\n``` javascript\nexpect('Hello world!').toEqual(expect.stringContaining('Hello'));\n```\n\n**Arguments**\n\n- `expected` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Expected substring.\n\n### stringMatching[​](#generic-assertions-string-matching \"Direct link to stringMatching\")\n\n`expect.stringMatching()` matches a received string that in turn matches the expected pattern. Use this method inside [expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal) to perform pattern matching.\n\n**Usage**\n\n``` javascript\nexpect('123ms').toEqual(expect.stringMatching(/\\d+m?s/));\n\n// Inside another matcher.\nexpect({\n  status: 'passed',\n  time: '123ms',\n}).toEqual({\n  status: expect.stringMatching(/passed|failed/),\n  time: expect.stringMatching(/\\d+m?s/),\n});\n```\n\n**Arguments**\n\n- `expected` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Pattern that expected string should match.\n\n### toBe[​](#generic-assertions-to-be \"Direct link to toBe\")\n\nCompares value with `expected` by calling `Object.is`. This method compares objects by reference instead of their contents, similarly to the strict equality operator `===`.\n\n**Usage**\n\n``` javascript\nconst value = { prop: 1 };\nexpect(value).toBe(value);\nexpect(value).not.toBe({});\nexpect(value.prop).toBe(1);\n```\n\n**Arguments**\n\n- `expected` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n  Expected value.\n\n### toBeCloseTo[​](#generic-assertions-to-be-close-to \"Direct link to toBeCloseTo\")\n\nCompares floating point numbers for approximate equality. Use this method instead of [expect(value).toBe()](class-genericassertions#generic-assertions-to-be) when comparing floating point numbers.\n\n**Usage**\n\n``` javascript\nexpect(0.1 + 0.2).not.toBe(0.3);\nexpect(0.1 + 0.2).toBeCloseTo(0.3, 5);\n```\n\n**Arguments**\n\n- `expected` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Expected value.\n\n- `numDigits` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n  The number of decimal digits after the decimal point that must be equal.\n\n### toBeDefined[​](#generic-assertions-to-be-defined \"Direct link to toBeDefined\")\n\nEnsures that value is not `undefined`.\n\n**Usage**\n\n``` javascript\nconst value = null;\nexpect(value).toBeDefined();\n```\n\n### toBeFalsy[​](#generic-assertions-to-be-falsy \"Direct link to toBeFalsy\")\n\nEnsures that value is false in a boolean context, one of `false`, `0`, `''`, `null`, `undefined` or `NaN`. Use this method when you don't care about the specific value.\n\n**Usage**\n\n``` javascript\nconst value = null;\nexpect(value).toBeFalsy();\n```\n\n### toBeGreaterThan[​](#generic-assertions-to-be-greater-than \"Direct link to toBeGreaterThan\")\n\nEnsures that `value > expected` for number or big integer values.\n\n**Usage**\n\n``` javascript\nconst value = 42;\nexpect(value).toBeGreaterThan(1);\n```\n\n**Arguments**\n\n- `expected` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| \\[bigint\\]\n\n  The value to compare to.\n\n### toBeGreaterThanOrEqual[​](#generic-assertions-to-be-greater-than-or-equal \"Direct link to toBeGreaterThanOrEqual\")\n\nEnsures that `value >= expected` for number or big integer values.\n\n**Usage**\n\n``` javascript\nconst value = 42;\nexpect(value).toBeGreaterThanOrEqual(42);\n```\n\n**Arguments**\n\n- `expected` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| \\[bigint\\]\n\n  The value to compare to.\n\n### toBeInstanceOf[​](#generic-assertions-to-be-instance-of \"Direct link to toBeInstanceOf\")\n\nEnsures that value is an instance of a class. Uses `instanceof` operator.\n\n**Usage**\n\n``` javascript\nexpect(page).toBeInstanceOf(Page);\n\nclass Example {}\nexpect(new Example()).toBeInstanceOf(Example);\n```\n\n**Arguments**\n\n- `expected` [Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")\n\n  The class or constructor function.\n\n### toBeLessThan[​](#generic-assertions-to-be-less-than \"Direct link to toBeLessThan\")\n\nEnsures that `value < expected` for number or big integer values.\n\n**Usage**\n\n``` javascript\nconst value = 42;\nexpect(value).toBeLessThan(100);\n```\n\n**Arguments**\n\n- `expected` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| \\[bigint\\]\n\n  The value to compare to.\n\n### toBeLessThanOrEqual[​](#generic-assertions-to-be-less-than-or-equal \"Direct link to toBeLessThanOrEqual\")\n\nEnsures that `value <= expected` for number or big integer values.\n\n**Usage**\n\n``` javascript\nconst value = 42;\nexpect(value).toBeLessThanOrEqual(42);\n```\n\n**Arguments**\n\n- `expected` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| \\[bigint\\]\n\n  The value to compare to.\n\n### toBeNaN[​](#generic-assertions-to-be-na-n \"Direct link to toBeNaN\")\n\nEnsures that value is `NaN`.\n\n**Usage**\n\n``` javascript\nconst value = NaN;\nexpect(value).toBeNaN();\n```\n\n### toBeNull[​](#generic-assertions-to-be-null \"Direct link to toBeNull\")\n\nEnsures that value is `null`.\n\n**Usage**\n\n``` javascript\nconst value = null;\nexpect(value).toBeNull();\n```\n\n### toBeTruthy[​](#generic-assertions-to-be-truthy \"Direct link to toBeTruthy\")\n\nEnsures that value is true in a boolean context, **anything but** `false`, `0`, `''`, `null`, `undefined` or `NaN`. Use this method when you don't care about the specific value.\n\n**Usage**\n\n``` javascript\nconst value = { example: 'value' };\nexpect(value).toBeTruthy();\n```\n\n### toBeUndefined[​](#generic-assertions-to-be-undefined \"Direct link to toBeUndefined\")\n\nEnsures that value is `undefined`.\n\n**Usage**\n\n``` javascript\nconst value = undefined;\nexpect(value).toBeUndefined();\n```\n\n### toContain(expected)[​](#generic-assertions-to-contain-1 \"Direct link to toContain(expected)\")\n\nEnsures that string value contains an expected substring. Comparison is case-sensitive.\n\n**Usage**\n\n``` javascript\nconst value = 'Hello, World';\nexpect(value).toContain('World');\nexpect(value).toContain(',');\n```\n\n**Arguments**\n\n- `expected` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Expected substring.\n\n### toContain(expected)[​](#generic-assertions-to-contain-2 \"Direct link to toContain(expected)\")\n\nEnsures that value is an `Array` or `Set` and contains an expected item.\n\n**Usage**\n\n``` javascript\nconst value = [1, 2, 3];\nexpect(value).toContain(2);\nexpect(new Set(value)).toContain(2);\n```\n\n**Arguments**\n\n- `expected` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n  Expected value in the collection.\n\n### toContainEqual[​](#generic-assertions-to-contain-equal \"Direct link to toContainEqual\")\n\nEnsures that value is an `Array` or `Set` and contains an item equal to the expected.\n\nFor objects, this method recursively checks equality of all fields, rather than comparing objects by reference as performed by [expect(value).toContain()](class-genericassertions#generic-assertions-to-contain-2).\n\nFor primitive values, this method is equivalent to [expect(value).toContain()](class-genericassertions#generic-assertions-to-contain-2).\n\n**Usage**\n\n``` javascript\nconst value = [\n  { example: 1 },\n  { another: 2 },\n  { more: 3 },\n];\nexpect(value).toContainEqual({ another: 2 });\nexpect(new Set(value)).toContainEqual({ another: 2 });\n```\n\n**Arguments**\n\n- `expected` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n  Expected value in the collection.\n\n### toEqual[​](#generic-assertions-to-equal \"Direct link to toEqual\")\n\nCompares contents of the value with contents of `expected`, performing \"deep equality\" check.\n\nFor objects, this method recursively checks equality of all fields, rather than comparing objects by reference as performed by [expect(value).toBe()](class-genericassertions#generic-assertions-to-be).\n\nFor primitive values, this method is equivalent to [expect(value).toBe()](class-genericassertions#generic-assertions-to-be).\n\n**Usage**\n\n``` javascript\nconst value = { prop: 1 };\nexpect(value).toEqual({ prop: 1 });\n```\n\n**Non-strict equality**\n\n[expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal) performs deep equality check that compares contents of the received and expected values. To ensure two objects reference the same instance, use [expect(value).toBe()](class-genericassertions#generic-assertions-to-be) instead.\n\n[expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal) ignores `undefined` properties and array items, and does not insist on object types being equal. For stricter matching, use [expect(value).toStrictEqual()](class-genericassertions#generic-assertions-to-strict-equal).\n\n**Pattern matching**\n\n[expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal) can be also used to perform pattern matching on objects, arrays and primitive types, with the help of the following matchers:\n\n- [expect(value).any()](class-genericassertions#generic-assertions-any)\n- [expect(value).anything()](class-genericassertions#generic-assertions-anything)\n- [expect(value).arrayContaining()](class-genericassertions#generic-assertions-array-containing)\n- [expect(value).closeTo()](class-genericassertions#generic-assertions-close-to)\n- [expect(value).objectContaining()](class-genericassertions#generic-assertions-object-containing)\n- [expect(value).stringContaining()](class-genericassertions#generic-assertions-string-containing)\n- [expect(value).stringMatching()](class-genericassertions#generic-assertions-string-matching)\n\nHere is an example that asserts some of the values inside a complex object:\n\n``` javascript\nexpect({\n  list: [1, 2, 3],\n  obj: { prop: 'Hello world!', another: 'some other value' },\n  extra: 'extra',\n}).toEqual(expect.objectContaining({\n  list: expect.arrayContaining([2, 3]),\n  obj: expect.objectContaining({ prop: expect.stringContaining('Hello') }),\n}));\n```\n\n**Arguments**\n\n- `expected` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n  Expected value.\n\n### toHaveLength[​](#generic-assertions-to-have-length \"Direct link to toHaveLength\")\n\nEnsures that value has a `.length` property equal to `expected`. Useful for arrays and strings.\n\n**Usage**\n\n``` javascript\nexpect('Hello, World').toHaveLength(12);\nexpect([1, 2, 3]).toHaveLength(3);\n```\n\n**Arguments**\n\n- `expected` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Expected length.\n\n### toHaveProperty[​](#generic-assertions-to-have-property \"Direct link to toHaveProperty\")\n\nEnsures that property at provided `keyPath` exists on the object and optionally checks that property is equal to the `expected`. Equality is checked recursively, similarly to [expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal).\n\n**Usage**\n\n``` javascript\nconst value = {\n  a: {\n    b: [42],\n  },\n  c: true,\n};\nexpect(value).toHaveProperty('a.b');\nexpect(value).toHaveProperty('a.b', [42]);\nexpect(value).toHaveProperty('a.b[0]', 42);\nexpect(value).toHaveProperty('c');\nexpect(value).toHaveProperty('c', true);\n```\n\n**Arguments**\n\n- `keyPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Path to the property. Use dot notation `a.b` to check nested properties and indexed `a[2]` notation to check nested array items.\n\n- `expected` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  Optional expected value to compare the property to.\n\n### toMatch[​](#generic-assertions-to-match \"Direct link to toMatch\")\n\nEnsures that string value matches a regular expression.\n\n**Usage**\n\n``` javascript\nconst value = 'Is 42 enough?';\nexpect(value).toMatch(/Is \\d+ enough/);\n```\n\n**Arguments**\n\n- `expected` [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Regular expression to match against.\n\n### toMatchObject[​](#generic-assertions-to-match-object \"Direct link to toMatchObject\")\n\nCompares contents of the value with contents of `expected`, performing \"deep equality\" check. Allows extra properties to be present in the value, unlike [expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal), so you can check just a subset of object properties.\n\nWhen comparing arrays, the number of items must match, and each item is checked recursively.\n\n**Usage**\n\n``` javascript\nconst value = {\n  a: 1,\n  b: 2,\n  c: true,\n};\nexpect(value).toMatchObject({ a: 1, c: true });\nexpect(value).toMatchObject({ b: 2, c: true });\n\nexpect([{ a: 1, b: 2 }]).toMatchObject([{ a: 1 }]);\n```\n\n**Arguments**\n\n- `expected` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\n\n  The expected object value to match against.\n\n### toStrictEqual[​](#generic-assertions-to-strict-equal \"Direct link to toStrictEqual\")\n\nCompares contents of the value with contents of `expected` **and** their types.\n\nDifferences from [expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal):\n\n- Keys with undefined properties are checked. For example, `{ a: undefined, b: 2 }` does not match `{ b: 2 }`.\n- Array sparseness is checked. For example, `[, 1]` does not match `[undefined, 1]`.\n- Object types are checked to be equal. For example, a class instance with fields `a` and `b` will not equal a literal object with fields `a` and `b`.\n\n**Usage**\n\n``` javascript\nconst value = { prop: 1 };\nexpect(value).toStrictEqual({ prop: 1 });\n```\n\n**Arguments**\n\n- `expected` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n  Expected value.\n\n### toThrow[​](#generic-assertions-to-throw \"Direct link to toThrow\")\n\nCalls the function and ensures it throws an error.\n\nOptionally compares the error with `expected`. Allowed expected values:\n\n- Regular expression - error message should **match** the pattern.\n- String - error message should **include** the substring.\n- Error object - error message should be **equal to** the message property of the object.\n- Error class - error object should be an **instance of** the class.\n\n**Usage**\n\n``` javascript\nexpect(() => {\n  throw new Error('Something bad');\n}).toThrow();\n\nexpect(() => {\n  throw new Error('Something bad');\n}).toThrow(/something/);\n\nexpect(() => {\n  throw new Error('Something bad');\n}).toThrow(Error);\n```\n\n**Arguments**\n\n- `expected` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  Expected error message or error object.\n\n### toThrowError[​](#generic-assertions-to-throw-error \"Direct link to toThrowError\")\n\nAn alias for [expect(value).toThrow()](class-genericassertions#generic-assertions-to-throw).\n\n**Usage**\n\n``` javascript\nexpect(() => {\n  throw new Error('Something bad');\n}).toThrowError();\n```\n\n**Arguments**\n\n- `expected` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  Expected error message or error object.\n\n## Properties[​](#properties \"Direct link to Properties\")\n\n### not[​](#generic-assertions-not \"Direct link to not\")\n\nMakes the assertion check for the opposite condition. For example, the following code passes:\n\n``` javascript\nconst value = 1;\nexpect(value).not.toBe(2);\n```\n\n**Usage**\n\n``` javascript\nexpect(value).not\n```\n\n**Type**\n\n- [GenericAssertions](class-genericassertions \"GenericAssertions\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-genericassertions](https://playwright.dev/docs/api/class-genericassertions)"
- name: genericAssertions.any
  id: api/class-genericassertions#generic-assertions-any
  summary: expect.any() matches any object instance created from the constructor or a corresponding primitive type
  belongs_to: GenericAssertions
  description: |-
    ### any[​](#generic-assertions-any "Direct link to any")

    `expect.any()` matches any object instance created from the `constructor` or a corresponding primitive type. Use it inside [expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal) to perform pattern matching.

    **Usage**

    ``` javascript
    // Match instance of a class.
    class Example {}
    expect(new Example()).toEqual(expect.any(Example));

    // Match any number.
    expect({ prop: 1 }).toEqual({ prop: expect.any(Number) });

    // Match any string.
    expect('abc').toEqual(expect.any(String));
    ```

    **Arguments**

    - `constructor` [Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")

      Constructor of the expected object like `ExampleClass`, or a primitive boxed type like `Number`.
- name: genericAssertions.anything
  id: api/class-genericassertions#generic-assertions-anything
  summary: expect.anything() matches everything except null and undefined
  belongs_to: GenericAssertions
  description: |-
    ### anything[​](#generic-assertions-anything "Direct link to anything")

    `expect.anything()` matches everything except `null` and `undefined`. Use it inside [expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal) to perform pattern matching.

    **Usage**

    ``` javascript
    const value = { prop: 1 };
    expect(value).toEqual({ prop: expect.anything() });
    expect(value).not.toEqual({ otherProp: expect.anything() });
    ```
- name: genericAssertions.arrayContaining
  id: api/class-genericassertions#generic-assertions-array-containing
  summary: expect.arrayContaining() matches an array that contains all of the elements in the expected array, in any order
  belongs_to: GenericAssertions
  description: |-
    ### arrayContaining[​](#generic-assertions-array-containing "Direct link to arrayContaining")

    `expect.arrayContaining()` matches an array that contains all of the elements in the expected array, in any order. Note that received array may be a superset of the expected array and contain some extra elements.

    Use this method inside [expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal) to perform pattern matching.

    **Usage**

    ``` javascript
    expect([1, 2, 3]).toEqual(expect.arrayContaining([3, 1]));
    expect([1, 2, 3]).not.toEqual(expect.arrayContaining([1, 4]));
    ```

    **Arguments**

    - `expected`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>

      Expected array that is a subset of the received value.

    &nbsp;
- name: genericAssertions.closeTo
  id: api/class-genericassertions#generic-assertions-close-to
  summary: Compares floating point numbers for approximate equality
  belongs_to: GenericAssertions
  description: |-
    ### closeTo[​](#generic-assertions-close-to "Direct link to closeTo")

    Compares floating point numbers for approximate equality. Use this method inside [expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal) to perform pattern matching. When just comparing two numbers, prefer [expect(value).toBeCloseTo()](class-genericassertions#generic-assertions-to-be-close-to).

    **Usage**

    ``` javascript
    expect({ prop: 0.1 + 0.2 }).not.toEqual({ prop: 0.3 });
    expect({ prop: 0.1 + 0.2 }).toEqual({ prop: expect.closeTo(0.3, 5) });
    ```

    **Arguments**

    - `expected` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Expected value.

    - `numDigits` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

      The number of decimal digits after the decimal point that must be equal.

    &nbsp;
- name: genericAssertions.not
  id: api/class-genericassertions#generic-assertions-not
  summary: Makes the assertion check for the opposite condition
  belongs_to: GenericAssertions
  description: "### not[​](#generic-assertions-not \"Direct link to not\")\n\nMakes the assertion check for the opposite condition. For example, the following code passes:\n\n``` javascript\nconst value = 1;\nexpect(value).not.toBe(2);\n```\n\n**Usage**\n\n``` javascript\nexpect(value).not\n```\n\n**Type**\n\n- [GenericAssertions](class-genericassertions \"GenericAssertions\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-genericassertions](https://playwright.dev/docs/api/class-genericassertions)"
- name: genericAssertions.objectContaining
  id: api/class-genericassertions#generic-assertions-object-containing
  summary: expect.objectContaining() matches an object that contains and matches all of the properties in the expected object
  belongs_to: GenericAssertions
  description: |-
    ### objectContaining[​](#generic-assertions-object-containing "Direct link to objectContaining")

    `expect.objectContaining()` matches an object that contains and matches all of the properties in the expected object. Note that received object may be a superset of the expected object and contain some extra properties.

    Use this method inside [expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal) to perform pattern matching. Object properties can be matchers to further relax the expectation. See examples.

    **Usage**

    ``` javascript
    // Assert some of the properties.
    expect({ foo: 1, bar: 2 }).toEqual(expect.objectContaining({ foo: 1 }));

    // Matchers can be used on the properties as well.
    expect({ foo: 1, bar: 2 }).toEqual(expect.objectContaining({ bar: expect.any(Number) }));

    // Complex matching of sub-properties.
    expect({
      list: [1, 2, 3],
      obj: { prop: 'Hello world!', another: 'some other value' },
      extra: 'extra',
    }).toEqual(expect.objectContaining({
      list: expect.arrayContaining([2, 3]),
      obj: expect.objectContaining({ prop: expect.stringContaining('Hello') }),
    }));
    ```

    **Arguments**

    - `expected` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

      Expected object pattern that contains a subset of the properties.

    &nbsp;
- name: genericAssertions.stringContaining
  id: api/class-genericassertions#generic-assertions-string-containing
  summary: expect.stringContaining() matches a string that contains the expected substring
  belongs_to: GenericAssertions
  description: |-
    ### stringContaining[​](#generic-assertions-string-containing "Direct link to stringContaining")

    `expect.stringContaining()` matches a string that contains the expected substring. Use this method inside [expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal) to perform pattern matching.

    **Usage**

    ``` javascript
    expect('Hello world!').toEqual(expect.stringContaining('Hello'));
    ```

    **Arguments**

    - `expected` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Expected substring.

    &nbsp;
- name: genericAssertions.stringMatching
  id: api/class-genericassertions#generic-assertions-string-matching
  summary: expect.stringMatching() matches a received string that in turn matches the expected pattern
  belongs_to: GenericAssertions
  description: |-
    ### stringMatching[​](#generic-assertions-string-matching "Direct link to stringMatching")

    `expect.stringMatching()` matches a received string that in turn matches the expected pattern. Use this method inside [expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal) to perform pattern matching.

    **Usage**

    ``` javascript
    expect('123ms').toEqual(expect.stringMatching(/\d+m?s/));

    // Inside another matcher.
    expect({
      status: 'passed',
      time: '123ms',
    }).toEqual({
      status: expect.stringMatching(/passed|failed/),
      time: expect.stringMatching(/\d+m?s/),
    });
    ```

    **Arguments**

    - `expected`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Pattern that expected string should match.

    &nbsp;
- name: genericAssertions.toBe
  id: api/class-genericassertions#generic-assertions-to-be
  summary: Compares value with expected by calling Object.is
  belongs_to: GenericAssertions
  description: |-
    ### toBe[​](#generic-assertions-to-be "Direct link to toBe")

    Compares value with `expected` by calling `Object.is`. This method compares objects by reference instead of their contents, similarly to the strict equality operator `===`.

    **Usage**

    ``` javascript
    const value = { prop: 1 };
    expect(value).toBe(value);
    expect(value).not.toBe({});
    expect(value.prop).toBe(1);
    ```

    **Arguments**

    - `expected` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

      Expected value.

    &nbsp;
- name: genericAssertions.toBeCloseTo
  id: api/class-genericassertions#generic-assertions-to-be-close-to
  summary: Compares floating point numbers for approximate equality
  belongs_to: GenericAssertions
  description: |-
    ### toBeCloseTo[​](#generic-assertions-to-be-close-to "Direct link to toBeCloseTo")

    Compares floating point numbers for approximate equality. Use this method instead of [expect(value).toBe()](class-genericassertions#generic-assertions-to-be) when comparing floating point numbers.

    **Usage**

    ``` javascript
    expect(0.1 + 0.2).not.toBe(0.3);
    expect(0.1 + 0.2).toBeCloseTo(0.3, 5);
    ```

    **Arguments**

    - `expected` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Expected value.

    - `numDigits` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

      The number of decimal digits after the decimal point that must be equal.

    &nbsp;
- name: genericAssertions.toBeDefined
  id: api/class-genericassertions#generic-assertions-to-be-defined
  summary: Ensures that value is not undefined
  belongs_to: GenericAssertions
  description: |-
    ### toBeDefined[​](#generic-assertions-to-be-defined "Direct link to toBeDefined")

    Ensures that value is not `undefined`.

    **Usage**

    ``` javascript
    const value = null;
    expect(value).toBeDefined();
    ```
- name: genericAssertions.toBeFalsy
  id: api/class-genericassertions#generic-assertions-to-be-falsy
  summary: Ensures that value is false in a boolean context, one of false, 0, '', null, undefined or NaN
  belongs_to: GenericAssertions
  description: |-
    ### toBeFalsy[​](#generic-assertions-to-be-falsy "Direct link to toBeFalsy")

    Ensures that value is false in a boolean context, one of `false`, `0`, `''`, `null`, `undefined` or `NaN`. Use this method when you don't care about the specific value.

    **Usage**

    ``` javascript
    const value = null;
    expect(value).toBeFalsy();
    ```
- name: genericAssertions.toBeGreaterThan
  id: api/class-genericassertions#generic-assertions-to-be-greater-than
  summary: Ensures that value > expected for number or big integer values
  belongs_to: GenericAssertions
  description: |-
    ### toBeGreaterThan[​](#generic-assertions-to-be-greater-than "Direct link to toBeGreaterThan")

    Ensures that `value > expected` for number or big integer values.

    **Usage**

    ``` javascript
    const value = 42;
    expect(value).toBeGreaterThan(1);
    ```

    **Arguments**

    - `expected`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| \[bigint\]

      The value to compare to.

    &nbsp;
- name: genericAssertions.toBeGreaterThanOrEqual
  id: api/class-genericassertions#generic-assertions-to-be-greater-than-or-equal
  summary: Ensures that value >= expected for number or big integer values
  belongs_to: GenericAssertions
  description: |-
    ### toBeGreaterThanOrEqual[​](#generic-assertions-to-be-greater-than-or-equal "Direct link to toBeGreaterThanOrEqual")

    Ensures that `value >= expected` for number or big integer values.

    **Usage**

    ``` javascript
    const value = 42;
    expect(value).toBeGreaterThanOrEqual(42);
    ```

    **Arguments**

    - `expected`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| \[bigint\]

      The value to compare to.

    &nbsp;
- name: genericAssertions.toBeInstanceOf
  id: api/class-genericassertions#generic-assertions-to-be-instance-of
  summary: Ensures that value is an instance of a class
  belongs_to: GenericAssertions
  description: |-
    ### toBeInstanceOf[​](#generic-assertions-to-be-instance-of "Direct link to toBeInstanceOf")

    Ensures that value is an instance of a class. Uses `instanceof` operator.

    **Usage**

    ``` javascript
    expect(page).toBeInstanceOf(Page);

    class Example {}
    expect(new Example()).toBeInstanceOf(Example);
    ```

    **Arguments**

    - `expected` [Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")

      The class or constructor function.

    &nbsp;
- name: genericAssertions.toBeLessThan
  id: api/class-genericassertions#generic-assertions-to-be-less-than
  summary: Ensures that value < expected for number or big integer values
  belongs_to: GenericAssertions
  description: |-
    ### toBeLessThan[​](#generic-assertions-to-be-less-than "Direct link to toBeLessThan")

    Ensures that `value < expected` for number or big integer values.

    **Usage**

    ``` javascript
    const value = 42;
    expect(value).toBeLessThan(100);
    ```

    **Arguments**

    - `expected`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| \[bigint\]

      The value to compare to.

    &nbsp;
- name: genericAssertions.toBeLessThanOrEqual
  id: api/class-genericassertions#generic-assertions-to-be-less-than-or-equal
  summary: Ensures that value <= expected for number or big integer values
  belongs_to: GenericAssertions
  description: |-
    ### toBeLessThanOrEqual[​](#generic-assertions-to-be-less-than-or-equal "Direct link to toBeLessThanOrEqual")

    Ensures that `value <= expected` for number or big integer values.

    **Usage**

    ``` javascript
    const value = 42;
    expect(value).toBeLessThanOrEqual(42);
    ```

    **Arguments**

    - `expected`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| \[bigint\]

      The value to compare to.

    &nbsp;
- name: genericAssertions.toBeNaN
  id: api/class-genericassertions#generic-assertions-to-be-na-n
  summary: Ensures that value is NaN
  belongs_to: GenericAssertions
  description: |-
    ### toBeNaN[​](#generic-assertions-to-be-na-n "Direct link to toBeNaN")

    Ensures that value is `NaN`.

    **Usage**

    ``` javascript
    const value = NaN;
    expect(value).toBeNaN();
    ```
- name: genericAssertions.toBeNull
  id: api/class-genericassertions#generic-assertions-to-be-null
  summary: Ensures that value is null
  belongs_to: GenericAssertions
  description: |-
    ### toBeNull[​](#generic-assertions-to-be-null "Direct link to toBeNull")

    Ensures that value is `null`.

    **Usage**

    ``` javascript
    const value = null;
    expect(value).toBeNull();
    ```
- name: genericAssertions.toBeTruthy
  id: api/class-genericassertions#generic-assertions-to-be-truthy
  summary: Ensures that value is true in a boolean context, anything but false, 0, '', null, undefined or NaN
  belongs_to: GenericAssertions
  description: |-
    ### toBeTruthy[​](#generic-assertions-to-be-truthy "Direct link to toBeTruthy")

    Ensures that value is true in a boolean context, **anything but** `false`, `0`, `''`, `null`, `undefined` or `NaN`. Use this method when you don't care about the specific value.

    **Usage**

    ``` javascript
    const value = { example: 'value' };
    expect(value).toBeTruthy();
    ```
- name: genericAssertions.toBeUndefined
  id: api/class-genericassertions#generic-assertions-to-be-undefined
  summary: Ensures that value is undefined
  belongs_to: GenericAssertions
  description: |-
    ### toBeUndefined[​](#generic-assertions-to-be-undefined "Direct link to toBeUndefined")

    Ensures that value is `undefined`.

    **Usage**

    ``` javascript
    const value = undefined;
    expect(value).toBeUndefined();
    ```
- name: genericAssertions.toContain(expected)
  id: api/class-genericassertions#generic-assertions-to-contain-1
  summary: Ensures that string value contains an expected substring
  belongs_to: GenericAssertions
  description: |-
    ### toContain(expected)[​](#generic-assertions-to-contain-1 "Direct link to toContain(expected)")

    Ensures that string value contains an expected substring. Comparison is case-sensitive.

    **Usage**

    ``` javascript
    const value = 'Hello, World';
    expect(value).toContain('World');
    expect(value).toContain(',');
    ```

    **Arguments**

    - `expected` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Expected substring.

    &nbsp;
- name: genericAssertions.toContain(expected)
  id: api/class-genericassertions#generic-assertions-to-contain-2
  summary: Ensures that value is an Array or Set and contains an expected item
  belongs_to: GenericAssertions
  description: |-
    ### toContain(expected)[​](#generic-assertions-to-contain-2 "Direct link to toContain(expected)")

    Ensures that value is an `Array` or `Set` and contains an expected item.

    **Usage**

    ``` javascript
    const value = [1, 2, 3];
    expect(value).toContain(2);
    expect(new Set(value)).toContain(2);
    ```

    **Arguments**

    - `expected` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

      Expected value in the collection.

    &nbsp;
- name: genericAssertions.toContainEqual
  id: api/class-genericassertions#generic-assertions-to-contain-equal
  summary: Ensures that value is an Array or Set and contains an item equal to the expected
  belongs_to: GenericAssertions
  description: |-
    ### toContainEqual[​](#generic-assertions-to-contain-equal "Direct link to toContainEqual")

    Ensures that value is an `Array` or `Set` and contains an item equal to the expected.

    For objects, this method recursively checks equality of all fields, rather than comparing objects by reference as performed by [expect(value).toContain()](class-genericassertions#generic-assertions-to-contain-2).

    For primitive values, this method is equivalent to [expect(value).toContain()](class-genericassertions#generic-assertions-to-contain-2).

    **Usage**

    ``` javascript
    const value = [
      { example: 1 },
      { another: 2 },
      { more: 3 },
    ];
    expect(value).toContainEqual({ another: 2 });
    expect(new Set(value)).toContainEqual({ another: 2 });
    ```

    **Arguments**

    - `expected` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

      Expected value in the collection.

    &nbsp;
- name: genericAssertions.toEqual
  id: api/class-genericassertions#generic-assertions-to-equal
  summary: Compares contents of the value with contents of expected, performing "deep equality" check
  belongs_to: GenericAssertions
  description: |-
    ### toEqual[​](#generic-assertions-to-equal "Direct link to toEqual")

    Compares contents of the value with contents of `expected`, performing "deep equality" check.

    For objects, this method recursively checks equality of all fields, rather than comparing objects by reference as performed by [expect(value).toBe()](class-genericassertions#generic-assertions-to-be).

    For primitive values, this method is equivalent to [expect(value).toBe()](class-genericassertions#generic-assertions-to-be).

    **Usage**

    ``` javascript
    const value = { prop: 1 };
    expect(value).toEqual({ prop: 1 });
    ```

    **Non-strict equality**

    [expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal) performs deep equality check that compares contents of the received and expected values. To ensure two objects reference the same instance, use [expect(value).toBe()](class-genericassertions#generic-assertions-to-be) instead.

    [expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal) ignores `undefined` properties and array items, and does not insist on object types being equal. For stricter matching, use [expect(value).toStrictEqual()](class-genericassertions#generic-assertions-to-strict-equal).

    **Pattern matching**

    [expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal) can be also used to perform pattern matching on objects, arrays and primitive types, with the help of the following matchers:

    - [expect(value).any()](class-genericassertions#generic-assertions-any)
    - [expect(value).anything()](class-genericassertions#generic-assertions-anything)
    - [expect(value).arrayContaining()](class-genericassertions#generic-assertions-array-containing)
    - [expect(value).closeTo()](class-genericassertions#generic-assertions-close-to)
    - [expect(value).objectContaining()](class-genericassertions#generic-assertions-object-containing)
    - [expect(value).stringContaining()](class-genericassertions#generic-assertions-string-containing)
    - [expect(value).stringMatching()](class-genericassertions#generic-assertions-string-matching)

    Here is an example that asserts some of the values inside a complex object:

    ``` javascript
    expect({
      list: [1, 2, 3],
      obj: { prop: 'Hello world!', another: 'some other value' },
      extra: 'extra',
    }).toEqual(expect.objectContaining({
      list: expect.arrayContaining([2, 3]),
      obj: expect.objectContaining({ prop: expect.stringContaining('Hello') }),
    }));
    ```

    **Arguments**

    - `expected` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

      Expected value.

    &nbsp;
- name: genericAssertions.toHaveLength
  id: api/class-genericassertions#generic-assertions-to-have-length
  summary: Ensures that value has a .length property equal to expected
  belongs_to: GenericAssertions
  description: |-
    ### toHaveLength[​](#generic-assertions-to-have-length "Direct link to toHaveLength")

    Ensures that value has a `.length` property equal to `expected`. Useful for arrays and strings.

    **Usage**

    ``` javascript
    expect('Hello, World').toHaveLength(12);
    expect([1, 2, 3]).toHaveLength(3);
    ```

    **Arguments**

    - `expected` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Expected length.

    &nbsp;
- name: genericAssertions.toHaveProperty
  id: api/class-genericassertions#generic-assertions-to-have-property
  summary: Ensures that property at provided keyPath exists on the object and optionally checks that property is equal to the expected
  belongs_to: GenericAssertions
  description: |-
    ### toHaveProperty[​](#generic-assertions-to-have-property "Direct link to toHaveProperty")

    Ensures that property at provided `keyPath` exists on the object and optionally checks that property is equal to the `expected`. Equality is checked recursively, similarly to [expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal).

    **Usage**

    ``` javascript
    const value = {
      a: {
        b: [42],
      },
      c: true,
    };
    expect(value).toHaveProperty('a.b');
    expect(value).toHaveProperty('a.b', [42]);
    expect(value).toHaveProperty('a.b[0]', 42);
    expect(value).toHaveProperty('c');
    expect(value).toHaveProperty('c', true);
    ```

    **Arguments**

    - `keyPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Path to the property. Use dot notation `a.b` to check nested properties and indexed `a[2]` notation to check nested array items.

    - `expected` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      Optional expected value to compare the property to.

    &nbsp;
- name: genericAssertions.toMatch
  id: api/class-genericassertions#generic-assertions-to-match
  summary: Ensures that string value matches a regular expression
  belongs_to: GenericAssertions
  description: |-
    ### toMatch[​](#generic-assertions-to-match "Direct link to toMatch")

    Ensures that string value matches a regular expression.

    **Usage**

    ``` javascript
    const value = 'Is 42 enough?';
    expect(value).toMatch(/Is \d+ enough/);
    ```

    **Arguments**

    - `expected`[RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Regular expression to match against.

    &nbsp;
- name: genericAssertions.toMatchObject
  id: api/class-genericassertions#generic-assertions-to-match-object
  summary: Compares contents of the value with contents of expected, performing "deep equality" check
  belongs_to: GenericAssertions
  description: |-
    ### toMatchObject[​](#generic-assertions-to-match-object "Direct link to toMatchObject")

    Compares contents of the value with contents of `expected`, performing "deep equality" check. Allows extra properties to be present in the value, unlike [expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal), so you can check just a subset of object properties.

    When comparing arrays, the number of items must match, and each item is checked recursively.

    **Usage**

    ``` javascript
    const value = {
      a: 1,
      b: 2,
      c: true,
    };
    expect(value).toMatchObject({ a: 1, c: true });
    expect(value).toMatchObject({ b: 2, c: true });

    expect([{ a: 1, b: 2 }]).toMatchObject([{ a: 1 }]);
    ```

    **Arguments**

    - `expected`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")

      The expected object value to match against.

    &nbsp;
- name: genericAssertions.toStrictEqual
  id: api/class-genericassertions#generic-assertions-to-strict-equal
  summary: Compares contents of the value with contents of expected and their types
  belongs_to: GenericAssertions
  description: |-
    ### toStrictEqual[​](#generic-assertions-to-strict-equal "Direct link to toStrictEqual")

    Compares contents of the value with contents of `expected` **and** their types.

    Differences from [expect(value).toEqual()](class-genericassertions#generic-assertions-to-equal):

    - Keys with undefined properties are checked. For example, `{ a: undefined, b: 2 }` does not match `{ b: 2 }`.
    - Array sparseness is checked. For example, `[, 1]` does not match `[undefined, 1]`.
    - Object types are checked to be equal. For example, a class instance with fields `a` and `b` will not equal a literal object with fields `a` and `b`.

    **Usage**

    ``` javascript
    const value = { prop: 1 };
    expect(value).toStrictEqual({ prop: 1 });
    ```

    **Arguments**

    - `expected` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

      Expected value.

    &nbsp;
- name: genericAssertions.toThrow
  id: api/class-genericassertions#generic-assertions-to-throw
  summary: Calls the function and ensures it throws an error
  belongs_to: GenericAssertions
  description: |-
    ### toThrow[​](#generic-assertions-to-throw "Direct link to toThrow")

    Calls the function and ensures it throws an error.

    Optionally compares the error with `expected`. Allowed expected values:

    - Regular expression - error message should **match** the pattern.
    - String - error message should **include** the substring.
    - Error object - error message should be **equal to** the message property of the object.
    - Error class - error object should be an **instance of** the class.

    **Usage**

    ``` javascript
    expect(() => {
      throw new Error('Something bad');
    }).toThrow();

    expect(() => {
      throw new Error('Something bad');
    }).toThrow(/something/);

    expect(() => {
      throw new Error('Something bad');
    }).toThrow(Error);
    ```

    **Arguments**

    - `expected` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      Expected error message or error object.

    &nbsp;
- name: genericAssertions.toThrowError
  id: api/class-genericassertions#generic-assertions-to-throw-error
  summary: An alias for expect(value).toThrow()
  belongs_to: GenericAssertions
  description: |-
    ### toThrowError[​](#generic-assertions-to-throw-error "Direct link to toThrowError")

    An alias for [expect(value).toThrow()](class-genericassertions#generic-assertions-to-throw).

    **Usage**

    ``` javascript
    expect(() => {
      throw new Error('Something bad');
    }).toThrowError();
    ```

    **Arguments**

    - `expected` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      Expected error message or error object.

    ## Properties[​](#properties "Direct link to Properties")
- name: Getting started - VS Code
  id: getting-started-vscode
  summary: Playwright Test was created specifically to accommodate the needs of end-to-end testing
  description: "# Getting started - VS Code\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright Test was created specifically to accommodate the needs of end-to-end testing. Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation of Google Chrome for Android and Mobile Safari.\n\nGet started by installing Playwright and generating a test to see it in action. Alternatively you can also get started and run your tests using the [CLI](index).\n\n## Installation[​](#installation \"Direct link to Installation\")\n\nInstall the [VS Code extension from the marketplace](https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright) or from the extensions tab in VS Code.\n\nOnce installed, open the command panel and type:\n\n``` javascript\nInstall Playwright\n```\n\nSelect **Test: Install Playwright** and Choose the browsers you would like to run your tests on. These can be later configured in the [playwright.config](test-configuration) file. You can also choose if you would like to have a GitHub Actions setup to [run your tests on CI](ci-intro).\n\n### Opening the testing sidebar[​](#opening-the-testing-sidebar \"Direct link to Opening the testing sidebar\")\n\nThe testing sidebar can be opened by clicking on the testing icon in the activity bar. This will give you access to the test explorer, which will show you all the tests in your project as well as the Playwright sidebar which includes projects, settings, tools and setup.\n\n## Running tests[​](#running-tests \"Direct link to Running tests\")\n\nYou can run a single test by clicking the green triangle next to your test block to run your test. Playwright will run through each line of the test and when it finishes you will see a green tick next to your test block as well as the time it took to run the test.\n\n### Run tests and show browsers[​](#run-tests-and-show-browsers \"Direct link to Run tests and show browsers\")\n\nYou can also run your tests and show the browsers by selecting the option **Show Browsers** in the testing sidebar. Then when you click the green triangle to run your test the browser will open and you will visually see it run through your test. Leave this selected if you want browsers open for all your tests or uncheck it if you prefer your tests to run in headless mode with no browser open.\n\nUse the **Close all browsers** button to close all browsers.\n\n### View and run all tests[​](#view-and-run-all-tests \"Direct link to View and run all tests\")\n\nView all tests in the testing sidebar and extend the tests by clicking on each test. Tests that have not been run will not have the green check next to them. Run all tests by clicking on the white triangle as you hover over the tests in the testing sidebar.\n\n### Running tests on multiple browsers[​](#running-tests-on-multiple-browsers \"Direct link to Running tests on multiple browsers\")\n\nThe first section in the Playwright sidebar is the projects section. Here you can see all your projects as defined in your Playwright config file. The default config when installing Playwright gives you 3 projects, Chromium, Firefox and WebKit. The first project is selected by default.\n\nTo run tests on multiple projects, select each project by checking the checkboxes next to the project name. Then when you run your tests from the sidebar or by pressing the play button next to the test name, the tests will run on all the selected projects.\n\nYou can also individually run a test on a specific project by clicking the grey play button next to the project name of the test.\n\n### Run tests with trace viewer[​](#run-tests-with-trace-viewer \"Direct link to Run tests with trace viewer\")\n\nFor a better developer experience you can run your tests with the **Show Trace Viewer** option.\n\nThis will open up a full trace of your test where you can step through each action of your tests, explore the timeline, source code and more.\n\nTo learn more about the trace viewer see our [Trace Viewer guide](trace-viewer).\n\n## Debugging tests[​](#debugging-tests \"Direct link to Debugging tests\")\n\nWith the VS Code extension you can debug your tests right in VS Code see error messages, create breakpoints and live debug your tests.\n\n### Error messages[​](#error-messages \"Direct link to Error messages\")\n\nIf your test fails VS Code will show you error messages right in the editor showing what was expected, what was received as well as a complete call log.\n\n### Live debugging[​](#live-debugging \"Direct link to Live debugging\")\n\nYou can debug your test live in VS Code. After running a test with the `Show Browser` option checked, click on any of the locators in VS Code and it will be highlighted in the Browser window. Playwright will highlight it if it exists and show you if there is more than one result\n\nYou can also edit the locators in VS Code and Playwright will show you the changes live in the browser window.\n\n### Run in debug mode[​](#run-in-debug-mode \"Direct link to Run in debug mode\")\n\nTo set a breakpoint click next to the line number where you want the breakpoint to be until a red dot appears. Run the tests in debug mode by right clicking on the line next to the test you want to run.\n\nA browser window will open and the test will run and pause at where the breakpoint is set. You can step through the tests, pause the test and rerun the tests from the menu in VS Code.\n\nTo learn more about debugging, see [Debugging in Visual Studio Code](https://code.visualstudio.com/docs/editor/debugging).\n\n### Debug with trace viewer[​](#debug-with-trace-viewer \"Direct link to Debug with trace viewer\")\n\nFor a better developer experience you can debug your tests with the **Show Trace Viewer** option.\n\nThis will open up a full trace of your test where you can step through each action and see what happened before and after the action. You can also inspect the DOM snapshot, see console logs, network requests, the source code and more.\n\nTo learn more about the trace viewer see our [Trace Viewer guide](trace-viewer).\n\n## Generating tests[​](#generating-tests \"Direct link to Generating tests\")\n\nCodeGen will auto generate your tests for you as you perform actions in the browser and is a great way to quickly get started. The viewport for the browser window is set to a specific width and height. See the [configuration guide](test-configuration) to change the viewport or emulate different environments.\n\n### Record a new test[​](#record-a-new-test \"Direct link to Record a new test\")\n\nTo record a test click on the **Record new** button from the Testing sidebar. This will create a `test-1.spec.ts` file as well as open up a browser window. In the browser go to the URL you wish to test and start clicking around. Playwright will record your actions and generate the test code directly in VS Code. You can also generate assertions by choosing one of the icons in the toolbar and then clicking on an element on the page to assert against. The following assertions can be generated:\n\n- `'assert visibility'` to assert that an element is visible\n- `'assert text'` to assert that an element contains specific text\n- `'assert value'` to assert that an element has a specific value\n\nOnce you are done recording click the **cancel** button or close the browser window. You can then inspect your `test-1.spec.ts` file and see your generated test.\n\n### Record at cursor[​](#record-at-cursor \"Direct link to Record at cursor\")\n\nTo record from a specific point in your test file click the **Record at cursor** button from the Testing sidebar. This generates actions into the existing test at the current cursor position. You can run the test, position the cursor at the end of the test and continue generating the test.\n\n### Picking a locator[​](#picking-a-locator \"Direct link to Picking a locator\")\n\nPick a [locator](locators) and copy it into your test file by clicking the **Pick locator** button form the testing sidebar. Then in the browser click the element you require and it will now show up in the **Pick locator** box in VS Code. Press 'enter' on your keyboard to copy the locator into the clipboard and then paste anywhere in your code. Or press 'escape' if you want to cancel.\n\nPlaywright will look at your page and figure out the best locator, prioritizing [role, text and test id locators](locators). If the generator finds multiple elements matching the locator, it will improve the locator to make it resilient and uniquely identify the target element, so you don't have to worry about failing tests due to locators.\n\n## Project Dependencies[​](#project-dependencies \"Direct link to Project Dependencies\")\n\nYou can use [project dependencies](test-projects) to run tests that depend on other tests. This is useful for **setup** tests such as logging in to a website.\n\n### Running setup tests[​](#running-setup-tests \"Direct link to Running setup tests\")\n\nTo run your setup tests select the **setup** project, as defined in your configuration file, from the project section in the Playwright sidebar. This will give you access to the **setup** tests in the test explorer.\n\nWhen you run a test that depends on the **setup** tests, the **setup** test will run first. Each time you run the test, the **setup** test will run again.\n\n### Running setup tests only once[​](#running-setup-tests-only-once \"Direct link to Running setup tests only once\")\n\nTo run the **setup** test only once, deselect it from the projects section in the Playwright sidebar. The **setup** test is now removed from the test explorer. When you run a test that depends on the **setup** test, it will no longer run the **setup** test, making it much faster and therefore a much better developer experience.\n\n## Global Setup[​](#global-setup \"Direct link to Global Setup\")\n\n**Global setup** tests are run when you execute your first test. This runs only once and is useful for setting up a database or starting a server. You can manually run a **global setup** test by clicking the `Run global setup` option from the **Setup** section in the Playwright sidebar. You can also run **global teardown** tests by clicking the `Run global teardown` option.\n\nGlobal setup will re-run when you debug tests as this ensures an isolated environment and dedicated setup for the test.\n\n## Multiple configurations[​](#multiple-configurations \"Direct link to Multiple configurations\")\n\nIf your project contains more than one playwright configuration file, you can switch between them by first clicking on the gear icon in the top right corner of the Playwright sidebar. This will show you all the configuration files in your project. Select the configuration files you want to use by checking the checkbox next to each one and clicking on the 'ok' button.\n\nYou will now have access to all your tests in the test explorer. To run a test click on the grey triangle next to the file or project name.\n\nTo run all tests from all configurations click on the grey triangle at the top of the test explorer.\n\nTo choose a configuration file to work with simply toggle between them by clicking on the configuration file name in the Playwright sidebar. Now when you use the tools, such as Record a test, it will record a test for the selected configuration file.\n\nYou can easily toggle back and forth between configurations by clicking on the configuration file name in the Playwright sidebar.\n\n## What's next[​](#whats-next \"Direct link to What's next\")\n\n- [Write tests using web first assertions, page fixtures and locators](writing-tests)\n- [Run your tests on CI](ci-intro)\n- [Learn more about the Trace Viewer](trace-viewer)\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/getting-started-vscode](https://playwright.dev/docs/getting-started-vscode)"
- name: Global setup and teardown
  id: test-global-setup-teardown
  summary: 'There are two ways to configure global setup and teardown: using a global setup file and setting it in the config under globalSetup or using project dependencies'
  description: "# Global setup and teardown\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nThere are two ways to configure global setup and teardown: using a global setup file and setting it in the config under [`globalSetup`](#option-2-configure-globalsetup-and-globalteardown) or using [project dependencies](#option-1-project-dependencies). With project dependencies, you define a project that runs before all other projects. This is the recommended way to configure global setup as with Project dependencies your HTML report will show the global setup, trace viewer will record a trace of the setup and fixtures can be used.\n\n## Option 1: Project Dependencies[​](#option-1-project-dependencies \"Direct link to Option 1: Project Dependencies\")\n\n[Project dependencies](api/class-testproject#test-project-dependencies) are a list of projects that need to run before the tests in another project run. They can be useful for configuring the global setup actions so that one project depends on this running first. Using dependencies allows global setup to produce traces and other artifacts.\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nFirst we add a new project with the name 'setup db'. We then give it a [testProject.testMatch](api/class-testproject#test-project-test-match) property in order to match the file called `global.setup.ts`:\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './tests',\n  // ...\n  projects: [\n    {\n      name: 'setup db',\n      testMatch: /global\\.setup\\.ts/,\n    },\n    // {\n    //   other project\n    // }\n  ]\n});\n```\n\nThen we add the [testProject.dependencies](api/class-testproject#test-project-dependencies) property to our projects that depend on the setup project and pass into the array the name of our dependency project, which we defined in the previous step:\n\n``` javascript\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './tests',\n  // ...\n  projects: [\n    {\n      name: 'setup db',\n      testMatch: /global\\.setup\\.ts/,\n    },\n    {\n      name: 'chromium with db',\n      use: { ...devices['Desktop Chrome'] },\n      dependencies: ['setup db'],\n    },\n  ]\n});\n```\n\nIn this example the 'chromium with db' project depends on the 'setup db' project. We then create a setup test, stored at root level of your project (note that setup and teardown code must be defined as regular tests by calling [test()](api/class-test#test-call) function):\n\n``` javascript\nimport { test as setup } from '@playwright/test';\n\nsetup('create new database', async ({ }) => {\n  console.log('creating new database...');\n  // Initialize the database\n});\n```\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('menu', async ({ page }) => {\n  // Your test that depends on the database\n});\n```\n\n### Teardown[​](#teardown \"Direct link to Teardown\")\n\nYou can teardown your setup by adding a [testProject.teardown](api/class-testproject#test-project-teardown) property to your setup project. This will run after all dependent projects have run.\n\nFirst we add the [testProject.teardown](api/class-testproject#test-project-teardown) property to our setup project with the name 'cleanup db' which is the name we gave to our teardown project in the previous step:\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './tests',\n  // ...\n  projects: [\n    {\n      name: 'setup db',\n      testMatch: /global\\.setup\\.ts/,\n      teardown: 'cleanup db',\n    },\n    {\n      name: 'cleanup db',\n      testMatch: /global\\.teardown\\.ts/,\n    },\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n      dependencies: ['setup db'],\n    },\n  ]\n});\n```\n\nThen we create a `global.teardown.ts` file in the tests directory of your project. This will be used to delete the data from the database after all tests have run.\n\n``` javascript\nimport { test as teardown } from '@playwright/test';\n\nteardown('delete database', async ({ }) => {\n  console.log('deleting test database...');\n  // Delete the database\n});\n```\n\n### More examples[​](#more-examples \"Direct link to More examples\")\n\nFor more detailed examples check out:\n\n- our [authentication](auth) guide\n- our blog post [A better global setup in Playwright reusing login with project dependencies](https://dev.to/playwright/a-better-global-setup-in-playwright-reusing-login-with-project-dependencies-14)\n- [v1.31 release video](https://youtu.be/PI50YAPTAs4) to see the demo\n\n## Option 2: Configure globalSetup and globalTeardown[​](#option-2-configure-globalsetup-and-globalteardown \"Direct link to Option 2: Configure globalSetup and globalTeardown\")\n\nYou can use the `globalSetup` option in the [configuration file](test-configuration#advanced-configuration) to set something up once before running all tests. The global setup file must export a single function that takes a config object. This function will be run once before all the tests.\n\nSimilarly, use `globalTeardown` to run something once after all the tests. Alternatively, let `globalSetup` return a function that will be used as a global teardown. You can pass data such as port number, authentication tokens, etc. from your global setup to your tests using environment variables.\n\n> note\n>\n> Using `globalSetup` and `globalTeardown` will not produce traces or artifacts, and options like `headless` or `testIdAttribute` specified in the config file are not applied. If you want to produce traces and artifacts and respect config options, use [project dependencies](#option-1-project-dependencies).\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  globalSetup: require.resolve('./global-setup'),\n  globalTeardown: require.resolve('./global-teardown'),\n});\n```\n\n### Example[​](#example \"Direct link to Example\")\n\nHere is a global setup example that authenticates once and reuses authentication state in tests. It uses the `baseURL` and `storageState` options from the configuration file.\n\n``` javascript\nimport { chromium, type FullConfig } from '@playwright/test';\n\nasync function globalSetup(config: FullConfig) {\n  const { baseURL, storageState } = config.projects[0].use;\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n  await page.goto(baseURL!);\n  await page.getByLabel('User Name').fill('user');\n  await page.getByLabel('Password').fill('password');\n  await page.getByText('Sign in').click();\n  await page.context().storageState({ path: storageState as string });\n  await browser.close();\n}\n\nexport default globalSetup;\n```\n\nSpecify `globalSetup`, `baseURL` and `storageState` in the configuration file.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  globalSetup: require.resolve('./global-setup'),\n  use: {\n    baseURL: 'http://localhost:3000/',\n    storageState: 'state.json',\n  },\n});\n```\n\nTests start already authenticated because we specify `storageState` that was populated by global setup.\n\n``` javascript\nimport { test } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  await page.goto('/');\n  // You are signed in!\n});\n```\n\nYou can make arbitrary data available in your tests from your global setup file by setting them as environment variables via `process.env`.\n\n``` javascript\nimport type { FullConfig } from '@playwright/test';\n\nasync function globalSetup(config: FullConfig) {\n  process.env.FOO = 'some data';\n  // Or a more complicated data structure as JSON:\n  process.env.BAR = JSON.stringify({ some: 'data' });\n}\n\nexport default globalSetup;\n```\n\nTests have access to the `process.env` properties set in the global setup.\n\n``` javascript\nimport { test } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  // environment variables which are set in globalSetup are only available inside test().\n  const { FOO, BAR } = process.env;\n\n  // FOO and BAR properties are populated.\n  expect(FOO).toEqual('some data');\n\n  const complexData = JSON.parse(BAR);\n  expect(BAR).toEqual({ some: 'data' });\n});\n```\n\n### Capturing trace of failures during global setup[​](#capturing-trace-of-failures-during-global-setup \"Direct link to Capturing trace of failures during global setup\")\n\nIn some instances, it may be useful to capture a trace of failures encountered during the global setup. In order to do this, you must [start tracing](api/class-tracing#tracing-start) in your setup, and you must ensure that you [stop tracing](api/class-tracing#tracing-stop) if an error occurs before that error is thrown. This can be achieved by wrapping your setup in a `try...catch` block. Here is an example that expands the global setup example to capture a trace.\n\n``` javascript\nimport { chromium, type FullConfig } from '@playwright/test';\n\nasync function globalSetup(config: FullConfig) {\n  const { baseURL, storageState } = config.projects[0].use;\n  const browser = await chromium.launch();\n  const context = await browser.newContext();\n  const page = await context.newPage();\n  try {\n    await context.tracing.start({ screenshots: true, snapshots: true });\n    await page.goto(baseURL!);\n    await page.getByLabel('User Name').fill('user');\n    await page.getByLabel('Password').fill('password');\n    await page.getByText('Sign in').click();\n    await context.storageState({ path: storageState as string });\n    await context.tracing.stop({\n      path: './test-results/setup-trace.zip',\n    });\n    await browser.close();\n  } catch (error) {\n    await context.tracing.stop({\n      path: './test-results/failed-setup-trace.zip',\n    });\n    await browser.close();\n    throw error;\n  }\n}\n\nexport default globalSetup;\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/test-global-setup-teardown](https://playwright.dev/docs/test-global-setup-teardown)"
- name: Handles
  id: handles
  summary: Playwright can create handles to the page DOM elements or any other objects inside the page
  description: "# Handles\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright can create handles to the page DOM elements or any other objects inside the page. These handles live in the Playwright process, whereas the actual objects live in the browser. There are two types of handles:\n\n- [JSHandle](api/class-jshandle \"JSHandle\") to reference any JavaScript objects in the page\n- [ElementHandle](api/class-elementhandle \"ElementHandle\") to reference DOM elements in the page, it has extra methods that allow performing actions on the elements and asserting their properties.\n\nSince any DOM element in the page is also a JavaScript object, any [ElementHandle](api/class-elementhandle \"ElementHandle\") is a [JSHandle](api/class-jshandle \"JSHandle\") as well.\n\nHandles are used to perform operations on those actual objects in the page. You can evaluate on a handle, get handle properties, pass handle as an evaluation parameter, serialize page object into JSON etc. See the [JSHandle](api/class-jshandle \"JSHandle\") class API for these and methods.\n\n### API reference[​](#api-reference \"Direct link to API reference\")\n\n- [JSHandle](api/class-jshandle \"JSHandle\")\n- [ElementHandle](api/class-elementhandle \"ElementHandle\")\n\nHere is the easiest way to obtain a [JSHandle](api/class-jshandle \"JSHandle\").\n\n``` javascript\nconst jsHandle = await page.evaluateHandle('window');\n//  Use jsHandle for evaluations.\n```\n\n## Element Handles[​](#element-handles \"Direct link to Element Handles\")\n\n> Discouraged\n>\n> The use of [ElementHandle](api/class-elementhandle \"ElementHandle\") is discouraged, use [Locator](api/class-locator \"Locator\") objects and web-first assertions instead.\n\nWhen [ElementHandle](api/class-elementhandle \"ElementHandle\") is required, it is recommended to fetch it with the [page.waitForSelector()](api/class-page#page-wait-for-selector) or [frame.waitForSelector()](api/class-frame#frame-wait-for-selector) methods. These APIs wait for the element to be attached and visible.\n\n``` javascript\n// Get the element handle\nconst elementHandle = page.waitForSelector('#box');\n\n// Assert bounding box for the element\nconst boundingBox = await elementHandle.boundingBox();\nexpect(boundingBox.width).toBe(100);\n\n// Assert attribute for the element\nconst classNames = await elementHandle.getAttribute('class');\nexpect(classNames.includes('highlighted')).toBeTruthy();\n```\n\n## Handles as parameters[​](#handles-as-parameters \"Direct link to Handles as parameters\")\n\nHandles can be passed into the [page.evaluate()](api/class-page#page-evaluate) and similar methods. The following snippet creates a new array in the page, initializes it with data and returns a handle to this array into Playwright. It then uses the handle in subsequent evaluations:\n\n``` javascript\n// Create new array in page.\nconst myArrayHandle = await page.evaluateHandle(() => {\n  window.myArray = [1];\n  return myArray;\n});\n\n// Get the length of the array.\nconst length = await page.evaluate(a => a.length, myArrayHandle);\n\n// Add one more element to the array using the handle\nawait page.evaluate(arg => arg.myArray.push(arg.newElement), {\n  myArray: myArrayHandle,\n  newElement: 2\n});\n\n// Release the object when it's no longer needed.\nawait myArrayHandle.dispose();\n```\n\n## Handle Lifecycle[​](#handle-lifecycle \"Direct link to Handle Lifecycle\")\n\nHandles can be acquired using the page methods such as [page.evaluateHandle()](api/class-page#page-evaluate-handle), [page.$()](api/class-page#page-query-selector) or [page.$$()](api/class-page#page-query-selector-all) or their frame counterparts [frame.evaluateHandle()](api/class-frame#frame-evaluate-handle), [frame.$()](api/class-frame#frame-query-selector) or [frame.$$()](api/class-frame#frame-query-selector-all). Once created, handles will retain object from [garbage collection](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management) unless page navigates or the handle is manually disposed via the [jsHandle.dispose()](api/class-jshandle#js-handle-dispose) method.\n\n### API reference[​](#api-reference-1 \"Direct link to API reference\")\n\n- [JSHandle](api/class-jshandle \"JSHandle\")\n- [ElementHandle](api/class-elementhandle \"ElementHandle\")\n- [elementHandle.boundingBox()](api/class-elementhandle#element-handle-bounding-box)\n- [elementHandle.getAttribute()](api/class-elementhandle#element-handle-get-attribute)\n- [elementHandle.innerText()](api/class-elementhandle#element-handle-inner-text)\n- [elementHandle.innerHTML()](api/class-elementhandle#element-handle-inner-html)\n- [elementHandle.textContent()](api/class-elementhandle#element-handle-text-content)\n- [jsHandle.evaluate()](api/class-jshandle#js-handle-evaluate)\n- [page.evaluateHandle()](api/class-page#page-evaluate-handle)\n- [page.$()](api/class-page#page-query-selector)\n- [page.$$()](api/class-page#page-query-selector-all)\n\n## Locator vs ElementHandle[​](#locator-vs-elementhandle \"Direct link to Locator vs ElementHandle\")\n\n> caution\n>\n> We only recommend using [ElementHandle](api/class-elementhandle \"ElementHandle\") in the rare cases when you need to perform extensive DOM traversal on a static page. For all user actions and assertions use locator instead.\n\nThe difference between the [Locator](api/class-locator \"Locator\") and [ElementHandle](api/class-elementhandle \"ElementHandle\") is that the latter points to a particular element, while Locator captures the logic of how to retrieve that element.\n\nIn the example below, handle points to a particular DOM element on page. If that element changes text or is used by React to render an entirely different component, handle is still pointing to that very stale DOM element. This can lead to unexpected behaviors.\n\n``` javascript\nconst handle = await page.$('text=Submit');\n// ...\nawait handle.hover();\nawait handle.click();\n```\n\nWith the locator, every time the locator is used, up-to-date DOM element is located in the page using the selector. So in the snippet below, underlying DOM element is going to be located twice.\n\n``` javascript\nconst locator = page.getByText('Submit');\n// ...\nawait locator.hover();\nawait locator.click();\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/handles](https://playwright.dev/docs/handles)"
- name: Isolation
  id: browser-contexts
  summary: Tests written with Playwright execute in isolated clean-slate environments called browser contexts
  description: "# Isolation\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nTests written with Playwright execute in isolated clean-slate environments called browser contexts. This isolation model improves reproducibility and prevents cascading test failures.\n\n## What is Test Isolation?[​](#what-is-test-isolation \"Direct link to What is Test Isolation?\")\n\nTest Isolation is when each test is completely isolated from another test. Every test runs independently from any other test. This means that each test has its own local storage, session storage, cookies etc. Playwright achieves this using [BrowserContext](api/class-browsercontext \"BrowserContext\")s which are equivalent to incognito-like profiles. They are fast and cheap to create and are completely isolated, even when running in a single browser. Playwright creates a context for each test, and provides a default [Page](api/class-page \"Page\") in that context.\n\n## Why is Test Isolation Important?[​](#why-is-test-isolation-important \"Direct link to Why is Test Isolation Important?\")\n\n- No failure carry-over. If one test fails it doesn't affect the other test.\n- Easy to debug errors or flakiness, because you can run just a single test as many times as you'd like.\n- Don't have to think about the order when running in parallel, sharding, etc.\n\n## Two Ways of Test Isolation[​](#two-ways-of-test-isolation \"Direct link to Two Ways of Test Isolation\")\n\nThere are two different strategies when it comes to Test Isolation: start from scratch or cleanup in between. The problem with cleaning up in between tests is that it can be easy to forget to clean up and some things are impossible to clean up such as \"visited links\". State from one test can leak into the next test which could cause your test to fail and make debugging harder as the problem comes from another test. Starting from scratch means everything is new, so if the test fails you only have to look within that test to debug.\n\n## How Playwright Achieves Test Isolation[​](#how-playwright-achieves-test-isolation \"Direct link to How Playwright Achieves Test Isolation\")\n\nPlaywright uses browser contexts to achieve Test Isolation. Each test has its own Browser Context. Running the test creates a new browser context each time. When using Playwright as a Test Runner, browser contexts are created by default. Otherwise, you can create browser contexts manually.\n\n- Test\n- Library\n\n``` javascript\nimport { test } from '@playwright/test';\n\ntest('example test', async ({ page, context }) => {\n  // \"context\" is an isolated BrowserContext, created for this specific test.\n  // \"page\" belongs to this context.\n});\n\ntest('another test', async ({ page, context }) => {\n  // \"context\" and \"page\" in this second test are completely\n  // isolated from the first test.\n});\n```\n\n``` javascript\nconst browser = await chromium.launch();\nconst context = await browser.newContext();\nconst page = await context.newPage();\n```\n\nBrowser contexts can also be used to emulate multi-page scenarios involving mobile devices, permissions, locale and color scheme. Check out our [Emulation](emulation) guide for more details.\n\n## Multiple Contexts in a Single Test[​](#multiple-contexts-in-a-single-test \"Direct link to Multiple Contexts in a Single Test\")\n\nPlaywright can create multiple browser contexts within a single scenario. This is useful when you want to test for multi-user functionality, like a chat.\n\n- Test\n- Library\n\n``` javascript\nimport { test } from '@playwright/test';\n\ntest('admin and user', async ({ browser }) => {\n  // Create two isolated browser contexts\n  const adminContext = await browser.newContext();\n  const userContext = await browser.newContext();\n\n  // Create pages and interact with contexts independently\n  const adminPage = await adminContext.newPage();\n  const userPage = await userContext.newPage();\n});\n```\n\n``` javascript\nconst { chromium } = require('playwright');\n\n// Create a Chromium browser instance\nconst browser = await chromium.launch();\n\n// Create two isolated browser contexts\nconst userContext = await browser.newContext();\nconst adminContext = await browser.newContext();\n\n// Create pages and interact with contexts independently\nconst adminPage = await adminContext.newPage();\nconst userPage = await userContext.newPage();\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/browser-contexts](https://playwright.dev/docs/browser-contexts)"
- name: JSHandle
  id: api/class-jshandle
  summary: JSHandle represents an in-page JavaScript object
  description: "# JSHandle\n\nJSHandle represents an in-page JavaScript object. JSHandles can be created with the [page.evaluateHandle()](class-page#page-evaluate-handle) method.\n\n``` javascript\nconst windowHandle = await page.evaluateHandle(() => window);\n// ...\n```\n\nJSHandle prevents the referenced JavaScript object being garbage collected unless the handle is exposed with [jsHandle.dispose()](class-jshandle#js-handle-dispose). JSHandles are auto-disposed when their origin frame gets navigated or the parent context gets destroyed.\n\nJSHandle instances can be used as an argument in [page.$eval()](class-page#page-eval-on-selector), [page.evaluate()](class-page#page-evaluate) and [page.evaluateHandle()](class-page#page-evaluate-handle) methods.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### asElement[​](#js-handle-as-element \"Direct link to asElement\")\n\nAdded before v1.9\n\nReturns either `null` or the object handle itself, if the object handle is an instance of [ElementHandle](class-elementhandle \"ElementHandle\").\n\n**Usage**\n\n``` javascript\njsHandle.asElement();\n```\n\n**Returns**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [ElementHandle](class-elementhandle \"ElementHandle\")\n\n### dispose[​](#js-handle-dispose \"Direct link to dispose\")\n\nAdded before v1.9\n\nThe `jsHandle.dispose` method stops referencing the element handle.\n\n**Usage**\n\n``` javascript\nawait jsHandle.dispose();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### evaluate[​](#js-handle-evaluate \"Direct link to evaluate\")\n\nAdded before v1.9\n\nReturns the return value of `pageFunction`.\n\nThis method passes this handle as the first argument to `pageFunction`.\n\nIf `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\"), then `handle.evaluate` would wait for the promise to resolve and return its value.\n\n**Usage**\n\n``` javascript\nconst tweetHandle = await page.$('.tweet .retweets');\nexpect(await tweetHandle.evaluate(node => node.innerText)).toBe('10 retweets');\n```\n\n**Arguments**\n\n- `pageFunction` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Function to be evaluated in the page context.\n\n- `arg` [EvaluationArgument](../evaluating#evaluation-argument \"EvaluationArgument\") *(optional)*\n\n  Optional argument to pass to `pageFunction`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\")\\>\n\n### evaluateHandle[​](#js-handle-evaluate-handle \"Direct link to evaluateHandle\")\n\nAdded before v1.9\n\nReturns the return value of `pageFunction` as a [JSHandle](class-jshandle \"JSHandle\").\n\nThis method passes this handle as the first argument to `pageFunction`.\n\nThe only difference between `jsHandle.evaluate` and `jsHandle.evaluateHandle` is that `jsHandle.evaluateHandle` returns [JSHandle](class-jshandle \"JSHandle\").\n\nIf the function passed to the `jsHandle.evaluateHandle` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\"), then `jsHandle.evaluateHandle` would wait for the promise to resolve and return its value.\n\nSee [page.evaluateHandle()](class-page#page-evaluate-handle) for more details.\n\n**Usage**\n\n``` javascript\nawait jsHandle.evaluateHandle(pageFunction);\nawait jsHandle.evaluateHandle(pageFunction, arg);\n```\n\n**Arguments**\n\n- `pageFunction` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Function to be evaluated in the page context.\n\n- `arg` [EvaluationArgument](../evaluating#evaluation-argument \"EvaluationArgument\") *(optional)*\n\n  Optional argument to pass to `pageFunction`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[JSHandle](class-jshandle \"JSHandle\")\\>\n\n### getProperties[​](#js-handle-get-properties \"Direct link to getProperties\")\n\nAdded before v1.9\n\nThe method returns a map with **own property names** as keys and JSHandle instances for the property values.\n\n**Usage**\n\n``` javascript\nconst handle = await page.evaluateHandle(() => ({ window, document }));\nconst properties = await handle.getProperties();\nconst windowHandle = properties.get('window');\nconst documentHandle = properties.get('document');\nawait handle.dispose();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map \"Map\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [JSHandle](class-jshandle \"JSHandle\")\\>\\>\n\n### getProperty[​](#js-handle-get-property \"Direct link to getProperty\")\n\nAdded before v1.9\n\nFetches a single property from the referenced object.\n\n**Usage**\n\n``` javascript\nawait jsHandle.getProperty(propertyName);\n```\n\n**Arguments**\n\n- `propertyName` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  property to get\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[JSHandle](class-jshandle \"JSHandle\")\\>\n\n### jsonValue[​](#js-handle-json-value \"Direct link to jsonValue\")\n\nAdded before v1.9\n\nReturns a JSON representation of the object. If the object has a `toJSON` function, it **will not be called**.\n\n> note\n>\n> The method will return an empty JSON object if the referenced object is not stringifiable. It will throw an error if the object has circular references.\n\n**Usage**\n\n``` javascript\nawait jsHandle.jsonValue();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-jshandle](https://playwright.dev/docs/api/class-jshandle)"
- name: jsHandle.asElement
  id: api/class-jshandle#js-handle-as-element
  summary: Returns either null or the object handle itself, if the object handle is an instance of ElementHandle
  belongs_to: JSHandle
  description: |-
    ### asElement[​](#js-handle-as-element "Direct link to asElement")

    Added before v1.9

    Returns either `null` or the object handle itself, if the object handle is an instance of [ElementHandle](class-elementhandle "ElementHandle").

    **Usage**

    ``` javascript
    jsHandle.asElement();
    ```

    **Returns**

    - [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [ElementHandle](class-elementhandle "ElementHandle")
- name: jsHandle.dispose
  id: api/class-jshandle#js-handle-dispose
  summary: The jsHandle.dispose method stops referencing the element handle
  belongs_to: JSHandle
  description: |-
    ### dispose[​](#js-handle-dispose "Direct link to dispose")

    Added before v1.9

    The `jsHandle.dispose` method stops referencing the element handle.

    **Usage**

    ``` javascript
    await jsHandle.dispose();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: jsHandle.evaluate
  id: api/class-jshandle#js-handle-evaluate
  summary: Returns the return value of pageFunction
  belongs_to: JSHandle
  description: |-
    ### evaluate[​](#js-handle-evaluate "Direct link to evaluate")

    Added before v1.9

    Returns the return value of `pageFunction`.

    This method passes this handle as the first argument to `pageFunction`.

    If `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then `handle.evaluate` would wait for the promise to resolve and return its value.

    **Usage**

    ``` javascript
    const tweetHandle = await page.$('.tweet .retweets');
    expect(await tweetHandle.evaluate(node => node.innerText)).toBe('10 retweets');
    ```

    **Arguments**

    - `pageFunction`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Function to be evaluated in the page context.

    - `arg` [EvaluationArgument](../evaluating#evaluation-argument "EvaluationArgument") *(optional)*

      Optional argument to pass to `pageFunction`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>

    &nbsp;
- name: jsHandle.evaluateHandle
  id: api/class-jshandle#js-handle-evaluate-handle
  summary: Returns the return value of pageFunction as a JSHandle
  belongs_to: JSHandle
  description: |-
    ### evaluateHandle[​](#js-handle-evaluate-handle "Direct link to evaluateHandle")

    Added before v1.9

    Returns the return value of `pageFunction` as a [JSHandle](class-jshandle "JSHandle").

    This method passes this handle as the first argument to `pageFunction`.

    The only difference between `jsHandle.evaluate` and `jsHandle.evaluateHandle` is that `jsHandle.evaluateHandle` returns [JSHandle](class-jshandle "JSHandle").

    If the function passed to the `jsHandle.evaluateHandle` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then `jsHandle.evaluateHandle` would wait for the promise to resolve and return its value.

    See [page.evaluateHandle()](class-page#page-evaluate-handle) for more details.

    **Usage**

    ``` javascript
    await jsHandle.evaluateHandle(pageFunction);
    await jsHandle.evaluateHandle(pageFunction, arg);
    ```

    **Arguments**

    - `pageFunction`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Function to be evaluated in the page context.

    - `arg` [EvaluationArgument](../evaluating#evaluation-argument "EvaluationArgument") *(optional)*

      Optional argument to pass to `pageFunction`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[JSHandle](class-jshandle "JSHandle")\>

    &nbsp;
- name: jsHandle.getProperties
  id: api/class-jshandle#js-handle-get-properties
  summary: The method returns a map with own property names as keys and JSHandle instances for the property values
  belongs_to: JSHandle
  description: |-
    ### getProperties[​](#js-handle-get-properties "Direct link to getProperties")

    Added before v1.9

    The method returns a map with **own property names** as keys and JSHandle instances for the property values.

    **Usage**

    ``` javascript
    const handle = await page.evaluateHandle(() => ({ window, document }));
    const properties = await handle.getProperties();
    const windowHandle = properties.get('window');
    const documentHandle = properties.get('document');
    await handle.dispose();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map "Map")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [JSHandle](class-jshandle "JSHandle")\>\>

    &nbsp;
- name: jsHandle.getProperty
  id: api/class-jshandle#js-handle-get-property
  summary: Fetches a single property from the referenced object
  belongs_to: JSHandle
  description: |-
    ### getProperty[​](#js-handle-get-property "Direct link to getProperty")

    Added before v1.9

    Fetches a single property from the referenced object.

    **Usage**

    ``` javascript
    await jsHandle.getProperty(propertyName);
    ```

    **Arguments**

    - `propertyName` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      property to get

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[JSHandle](class-jshandle "JSHandle")\>

    &nbsp;
- name: jsHandle.jsonValue
  id: api/class-jshandle#js-handle-json-value
  summary: Returns a JSON representation of the object
  belongs_to: JSHandle
  description: "### jsonValue[​](#js-handle-json-value \"Direct link to jsonValue\")\n\nAdded before v1.9\n\nReturns a JSON representation of the object. If the object has a `toJSON` function, it **will not be called**.\n\n> note\n>\n> The method will return an empty JSON object if the referenced object is not stringifiable. It will throw an error if the object has circular references.\n\n**Usage**\n\n``` javascript\nawait jsHandle.jsonValue();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-jshandle](https://playwright.dev/docs/api/class-jshandle)"
- name: Keyboard
  id: api/class-keyboard
  summary: Keyboard provides an api for managing a virtual keyboard
  description: "# Keyboard\n\nKeyboard provides an api for managing a virtual keyboard. The high level api is [keyboard.type()](class-keyboard#keyboard-type), which takes raw characters and generates proper `keydown`, `keypress`/`input`, and `keyup` events on your page.\n\nFor finer control, you can use [keyboard.down()](class-keyboard#keyboard-down), [keyboard.up()](class-keyboard#keyboard-up), and [keyboard.insertText()](class-keyboard#keyboard-insert-text) to manually fire events as if they were generated from a real keyboard.\n\nAn example of holding down `Shift` in order to select and delete some text:\n\n``` javascript\nawait page.keyboard.type('Hello World!');\nawait page.keyboard.press('ArrowLeft');\n\nawait page.keyboard.down('Shift');\nfor (let i = 0; i < ' World'.length; i++)\n  await page.keyboard.press('ArrowLeft');\nawait page.keyboard.up('Shift');\n\nawait page.keyboard.press('Backspace');\n// Result text will end up saying 'Hello!'\n```\n\nAn example of pressing uppercase `A`\n\n``` javascript\nawait page.keyboard.press('Shift+KeyA');\n// or\nawait page.keyboard.press('Shift+A');\n```\n\nAn example to trigger select-all with the keyboard\n\n``` javascript\n// on Windows and Linux\nawait page.keyboard.press('Control+A');\n// on macOS\nawait page.keyboard.press('Meta+A');\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### down[​](#keyboard-down \"Direct link to down\")\n\nAdded before v1.9\n\nDispatches a `keydown` event.\n\n`key` can specify the intended [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) value or a single character to generate the text for. A superset of the `key` values can be found [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values). Examples of the keys are:\n\n`F1` - `F12`, `Digit0`- `Digit9`, `KeyA`- `KeyZ`, `Backquote`, `Minus`, `Equal`, `Backslash`, `Backspace`, `Tab`, `Delete`, `Escape`, `ArrowDown`, `End`, `Enter`, `Home`, `Insert`, `PageDown`, `PageUp`, `ArrowRight`, `ArrowUp`, etc.\n\nFollowing modification shortcuts are also supported: `Shift`, `Control`, `Alt`, `Meta`, `ShiftLeft`, `ControlOrMeta`. `ControlOrMeta` resolves to `Control` on Windows and Linux and to `Meta` on macOS.\n\nHolding down `Shift` will type the text that corresponds to the `key` in the upper case.\n\nIf `key` is a single character, it is case-sensitive, so the values `a` and `A` will generate different respective texts.\n\nIf `key` is a modifier key, `Shift`, `Meta`, `Control`, or `Alt`, subsequent key presses will be sent with that modifier active. To release the modifier key, use [keyboard.up()](class-keyboard#keyboard-up).\n\nAfter the key is pressed once, subsequent calls to [keyboard.down()](class-keyboard#keyboard-down) will have [repeat](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat) set to true. To release the key, use [keyboard.up()](class-keyboard#keyboard-up).\n\n> note\n>\n> Modifier keys DO influence `keyboard.down`. Holding down `Shift` will type the text in upper case.\n\n**Usage**\n\n``` javascript\nawait keyboard.down(key);\n```\n\n**Arguments**\n\n- `key` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### insertText[​](#keyboard-insert-text \"Direct link to insertText\")\n\nAdded before v1.9\n\nDispatches only `input` event, does not emit the `keydown`, `keyup` or `keypress` events.\n\n**Usage**\n\n``` javascript\npage.keyboard.insertText('嗨');\n```\n\n> note\n>\n> Modifier keys DO NOT effect `keyboard.insertText`. Holding down `Shift` will not type the text in upper case.\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Sets input to the specified text value.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### press[​](#keyboard-press \"Direct link to press\")\n\nAdded before v1.9\n\n> tip\n>\n> In most cases, you should use [locator.press()](class-locator#locator-press) instead.\n\n`key` can specify the intended [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) value or a single character to generate the text for. A superset of the `key` values can be found [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values). Examples of the keys are:\n\n`F1` - `F12`, `Digit0`- `Digit9`, `KeyA`- `KeyZ`, `Backquote`, `Minus`, `Equal`, `Backslash`, `Backspace`, `Tab`, `Delete`, `Escape`, `ArrowDown`, `End`, `Enter`, `Home`, `Insert`, `PageDown`, `PageUp`, `ArrowRight`, `ArrowUp`, etc.\n\nFollowing modification shortcuts are also supported: `Shift`, `Control`, `Alt`, `Meta`, `ShiftLeft`, `ControlOrMeta`. `ControlOrMeta` resolves to `Control` on Windows and Linux and to `Meta` on macOS.\n\nHolding down `Shift` will type the text that corresponds to the `key` in the upper case.\n\nIf `key` is a single character, it is case-sensitive, so the values `a` and `A` will generate different respective texts.\n\nShortcuts such as `key: \"Control+o\"`, `key: \"Control++` or `key: \"Control+Shift+T\"` are supported as well. When specified with the modifier, modifier is pressed and being held while the subsequent key is being pressed.\n\n**Usage**\n\n``` javascript\nconst page = await browser.newPage();\nawait page.goto('https://keycode.info');\nawait page.keyboard.press('A');\nawait page.screenshot({ path: 'A.png' });\nawait page.keyboard.press('ArrowLeft');\nawait page.screenshot({ path: 'ArrowLeft.png' });\nawait page.keyboard.press('Shift+O');\nawait page.screenshot({ path: 'O.png' });\nawait browser.close();\n```\n\nShortcut for [keyboard.down()](class-keyboard#keyboard-down) and [keyboard.up()](class-keyboard#keyboard-up).\n\n**Arguments**\n\n- `key` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### type[​](#keyboard-type \"Direct link to type\")\n\nAdded before v1.9\n\n> caution\n>\n> In most cases, you should use [locator.fill()](class-locator#locator-fill) instead. You only need to press keys one by one if there is special keyboard handling on the page - in this case use [locator.pressSequentially()](class-locator#locator-press-sequentially).\n\nSends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the text.\n\nTo press a special key, like `Control` or `ArrowDown`, use [keyboard.press()](class-keyboard#keyboard-press).\n\n**Usage**\n\n``` javascript\nawait page.keyboard.type('Hello'); // Types instantly\nawait page.keyboard.type('World', { delay: 100 }); // Types slower, like a user\n```\n\n> note\n>\n> Modifier keys DO NOT effect `keyboard.type`. Holding down `Shift` will not type the text in upper case.\n\n> note\n>\n> For characters that are not on a US keyboard, only an `input` event will be sent.\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A text to type into a focused element.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to wait between key presses in milliseconds. Defaults to 0.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### up[​](#keyboard-up \"Direct link to up\")\n\nAdded before v1.9\n\nDispatches a `keyup` event.\n\n**Usage**\n\n``` javascript\nawait keyboard.up(key);\n```\n\n**Arguments**\n\n- `key` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-keyboard](https://playwright.dev/docs/api/class-keyboard)"
- name: keyboard.down
  id: api/class-keyboard#keyboard-down
  summary: Dispatches a keydown event
  belongs_to: Keyboard
  description: |-
    ### down[​](#keyboard-down "Direct link to down")

    Added before v1.9

    Dispatches a `keydown` event.

    `key` can specify the intended [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) value or a single character to generate the text for. A superset of the `key` values can be found [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values). Examples of the keys are:

    `F1` - `F12`, `Digit0`- `Digit9`, `KeyA`- `KeyZ`, `Backquote`, `Minus`, `Equal`, `Backslash`, `Backspace`, `Tab`, `Delete`, `Escape`, `ArrowDown`, `End`, `Enter`, `Home`, `Insert`, `PageDown`, `PageUp`, `ArrowRight`, `ArrowUp`, etc.

    Following modification shortcuts are also supported: `Shift`, `Control`, `Alt`, `Meta`, `ShiftLeft`, `ControlOrMeta`. `ControlOrMeta` resolves to `Control` on Windows and Linux and to `Meta` on macOS.

    Holding down `Shift` will type the text that corresponds to the `key` in the upper case.

    If `key` is a single character, it is case-sensitive, so the values `a` and `A` will generate different respective texts.

    If `key` is a modifier key, `Shift`, `Meta`, `Control`, or `Alt`, subsequent key presses will be sent with that modifier active. To release the modifier key, use [keyboard.up()](class-keyboard#keyboard-up).

    After the key is pressed once, subsequent calls to [keyboard.down()](class-keyboard#keyboard-down) will have [repeat](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat) set to true. To release the key, use [keyboard.up()](class-keyboard#keyboard-up).

    > note
    >
    > Modifier keys DO influence `keyboard.down`. Holding down `Shift` will type the text in upper case.

    **Usage**

    ``` javascript
    await keyboard.down(key);
    ```

    **Arguments**

    - `key` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>
- name: keyboard.insertText
  id: api/class-keyboard#keyboard-insert-text
  summary: Dispatches only input event, does not emit the keydown, keyup or keypress events
  belongs_to: Keyboard
  description: |-
    ### insertText[​](#keyboard-insert-text "Direct link to insertText")

    Added before v1.9

    Dispatches only `input` event, does not emit the `keydown`, `keyup` or `keypress` events.

    **Usage**

    ``` javascript
    page.keyboard.insertText('嗨');
    ```

    > note
    >
    > Modifier keys DO NOT effect `keyboard.insertText`. Holding down `Shift` will not type the text in upper case.

    **Arguments**

    - `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Sets input to the specified text value.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: keyboard.press
  id: api/class-keyboard#keyboard-press
  summary: In most cases, you should use locator.press() instead
  belongs_to: Keyboard
  description: |-
    ### press[​](#keyboard-press "Direct link to press")

    Added before v1.9

    > tip
    >
    > In most cases, you should use [locator.press()](class-locator#locator-press) instead.

    `key` can specify the intended [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) value or a single character to generate the text for. A superset of the `key` values can be found [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values). Examples of the keys are:

    `F1` - `F12`, `Digit0`- `Digit9`, `KeyA`- `KeyZ`, `Backquote`, `Minus`, `Equal`, `Backslash`, `Backspace`, `Tab`, `Delete`, `Escape`, `ArrowDown`, `End`, `Enter`, `Home`, `Insert`, `PageDown`, `PageUp`, `ArrowRight`, `ArrowUp`, etc.

    Following modification shortcuts are also supported: `Shift`, `Control`, `Alt`, `Meta`, `ShiftLeft`, `ControlOrMeta`. `ControlOrMeta` resolves to `Control` on Windows and Linux and to `Meta` on macOS.

    Holding down `Shift` will type the text that corresponds to the `key` in the upper case.

    If `key` is a single character, it is case-sensitive, so the values `a` and `A` will generate different respective texts.

    Shortcuts such as `key: "Control+o"`, `key: "Control++` or `key: "Control+Shift+T"` are supported as well. When specified with the modifier, modifier is pressed and being held while the subsequent key is being pressed.

    **Usage**

    ``` javascript
    const page = await browser.newPage();
    await page.goto('https://keycode.info');
    await page.keyboard.press('A');
    await page.screenshot({ path: 'A.png' });
    await page.keyboard.press('ArrowLeft');
    await page.screenshot({ path: 'ArrowLeft.png' });
    await page.keyboard.press('Shift+O');
    await page.screenshot({ path: 'O.png' });
    await browser.close();
    ```

    Shortcut for [keyboard.down()](class-keyboard#keyboard-down) and [keyboard.up()](class-keyboard#keyboard-up).

    **Arguments**

    - `key` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: keyboard.type
  id: api/class-keyboard#keyboard-type
  summary: In most cases, you should use locator.fill() instead
  belongs_to: Keyboard
  description: |-
    ### type[​](#keyboard-type "Direct link to type")

    Added before v1.9

    > caution
    >
    > In most cases, you should use [locator.fill()](class-locator#locator-fill) instead. You only need to press keys one by one if there is special keyboard handling on the page - in this case use [locator.pressSequentially()](class-locator#locator-press-sequentially).

    Sends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the text.

    To press a special key, like `Control` or `ArrowDown`, use [keyboard.press()](class-keyboard#keyboard-press).

    **Usage**

    ``` javascript
    await page.keyboard.type('Hello'); // Types instantly
    await page.keyboard.type('World', { delay: 100 }); // Types slower, like a user
    ```

    > note
    >
    > Modifier keys DO NOT effect `keyboard.type`. Holding down `Shift` will not type the text in upper case.

    > note
    >
    > For characters that are not on a US keyboard, only an `input` event will be sent.

    **Arguments**

    - `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A text to type into a focused element.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to wait between key presses in milliseconds. Defaults to 0.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: keyboard.up
  id: api/class-keyboard#keyboard-up
  summary: Dispatches a keyup event
  belongs_to: Keyboard
  description: "### up[​](#keyboard-up \"Direct link to up\")\n\nAdded before v1.9\n\nDispatches a `keyup` event.\n\n**Usage**\n\n``` javascript\nawait keyboard.up(key);\n```\n\n**Arguments**\n\n- `key` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-keyboard](https://playwright.dev/docs/api/class-keyboard)"
- name: Library
  id: library
  summary: Playwright Library provides unified APIs for launching and interacting with browsers, while Playwright Test provides all this plus a fully managed end-to-end Test Runner and experience
  description: "# Library\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright Library provides unified APIs for launching and interacting with browsers, while Playwright Test provides all this plus a fully managed end-to-end Test Runner and experience.\n\nUnder most circumstances, for end-to-end testing, you'll want to use `@playwright/test` (Playwright Test), and not `playwright` (Playwright Library) directly. To get started with Playwright Test, follow the [Getting Started Guide](index).\n\n## Differences when using library[​](#differences-when-using-library \"Direct link to Differences when using library\")\n\n### Library Example[​](#library-example \"Direct link to Library Example\")\n\nThe following is an example of using the Playwright Library directly to launch Chromium, go to a page, and check its title:\n\n- TypeScript\n- JavaScript\n\n``` javascript\nimport { chromium, devices } from 'playwright';\nimport assert from 'node:assert';\n\n(async () => {\n  // Setup\n  const browser = await chromium.launch();\n  const context = await browser.newContext(devices['iPhone 11']);\n  const page = await context.newPage();\n\n  // The actual interesting bit\n  await context.route('**.jpg', route => route.abort());\n  await page.goto('https://example.com/');\n\n  assert(await page.title() === 'Example Domain'); // 👎 not a Web First assertion\n\n  // Teardown\n  await context.close();\n  await browser.close();\n})();\n```\n\n``` javascript\nconst assert = require('node:assert');\nconst { chromium, devices } = require('playwright');\n\n(async () => {\n  // Setup\n  const browser = await chromium.launch();\n  const context = await browser.newContext(devices['iPhone 11']);\n  const page = await context.newPage();\n\n  // The actual interesting bit\n  await context.route('**.jpg', route => route.abort());\n  await page.goto('https://example.com/');\n\n  assert(await page.title() === 'Example Domain'); // 👎 not a Web First assertion\n\n  // Teardown\n  await context.close();\n  await browser.close();\n})();\n```\n\nRun it with `node my-script.js`.\n\n### Test Example[​](#test-example \"Direct link to Test Example\")\n\nA test to achieve similar behavior, would look like:\n\n- TypeScript\n- JavaScript\n\n``` javascript\nimport { expect, test, devices } from '@playwright/test';\n\ntest.use(devices['iPhone 11']);\n\ntest('should be titled', async ({ page, context }) => {\n  await context.route('**.jpg', route => route.abort());\n  await page.goto('https://example.com/');\n\n  await expect(page).toHaveTitle('Example');\n});\n```\n\n``` javascript\nconst { expect, test, devices } = require('@playwright/test');\n\ntest.use(devices['iPhone 11']);\n\ntest('should be titled', async ({ page, context }) => {\n  await context.route('**.jpg', route => route.abort());\n  await page.goto('https://example.com/');\n\n  await expect(page).toHaveTitle('Example');\n});\n```\n\nRun it with `npx playwright test`.\n\n### Key Differences[​](#key-differences \"Direct link to Key Differences\")\n\nThe key differences to note are as follows:\n\n[TABLE]\n\nIn addition to the above, Playwright Test, as a full-featured Test Runner, includes:\n\n- [Configuration Matrix and Projects](test-configuration): In the above example, in the Playwright Library version, if we wanted to run with a different device or browser, we'd have to modify the script and plumb the information through. With Playwright Test, we can just specify the [matrix of configurations](test-configuration) in one place, and it will create run the one test under each of these configurations.\n- [Parallelization](test-parallel)\n- [Web-First Assertions](test-assertions)\n- [Reporting](test-reporters)\n- [Retries](test-retries)\n- [Easily Enabled Tracing](trace-viewer-intro)\n- and more…\n\n## Usage[​](#usage \"Direct link to Usage\")\n\nUse npm or Yarn to install Playwright library in your Node.js project. See [system requirements](intro#system-requirements).\n\n``` javascript\nnpm i -D playwright\n```\n\nYou will also need to install browsers - either manually or by adding a package that will do it for you automatically.\n\n``` javascript\n# Download the Chromium, Firefox and WebKit browser\nnpx playwright install chromium firefox webkit\n\n# Alternatively, add packages that will download a browser upon npm install\nnpm i -D @playwright/browser-chromium @playwright/browser-firefox @playwright/browser-webkit\n```\n\nSee [managing browsers](browsers#managing-browser-binaries) for more options.\n\nOnce installed, you can import Playwright in a Node.js script, and launch any of the 3 browsers (`chromium`, `firefox` and `webkit`).\n\n``` javascript\nconst { chromium } = require('playwright');\n\n(async () => {\n  const browser = await chromium.launch();\n  // Create pages, interact with UI elements, assert values\n  await browser.close();\n})();\n```\n\nPlaywright APIs are asynchronous and return Promise objects. Our code examples use [the async/await pattern](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await) to ease readability. The code is wrapped in an unnamed async arrow function which is invoking itself.\n\n``` javascript\n(async () => { // Start of async arrow function\n  // Function code\n  // ...\n})(); // End of the function and () to invoke itself\n```\n\n## First script[​](#first-script \"Direct link to First script\")\n\nIn our first script, we will navigate to `https://playwright.dev/` and take a screenshot in WebKit.\n\n``` javascript\nconst { webkit } = require('playwright');\n\n(async () => {\n  const browser = await webkit.launch();\n  const page = await browser.newPage();\n  await page.goto('https://playwright.dev/');\n  await page.screenshot({ path: `example.png` });\n  await browser.close();\n})();\n```\n\nBy default, Playwright runs the browsers in headless mode. To see the browser UI, pass the `headless: false` flag while launching the browser. You can also use `slowMo` to slow down execution. Learn more in the debugging tools [section](debug).\n\n``` javascript\nfirefox.launch({ headless: false, slowMo: 50 });\n```\n\n## Record scripts[​](#record-scripts \"Direct link to Record scripts\")\n\n[Command line tools](test-cli) can be used to record user interactions and generate JavaScript code.\n\n``` javascript\nnpx playwright codegen wikipedia.org\n```\n\n## Browser downloads[​](#browser-downloads \"Direct link to Browser downloads\")\n\nTo download Playwright browsers run:\n\n``` javascript\n# Explicitly download browsers\nnpx playwright install\n```\n\nAlternatively, you can add `@playwright/browser-chromium`, `@playwright/browser-firefox` and `@playwright/browser-webkit` packages to automatically download the respective browser during the package installation.\n\n``` javascript\n# Use a helper package that downloads a browser on npm install\nnpm install @playwright/browser-chromium\n```\n\n**Download behind a firewall or a proxy**\n\nPass `HTTPS_PROXY` environment variable to download through a proxy.\n\n- Bash\n- PowerShell\n- Batch\n\n``` javascript\n# Manual\nHTTPS_PROXY=https://192.0.2.1 npx playwright install\n\n# Through @playwright/browser-chromium, @playwright/browser-firefox\n# and @playwright/browser-webkit helper packages\nHTTPS_PROXY=https://192.0.2.1 npm install\n```\n\n``` javascript\n# Manual\n$Env:HTTPS_PROXY=https://192.0.2.1\nnpx playwright install\n\n# Through @playwright/browser-chromium, @playwright/browser-firefox\n# and @playwright/browser-webkit helper packages\n$Env:HTTPS_PROXY=https://192.0.2.1\nnpm install\n```\n\n``` javascript\n# Manual\nset HTTPS_PROXY=https://192.0.2.1\nnpx playwright install\n\n# Through @playwright/browser-chromium, @playwright/browser-firefox\n# and @playwright/browser-webkit helper packages\nset HTTPS_PROXY=https://192.0.2.1\nnpm install\n```\n\n**Download from artifact repository**\n\nBy default, Playwright downloads browsers from Microsoft's CDN. Pass `PLAYWRIGHT_DOWNLOAD_HOST` environment variable to download from an internal artifacts repository instead.\n\n- Bash\n- PowerShell\n- Batch\n\n``` javascript\n# Manual\nPLAYWRIGHT_DOWNLOAD_HOST=192.0.2.1 npx playwright install\n\n# Through @playwright/browser-chromium, @playwright/browser-firefox\n# and @playwright/browser-webkit helper packages\nPLAYWRIGHT_DOWNLOAD_HOST=192.0.2.1 npm install\n```\n\n``` javascript\n# Manual\n$Env:PLAYWRIGHT_DOWNLOAD_HOST=192.0.2.1\nnpx playwright install\n\n# Through @playwright/browser-chromium, @playwright/browser-firefox\n# and @playwright/browser-webkit helper packages\n$Env:PLAYWRIGHT_DOWNLOAD_HOST=192.0.2.1\nnpm install\n```\n\n``` javascript\n# Manual\nset PLAYWRIGHT_DOWNLOAD_HOST=192.0.2.1\nnpx playwright install\n\n# Through @playwright/browser-chromium, @playwright/browser-firefox\n# and @playwright/browser-webkit helper packages\nset PLAYWRIGHT_DOWNLOAD_HOST=192.0.2.1\nnpm install\n```\n\n**Skip browser download**\n\nIn certain cases, it is desired to avoid browser downloads altogether because browser binaries are managed separately. This can be done by setting `PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD` variable before installing packages.\n\n- Bash\n- PowerShell\n- Batch\n\n``` javascript\n# When using @playwright/browser-chromium, @playwright/browser-firefox\n# and @playwright/browser-webkit helper packages\nPLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 npm install\n```\n\n``` javascript\n# When using @playwright/browser-chromium, @playwright/browser-firefox\n# and @playwright/browser-webkit helper packages\n$Env:PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1\nnpm install\n```\n\n``` javascript\n# When using @playwright/browser-chromium, @playwright/browser-firefox\n# and @playwright/browser-webkit helper packages\nset PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1\nnpm install\n```\n\n## TypeScript support[​](#typescript-support \"Direct link to TypeScript support\")\n\nPlaywright includes built-in support for TypeScript. Type definitions will be imported automatically. It is recommended to use type-checking to improve the IDE experience.\n\n### In JavaScript[​](#in-javascript \"Direct link to In JavaScript\")\n\nAdd the following to the top of your JavaScript file to get type-checking in VS Code or WebStorm.\n\n``` javascript\n// @ts-check\n// ...\n```\n\nAlternatively, you can use JSDoc to set types for variables.\n\n``` javascript\n/** @type {import('playwright').Page} */\nlet page;\n```\n\n### In TypeScript[​](#in-typescript \"Direct link to In TypeScript\")\n\nTypeScript support will work out-of-the-box. Types can also be imported explicitly.\n\n``` javascript\nlet page: import('playwright').Page;\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/library](https://playwright.dev/docs/library)"
- name: Location
  id: api/class-location
  summary: Represents a location in the source code where TestCase or Suite is defined
  description: "# Location\n\nRepresents a location in the source code where [TestCase](class-testcase \"TestCase\") or [Suite](class-suite \"Suite\") is defined.\n\n## Properties[​](#properties \"Direct link to Properties\")\n\n### column[​](#location-column \"Direct link to column\")\n\nColumn number in the source file.\n\n**Usage**\n\n``` javascript\nlocation.column\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### file[​](#location-file \"Direct link to file\")\n\nPath to the source file.\n\n**Usage**\n\n``` javascript\nlocation.file\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### line[​](#location-line \"Direct link to line\")\n\nLine number in the source file.\n\n**Usage**\n\n``` javascript\nlocation.line\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-location](https://playwright.dev/docs/api/class-location)"
- name: location.column
  id: api/class-location#location-column
  summary: Column number in the source file
  belongs_to: Location
  description: |-
    ### column[​](#location-column "Direct link to column")

    Column number in the source file.

    **Usage**

    ``` javascript
    location.column
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")
- name: location.file
  id: api/class-location#location-file
  summary: Path to the source file
  belongs_to: Location
  description: |-
    ### file[​](#location-file "Direct link to file")

    Path to the source file.

    **Usage**

    ``` javascript
    location.file
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: location.line
  id: api/class-location#location-line
  summary: Line number in the source file
  belongs_to: Location
  description: "### line[​](#location-line \"Direct link to line\")\n\nLine number in the source file.\n\n**Usage**\n\n``` javascript\nlocation.line\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-location](https://playwright.dev/docs/api/class-location)"
- name: Locator
  id: api/class-locator
  summary: Locators are the central piece of Playwright's auto-waiting and retry-ability
  description: "# Locator\n\nLocators are the central piece of Playwright's auto-waiting and retry-ability. In a nutshell, locators represent a way to find element(s) on the page at any moment. A locator can be created with the [page.locator()](class-page#page-locator) method.\n\n[Learn more about locators](../locators).\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### all[​](#locator-all \"Direct link to all\")\n\nWhen the locator points to a list of elements, this returns an array of locators, pointing to their respective elements.\n\n> note\n>\n> [locator.all()](class-locator#locator-all) does not wait for elements to match the locator, and instead immediately returns whatever is present in the page. When the list of elements changes dynamically, [locator.all()](class-locator#locator-all) will produce unpredictable and flaky results. When the list of elements is stable, but loaded dynamically, wait for the full list to finish loading before calling [locator.all()](class-locator#locator-all).\n\n**Usage**\n\n``` javascript\nfor (const li of await page.getByRole('listitem').all())\n  await li.click();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Locator](class-locator \"Locator\")\\>\\>\n\n### allInnerTexts[​](#locator-all-inner-texts \"Direct link to allInnerTexts\")\n\nReturns an array of `node.innerText` values for all matching nodes.\n\n> Asserting text\n>\n> If you need to assert text on the page, prefer [expect(locator).toHaveText()](class-locatorassertions#locator-assertions-to-have-text) with `useInnerText` option to avoid flakiness. See [assertions guide](../test-assertions) for more details.\n\n**Usage**\n\n``` javascript\nconst texts = await page.getByRole('link').allInnerTexts();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\\>\n\n### allTextContents[​](#locator-all-text-contents \"Direct link to allTextContents\")\n\nReturns an array of `node.textContent` values for all matching nodes.\n\n> Asserting text\n>\n> If you need to assert text on the page, prefer [expect(locator).toHaveText()](class-locatorassertions#locator-assertions-to-have-text) to avoid flakiness. See [assertions guide](../test-assertions) for more details.\n\n**Usage**\n\n``` javascript\nconst texts = await page.getByRole('link').allTextContents();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\\>\n\n### and[​](#locator-and \"Direct link to and\")\n\nCreates a locator that matches both this locator and the argument locator.\n\n**Usage**\n\nThe following example finds a button with a specific title.\n\n``` javascript\nconst button = page.getByRole('button').and(page.getByTitle('Subscribe'));\n```\n\n**Arguments**\n\n- `locator` [Locator](class-locator \"Locator\")\n\n  Additional locator to match.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### blur[​](#locator-blur \"Direct link to blur\")\n\nCalls [blur](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/blur) on the element.\n\n**Usage**\n\n``` javascript\nawait locator.blur();\nawait locator.blur(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### boundingBox[​](#locator-bounding-box \"Direct link to boundingBox\")\n\nThis method returns the bounding box of the element matching the locator, or `null` if the element is not visible. The bounding box is calculated relative to the main frame viewport - which is usually the same as the browser window.\n\n**Usage**\n\n``` javascript\nconst box = await page.getByRole('button').boundingBox();\nawait page.mouse.click(box.x + box.width / 2, box.y + box.height / 2);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    the x coordinate of the element in pixels.\n\n  - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    the y coordinate of the element in pixels.\n\n  - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    the width of the element in pixels.\n\n  - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    the height of the element in pixels.\n\n**Details**\n\nScrolling affects the returned bounding box, similarly to [Element.getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect). That means `x` and/or `y` may be negative.\n\nElements from child frames return the bounding box relative to the main frame, unlike the [Element.getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect).\n\nAssuming the page is static, it is safe to use bounding box coordinates to perform input. For example, the following snippet should click the center of the element.\n\n### check[​](#locator-check \"Direct link to check\")\n\nEnsure that checkbox or radio element is checked.\n\n**Usage**\n\n``` javascript\nawait page.getByRole('checkbox').check();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n**Details**\n\nPerforms the following steps:\n\n1.  Ensure that element is a checkbox or a radio input. If not, this method throws. If the element is already checked, this method returns immediately.\n2.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.\n3.  Scroll the element into view if needed.\n4.  Use [page.mouse](class-page#page-mouse) to click in the center of the element.\n5.  Ensure that the element is now checked. If not, this method throws.\n\nIf the element is detached from the DOM at any moment during the action, this method throws.\n\nWhen all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror \"TimeoutError\"). Passing zero timeout disables this.\n\n### clear[​](#locator-clear \"Direct link to clear\")\n\nClear the input field.\n\n**Usage**\n\n``` javascript\nawait page.getByRole('textbox').clear();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n**Details**\n\nThis method waits for [actionability](../actionability) checks, focuses the element, clears it and triggers an `input` event after clearing.\n\nIf the target element is not an `<input>`, `<textarea>` or `[contenteditable]` element, this method throws an error. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be cleared instead.\n\n### click[​](#locator-click \"Direct link to click\")\n\nClick an element.\n\n**Usage**\n\nClick a button:\n\n``` javascript\nawait page.getByRole('button').click();\n```\n\nShift-right-click at a specific position on a canvas:\n\n``` javascript\nawait page.locator('canvas').click({\n  button: 'right',\n  modifiers: ['Shift'],\n  position: { x: 23, y: 32 },\n});\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `button` \"left\" \\| \"right\" \\| \"middle\" *(optional)*\n\n    Defaults to `left`.\n\n  - `clickCount` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail \"UIEvent.detail\").\n\n  - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.\n\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `modifiers` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<\"Alt\" \\| \"Control\" \\| \"ControlOrMeta\" \\| \"Meta\" \\| \"Shift\"\\> *(optional)*\n\n    Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. \"ControlOrMeta\" resolves to \"Control\" on Windows and Linux and to \"Meta\" on macOS.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option will default to `true` in the future.\n\n    Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.\n\n  - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n**Details**\n\nThis method clicks the element by performing the following steps:\n\n1.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.\n2.  Scroll the element into view if needed.\n3.  Use [page.mouse](class-page#page-mouse) to click in the center of the element, or the specified `position`.\n4.  Wait for initiated navigations to either succeed or fail, unless `noWaitAfter` option is set.\n\nIf the element is detached from the DOM at any moment during the action, this method throws.\n\nWhen all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror \"TimeoutError\"). Passing zero timeout disables this.\n\n### contentFrame[​](#locator-content-frame \"Direct link to contentFrame\")\n\nReturns a [FrameLocator](class-framelocator \"FrameLocator\") object pointing to the same `iframe` as this locator.\n\nUseful when you have a [Locator](class-locator \"Locator\") object obtained somewhere, and later on would like to interact with the content inside the frame.\n\nFor a reverse operation, use [frameLocator.owner()](class-framelocator#frame-locator-owner).\n\n**Usage**\n\n``` javascript\nconst locator = page.locator('iframe[name=\"embedded\"]');\n// ...\nconst frameLocator = locator.contentFrame();\nawait frameLocator.getByRole('button').click();\n```\n\n**Returns**\n\n- [FrameLocator](class-framelocator \"FrameLocator\")\n\n### count[​](#locator-count \"Direct link to count\")\n\nReturns the number of elements matching the locator.\n\n> Asserting count\n>\n> If you need to assert the number of elements on the page, prefer [expect(locator).toHaveCount()](class-locatorassertions#locator-assertions-to-have-count) to avoid flakiness. See [assertions guide](../test-assertions) for more details.\n\n**Usage**\n\n``` javascript\nconst count = await page.getByRole('listitem').count();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\\>\n\n### dblclick[​](#locator-dblclick \"Direct link to dblclick\")\n\nDouble-click an element.\n\n**Usage**\n\n``` javascript\nawait locator.dblclick();\nawait locator.dblclick(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `button` \"left\" \\| \"right\" \\| \"middle\" *(optional)*\n\n    Defaults to `left`.\n\n  - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.\n\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `modifiers` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<\"Alt\" \\| \"Control\" \\| \"ControlOrMeta\" \\| \"Meta\" \\| \"Shift\"\\> *(optional)*\n\n    Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. \"ControlOrMeta\" resolves to \"Control\" on Windows and Linux and to \"Meta\" on macOS.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n**Details**\n\nThis method double clicks the element by performing the following steps:\n\n1.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.\n2.  Scroll the element into view if needed.\n3.  Use [page.mouse](class-page#page-mouse) to double click in the center of the element, or the specified `position`.\n\nIf the element is detached from the DOM at any moment during the action, this method throws.\n\nWhen all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror \"TimeoutError\"). Passing zero timeout disables this.\n\n> note\n>\n> `element.dblclick()` dispatches two `click` events and a single `dblclick` event.\n\n### dispatchEvent[​](#locator-dispatch-event \"Direct link to dispatchEvent\")\n\nProgrammatically dispatch an event on the matching element.\n\n**Usage**\n\n``` javascript\nawait locator.dispatchEvent('click');\n```\n\n**Arguments**\n\n- `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  DOM event type: `\"click\"`, `\"dragstart\"`, etc.\n\n- `eventInit` [EvaluationArgument](../evaluating#evaluation-argument \"EvaluationArgument\") *(optional)*\n\n  Optional event-specific initialization properties.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n**Details**\n\nThe snippet above dispatches the `click` event on the element. Regardless of the visibility state of the element, `click` is dispatched. This is equivalent to calling [element.click()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click).\n\nUnder the hood, it creates an instance of an event based on the given `type`, initializes it with `eventInit` properties and dispatches it on the element. Events are `composed`, `cancelable` and bubble by default.\n\nSince `eventInit` is event-specific, please refer to the events documentation for the lists of initial properties:\n\n- [DeviceMotionEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/DeviceMotionEvent)\n- [DeviceOrientationEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/DeviceOrientationEvent)\n- [DragEvent](https://developer.mozilla.org/en-US/docs/Web/API/DragEvent/DragEvent)\n- [Event](https://developer.mozilla.org/en-US/docs/Web/API/Event/Event)\n- [FocusEvent](https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/FocusEvent)\n- [KeyboardEvent](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent)\n- [MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent)\n- [PointerEvent](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/PointerEvent)\n- [TouchEvent](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/TouchEvent)\n- [WheelEvent](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/WheelEvent)\n\nYou can also specify [JSHandle](class-jshandle \"JSHandle\") as the property value if you want live objects to be passed into the event:\n\n``` javascript\n// Note you can only create DataTransfer in Chromium and Firefox\nconst dataTransfer = await page.evaluateHandle(() => new DataTransfer());\nawait locator.dispatchEvent('dragstart', { dataTransfer });\n```\n\n### dragTo[​](#locator-drag-to \"Direct link to dragTo\")\n\nDrag the source element towards the target element and drop it.\n\n**Usage**\n\n``` javascript\nconst source = page.locator('#source');\nconst target = page.locator('#target');\n\nawait source.dragTo(target);\n// or specify exact positions relative to the top-left corners of the elements:\nawait source.dragTo(target, {\n  sourcePosition: { x: 34, y: 7 },\n  targetPosition: { x: 10, y: 20 },\n});\n```\n\n**Arguments**\n\n- `target` [Locator](class-locator \"Locator\")\n\n  Locator of the element to drag to.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `sourcePosition` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Clicks on the source element at this point relative to the top-left corner of the element's padding box. If not specified, some visible point of the element is used.\n\n  - `targetPosition` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Drops on the target element at this point relative to the top-left corner of the element's padding box. If not specified, some visible point of the element is used.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n**Details**\n\nThis method drags the locator to another target locator or target position. It will first move to the source element, perform a `mousedown`, then move to the target element or position and perform a `mouseup`.\n\n### evaluate[​](#locator-evaluate \"Direct link to evaluate\")\n\nExecute JavaScript code in the page, taking the matching element as an argument.\n\n**Usage**\n\n``` javascript\nconst tweets = page.locator('.tweet .retweets');\nexpect(await tweets.evaluate(node => node.innerText)).toBe('10 retweets');\n```\n\n**Arguments**\n\n- `pageFunction` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Function to be evaluated in the page context.\n\n- `arg` [EvaluationArgument](../evaluating#evaluation-argument \"EvaluationArgument\") *(optional)*\n\n  Optional argument to pass to `pageFunction`.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\")\\>\n\n**Details**\n\nReturns the return value of `pageFunction`, called with the matching element as a first argument, and `arg` as a second argument.\n\nIf `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\"), this method will wait for the promise to resolve and return its value.\n\nIf `pageFunction` throws or rejects, this method throws.\n\n### evaluateAll[​](#locator-evaluate-all \"Direct link to evaluateAll\")\n\nExecute JavaScript code in the page, taking all matching elements as an argument.\n\n**Usage**\n\n``` javascript\nconst locator = page.locator('div');\nconst moreThanTen = await locator.evaluateAll((divs, min) => divs.length > min, 10);\n```\n\n**Arguments**\n\n- `pageFunction` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Function to be evaluated in the page context.\n\n- `arg` [EvaluationArgument](../evaluating#evaluation-argument \"EvaluationArgument\") *(optional)*\n\n  Optional argument to pass to `pageFunction`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\")\\>\n\n**Details**\n\nReturns the return value of `pageFunction`, called with an array of all matching elements as a first argument, and `arg` as a second argument.\n\nIf `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\"), this method will wait for the promise to resolve and return its value.\n\nIf `pageFunction` throws or rejects, this method throws.\n\n### evaluateHandle[​](#locator-evaluate-handle \"Direct link to evaluateHandle\")\n\nExecute JavaScript code in the page, taking the matching element as an argument, and return a [JSHandle](class-jshandle \"JSHandle\") with the result.\n\n**Usage**\n\n``` javascript\nawait locator.evaluateHandle(pageFunction);\nawait locator.evaluateHandle(pageFunction, arg, options);\n```\n\n**Arguments**\n\n- `pageFunction` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Function to be evaluated in the page context.\n\n- `arg` [EvaluationArgument](../evaluating#evaluation-argument \"EvaluationArgument\") *(optional)*\n\n  Optional argument to pass to `pageFunction`.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[JSHandle](class-jshandle \"JSHandle\")\\>\n\n**Details**\n\nReturns the return value of `pageFunction` as a[JSHandle](class-jshandle \"JSHandle\"), called with the matching element as a first argument, and `arg` as a second argument.\n\nThe only difference between [locator.evaluate()](class-locator#locator-evaluate) and [locator.evaluateHandle()](class-locator#locator-evaluate-handle) is that [locator.evaluateHandle()](class-locator#locator-evaluate-handle) returns [JSHandle](class-jshandle \"JSHandle\").\n\nIf `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\"), this method will wait for the promise to resolve and return its value.\n\nIf `pageFunction` throws or rejects, this method throws.\n\nSee [page.evaluateHandle()](class-page#page-evaluate-handle) for more details.\n\n### fill[​](#locator-fill \"Direct link to fill\")\n\nSet a value to the input field.\n\n**Usage**\n\n``` javascript\nawait page.getByRole('textbox').fill('example value');\n```\n\n**Arguments**\n\n- `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Value to set for the `<input>`, `<textarea>` or `[contenteditable]` element.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n**Details**\n\nThis method waits for [actionability](../actionability) checks, focuses the element, fills it and triggers an `input` event after filling. Note that you can pass an empty string to clear the input field.\n\nIf the target element is not an `<input>`, `<textarea>` or `[contenteditable]` element, this method throws an error. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be filled instead.\n\nTo send fine-grained keyboard events, use [locator.pressSequentially()](class-locator#locator-press-sequentially).\n\n### filter[​](#locator-filter \"Direct link to filter\")\n\nThis method narrows existing locator according to the options, for example filters by text. It can be chained to filter multiple times.\n\n**Usage**\n\n``` javascript\nconst rowLocator = page.locator('tr');\n// ...\nawait rowLocator\n    .filter({ hasText: 'text in column 1' })\n    .filter({ has: page.getByRole('button', { name: 'column 2 button' }) })\n    .screenshot();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `has` [Locator](class-locator \"Locator\") *(optional)*\n\n    Narrows down the results of the method to those which contain elements matching this relative locator. For example, `article` that has `text=Playwright` matches `<article><div>Playwright</div></article>`.\n\n    Inner locator **must be relative** to the outer locator and is queried starting with the outer locator match, not the document root. For example, you can find `content` that has `div` in `<article><content><div>Playwright</div></content></article>`. However, looking for `content` that has `article div` will fail, because the inner locator must be relative and should not use any elements outside the `content`.\n\n    Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](class-framelocator \"FrameLocator\")s.\n\n  - `hasNot` [Locator](class-locator \"Locator\") *(optional)*\n\n    Matches elements that do not contain an element that matches an inner locator. Inner locator is queried against the outer one. For example, `article` that does not have `div` matches `<article><span>Playwright</span></article>`.\n\n    Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](class-framelocator \"FrameLocator\")s.\n\n  - `hasNotText` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") *(optional)*\n\n    Matches elements that do not contain specified text somewhere inside, possibly in a child or a descendant element. When passed a [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), matching is case-insensitive and searches for a substring.\n\n  - `hasText` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") *(optional)*\n\n    Matches elements containing specified text somewhere inside, possibly in a child or a descendant element. When passed a [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), matching is case-insensitive and searches for a substring. For example, `\"Playwright\"` matches `<article><div>Playwright</div></article>`.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### first[​](#locator-first \"Direct link to first\")\n\nReturns locator to the first matching element.\n\n**Usage**\n\n``` javascript\nlocator.first();\n```\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### focus[​](#locator-focus \"Direct link to focus\")\n\nCalls [focus](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus) on the matching element.\n\n**Usage**\n\n``` javascript\nawait locator.focus();\nawait locator.focus(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### frameLocator[​](#locator-frame-locator \"Direct link to frameLocator\")\n\nWhen working with iframes, you can create a frame locator that will enter the iframe and allow locating elements in that iframe:\n\n**Usage**\n\n``` javascript\nconst locator = page.frameLocator('iframe').getByText('Submit');\nawait locator.click();\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to use when resolving DOM element.\n\n**Returns**\n\n- [FrameLocator](class-framelocator \"FrameLocator\")\n\n### getAttribute[​](#locator-get-attribute \"Direct link to getAttribute\")\n\nReturns the matching element's attribute value.\n\n> Asserting attributes\n>\n> If you need to assert an element's attribute, prefer [expect(locator).toHaveAttribute()](class-locatorassertions#locator-assertions-to-have-attribute) to avoid flakiness. See [assertions guide](../test-assertions) for more details.\n\n**Usage**\n\n``` javascript\nawait locator.getAttribute(name);\nawait locator.getAttribute(name, options);\n```\n\n**Arguments**\n\n- `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Attribute name to get the value for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### getByAltText[​](#locator-get-by-alt-text \"Direct link to getByAltText\")\n\nAllows locating elements by their alt text.\n\n**Usage**\n\nFor example, this method will find the image by alt text \"Playwright logo\":\n\n``` html\n<img alt='Playwright logo'>\n```\n\n``` javascript\nawait page.getByAltText('Playwright logo').click();\n```\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Text to locate the element for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### getByLabel[​](#locator-get-by-label \"Direct link to getByLabel\")\n\nAllows locating input elements by the text of the associated `<label>` or `aria-labelledby` element, or by the `aria-label` attribute.\n\n**Usage**\n\nFor example, this method will find inputs by label \"Username\" and \"Password\" in the following DOM:\n\n``` html\n<input aria-label=\"Username\">\n<label for=\"password-input\">Password:</label>\n<input id=\"password-input\">\n```\n\n``` javascript\nawait page.getByLabel('Username').fill('john');\nawait page.getByLabel('Password').fill('secret');\n```\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Text to locate the element for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### getByPlaceholder[​](#locator-get-by-placeholder \"Direct link to getByPlaceholder\")\n\nAllows locating input elements by the placeholder text.\n\n**Usage**\n\nFor example, consider the following DOM structure.\n\n``` html\n<input type=\"email\" placeholder=\"name@example.com\" />\n```\n\nYou can fill the input after locating it by the placeholder text:\n\n``` javascript\nawait page\n    .getByPlaceholder('name@example.com')\n    .fill('playwright@microsoft.com');\n```\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Text to locate the element for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### getByRole[​](#locator-get-by-role \"Direct link to getByRole\")\n\nAllows locating elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n\n**Usage**\n\nConsider the following DOM structure.\n\n``` html\n<h3>Sign up</h3>\n<label>\n  <input type=\"checkbox\" /> Subscribe\n</label>\n<br/>\n<button>Submit</button>\n```\n\nYou can locate each element by it's implicit role:\n\n``` javascript\nawait expect(page.getByRole('heading', { name: 'Sign up' })).toBeVisible();\n\nawait page.getByRole('checkbox', { name: 'Subscribe' }).check();\n\nawait page.getByRole('button', { name: /submit/i }).click();\n```\n\n**Arguments**\n\n- `role` \"alert\" \\| \"alertdialog\" \\| \"application\" \\| \"article\" \\| \"banner\" \\| \"blockquote\" \\| \"button\" \\| \"caption\" \\| \"cell\" \\| \"checkbox\" \\| \"code\" \\| \"columnheader\" \\| \"combobox\" \\| \"complementary\" \\| \"contentinfo\" \\| \"definition\" \\| \"deletion\" \\| \"dialog\" \\| \"directory\" \\| \"document\" \\| \"emphasis\" \\| \"feed\" \\| \"figure\" \\| \"form\" \\| \"generic\" \\| \"grid\" \\| \"gridcell\" \\| \"group\" \\| \"heading\" \\| \"img\" \\| \"insertion\" \\| \"link\" \\| \"list\" \\| \"listbox\" \\| \"listitem\" \\| \"log\" \\| \"main\" \\| \"marquee\" \\| \"math\" \\| \"meter\" \\| \"menu\" \\| \"menubar\" \\| \"menuitem\" \\| \"menuitemcheckbox\" \\| \"menuitemradio\" \\| \"navigation\" \\| \"none\" \\| \"note\" \\| \"option\" \\| \"paragraph\" \\| \"presentation\" \\| \"progressbar\" \\| \"radio\" \\| \"radiogroup\" \\| \"region\" \\| \"row\" \\| \"rowgroup\" \\| \"rowheader\" \\| \"scrollbar\" \\| \"search\" \\| \"searchbox\" \\| \"separator\" \\| \"slider\" \\| \"spinbutton\" \\| \"status\" \\| \"strong\" \\| \"subscript\" \\| \"superscript\" \\| \"switch\" \\| \"tab\" \\| \"table\" \\| \"tablist\" \\| \"tabpanel\" \\| \"term\" \\| \"textbox\" \\| \"time\" \\| \"timer\" \\| \"toolbar\" \\| \"tooltip\" \\| \"tree\" \\| \"treegrid\" \\| \"treeitem\"\n\n  Required aria role.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `checked` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    An attribute that is usually set by `aria-checked` or native `<input type=checkbox>` controls.\n\n    Learn more about [`aria-checked`](https://www.w3.org/TR/wai-aria-1.2/#aria-checked).\n\n  - `disabled` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    An attribute that is usually set by `aria-disabled` or `disabled`.\n\n    > note\n    >\n    > Unlike most other attributes, `disabled` is inherited through the DOM hierarchy. Learn more about [`aria-disabled`](https://www.w3.org/TR/wai-aria-1.2/#aria-disabled).\n\n  - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether `name` is matched exactly: case-sensitive and whole-string. Defaults to false. Ignored when `name` is a regular expression. Note that exact match still trims whitespace.\n\n  - `expanded` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    An attribute that is usually set by `aria-expanded`.\n\n    Learn more about [`aria-expanded`](https://www.w3.org/TR/wai-aria-1.2/#aria-expanded).\n\n  - `includeHidden` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Option that controls whether hidden elements are matched. By default, only non-hidden elements, as [defined by ARIA](https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion), are matched by role selector.\n\n    Learn more about [`aria-hidden`](https://www.w3.org/TR/wai-aria-1.2/#aria-hidden).\n\n  - `level` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    A number attribute that is usually present for roles `heading`, `listitem`, `row`, `treeitem`, with default values for `<h1>-<h6>` elements.\n\n    Learn more about [`aria-level`](https://www.w3.org/TR/wai-aria-1.2/#aria-level).\n\n  - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") *(optional)*\n\n    Option to match the [accessible name](https://w3c.github.io/accname/#dfn-accessible-name). By default, matching is case-insensitive and searches for a substring, use `exact` to control this behavior.\n\n    Learn more about [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n\n  - `pressed` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    An attribute that is usually set by `aria-pressed`.\n\n    Learn more about [`aria-pressed`](https://www.w3.org/TR/wai-aria-1.2/#aria-pressed).\n\n  - `selected` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    An attribute that is usually set by `aria-selected`.\n\n    Learn more about [`aria-selected`](https://www.w3.org/TR/wai-aria-1.2/#aria-selected).\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n**Details**\n\nRole selector **does not replace** accessibility audits and conformance tests, but rather gives early feedback about the ARIA guidelines.\n\nMany html elements have an implicitly [defined role](https://w3c.github.io/html-aam/#html-element-role-mappings) that is recognized by the role selector. You can find all the [supported roles here](https://www.w3.org/TR/wai-aria-1.2/#role_definitions). ARIA guidelines **do not recommend** duplicating implicit roles and attributes by setting `role` and/or `aria-*` attributes to default values.\n\n### getByTestId[​](#locator-get-by-test-id \"Direct link to getByTestId\")\n\nLocate element by the test id.\n\n**Usage**\n\nConsider the following DOM structure.\n\n``` html\n<button data-testid=\"directions\">Itinéraire</button>\n```\n\nYou can locate the element by it's test id:\n\n``` javascript\nawait page.getByTestId('directions').click();\n```\n\n**Arguments**\n\n- `testId` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Id to locate the element by.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n**Details**\n\nBy default, the `data-testid` attribute is used as a test id. Use [selectors.setTestIdAttribute()](class-selectors#selectors-set-test-id-attribute) to configure a different test id attribute if necessary.\n\n``` javascript\n// Set custom test id attribute from @playwright/test config:\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    testIdAttribute: 'data-pw'\n  },\n});\n```\n\n### getByText[​](#locator-get-by-text \"Direct link to getByText\")\n\nAllows locating elements that contain given text.\n\nSee also [locator.filter()](class-locator#locator-filter) that allows to match by another criteria, like an accessible role, and then filter by the text content.\n\n**Usage**\n\nConsider the following DOM structure:\n\n``` html\n<div>Hello <span>world</span></div>\n<div>Hello</div>\n```\n\nYou can locate by text substring, exact string, or a regular expression:\n\n``` javascript\n// Matches <span>\npage.getByText('world');\n\n// Matches first <div>\npage.getByText('Hello world');\n\n// Matches second <div>\npage.getByText('Hello', { exact: true });\n\n// Matches both <div>s\npage.getByText(/Hello/);\n\n// Matches second <div>\npage.getByText(/^hello$/i);\n```\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Text to locate the element for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n**Details**\n\nMatching by text always normalizes whitespace, even with exact match. For example, it turns multiple spaces into one, turns line breaks into spaces and ignores leading and trailing whitespace.\n\nInput elements of the type `button` and `submit` are matched by their `value` instead of the text content. For example, locating by text `\"Log in\"` matches `<input type=button value=\"Log in\">`.\n\n### getByTitle[​](#locator-get-by-title \"Direct link to getByTitle\")\n\nAllows locating elements by their title attribute.\n\n**Usage**\n\nConsider the following DOM structure.\n\n``` html\n<span title='Issues count'>25 issues</span>\n```\n\nYou can check the issues count after locating it by the title text:\n\n``` javascript\nawait expect(page.getByTitle('Issues count')).toHaveText('25 issues');\n```\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Text to locate the element for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### highlight[​](#locator-highlight \"Direct link to highlight\")\n\nHighlight the corresponding element(s) on the screen. Useful for debugging, don't commit the code that uses [locator.highlight()](class-locator#locator-highlight).\n\n**Usage**\n\n``` javascript\nawait locator.highlight();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### hover[​](#locator-hover \"Direct link to hover\")\n\nHover over the matching element.\n\n**Usage**\n\n``` javascript\nawait page.getByRole('link').hover();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `modifiers` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<\"Alt\" \\| \"Control\" \\| \"ControlOrMeta\" \\| \"Meta\" \\| \"Shift\"\\> *(optional)*\n\n    Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. \"ControlOrMeta\" resolves to \"Control\" on Windows and Linux and to \"Meta\" on macOS.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n**Details**\n\nThis method hovers over the element by performing the following steps:\n\n1.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.\n2.  Scroll the element into view if needed.\n3.  Use [page.mouse](class-page#page-mouse) to hover over the center of the element, or the specified `position`.\n\nIf the element is detached from the DOM at any moment during the action, this method throws.\n\nWhen all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror \"TimeoutError\"). Passing zero timeout disables this.\n\n### innerHTML[​](#locator-inner-html \"Direct link to innerHTML\")\n\nReturns the [`element.innerHTML`](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML).\n\n**Usage**\n\n``` javascript\nawait locator.innerHTML();\nawait locator.innerHTML(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### innerText[​](#locator-inner-text \"Direct link to innerText\")\n\nReturns the [`element.innerText`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText).\n\n> Asserting text\n>\n> If you need to assert text on the page, prefer [expect(locator).toHaveText()](class-locatorassertions#locator-assertions-to-have-text) with `useInnerText` option to avoid flakiness. See [assertions guide](../test-assertions) for more details.\n\n**Usage**\n\n``` javascript\nawait locator.innerText();\nawait locator.innerText(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### inputValue[​](#locator-input-value \"Direct link to inputValue\")\n\nReturns the value for the matching `<input>` or `<textarea>` or `<select>` element.\n\n> Asserting value\n>\n> If you need to assert input value, prefer [expect(locator).toHaveValue()](class-locatorassertions#locator-assertions-to-have-value) to avoid flakiness. See [assertions guide](../test-assertions) for more details.\n\n**Usage**\n\n``` javascript\nconst value = await page.getByRole('textbox').inputValue();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n**Details**\n\nThrows elements that are not an input, textarea or a select. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), returns the value of the control.\n\n### isChecked[​](#locator-is-checked \"Direct link to isChecked\")\n\nReturns whether the element is checked. Throws if the element is not a checkbox or radio input.\n\n> Asserting checked state\n>\n> If you need to assert that checkbox is checked, prefer [expect(locator).toBeChecked()](class-locatorassertions#locator-assertions-to-be-checked) to avoid flakiness. See [assertions guide](../test-assertions) for more details.\n\n**Usage**\n\n``` javascript\nconst checked = await page.getByRole('checkbox').isChecked();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\>\n\n### isDisabled[​](#locator-is-disabled \"Direct link to isDisabled\")\n\nReturns whether the element is disabled, the opposite of [enabled](../actionability#enabled).\n\n> Asserting disabled state\n>\n> If you need to assert that an element is disabled, prefer [expect(locator).toBeDisabled()](class-locatorassertions#locator-assertions-to-be-disabled) to avoid flakiness. See [assertions guide](../test-assertions) for more details.\n\n**Usage**\n\n``` javascript\nconst disabled = await page.getByRole('button').isDisabled();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\>\n\n### isEditable[​](#locator-is-editable \"Direct link to isEditable\")\n\nReturns whether the element is [editable](../actionability#editable).\n\n> Asserting editable state\n>\n> If you need to assert that an element is editable, prefer [expect(locator).toBeEditable()](class-locatorassertions#locator-assertions-to-be-editable) to avoid flakiness. See [assertions guide](../test-assertions) for more details.\n\n**Usage**\n\n``` javascript\nconst editable = await page.getByRole('textbox').isEditable();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\>\n\n### isEnabled[​](#locator-is-enabled \"Direct link to isEnabled\")\n\nReturns whether the element is [enabled](../actionability#enabled).\n\n> Asserting enabled state\n>\n> If you need to assert that an element is enabled, prefer [expect(locator).toBeEnabled()](class-locatorassertions#locator-assertions-to-be-enabled) to avoid flakiness. See [assertions guide](../test-assertions) for more details.\n\n**Usage**\n\n``` javascript\nconst enabled = await page.getByRole('button').isEnabled();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\>\n\n### isHidden[​](#locator-is-hidden \"Direct link to isHidden\")\n\nReturns whether the element is hidden, the opposite of [visible](../actionability#visible).\n\n> Asserting visibility\n>\n> If you need to assert that element is hidden, prefer [expect(locator).toBeHidden()](class-locatorassertions#locator-assertions-to-be-hidden) to avoid flakiness. See [assertions guide](../test-assertions) for more details.\n\n**Usage**\n\n``` javascript\nconst hidden = await page.getByRole('button').isHidden();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    > Deprecated\n    >\n    > This option is ignored. [locator.isHidden()](class-locator#locator-is-hidden) does not wait for the element to become hidden and returns immediately.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\>\n\n### isVisible[​](#locator-is-visible \"Direct link to isVisible\")\n\nReturns whether the element is [visible](../actionability#visible).\n\n> Asserting visibility\n>\n> If you need to assert that element is visible, prefer [expect(locator).toBeVisible()](class-locatorassertions#locator-assertions-to-be-visible) to avoid flakiness. See [assertions guide](../test-assertions) for more details.\n\n**Usage**\n\n``` javascript\nconst visible = await page.getByRole('button').isVisible();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    > Deprecated\n    >\n    > This option is ignored. [locator.isVisible()](class-locator#locator-is-visible) does not wait for the element to become visible and returns immediately.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\\>\n\n### last[​](#locator-last \"Direct link to last\")\n\nReturns locator to the last matching element.\n\n**Usage**\n\n``` javascript\nconst banana = await page.getByRole('listitem').last();\n```\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### locator[​](#locator-locator \"Direct link to locator\")\n\nThe method finds an element matching the specified selector in the locator's subtree. It also accepts filter options, similar to [locator.filter()](class-locator#locator-filter) method.\n\n[Learn more about locators](../locators).\n\n**Usage**\n\n``` javascript\nlocator.locator(selectorOrLocator);\nlocator.locator(selectorOrLocator, options);\n```\n\n**Arguments**\n\n- `selectorOrLocator` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Locator](class-locator \"Locator\")\n\n  A selector or locator to use when resolving DOM element.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `has` [Locator](class-locator \"Locator\") *(optional)*\n\n    Narrows down the results of the method to those which contain elements matching this relative locator. For example, `article` that has `text=Playwright` matches `<article><div>Playwright</div></article>`.\n\n    Inner locator **must be relative** to the outer locator and is queried starting with the outer locator match, not the document root. For example, you can find `content` that has `div` in `<article><content><div>Playwright</div></content></article>`. However, looking for `content` that has `article div` will fail, because the inner locator must be relative and should not use any elements outside the `content`.\n\n    Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](class-framelocator \"FrameLocator\")s.\n\n  - `hasNot` [Locator](class-locator \"Locator\") *(optional)*\n\n    Matches elements that do not contain an element that matches an inner locator. Inner locator is queried against the outer one. For example, `article` that does not have `div` matches `<article><span>Playwright</span></article>`.\n\n    Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](class-framelocator \"FrameLocator\")s.\n\n  - `hasNotText` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") *(optional)*\n\n    Matches elements that do not contain specified text somewhere inside, possibly in a child or a descendant element. When passed a [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), matching is case-insensitive and searches for a substring.\n\n  - `hasText` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") *(optional)*\n\n    Matches elements containing specified text somewhere inside, possibly in a child or a descendant element. When passed a [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), matching is case-insensitive and searches for a substring. For example, `\"Playwright\"` matches `<article><div>Playwright</div></article>`.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### nth[​](#locator-nth \"Direct link to nth\")\n\nReturns locator to the n-th matching element. It's zero based, `nth(0)` selects the first element.\n\n**Usage**\n\n``` javascript\nconst banana = await page.getByRole('listitem').nth(2);\n```\n\n**Arguments**\n\n- `index` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### or[​](#locator-or \"Direct link to or\")\n\nCreates a locator that matches either of the two locators.\n\n**Usage**\n\nConsider a scenario where you'd like to click on a \"New email\" button, but sometimes a security settings dialog shows up instead. In this case, you can wait for either a \"New email\" button, or a dialog and act accordingly.\n\n``` javascript\nconst newEmail = page.getByRole('button', { name: 'New' });\nconst dialog = page.getByText('Confirm security settings');\nawait expect(newEmail.or(dialog)).toBeVisible();\nif (await dialog.isVisible())\n  await page.getByRole('button', { name: 'Dismiss' }).click();\nawait newEmail.click();\n```\n\n**Arguments**\n\n- `locator` [Locator](class-locator \"Locator\")\n\n  Alternative locator to match.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### page[​](#locator-page \"Direct link to page\")\n\nA page this locator belongs to.\n\n**Usage**\n\n``` javascript\nlocator.page();\n```\n\n**Returns**\n\n- [Page](class-page \"Page\")\n\n### press[​](#locator-press \"Direct link to press\")\n\nFocuses the matching element and presses a combination of the keys.\n\n**Usage**\n\n``` javascript\nawait page.getByRole('textbox').press('Backspace');\n```\n\n**Arguments**\n\n- `key` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option will default to `true` in the future.\n\n    Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n**Details**\n\nFocuses the element, and then uses [keyboard.down()](class-keyboard#keyboard-down) and [keyboard.up()](class-keyboard#keyboard-up).\n\n`key` can specify the intended [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) value or a single character to generate the text for. A superset of the `key` values can be found [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values). Examples of the keys are:\n\n`F1` - `F12`, `Digit0`- `Digit9`, `KeyA`- `KeyZ`, `Backquote`, `Minus`, `Equal`, `Backslash`, `Backspace`, `Tab`, `Delete`, `Escape`, `ArrowDown`, `End`, `Enter`, `Home`, `Insert`, `PageDown`, `PageUp`, `ArrowRight`, `ArrowUp`, etc.\n\nFollowing modification shortcuts are also supported: `Shift`, `Control`, `Alt`, `Meta`, `ShiftLeft`, `ControlOrMeta`. `ControlOrMeta` resolves to `Control` on Windows and Linux and to `Meta` on macOS.\n\nHolding down `Shift` will type the text that corresponds to the `key` in the upper case.\n\nIf `key` is a single character, it is case-sensitive, so the values `a` and `A` will generate different respective texts.\n\nShortcuts such as `key: \"Control+o\"`, `key: \"Control++` or `key: \"Control+Shift+T\"` are supported as well. When specified with the modifier, modifier is pressed and being held while the subsequent key is being pressed.\n\n### pressSequentially[​](#locator-press-sequentially \"Direct link to pressSequentially\")\n\n> tip\n>\n> In most cases, you should use [locator.fill()](class-locator#locator-fill) instead. You only need to press keys one by one if there is special keyboard handling on the page.\n\nFocuses the element, and then sends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the text.\n\nTo press a special key, like `Control` or `ArrowDown`, use [locator.press()](class-locator#locator-press).\n\n**Usage**\n\n``` javascript\nawait locator.pressSequentially('Hello'); // Types instantly\nawait locator.pressSequentially('World', { delay: 100 }); // Types slower, like a user\n```\n\nAn example of typing into a text field and then submitting the form:\n\n``` javascript\nconst locator = page.getByLabel('Password');\nawait locator.pressSequentially('my password');\nawait locator.press('Enter');\n```\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  String of characters to sequentially press into a focused element.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to wait between key presses in milliseconds. Defaults to 0.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### screenshot[​](#locator-screenshot \"Direct link to screenshot\")\n\nTake a screenshot of the element matching the locator.\n\n**Usage**\n\n``` javascript\nawait page.getByRole('link').screenshot();\n```\n\nDisable animations and save screenshot to a file:\n\n``` javascript\nawait page.getByRole('link').screenshot({ animations: 'disabled', path: 'link.png' });\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `animations` \"disabled\" \\| \"allow\" *(optional)*\n\n    When set to `\"disabled\"`, stops CSS animations, CSS transitions and Web Animations. Animations get different treatment depending on their duration:\n\n    - finite animations are fast-forwarded to completion, so they'll fire `transitionend` event.\n    - infinite animations are canceled to initial state, and then played over after the screenshot.\n\n    Defaults to `\"allow\"` that leaves animations untouched.\n\n  - `caret` \"hide\" \\| \"initial\" *(optional)*\n\n    When set to `\"hide\"`, screenshot will hide text caret. When set to `\"initial\"`, text caret behavior will not be changed. Defaults to `\"hide\"`.\n\n  - `mask` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Locator](class-locator \"Locator\")\\> *(optional)*\n\n    Specify locators that should be masked when the screenshot is taken. Masked elements will be overlaid with a pink box `#FF00FF` (customized by `maskColor`) that completely covers its bounding box.\n\n  - `maskColor` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Specify the color of the overlay box for masked elements, in [CSS color format](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Default color is pink `#FF00FF`.\n\n  - `omitBackground` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images. Defaults to `false`.\n\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    The file path to save the image to. The screenshot type will be inferred from file extension. If `path` is a relative path, then it is resolved relative to the current working directory. If no path is provided, the image won't be saved to the disk.\n\n  - `quality` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    The quality of the image, between 0-100. Not applicable to `png` images.\n\n  - `scale` \"css\" \\| \"device\" *(optional)*\n\n    When set to `\"css\"`, screenshot will have a single pixel per each css pixel on the page. For high-dpi devices, this will keep screenshots small. Using `\"device\"` option will produce a single pixel per each device pixel, so screenshots of high-dpi devices will be twice as large or even larger.\n\n    Defaults to `\"device\"`.\n\n  - `style` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Text of the stylesheet to apply while making the screenshot. This is where you can hide dynamic elements, make elements invisible or change their properties to help you creating repeatable screenshots. This stylesheet pierces the Shadow DOM and applies to the inner frames.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `type` \"png\" \\| \"jpeg\" *(optional)*\n\n    Specify screenshot type, defaults to `png`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\\>\n\n**Details**\n\nThis method captures a screenshot of the page, clipped to the size and position of a particular element matching the locator. If the element is covered by other elements, it will not be actually visible on the screenshot. If the element is a scrollable container, only the currently scrolled content will be visible on the screenshot.\n\nThis method waits for the [actionability](../actionability) checks, then scrolls element into view before taking a screenshot. If the element is detached from DOM, the method throws an error.\n\nReturns the buffer with the captured screenshot.\n\n### scrollIntoViewIfNeeded[​](#locator-scroll-into-view-if-needed \"Direct link to scrollIntoViewIfNeeded\")\n\nThis method waits for [actionability](../actionability) checks, then tries to scroll element into view, unless it is completely visible as defined by [IntersectionObserver](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)'s `ratio`.\n\nSee [scrolling](../input#scrolling) for alternative ways to scroll.\n\n**Usage**\n\n``` javascript\nawait locator.scrollIntoViewIfNeeded();\nawait locator.scrollIntoViewIfNeeded(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### selectOption[​](#locator-select-option \"Direct link to selectOption\")\n\nSelects option or options in `<select>`.\n\n**Usage**\n\n``` html\n<select multiple>\n  <option value=\"red\">Red</div>\n  <option value=\"green\">Green</div>\n  <option value=\"blue\">Blue</div>\n</select>\n```\n\n``` javascript\n// single selection matching the value or label\nelement.selectOption('blue');\n\n// single selection matching the label\nelement.selectOption({ label: 'Blue' });\n\n// multiple selection for red, green and blue options\nelement.selectOption(['red', 'green', 'blue']);\n```\n\n**Arguments**\n\n- `values` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [ElementHandle](class-elementhandle \"ElementHandle\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[ElementHandle](class-elementhandle \"ElementHandle\")\\> \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Matches by `option.value`. Optional.\n\n  - `label` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Matches by `option.label`. Optional.\n\n  - `index` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Matches by the index. Optional.\n\n  Options to select. If the `<select>` has the `multiple` attribute, all matching options are selected, otherwise only the first option matching one of the passed options is selected. String values are matching both values and labels. Option is considered matching if all specified properties match.\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option will default to `true` in the future.\n\n    Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\\>\n\n**Details**\n\nThis method waits for [actionability](../actionability) checks, waits until all specified options are present in the `<select>` element and selects these options.\n\nIf the target element is not a `<select>` element, this method throws an error. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be used instead.\n\nReturns the array of option values that have been successfully selected.\n\nTriggers a `change` and `input` event once all the provided options have been selected.\n\n### selectText[​](#locator-select-text \"Direct link to selectText\")\n\nThis method waits for [actionability](../actionability) checks, then focuses the element and selects all its text content.\n\nIf the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), focuses and selects text in the control instead.\n\n**Usage**\n\n``` javascript\nawait locator.selectText();\nawait locator.selectText(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### setChecked[​](#locator-set-checked \"Direct link to setChecked\")\n\nSet the state of a checkbox or a radio element.\n\n**Usage**\n\n``` javascript\nawait page.getByRole('checkbox').setChecked(true);\n```\n\n**Arguments**\n\n- `checked` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n  Whether to check or uncheck the checkbox.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n**Details**\n\nThis method checks or unchecks an element by performing the following steps:\n\n1.  Ensure that matched element is a checkbox or a radio input. If not, this method throws.\n2.  If the element already has the right checked state, this method returns immediately.\n3.  Wait for [actionability](../actionability) checks on the matched element, unless `force` option is set. If the element is detached during the checks, the whole action is retried.\n4.  Scroll the element into view if needed.\n5.  Use [page.mouse](class-page#page-mouse) to click in the center of the element.\n6.  Ensure that the element is now checked or unchecked. If not, this method throws.\n\nWhen all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror \"TimeoutError\"). Passing zero timeout disables this.\n\n### setInputFiles[​](#locator-set-input-files \"Direct link to setInputFiles\")\n\nUpload file or multiple files into `<input type=file>`. For inputs with a `[webkitdirectory]` attribute, only a single directory path is supported.\n\n**Usage**\n\n``` javascript\n// Select one file\nawait page.getByLabel('Upload file').setInputFiles(path.join(__dirname, 'myfile.pdf'));\n\n// Select multiple files\nawait page.getByLabel('Upload files').setInputFiles([\n  path.join(__dirname, 'file1.txt'),\n  path.join(__dirname, 'file2.txt'),\n]);\n\n// Select a directory\nawait page.getByLabel('Upload directory').setInputFiles(path.join(__dirname, 'mydir'));\n\n// Remove all the selected files\nawait page.getByLabel('Upload file').setInputFiles([]);\n\n// Upload buffer from memory\nawait page.getByLabel('Upload file').setInputFiles({\n  name: 'file.txt',\n  mimeType: 'text/plain',\n  buffer: Buffer.from('this is test')\n});\n```\n\n**Arguments**\n\n- `files` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    File name\n\n  - `mimeType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    File type\n\n  - `buffer` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\n\n    File content\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n**Details**\n\nSets the value of the file input to these file paths or files. If some of the `filePaths` are relative paths, then they are resolved relative to the current working directory. For empty array, clears the selected files.\n\nThis method expects [Locator](class-locator \"Locator\") to point to an [input element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input). However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), targets the control instead.\n\n### tap[​](#locator-tap \"Direct link to tap\")\n\nPerform a tap gesture on the element matching the locator.\n\n**Usage**\n\n``` javascript\nawait locator.tap();\nawait locator.tap(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `modifiers` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<\"Alt\" \\| \"Control\" \\| \"ControlOrMeta\" \\| \"Meta\" \\| \"Shift\"\\> *(optional)*\n\n    Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. \"ControlOrMeta\" resolves to \"Control\" on Windows and Linux and to \"Meta\" on macOS.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n**Details**\n\nThis method taps the element by performing the following steps:\n\n1.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.\n2.  Scroll the element into view if needed.\n3.  Use [page.touchscreen](class-page#page-touchscreen) to tap the center of the element, or the specified `position`.\n\nIf the element is detached from the DOM at any moment during the action, this method throws.\n\nWhen all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror \"TimeoutError\"). Passing zero timeout disables this.\n\n> note\n>\n> `element.tap()` requires that the `hasTouch` option of the browser context be set to true.\n\n### textContent[​](#locator-text-content \"Direct link to textContent\")\n\nReturns the [`node.textContent`](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent).\n\n> Asserting text\n>\n> If you need to assert text on the page, prefer [expect(locator).toHaveText()](class-locatorassertions#locator-assertions-to-have-text) to avoid flakiness. See [assertions guide](../test-assertions) for more details.\n\n**Usage**\n\n``` javascript\nawait locator.textContent();\nawait locator.textContent(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### uncheck[​](#locator-uncheck \"Direct link to uncheck\")\n\nEnsure that checkbox or radio element is unchecked.\n\n**Usage**\n\n``` javascript\nawait page.getByRole('checkbox').uncheck();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n**Details**\n\nThis method unchecks the element by performing the following steps:\n\n1.  Ensure that element is a checkbox or a radio input. If not, this method throws. If the element is already unchecked, this method returns immediately.\n2.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.\n3.  Scroll the element into view if needed.\n4.  Use [page.mouse](class-page#page-mouse) to click in the center of the element.\n5.  Ensure that the element is now unchecked. If not, this method throws.\n\nIf the element is detached from the DOM at any moment during the action, this method throws.\n\nWhen all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror \"TimeoutError\"). Passing zero timeout disables this.\n\n### waitFor[​](#locator-wait-for \"Direct link to waitFor\")\n\nReturns when element specified by locator satisfies the `state` option.\n\nIf target element already satisfies the condition, the method returns immediately. Otherwise, waits for up to `timeout` milliseconds until the condition is met.\n\n**Usage**\n\n``` javascript\nconst orderSent = page.locator('#order-sent');\nawait orderSent.waitFor();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `state` \"attached\" \\| \"detached\" \\| \"visible\" \\| \"hidden\" *(optional)*\n\n    Defaults to `'visible'`. Can be either:\n\n    - `'attached'` - wait for element to be present in DOM.\n    - `'detached'` - wait for element to not be present in DOM.\n    - `'visible'` - wait for element to have non-empty bounding box and no `visibility:hidden`. Note that element without any content or with `display:none` has an empty bounding box and is not considered visible.\n    - `'hidden'` - wait for element to be either detached from DOM, or have an empty bounding box or `visibility:hidden`. This is opposite to the `'visible'` option.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n## Deprecated[​](#deprecated \"Direct link to Deprecated\")\n\n### elementHandle[​](#locator-element-handle \"Direct link to elementHandle\")\n\n> Discouraged\n>\n> Always prefer using [Locator](class-locator \"Locator\")s and web assertions over [ElementHandle](class-elementhandle \"ElementHandle\")s because latter are inherently racy.\n\nResolves given locator to the first matching DOM element. If there are no matching elements, waits for one. If multiple elements match the locator, throws.\n\n**Usage**\n\n``` javascript\nawait locator.elementHandle();\nawait locator.elementHandle(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[ElementHandle](class-elementhandle \"ElementHandle\")\\>\n\n### elementHandles[​](#locator-element-handles \"Direct link to elementHandles\")\n\n> Discouraged\n>\n> Always prefer using [Locator](class-locator \"Locator\")s and web assertions over [ElementHandle](class-elementhandle \"ElementHandle\")s because latter are inherently racy.\n\nResolves given locator to all matching DOM elements. If there are no matching elements, returns an empty list.\n\n**Usage**\n\n``` javascript\nawait locator.elementHandles();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[ElementHandle](class-elementhandle \"ElementHandle\")\\>\\>\n\n### type[​](#locator-type \"Direct link to type\")\n\n> Deprecated\n>\n> In most cases, you should use [locator.fill()](class-locator#locator-fill) instead. You only need to press keys one by one if there is special keyboard handling on the page - in this case use [locator.pressSequentially()](class-locator#locator-press-sequentially).\n\nFocuses the element, and then sends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the text.\n\nTo press a special key, like `Control` or `ArrowDown`, use [locator.press()](class-locator#locator-press).\n\n**Usage**\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A text to type into a focused element.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to wait between key presses in milliseconds. Defaults to 0.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-locator](https://playwright.dev/docs/api/class-locator)"
- name: locator.all
  id: api/class-locator#locator-all
  summary: When the locator points to a list of elements, this returns an array of locators, pointing to their respective elements
  belongs_to: Locator
  description: |-
    ### all[​](#locator-all "Direct link to all")

    When the locator points to a list of elements, this returns an array of locators, pointing to their respective elements.

    > note
    >
    > [locator.all()](class-locator#locator-all) does not wait for elements to match the locator, and instead immediately returns whatever is present in the page. When the list of elements changes dynamically, [locator.all()](class-locator#locator-all) will produce unpredictable and flaky results. When the list of elements is stable, but loaded dynamically, wait for the full list to finish loading before calling [locator.all()](class-locator#locator-all).

    **Usage**

    ``` javascript
    for (const li of await page.getByRole('listitem').all())
      await li.click();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Locator](class-locator "Locator")\>\>
- name: locator.allInnerTexts
  id: api/class-locator#locator-all-inner-texts
  summary: Returns an array of node.innerText values for all matching nodes
  belongs_to: Locator
  description: |-
    ### allInnerTexts[​](#locator-all-inner-texts "Direct link to allInnerTexts")

    Returns an array of `node.innerText` values for all matching nodes.

    > Asserting text
    >
    > If you need to assert text on the page, prefer [expect(locator).toHaveText()](class-locatorassertions#locator-assertions-to-have-text) with `useInnerText` option to avoid flakiness. See [assertions guide](../test-assertions) for more details.

    **Usage**

    ``` javascript
    const texts = await page.getByRole('link').allInnerTexts();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>\>

    &nbsp;
- name: locator.allTextContents
  id: api/class-locator#locator-all-text-contents
  summary: Returns an array of node.textContent values for all matching nodes
  belongs_to: Locator
  description: |-
    ### allTextContents[​](#locator-all-text-contents "Direct link to allTextContents")

    Returns an array of `node.textContent` values for all matching nodes.

    > Asserting text
    >
    > If you need to assert text on the page, prefer [expect(locator).toHaveText()](class-locatorassertions#locator-assertions-to-have-text) to avoid flakiness. See [assertions guide](../test-assertions) for more details.

    **Usage**

    ``` javascript
    const texts = await page.getByRole('link').allTextContents();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>\>

    &nbsp;
- name: locator.and
  id: api/class-locator#locator-and
  summary: Creates a locator that matches both this locator and the argument locator
  belongs_to: Locator
  description: |-
    ### and[​](#locator-and "Direct link to and")

    Creates a locator that matches both this locator and the argument locator.

    **Usage**

    The following example finds a button with a specific title.

    ``` javascript
    const button = page.getByRole('button').and(page.getByTitle('Subscribe'));
    ```

    **Arguments**

    - `locator` [Locator](class-locator "Locator")

      Additional locator to match.

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: locator.blur
  id: api/class-locator#locator-blur
  summary: Calls blur on the element
  belongs_to: Locator
  description: |-
    ### blur[​](#locator-blur "Direct link to blur")

    Calls [blur](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/blur) on the element.

    **Usage**

    ``` javascript
    await locator.blur();
    await locator.blur(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locator.boundingBox
  id: api/class-locator#locator-bounding-box
  summary: This method returns the bounding box of the element matching the locator, or null if the element is not visible
  belongs_to: Locator
  description: |-
    ### boundingBox[​](#locator-bounding-box "Direct link to boundingBox")

    This method returns the bounding box of the element matching the locator, or `null` if the element is not visible. The bounding box is calculated relative to the main frame viewport - which is usually the same as the browser window.

    **Usage**

    ``` javascript
    const box = await page.getByRole('button').boundingBox();
    await page.mouse.click(box.x + box.width / 2, box.y + box.height / 2);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `x`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        the x coordinate of the element in pixels.

      - `y`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        the y coordinate of the element in pixels.

      - `width`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        the width of the element in pixels.

      - `height`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        the height of the element in pixels.

    **Details**

    Scrolling affects the returned bounding box, similarly to [Element.getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect). That means `x` and/or `y` may be negative.

    Elements from child frames return the bounding box relative to the main frame, unlike the [Element.getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect).

    Assuming the page is static, it is safe to use bounding box coordinates to perform input. For example, the following snippet should click the center of the element.
- name: locator.check
  id: api/class-locator#locator-check
  summary: Ensure that checkbox or radio element is checked
  belongs_to: Locator
  description: |-
    ### check[​](#locator-check "Direct link to check")

    Ensure that checkbox or radio element is checked.

    **Usage**

    ``` javascript
    await page.getByRole('checkbox').check();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    **Details**

    Performs the following steps:

    1.  Ensure that element is a checkbox or a radio input. If not, this method throws. If the element is already checked, this method returns immediately.
    2.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.
    3.  Scroll the element into view if needed.
    4.  Use [page.mouse](class-page#page-mouse) to click in the center of the element.
    5.  Ensure that the element is now checked. If not, this method throws.

    If the element is detached from the DOM at any moment during the action, this method throws.

    When all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror "TimeoutError"). Passing zero timeout disables this.
- name: locator.clear
  id: api/class-locator#locator-clear
  summary: Clear the input field
  belongs_to: Locator
  description: |-
    ### clear[​](#locator-clear "Direct link to clear")

    Clear the input field.

    **Usage**

    ``` javascript
    await page.getByRole('textbox').clear();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    **Details**

    This method waits for [actionability](../actionability) checks, focuses the element, clears it and triggers an `input` event after clearing.

    If the target element is not an `<input>`, `<textarea>` or `[contenteditable]` element, this method throws an error. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be cleared instead.
- name: locator.click
  id: api/class-locator#locator-click
  summary: Click an element
  belongs_to: Locator
  description: |-
    ### click[​](#locator-click "Direct link to click")

    Click an element.

    **Usage**

    Click a button:

    ``` javascript
    await page.getByRole('button').click();
    ```

    Shift-right-click at a specific position on a canvas:

    ``` javascript
    await page.locator('canvas').click({
      button: 'right',
      modifiers: ['Shift'],
      position: { x: 23, y: 32 },
    });
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `button` "left" \| "right" \| "middle" *(optional)*

        Defaults to `left`.

      - `clickCount` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail "UIEvent.detail").

      - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.

      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `modifiers`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<"Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\> *(optional)*

        Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option will default to `true` in the future.

        Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.

      - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    **Details**

    This method clicks the element by performing the following steps:

    1.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.
    2.  Scroll the element into view if needed.
    3.  Use [page.mouse](class-page#page-mouse) to click in the center of the element, or the specified `position`.
    4.  Wait for initiated navigations to either succeed or fail, unless `noWaitAfter` option is set.

    If the element is detached from the DOM at any moment during the action, this method throws.

    When all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror "TimeoutError"). Passing zero timeout disables this.
- name: locator.contentFrame
  id: api/class-locator#locator-content-frame
  summary: Returns a FrameLocator object pointing to the same iframe as this locator
  belongs_to: Locator
  description: |-
    ### contentFrame[​](#locator-content-frame "Direct link to contentFrame")

    Returns a [FrameLocator](class-framelocator "FrameLocator") object pointing to the same `iframe` as this locator.

    Useful when you have a [Locator](class-locator "Locator") object obtained somewhere, and later on would like to interact with the content inside the frame.

    For a reverse operation, use [frameLocator.owner()](class-framelocator#frame-locator-owner).

    **Usage**

    ``` javascript
    const locator = page.locator('iframe[name="embedded"]');
    // ...
    const frameLocator = locator.contentFrame();
    await frameLocator.getByRole('button').click();
    ```

    **Returns**

    - [FrameLocator](class-framelocator "FrameLocator")

    &nbsp;
- name: locator.count
  id: api/class-locator#locator-count
  summary: Returns the number of elements matching the locator
  belongs_to: Locator
  description: |-
    ### count[​](#locator-count "Direct link to count")

    Returns the number of elements matching the locator.

    > Asserting count
    >
    > If you need to assert the number of elements on the page, prefer [expect(locator).toHaveCount()](class-locatorassertions#locator-assertions-to-have-count) to avoid flakiness. See [assertions guide](../test-assertions) for more details.

    **Usage**

    ``` javascript
    const count = await page.getByRole('listitem').count();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\>

    &nbsp;
- name: locator.dblclick
  id: api/class-locator#locator-dblclick
  summary: Double-click an element
  belongs_to: Locator
  description: |-
    ### dblclick[​](#locator-dblclick "Direct link to dblclick")

    Double-click an element.

    **Usage**

    ``` javascript
    await locator.dblclick();
    await locator.dblclick(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `button` "left" \| "right" \| "middle" *(optional)*

        Defaults to `left`.

      - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.

      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `modifiers`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<"Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\> *(optional)*

        Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    **Details**

    This method double clicks the element by performing the following steps:

    1.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.
    2.  Scroll the element into view if needed.
    3.  Use [page.mouse](class-page#page-mouse) to double click in the center of the element, or the specified `position`.

    If the element is detached from the DOM at any moment during the action, this method throws.

    When all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror "TimeoutError"). Passing zero timeout disables this.

    > note
    >
    > `element.dblclick()` dispatches two `click` events and a single `dblclick` event.
- name: locator.dispatchEvent
  id: api/class-locator#locator-dispatch-event
  summary: Programmatically dispatch an event on the matching element
  belongs_to: Locator
  description: |-
    ### dispatchEvent[​](#locator-dispatch-event "Direct link to dispatchEvent")

    Programmatically dispatch an event on the matching element.

    **Usage**

    ``` javascript
    await locator.dispatchEvent('click');
    ```

    **Arguments**

    - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      DOM event type: `"click"`, `"dragstart"`, etc.

    - `eventInit` [EvaluationArgument](../evaluating#evaluation-argument "EvaluationArgument") *(optional)*

      Optional event-specific initialization properties.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    **Details**

    The snippet above dispatches the `click` event on the element. Regardless of the visibility state of the element, `click` is dispatched. This is equivalent to calling [element.click()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click).

    Under the hood, it creates an instance of an event based on the given `type`, initializes it with `eventInit` properties and dispatches it on the element. Events are `composed`, `cancelable` and bubble by default.

    Since `eventInit` is event-specific, please refer to the events documentation for the lists of initial properties:

    - [DeviceMotionEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/DeviceMotionEvent)
    - [DeviceOrientationEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/DeviceOrientationEvent)
    - [DragEvent](https://developer.mozilla.org/en-US/docs/Web/API/DragEvent/DragEvent)
    - [Event](https://developer.mozilla.org/en-US/docs/Web/API/Event/Event)
    - [FocusEvent](https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/FocusEvent)
    - [KeyboardEvent](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent)
    - [MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent)
    - [PointerEvent](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/PointerEvent)
    - [TouchEvent](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/TouchEvent)
    - [WheelEvent](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/WheelEvent)

    You can also specify [JSHandle](class-jshandle "JSHandle") as the property value if you want live objects to be passed into the event:

    ``` javascript
    // Note you can only create DataTransfer in Chromium and Firefox
    const dataTransfer = await page.evaluateHandle(() => new DataTransfer());
    await locator.dispatchEvent('dragstart', { dataTransfer });
    ```
- name: locator.dragTo
  id: api/class-locator#locator-drag-to
  summary: Drag the source element towards the target element and drop it
  belongs_to: Locator
  description: |-
    ### dragTo[​](#locator-drag-to "Direct link to dragTo")

    Drag the source element towards the target element and drop it.

    **Usage**

    ``` javascript
    const source = page.locator('#source');
    const target = page.locator('#target');

    await source.dragTo(target);
    // or specify exact positions relative to the top-left corners of the elements:
    await source.dragTo(target, {
      sourcePosition: { x: 34, y: 7 },
      targetPosition: { x: 10, y: 20 },
    });
    ```

    **Arguments**

    - `target` [Locator](class-locator "Locator")

      Locator of the element to drag to.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `sourcePosition` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Clicks on the source element at this point relative to the top-left corner of the element's padding box. If not specified, some visible point of the element is used.

      - `targetPosition` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Drops on the target element at this point relative to the top-left corner of the element's padding box. If not specified, some visible point of the element is used.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    **Details**

    This method drags the locator to another target locator or target position. It will first move to the source element, perform a `mousedown`, then move to the target element or position and perform a `mouseup`.
- name: locator.elementHandle
  id: api/class-locator#locator-element-handle
  summary: Always prefer using Locators and web assertions over ElementHandles because latter are inherently racy
  belongs_to: Locator
  description: |-
    ### elementHandle[​](#locator-element-handle "Direct link to elementHandle")

    > Discouraged
    >
    > Always prefer using [Locator](class-locator "Locator")s and web assertions over [ElementHandle](class-elementhandle "ElementHandle")s because latter are inherently racy.

    Resolves given locator to the first matching DOM element. If there are no matching elements, waits for one. If multiple elements match the locator, throws.

    **Usage**

    ``` javascript
    await locator.elementHandle();
    await locator.elementHandle(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[ElementHandle](class-elementhandle "ElementHandle")\>

    &nbsp;
- name: locator.elementHandles
  id: api/class-locator#locator-element-handles
  summary: Always prefer using Locators and web assertions over ElementHandles because latter are inherently racy
  belongs_to: Locator
  description: |-
    ### elementHandles[​](#locator-element-handles "Direct link to elementHandles")

    > Discouraged
    >
    > Always prefer using [Locator](class-locator "Locator")s and web assertions over [ElementHandle](class-elementhandle "ElementHandle")s because latter are inherently racy.

    Resolves given locator to all matching DOM elements. If there are no matching elements, returns an empty list.

    **Usage**

    ``` javascript
    await locator.elementHandles();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[ElementHandle](class-elementhandle "ElementHandle")\>\>

    &nbsp;
- name: locator.evaluate
  id: api/class-locator#locator-evaluate
  summary: Execute JavaScript code in the page, taking the matching element as an argument
  belongs_to: Locator
  description: |-
    ### evaluate[​](#locator-evaluate "Direct link to evaluate")

    Execute JavaScript code in the page, taking the matching element as an argument.

    **Usage**

    ``` javascript
    const tweets = page.locator('.tweet .retweets');
    expect(await tweets.evaluate(node => node.innerText)).toBe('10 retweets');
    ```

    **Arguments**

    - `pageFunction`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Function to be evaluated in the page context.

    - `arg` [EvaluationArgument](../evaluating#evaluation-argument "EvaluationArgument") *(optional)*

      Optional argument to pass to `pageFunction`.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>

    **Details**

    Returns the return value of `pageFunction`, called with the matching element as a first argument, and `arg` as a second argument.

    If `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), this method will wait for the promise to resolve and return its value.

    If `pageFunction` throws or rejects, this method throws.
- name: locator.evaluateAll
  id: api/class-locator#locator-evaluate-all
  summary: Execute JavaScript code in the page, taking all matching elements as an argument
  belongs_to: Locator
  description: |-
    ### evaluateAll[​](#locator-evaluate-all "Direct link to evaluateAll")

    Execute JavaScript code in the page, taking all matching elements as an argument.

    **Usage**

    ``` javascript
    const locator = page.locator('div');
    const moreThanTen = await locator.evaluateAll((divs, min) => divs.length > min, 10);
    ```

    **Arguments**

    - `pageFunction`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Function to be evaluated in the page context.

    - `arg` [EvaluationArgument](../evaluating#evaluation-argument "EvaluationArgument") *(optional)*

      Optional argument to pass to `pageFunction`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>

    **Details**

    Returns the return value of `pageFunction`, called with an array of all matching elements as a first argument, and `arg` as a second argument.

    If `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), this method will wait for the promise to resolve and return its value.

    If `pageFunction` throws or rejects, this method throws.
- name: locator.evaluateHandle
  id: api/class-locator#locator-evaluate-handle
  summary: Execute JavaScript code in the page, taking the matching element as an argument, and return a JSHandle with the result
  belongs_to: Locator
  description: |-
    ### evaluateHandle[​](#locator-evaluate-handle "Direct link to evaluateHandle")

    Execute JavaScript code in the page, taking the matching element as an argument, and return a [JSHandle](class-jshandle "JSHandle") with the result.

    **Usage**

    ``` javascript
    await locator.evaluateHandle(pageFunction);
    await locator.evaluateHandle(pageFunction, arg, options);
    ```

    **Arguments**

    - `pageFunction`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Function to be evaluated in the page context.

    - `arg` [EvaluationArgument](../evaluating#evaluation-argument "EvaluationArgument") *(optional)*

      Optional argument to pass to `pageFunction`.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[JSHandle](class-jshandle "JSHandle")\>

    **Details**

    Returns the return value of `pageFunction` as a[JSHandle](class-jshandle "JSHandle"), called with the matching element as a first argument, and `arg` as a second argument.

    The only difference between [locator.evaluate()](class-locator#locator-evaluate) and [locator.evaluateHandle()](class-locator#locator-evaluate-handle) is that [locator.evaluateHandle()](class-locator#locator-evaluate-handle) returns [JSHandle](class-jshandle "JSHandle").

    If `pageFunction` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), this method will wait for the promise to resolve and return its value.

    If `pageFunction` throws or rejects, this method throws.

    See [page.evaluateHandle()](class-page#page-evaluate-handle) for more details.
- name: locator.fill
  id: api/class-locator#locator-fill
  summary: Set a value to the input field
  belongs_to: Locator
  description: |-
    ### fill[​](#locator-fill "Direct link to fill")

    Set a value to the input field.

    **Usage**

    ``` javascript
    await page.getByRole('textbox').fill('example value');
    ```

    **Arguments**

    - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Value to set for the `<input>`, `<textarea>` or `[contenteditable]` element.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    **Details**

    This method waits for [actionability](../actionability) checks, focuses the element, fills it and triggers an `input` event after filling. Note that you can pass an empty string to clear the input field.

    If the target element is not an `<input>`, `<textarea>` or `[contenteditable]` element, this method throws an error. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be filled instead.

    To send fine-grained keyboard events, use [locator.pressSequentially()](class-locator#locator-press-sequentially).
- name: locator.filter
  id: api/class-locator#locator-filter
  summary: This method narrows existing locator according to the options, for example filters by text
  belongs_to: Locator
  description: |-
    ### filter[​](#locator-filter "Direct link to filter")

    This method narrows existing locator according to the options, for example filters by text. It can be chained to filter multiple times.

    **Usage**

    ``` javascript
    const rowLocator = page.locator('tr');
    // ...
    await rowLocator
        .filter({ hasText: 'text in column 1' })
        .filter({ has: page.getByRole('button', { name: 'column 2 button' }) })
        .screenshot();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `has` [Locator](class-locator "Locator") *(optional)*

        Narrows down the results of the method to those which contain elements matching this relative locator. For example, `article` that has `text=Playwright` matches `<article><div>Playwright</div></article>`.

        Inner locator **must be relative** to the outer locator and is queried starting with the outer locator match, not the document root. For example, you can find `content` that has `div` in `<article><content><div>Playwright</div></content></article>`. However, looking for `content` that has `article div` will fail, because the inner locator must be relative and should not use any elements outside the `content`.

        Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](class-framelocator "FrameLocator")s.

      - `hasNot` [Locator](class-locator "Locator") *(optional)*

        Matches elements that do not contain an element that matches an inner locator. Inner locator is queried against the outer one. For example, `article` that does not have `div` matches `<article><span>Playwright</span></article>`.

        Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](class-framelocator "FrameLocator")s.

      - `hasNotText`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") *(optional)*

        Matches elements that do not contain specified text somewhere inside, possibly in a child or a descendant element. When passed a [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), matching is case-insensitive and searches for a substring.

      - `hasText`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") *(optional)*

        Matches elements containing specified text somewhere inside, possibly in a child or a descendant element. When passed a [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), matching is case-insensitive and searches for a substring. For example, `"Playwright"` matches `<article><div>Playwright</div></article>`.

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: locator.first
  id: api/class-locator#locator-first
  summary: Returns locator to the first matching element
  belongs_to: Locator
  description: |-
    ### first[​](#locator-first "Direct link to first")

    Returns locator to the first matching element.

    **Usage**

    ``` javascript
    locator.first();
    ```

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: locator.focus
  id: api/class-locator#locator-focus
  summary: Calls focus on the matching element
  belongs_to: Locator
  description: |-
    ### focus[​](#locator-focus "Direct link to focus")

    Calls [focus](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus) on the matching element.

    **Usage**

    ``` javascript
    await locator.focus();
    await locator.focus(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locator.frameLocator
  id: api/class-locator#locator-frame-locator
  summary: A selector to use when resolving DOM element
  belongs_to: Locator
  description: |-
    ### frameLocator[​](#locator-frame-locator "Direct link to frameLocator")

    When working with iframes, you can create a frame locator that will enter the iframe and allow locating elements in that iframe:

    **Usage**

    ``` javascript
    const locator = page.frameLocator('iframe').getByText('Submit');
    await locator.click();
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to use when resolving DOM element.

    **Returns**

    - [FrameLocator](class-framelocator "FrameLocator")

    &nbsp;
- name: locator.getAttribute
  id: api/class-locator#locator-get-attribute
  summary: Returns the matching element's attribute value
  belongs_to: Locator
  description: |-
    ### getAttribute[​](#locator-get-attribute "Direct link to getAttribute")

    Returns the matching element's attribute value.

    > Asserting attributes
    >
    > If you need to assert an element's attribute, prefer [expect(locator).toHaveAttribute()](class-locatorassertions#locator-assertions-to-have-attribute) to avoid flakiness. See [assertions guide](../test-assertions) for more details.

    **Usage**

    ``` javascript
    await locator.getAttribute(name);
    await locator.getAttribute(name, options);
    ```

    **Arguments**

    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Attribute name to get the value for.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: locator.getByAltText
  id: api/class-locator#locator-get-by-alt-text
  summary: Allows locating elements by their alt text
  belongs_to: Locator
  description: |-
    ### getByAltText[​](#locator-get-by-alt-text "Direct link to getByAltText")

    Allows locating elements by their alt text.

    **Usage**

    For example, this method will find the image by alt text "Playwright logo":

    ``` html
    <img alt='Playwright logo'>
    ```

    ``` javascript
    await page.getByAltText('Playwright logo').click();
    ```

    **Arguments**

    - `text`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Text to locate the element for.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: locator.getByLabel
  id: api/class-locator#locator-get-by-label
  summary: Allows locating input elements by the text of the associated <label> or aria-labelledby element, or by the aria-label attribute
  belongs_to: Locator
  description: |-
    ### getByLabel[​](#locator-get-by-label "Direct link to getByLabel")

    Allows locating input elements by the text of the associated `<label>` or `aria-labelledby` element, or by the `aria-label` attribute.

    **Usage**

    For example, this method will find inputs by label "Username" and "Password" in the following DOM:

    ``` html
    <input aria-label="Username">
    <label for="password-input">Password:</label>
    <input id="password-input">
    ```

    ``` javascript
    await page.getByLabel('Username').fill('john');
    await page.getByLabel('Password').fill('secret');
    ```

    **Arguments**

    - `text`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Text to locate the element for.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: locator.getByPlaceholder
  id: api/class-locator#locator-get-by-placeholder
  summary: Allows locating input elements by the placeholder text
  belongs_to: Locator
  description: |-
    ### getByPlaceholder[​](#locator-get-by-placeholder "Direct link to getByPlaceholder")

    Allows locating input elements by the placeholder text.

    **Usage**

    For example, consider the following DOM structure.

    ``` html
    <input type="email" placeholder="name@example.com" />
    ```

    You can fill the input after locating it by the placeholder text:

    ``` javascript
    await page
        .getByPlaceholder('name@example.com')
        .fill('playwright@microsoft.com');
    ```

    **Arguments**

    - `text`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Text to locate the element for.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: locator.getByRole
  id: api/class-locator#locator-get-by-role
  summary: Allows locating elements by their ARIA role, ARIA attributes and accessible name
  belongs_to: Locator
  description: |-
    ### getByRole[​](#locator-get-by-role "Direct link to getByRole")

    Allows locating elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).

    **Usage**

    Consider the following DOM structure.

    ``` html
    <h3>Sign up</h3>
    <label>
      <input type="checkbox" /> Subscribe
    </label>
    <br/>
    <button>Submit</button>
    ```

    You can locate each element by it's implicit role:

    ``` javascript
    await expect(page.getByRole('heading', { name: 'Sign up' })).toBeVisible();

    await page.getByRole('checkbox', { name: 'Subscribe' }).check();

    await page.getByRole('button', { name: /submit/i }).click();
    ```

    **Arguments**

    - `role` "alert" \| "alertdialog" \| "application" \| "article" \| "banner" \| "blockquote" \| "button" \| "caption" \| "cell" \| "checkbox" \| "code" \| "columnheader" \| "combobox" \| "complementary" \| "contentinfo" \| "definition" \| "deletion" \| "dialog" \| "directory" \| "document" \| "emphasis" \| "feed" \| "figure" \| "form" \| "generic" \| "grid" \| "gridcell" \| "group" \| "heading" \| "img" \| "insertion" \| "link" \| "list" \| "listbox" \| "listitem" \| "log" \| "main" \| "marquee" \| "math" \| "meter" \| "menu" \| "menubar" \| "menuitem" \| "menuitemcheckbox" \| "menuitemradio" \| "navigation" \| "none" \| "note" \| "option" \| "paragraph" \| "presentation" \| "progressbar" \| "radio" \| "radiogroup" \| "region" \| "row" \| "rowgroup" \| "rowheader" \| "scrollbar" \| "search" \| "searchbox" \| "separator" \| "slider" \| "spinbutton" \| "status" \| "strong" \| "subscript" \| "superscript" \| "switch" \| "tab" \| "table" \| "tablist" \| "tabpanel" \| "term" \| "textbox" \| "time" \| "timer" \| "toolbar" \| "tooltip" \| "tree" \| "treegrid" \| "treeitem"

      Required aria role.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `checked` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        An attribute that is usually set by `aria-checked` or native `<input type=checkbox>` controls.

        Learn more about [`aria-checked`](https://www.w3.org/TR/wai-aria-1.2/#aria-checked).

      - `disabled` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        An attribute that is usually set by `aria-disabled` or `disabled`.

        > note
        >
        > Unlike most other attributes, `disabled` is inherited through the DOM hierarchy. Learn more about [`aria-disabled`](https://www.w3.org/TR/wai-aria-1.2/#aria-disabled).

      - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether `name` is matched exactly: case-sensitive and whole-string. Defaults to false. Ignored when `name` is a regular expression. Note that exact match still trims whitespace.

      - `expanded` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        An attribute that is usually set by `aria-expanded`.

        Learn more about [`aria-expanded`](https://www.w3.org/TR/wai-aria-1.2/#aria-expanded).

      - `includeHidden` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Option that controls whether hidden elements are matched. By default, only non-hidden elements, as [defined by ARIA](https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion), are matched by role selector.

        Learn more about [`aria-hidden`](https://www.w3.org/TR/wai-aria-1.2/#aria-hidden).

      - `level` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        A number attribute that is usually present for roles `heading`, `listitem`, `row`, `treeitem`, with default values for `<h1>-<h6>` elements.

        Learn more about [`aria-level`](https://www.w3.org/TR/wai-aria-1.2/#aria-level).

      - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") *(optional)*

        Option to match the [accessible name](https://w3c.github.io/accname/#dfn-accessible-name). By default, matching is case-insensitive and searches for a substring, use `exact` to control this behavior.

        Learn more about [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).

      - `pressed` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        An attribute that is usually set by `aria-pressed`.

        Learn more about [`aria-pressed`](https://www.w3.org/TR/wai-aria-1.2/#aria-pressed).

      - `selected` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        An attribute that is usually set by `aria-selected`.

        Learn more about [`aria-selected`](https://www.w3.org/TR/wai-aria-1.2/#aria-selected).

    **Returns**

    - [Locator](class-locator "Locator")

    **Details**

    Role selector **does not replace** accessibility audits and conformance tests, but rather gives early feedback about the ARIA guidelines.

    Many html elements have an implicitly [defined role](https://w3c.github.io/html-aam/#html-element-role-mappings) that is recognized by the role selector. You can find all the [supported roles here](https://www.w3.org/TR/wai-aria-1.2/#role_definitions). ARIA guidelines **do not recommend** duplicating implicit roles and attributes by setting `role` and/or `aria-*` attributes to default values.
- name: locator.getByTestId
  id: api/class-locator#locator-get-by-test-id
  summary: Locate element by the test id
  belongs_to: Locator
  description: |-
    ### getByTestId[​](#locator-get-by-test-id "Direct link to getByTestId")

    Locate element by the test id.

    **Usage**

    Consider the following DOM structure.

    ``` html
    <button data-testid="directions">Itinéraire</button>
    ```

    You can locate the element by it's test id:

    ``` javascript
    await page.getByTestId('directions').click();
    ```

    **Arguments**

    - `testId`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Id to locate the element by.

    **Returns**

    - [Locator](class-locator "Locator")

    **Details**

    By default, the `data-testid` attribute is used as a test id. Use [selectors.setTestIdAttribute()](class-selectors#selectors-set-test-id-attribute) to configure a different test id attribute if necessary.

    ``` javascript
    // Set custom test id attribute from @playwright/test config:
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        testIdAttribute: 'data-pw'
      },
    });
    ```
- name: locator.getByText
  id: api/class-locator#locator-get-by-text
  summary: Allows locating elements that contain given text
  belongs_to: Locator
  description: |-
    ### getByText[​](#locator-get-by-text "Direct link to getByText")

    Allows locating elements that contain given text.

    See also [locator.filter()](class-locator#locator-filter) that allows to match by another criteria, like an accessible role, and then filter by the text content.

    **Usage**

    Consider the following DOM structure:

    ``` html
    <div>Hello <span>world</span></div>
    <div>Hello</div>
    ```

    You can locate by text substring, exact string, or a regular expression:

    ``` javascript
    // Matches <span>
    page.getByText('world');

    // Matches first <div>
    page.getByText('Hello world');

    // Matches second <div>
    page.getByText('Hello', { exact: true });

    // Matches both <div>s
    page.getByText(/Hello/);

    // Matches second <div>
    page.getByText(/^hello$/i);
    ```

    **Arguments**

    - `text`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Text to locate the element for.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.

    **Returns**

    - [Locator](class-locator "Locator")

    **Details**

    Matching by text always normalizes whitespace, even with exact match. For example, it turns multiple spaces into one, turns line breaks into spaces and ignores leading and trailing whitespace.

    Input elements of the type `button` and `submit` are matched by their `value` instead of the text content. For example, locating by text `"Log in"` matches `<input type=button value="Log in">`.
- name: locator.getByTitle
  id: api/class-locator#locator-get-by-title
  summary: Allows locating elements by their title attribute
  belongs_to: Locator
  description: |-
    ### getByTitle[​](#locator-get-by-title "Direct link to getByTitle")

    Allows locating elements by their title attribute.

    **Usage**

    Consider the following DOM structure.

    ``` html
    <span title='Issues count'>25 issues</span>
    ```

    You can check the issues count after locating it by the title text:

    ``` javascript
    await expect(page.getByTitle('Issues count')).toHaveText('25 issues');
    ```

    **Arguments**

    - `text`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Text to locate the element for.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: locator.highlight
  id: api/class-locator#locator-highlight
  summary: Highlight the corresponding element(s) on the screen
  belongs_to: Locator
  description: |-
    ### highlight[​](#locator-highlight "Direct link to highlight")

    Highlight the corresponding element(s) on the screen. Useful for debugging, don't commit the code that uses [locator.highlight()](class-locator#locator-highlight).

    **Usage**

    ``` javascript
    await locator.highlight();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locator.hover
  id: api/class-locator#locator-hover
  summary: Hover over the matching element
  belongs_to: Locator
  description: |-
    ### hover[​](#locator-hover "Direct link to hover")

    Hover over the matching element.

    **Usage**

    ``` javascript
    await page.getByRole('link').hover();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `modifiers`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<"Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\> *(optional)*

        Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    **Details**

    This method hovers over the element by performing the following steps:

    1.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.
    2.  Scroll the element into view if needed.
    3.  Use [page.mouse](class-page#page-mouse) to hover over the center of the element, or the specified `position`.

    If the element is detached from the DOM at any moment during the action, this method throws.

    When all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror "TimeoutError"). Passing zero timeout disables this.
- name: locator.innerHTML
  id: api/class-locator#locator-inner-html
  summary: Returns the element.innerHTML
  belongs_to: Locator
  description: |-
    ### innerHTML[​](#locator-inner-html "Direct link to innerHTML")

    Returns the [`element.innerHTML`](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML).

    **Usage**

    ``` javascript
    await locator.innerHTML();
    await locator.innerHTML(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: locator.innerText
  id: api/class-locator#locator-inner-text
  summary: Returns the element.innerText
  belongs_to: Locator
  description: |-
    ### innerText[​](#locator-inner-text "Direct link to innerText")

    Returns the [`element.innerText`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText).

    > Asserting text
    >
    > If you need to assert text on the page, prefer [expect(locator).toHaveText()](class-locatorassertions#locator-assertions-to-have-text) with `useInnerText` option to avoid flakiness. See [assertions guide](../test-assertions) for more details.

    **Usage**

    ``` javascript
    await locator.innerText();
    await locator.innerText(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: locator.inputValue
  id: api/class-locator#locator-input-value
  summary: Returns the value for the matching <input> or <textarea> or <select> element
  belongs_to: Locator
  description: |-
    ### inputValue[​](#locator-input-value "Direct link to inputValue")

    Returns the value for the matching `<input>` or `<textarea>` or `<select>` element.

    > Asserting value
    >
    > If you need to assert input value, prefer [expect(locator).toHaveValue()](class-locatorassertions#locator-assertions-to-have-value) to avoid flakiness. See [assertions guide](../test-assertions) for more details.

    **Usage**

    ``` javascript
    const value = await page.getByRole('textbox').inputValue();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    **Details**

    Throws elements that are not an input, textarea or a select. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), returns the value of the control.
- name: locator.isChecked
  id: api/class-locator#locator-is-checked
  summary: Returns whether the element is checked
  belongs_to: Locator
  description: |-
    ### isChecked[​](#locator-is-checked "Direct link to isChecked")

    Returns whether the element is checked. Throws if the element is not a checkbox or radio input.

    > Asserting checked state
    >
    > If you need to assert that checkbox is checked, prefer [expect(locator).toBeChecked()](class-locatorassertions#locator-assertions-to-be-checked) to avoid flakiness. See [assertions guide](../test-assertions) for more details.

    **Usage**

    ``` javascript
    const checked = await page.getByRole('checkbox').isChecked();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    &nbsp;
- name: locator.isDisabled
  id: api/class-locator#locator-is-disabled
  summary: Returns whether the element is disabled, the opposite of enabled
  belongs_to: Locator
  description: |-
    ### isDisabled[​](#locator-is-disabled "Direct link to isDisabled")

    Returns whether the element is disabled, the opposite of [enabled](../actionability#enabled).

    > Asserting disabled state
    >
    > If you need to assert that an element is disabled, prefer [expect(locator).toBeDisabled()](class-locatorassertions#locator-assertions-to-be-disabled) to avoid flakiness. See [assertions guide](../test-assertions) for more details.

    **Usage**

    ``` javascript
    const disabled = await page.getByRole('button').isDisabled();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    &nbsp;
- name: locator.isEditable
  id: api/class-locator#locator-is-editable
  summary: Returns whether the element is editable
  belongs_to: Locator
  description: |-
    ### isEditable[​](#locator-is-editable "Direct link to isEditable")

    Returns whether the element is [editable](../actionability#editable).

    > Asserting editable state
    >
    > If you need to assert that an element is editable, prefer [expect(locator).toBeEditable()](class-locatorassertions#locator-assertions-to-be-editable) to avoid flakiness. See [assertions guide](../test-assertions) for more details.

    **Usage**

    ``` javascript
    const editable = await page.getByRole('textbox').isEditable();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    &nbsp;
- name: locator.isEnabled
  id: api/class-locator#locator-is-enabled
  summary: Returns whether the element is enabled
  belongs_to: Locator
  description: |-
    ### isEnabled[​](#locator-is-enabled "Direct link to isEnabled")

    Returns whether the element is [enabled](../actionability#enabled).

    > Asserting enabled state
    >
    > If you need to assert that an element is enabled, prefer [expect(locator).toBeEnabled()](class-locatorassertions#locator-assertions-to-be-enabled) to avoid flakiness. See [assertions guide](../test-assertions) for more details.

    **Usage**

    ``` javascript
    const enabled = await page.getByRole('button').isEnabled();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    &nbsp;
- name: locator.isHidden
  id: api/class-locator#locator-is-hidden
  summary: Returns whether the element is hidden, the opposite of visible
  belongs_to: Locator
  description: |-
    ### isHidden[​](#locator-is-hidden "Direct link to isHidden")

    Returns whether the element is hidden, the opposite of [visible](../actionability#visible).

    > Asserting visibility
    >
    > If you need to assert that element is hidden, prefer [expect(locator).toBeHidden()](class-locatorassertions#locator-assertions-to-be-hidden) to avoid flakiness. See [assertions guide](../test-assertions) for more details.

    **Usage**

    ``` javascript
    const hidden = await page.getByRole('button').isHidden();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        > Deprecated
        >
        > This option is ignored. [locator.isHidden()](class-locator#locator-is-hidden) does not wait for the element to become hidden and returns immediately.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    &nbsp;
- name: locator.isVisible
  id: api/class-locator#locator-is-visible
  summary: Returns whether the element is visible
  belongs_to: Locator
  description: |-
    ### isVisible[​](#locator-is-visible "Direct link to isVisible")

    Returns whether the element is [visible](../actionability#visible).

    > Asserting visibility
    >
    > If you need to assert that element is visible, prefer [expect(locator).toBeVisible()](class-locatorassertions#locator-assertions-to-be-visible) to avoid flakiness. See [assertions guide](../test-assertions) for more details.

    **Usage**

    ``` javascript
    const visible = await page.getByRole('button').isVisible();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        > Deprecated
        >
        > This option is ignored. [locator.isVisible()](class-locator#locator-is-visible) does not wait for the element to become visible and returns immediately.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")\>

    &nbsp;
- name: locator.last
  id: api/class-locator#locator-last
  summary: Returns locator to the last matching element
  belongs_to: Locator
  description: |-
    ### last[​](#locator-last "Direct link to last")

    Returns locator to the last matching element.

    **Usage**

    ``` javascript
    const banana = await page.getByRole('listitem').last();
    ```

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: locator.locator
  id: api/class-locator#locator-locator
  summary: The method finds an element matching the specified selector in the locator's subtree
  belongs_to: Locator
  description: |-
    ### locator[​](#locator-locator "Direct link to locator")

    The method finds an element matching the specified selector in the locator's subtree. It also accepts filter options, similar to [locator.filter()](class-locator#locator-filter) method.

    [Learn more about locators](../locators).

    **Usage**

    ``` javascript
    locator.locator(selectorOrLocator);
    locator.locator(selectorOrLocator, options);
    ```

    **Arguments**

    - `selectorOrLocator`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Locator](class-locator "Locator")

      A selector or locator to use when resolving DOM element.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `has` [Locator](class-locator "Locator") *(optional)*

        Narrows down the results of the method to those which contain elements matching this relative locator. For example, `article` that has `text=Playwright` matches `<article><div>Playwright</div></article>`.

        Inner locator **must be relative** to the outer locator and is queried starting with the outer locator match, not the document root. For example, you can find `content` that has `div` in `<article><content><div>Playwright</div></content></article>`. However, looking for `content` that has `article div` will fail, because the inner locator must be relative and should not use any elements outside the `content`.

        Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](class-framelocator "FrameLocator")s.

      - `hasNot` [Locator](class-locator "Locator") *(optional)*

        Matches elements that do not contain an element that matches an inner locator. Inner locator is queried against the outer one. For example, `article` that does not have `div` matches `<article><span>Playwright</span></article>`.

        Note that outer and inner locators must belong to the same frame. Inner locator must not contain [FrameLocator](class-framelocator "FrameLocator")s.

      - `hasNotText`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") *(optional)*

        Matches elements that do not contain specified text somewhere inside, possibly in a child or a descendant element. When passed a [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), matching is case-insensitive and searches for a substring.

      - `hasText`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") *(optional)*

        Matches elements containing specified text somewhere inside, possibly in a child or a descendant element. When passed a [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), matching is case-insensitive and searches for a substring. For example, `"Playwright"` matches `<article><div>Playwright</div></article>`.

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: locator.nth
  id: api/class-locator#locator-nth
  summary: Returns locator to the n-th matching element
  belongs_to: Locator
  description: |-
    ### nth[​](#locator-nth "Direct link to nth")

    Returns locator to the n-th matching element. It's zero based, `nth(0)` selects the first element.

    **Usage**

    ``` javascript
    const banana = await page.getByRole('listitem').nth(2);
    ```

    **Arguments**

    - `index` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: locator.or
  id: api/class-locator#locator-or
  summary: Creates a locator that matches either of the two locators
  belongs_to: Locator
  description: |-
    ### or[​](#locator-or "Direct link to or")

    Creates a locator that matches either of the two locators.

    **Usage**

    Consider a scenario where you'd like to click on a "New email" button, but sometimes a security settings dialog shows up instead. In this case, you can wait for either a "New email" button, or a dialog and act accordingly.

    ``` javascript
    const newEmail = page.getByRole('button', { name: 'New' });
    const dialog = page.getByText('Confirm security settings');
    await expect(newEmail.or(dialog)).toBeVisible();
    if (await dialog.isVisible())
      await page.getByRole('button', { name: 'Dismiss' }).click();
    await newEmail.click();
    ```

    **Arguments**

    - `locator` [Locator](class-locator "Locator")

      Alternative locator to match.

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: locator.page
  id: api/class-locator#locator-page
  summary: A page this locator belongs to
  belongs_to: Locator
  description: |-
    ### page[​](#locator-page "Direct link to page")

    A page this locator belongs to.

    **Usage**

    ``` javascript
    locator.page();
    ```

    **Returns**

    - [Page](class-page "Page")

    &nbsp;
- name: locator.press
  id: api/class-locator#locator-press
  summary: Focuses the matching element and presses a combination of the keys
  belongs_to: Locator
  description: |-
    ### press[​](#locator-press "Direct link to press")

    Focuses the matching element and presses a combination of the keys.

    **Usage**

    ``` javascript
    await page.getByRole('textbox').press('Backspace');
    ```

    **Arguments**

    - `key` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option will default to `true` in the future.

        Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    **Details**

    Focuses the element, and then uses [keyboard.down()](class-keyboard#keyboard-down) and [keyboard.up()](class-keyboard#keyboard-up).

    `key` can specify the intended [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) value or a single character to generate the text for. A superset of the `key` values can be found [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values). Examples of the keys are:

    `F1` - `F12`, `Digit0`- `Digit9`, `KeyA`- `KeyZ`, `Backquote`, `Minus`, `Equal`, `Backslash`, `Backspace`, `Tab`, `Delete`, `Escape`, `ArrowDown`, `End`, `Enter`, `Home`, `Insert`, `PageDown`, `PageUp`, `ArrowRight`, `ArrowUp`, etc.

    Following modification shortcuts are also supported: `Shift`, `Control`, `Alt`, `Meta`, `ShiftLeft`, `ControlOrMeta`. `ControlOrMeta` resolves to `Control` on Windows and Linux and to `Meta` on macOS.

    Holding down `Shift` will type the text that corresponds to the `key` in the upper case.

    If `key` is a single character, it is case-sensitive, so the values `a` and `A` will generate different respective texts.

    Shortcuts such as `key: "Control+o"`, `key: "Control++` or `key: "Control+Shift+T"` are supported as well. When specified with the modifier, modifier is pressed and being held while the subsequent key is being pressed.
- name: locator.pressSequentially
  id: api/class-locator#locator-press-sequentially
  summary: In most cases, you should use locator.fill() instead
  belongs_to: Locator
  description: |-
    ### pressSequentially[​](#locator-press-sequentially "Direct link to pressSequentially")

    > tip
    >
    > In most cases, you should use [locator.fill()](class-locator#locator-fill) instead. You only need to press keys one by one if there is special keyboard handling on the page.

    Focuses the element, and then sends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the text.

    To press a special key, like `Control` or `ArrowDown`, use [locator.press()](class-locator#locator-press).

    **Usage**

    ``` javascript
    await locator.pressSequentially('Hello'); // Types instantly
    await locator.pressSequentially('World', { delay: 100 }); // Types slower, like a user
    ```

    An example of typing into a text field and then submitting the form:

    ``` javascript
    const locator = page.getByLabel('Password');
    await locator.pressSequentially('my password');
    await locator.press('Enter');
    ```

    **Arguments**

    - `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      String of characters to sequentially press into a focused element.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to wait between key presses in milliseconds. Defaults to 0.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locator.screenshot
  id: api/class-locator#locator-screenshot
  summary: Take a screenshot of the element matching the locator
  belongs_to: Locator
  description: |-
    ### screenshot[​](#locator-screenshot "Direct link to screenshot")

    Take a screenshot of the element matching the locator.

    **Usage**

    ``` javascript
    await page.getByRole('link').screenshot();
    ```

    Disable animations and save screenshot to a file:

    ``` javascript
    await page.getByRole('link').screenshot({ animations: 'disabled', path: 'link.png' });
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `animations` "disabled" \| "allow" *(optional)*

        When set to `"disabled"`, stops CSS animations, CSS transitions and Web Animations. Animations get different treatment depending on their duration:

        - finite animations are fast-forwarded to completion, so they'll fire `transitionend` event.
        - infinite animations are canceled to initial state, and then played over after the screenshot.

        Defaults to `"allow"` that leaves animations untouched.

      - `caret` "hide" \| "initial" *(optional)*

        When set to `"hide"`, screenshot will hide text caret. When set to `"initial"`, text caret behavior will not be changed. Defaults to `"hide"`.

      - `mask`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Locator](class-locator "Locator")\> *(optional)*

        Specify locators that should be masked when the screenshot is taken. Masked elements will be overlaid with a pink box `#FF00FF` (customized by `maskColor`) that completely covers its bounding box.

      - `maskColor` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Specify the color of the overlay box for masked elements, in [CSS color format](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Default color is pink `#FF00FF`.

      - `omitBackground` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images. Defaults to `false`.

      - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        The file path to save the image to. The screenshot type will be inferred from file extension. If `path` is a relative path, then it is resolved relative to the current working directory. If no path is provided, the image won't be saved to the disk.

      - `quality` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        The quality of the image, between 0-100. Not applicable to `png` images.

      - `scale` "css" \| "device" *(optional)*

        When set to `"css"`, screenshot will have a single pixel per each css pixel on the page. For high-dpi devices, this will keep screenshots small. Using `"device"` option will produce a single pixel per each device pixel, so screenshots of high-dpi devices will be twice as large or even larger.

        Defaults to `"device"`.

      - `style` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Text of the stylesheet to apply while making the screenshot. This is where you can hide dynamic elements, make elements invisible or change their properties to help you creating repeatable screenshots. This stylesheet pierces the Shadow DOM and applies to the inner frames.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `type` "png" \| "jpeg" *(optional)*

        Specify screenshot type, defaults to `png`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")\>

    **Details**

    This method captures a screenshot of the page, clipped to the size and position of a particular element matching the locator. If the element is covered by other elements, it will not be actually visible on the screenshot. If the element is a scrollable container, only the currently scrolled content will be visible on the screenshot.

    This method waits for the [actionability](../actionability) checks, then scrolls element into view before taking a screenshot. If the element is detached from DOM, the method throws an error.

    Returns the buffer with the captured screenshot.
- name: locator.scrollIntoViewIfNeeded
  id: api/class-locator#locator-scroll-into-view-if-needed
  summary: This method waits for actionability checks, then tries to scroll element into view, unless it is completely visible as defined by IntersectionObserver's ratio
  belongs_to: Locator
  description: |-
    ### scrollIntoViewIfNeeded[​](#locator-scroll-into-view-if-needed "Direct link to scrollIntoViewIfNeeded")

    This method waits for [actionability](../actionability) checks, then tries to scroll element into view, unless it is completely visible as defined by [IntersectionObserver](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)'s `ratio`.

    See [scrolling](../input#scrolling) for alternative ways to scroll.

    **Usage**

    ``` javascript
    await locator.scrollIntoViewIfNeeded();
    await locator.scrollIntoViewIfNeeded(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locator.selectOption
  id: api/class-locator#locator-select-option
  summary: Matches by option.value
  belongs_to: Locator
  description: |-
    ### selectOption[​](#locator-select-option "Direct link to selectOption")

    Selects option or options in `<select>`.

    **Usage**

    ``` html
    <select multiple>
      <option value="red">Red</div>
      <option value="green">Green</div>
      <option value="blue">Blue</div>
    </select>
    ```

    ``` javascript
    // single selection matching the value or label
    element.selectOption('blue');

    // single selection matching the label
    element.selectOption({ label: 'Blue' });

    // multiple selection for red, green and blue options
    element.selectOption(['red', 'green', 'blue']);
    ```

    **Arguments**

    - `values`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [ElementHandle](class-elementhandle "ElementHandle") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[ElementHandle](class-elementhandle "ElementHandle")\> \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `value`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")*(optional)*

        Matches by `option.value`. Optional.

      - `label`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")*(optional)*

        Matches by `option.label`. Optional.

      - `index`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")*(optional)*

        Matches by the index. Optional.

      Options to select. If the `<select>` has the `multiple` attribute, all matching options are selected, otherwise only the first option matching one of the passed options is selected. String values are matching both values and labels. Option is considered matching if all specified properties match.
    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option will default to `true` in the future.

        Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>\>

    **Details**

    This method waits for [actionability](../actionability) checks, waits until all specified options are present in the `<select>` element and selects these options.

    If the target element is not a `<select>` element, this method throws an error. However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be used instead.

    Returns the array of option values that have been successfully selected.

    Triggers a `change` and `input` event once all the provided options have been selected.
- name: locator.selectText
  id: api/class-locator#locator-select-text
  summary: This method waits for actionability checks, then focuses the element and selects all its text content
  belongs_to: Locator
  description: |-
    ### selectText[​](#locator-select-text "Direct link to selectText")

    This method waits for [actionability](../actionability) checks, then focuses the element and selects all its text content.

    If the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), focuses and selects text in the control instead.

    **Usage**

    ``` javascript
    await locator.selectText();
    await locator.selectText(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locator.setChecked
  id: api/class-locator#locator-set-checked
  summary: Set the state of a checkbox or a radio element
  belongs_to: Locator
  description: |-
    ### setChecked[​](#locator-set-checked "Direct link to setChecked")

    Set the state of a checkbox or a radio element.

    **Usage**

    ``` javascript
    await page.getByRole('checkbox').setChecked(true);
    ```

    **Arguments**

    - `checked` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

      Whether to check or uncheck the checkbox.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    **Details**

    This method checks or unchecks an element by performing the following steps:

    1.  Ensure that matched element is a checkbox or a radio input. If not, this method throws.
    2.  If the element already has the right checked state, this method returns immediately.
    3.  Wait for [actionability](../actionability) checks on the matched element, unless `force` option is set. If the element is detached during the checks, the whole action is retried.
    4.  Scroll the element into view if needed.
    5.  Use [page.mouse](class-page#page-mouse) to click in the center of the element.
    6.  Ensure that the element is now checked or unchecked. If not, this method throws.

    When all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror "TimeoutError"). Passing zero timeout disables this.
- name: locator.setInputFiles
  id: api/class-locator#locator-set-input-files
  summary: Upload file or multiple files into <input type=file>. For inputs with a [webkitdirectory] attribute, only a single directory path is supported
  belongs_to: Locator
  description: |-
    ### setInputFiles[​](#locator-set-input-files "Direct link to setInputFiles")

    Upload file or multiple files into `<input type=file>`. For inputs with a `[webkitdirectory]` attribute, only a single directory path is supported.

    **Usage**

    ``` javascript
    // Select one file
    await page.getByLabel('Upload file').setInputFiles(path.join(__dirname, 'myfile.pdf'));

    // Select multiple files
    await page.getByLabel('Upload files').setInputFiles([
      path.join(__dirname, 'file1.txt'),
      path.join(__dirname, 'file2.txt'),
    ]);

    // Select a directory
    await page.getByLabel('Upload directory').setInputFiles(path.join(__dirname, 'mydir'));

    // Remove all the selected files
    await page.getByLabel('Upload file').setInputFiles([]);

    // Upload buffer from memory
    await page.getByLabel('Upload file').setInputFiles({
      name: 'file.txt',
      mimeType: 'text/plain',
      buffer: Buffer.from('this is test')
    });
    ```

    **Arguments**

    - `files`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        File name

      - `mimeType`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        File type

      - `buffer`[Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")

        File content
    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    **Details**

    Sets the value of the file input to these file paths or files. If some of the `filePaths` are relative paths, then they are resolved relative to the current working directory. For empty array, clears the selected files.

    This method expects [Locator](class-locator "Locator") to point to an [input element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input). However, if the element is inside the `<label>` element that has an associated [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), targets the control instead.
- name: locator.tap
  id: api/class-locator#locator-tap
  summary: Perform a tap gesture on the element matching the locator
  belongs_to: Locator
  description: |-
    ### tap[​](#locator-tap "Direct link to tap")

    Perform a tap gesture on the element matching the locator.

    **Usage**

    ``` javascript
    await locator.tap();
    await locator.tap(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `modifiers`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<"Alt" \| "Control" \| "ControlOrMeta" \| "Meta" \| "Shift"\> *(optional)*

        Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to "Control" on Windows and Linux and to "Meta" on macOS.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    **Details**

    This method taps the element by performing the following steps:

    1.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.
    2.  Scroll the element into view if needed.
    3.  Use [page.touchscreen](class-page#page-touchscreen) to tap the center of the element, or the specified `position`.

    If the element is detached from the DOM at any moment during the action, this method throws.

    When all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror "TimeoutError"). Passing zero timeout disables this.

    > note
    >
    > `element.tap()` requires that the `hasTouch` option of the browser context be set to true.
- name: locator.textContent
  id: api/class-locator#locator-text-content
  summary: Returns the node.textContent
  belongs_to: Locator
  description: |-
    ### textContent[​](#locator-text-content "Direct link to textContent")

    Returns the [`node.textContent`](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent).

    > Asserting text
    >
    > If you need to assert text on the page, prefer [expect(locator).toHaveText()](class-locatorassertions#locator-assertions-to-have-text) to avoid flakiness. See [assertions guide](../test-assertions) for more details.

    **Usage**

    ``` javascript
    await locator.textContent();
    await locator.textContent(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: locator.type
  id: api/class-locator#locator-type
  summary: In most cases, you should use locator.fill() instead
  belongs_to: Locator
  description: "### type[​](#locator-type \"Direct link to type\")\n\n> Deprecated\n>\n> In most cases, you should use [locator.fill()](class-locator#locator-fill) instead. You only need to press keys one by one if there is special keyboard handling on the page - in this case use [locator.pressSequentially()](class-locator#locator-press-sequentially).\n\nFocuses the element, and then sends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the text.\n\nTo press a special key, like `Control` or `ArrowDown`, use [locator.press()](class-locator#locator-press).\n\n**Usage**\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A text to type into a focused element.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to wait between key presses in milliseconds. Defaults to 0.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-locator](https://playwright.dev/docs/api/class-locator)"
- name: locator.uncheck
  id: api/class-locator#locator-uncheck
  summary: Ensure that checkbox or radio element is unchecked
  belongs_to: Locator
  description: |-
    ### uncheck[​](#locator-uncheck "Direct link to uncheck")

    Ensure that checkbox or radio element is unchecked.

    **Usage**

    ``` javascript
    await page.getByRole('checkbox').uncheck();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `position` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    **Details**

    This method unchecks the element by performing the following steps:

    1.  Ensure that element is a checkbox or a radio input. If not, this method throws. If the element is already unchecked, this method returns immediately.
    2.  Wait for [actionability](../actionability) checks on the element, unless `force` option is set.
    3.  Scroll the element into view if needed.
    4.  Use [page.mouse](class-page#page-mouse) to click in the center of the element.
    5.  Ensure that the element is now unchecked. If not, this method throws.

    If the element is detached from the DOM at any moment during the action, this method throws.

    When all steps combined have not finished during the specified `timeout`, this method throws a [TimeoutError](class-timeouterror "TimeoutError"). Passing zero timeout disables this.
- name: locator.waitFor
  id: api/class-locator#locator-wait-for
  summary: Returns when element specified by locator satisfies the state option
  belongs_to: Locator
  description: |-
    ### waitFor[​](#locator-wait-for "Direct link to waitFor")

    Returns when element specified by locator satisfies the `state` option.

    If target element already satisfies the condition, the method returns immediately. Otherwise, waits for up to `timeout` milliseconds until the condition is met.

    **Usage**

    ``` javascript
    const orderSent = page.locator('#order-sent');
    await orderSent.waitFor();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `state` "attached" \| "detached" \| "visible" \| "hidden" *(optional)*

        Defaults to `'visible'`. Can be either:

        - `'attached'` - wait for element to be present in DOM.
        - `'detached'` - wait for element to not be present in DOM.
        - `'visible'` - wait for element to have non-empty bounding box and no `visibility:hidden`. Note that element without any content or with `display:none` has an empty bounding box and is not considered visible.
        - `'hidden'` - wait for element to be either detached from DOM, or have an empty bounding box or `visibility:hidden`. This is opposite to the `'visible'` option.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    ## Deprecated[​](#deprecated "Direct link to Deprecated")
- name: LocatorAssertions
  id: api/class-locatorassertions
  summary: The LocatorAssertions class provides assertion methods that can be used to make assertions about the Locator state in the tests
  description: "# LocatorAssertions\n\nThe [LocatorAssertions](class-locatorassertions \"LocatorAssertions\") class provides assertion methods that can be used to make assertions about the [Locator](class-locator \"Locator\") state in the tests.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('status becomes submitted', async ({ page }) => {\n  // ...\n  await page.getByRole('button').click();\n  await expect(page.locator('.status')).toHaveText('Submitted');\n});\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### toBeAttached[​](#locator-assertions-to-be-attached \"Direct link to toBeAttached\")\n\nEnsures that [Locator](class-locator \"Locator\") points to an element that is [connected](https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected) to a Document or a ShadowRoot.\n\n**Usage**\n\n``` javascript\nawait expect(page.getByText('Hidden text')).toBeAttached();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `attached` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toBeChecked[​](#locator-assertions-to-be-checked \"Direct link to toBeChecked\")\n\nEnsures the [Locator](class-locator \"Locator\") points to a checked input.\n\n**Usage**\n\n``` javascript\nconst locator = page.getByLabel('Subscribe to newsletter');\nawait expect(locator).toBeChecked();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `checked` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toBeDisabled[​](#locator-assertions-to-be-disabled \"Direct link to toBeDisabled\")\n\nEnsures the [Locator](class-locator \"Locator\") points to a disabled element. Element is disabled if it has \"disabled\" attribute or is disabled via ['aria-disabled'](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-disabled). Note that only native control elements such as HTML `button`, `input`, `select`, `textarea`, `option`, `optgroup` can be disabled by setting \"disabled\" attribute. \"disabled\" attribute on other elements is ignored by the browser.\n\n**Usage**\n\n``` javascript\nconst locator = page.locator('button.submit');\nawait expect(locator).toBeDisabled();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toBeEditable[​](#locator-assertions-to-be-editable \"Direct link to toBeEditable\")\n\nEnsures the [Locator](class-locator \"Locator\") points to an editable element.\n\n**Usage**\n\n``` javascript\nconst locator = page.getByRole('textbox');\nawait expect(locator).toBeEditable();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `editable` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toBeEmpty[​](#locator-assertions-to-be-empty \"Direct link to toBeEmpty\")\n\nEnsures the [Locator](class-locator \"Locator\") points to an empty editable element or to a DOM node that has no text.\n\n**Usage**\n\n``` javascript\nconst locator = page.locator('div.warning');\nawait expect(locator).toBeEmpty();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toBeEnabled[​](#locator-assertions-to-be-enabled \"Direct link to toBeEnabled\")\n\nEnsures the [Locator](class-locator \"Locator\") points to an enabled element.\n\n**Usage**\n\n``` javascript\nconst locator = page.locator('button.submit');\nawait expect(locator).toBeEnabled();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `enabled` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toBeFocused[​](#locator-assertions-to-be-focused \"Direct link to toBeFocused\")\n\nEnsures the [Locator](class-locator \"Locator\") points to a focused DOM node.\n\n**Usage**\n\n``` javascript\nconst locator = page.getByRole('textbox');\nawait expect(locator).toBeFocused();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toBeHidden[​](#locator-assertions-to-be-hidden \"Direct link to toBeHidden\")\n\nEnsures that [Locator](class-locator \"Locator\") either does not resolve to any DOM node, or resolves to a [non-visible](../actionability#visible) one.\n\n**Usage**\n\n``` javascript\nconst locator = page.locator('.my-element');\nawait expect(locator).toBeHidden();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toBeInViewport[​](#locator-assertions-to-be-in-viewport \"Direct link to toBeInViewport\")\n\nEnsures the [Locator](class-locator \"Locator\") points to an element that intersects viewport, according to the [intersection observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API).\n\n**Usage**\n\n``` javascript\nconst locator = page.getByRole('button');\n// Make sure at least some part of element intersects viewport.\nawait expect(locator).toBeInViewport();\n// Make sure element is fully outside of viewport.\nawait expect(locator).not.toBeInViewport();\n// Make sure that at least half of the element intersects viewport.\nawait expect(locator).toBeInViewport({ ratio: 0.5 });\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `ratio` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    The minimal ratio of the element to intersect viewport. If equals to `0`, then element should intersect viewport at any positive ratio. Defaults to `0`.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toBeVisible[​](#locator-assertions-to-be-visible \"Direct link to toBeVisible\")\n\nEnsures that [Locator](class-locator \"Locator\") points to an attached and [visible](../actionability#visible) DOM node.\n\nTo check that at least one element from the list is visible, use [locator.first()](class-locator#locator-first).\n\n**Usage**\n\n``` javascript\n// A specific element is visible.\nawait expect(page.getByText('Welcome')).toBeVisible();\n\n// At least one item in the list is visible.\nawait expect(page.getByTestId('todo-item').first()).toBeVisible();\n\n// At least one of the two elements is visible, possibly both.\nawait expect(\n    page.getByRole('button', { name: 'Sign in' })\n        .or(page.getByRole('button', { name: 'Sign up' }))\n        .first()\n).toBeVisible();\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n  - `visible` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toContainText[​](#locator-assertions-to-contain-text \"Direct link to toContainText\")\n\nEnsures the [Locator](class-locator \"Locator\") points to an element that contains the given text. All nested elements will be considered when computing the text content of the element. You can use regular expressions for the value as well.\n\n**Usage**\n\n``` javascript\nconst locator = page.locator('.title');\nawait expect(locator).toContainText('substring');\nawait expect(locator).toContainText(/\\d messages/);\n```\n\nIf you pass an array as an expected value, the expectations are:\n\n1.  Locator resolves to a list of elements.\n2.  Elements from a **subset** of this list contain text from the expected array, respectively.\n3.  The matching subset of elements has the same order as the expected array.\n4.  Each text value from the expected array is matched by some element from the list.\n\nFor example, consider the following list:\n\n``` html\n<ul>\n  <li>Item Text 1</li>\n  <li>Item Text 2</li>\n  <li>Item Text 3</li>\n</ul>\n```\n\nLet's see how we can use the assertion:\n\n``` javascript\n// ✓ Contains the right items in the right order\nawait expect(page.locator('ul > li')).toContainText(['Text 1', 'Text 3']);\n\n// ✖ Wrong order\nawait expect(page.locator('ul > li')).toContainText(['Text 3', 'Text 2']);\n\n// ✖ No item contains this text\nawait expect(page.locator('ul > li')).toContainText(['Some 33']);\n\n// ✖ Locator points to the outer list element, not to the list items\nawait expect(page.locator('ul')).toContainText(['Text 3']);\n```\n\n**Arguments**\n\n- `expected` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\\>\n\n  Expected substring or RegExp or a list of those.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `ignoreCase` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to perform case-insensitive match. `ignoreCase` option takes precedence over the corresponding regular expression flag if specified.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n  - `useInnerText` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to use `element.innerText` instead of `element.textContent` when retrieving DOM node text.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n**Details**\n\nWhen `expected` parameter is a string, Playwright will normalize whitespaces and line breaks both in the actual text and in the expected string before matching. When regular expression is used, the actual text is matched as is.\n\n### toHaveAccessibleDescription[​](#locator-assertions-to-have-accessible-description \"Direct link to toHaveAccessibleDescription\")\n\nEnsures the [Locator](class-locator \"Locator\") points to an element with a given [accessible description](https://w3c.github.io/accname/#dfn-accessible-description).\n\n**Usage**\n\n``` javascript\nconst locator = page.getByTestId('save-button');\nawait expect(locator).toHaveAccessibleDescription('Save results to disk');\n```\n\n**Arguments**\n\n- `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Expected accessible description.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `ignoreCase` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to perform case-insensitive match. `ignoreCase` option takes precedence over the corresponding regular expression flag if specified.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toHaveAccessibleName[​](#locator-assertions-to-have-accessible-name \"Direct link to toHaveAccessibleName\")\n\nEnsures the [Locator](class-locator \"Locator\") points to an element with a given [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n\n**Usage**\n\n``` javascript\nconst locator = page.getByTestId('save-button');\nawait expect(locator).toHaveAccessibleName('Save to disk');\n```\n\n**Arguments**\n\n- `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Expected accessible name.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `ignoreCase` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to perform case-insensitive match. `ignoreCase` option takes precedence over the corresponding regular expression flag if specified.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toHaveAttribute(name, value)[​](#locator-assertions-to-have-attribute \"Direct link to toHaveAttribute(name, value)\")\n\nEnsures the [Locator](class-locator \"Locator\") points to an element with given attribute.\n\n**Usage**\n\n``` javascript\nconst locator = page.locator('input');\nawait expect(locator).toHaveAttribute('type', 'text');\n```\n\n**Arguments**\n\n- `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Attribute name.\n\n- `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Expected attribute value.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `ignoreCase` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to perform case-insensitive match. `ignoreCase` option takes precedence over the corresponding regular expression flag if specified.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toHaveAttribute(name)[​](#locator-assertions-to-have-attribute-2 \"Direct link to toHaveAttribute(name)\")\n\nEnsures the [Locator](class-locator \"Locator\") points to an element with given attribute. The method will assert attribute presence.\n\n``` javascript\nconst locator = page.locator('input');\n// Assert attribute existence.\nawait expect(locator).toHaveAttribute('disabled');\nawait expect(locator).not.toHaveAttribute('open');\n```\n\n**Usage**\n\n``` javascript\nawait expect(locator).toHaveAttribute(name);\nawait expect(locator).toHaveAttribute(name, options);\n```\n\n**Arguments**\n\n- `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Attribute name.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toHaveClass[​](#locator-assertions-to-have-class \"Direct link to toHaveClass\")\n\nEnsures the [Locator](class-locator \"Locator\") points to an element with given CSS classes. This needs to be a full match or using a relaxed regular expression.\n\n**Usage**\n\n``` html\n<div class='selected row' id='component'></div>\n```\n\n``` javascript\nconst locator = page.locator('#component');\nawait expect(locator).toHaveClass(/selected/);\nawait expect(locator).toHaveClass('selected row');\n```\n\nNote that if array is passed as an expected value, entire lists of elements can be asserted:\n\n``` javascript\nconst locator = page.locator('list > .component');\nawait expect(locator).toHaveClass(['component', 'component selected', 'component']);\n```\n\n**Arguments**\n\n- `expected` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\\>\n\n  Expected class or RegExp or a list of those.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toHaveCount[​](#locator-assertions-to-have-count \"Direct link to toHaveCount\")\n\nEnsures the [Locator](class-locator \"Locator\") resolves to an exact number of DOM nodes.\n\n**Usage**\n\n``` javascript\nconst list = page.locator('list > .component');\nawait expect(list).toHaveCount(3);\n```\n\n**Arguments**\n\n- `count` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Expected count.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toHaveCSS[​](#locator-assertions-to-have-css \"Direct link to toHaveCSS\")\n\nEnsures the [Locator](class-locator \"Locator\") resolves to an element with the given computed CSS style.\n\n**Usage**\n\n``` javascript\nconst locator = page.getByRole('button');\nawait expect(locator).toHaveCSS('display', 'flex');\n```\n\n**Arguments**\n\n- `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  CSS property name.\n\n- `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  CSS property value.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toHaveId[​](#locator-assertions-to-have-id \"Direct link to toHaveId\")\n\nEnsures the [Locator](class-locator \"Locator\") points to an element with the given DOM Node ID.\n\n**Usage**\n\n``` javascript\nconst locator = page.getByRole('textbox');\nawait expect(locator).toHaveId('lastname');\n```\n\n**Arguments**\n\n- `id` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Element id.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toHaveJSProperty[​](#locator-assertions-to-have-js-property \"Direct link to toHaveJSProperty\")\n\nEnsures the [Locator](class-locator \"Locator\") points to an element with given JavaScript property. Note that this property can be of a primitive type as well as a plain serializable JavaScript object.\n\n**Usage**\n\n``` javascript\nconst locator = page.locator('.component');\nawait expect(locator).toHaveJSProperty('loaded', true);\n```\n\n**Arguments**\n\n- `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Property name.\n\n- `value` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n  Property value.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toHaveRole[​](#locator-assertions-to-have-role \"Direct link to toHaveRole\")\n\nEnsures the [Locator](class-locator \"Locator\") points to an element with a given [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles).\n\nNote that role is matched as a string, disregarding the ARIA role hierarchy. For example, asserting a superclass role `\"checkbox\"` on an element with a subclass role `\"switch\"` will fail.\n\n**Usage**\n\n``` javascript\nconst locator = page.getByTestId('save-button');\nawait expect(locator).toHaveRole('button');\n```\n\n**Arguments**\n\n- `role` \"alert\" \\| \"alertdialog\" \\| \"application\" \\| \"article\" \\| \"banner\" \\| \"blockquote\" \\| \"button\" \\| \"caption\" \\| \"cell\" \\| \"checkbox\" \\| \"code\" \\| \"columnheader\" \\| \"combobox\" \\| \"complementary\" \\| \"contentinfo\" \\| \"definition\" \\| \"deletion\" \\| \"dialog\" \\| \"directory\" \\| \"document\" \\| \"emphasis\" \\| \"feed\" \\| \"figure\" \\| \"form\" \\| \"generic\" \\| \"grid\" \\| \"gridcell\" \\| \"group\" \\| \"heading\" \\| \"img\" \\| \"insertion\" \\| \"link\" \\| \"list\" \\| \"listbox\" \\| \"listitem\" \\| \"log\" \\| \"main\" \\| \"marquee\" \\| \"math\" \\| \"meter\" \\| \"menu\" \\| \"menubar\" \\| \"menuitem\" \\| \"menuitemcheckbox\" \\| \"menuitemradio\" \\| \"navigation\" \\| \"none\" \\| \"note\" \\| \"option\" \\| \"paragraph\" \\| \"presentation\" \\| \"progressbar\" \\| \"radio\" \\| \"radiogroup\" \\| \"region\" \\| \"row\" \\| \"rowgroup\" \\| \"rowheader\" \\| \"scrollbar\" \\| \"search\" \\| \"searchbox\" \\| \"separator\" \\| \"slider\" \\| \"spinbutton\" \\| \"status\" \\| \"strong\" \\| \"subscript\" \\| \"superscript\" \\| \"switch\" \\| \"tab\" \\| \"table\" \\| \"tablist\" \\| \"tabpanel\" \\| \"term\" \\| \"textbox\" \\| \"time\" \\| \"timer\" \\| \"toolbar\" \\| \"tooltip\" \\| \"tree\" \\| \"treegrid\" \\| \"treeitem\"\n\n  Required aria role.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toHaveScreenshot(name)[​](#locator-assertions-to-have-screenshot-1 \"Direct link to toHaveScreenshot(name)\")\n\nThis function will wait until two consecutive locator screenshots yield the same result, and then compare the last screenshot with the expectation.\n\n**Usage**\n\n``` javascript\nconst locator = page.getByRole('button');\nawait expect(locator).toHaveScreenshot('image.png');\n```\n\nNote that screenshot assertions only work with Playwright test runner.\n\n**Arguments**\n\n- `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n  Snapshot name.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `animations` \"disabled\" \\| \"allow\" *(optional)*\n\n    When set to `\"disabled\"`, stops CSS animations, CSS transitions and Web Animations. Animations get different treatment depending on their duration:\n\n    - finite animations are fast-forwarded to completion, so they'll fire `transitionend` event.\n    - infinite animations are canceled to initial state, and then played over after the screenshot.\n\n    Defaults to `\"disabled\"` that disables animations.\n\n  - `caret` \"hide\" \\| \"initial\" *(optional)*\n\n    When set to `\"hide\"`, screenshot will hide text caret. When set to `\"initial\"`, text caret behavior will not be changed. Defaults to `\"hide\"`.\n\n  - `mask` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Locator](class-locator \"Locator\")\\> *(optional)*\n\n    Specify locators that should be masked when the screenshot is taken. Masked elements will be overlaid with a pink box `#FF00FF` (customized by `maskColor`) that completely covers its bounding box.\n\n  - `maskColor` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Specify the color of the overlay box for masked elements, in [CSS color format](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Default color is pink `#FF00FF`.\n\n  - `maxDiffPixelRatio` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1`. Default is configurable with `TestConfig.expect`. Unset by default.\n\n  - `maxDiffPixels` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable amount of pixels that could be different. Default is configurable with `TestConfig.expect`. Unset by default.\n\n  - `omitBackground` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images. Defaults to `false`.\n\n  - `scale` \"css\" \\| \"device\" *(optional)*\n\n    When set to `\"css\"`, screenshot will have a single pixel per each css pixel on the page. For high-dpi devices, this will keep screenshots small. Using `\"device\"` option will produce a single pixel per each device pixel, so screenshots of high-dpi devices will be twice as large or even larger.\n\n    Defaults to `\"css\"`.\n\n  - `stylePath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    File name containing the stylesheet to apply while making the screenshot. This is where you can hide dynamic elements, make elements invisible or change their properties to help you creating repeatable screenshots. This stylesheet pierces the Shadow DOM and applies to the inner frames.\n\n  - `threshold` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable perceived color difference in the [YIQ color space](https://en.wikipedia.org/wiki/YIQ) between the same pixel in compared images, between zero (strict) and one (lax), default is configurable with `TestConfig.expect`. Defaults to `0.2`.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toHaveScreenshot()[​](#locator-assertions-to-have-screenshot-2 \"Direct link to toHaveScreenshot()\")\n\nThis function will wait until two consecutive locator screenshots yield the same result, and then compare the last screenshot with the expectation.\n\n**Usage**\n\n``` javascript\nconst locator = page.getByRole('button');\nawait expect(locator).toHaveScreenshot();\n```\n\nNote that screenshot assertions only work with Playwright test runner.\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `animations` \"disabled\" \\| \"allow\" *(optional)*\n\n    When set to `\"disabled\"`, stops CSS animations, CSS transitions and Web Animations. Animations get different treatment depending on their duration:\n\n    - finite animations are fast-forwarded to completion, so they'll fire `transitionend` event.\n    - infinite animations are canceled to initial state, and then played over after the screenshot.\n\n    Defaults to `\"disabled\"` that disables animations.\n\n  - `caret` \"hide\" \\| \"initial\" *(optional)*\n\n    When set to `\"hide\"`, screenshot will hide text caret. When set to `\"initial\"`, text caret behavior will not be changed. Defaults to `\"hide\"`.\n\n  - `mask` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Locator](class-locator \"Locator\")\\> *(optional)*\n\n    Specify locators that should be masked when the screenshot is taken. Masked elements will be overlaid with a pink box `#FF00FF` (customized by `maskColor`) that completely covers its bounding box.\n\n  - `maskColor` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Specify the color of the overlay box for masked elements, in [CSS color format](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Default color is pink `#FF00FF`.\n\n  - `maxDiffPixelRatio` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1`. Default is configurable with `TestConfig.expect`. Unset by default.\n\n  - `maxDiffPixels` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable amount of pixels that could be different. Default is configurable with `TestConfig.expect`. Unset by default.\n\n  - `omitBackground` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images. Defaults to `false`.\n\n  - `scale` \"css\" \\| \"device\" *(optional)*\n\n    When set to `\"css\"`, screenshot will have a single pixel per each css pixel on the page. For high-dpi devices, this will keep screenshots small. Using `\"device\"` option will produce a single pixel per each device pixel, so screenshots of high-dpi devices will be twice as large or even larger.\n\n    Defaults to `\"css\"`.\n\n  - `stylePath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    File name containing the stylesheet to apply while making the screenshot. This is where you can hide dynamic elements, make elements invisible or change their properties to help you creating repeatable screenshots. This stylesheet pierces the Shadow DOM and applies to the inner frames.\n\n  - `threshold` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable perceived color difference in the [YIQ color space](https://en.wikipedia.org/wiki/YIQ) between the same pixel in compared images, between zero (strict) and one (lax), default is configurable with `TestConfig.expect`. Defaults to `0.2`.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toHaveText\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-locatorassertions](https://playwright.dev/docs/api/class-locatorassertions)"
- name: locatorAssertions.toBeAttached
  id: api/class-locatorassertions#locator-assertions-to-be-attached
  summary: Ensures that Locator points to an element that is connected to a Document or a ShadowRoot
  belongs_to: LocatorAssertions
  description: |-
    ### toBeAttached[​](#locator-assertions-to-be-attached "Direct link to toBeAttached")

    Ensures that [Locator](class-locator "Locator") points to an element that is [connected](https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected) to a Document or a ShadowRoot.

    **Usage**

    ``` javascript
    await expect(page.getByText('Hidden text')).toBeAttached();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `attached` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>
- name: locatorAssertions.toBeChecked
  id: api/class-locatorassertions#locator-assertions-to-be-checked
  summary: Ensures the Locator points to a checked input
  belongs_to: LocatorAssertions
  description: |-
    ### toBeChecked[​](#locator-assertions-to-be-checked "Direct link to toBeChecked")

    Ensures the [Locator](class-locator "Locator") points to a checked input.

    **Usage**

    ``` javascript
    const locator = page.getByLabel('Subscribe to newsletter');
    await expect(locator).toBeChecked();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `checked` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locatorAssertions.toBeDisabled
  id: api/class-locatorassertions#locator-assertions-to-be-disabled
  summary: Ensures the Locator points to a disabled element
  belongs_to: LocatorAssertions
  description: |-
    ### toBeDisabled[​](#locator-assertions-to-be-disabled "Direct link to toBeDisabled")

    Ensures the [Locator](class-locator "Locator") points to a disabled element. Element is disabled if it has "disabled" attribute or is disabled via ['aria-disabled'](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-disabled). Note that only native control elements such as HTML `button`, `input`, `select`, `textarea`, `option`, `optgroup` can be disabled by setting "disabled" attribute. "disabled" attribute on other elements is ignored by the browser.

    **Usage**

    ``` javascript
    const locator = page.locator('button.submit');
    await expect(locator).toBeDisabled();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locatorAssertions.toBeEditable
  id: api/class-locatorassertions#locator-assertions-to-be-editable
  summary: Ensures the Locator points to an editable element
  belongs_to: LocatorAssertions
  description: |-
    ### toBeEditable[​](#locator-assertions-to-be-editable "Direct link to toBeEditable")

    Ensures the [Locator](class-locator "Locator") points to an editable element.

    **Usage**

    ``` javascript
    const locator = page.getByRole('textbox');
    await expect(locator).toBeEditable();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `editable` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locatorAssertions.toBeEmpty
  id: api/class-locatorassertions#locator-assertions-to-be-empty
  summary: Ensures the Locator points to an empty editable element or to a DOM node that has no text
  belongs_to: LocatorAssertions
  description: |-
    ### toBeEmpty[​](#locator-assertions-to-be-empty "Direct link to toBeEmpty")

    Ensures the [Locator](class-locator "Locator") points to an empty editable element or to a DOM node that has no text.

    **Usage**

    ``` javascript
    const locator = page.locator('div.warning');
    await expect(locator).toBeEmpty();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locatorAssertions.toBeEnabled
  id: api/class-locatorassertions#locator-assertions-to-be-enabled
  summary: Ensures the Locator points to an enabled element
  belongs_to: LocatorAssertions
  description: |-
    ### toBeEnabled[​](#locator-assertions-to-be-enabled "Direct link to toBeEnabled")

    Ensures the [Locator](class-locator "Locator") points to an enabled element.

    **Usage**

    ``` javascript
    const locator = page.locator('button.submit');
    await expect(locator).toBeEnabled();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `enabled` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locatorAssertions.toBeFocused
  id: api/class-locatorassertions#locator-assertions-to-be-focused
  summary: Ensures the Locator points to a focused DOM node
  belongs_to: LocatorAssertions
  description: |-
    ### toBeFocused[​](#locator-assertions-to-be-focused "Direct link to toBeFocused")

    Ensures the [Locator](class-locator "Locator") points to a focused DOM node.

    **Usage**

    ``` javascript
    const locator = page.getByRole('textbox');
    await expect(locator).toBeFocused();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locatorAssertions.toBeHidden
  id: api/class-locatorassertions#locator-assertions-to-be-hidden
  summary: Ensures that Locator either does not resolve to any DOM node, or resolves to a non-visible one
  belongs_to: LocatorAssertions
  description: |-
    ### toBeHidden[​](#locator-assertions-to-be-hidden "Direct link to toBeHidden")

    Ensures that [Locator](class-locator "Locator") either does not resolve to any DOM node, or resolves to a [non-visible](../actionability#visible) one.

    **Usage**

    ``` javascript
    const locator = page.locator('.my-element');
    await expect(locator).toBeHidden();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locatorAssertions.toBeInViewport
  id: api/class-locatorassertions#locator-assertions-to-be-in-viewport
  summary: Ensures the Locator points to an element that intersects viewport, according to the intersection observer API
  belongs_to: LocatorAssertions
  description: |-
    ### toBeInViewport[​](#locator-assertions-to-be-in-viewport "Direct link to toBeInViewport")

    Ensures the [Locator](class-locator "Locator") points to an element that intersects viewport, according to the [intersection observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API).

    **Usage**

    ``` javascript
    const locator = page.getByRole('button');
    // Make sure at least some part of element intersects viewport.
    await expect(locator).toBeInViewport();
    // Make sure element is fully outside of viewport.
    await expect(locator).not.toBeInViewport();
    // Make sure that at least half of the element intersects viewport.
    await expect(locator).toBeInViewport({ ratio: 0.5 });
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `ratio` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        The minimal ratio of the element to intersect viewport. If equals to `0`, then element should intersect viewport at any positive ratio. Defaults to `0`.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locatorAssertions.toBeVisible
  id: api/class-locatorassertions#locator-assertions-to-be-visible
  summary: Ensures that Locator points to an attached and visible DOM node
  belongs_to: LocatorAssertions
  description: |-
    ### toBeVisible[​](#locator-assertions-to-be-visible "Direct link to toBeVisible")

    Ensures that [Locator](class-locator "Locator") points to an attached and [visible](../actionability#visible) DOM node.

    To check that at least one element from the list is visible, use [locator.first()](class-locator#locator-first).

    **Usage**

    ``` javascript
    // A specific element is visible.
    await expect(page.getByText('Welcome')).toBeVisible();

    // At least one item in the list is visible.
    await expect(page.getByTestId('todo-item').first()).toBeVisible();

    // At least one of the two elements is visible, possibly both.
    await expect(
        page.getByRole('button', { name: 'Sign in' })
            .or(page.getByRole('button', { name: 'Sign up' }))
            .first()
    ).toBeVisible();
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

      - `visible` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locatorAssertions.toContainText
  id: api/class-locatorassertions#locator-assertions-to-contain-text
  summary: Ensures the Locator points to an element that contains the given text
  belongs_to: LocatorAssertions
  description: |-
    ### toContainText[​](#locator-assertions-to-contain-text "Direct link to toContainText")

    Ensures the [Locator](class-locator "Locator") points to an element that contains the given text. All nested elements will be considered when computing the text content of the element. You can use regular expressions for the value as well.

    **Usage**

    ``` javascript
    const locator = page.locator('.title');
    await expect(locator).toContainText('substring');
    await expect(locator).toContainText(/\d messages/);
    ```

    If you pass an array as an expected value, the expectations are:

    1.  Locator resolves to a list of elements.
    2.  Elements from a **subset** of this list contain text from the expected array, respectively.
    3.  The matching subset of elements has the same order as the expected array.
    4.  Each text value from the expected array is matched by some element from the list.

    For example, consider the following list:

    ``` html
    <ul>
      <li>Item Text 1</li>
      <li>Item Text 2</li>
      <li>Item Text 3</li>
    </ul>
    ```

    Let's see how we can use the assertion:

    ``` javascript
    // ✓ Contains the right items in the right order
    await expect(page.locator('ul > li')).toContainText(['Text 1', 'Text 3']);

    // ✖ Wrong order
    await expect(page.locator('ul > li')).toContainText(['Text 3', 'Text 2']);

    // ✖ No item contains this text
    await expect(page.locator('ul > li')).toContainText(['Some 33']);

    // ✖ Locator points to the outer list element, not to the list items
    await expect(page.locator('ul')).toContainText(['Text 3']);
    ```

    **Arguments**

    - `expected`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")\>

      Expected substring or RegExp or a list of those.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `ignoreCase` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to perform case-insensitive match. `ignoreCase` option takes precedence over the corresponding regular expression flag if specified.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

      - `useInnerText` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to use `element.innerText` instead of `element.textContent` when retrieving DOM node text.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    **Details**

    When `expected` parameter is a string, Playwright will normalize whitespaces and line breaks both in the actual text and in the expected string before matching. When regular expression is used, the actual text is matched as is.
- name: locatorAssertions.toHaveAccessibleDescription
  id: api/class-locatorassertions#locator-assertions-to-have-accessible-description
  summary: Ensures the Locator points to an element with a given accessible description
  belongs_to: LocatorAssertions
  description: |-
    ### toHaveAccessibleDescription[​](#locator-assertions-to-have-accessible-description "Direct link to toHaveAccessibleDescription")

    Ensures the [Locator](class-locator "Locator") points to an element with a given [accessible description](https://w3c.github.io/accname/#dfn-accessible-description).

    **Usage**

    ``` javascript
    const locator = page.getByTestId('save-button');
    await expect(locator).toHaveAccessibleDescription('Save results to disk');
    ```

    **Arguments**

    - `description`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Expected accessible description.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `ignoreCase` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to perform case-insensitive match. `ignoreCase` option takes precedence over the corresponding regular expression flag if specified.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locatorAssertions.toHaveAccessibleName
  id: api/class-locatorassertions#locator-assertions-to-have-accessible-name
  summary: Ensures the Locator points to an element with a given accessible name
  belongs_to: LocatorAssertions
  description: |-
    ### toHaveAccessibleName[​](#locator-assertions-to-have-accessible-name "Direct link to toHaveAccessibleName")

    Ensures the [Locator](class-locator "Locator") points to an element with a given [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).

    **Usage**

    ``` javascript
    const locator = page.getByTestId('save-button');
    await expect(locator).toHaveAccessibleName('Save to disk');
    ```

    **Arguments**

    - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Expected accessible name.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `ignoreCase` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to perform case-insensitive match. `ignoreCase` option takes precedence over the corresponding regular expression flag if specified.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locatorAssertions.toHaveAttribute(name)
  id: api/class-locatorassertions#locator-assertions-to-have-attribute-2
  summary: Ensures the Locator points to an element with given attribute
  belongs_to: LocatorAssertions
  description: |-
    ### toHaveAttribute(name)[​](#locator-assertions-to-have-attribute-2 "Direct link to toHaveAttribute(name)")

    Ensures the [Locator](class-locator "Locator") points to an element with given attribute. The method will assert attribute presence.

    ``` javascript
    const locator = page.locator('input');
    // Assert attribute existence.
    await expect(locator).toHaveAttribute('disabled');
    await expect(locator).not.toHaveAttribute('open');
    ```

    **Usage**

    ``` javascript
    await expect(locator).toHaveAttribute(name);
    await expect(locator).toHaveAttribute(name, options);
    ```

    **Arguments**

    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Attribute name.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locatorAssertions.toHaveAttribute(name, value)
  id: api/class-locatorassertions#locator-assertions-to-have-attribute
  summary: Ensures the Locator points to an element with given attribute
  belongs_to: LocatorAssertions
  description: |-
    ### toHaveAttribute(name, value)[​](#locator-assertions-to-have-attribute "Direct link to toHaveAttribute(name, value)")

    Ensures the [Locator](class-locator "Locator") points to an element with given attribute.

    **Usage**

    ``` javascript
    const locator = page.locator('input');
    await expect(locator).toHaveAttribute('type', 'text');
    ```

    **Arguments**

    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Attribute name.

    - `value`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Expected attribute value.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `ignoreCase` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to perform case-insensitive match. `ignoreCase` option takes precedence over the corresponding regular expression flag if specified.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locatorAssertions.toHaveClass
  id: api/class-locatorassertions#locator-assertions-to-have-class
  summary: Ensures the Locator points to an element with given CSS classes
  belongs_to: LocatorAssertions
  description: |-
    ### toHaveClass[​](#locator-assertions-to-have-class "Direct link to toHaveClass")

    Ensures the [Locator](class-locator "Locator") points to an element with given CSS classes. This needs to be a full match or using a relaxed regular expression.

    **Usage**

    ``` html
    <div class='selected row' id='component'></div>
    ```

    ``` javascript
    const locator = page.locator('#component');
    await expect(locator).toHaveClass(/selected/);
    await expect(locator).toHaveClass('selected row');
    ```

    Note that if array is passed as an expected value, entire lists of elements can be asserted:

    ``` javascript
    const locator = page.locator('list > .component');
    await expect(locator).toHaveClass(['component', 'component selected', 'component']);
    ```

    **Arguments**

    - `expected`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")\>

      Expected class or RegExp or a list of those.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locatorAssertions.toHaveCount
  id: api/class-locatorassertions#locator-assertions-to-have-count
  summary: Ensures the Locator resolves to an exact number of DOM nodes
  belongs_to: LocatorAssertions
  description: |-
    ### toHaveCount[​](#locator-assertions-to-have-count "Direct link to toHaveCount")

    Ensures the [Locator](class-locator "Locator") resolves to an exact number of DOM nodes.

    **Usage**

    ``` javascript
    const list = page.locator('list > .component');
    await expect(list).toHaveCount(3);
    ```

    **Arguments**

    - `count` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Expected count.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locatorAssertions.toHaveCSS
  id: api/class-locatorassertions#locator-assertions-to-have-css
  summary: Ensures the Locator resolves to an element with the given computed CSS style
  belongs_to: LocatorAssertions
  description: |-
    ### toHaveCSS[​](#locator-assertions-to-have-css "Direct link to toHaveCSS")

    Ensures the [Locator](class-locator "Locator") resolves to an element with the given computed CSS style.

    **Usage**

    ``` javascript
    const locator = page.getByRole('button');
    await expect(locator).toHaveCSS('display', 'flex');
    ```

    **Arguments**

    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      CSS property name.

    - `value`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      CSS property value.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locatorAssertions.toHaveId
  id: api/class-locatorassertions#locator-assertions-to-have-id
  summary: Ensures the Locator points to an element with the given DOM Node ID
  belongs_to: LocatorAssertions
  description: |-
    ### toHaveId[​](#locator-assertions-to-have-id "Direct link to toHaveId")

    Ensures the [Locator](class-locator "Locator") points to an element with the given DOM Node ID.

    **Usage**

    ``` javascript
    const locator = page.getByRole('textbox');
    await expect(locator).toHaveId('lastname');
    ```

    **Arguments**

    - `id`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Element id.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locatorAssertions.toHaveJSProperty
  id: api/class-locatorassertions#locator-assertions-to-have-js-property
  summary: Ensures the Locator points to an element with given JavaScript property
  belongs_to: LocatorAssertions
  description: |-
    ### toHaveJSProperty[​](#locator-assertions-to-have-js-property "Direct link to toHaveJSProperty")

    Ensures the [Locator](class-locator "Locator") points to an element with given JavaScript property. Note that this property can be of a primitive type as well as a plain serializable JavaScript object.

    **Usage**

    ``` javascript
    const locator = page.locator('.component');
    await expect(locator).toHaveJSProperty('loaded', true);
    ```

    **Arguments**

    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Property name.

    - `value` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

      Property value.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locatorAssertions.toHaveRole
  id: api/class-locatorassertions#locator-assertions-to-have-role
  summary: Ensures the Locator points to an element with a given ARIA role
  belongs_to: LocatorAssertions
  description: |-
    ### toHaveRole[​](#locator-assertions-to-have-role "Direct link to toHaveRole")

    Ensures the [Locator](class-locator "Locator") points to an element with a given [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles).

    Note that role is matched as a string, disregarding the ARIA role hierarchy. For example, asserting a superclass role `"checkbox"` on an element with a subclass role `"switch"` will fail.

    **Usage**

    ``` javascript
    const locator = page.getByTestId('save-button');
    await expect(locator).toHaveRole('button');
    ```

    **Arguments**

    - `role` "alert" \| "alertdialog" \| "application" \| "article" \| "banner" \| "blockquote" \| "button" \| "caption" \| "cell" \| "checkbox" \| "code" \| "columnheader" \| "combobox" \| "complementary" \| "contentinfo" \| "definition" \| "deletion" \| "dialog" \| "directory" \| "document" \| "emphasis" \| "feed" \| "figure" \| "form" \| "generic" \| "grid" \| "gridcell" \| "group" \| "heading" \| "img" \| "insertion" \| "link" \| "list" \| "listbox" \| "listitem" \| "log" \| "main" \| "marquee" \| "math" \| "meter" \| "menu" \| "menubar" \| "menuitem" \| "menuitemcheckbox" \| "menuitemradio" \| "navigation" \| "none" \| "note" \| "option" \| "paragraph" \| "presentation" \| "progressbar" \| "radio" \| "radiogroup" \| "region" \| "row" \| "rowgroup" \| "rowheader" \| "scrollbar" \| "search" \| "searchbox" \| "separator" \| "slider" \| "spinbutton" \| "status" \| "strong" \| "subscript" \| "superscript" \| "switch" \| "tab" \| "table" \| "tablist" \| "tabpanel" \| "term" \| "textbox" \| "time" \| "timer" \| "toolbar" \| "tooltip" \| "tree" \| "treegrid" \| "treeitem"

      Required aria role.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: locatorAssertions.toHaveScreenshot()
  id: api/class-locatorassertions#locator-assertions-to-have-screenshot-2
  summary: This function will wait until two consecutive locator screenshots yield the same result, and then compare the last screenshot with the expectation
  belongs_to: LocatorAssertions
  description: "### toHaveScreenshot()[​](#locator-assertions-to-have-screenshot-2 \"Direct link to toHaveScreenshot()\")\n\nThis function will wait until two consecutive locator screenshots yield the same result, and then compare the last screenshot with the expectation.\n\n**Usage**\n\n``` javascript\nconst locator = page.getByRole('button');\nawait expect(locator).toHaveScreenshot();\n```\n\nNote that screenshot assertions only work with Playwright test runner.\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `animations` \"disabled\" \\| \"allow\" *(optional)*\n\n    When set to `\"disabled\"`, stops CSS animations, CSS transitions and Web Animations. Animations get different treatment depending on their duration:\n\n    - finite animations are fast-forwarded to completion, so they'll fire `transitionend` event.\n    - infinite animations are canceled to initial state, and then played over after the screenshot.\n\n    Defaults to `\"disabled\"` that disables animations.\n\n  - `caret` \"hide\" \\| \"initial\" *(optional)*\n\n    When set to `\"hide\"`, screenshot will hide text caret. When set to `\"initial\"`, text caret behavior will not be changed. Defaults to `\"hide\"`.\n\n  - `mask`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Locator](class-locator \"Locator\")\\> *(optional)*\n\n    Specify locators that should be masked when the screenshot is taken. Masked elements will be overlaid with a pink box `#FF00FF` (customized by `maskColor`) that completely covers its bounding box.\n\n  - `maskColor` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Specify the color of the overlay box for masked elements, in [CSS color format](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Default color is pink `#FF00FF`.\n\n  - `maxDiffPixelRatio` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1`. Default is configurable with `TestConfig.expect`. Unset by default.\n\n  - `maxDiffPixels` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable amount of pixels that could be different. Default is configurable with `TestConfig.expect`. Unset by default.\n\n  - `omitBackground` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images. Defaults to `false`.\n\n  - `scale` \"css\" \\| \"device\" *(optional)*\n\n    When set to `\"css\"`, screenshot will have a single pixel per each css pixel on the page. For high-dpi devices, this will keep screenshots small. Using `\"device\"` option will produce a single pixel per each device pixel, so screenshots of high-dpi devices will be twice as large or even larger.\n\n    Defaults to `\"css\"`.\n\n  - `stylePath`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    File name containing the stylesheet to apply while making the screenshot. This is where you can hide dynamic elements, make elements invisible or change their properties to help you creating repeatable screenshots. This stylesheet pierces the Shadow DOM and applies to the inner frames.\n\n  - `threshold` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable perceived color difference in the [YIQ color space](https://en.wikipedia.org/wiki/YIQ) between the same pixel in compared images, between zero (strict) and one (lax), default is configurable with `TestConfig.expect`. Defaults to `0.2`.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toHaveText\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-locatorassertions](https://playwright.dev/docs/api/class-locatorassertions)"
- name: locatorAssertions.toHaveScreenshot(name)
  id: api/class-locatorassertions#locator-assertions-to-have-screenshot-1
  summary: This function will wait until two consecutive locator screenshots yield the same result, and then compare the last screenshot with the expectation
  belongs_to: LocatorAssertions
  description: |-
    ### toHaveScreenshot(name)[​](#locator-assertions-to-have-screenshot-1 "Direct link to toHaveScreenshot(name)")

    This function will wait until two consecutive locator screenshots yield the same result, and then compare the last screenshot with the expectation.

    **Usage**

    ``` javascript
    const locator = page.getByRole('button');
    await expect(locator).toHaveScreenshot('image.png');
    ```

    Note that screenshot assertions only work with Playwright test runner.

    **Arguments**

    - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

      Snapshot name.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `animations` "disabled" \| "allow" *(optional)*

        When set to `"disabled"`, stops CSS animations, CSS transitions and Web Animations. Animations get different treatment depending on their duration:

        - finite animations are fast-forwarded to completion, so they'll fire `transitionend` event.
        - infinite animations are canceled to initial state, and then played over after the screenshot.

        Defaults to `"disabled"` that disables animations.

      - `caret` "hide" \| "initial" *(optional)*

        When set to `"hide"`, screenshot will hide text caret. When set to `"initial"`, text caret behavior will not be changed. Defaults to `"hide"`.

      - `mask`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Locator](class-locator "Locator")\> *(optional)*

        Specify locators that should be masked when the screenshot is taken. Masked elements will be overlaid with a pink box `#FF00FF` (customized by `maskColor`) that completely covers its bounding box.

      - `maskColor` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Specify the color of the overlay box for masked elements, in [CSS color format](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Default color is pink `#FF00FF`.

      - `maxDiffPixelRatio` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1`. Default is configurable with `TestConfig.expect`. Unset by default.

      - `maxDiffPixels` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        An acceptable amount of pixels that could be different. Default is configurable with `TestConfig.expect`. Unset by default.

      - `omitBackground` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images. Defaults to `false`.

      - `scale` "css" \| "device" *(optional)*

        When set to `"css"`, screenshot will have a single pixel per each css pixel on the page. For high-dpi devices, this will keep screenshots small. Using `"device"` option will produce a single pixel per each device pixel, so screenshots of high-dpi devices will be twice as large or even larger.

        Defaults to `"css"`.

      - `stylePath`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        File name containing the stylesheet to apply while making the screenshot. This is where you can hide dynamic elements, make elements invisible or change their properties to help you creating repeatable screenshots. This stylesheet pierces the Shadow DOM and applies to the inner frames.

      - `threshold` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        An acceptable perceived color difference in the [YIQ color space](https://en.wikipedia.org/wiki/YIQ) between the same pixel in compared images, between zero (strict) and one (lax), default is configurable with `TestConfig.expect`. Defaults to `0.2`.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: Locators
  id: locators
  summary: Locators are the central piece of Playwright's auto-waiting and retry-ability
  description: "# Locators\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\n[Locator](api/class-locator \"Locator\")s are the central piece of Playwright's auto-waiting and retry-ability. In a nutshell, locators represent a way to find element(s) on the page at any moment.\n\n### Quick Guide[​](#quick-guide \"Direct link to Quick Guide\")\n\nThese are the recommended built-in locators.\n\n- [page.getByRole()](#locate-by-role) to locate by explicit and implicit accessibility attributes.\n- [page.getByText()](#locate-by-text) to locate by text content.\n- [page.getByLabel()](#locate-by-label) to locate a form control by associated label's text.\n- [page.getByPlaceholder()](#locate-by-placeholder) to locate an input by placeholder.\n- [page.getByAltText()](#locate-by-alt-text) to locate an element, usually image, by its text alternative.\n- [page.getByTitle()](#locate-by-title) to locate an element by its title attribute.\n- [page.getByTestId()](#locate-by-test-id) to locate an element based on its `data-testid` attribute (other attributes can be configured).\n\n``` javascript\nawait page.getByLabel('User Name').fill('John');\n\nawait page.getByLabel('Password').fill('secret-password');\n\nawait page.getByRole('button', { name: 'Sign in' }).click();\n\nawait expect(page.getByText('Welcome, John!')).toBeVisible();\n```\n\n## Locating elements[​](#locating-elements \"Direct link to Locating elements\")\n\nPlaywright comes with multiple built-in locators. To make tests resilient, we recommend prioritizing user-facing attributes and explicit contracts such as [page.getByRole()](api/class-page#page-get-by-role).\n\nFor example, consider the following DOM structure.\n\nhttp://localhost:3000\n\n``` html\n<button>Sign in</button>\n```\n\nLocate the element by its role of `button` with name \"Sign in\".\n\n``` javascript\nawait page.getByRole('button', { name: 'Sign in' }).click();\n```\n\n> note\n>\n> Use the [code generator](codegen) to generate a locator, and then edit it as you'd like.\n\nEvery time a locator is used for an action, an up-to-date DOM element is located in the page. In the snippet below, the underlying DOM element will be located twice, once prior to every action. This means that if the DOM changes in between the calls due to re-render, the new element corresponding to the locator will be used.\n\n``` javascript\nconst locator = page.getByRole('button', { name: 'Sign in' });\n\nawait locator.hover();\nawait locator.click();\n```\n\nNote that all methods that create a locator, such as [page.getByLabel()](api/class-page#page-get-by-label), are also available on the [Locator](api/class-locator \"Locator\") and [FrameLocator](api/class-framelocator \"FrameLocator\") classes, so you can chain them and iteratively narrow down your locator.\n\n``` javascript\nconst locator = page\n    .frameLocator('#my-frame')\n    .getByRole('button', { name: 'Sign in' });\n\nawait locator.click();\n```\n\n### Locate by role[​](#locate-by-role \"Direct link to Locate by role\")\n\nThe [page.getByRole()](api/class-page#page-get-by-role) locator reflects how users and assistive technology perceive the page, for example whether some element is a button or a checkbox. When locating by role, you should usually pass the accessible name as well, so that the locator pinpoints the exact element.\n\nFor example, consider the following DOM structure.\n\nhttp://localhost:3000\n\n### Sign up\n\nSubscribe\n\n  \n\n``` html\n<h3>Sign up</h3>\n<label>\n  <input type=\"checkbox\" /> Subscribe\n</label>\n<br/>\n<button>Submit</button>\n```\n\nYou can locate each element by its implicit role:\n\n``` javascript\nawait expect(page.getByRole('heading', { name: 'Sign up' })).toBeVisible();\n\nawait page.getByRole('checkbox', { name: 'Subscribe' }).check();\n\nawait page.getByRole('button', { name: /submit/i }).click();\n```\n\nRole locators include [buttons, checkboxes, headings, links, lists, tables, and many more](https://www.w3.org/TR/html-aria/#docconformance) and follow W3C specifications for [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name). Note that many html elements like `<button>` have an [implicitly defined role](https://w3c.github.io/html-aam/#html-element-role-mappings) that is recognized by the role locator.\n\nNote that role locators **do not replace** accessibility audits and conformance tests, but rather give early feedback about the ARIA guidelines.\n\n> When to use role locators\n>\n> We recommend prioritizing role locators to locate elements, as it is the closest way to how users and assistive technology perceive the page.\n\n### Locate by label[​](#locate-by-label \"Direct link to Locate by label\")\n\nMost form controls usually have dedicated labels that could be conveniently used to interact with the form. In this case, you can locate the control by its associated label using [page.getByLabel()](api/class-page#page-get-by-label).\n\nFor example, consider the following DOM structure.\n\nhttp://localhost:3000\n\nPassword\n\n``` html\n<label>Password <input type=\"password\" /></label>\n```\n\nYou can fill the input after locating it by the label text:\n\n``` javascript\nawait page.getByLabel('Password').fill('secret');\n```\n\n> When to use label locators\n>\n> Use this locator when locating form fields.\n\n### Locate by placeholder[​](#locate-by-placeholder \"Direct link to Locate by placeholder\")\n\nInputs may have a placeholder attribute to hint to the user what value should be entered. You can locate such an input using [page.getByPlaceholder()](api/class-page#page-get-by-placeholder).\n\nFor example, consider the following DOM structure.\n\nhttp://localhost:3000\n\n``` html\n<input type=\"email\" placeholder=\"name@example.com\" />\n```\n\nYou can fill the input after locating it by the placeholder text:\n\n``` javascript\nawait page\n    .getByPlaceholder('name@example.com')\n    .fill('playwright@microsoft.com');\n```\n\n> When to use placeholder locators\n>\n> Use this locator when locating form elements that do not have labels but do have placeholder texts.\n\n### Locate by text[​](#locate-by-text \"Direct link to Locate by text\")\n\nFind an element by the text it contains. You can match by a substring, exact string, or a regular expression when using [page.getByText()](api/class-page#page-get-by-text).\n\nFor example, consider the following DOM structure.\n\nhttp://localhost:3000\n\nWelcome, John\n\n``` html\n<span>Welcome, John</span>\n```\n\nYou can locate the element by the text it contains:\n\n``` javascript\nawait expect(page.getByText('Welcome, John')).toBeVisible();\n```\n\nSet an exact match:\n\n``` javascript\nawait expect(page.getByText('Welcome, John', { exact: true })).toBeVisible();\n```\n\nMatch with a regular expression:\n\n``` javascript\nawait expect(page.getByText(/welcome, [A-Za-z]+$/i)).toBeVisible();\n```\n\n> note\n>\n> Matching by text always normalizes whitespace, even with exact match. For example, it turns multiple spaces into one, turns line breaks into spaces and ignores leading and trailing whitespace.\n\n> When to use text locators\n>\n> We recommend using text locators to find non interactive elements like `div`, `span`, `p`, etc. For interactive elements like `button`, `a`, `input`, etc. use [role locators](#locate-by-role).\n\nYou can also [filter by text](#filter-by-text) which can be useful when trying to find a particular item in a list.\n\n### Locate by alt text[​](#locate-by-alt-text \"Direct link to Locate by alt text\")\n\nAll images should have an `alt` attribute that describes the image. You can locate an image based on the text alternative using [page.getByAltText()](api/class-page#page-get-by-alt-text).\n\nFor example, consider the following DOM structure.\n\nhttp://localhost:3000\n\n``` html\n<img alt=\"playwright logo\" src=\"/img/playwright-logo.svg\" width=\"100\" />\n```\n\nYou can click on the image after locating it by the text alternative:\n\n``` javascript\nawait page.getByAltText('playwright logo').click();\n```\n\n> When to use alt locators\n>\n> Use this locator when your element supports alt text such as `img` and `area` elements.\n\n### Locate by title[​](#locate-by-title \"Direct link to Locate by title\")\n\nLocate an element with a matching title attribute using [page.getByTitle()](api/class-page#page-get-by-title).\n\nFor example, consider the following DOM structure.\n\nhttp://localhost:3000\n\n25 issues\n\n``` html\n<span title='Issues count'>25 issues</span>\n```\n\nYou can check the issues count after locating it by the title text:\n\n``` javascript\nawait expect(page.getByTitle('Issues count')).toHaveText('25 issues');\n```\n\n> When to use title locators\n>\n> Use this locator when your element has the `title` attribute.\n\n### Locate by test id[​](#locate-by-test-id \"Direct link to Locate by test id\")\n\nTesting by test ids is the most resilient way of testing as even if your text or role of the attribute changes, the test will still pass. QA's and developers should define explicit test ids and query them with [page.getByTestId()](api/class-page#page-get-by-test-id). However testing by test ids is not user facing. If the role or text value is important to you then consider using user facing locators such as [role](#locate-by-role) and [text locators](#locate-by-text).\n\nFor example, consider the following DOM structure.\n\nhttp://localhost:3000\n\n``` html\n<button data-testid=\"directions\">Itinéraire</button>\n```\n\nYou can locate the element by its test id:\n\n``` javascript\nawait page.getByTestId('directions').click();\n```\n\n> When to use testid locators\n>\n> You can also use test ids when you choose to use the test id methodology or when you can't locate by [role](#locate-by-role) or [text](#locate-by-text).\n\n#### Set a custom test id attribute[​](#set-a-custom-test-id-attribute \"Direct link to Set a custom test id attribute\")\n\nBy default, [page.getByTestId()](api/class-page#page-get-by-test-id) will locate elements based on the `data-testid` attribute, but you can configure it in your test config or by calling [selectors.setTestIdAttribute()](api/class-selectors#selectors-set-test-id-attribute).\n\nSet the test id to use a custom data attribute for your tests.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    testIdAttribute: 'data-pw'\n  }\n});\n```\n\nIn your html you can now use `data-pw` as your test id instead of the default `data-testid`.\n\nhttp://localhost:3000\n\n``` html\n<button data-pw=\"directions\">Itinéraire</button>\n```\n\nAnd then locate the element as you would normally do:\n\n``` javascript\nawait page.getByTestId('directions').click();\n```\n\n### Locate by CSS or XPath[​](#locate-by-css-or-xpath \"Direct link to Locate by CSS or XPath\")\n\nIf you absolutely must use CSS or XPath locators, you can use [page.locator()](api/class-page#page-locator) to create a locator that takes a selector describing how to find an element in the page. Playwright supports CSS and XPath selectors, and auto-detects them if you omit `css=` or `xpath=` prefix.\n\n``` javascript\nawait page.locator('css=button').click();\nawait page.locator('xpath=//button').click();\n\nawait page.locator('button').click();\nawait page.locator('//button').click();\n```\n\nXPath and CSS selectors can be tied to the DOM structure or implementation. These selectors can break when the DOM structure changes. Long CSS or XPath chains below are an example of a **bad practice** that leads to unstable tests:\n\n``` javascript\nawait page.locator(\n    '#tsf > div:nth-child(2) > div.A8SBwf > div.RNNXgb > div > div.a4bIc > input'\n).click();\n\nawait page\n    .locator('//*[@id=\"tsf\"]/div[2]/div[1]/div[1]/div/div[2]/input')\n    .click();\n```\n\n> When to use this\n>\n> CSS and XPath are not recommended as the DOM can often change leading to non resilient tests. Instead, try to come up with a locator that is close to how the user perceives the page such as [role locators](#locate-by-role) or [define an explicit testing contract](#locate-by-test-id) using test ids.\n\n## Locate in Shadow DOM[​](#locate-in-shadow-dom \"Direct link to Locate in Shadow DOM\")\n\nAll locators in Playwright **by default** work with elements in Shadow DOM. The exceptions are:\n\n- Locating by XPath does not pierce shadow roots.\n- [Closed-mode shadow roots](https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow#parameters) are not supported.\n\nConsider the following example with a custom web component:\n\n``` html\n<x-details role=button aria-expanded=true aria-controls=inner-details>\n  <div>Title</div>\n  #shadow-root\n    <div id=inner-details>Details</div>\n</x-details>\n```\n\nYou can locate in the same way as if the shadow root was not present at all.\n\nTo click `<div>Details</div>`:\n\n``` javascript\nawait page.getByText('Details').click();\n```\n\n``` html\n<x-details role=button aria-expanded=true aria-controls=inner-details>\n  <div>Title</div>\n  #shadow-root\n    <div id=inner-details>Details</div>\n</x-details>\n```\n\nTo click `<x-details>`:\n\n``` javascript\nawait page.locator('x-details', { hasText: 'Details' }).click();\n```\n\n``` html\n<x-details role=button aria-expanded=true aria-controls=inner-details>\n  <div>Title</div>\n  #shadow-root\n    <div id=inner-details>Details</div>\n</x-details>\n```\n\nTo ensure that `<x-details>` contains the text \"Details\":\n\n``` javascript\nawait expect(page.locator('x-details')).toContainText('Details');\n```\n\n## Filtering Locators[​](#filtering-locators \"Direct link to Filtering Locators\")\n\nConsider the following DOM structure where we want to click on the buy button of the second product card. We have a few options in order to filter the locators to get the right one.\n\nhttp://localhost:3000\n\n- ### Product 1\n\n- ### Product 2\n\n``` html\n<ul>\n  <li>\n    <h3>Product 1</h3>\n    <button>Add to cart</button>\n  </li>\n  <li>\n    <h3>Product 2</h3>\n    <button>Add to cart</button>\n  </li>\n</ul>\n```\n\n### Filter by text[​](#filter-by-text \"Direct link to Filter by text\")\n\nLocators can be filtered by text with the [locator.filter()](api/class-locator#locator-filter) method. It will search for a particular string somewhere inside the element, possibly in a descendant element, case-insensitively. You can also pass a regular expression.\n\n``` javascript\nawait page\n    .getByRole('listitem')\n    .filter({ hasText: 'Product 2' })\n    .getByRole('button', { name: 'Add to cart' })\n    .click();\n```\n\nUse a regular expression:\n\n``` javascript\nawait page\n    .getByRole('listitem')\n    .filter({ hasText: /Product 2/ })\n    .getByRole('button', { name: 'Add to cart' })\n    .click();\n```\n\n### Filter by not having text[​](#filter-by-not-having-text \"Direct link to Filter by not having text\")\n\nAlternatively, filter by **not having** text:\n\n``` javascript\n// 5 in-stock items\nawait expect(page.getByRole('listitem').filter({ hasNotText: 'Out of stock' })).toHaveCount(5);\n```\n\n### Filter by child/descendant[​](#filter-by-childdescendant \"Direct link to Filter by child/descendant\")\n\nLocators support an option to only select elements that have or have not a descendant matching another locator. You can therefore filter by any other locator such as a [locator.getByRole()](api/class-locator#locator-get-by-role), [locator.getByTestId()](api/class-locator#locator-get-by-test-id), [locator.getByText()](api/class-locator#locator-get-by-text) etc.\n\nhttp://localhost:3000\n\n- ### Product 1\n\n- ### Product 2\n\n``` html\n<ul>\n  <li>\n    <h3>Product 1</h3>\n    <button>Add to cart</button>\n  </li>\n  <li>\n    <h3>Product 2</h3>\n    <button>Add to cart</button>\n  </li>\n</ul>\n```\n\n``` javascript\nawait page\n    .getByRole('listitem')\n    .filter({ has: page.getByRole('heading', { name: 'Product 2' }) })\n    .getByRole('button', { name: 'Add to cart' })\n    .click();\n```\n\nWe can also assert the product card to make sure there is only one:\n\n``` javascript\nawait expect(page\n    .getByRole('listitem')\n    .filter({ has: page.getByRole('heading', { name: 'Product 2' }) }))\n    .toHaveCount(1);\n```\n\nThe filtering locator **must be relative** to the original locator and is queried starting with the original locator match, not the document root. Therefore, the following will not work, because the filtering locator starts matching from the `<ul>` list element that is outside of the `<li>` list item matched by the original locator:\n\n``` javascript\n// ✖ WRONG\nawait expect(page\n    .getByRole('listitem')\n    .filter({ has: page.getByRole('list').getByText('Product 2') }))\n    .toHaveCount(1);\n```\n\n### Filter by not having child/descendant[​](#filter-by-not-having-childdescendant \"Direct link to Filter by not having child/descendant\")\n\nWe can also filter by **not having** a matching element inside.\n\n``` javascript\nawait expect(page\n    .getByRole('listitem')\n    .filter({ hasNot: page.getByText('Product 2') }))\n    .toHaveCount(1);\n```\n\nNote that the inner locator is matched starting from the outer one, not from the document root.\n\n## Locator operators[​](#locator-operators \"Direct link to Locator operators\")\n\n### Matching inside a locator[​](#matching-inside-a-locator \"Direct link to Matching inside a locator\")\n\nYou can chain methods that create a locator, like [page.getByText()](api/class-page#page-get-by-text) or [locator.getByRole()](api/class-locator#locator-get-by-role), to narrow down the search to a particular part of the page.\n\nIn this example we first create a locator called product by locating its role of `listitem`. We then filter by text. We can use the product locator again to get by role of button and click it and then use an assertion to make sure there is only one product with the text \"Product 2\".\n\n``` javascript\nconst product = page.getByRole('listitem').filter({ hasText: 'Product 2' });\n\nawait product.getByRole('button', { name: 'Add to cart' }).click();\n\nawait expect(product).toHaveCount(1);\n```\n\nYou can also chain two locators together, for example to find a \"Save\" button inside a particular dialog:\n\n``` javascript\nconst saveButton = page.getByRole('button', { name: 'Save' });\n// ...\nconst dialog = page.getByTestId('settings-dialog');\nawait dialog.locator(saveButton).click();\n```\n\n### Matching two locators simultaneously[​](#matching-two-locators-simultaneously \"Direct link to Matching two locators simultaneously\")\n\nMethod [locator.and()](api/class-locator#locator-and) narrows down an existing locator by matching an additional locator. For example, you can combine [page.getByRole()](api/class-page#page-get-by-role) and [page.getByTitle()](api/class-page#page-get-by-title) to match by both role and title.\n\n``` javascript\nconst button = page.getByRole('button').and(page.getByTitle('Subscribe'));\n```\n\n### Matching one of the two alternative locators[​](#matching-one-of-the-two-alternative-locators \"Direct link to Matching one of the two alternative locators\")\n\nIf you'd like to target one of the two or more elements, and you don't know which one it will be, use [locator.or()](api/class-locator#locator-or) to create a locator that matches all of the alternatives.\n\nFor example, consider a scenario where you'd like to click on a \"New email\" button, but sometimes a security settings dialog shows up instead. In this case, you can wait for either a \"New email\" button, or a dialog and act accordingly.\n\n> note\n>\n> If both \"New email\" button and security dialog appear on screen, the \"or\" locator will match both of them, possibly throwing the [\"strict mode violation\" error](#strictness). In this case, you can use [locator.first()](api/class-locator#locator-first) to only match one of them.\n\n``` javascript\nconst newEmail = page.getByRole('button', { name: 'New' });\nconst dialog = page.getByText('Confirm security settings');\nawait expect(newEmail.or(dialog).first()).toBeVisible();\nif (await dialog.isVisible())\n  await page.getByRole('button', { name: 'Dismiss' }).click();\nawait newEmail.click();\n```\n\n### Matching only visible elements[​](#matching-only-visible-elements \"Direct link to Matching only visible elements\")\n\n> note\n>\n> It's usually better to find a [more reliable way](locators#quick-guide) to uniquely identify the element instead of checking the visibility.\n\nConsider a page with two buttons, the first invisible and the second [visible](actionability#visible).\n\n``` html\n<button style='display: none'>Invisible</button>\n<button>Visible</button>\n```\n\n- This will find both buttons and throw a [strictness](locators#strictness) violation error:\n\n  ``` javascript\n  await page.locator('button').click();\n  ```\n\n- This will only find a second button, because it is visible, and then click it.\n\n  ``` javascript\n  await page.locator('button').locator('visible=true').click();\n  ```\n\n## Lists[​](#lists \"Direct link to Lists\")\n\n### Count items in a list[​](#count-items-in-a-list \"Direct link to Count items in a list\")\n\nYou can assert locators in order to count the items in a list.\n\nFor example, consider the following DOM structure:\n\nhttp://localhost:3000\n\n- apple\n- banana\n- orange\n\n``` html\n<ul>\n  <li>apple</li>\n  <li>banana</li>\n  <li>orange</li>\n</ul>\n```\n\nUse the count assertion to ensure that the list has 3 items.\n\n``` javascript\nawait expect(page.getByRole('listitem')).toHaveCount(3);\n```\n\n### Assert all text in a list[​](#assert-all-text-in-a-list \"Direct link to Assert all text in a list\")\n\nYou can assert locators in order to find all the text in a list.\n\nFor example, consider the following DOM structure:\n\nhttp://localhost:3000\n\n- apple\n- banana\n- orange\n\n``` html\n<ul>\n  <li>apple</li>\n  <li>banana</li>\n  <li>orange</li>\n</ul>\n```\n\nUse [expect(locator).toHaveText()](api/class-locatorassertions#locator-assertions-to-have-text) to ensure that the list has the text \"apple\", \"banana\" and \"orange\".\n\n``` javascript\nawait expect(page\n    .getByRole('listitem'))\n    .toHaveText(['apple', 'banana', 'orange']);\n```\n\n### Get a specific item[​](#get-a-specific-item \"Direct link to Get a specific item\")\n\nThere are many ways to get a specific item in a list.\n\n#### Get by text[​](#get-by-text \"Direct link to Get by text\")\n\nUse the [page.getByText()](api/class-page#page-get-by-text) method to locate an element in a list by its text content and then click on it.\n\nFor example, consider the following DOM structure:\n\nhttp://localhost:3000\n\n- apple\n- banana\n- orange\n\n``` html\n<ul>\n  <li>apple</li>\n  <li>banana</li>\n  <li>orange</li>\n</ul>\n```\n\nLocate an item by its text content and click it.\n\n``` javascript\nawait page.getByText('orange').click();\n```\n\n#### Filter by text[​](#filter-by-text-1 \"Direct link to Filter by text\")\n\nUse the [locator.filter()](api/class-locator#locator-filter) to locate a specific item in a list.\n\nFor example, consider the following DOM structure:\n\nhttp://localhost:3000\n\n- apple\n- banana\n- orange\n\n``` html\n<ul>\n  <li>apple</li>\n  <li>banana</li>\n  <li>orange</li>\n</ul>\n```\n\nLocate an item by the role of \"listitem\" and then filter by the text of \"orange\" and then click it.\n\n``` javascript\nawait page\n    .getByRole('listitem')\n    .filter({ hasText: 'orange' })\n    .click();\n```\n\n#### Get by test id[​](#get-by-test-id \"Direct link to Get by test id\")\n\nUse the [page.getByTestId()](api/class-page#page-get-by-test-id) method to locate an element in a list. You may need to modify the html and add a test id if you don't already have a test id.\n\nFor example, consider the following DOM structure:\n\nhttp://localhost:3000\n\n- apple\n- banana\n- orange\n\n``` html\n<ul>\n  <li data-testid='apple'>apple</li>\n  <li data-testid='banana'>banana</li>\n  <li data-testid='orange'>orange</li>\n</ul>\n```\n\nLocate an item by its test id of \"orange\" and then click it.\n\n``` javascript\nawait page.getByTestId('orange').click();\n```\n\n#### Get by nth item[​](#get-by-nth-item \"Direct link to Get by nth item\")\n\nIf you have a list of identical elements, and the only way to distinguish between them is the order, you can choose a specific element from a list with [locator.first()](api/class-locator#locator-first), [locator.last()](api/class-locator#locator-last) or [locator.nth()](api/class-locator#locator-nth).\n\n``` javascript\nconst banana = await page.getByRole('listitem').nth(1);\n```\n\nHowever, use this method with caution. Often times, the page might change, and the locator will point to a completely different element from the one you expected. Instead, try to come up with a unique locator that will pass the [strictness criteria](#strictness).\n\n### Chaining filters[​](#chaining-filters \"Direct link to Chaining filters\")\n\nWhen you have elements with various similarities, you can use the [locator.filter()](api/class-locator#locator-filter) method to select the right one. You can also chain multiple filters to narrow down the selection.\n\nFor example, consider the following DOM structure:\n\nhttp://localhost:3000\n\n- John\n\n- Mary\n\n- John\n\n- Mary\n\n``` html\n<ul>\n  <li>\n    <div>John</div>\n    <div><button>Say hello</button></div>\n  </li>\n  <li>\n    <div>Mary</div>\n    <div><button>Say hello</button></div>\n  </li>\n  <li>\n    <div>John</div>\n    <div><button>Say goodbye</button></div>\n  </li>\n  <li>\n    <div>Mary</div>\n    <div><button>Say goodbye</button></div>\n  </li>\n</ul>\n```\n\nTo take a screenshot of the row with \"Mary\" and \"Say goodbye\":\n\n``` javascript\nconst rowLocator = page.getByRole('listitem');\n\nawait rowLocator\n    .filter({ hasText: 'Mary' })\n    .filter({ has: page.getByRole('button', { name: 'Say goodbye' }) })\n    .screenshot({ path: 'screenshot.png' });\n```\n\nYou should now have a \"screenshot.png\" file in your project's root directory.\n\n### Rare use cases[​](#rare-use-cases \"Direct link to Rare use cases\")\n\n#### Do something with each element in the list[​](#do-something-with-each-element-in-the-list \"Direct link to Do something with each element in the list\")\n\nIterate elements:\n\n``` javascript\nfor (const row of await page.getByRole('listitem').all())\n  console.log(await row.textContent());\n```\n\nIterate using regular for loop:\n\n``` javascript\nconst rows = page.getByRole('listitem');\nconst count = await rows.count();\nfor (let i = 0; i < count; ++i)\n  console.log(await rows.nth(i).textContent());\n```\n\n#### Evaluate in the page[​](#evaluate-in-the-page \"Direct link to Evaluate in the page\")\n\nThe code inside [locator.evaluateAll()](api/class-locator#locator-evaluate-all) runs in the page, you can call any DOM apis there.\n\n``` javascript\nconst rows = page.getByRole('listitem');\nconst texts = await rows.evaluateAll(\n    list => list.map(element => element.textContent));\n```\n\n## Strictness[​](#strictness \"Direct link to Strictness\")\n\nLocators are strict. This means that all operations on locators that imply some target DOM element will throw an exception if more than one element matches. For example, the following call throws if there are several buttons in the DOM:\n\n#### Throws an error if more than one[​](#throws-an-error-if-more-than-one \"Direct link to Throws an error if more than one\")\n\n``` javascript\nawait page.getByRole('button').click();\n```\n\nOn the other hand, Playwright understands when you perform a multiple-element operation, so the following call works perfectly fine when the locator resolves to multiple elements.\n\n#### Works fine with multiple elements[​](#works-fine-with-multiple-elements \"Direct link to Works fine with multiple elements\")\n\n``` javascript\nawait page.getByRole('button').count();\n```\n\nYou can explicitly opt-out from strictness check by telling Playwright which element to use when multiple elements match, through [locator.first()](api/class-locator#locator-first), [locator.last()](api/class-locator#locator-last), and [locator.nth()](api/class-locator#locator-nth). These methods are **not recommended** because when your page changes, Playwright may click on an element you did not intend. Instead, follow best practices above to create a locator that uniquely identifies the target element.\n\n## More Locators[​](#more-locators \"Direct link to More Locators\")\n\nFor less commonly used locators, look at the [other locators](other-locators) guide.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/locators](https://playwright.dev/docs/locators)"
- name: Logger
  id: api/class-logger
  summary: Playwright generates a lot of logs and they are accessible via the pluggable logger sink
  description: "# Logger\n\nPlaywright generates a lot of logs and they are accessible via the pluggable logger sink.\n\n``` javascript\nconst { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.\n\n(async () => {\n  const browser = await chromium.launch({\n    logger: {\n      isEnabled: (name, severity) => name === 'api',\n      log: (name, severity, message, args) => console.log(`${name} ${message}`)\n    }\n  });\n  // ...\n})();\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### isEnabled[​](#logger-is-enabled \"Direct link to isEnabled\")\n\nAdded before v1.9\n\nDetermines whether sink is interested in the logger with the given name and severity.\n\n**Usage**\n\n``` javascript\nlogger.isEnabled(name, severity);\n```\n\n**Arguments**\n\n- `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  logger name\n\n- `severity` \"verbose\" \\| \"info\" \\| \"warning\" \\| \"error\"\n\n**Returns**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### log[​](#logger-log \"Direct link to log\")\n\nAdded before v1.9\n\n**Usage**\n\n``` javascript\nlogger.log(name, severity, message, args, hints);\n```\n\n**Arguments**\n\n- `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  logger name\n\n- `severity` \"verbose\" \\| \"info\" \\| \"warning\" \\| \"error\"\n\n- `message` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Error](https://nodejs.org/api/errors.html#errors_class_error \"Error\")\n\n  log message format\n\n- `args` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n  message arguments\n\n- `hints` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n  - `color` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Optional preferred logger color.\n\n  optional formatting hints\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-logger](https://playwright.dev/docs/api/class-logger)"
- name: logger.isEnabled
  id: api/class-logger#logger-is-enabled
  summary: Determines whether sink is interested in the logger with the given name and severity
  belongs_to: Logger
  description: |-
    ### isEnabled[​](#logger-is-enabled "Direct link to isEnabled")

    Added before v1.9

    Determines whether sink is interested in the logger with the given name and severity.

    **Usage**

    ``` javascript
    logger.isEnabled(name, severity);
    ```

    **Arguments**

    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      logger name

    - `severity` "verbose" \| "info" \| "warning" \| "error"

    **Returns**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")
- name: logger.log
  id: api/class-logger#logger-log
  summary: Optional preferred logger color
  belongs_to: Logger
  description: "### log[​](#logger-log \"Direct link to log\")\n\nAdded before v1.9\n\n**Usage**\n\n``` javascript\nlogger.log(name, severity, message, args, hints);\n```\n\n**Arguments**\n\n- `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  logger name\n\n- `severity` \"verbose\" \\| \"info\" \\| \"warning\" \\| \"error\"\n\n- `message`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Error](https://nodejs.org/api/errors.html#errors_class_error \"Error\")\n\n  log message format\n\n- `args`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n  message arguments\n\n- `hints` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n  - `color` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Optional preferred logger color.\n\n  optional formatting hints\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-logger](https://playwright.dev/docs/api/class-logger)"
- name: Migrating from Protractor
  id: protractor
  summary: Playwright Test has built-in auto-waiting that makes protractor's waitForAngular unneeded in general case
  description: "# Migrating from Protractor\n\n## Migration Principles[​](#migration-principles \"Direct link to Migration Principles\")\n\n- No need for \"webdriver-manager\" / Selenium.\n- Protractor’s [ElementFinder](https://www.protractortest.org/#/api?view=ElementFinder) ⇄ [Playwright Test Locator](api/class-locator)\n- Protractor’s [`waitForAngular`](https://www.protractortest.org/#/api?view=ProtractorBrowser.prototype.waitForAngular) ⇄ Playwright Test [auto-waiting](actionability)\n- Don’t forget to await in Playwright Test\n\n## Cheat Sheet[​](#cheat-sheet \"Direct link to Cheat Sheet\")\n\n| Protractor                                        | Playwright Test                                                                    |\n|---------------------------------------------------|------------------------------------------------------------------------------------|\n| `element(by.buttonText('...'))`                   | `page.locator('button, input[type=\"button\"], input[type=\"submit\"] >> text=\"...\"')` |\n| `element(by.css('...'))`                          | `page.locator('...')`                                                              |\n| `element(by.cssContainingText('..1..', '..2..'))` | `page.locator('..1.. >> text=..2..')`                                              |\n| `element(by.id('...'))`                           | `page.locator('#...')`                                                             |\n| `element(by.model('...'))`                        | `page.locator('[ng-model=\"...\"]')`                                                 |\n| `element(by.repeater('...'))`                     | `page.locator('[ng-repeat=\"...\"]')`                                                |\n| `element(by.xpath('...'))`                        | `page.locator('xpath=...')`                                                        |\n| `element.all`                                     | `page.locator`                                                                     |\n| `browser.get(url)`                                | `await page.goto(url)`                                                             |\n| `browser.getCurrentUrl()`                         | `page.url()`                                                                       |\n\n## Example[​](#example \"Direct link to Example\")\n\nProtractor:\n\n``` javascript\ndescribe('angularjs homepage todo list', function() {\n  it('should add a todo', function() {\n    browser.get('https://angularjs.org');\n\n    element(by.model('todoList.todoText')).sendKeys('first test');\n    element(by.css('[value=\"add\"]')).click();\n\n    const todoList = element.all(by.repeater('todo in todoList.todos'));\n    expect(todoList.count()).toEqual(3);\n    expect(todoList.get(2).getText()).toEqual('first test');\n\n    // You wrote your first test, cross it off the list\n    todoList.get(2).element(by.css('input')).click();\n    const completedAmount = element.all(by.css('.done-true'));\n    expect(completedAmount.count()).toEqual(2);\n  });\n});\n```\n\nLine-by-line migration to Playwright Test:\n\n``` javascript\nconst { test, expect } = require('@playwright/test'); // 1\n\ntest.describe('angularjs homepage todo list', () => {\n  test('should add a todo', async ({ page }) => { // 2, 3\n    await page.goto('https://angularjs.org'); // 4\n\n    await page.locator('[ng-model=\"todoList.todoText\"]').fill('first test');\n    await page.locator('[value=\"add\"]').click();\n\n    const todoList = page.locator('[ng-repeat=\"todo in todoList.todos\"]'); // 5\n    await expect(todoList).toHaveCount(3);\n    await expect(todoList.nth(2)).toHaveText('first test', {\n      useInnerText: true,\n    });\n\n    // You wrote your first test, cross it off the list\n    await todoList.nth(2).getByRole('textbox').click();\n    const completedAmount = page.locator('.done-true');\n    await expect(completedAmount).toHaveCount(2);\n  });\n});\n```\n\nMigration highlights (see inline comments in the Playwright Test code snippet):\n\n1.  Each Playwright Test file has explicit import of the `test` and `expect` functions\n2.  Test function is marked with `async`\n3.  Playwright Test is given a `page` as one of its parameters. This is one of the many [useful fixtures](api/class-fixtures) in Playwright Test.\n4.  Almost all Playwright calls are prefixed with `await`\n5.  Locator creation with [page.locator()](api/class-page#page-locator) is one of the few methods that is sync.\n\n## Polyfilling `waitForAngular`[​](#polyfilling-waitforangular \"Direct link to polyfilling-waitforangular\")\n\nPlaywright Test has built-in [auto-waiting](actionability) that makes protractor's [`waitForAngular`](https://www.protractortest.org/#/api?view=ProtractorBrowser.prototype.waitForAngular) unneeded in general case.\n\nHowever, it might come handy in some edge cases. Here's how to polyfill `waitForAngular` function in Playwright Test:\n\n1.  Make sure you have protractor installed in your package.json\n\n2.  Polyfill function\n\n    ``` javascript\n    async function waitForAngular(page) {\n      const clientSideScripts = require('protractor/built/clientsidescripts.js');\n\n      async function executeScriptAsync(page, script, ...scriptArgs) {\n        await page.evaluate(`\n          new Promise((resolve, reject) => {\n            const callback = (errMessage) => {\n              if (errMessage)\n                reject(new Error(errMessage));\n              else\n                resolve();\n            };\n            (function() {${script}}).apply(null, [...${JSON.stringify(scriptArgs)}, callback]);\n          })\n        `);\n      }\n\n      await executeScriptAsync(page, clientSideScripts.waitForAngular, '');\n    }\n    ```\n\n    If you don't want to keep a version protractor around, you can also use this simpler approach using this function (only works for Angular 2+):\n\n    ``` javascript\n    async function waitForAngular(page) {\n      await page.evaluate(async () => {\n        // @ts-expect-error\n        if (window.getAllAngularTestabilities) {\n          // @ts-expect-error\n          await Promise.all(window.getAllAngularTestabilities().map(whenStable));\n          // @ts-expect-error\n          async function whenStable(testability) {\n            return new Promise(res => testability.whenStable(res));\n          }\n        }\n      });\n    }\n    ```\n\n3.  Polyfill usage\n\n    ``` javascript\n    const page = await context.newPage();\n    await page.goto('https://example.org');\n    await waitForAngular(page);\n    ```\n\n## Playwright Test Super Powers[​](#playwright-test-super-powers \"Direct link to Playwright Test Super Powers\")\n\nOnce you're on Playwright Test, you get a lot!\n\n- Full zero-configuration TypeScript support\n- Run tests across **all web engines** (Chrome, Firefox, Safari) on **any popular operating system** (Windows, macOS, Ubuntu)\n- Full support for multiple origins, [(i)frames](api/class-frame), [tabs and contexts](pages)\n- Run tests in parallel across multiple browsers\n- Built-in test [artifact collection](test-use-options#recording-options)\n\nYou also get all these ✨ awesome tools ✨ that come bundled with Playwright Test:\n\n- [Playwright Inspector](debug)\n- [Playwright Test Code generation](codegen-intro)\n- [Playwright Tracing](trace-viewer) for post-mortem debugging\n\n## Further Reading[​](#further-reading \"Direct link to Further Reading\")\n\nLearn more about Playwright Test runner:\n\n- [Getting Started](index)\n- [Fixtures](test-fixtures)\n- [Locators](locators)\n- [Assertions](test-assertions)\n- [Auto-waiting](actionability)\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/protractor](https://playwright.dev/docs/protractor)"
- name: Migrating from Puppeteer
  id: puppeteer
  summary: This guide describes migration to Playwright Library and Playwright Test from Puppeteer
  description: "# Migrating from Puppeteer\n\n## Migration Principles[​](#migration-principles \"Direct link to Migration Principles\")\n\nThis guide describes migration to [Playwright Library](library) and [Playwright Test](index) from Puppeteer. The APIs have similarities, but Playwright offers much more possibilities for web testing and cross-browser automation.\n\n- Most Puppeteer APIs can be used as is\n- The use of [ElementHandle](api/class-elementhandle \"ElementHandle\") is discouraged, use [Locator](api/class-locator \"Locator\") objects and web-first assertions instead.\n- Playwright is cross-browser\n- You probably don't need explicit wait\n\n## Cheat Sheet[​](#cheat-sheet \"Direct link to Cheat Sheet\")\n\n| Puppeteer                                                                  | Playwright Library                                                                                      |\n|----------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------|\n| `await puppeteer.launch()`                                                 | `await playwright.chromium.launch()`                                                                    |\n| `puppeteer.launch({product: 'firefox'})`                                   | `await playwright.firefox.launch()`                                                                     |\n| WebKit is not supported by Puppeteer                                       | `await playwright.webkit.launch()`                                                                      |\n| `await browser.createIncognitoBrowserContext(...)`                         | `await browser.newContext(...)`                                                                         |\n| `await page.setViewport(...)`                                              | `await page.setViewportSize(...)`                                                                       |\n| `await page.waitForXPath(XPathSelector)`                                   | `await page.waitForSelector(XPathSelector)`                                                             |\n| `await page.waitForNetworkIdle(...)`                                       | `await page.waitForLoadState('networkidle')`                                                            |\n| `await page.$eval(...)`                                                    | [Assertions](test-assertions) can often be used instead to verify text, attribute, class...             |\n| `await page.$(...)`                                                        | Discouraged, use [Locators](api/class-locator) instead                                                  |\n| `await page.$x(xpath_selector)`                                            | Discouraged, use [Locators](api/class-locator) instead                                                  |\n| No methods dedicated to checkbox or radio input                            | `await page.locator(selector).check()` `await page.locator(selector).uncheck()`                         |\n| `await page.click(selector)`                                               | `await page.locator(selector).click()`                                                                  |\n| `await page.focus(selector)`                                               | `await page.locator(selector).focus()`                                                                  |\n| `await page.hover(selector)`                                               | `await page.locator(selector).hover()`                                                                  |\n| `await page.select(selector, values)`                                      | `await page.locator(selector).selectOption(values)`                                                     |\n| `await page.tap(selector)`                                                 | `await page.locator(selector).tap()`                                                                    |\n| `await page.type(selector, ...)`                                           | `await page.locator(selector).fill(...)`                                                                |\n| `await page.waitForFileChooser(...)` `await elementHandle.uploadFile(...)` | `await page.locator(selector).setInputFiles(...)`                                                       |\n| `await page.cookies([...urls])`                                            | `await browserContext.cookies([urls])`                                                                  |\n| `await page.deleteCookie(...cookies)`                                      | `await browserContext.clearCookies()`                                                                   |\n| `await page.setCookie(...cookies)`                                         | `await browserContext.addCookies(cookies)`                                                              |\n| `page.on(...)`                                                             | `page.on(...)` In order to intercept and mutate requests, see [page.route()](api/class-page#page-route) |\n\n`page.waitForNavigation` and `page.waitForSelector` remain, but in many cases will not be necessary due to [auto-waiting](actionability).\n\nThe use of [ElementHandle](api/class-elementhandle \"ElementHandle\") is discouraged, use [Locator](api/class-locator \"Locator\") objects and web-first assertions instead.\n\nLocators are the central piece of Playwright's auto-waiting and retry-ability. Locators are strict. This means that all operations on locators that imply some target DOM element will throw an exception if more than one element matches a given selector.\n\n## Examples[​](#examples \"Direct link to Examples\")\n\n### Automation example[​](#automation-example \"Direct link to Automation example\")\n\nPuppeteer:\n\n``` javascript\nconst puppeteer = require('puppeteer');\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.setViewport({ width: 1280, height: 800 });\n  await page.goto('https://playwright.dev/', {\n    waitUntil: 'networkidle2',\n  });\n  await page.screenshot({ path: 'example.png' });\n  await browser.close();\n})();\n```\n\nLine-by-line migration to Playwright:\n\n``` javascript\nconst { chromium } = require('playwright'); // 1\n\n(async () => {\n  const browser = await chromium.launch();\n  const page = await browser.newPage(); // 2\n  await page.setViewportSize({ width: 1280, height: 800 }); // 3\n  await page.goto('https://playwright.dev/', {\n    waitUntil: 'networkidle', // 4\n  });\n  await page.screenshot({ path: 'example.png' });\n  await browser.close();\n})();\n```\n\nMigration highlights (see inline comments in the Playwright code snippet):\n\n1.  Each Playwright Library file has explicit import of `chromium`. Other browsers `webkit` or `firefox` can be used.\n2.  For browser state isolation, consider [browser contexts](browser-contexts)\n3.  `setViewport` becomes `setViewportSize`\n4.  `networkidle2` becomes `networkidle`. Please note that in most cases it is not useful, thanks to auto-waiting.\n\n### Test example[​](#test-example \"Direct link to Test example\")\n\nPuppeteer with Jest:\n\n``` javascript\nimport puppeteer from 'puppeteer';\n\ndescribe('Playwright homepage', () => {\n  let browser;\n  let page;\n\n  beforeAll(async () => {\n    browser = await puppeteer.launch();\n    page = await browser.newPage();\n  });\n\n  it('contains hero title', async () => {\n    await page.goto('https://playwright.dev/');\n    await page.waitForSelector('.hero__title');\n    const text = await page.$eval('.hero__title', e => e.textContent);\n    expect(text).toContain('Playwright enables reliable end-to-end testing'); // 5\n  });\n\n  afterAll(() => browser.close());\n});\n```\n\nLine-by-line migration to Playwright Test:\n\n``` javascript\nimport { test, expect } from '@playwright/test'; // 1\n\ntest.describe('Playwright homepage', () => {\n  test('contains hero title', async ({ page }) => { // 2, 3\n    await page.goto('https://playwright.dev/');\n    const titleLocator = page.locator('.hero__title'); // 4\n    await expect(titleLocator).toContainText( // 5\n        'Playwright enables reliable end-to-end testing'\n    );\n  });\n});\n```\n\n1.  Each Playwright Test file has explicit import of the `test` and `expect` functions\n2.  Test function is marked with `async`\n3.  Playwright Test is given a `page` as one of its parameters. This is one of the many [useful fixtures](api/class-fixtures) in Playwright Test. Playwright Test creates an isolated [Page](api/class-page \"Page\") object for each test. However, if you'd like to reuse a single [Page](api/class-page \"Page\") object between multiple tests, you can create your own in [test.beforeAll()](api/class-test#test-before-all) and close it in [test.afterAll()](api/class-test#test-after-all).\n4.  Locator creation with [page.locator()](api/class-page#page-locator) is one of the few methods that is sync.\n5.  Use [assertions](test-assertions) to verify the state instead of `page.$eval()`.\n\n## Testing[​](#testing \"Direct link to Testing\")\n\nTo improve testing, it is advised to use [Locators](api/class-locator) and web-first [Assertions](test-assertions). See [Writing Tests](writing-tests)\n\nIt is common with Puppeteer to use `page.evaluate()` or `page.$eval()` to inspect an [ElementHandle](api/class-elementhandle \"ElementHandle\") and extract the value of text content, attribute, class... Web-first [Assertions](test-assertions) offers several matchers for this purpose, it is more reliable and readable.\n\n[Playwright Test](index) is our first-party recommended test runner to be used with Playwright. It provides several features like Page Object Model, parallelism, fixtures or reporters.\n\n## Playwright Test Super Powers[​](#playwright-test-super-powers \"Direct link to Playwright Test Super Powers\")\n\nOnce you're on Playwright Test, you get a lot!\n\n- Full zero-configuration TypeScript support\n- Run tests across **all web engines** (Chrome, Firefox, Safari) on **any popular operating system** (Windows, macOS, Ubuntu)\n- Full support for multiple origins, [(i)frames](api/class-frame), [tabs and contexts](pages)\n- Run tests in isolation in parallel across multiple browsers\n- Built-in test [artifact collection](test-use-options#recording-options)\n\nYou also get all these ✨ awesome tools ✨ that come bundled with Playwright Test:\n\n- [Playwright Inspector](debug)\n- [Playwright Test Code generation](codegen-intro)\n- [Playwright Tracing](trace-viewer) for post-mortem debugging\n\n## Further Reading[​](#further-reading \"Direct link to Further Reading\")\n\nLearn more about Playwright Test runner:\n\n- [Getting Started](index)\n- [Fixtures](test-fixtures)\n- [Locators](locators)\n- [Assertions](test-assertions)\n- [Auto-waiting](actionability)\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/puppeteer](https://playwright.dev/docs/puppeteer)"
- name: Migrating from Testing Library
  id: testing-library
  summary: This guide describes migration to Playwright's Experimental Component Testing from DOM Testing Library, React Testing Library, Vue Testing Library and Svelte Testing Library
  description: "# Migrating from Testing Library\n\n## Migration principles[​](#migration-principles \"Direct link to Migration principles\")\n\nThis guide describes migration to Playwright's [Experimental Component Testing](test-components) from [DOM Testing Library](https://testing-library.com/docs/dom-testing-library/intro/), [React Testing Library](https://testing-library.com/docs/react-testing-library/intro/), [Vue Testing Library](https://testing-library.com/docs/vue-testing-library/intro) and [Svelte Testing Library](https://testing-library.com/docs/svelte-testing-library/intro).\n\n> note\n>\n> If you use DOM Testing Library in the browser (for example, you bundle end-to-end tests with webpack), you can switch directly to Playwright Test. Examples below are focused on component tests, but for end-to-end test you just need to replace `await mount` with `await page.goto('http://localhost:3000/')` to open the page under test.\n\n## Cheat Sheet[​](#cheat-sheet \"Direct link to Cheat Sheet\")\n\n| Testing Library                                                                 | Playwright                                                             |\n|---------------------------------------------------------------------------------|------------------------------------------------------------------------|\n| [screen](https://testing-library.com/docs/queries/about#screen)                 | [page](api/class-page) and [component](api/class-locator)              |\n| [queries](https://testing-library.com/docs/queries/about)                       | [locators](locators)                                                   |\n| [async helpers](https://testing-library.com/docs/dom-testing-library/api-async) | [assertions](test-assertions)                                          |\n| [user events](https://testing-library.com/docs/user-event/intro)                | [actions](api/class-locator)                                           |\n| `await user.click(screen.getByText('Click me'))`                                | `await component.getByText('Click me').click()`                        |\n| `await user.click(await screen.findByText('Click me'))`                         | `await component.getByText('Click me').click()`                        |\n| `await user.type(screen.getByLabelText('Password'), 'secret')`                  | `await component.getByLabel('Password').fill('secret')`                |\n| `expect(screen.getByLabelText('Password')).toHaveValue('secret')`               | `await expect(component.getByLabel('Password')).toHaveValue('secret')` |\n| `screen.getByRole('button', { pressed: true })`                                 | `component.getByRole('button', { pressed: true })`                     |\n| `screen.getByLabelText('...')`                                                  | `component.getByLabel('...')`                                          |\n| `screen.queryByPlaceholderText('...')`                                          | `component.getByPlaceholder('...')`                                    |\n| `screen.findByText('...')`                                                      | `component.getByText('...')`                                           |\n| `screen.getByTestId('...')`                                                     | `component.getByTestId('...')`                                         |\n| `render(<Component />);`                                                        | `mount(<Component />);`                                                |\n| `const { unmount } = render(<Component />);`                                    | `const { unmount } = await mount(<Component />);`                      |\n| `const { rerender } = render(<Component />);`                                   | `const { update } = await mount(<Component />);`                       |\n\n## Example[​](#example \"Direct link to Example\")\n\nTesting Library:\n\n``` javascript\nimport React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\ntest('sign in', async () => {\n  // Setup the page.\n  const user = userEvent.setup();\n  render(<SignInPage />);\n\n  // Perform actions.\n  await user.type(screen.getByLabelText('Username'), 'John');\n  await user.type(screen.getByLabelText('Password'), 'secret');\n  await user.click(screen.getByRole('button', { name: 'Sign in' }));\n\n  // Verify signed in state by waiting until \"Welcome\" message appears.\n  expect(await screen.findByText('Welcome, John')).toBeInTheDocument();\n});\n```\n\nLine-by-line migration to Playwright Test:\n\n``` javascript\nconst { test, expect } = require('@playwright/experimental-ct-react'); // 1\n\ntest('sign in', async ({ mount }) => { // 2\n  // Setup the page.\n  const component = await mount(<SignInPage />); // 3\n\n  // Perform actions.\n  await component.getByLabel('Username').fill('John'); // 4\n  await component.getByLabel('Password').fill('secret');\n  await component.getByRole('button', { name: 'Sign in' }).click();\n\n  // Verify signed in state by waiting until \"Welcome\" message appears.\n  await expect(component.getByText('Welcome, John')).toBeVisible(); // 5\n});\n```\n\nMigration highlights (see inline comments in the Playwright Test code snippet):\n\n1.  Import everything from `@playwright/experimental-ct-react` (or -vue, -svelte) for component tests, or from `@playwright/test` for end-to-end tests.\n2.  Test function is given a `page` that is isolated from other tests, and `mount` that renders a component in this page. These are two of the [useful fixtures](api/class-fixtures) in Playwright Test.\n3.  Replace `render` with `mount` that returns a [component locator](locators).\n4.  Use locators created with [locator.locator()](api/class-locator#locator-locator) or [page.locator()](api/class-page#page-locator) to perform most of the actions.\n5.  Use [assertions](test-assertions) to verify the state.\n\n## Migrating queries[​](#migrating-queries \"Direct link to Migrating queries\")\n\nAll queries like `getBy...`, `findBy...`, `queryBy...` and their multi-element counterparts are replaced with `component.getBy...` locators. Locators always auto-wait and retry when needed, so you don't have to worry about choosing the right method. When you want to do a [list operation](locators#lists), e.g. assert a list of texts, Playwright automatically performs multi-element operations.\n\n## Replacing `waitFor`[​](#replacing-waitfor \"Direct link to replacing-waitfor\")\n\nPlaywright includes [assertions](test-assertions) that automatically wait for the condition, so you don't usually need an explicit `waitFor`/`waitForElementToBeRemoved` call.\n\n``` javascript\n// Testing Library\nawait waitFor(() => {\n  expect(getByText('the lion king')).toBeInTheDocument();\n});\nawait waitForElementToBeRemoved(() => queryByText('the mummy'));\n\n// Playwright\nawait expect(page.getByText('the lion king')).toBeVisible();\nawait expect(page.getByText('the mummy')).toBeHidden();\n```\n\nWhen you cannot find a suitable assertion, use [`expect.poll`](test-assertions#expectpoll) instead.\n\n``` javascript\nawait expect.poll(async () => {\n  const response = await page.request.get('https://api.example.com');\n  return response.status();\n}).toBe(200);\n```\n\n## Replacing `within`[​](#replacing-within \"Direct link to replacing-within\")\n\nYou can create a locator inside another locator with [locator.locator()](api/class-locator#locator-locator) method.\n\n``` javascript\n// Testing Library\nconst messages = document.getElementById('messages');\nconst helloMessage = within(messages).getByText('hello');\n\n// Playwright\nconst messages = component.getByTestId('messages');\nconst helloMessage = messages.getByText('hello');\n```\n\n## Playwright Test Super Powers[​](#playwright-test-super-powers \"Direct link to Playwright Test Super Powers\")\n\nOnce you're on Playwright Test, you get a lot!\n\n- Full zero-configuration TypeScript support\n- Run tests across **all web engines** (Chrome, Firefox, Safari) on **any popular operating system** (Windows, macOS, Ubuntu)\n- Full support for multiple origins, [(i)frames](api/class-frame), [tabs and contexts](pages)\n- Run tests in isolation in parallel across multiple browsers\n- Built-in test [artifact collection](test-use-options#recording-options)\n\nYou also get all these ✨ awesome tools ✨ that come bundled with Playwright Test:\n\n- [Visual Studio Code integration](getting-started-vscode)\n- [UI mode](test-ui-mode) for debugging tests with a time travel experience complete with watch mode.\n- [Playwright Inspector](debug#playwright-inspector)\n- [Playwright Test Code generation](codegen-intro)\n- [Playwright Tracing](trace-viewer) for post-mortem debugging\n\n## Further Reading[​](#further-reading \"Direct link to Further Reading\")\n\nLearn more about Playwright Test runner:\n\n- [Getting Started](index)\n- [Experimental Component Testing](test-components)\n- [Locators](locators)\n- [Assertions](test-assertions)\n- [Auto-waiting](actionability)\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/testing-library](https://playwright.dev/docs/testing-library)"
- name: Mock APIs
  id: mock
  summary: Web APIs are usually implemented as HTTP endpoints
  description: "# Mock APIs\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nWeb APIs are usually implemented as HTTP endpoints. Playwright provides APIs to **mock** and **modify** network traffic, both HTTP and HTTPS. Any requests that a page does, including [XHRs](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) and [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) requests, can be tracked, modified and mocked. With Playwright you can also mock using HAR files that contain multiple network requests made by the page.\n\n## Mock API requests[​](#mock-api-requests \"Direct link to Mock API requests\")\n\nThe following code will intercept all the calls to `*/**/api/v1/fruits` and will return a custom response instead. No requests to the API will be made. The test goes to the URL that uses the mocked route and asserts that mock data is present on the page.\n\n``` javascript\ntest(\"mocks a fruit and doesn't call api\", async ({ page }) => {\n  // Mock the api call before navigating\n  await page.route('*/**/api/v1/fruits', async route => {\n    const json = [{ name: 'Strawberry', id: 21 }];\n    await route.fulfill({ json });\n  });\n  // Go to the page\n  await page.goto('https://demo.playwright.dev/api-mocking');\n\n  // Assert that the Strawberry fruit is visible\n  await expect(page.getByText('Strawberry')).toBeVisible();\n});\n```\n\nYou can see from the trace of the example test that the API was never called, it was however fulfilled with the mock data.\n\nRead more about [advanced networking](network).\n\n## Modify API responses[​](#modify-api-responses \"Direct link to Modify API responses\")\n\nSometimes, it is essential to make an API request, but the response needs to be patched to allow for reproducible testing. In that case, instead of mocking the request, one can perform the request and fulfill it with the modified response.\n\nIn the example below we intercept the call to the fruit API and add a new fruit called 'Loquat', to the data. We then go to the url and assert that this data is there:\n\n``` javascript\ntest('gets the json from api and adds a new fruit', async ({ page }) => {\n  // Get the response and add to it\n  await page.route('*/**/api/v1/fruits', async route => {\n    const response = await route.fetch();\n    const json = await response.json();\n    json.push({ name: 'Loquat', id: 100 });\n    // Fulfill using the original response, while patching the response body\n    // with the given JSON object.\n    await route.fulfill({ response, json });\n  });\n\n  // Go to the page\n  await page.goto('https://demo.playwright.dev/api-mocking');\n\n  // Assert that the new fruit is visible\n  await expect(page.getByText('Loquat', { exact: true })).toBeVisible();\n});\n```\n\nIn the trace of our test we can see that the API was called and the response was modified.\n\nBy inspecting the response we can see that our new fruit was added to the list.\n\nRead more about [advanced networking](network).\n\n## Mocking with HAR files[​](#mocking-with-har-files \"Direct link to Mocking with HAR files\")\n\nA HAR file is an [HTTP Archive](http://www.softwareishard.com/blog/har-12-spec/) file that contains a record of all the network requests that are made when a page is loaded. It contains information about the request and response headers, cookies, content, timings, and more. You can use HAR files to mock network requests in your tests. You'll need to:\n\n1.  Record a HAR file.\n2.  Commit the HAR file alongside the tests.\n3.  Route requests using the saved HAR files in the tests.\n\n### Recording a HAR file[​](#recording-a-har-file \"Direct link to Recording a HAR file\")\n\nTo record a HAR file we use [page.routeFromHAR()](api/class-page#page-route-from-har) or [browserContext.routeFromHAR()](api/class-browsercontext#browser-context-route-from-har) method. This method takes in the path to the HAR file and an optional object of options. The options object can contain the URL so that only requests with the URL matching the specified glob pattern will be served from the HAR File. If not specified, all requests will be served from the HAR file.\n\nSetting `update` option to true will create or update the HAR file with the actual network information instead of serving the requests from the HAR file. Use it when creating a test to populate the HAR with real data.\n\n``` javascript\ntest('records or updates the HAR file', async ({ page }) => {\n  // Get the response from the HAR file\n  await page.routeFromHAR('./hars/fruit.har', {\n    url: '*/**/api/v1/fruits',\n    update: true,\n  });\n\n  // Go to the page\n  await page.goto('https://demo.playwright.dev/api-mocking');\n\n  // Assert that the fruit is visible\n  await expect(page.getByText('Strawberry')).toBeVisible();\n});\n```\n\n### Modifying a HAR file[​](#modifying-a-har-file \"Direct link to Modifying a HAR file\")\n\nOnce you have recorded a HAR file you can modify it by opening the hashed .txt file inside your 'hars' folder and editing the JSON. This file should be committed to your source control. Anytime you run this test with `update: true` it will update your HAR file with the request from the API.\n\n``` javascript\n[\n  {\n    \"name\": \"Playwright\",\n    \"id\": 100\n  },\n  // ... other fruits\n]\n```\n\n### Replaying from HAR[​](#replaying-from-har \"Direct link to Replaying from HAR\")\n\nNow that you have the HAR file recorded and modified the mock data, it can be used to serve matching responses in the test. For this, just turn off or simply remove the `update` option. This will run the test against the HAR file instead of hitting the API.\n\n``` javascript\ntest('gets the json from HAR and checks the new fruit has been added', async ({ page }) => {\n  // Replay API requests from HAR.\n  // Either use a matching response from the HAR,\n  // or abort the request if nothing matches.\n  await page.routeFromHAR('./hars/fruit.har', {\n    url: '*/**/api/v1/fruits',\n    update: false,\n  });\n\n  // Go to the page\n  await page.goto('https://demo.playwright.dev/api-mocking');\n\n  // Assert that the Playwright fruit is visible\n  await expect(page.getByText('Playwright', { exact: true })).toBeVisible();\n});\n```\n\nIn the trace of our test we can see that the route was fulfilled from the HAR file and the API was not called.\n\nIf we inspect the response we can see our new fruit was added to the JSON, which was done by manually updating the hashed `.txt` file inside the `hars` folder.\n\nHAR replay matches URL and HTTP method strictly. For POST requests, it also matches POST payloads strictly. If multiple recordings match a request, the one with the most matching headers is picked. An entry resulting in a redirect will be followed automatically.\n\nSimilar to when recording, if given HAR file name ends with `.zip`, it is considered an archive containing the HAR file along with network payloads stored as separate entries. You can also extract this archive, edit payloads or HAR log manually and point to the extracted har file. All the payloads will be resolved relative to the extracted har file on the file system.\n\n#### Recording HAR with CLI[​](#recording-har-with-cli \"Direct link to Recording HAR with CLI\")\n\nWe recommend the `update` option to record HAR file for your test. However, you can also record the HAR with Playwright CLI.\n\nOpen the browser with Playwright CLI and pass `--save-har` option to produce a HAR file. Optionally, use `--save-har-glob` to only save requests you are interested in, for example API endpoints. If the har file name ends with `.zip`, artifacts are written as separate files and are all compressed into a single `zip`.\n\n``` javascript\n# Save API requests from example.com as \"example.har\" archive.\nnpx playwright open --save-har=example.har --save-har-glob=\"**/api/**\" https://example.com\n```\n\nRead more about [advanced networking](network).\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/mock](https://playwright.dev/docs/mock)"
- name: Mock browser APIs
  id: mock-browser-apis
  summary: Playwright provides native support for most of the browser features
  description: "# Mock browser APIs\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright provides native support for most of the browser features. However, there are some experimental APIs and APIs which are not (yet) fully supported by all browsers. Playwright usually doesn't provide dedicated automation APIs in such cases. You can use mocks to test the behavior of your application in such cases. This guide gives a few examples.\n\n## Introduction[​](#introduction-1 \"Direct link to Introduction\")\n\nLet's consider a web app that uses [battery API](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getBattery) to show your device's battery status. We'll mock the battery API and check that the page correctly displays the battery status.\n\n## Creating mocks[​](#creating-mocks \"Direct link to Creating mocks\")\n\nSince the page may be calling the API very early while loading it's important to setup all the mocks before the page started loading. The easiest way to achieve that is to call [page.addInitScript()](api/class-page#page-add-init-script):\n\n``` javascript\nawait page.addInitScript(() => {\n  const mockBattery = {\n    level: 0.75,\n    charging: true,\n    chargingTime: 1800,\n    dischargingTime: Infinity,\n    addEventListener: () => { }\n  };\n  // Override the method to always return mock battery info.\n  window.navigator.getBattery = async () => mockBattery;\n});\n```\n\nOnce this is done you can navigate the page and check its UI state:\n\n``` javascript\n// Configure mock API before each test.\ntest.beforeEach(async ({ page }) => {\n  await page.addInitScript(() => {\n    const mockBattery = {\n      level: 0.90,\n      charging: true,\n      chargingTime: 1800, // seconds\n      dischargingTime: Infinity,\n      addEventListener: () => { }\n    };\n    // Override the method to always return mock battery info.\n    window.navigator.getBattery = async () => mockBattery;\n  });\n});\n\ntest('show battery status', async ({ page }) => {\n  await page.goto('/');\n  await expect(page.locator('.battery-percentage')).toHaveText('90%');\n  await expect(page.locator('.battery-status')).toHaveText('Adapter');\n  await expect(page.locator('.battery-fully')).toHaveText('00:30');\n});\n```\n\n## Mocking read-only APIs[​](#mocking-read-only-apis \"Direct link to Mocking read-only APIs\")\n\nSome APIs are read-only so you won't be able to assign to a navigator property. For example,\n\n``` javascript\n// Following line will have no effect.\nnavigator.cookieEnabled = true;\n```\n\nHowever, if the property is [configurable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#configurable), you can still override it using the plain JavaScript:\n\n``` javascript\nawait page.addInitScript(() => {\n  Object.defineProperty(Object.getPrototypeOf(navigator), 'cookieEnabled', { value: false });\n});\n```\n\n## Verifying API calls[​](#verifying-api-calls \"Direct link to Verifying API calls\")\n\nSometimes it is useful to check if the page made all expected APIs calls. You can record all API method invocations and then compare them with golden result. [page.exposeFunction()](api/class-page#page-expose-function) may come in handy for passing message from the page back to the test code:\n\n``` javascript\ntest('log battery calls', async ({ page }) => {\n  const log = [];\n  // Expose function for pushing messages to the Node.js script.\n  await page.exposeFunction('logCall', msg => log.push(msg));\n  await page.addInitScript(() => {\n    const mockBattery = {\n      level: 0.75,\n      charging: true,\n      chargingTime: 1800,\n      dischargingTime: Infinity,\n      // Log addEventListener calls.\n      addEventListener: (name, cb) => logCall(`addEventListener:${name}`)\n    };\n    // Override the method to always return mock battery info.\n    window.navigator.getBattery = async () => {\n      logCall('getBattery');\n      return mockBattery;\n    };\n  });\n\n  await page.goto('/');\n  await expect(page.locator('.battery-percentage')).toHaveText('75%');\n\n  // Compare actual calls with golden.\n  expect(log).toEqual([\n    'getBattery',\n    'addEventListener:chargingchange',\n    'addEventListener:levelchange'\n  ]);\n});\n```\n\n## Updating mock[​](#updating-mock \"Direct link to Updating mock\")\n\nTo test that the app correctly reflects battery status updates it's important to make sure that the mock battery object fires same events that the browser implementation would. The following test demonstrates how to achieve that:\n\n``` javascript\ntest('update battery status (no golden)', async ({ page }) => {\n  await page.addInitScript(() => {\n    // Mock class that will notify corresponding listeners when battery status changes.\n    class BatteryMock {\n      level = 0.10;\n      charging = false;\n      chargingTime = 1800;\n      dischargingTime = Infinity;\n      _chargingListeners = [];\n      _levelListeners = [];\n      addEventListener(eventName, listener) {\n        if (eventName === 'chargingchange')\n          this._chargingListeners.push(listener);\n        if (eventName === 'levelchange')\n          this._levelListeners.push(listener);\n      }\n      // Will be called by the test.\n      _setLevel(value) {\n        this.level = value;\n        this._levelListeners.forEach(cb => cb());\n      }\n      _setCharging(value) {\n        this.charging = value;\n        this._chargingListeners.forEach(cb => cb());\n      }\n    }\n    const mockBattery = new BatteryMock();\n    // Override the method to always return mock battery info.\n    window.navigator.getBattery = async () => mockBattery;\n    // Save the mock object on window for easier access.\n    window.mockBattery = mockBattery;\n  });\n\n  await page.goto('/');\n  await expect(page.locator('.battery-percentage')).toHaveText('10%');\n\n  // Update level to 27.5%\n  await page.evaluate(() => window.mockBattery._setLevel(0.275));\n  await expect(page.locator('.battery-percentage')).toHaveText('27.5%');\n  await expect(page.locator('.battery-status')).toHaveText('Battery');\n\n  // Emulate connected adapter\n  await page.evaluate(() => window.mockBattery._setCharging(true));\n  await expect(page.locator('.battery-status')).toHaveText('Adapter');\n  await expect(page.locator('.battery-fully')).toHaveText('00:30');\n});\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/mock-browser-apis](https://playwright.dev/docs/mock-browser-apis)"
- name: Mouse
  id: api/class-mouse
  summary: The Mouse class operates in main-frame CSS pixels relative to the top-left corner of the viewport
  description: "# Mouse\n\nThe Mouse class operates in main-frame CSS pixels relative to the top-left corner of the viewport.\n\nEvery `page` object has its own Mouse, accessible with [page.mouse](class-page#page-mouse).\n\n``` javascript\n// Using ‘page.mouse’ to trace a 100x100 square.\nawait page.mouse.move(0, 0);\nawait page.mouse.down();\nawait page.mouse.move(0, 100);\nawait page.mouse.move(100, 100);\nawait page.mouse.move(100, 0);\nawait page.mouse.move(0, 0);\nawait page.mouse.up();\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### click[​](#mouse-click \"Direct link to click\")\n\nAdded before v1.9\n\nShortcut for [mouse.move()](class-mouse#mouse-move), [mouse.down()](class-mouse#mouse-down), [mouse.up()](class-mouse#mouse-up).\n\n**Usage**\n\n``` javascript\nawait mouse.click(x, y);\nawait mouse.click(x, y, options);\n```\n\n**Arguments**\n\n- `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  X coordinate relative to the main frame's viewport in CSS pixels.\n\n- `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Y coordinate relative to the main frame's viewport in CSS pixels.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `button` \"left\" \\| \"right\" \\| \"middle\" *(optional)*\n\n    Defaults to `left`.\n\n  - `clickCount` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail \"UIEvent.detail\").\n\n  - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### dblclick[​](#mouse-dblclick \"Direct link to dblclick\")\n\nAdded before v1.9\n\nShortcut for [mouse.move()](class-mouse#mouse-move), [mouse.down()](class-mouse#mouse-down), [mouse.up()](class-mouse#mouse-up), [mouse.down()](class-mouse#mouse-down) and [mouse.up()](class-mouse#mouse-up).\n\n**Usage**\n\n``` javascript\nawait mouse.dblclick(x, y);\nawait mouse.dblclick(x, y, options);\n```\n\n**Arguments**\n\n- `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  X coordinate relative to the main frame's viewport in CSS pixels.\n\n- `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Y coordinate relative to the main frame's viewport in CSS pixels.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `button` \"left\" \\| \"right\" \\| \"middle\" *(optional)*\n\n    Defaults to `left`.\n\n  - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### down[​](#mouse-down \"Direct link to down\")\n\nAdded before v1.9\n\nDispatches a `mousedown` event.\n\n**Usage**\n\n``` javascript\nawait mouse.down();\nawait mouse.down(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `button` \"left\" \\| \"right\" \\| \"middle\" *(optional)*\n\n    Defaults to `left`.\n\n  - `clickCount` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail \"UIEvent.detail\").\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### move[​](#mouse-move \"Direct link to move\")\n\nAdded before v1.9\n\nDispatches a `mousemove` event.\n\n**Usage**\n\n``` javascript\nawait mouse.move(x, y);\nawait mouse.move(x, y, options);\n```\n\n**Arguments**\n\n- `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  X coordinate relative to the main frame's viewport in CSS pixels.\n\n- `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Y coordinate relative to the main frame's viewport in CSS pixels.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `steps` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Defaults to 1. Sends intermediate `mousemove` events.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### up[​](#mouse-up \"Direct link to up\")\n\nAdded before v1.9\n\nDispatches a `mouseup` event.\n\n**Usage**\n\n``` javascript\nawait mouse.up();\nawait mouse.up(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `button` \"left\" \\| \"right\" \\| \"middle\" *(optional)*\n\n    Defaults to `left`.\n\n  - `clickCount` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail \"UIEvent.detail\").\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### wheel[​](#mouse-wheel \"Direct link to wheel\")\n\nDispatches a `wheel` event. This method is usually used to manually scroll the page. See [scrolling](../input#scrolling) for alternative ways to scroll.\n\n> note\n>\n> Wheel events may cause scrolling if they are not handled, and this method does not wait for the scrolling to finish before returning.\n\n**Usage**\n\n``` javascript\nawait mouse.wheel(deltaX, deltaY);\n```\n\n**Arguments**\n\n- `deltaX` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Pixels to scroll horizontally.\n\n- `deltaY` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Pixels to scroll vertically.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-mouse](https://playwright.dev/docs/api/class-mouse)"
- name: mouse.click
  id: api/class-mouse#mouse-click
  summary: Shortcut for mouse.move(), mouse.down(), mouse.up()
  belongs_to: Mouse
  description: |-
    ### click[​](#mouse-click "Direct link to click")

    Added before v1.9

    Shortcut for [mouse.move()](class-mouse#mouse-move), [mouse.down()](class-mouse#mouse-down), [mouse.up()](class-mouse#mouse-up).

    **Usage**

    ``` javascript
    await mouse.click(x, y);
    await mouse.click(x, y, options);
    ```

    **Arguments**

    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      X coordinate relative to the main frame's viewport in CSS pixels.

    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Y coordinate relative to the main frame's viewport in CSS pixels.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `button` "left" \| "right" \| "middle" *(optional)*

        Defaults to `left`.

      - `clickCount` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail "UIEvent.detail").

      - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>
- name: mouse.dblclick
  id: api/class-mouse#mouse-dblclick
  summary: Shortcut for mouse.move(), mouse.down(), mouse.up(), mouse.down() and mouse.up()
  belongs_to: Mouse
  description: |-
    ### dblclick[​](#mouse-dblclick "Direct link to dblclick")

    Added before v1.9

    Shortcut for [mouse.move()](class-mouse#mouse-move), [mouse.down()](class-mouse#mouse-down), [mouse.up()](class-mouse#mouse-up), [mouse.down()](class-mouse#mouse-down) and [mouse.up()](class-mouse#mouse-up).

    **Usage**

    ``` javascript
    await mouse.dblclick(x, y);
    await mouse.dblclick(x, y, options);
    ```

    **Arguments**

    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      X coordinate relative to the main frame's viewport in CSS pixels.

    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Y coordinate relative to the main frame's viewport in CSS pixels.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `button` "left" \| "right" \| "middle" *(optional)*

        Defaults to `left`.

      - `delay` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: mouse.down
  id: api/class-mouse#mouse-down
  summary: Dispatches a mousedown event
  belongs_to: Mouse
  description: |-
    ### down[​](#mouse-down "Direct link to down")

    Added before v1.9

    Dispatches a `mousedown` event.

    **Usage**

    ``` javascript
    await mouse.down();
    await mouse.down(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `button` "left" \| "right" \| "middle" *(optional)*

        Defaults to `left`.

      - `clickCount` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail "UIEvent.detail").

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: mouse.move
  id: api/class-mouse#mouse-move
  summary: Dispatches a mousemove event
  belongs_to: Mouse
  description: |-
    ### move[​](#mouse-move "Direct link to move")

    Added before v1.9

    Dispatches a `mousemove` event.

    **Usage**

    ``` javascript
    await mouse.move(x, y);
    await mouse.move(x, y, options);
    ```

    **Arguments**

    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      X coordinate relative to the main frame's viewport in CSS pixels.

    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Y coordinate relative to the main frame's viewport in CSS pixels.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `steps` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Defaults to 1. Sends intermediate `mousemove` events.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: mouse.up
  id: api/class-mouse#mouse-up
  summary: Dispatches a mouseup event
  belongs_to: Mouse
  description: |-
    ### up[​](#mouse-up "Direct link to up")

    Added before v1.9

    Dispatches a `mouseup` event.

    **Usage**

    ``` javascript
    await mouse.up();
    await mouse.up(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `button` "left" \| "right" \| "middle" *(optional)*

        Defaults to `left`.

      - `clickCount` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        defaults to 1. See [UIEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail "UIEvent.detail").

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: mouse.wheel
  id: api/class-mouse#mouse-wheel
  summary: Dispatches a wheel event
  belongs_to: Mouse
  description: "### wheel[​](#mouse-wheel \"Direct link to wheel\")\n\nDispatches a `wheel` event. This method is usually used to manually scroll the page. See [scrolling](../input#scrolling) for alternative ways to scroll.\n\n> note\n>\n> Wheel events may cause scrolling if they are not handled, and this method does not wait for the scrolling to finish before returning.\n\n**Usage**\n\n``` javascript\nawait mouse.wheel(deltaX, deltaY);\n```\n\n**Arguments**\n\n- `deltaX` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Pixels to scroll horizontally.\n\n- `deltaY` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Pixels to scroll vertically.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-mouse](https://playwright.dev/docs/api/class-mouse)"
- name: Navigations
  id: navigations
  summary: Playwright can navigate to URLs and handle navigations caused by the page interactions
  description: "# Navigations\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright can navigate to URLs and handle navigations caused by the page interactions.\n\n## Basic navigation[​](#basic-navigation \"Direct link to Basic navigation\")\n\nSimplest form of a navigation is opening a URL:\n\n``` javascript\n// Navigate the page\nawait page.goto('https://example.com');\n```\n\nThe code above loads the page and waits for the web page to fire the [load](https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event) event. The load event is fired when the whole page has loaded, including all dependent resources such as stylesheets, scripts, iframes, and images.\n\n> note\n>\n> If the page does a client-side redirect before `load`, [page.goto()](api/class-page#page-goto) will wait for the redirected page to fire the `load` event.\n\n## When is the page loaded?[​](#when-is-the-page-loaded \"Direct link to When is the page loaded?\")\n\nModern pages perform numerous activities after the `load` event was fired. They fetch data lazily, populate UI, load expensive resources, scripts and styles after the `load` event was fired. There is no way to tell that the page is `loaded`, it depends on the page, framework, etc. So when can you start interacting with it?\n\nIn Playwright you can interact with the page at any moment. It will automatically wait for the target elements to become [actionable](actionability).\n\n``` javascript\n// Navigate and click element\n// Click will auto-wait for the element\nawait page.goto('https://example.com');\nawait page.getByText('Example Domain').click();\n```\n\nFor the scenario above, Playwright will wait for the text to become visible, will wait for the rest of the actionability checks to pass for that element, and will click it.\n\nPlaywright operates as a very fast user - the moment it sees the button, it clicks it. In the general case, you don't need to worry about whether all the resources loaded, etc.\n\n## Hydration[​](#hydration \"Direct link to Hydration\")\n\nAt some point in time, you'll stumble upon a use case where Playwright performs an action, but nothing seemingly happens. Or you enter some text into the input field and it will disappear. The most probable reason behind that is a poor page [hydration](https://en.wikipedia.org/wiki/Hydration_(web_development)).\n\nWhen page is hydrated, first, a static version of the page is sent to the browser. Then the dynamic part is sent and the page becomes \"live\". As a very fast user, Playwright will start interacting with the page the moment it sees it. And if the button on a page is enabled, but the listeners have not yet been added, Playwright will do its job, but the click won't have any effect.\n\nA simple way to verify if your page suffers from a poor hydration is to open Chrome DevTools, pick \"Slow 3G\" network emulation in the Network panel and reload the page. Once you see the element of interest, interact with it. You'll see that the button clicks will be ignored and the entered text will be reset by the subsequent page load code. The right fix for this issue is to make sure that all the interactive controls are disabled until after the hydration, when the page is fully functional.\n\n## Waiting for navigation[​](#waiting-for-navigation \"Direct link to Waiting for navigation\")\n\nClicking an element could trigger multiple navigations. In these cases, it is recommended to explicitly [page.waitForURL()](api/class-page#page-wait-for-url) to a specific url.\n\n``` javascript\nawait page.getByText('Click me').click();\nawait page.waitForURL('**/login');\n```\n\n## Navigation events[​](#navigation-events \"Direct link to Navigation events\")\n\nPlaywright splits the process of showing a new document in a page into **navigation** and **loading**.\n\n**Navigation starts** by changing the page URL or by interacting with the page (e.g., clicking a link). The navigation intent may be canceled, for example, on hitting an unresolved DNS address or transformed into a file download.\n\n**Navigation is committed** when the response headers have been parsed and session history is updated. Only after the navigation succeeds (is committed), the page starts **loading** the document.\n\n**Loading** covers getting the remaining response body over the network, parsing, executing the scripts and firing load events:\n\n- [page.url()](api/class-page#page-url) is set to the new url\n- document content is loaded over network and parsed\n- [page.on('domcontentloaded')](api/class-page#page-event-dom-content-loaded) event is fired\n- page executes some scripts and loads resources like stylesheets and images\n- [page.on('load')](api/class-page#page-event-load) event is fired\n- page executes dynamically loaded scripts\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/navigations](https://playwright.dev/docs/navigations)"
- name: Network
  id: network
  summary: Playwright provides APIs to monitor and modify browser network traffic, both HTTP and HTTPS
  description: "# Network\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright provides APIs to **monitor** and **modify** browser network traffic, both HTTP and HTTPS. Any requests that a page does, including [XHRs](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) and [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) requests, can be tracked, modified and handled.\n\n## Mock APIs[​](#mock-apis \"Direct link to Mock APIs\")\n\nCheck out our [API mocking guide](mock) to learn more on how to\n\n- mock API requests and never hit the API\n- perform the API request and modify the response\n- use HAR files to mock network requests.\n\n## Network mocking[​](#network-mocking \"Direct link to Network mocking\")\n\nYou don't have to configure anything to mock network requests. Just define a custom [Route](api/class-route \"Route\") that mocks network for a browser context.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.beforeEach(async ({ context }) => {\n  // Block any css requests for each test in this file.\n  await context.route(/.css$/, route => route.abort());\n});\n\ntest('loads page without css', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n  // ... test goes here\n});\n```\n\nAlternatively, you can use [page.route()](api/class-page#page-route) to mock network in a single page.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('loads page without images', async ({ page }) => {\n  // Block png and jpeg images.\n  await page.route(/(png|jpeg)$/, route => route.abort());\n\n  await page.goto('https://playwright.dev');\n  // ... test goes here\n});\n```\n\n## HTTP Authentication[​](#http-authentication \"Direct link to HTTP Authentication\")\n\nPerform HTTP Authentication.\n\n- Test\n- Library\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    httpCredentials: {\n      username: 'bill',\n      password: 'pa55w0rd',\n    }\n  }\n});\n```\n\n``` javascript\nconst context = await browser.newContext({\n  httpCredentials: {\n    username: 'bill',\n    password: 'pa55w0rd',\n  },\n});\nconst page = await context.newPage();\nawait page.goto('https://example.com');\n```\n\n## HTTP Proxy[​](#http-proxy \"Direct link to HTTP Proxy\")\n\nYou can configure pages to load over the HTTP(S) proxy or SOCKSv5. Proxy can be either set globally for the entire browser, or for each browser context individually.\n\nYou can optionally specify username and password for HTTP(S) proxy, you can also specify hosts to bypass proxy for.\n\nHere is an example of a global proxy:\n\n- Test\n- Library\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    proxy: {\n      server: 'http://myproxy.com:3128',\n      username: 'usr',\n      password: 'pwd'\n    }\n  }\n});\n```\n\n``` javascript\nconst browser = await chromium.launch({\n  proxy: {\n    server: 'http://myproxy.com:3128',\n    username: 'usr',\n    password: 'pwd'\n  }\n});\n```\n\nWhen specifying proxy for each context individually, **Chromium on Windows** needs a hint that proxy will be set. This is done via passing a non-empty proxy server to the browser itself. Here is an example of a context-specific proxy:\n\n- Test\n- Library\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    launchOptions: {\n      // Browser proxy option is required for Chromium on Windows.\n      proxy: { server: 'per-context' }\n    },\n    proxy: {\n      server: 'http://myproxy.com:3128',\n    }\n  }\n});\n```\n\n``` javascript\nconst browser = await chromium.launch({\n  // Browser proxy option is required for Chromium on Windows.\n  proxy: { server: 'per-context' }\n});\nconst context = await browser.newContext({\n  proxy: { server: 'http://myproxy.com:3128' }\n});\n```\n\n## Network events[​](#network-events \"Direct link to Network events\")\n\nYou can monitor all the [Request](api/class-request \"Request\")s and [Response](api/class-response \"Response\")s:\n\n``` javascript\n// Subscribe to 'request' and 'response' events.\npage.on('request', request => console.log('>>', request.method(), request.url()));\npage.on('response', response => console.log('<<', response.status(), response.url()));\n\nawait page.goto('https://example.com');\n```\n\nOr wait for a network response after the button click with [page.waitForResponse()](api/class-page#page-wait-for-response):\n\n``` javascript\n// Use a glob URL pattern. Note no await.\nconst responsePromise = page.waitForResponse('**/api/fetch_data');\nawait page.getByText('Update').click();\nconst response = await responsePromise;\n```\n\n#### Variations[​](#variations \"Direct link to Variations\")\n\nWait for [Response](api/class-response \"Response\")s with [page.waitForResponse()](api/class-page#page-wait-for-response)\n\n``` javascript\n// Use a RegExp. Note no await.\nconst responsePromise = page.waitForResponse(/\\.jpeg$/);\nawait page.getByText('Update').click();\nconst response = await responsePromise;\n\n// Use a predicate taking a Response object. Note no await.\nconst responsePromise = page.waitForResponse(response => response.url().includes(token));\nawait page.getByText('Update').click();\nconst response = await responsePromise;\n```\n\n## Handle requests[​](#handle-requests \"Direct link to Handle requests\")\n\n``` javascript\nawait page.route('**/api/fetch_data', route => route.fulfill({\n  status: 200,\n  body: testData,\n}));\nawait page.goto('https://example.com');\n```\n\nYou can mock API endpoints via handling the network requests in your Playwright script.\n\n#### Variations[​](#variations-1 \"Direct link to Variations\")\n\nSet up route on the entire browser context with [browserContext.route()](api/class-browsercontext#browser-context-route) or page with [page.route()](api/class-page#page-route). It will apply to popup windows and opened links.\n\n``` javascript\nawait browserContext.route('**/api/login', route => route.fulfill({\n  status: 200,\n  body: 'accept',\n}));\nawait page.goto('https://example.com');\n```\n\n## Modify requests[​](#modify-requests \"Direct link to Modify requests\")\n\n``` javascript\n// Delete header\nawait page.route('**/*', async route => {\n  const headers = route.request().headers();\n  delete headers['X-Secret'];\n  await route.continue({ headers });\n});\n\n// Continue requests as POST.\nawait page.route('**/*', route => route.continue({ method: 'POST' }));\n```\n\nYou can continue requests with modifications. Example above removes an HTTP header from the outgoing requests.\n\n## Abort requests[​](#abort-requests \"Direct link to Abort requests\")\n\nYou can abort requests using [page.route()](api/class-page#page-route) and [route.abort()](api/class-route#route-abort).\n\n``` javascript\nawait page.route('**/*.{png,jpg,jpeg}', route => route.abort());\n\n// Abort based on the request type\nawait page.route('**/*', route => {\n  return route.request().resourceType() === 'image' ? route.abort() : route.continue();\n});\n```\n\n## Modify responses[​](#modify-responses \"Direct link to Modify responses\")\n\nTo modify a response use [APIRequestContext](api/class-apirequestcontext \"APIRequestContext\") to get the original response and then pass the response to [route.fulfill()](api/class-route#route-fulfill). You can override individual fields on the response via options:\n\n``` javascript\nawait page.route('**/title.html', async route => {\n  // Fetch original response.\n  const response = await route.fetch();\n  // Add a prefix to the title.\n  let body = await response.text();\n  body = body.replace('<title>', '<title>My prefix:');\n  await route.fulfill({\n    // Pass all fields from the response.\n    response,\n    // Override response body.\n    body,\n    // Force content type to be html.\n    headers: {\n      ...response.headers(),\n      'content-type': 'text/html'\n    }\n  });\n});\n```\n\n## WebSockets[​](#websockets \"Direct link to WebSockets\")\n\nPlaywright supports [WebSockets](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API) inspection out of the box. Every time a WebSocket is created, the [page.on('websocket')](api/class-page#page-event-web-socket) event is fired. This event contains the [WebSocket](api/class-websocket \"WebSocket\") instance for further web socket frames inspection:\n\n``` javascript\npage.on('websocket', ws => {\n  console.log(`WebSocket opened: ${ws.url()}>`);\n  ws.on('framesent', event => console.log(event.payload));\n  ws.on('framereceived', event => console.log(event.payload));\n  ws.on('close', () => console.log('WebSocket closed'));\n});\n```\n\n## Missing Network Events and Service Workers[​](#missing-network-events-and-service-workers \"Direct link to Missing Network Events and Service Workers\")\n\nPlaywright's built-in [browserContext.route()](api/class-browsercontext#browser-context-route) and [page.route()](api/class-page#page-route) allow your tests to natively route requests and perform mocking and interception.\n\n1.  If you're using Playwright's native [browserContext.route()](api/class-browsercontext#browser-context-route) and [page.route()](api/class-page#page-route), and it appears network events are missing, disable Service Workers by setting `Browser.newContext.serviceWorkers` to `'block'`.\n2.  It might be that you are using a mock tool such as Mock Service Worker (MSW). While this tool works out of the box for mocking responses, it adds its own Service Worker that takes over the network requests, hence making them invisible to [browserContext.route()](api/class-browsercontext#browser-context-route) and [page.route()](api/class-page#page-route). If you are interested in both network testing and mocking, consider using built-in [browserContext.route()](api/class-browsercontext#browser-context-route) and [page.route()](api/class-page#page-route) for [response mocking](#handle-requests).\n3.  If you're interested in not solely using Service Workers for testing and network mocking, but in routing and listening for requests made by Service Workers themselves, please see [this experimental feature](https://github.com/microsoft/playwright/issues/15684).\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/network](https://playwright.dev/docs/network)"
- name: Other locators
  id: other-locators
  summary: Check out the main locators guide for most common and recommended locators
  description: "# Other locators\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\n> note\n>\n> Check out the main [locators guide](locators) for most common and recommended locators.\n\nIn addition to recommended locators like [page.getByRole()](api/class-page#page-get-by-role) and [page.getByText()](api/class-page#page-get-by-text), Playwright supports a variety of other locators described in this guide.\n\n## CSS locator[​](#css-locator \"Direct link to CSS locator\")\n\n> note\n>\n> We recommend prioritizing [user-visible locators](locators#quick-guide) like text or accessible role instead of using CSS that is tied to the implementation and could break when the page changes.\n\nPlaywright can locate an element by CSS selector.\n\n``` javascript\nawait page.locator('css=button').click();\n```\n\nPlaywright augments standard CSS selectors in two ways:\n\n- CSS selectors pierce open shadow DOM.\n- Playwright adds custom pseudo-classes like `:visible`, `:has-text()`, `:has()`, `:is()`, `:nth-match()` and more.\n\n### CSS: matching by text[​](#css-matching-by-text \"Direct link to CSS: matching by text\")\n\nPlaywright include a number of CSS pseudo-classes to match elements by their text content.\n\n- `article:has-text(\"Playwright\")` - the `:has-text()` matches any element containing specified text somewhere inside, possibly in a child or a descendant element. Matching is case-insensitive, trims whitespace and searches for a substring.\n\n  For example, `article:has-text(\"Playwright\")` matches `<article><div>Playwright</div></article>`.\n\n  Note that `:has-text()` should be used together with other CSS specifiers, otherwise it will match all the elements containing specified text, including the `<body>`.\n\n  ``` javascript\n  // Wrong, will match many elements including <body>\n  await page.locator(':has-text(\"Playwright\")').click();\n  // Correct, only matches the <article> element\n  await page.locator('article:has-text(\"Playwright\")').click();\n  ```\n\n- `#nav-bar :text(\"Home\")` - the `:text()` pseudo-class matches the smallest element containing specified text. Matching is case-insensitive, trims whitespace and searches for a substring.\n\n  For example, this will find an element with text \"Home\" somewhere inside the `#nav-bar` element:\n\n  ``` javascript\n  await page.locator('#nav-bar :text(\"Home\")').click();\n  ```\n\n- `#nav-bar :text-is(\"Home\")` - the `:text-is()` pseudo-class matches the smallest element with exact text. Exact matching is case-sensitive, trims whitespace and searches for the full string.\n\n  For example, `:text-is(\"Log\")` does not match `<button>Log in</button>` because `<button>` contains a single text node `\"Log in\"` that is not equal to `\"Log\"`. However, `:text-is(\"Log\")` matches `<button> Log <span>in</span></button>`, because `<button>` contains a text node `\" Log \"`.\n\n  Similarly, `:text-is(\"Download\")` will not match `<button>download</button>` because it is case-sensitive.\n\n- `#nav-bar :text-matches(\"reg?ex\", \"i\")` - the `:text-matches()` pseudo-class matches the smallest element with text content matching the [JavaScript-like regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp).\n\n  For example, `:text-matches(\"Log\\s*in\", \"i\")` matches `<button>Login</button>` and `<button>log IN</button>`.\n\n> note\n>\n> Text matching always normalizes whitespace. For example, it turns multiple spaces into one, turns line breaks into spaces and ignores leading and trailing whitespace.\n\n> note\n>\n> Input elements of the type `button` and `submit` are matched by their `value` instead of text content. For example, `:text(\"Log in\")` matches `<input type=button value=\"Log in\">`.\n\n### CSS: matching only visible elements[​](#css-matching-only-visible-elements \"Direct link to CSS: matching only visible elements\")\n\nPlaywright supports the `:visible` pseudo class in CSS selectors. For example, `css=button` matches all the buttons on the page, while `css=button:visible` only matches visible buttons. This is useful to distinguish elements that are very similar but differ in visibility.\n\nConsider a page with two buttons, first invisible and second visible.\n\n``` html\n<button style='display: none'>Invisible</button>\n<button>Visible</button>\n```\n\n- This will find both buttons and throw a [strictness](locators#strictness) violation error:\n\n  ``` javascript\n  await page.locator('button').click();\n  ```\n\n- This will only find a second button, because it is visible, and then click it.\n\n  ``` javascript\n  await page.locator('button:visible').click();\n  ```\n\n### CSS: elements that contain other elements[​](#css-elements-that-contain-other-elements \"Direct link to CSS: elements that contain other elements\")\n\nThe `:has()` pseudo-class is an [experimental CSS pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/:has). It returns an element if any of the selectors passed as parameters relative to the `:scope` of the given element match at least one element.\n\nFollowing snippet returns text content of an `<article>` element that has a `<div class=promo>` inside.\n\n``` javascript\nawait page.locator('article:has(div.promo)').textContent();\n```\n\n### CSS: elements matching one of the conditions[​](#css-elements-matching-one-of-the-conditions \"Direct link to CSS: elements matching one of the conditions\")\n\nComma-separated list of CSS selectors will match all elements that can be selected by one of the selectors in that list.\n\n``` javascript\n// Clicks a <button> that has either a \"Log in\" or \"Sign in\" text.\nawait page.locator('button:has-text(\"Log in\"), button:has-text(\"Sign in\")').click();\n```\n\nThe `:is()` pseudo-class is an [experimental CSS pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/:is) that may be useful for specifying a list of extra conditions on an element.\n\n### CSS: matching elements based on layout[​](#css-matching-elements-based-on-layout \"Direct link to CSS: matching elements based on layout\")\n\n> note\n>\n> Matching based on layout may produce unexpected results. For example, a different element could be matched when layout changes by one pixel.\n\nSometimes, it is hard to come up with a good selector to the target element when it lacks distinctive features. In this case, using Playwright layout CSS pseudo-classes could help. These can be combined with regular CSS to pinpoint one of the multiple choices.\n\nFor example, `input:right-of(:text(\"Password\"))` matches an input field that is to the right of text \"Password\" - useful when the page has multiple inputs that are hard to distinguish between each other.\n\nNote that layout pseudo-classes are useful in addition to something else, like `input`. If you use a layout pseudo-class alone, like `:right-of(:text(\"Password\"))`, most likely you'll get not the input you are looking for, but some empty element in between the text and the target input.\n\nLayout pseudo-classes use [bounding client rect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect) to compute distance and relative position of the elements.\n\n- `:right-of(div > button)` - Matches elements that are to the right of any element matching the inner selector, at any vertical position.\n- `:left-of(div > button)` - Matches elements that are to the left of any element matching the inner selector, at any vertical position.\n- `:above(div > button)` - Matches elements that are above any of the elements matching the inner selector, at any horizontal position.\n- `:below(div > button)` - Matches elements that are below any of the elements matching the inner selector, at any horizontal position.\n- `:near(div > button)` - Matches elements that are near (within 50 CSS pixels) any of the elements matching the inner selector.\n\nNote that resulting matches are sorted by their distance to the anchor element, so you can use [locator.first()](api/class-locator#locator-first) to pick the closest one. This is only useful if you have something like a list of similar elements, where the closest is obviously the right one. However, using [locator.first()](api/class-locator#locator-first) in other cases most likely won't work as expected - it will not target the element you are searching for, but some other element that happens to be the closest like a random empty `<div>`, or an element that is scrolled out and is not currently visible.\n\n``` javascript\n// Fill an input to the right of \"Username\".\nawait page.locator('input:right-of(:text(\"Username\"))').fill('value');\n\n// Click a button near the promo card.\nawait page.locator('button:near(.promo-card)').click();\n\n// Click the radio input in the list closest to the \"Label 3\".\nawait page.locator('[type=radio]:left-of(:text(\"Label 3\"))').first().click();\n```\n\nAll layout pseudo-classes support optional maximum pixel distance as the last argument. For example `button:near(:text(\"Username\"), 120)` matches a button that is at most 120 CSS pixels away from the element with the text \"Username\".\n\n### CSS: pick n-th match from the query result[​](#css-pick-n-th-match-from-the-query-result \"Direct link to CSS: pick n-th match from the query result\")\n\n> note\n>\n> It is usually possible to distinguish elements by some attribute or text content, which is more resilient to page changes.\n\nSometimes page contains a number of similar elements, and it is hard to select a particular one. For example:\n\n``` html\n<section> <button>Buy</button> </section>\n<article><div> <button>Buy</button> </div></article>\n<div><div> <button>Buy</button> </div></div>\n```\n\nIn this case, `:nth-match(:text(\"Buy\"), 3)` will select the third button from the snippet above. Note that index is one-based.\n\n``` javascript\n// Click the third \"Buy\" button\nawait page.locator(':nth-match(:text(\"Buy\"), 3)').click();\n```\n\n`:nth-match()` is also useful to wait until a specified number of elements appear, using [locator.waitFor()](api/class-locator#locator-wait-for).\n\n``` javascript\n// Wait until all three buttons are visible\nawait page.locator(':nth-match(:text(\"Buy\"), 3)').waitFor();\n```\n\n> note\n>\n> Unlike [`:nth-child()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-child), elements do not have to be siblings, they could be anywhere on the page. In the snippet above, all three buttons match `:text(\"Buy\")` selector, and `:nth-match()` selects the third button.\n\n## N-th element locator[​](#n-th-element-locator \"Direct link to N-th element locator\")\n\nYou can narrow down query to the n-th match using the `nth=` locator passing a zero-based index.\n\n``` javascript\n// Click first button\nawait page.locator('button').locator('nth=0').click();\n\n// Click last button\nawait page.locator('button').locator('nth=-1').click();\n```\n\n## Parent element locator[​](#parent-element-locator \"Direct link to Parent element locator\")\n\nWhen you need to target a parent element of some other element, most of the time you should [locator.filter()](api/class-locator#locator-filter) by the child locator. For example, consider the following DOM structure:\n\n``` html\n<li><label>Hello</label></li>\n<li><label>World</label></li>\n```\n\nIf you'd like to target the parent `<li>` of a label with text `\"Hello\"`, using [locator.filter()](api/class-locator#locator-filter) works best:\n\n``` javascript\nconst child = page.getByText('Hello');\nconst parent = page.getByRole('listitem').filter({ has: child });\n```\n\nAlternatively, if you cannot find a suitable locator for the parent element, use `xpath=..`. Note that this method is not as reliable, because any changes to the DOM structure will break your tests. Prefer [locator.filter()](api/class-locator#locator-filter) when possible.\n\n``` javascript\nconst parent = page.getByText('Hello').locator('xpath=..');\n```\n\n## React locator[​](#react-locator \"Direct link to React locator\")\n\n> note\n>\n> React locator is experimental and prefixed with `_`. The functionality might change in future.\n\nReact locator allows finding elements by their component name and property values. The syntax is very similar to [CSS attribute selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors) and supports all CSS attribute selector operators.\n\nIn React locator, component names are transcribed with **CamelCase**.\n\n``` javascript\nawait page.locator('_react=BookItem').click();\n```\n\nMore examples:\n\n- match by **component**: `_react=BookItem`\n- match by component and **exact property value**, case-sensitive: `_react=BookItem[author = \"Steven King\"]`\n- match by property value only, **case-insensitive**: `_react=[author = \"steven king\" i]`\n- match by component and **truthy property value**: `_react=MyButton[enabled]`\n- match by component and **boolean value**: `_react=MyButton[enabled = false]`\n- match by property **value substring**: `_react=[author *= \"King\"]`\n- match by component and **multiple properties**: `_react=BookItem[author *= \"king\" i][year = 1990]`\n- match by **nested** property value: `_react=[some.nested.value = 12]`\n- match by component and property value **prefix**: `_react=BookItem[author ^= \"Steven\"]`\n- match by component and property value **suffix**: `_react=BookItem[author $= \"Steven\"]`\n- match by component and **key**: `_react=BookItem[key = '2']`\n- match by property value **regex**: `_react=[author = /Steven(\\\\s+King)?/i]`\n\nTo find React element names in a tree use [React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi).\n\n> note\n>\n> React locator supports React 15 and above.\n\n> note\n>\n> React locator, as well as [React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi), only work against **unminified** application builds.\n\n## Vue locator[​](#vue-locator \"Direct link to Vue locator\")\n\n> note\n>\n> Vue locator is experimental and prefixed with `_`. The functionality might change in future.\n\nVue locator allows finding elements by their component name and property values. The syntax is very similar to [CSS attribute selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors) and supports all CSS attribute selector operators.\n\nIn Vue locator, component names are transcribed with **kebab-case**.\n\n``` javascript\nawait page.locator('_vue=book-item').click();\n```\n\nMore examples:\n\n- match by **component**: `_vue=book-item`\n- match by component and **exact property value**, case-sensitive: `_vue=book-item[author = \"Steven King\"]`\n- match by property value only, **case-insensitive**: `_vue=[author = \"steven king\" i]`\n- match by component and **truthy property value**: `_vue=my-button[enabled]`\n- match by component and **boolean value**: `_vue=my-button[enabled = false]`\n- match by property **value substring**: `_vue=[author *= \"King\"]`\n- match by component and **multiple properties**: `_vue=book-item[author *= \"king\" i][year = 1990]`\n- match by **nested** property value: `_vue=[some.nested.value = 12]`\n- match by component and property value **prefix**: `_vue=book-item[author ^= \"Steven\"]`\n- match by component and property value **suffix**: `_vue=book-item[author $= \"Steven\"]`\n- match by property value **regex**: `_vue=[author = /Steven(\\\\s+King)?/i]`\n\nTo find Vue element names in a tree use [Vue DevTools](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=en).\n\n> note\n>\n> Vue locator supports Vue2 and above.\n\n> note\n>\n> Vue locator, as well as [Vue DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi), only work against **unminified** application builds.\n\n## XPath locator[​](#xpath-locator \"Direct link to XPath locator\")\n\n> warning\n>\n> We recommend prioritizing [user-visible locators](locators#quick-guide) like text or accessible role instead of using XPath that is tied to the implementation and easily break when the page changes.\n\nXPath locators are equivalent to calling [`Document.evaluate`](https://developer.mozilla.org/en/docs/Web/API/Document/evaluate).\n\n``` javascript\nawait page.locator('xpath=//button').click();\n```\n\n> note\n>\n> Any selector string starting with `//` or `..` are assumed to be an xpath selector. For example, Playwright converts `'//html/body'` to `'xpath=//html/body'`.\n\n> note\n>\n> XPath does not pierce shadow roots.\n\n### XPath union[​](#xpath-union \"Direct link to XPath union\")\n\nPipe operator (`|`) can be used to specify multiple selectors in XPath. It will match all elements that can be selected by one of the selectors in that list.\n\n``` javascript\n// Waits for either confirmation dialog or load spinner.\nawait page.locator(\n    `//span[contains(@class, 'spinner__loading')]|//div[@id='confirmation']`\n).waitFor();\n```\n\n## Label to form control retargeting[​](#label-to-form-control-retargeting \"Direct link to Label to form control retargeting\")\n\n> warning\n>\n> We recommend [locating by label text](locators#locate-by-label) instead of relying to label-to-control retargeting.\n\nTargeted input actions in Playwright automatically distinguish between labels and controls, so you can target the label to perform an action on the associated control.\n\nFor example, consider the following DOM structure: `<label for=\"password\">Password:</label><input id=\"password\" type=\"password\">`. You can target the label by its \"Password\" text using [page.getByText()](api/class-page#page-get-by-text). However, the following actions will be performed on the input instead of the label:\n\n- [locator.click()](api/class-locator#locator-click) will click the label and automatically focus the input field;\n- [locator.fill()](api/class-locator#locator-fill) will fill the input field;\n- [locator.inputValue()](api/class-locator#locator-input-value) will return the value of the input field;\n- [locator.selectText()](api/class-locator#locator-select-text) will select text in the input field;\n- [locator.setInputFiles()](api/class-locator#locator-set-input-files) will set files for the input field with `type=file`;\n- [locator.selectOption()](api/class-locator#locator-select-option) will select an option from the select box.\n\n``` javascript\n// Fill the input by targeting the label.\nawait page.getByText('Password').fill('secret');\n```\n\nHowever, other methods will target the label itself, for example [expect(locator).toHaveText()](api/class-locatorassertions#locator-assertions-to-have-text) will assert the text content of the label, not the input field.\n\n``` javascript\n// Fill the input by targeting the label.\nawait expect(page.locator('label')).toHaveText('Password');\n```\n\n## Legacy text locator[​](#legacy-text-locator \"Direct link to Legacy text locator\")\n\n> warning\n>\n> We recommend the modern [text locator](locators#get-by-text) instead.\n\nLegacy text locator matches elements that contain passed text.\n\n``` javascript\nawait page.locator('text=Log in').click();\n```\n\nLegacy text locator has a few variations:\n\n- `text=Log in` - default matching is case-insensitive, trims whitespace and searches for a substring. For example, `text=Log` matches `<button>Log in</button>`.\n\n  ``` javascript\n  await page.locator('text=Log in').click();\n  ```\n\n- `text=\"Log in\"` - text body can be escaped with single or double quotes to search for a text node with exact content after trimming whitespace.\n\n  For example, `text=\"Log\"` does not match `<button>Log in</button>` because `<button>` contains a single text node `\"Log in\"` that is not equal to `\"Log\"`. However, `text=\"Log\"` matches `<button> Log <span>in</span></button>`, because `<button>` contains a text node `\" Log \"`. This exact mode implies case-sensitive matching, so `text=\"Download\"` will not match `<button>download</button>`.\n\n  Quoted body follows the usual escaping rules, e.g. use `\\\"` to escape double quote in a double-quoted string: `text=\"foo\\\"bar\"`.\n\n  ``` javascript\n  await page.locator('text=\"Log in\"').click();\n  ```\n\n- `/Log\\s*in/i` - body can be a [JavaScript-like regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) wrapped in `/` symbols. For example, `text=/Log\\s*in/i` matches `<button>Login</button>` and `<button>log IN</button>`.\n\n  ``` javascript\n  await page.locator('text=/Log\\\\s*in/i').click();\n  ```\n\n> note\n>\n> String selectors starting and ending with a quote (either `\"` or `'`) are assumed to be a legacy text locators. For example, `\"Log in\"` is converted to `text=\"Log in\"` internally.\n\n> note\n>\n> Matching always normalizes whitespace. For example, it turns multiple spaces into one, turns line breaks into spaces and ignores leading and trailing whitespace.\n\n> note\n>\n> Input elements of the type `button` and `submit` are matched by their `value` instead of text content. For example, `text=Log in` matches `<input type=button value=\"Log in\">`.\n\n## id, data-testid, data-test-id, data-test selectors[​](#id-data-testid-data-test-id-data-test-selectors \"Direct link to id, data-testid, data-test-id, data-test selectors\")\n\n> warning\n>\n> We recommend [locating by test id](locators#locate-by-test-id) instead.\n\nPlaywright supports shorthand for selecting elements using certain attributes. Currently, only the following attributes are supported:\n\n- `id`\n- `data-testid`\n- `data-test-id`\n- `data-test`\n\n``` javascript\n// Fill an input with the id \"username\"\nawait page.locator('id=username').fill('value');\n\n// Click an element with data-test-id \"submit\"\nawait page.locator('data-test-id=submit').click();\n```\n\n> note\n>\n> Attribute selectors are not CSS selectors, so anything CSS-specific like `:enabled` is not supported. For more features, use a proper [css](#css-locator) selector, e.g. `css=[data-test=\"login\"]:enabled`.\n\n## Chaining selectors[​](#chaining-selectors \"Direct link to Chaining selectors\")\n\n> warning\n>\n> We recommend [chaining locators](locators#matching-inside-a-locator) instead.\n\nSelectors defined as `engine=body` or in short-form can be combined with the `>>` token, e.g. `selector1 >> selector2 >> selectors3`. When selectors are chained, the next one is queried relative to the previous one's result.\n\nFor example,\n\n``` javascript\ncss=article >> css=.bar > .baz >> css=span[attr=value]\n```\n\nis equivalent to\n\n``` javascript\ndocument\n    .querySelector('article')\n    .querySelector('.bar > .baz')\n    .querySelector('span[attr=value]');\n```\n\nIf a selector needs to include `>>` in the body, it should be escaped inside a string to not be confused with chaining separator, e.g. `text=\"some >> text\"`.\n\n### Intermediate matches[​](#intermediate-matches \"Direct link to Intermediate matches\")\n\n> warning\n>\n> We recommend [filtering by another locator](locators#filter-by-childdescendant) to locate elements that contain other elements.\n\nBy default, chained selectors resolve to an element queried by the last selector. A selector can be prefixed with `*` to capture elements that are queried by an intermediate selector.\n\nFor example, `css=article >> text=Hello` captures the element with the text `Hello`, and `*css=article >> text=Hello` (note the `*`) captures the `article` element that contains some element with the text `Hello`.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/other-locators](https://playwright.dev/docs/other-locators)"
- name: Page
  id: api/class-page
  summary: Page provides methods to interact with a single tab in a Browser, or an extension background page in Chromium
  description: "# Page\n\n- extends: [EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter \"EventEmitter\")\n\nPage provides methods to interact with a single tab in a [Browser](class-browser \"Browser\"), or an [extension background page](https://developer.chrome.com/extensions/background_pages) in Chromium. One [Browser](class-browser \"Browser\") instance might have multiple [Page](class-page \"Page\") instances.\n\nThis example creates a page, navigates it to a URL, and then saves a screenshot:\n\n``` javascript\nconst { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.\n\n(async () => {\n  const browser = await webkit.launch();\n  const context = await browser.newContext();\n  const page = await context.newPage();\n  await page.goto('https://example.com');\n  await page.screenshot({ path: 'screenshot.png' });\n  await browser.close();\n})();\n```\n\nThe Page class emits various events (described below) which can be handled using any of Node's native [`EventEmitter`](https://nodejs.org/api/events.html#events_class_eventemitter) methods, such as `on`, `once` or `removeListener`.\n\nThis example logs a message for a single page `load` event:\n\n``` javascript\npage.once('load', () => console.log('Page loaded!'));\n```\n\nTo unsubscribe from events use the `removeListener` method:\n\n``` javascript\nfunction logRequest(interceptedRequest) {\n  console.log('A request was made:', interceptedRequest.url());\n}\npage.on('request', logRequest);\n// Sometime later...\npage.removeListener('request', logRequest);\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### addInitScript[​](#page-add-init-script \"Direct link to addInitScript\")\n\nAdded before v1.9\n\nAdds a script which would be evaluated in one of the following scenarios:\n\n- Whenever the page is navigated.\n- Whenever the child frame is attached or navigated. In this case, the script is evaluated in the context of the newly attached frame.\n\nThe script is evaluated after the document was created but before any of its scripts were run. This is useful to amend the JavaScript environment, e.g. to seed `Math.random`.\n\n**Usage**\n\nAn example of overriding `Math.random` before the page loads:\n\n``` javascript\n// preload.js\nMath.random = () => 42;\n```\n\n``` javascript\n// In your playwright script, assuming the preload.js file is in same directory\nawait page.addInitScript({ path: './preload.js' });\n```\n\n``` javascript\nawait page.addInitScript(mock => {\n  window.mock = mock;\n}, mock);\n```\n\n> note\n>\n> The order of evaluation of multiple scripts installed via [browserContext.addInitScript()](class-browsercontext#browser-context-add-init-script) and [page.addInitScript()](class-page#page-add-init-script) is not defined.\n\n**Arguments**\n\n- `script` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Path to the JavaScript file. If `path` is a relative path, then it is resolved relative to the current working directory. Optional.\n\n  - `content` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Raw script content. Optional.\n\n  Script to be evaluated in the page.\n\n- `arg` [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\") *(optional)*\n\n  Optional argument to pass to `script` (only supported when passing a function).\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### addLocatorHandler[​](#page-add-locator-handler \"Direct link to addLocatorHandler\")\n\nWhen testing a web page, sometimes unexpected overlays like a \"Sign up\" dialog appear and block actions you want to automate, e.g. clicking a button. These overlays don't always show up in the same way or at the same time, making them tricky to handle in automated tests.\n\nThis method lets you set up a special function, called a handler, that activates when it detects that overlay is visible. The handler's job is to remove the overlay, allowing your test to continue as if the overlay wasn't there.\n\nThings to keep in mind:\n\n- When an overlay is shown predictably, we recommend explicitly waiting for it in your test and dismissing it as a part of your normal test flow, instead of using [page.addLocatorHandler()](class-page#page-add-locator-handler).\n- Playwright checks for the overlay every time before executing or retrying an action that requires an [actionability check](../actionability), or before performing an auto-waiting assertion check. When overlay is visible, Playwright calls the handler first, and then proceeds with the action/assertion. Note that the handler is only called when you perform an action/assertion - if the overlay becomes visible but you don't perform any actions, the handler will not be triggered.\n- After executing the handler, Playwright will ensure that overlay that triggered the handler is not visible anymore. You can opt-out of this behavior with `noWaitAfter`.\n- The execution time of the handler counts towards the timeout of the action/assertion that executed the handler. If your handler takes too long, it might cause timeouts.\n- You can register multiple handlers. However, only a single handler will be running at a time. Make sure the actions within a handler don't depend on another handler.\n\n> warning\n>\n> Running the handler will alter your page state mid-test. For example it will change the currently focused element and move the mouse. Make sure that actions that run after the handler are self-contained and do not rely on the focus and mouse state being unchanged.  \n>   \n> For example, consider a test that calls [locator.focus()](class-locator#locator-focus) followed by [keyboard.press()](class-keyboard#keyboard-press). If your handler clicks a button between these two actions, the focused element most likely will be wrong, and key press will happen on the unexpected element. Use [locator.press()](class-locator#locator-press) instead to avoid this problem.  \n>   \n> Another example is a series of mouse actions, where [mouse.move()](class-mouse#mouse-move) is followed by [mouse.down()](class-mouse#mouse-down). Again, when the handler runs between these two actions, the mouse position will be wrong during the mouse down. Prefer self-contained actions like [locator.click()](class-locator#locator-click) that do not rely on the state being unchanged by a handler.\n\n**Usage**\n\nAn example that closes a \"Sign up to the newsletter\" dialog when it appears:\n\n``` javascript\n// Setup the handler.\nawait page.addLocatorHandler(page.getByText('Sign up to the newsletter'), async () => {\n  await page.getByRole('button', { name: 'No thanks' }).click();\n});\n\n// Write the test as usual.\nawait page.goto('https://example.com');\nawait page.getByRole('button', { name: 'Start here' }).click();\n```\n\nAn example that skips the \"Confirm your security details\" page when it is shown:\n\n``` javascript\n// Setup the handler.\nawait page.addLocatorHandler(page.getByText('Confirm your security details'), async () => {\n  await page.getByRole('button', { name: 'Remind me later' }).click();\n});\n\n// Write the test as usual.\nawait page.goto('https://example.com');\nawait page.getByRole('button', { name: 'Start here' }).click();\n```\n\nAn example with a custom callback on every actionability check. It uses a `<body>` locator that is always visible, so the handler is called before every actionability check. It is important to specify `noWaitAfter`, because the handler does not hide the `<body>` element.\n\n``` javascript\n// Setup the handler.\nawait page.addLocatorHandler(page.locator('body'), async () => {\n  await page.evaluate(() => window.removeObstructionsForTestIfNeeded());\n}, { noWaitAfter: true });\n\n// Write the test as usual.\nawait page.goto('https://example.com');\nawait page.getByRole('button', { name: 'Start here' }).click();\n```\n\nHandler takes the original locator as an argument. You can also automatically remove the handler after a number of invocations by setting `times`:\n\n``` javascript\nawait page.addLocatorHandler(page.getByLabel('Close'), async locator => {\n  await locator.click();\n}, { times: 1 });\n```\n\n**Arguments**\n\n- `locator` [Locator](class-locator \"Locator\")\n\n  Locator that triggers the handler.\n\n- `handler` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([Locator](class-locator \"Locator\")):[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n  Function that should be run once `locator` appears. This function should get rid of the element that blocks actions like click.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    By default, after calling the handler Playwright will wait until the overlay becomes hidden, and only then Playwright will continue with the action/assertion that triggered the handler. This option allows to opt-out of this behavior, so that overlay can stay visible after the handler has run.\n\n  - `times` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Specifies the maximum number of times this handler should be called. Unlimited by default.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### addScriptTag[​](#page-add-script-tag \"Direct link to addScriptTag\")\n\nAdded before v1.9\n\nAdds a `<script>` tag into the page with the desired url or content. Returns the added tag when the script's onload fires or when the script content was injected into frame.\n\n**Usage**\n\n``` javascript\nawait page.addScriptTag();\nawait page.addScriptTag(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `content` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Raw JavaScript content to be injected into frame.\n\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Path to the JavaScript file to be injected into frame. If `path` is a relative path, then it is resolved relative to the current working directory.\n\n  - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Script type. Use 'module' in order to load a JavaScript ES6 module. See [script](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script) for more details.\n\n  - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    URL of a script to be added.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[ElementHandle](class-elementhandle \"ElementHandle\")\\>\n\n### addStyleTag[​](#page-add-style-tag \"Direct link to addStyleTag\")\n\nAdded before v1.9\n\nAdds a `<link rel=\"stylesheet\">` tag into the page with the desired url or a `<style type=\"text/css\">` tag with the content. Returns the added tag when the stylesheet's onload fires or when the CSS content was injected into frame.\n\n**Usage**\n\n``` javascript\nawait page.addStyleTag();\nawait page.addStyleTag(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `content` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Raw CSS content to be injected into frame.\n\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Path to the CSS file to be injected into frame. If `path` is a relative path, then it is resolved relative to the current working directory.\n\n  - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    URL of the `<link>` tag.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[ElementHandle](class-elementhandle \"ElementHandle\")\\>\n\n### bringToFront[​](#page-bring-to-front \"Direct link to bringToFront\")\n\nAdded before v1.9\n\nBrings page to front (activates tab).\n\n**Usage**\n\n``` javascript\nawait page.bringToFront();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### close[​](#page-close \"Direct link to close\")\n\nAdded before v1.9\n\nIf `runBeforeUnload` is `false`, does not run any unload handlers and waits for the page to be closed. If `runBeforeUnload` is `true` the method will run unload handlers, but will **not** wait for the page to close.\n\nBy default, `page.close()` **does not** run `beforeunload` handlers.\n\n> note\n>\n> if `runBeforeUnload` is passed as true, a `beforeunload` dialog might be summoned and should be handled manually via [page.on('dialog')](class-page#page-event-dialog) event.\n\n**Usage**\n\n``` javascript\nawait page.close();\nawait page.close(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `reason` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    The reason to be reported to the operations interrupted by the page closure.\n\n  - `runBeforeUnload` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Defaults to `false`. Whether to run the [before unload](https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload) page handlers.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### content[​](#page-content \"Direct link to content\")\n\nAdded before v1.9\n\nGets the full HTML contents of the page, including the doctype.\n\n**Usage**\n\n``` javascript\nawait page.content();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### context[​](#page-context \"Direct link to context\")\n\nAdded before v1.9\n\nGet the browser context that the page belongs to.\n\n**Usage**\n\n``` javascript\npage.context();\n```\n\n**Returns**\n\n- [BrowserContext](class-browsercontext \"BrowserContext\")\n\n### dragAndDrop[​](#page-drag-and-drop \"Direct link to dragAndDrop\")\n\nThis method drags the source element to the target element. It will first move to the source element, perform a `mousedown`, then move to the target element and perform a `mouseup`.\n\n**Usage**\n\n``` javascript\nawait page.dragAndDrop('#source', '#target');\n// or specify exact positions relative to the top-left corners of the elements:\nawait page.dragAndDrop('#source', '#target', {\n  sourcePosition: { x: 34, y: 7 },\n  targetPosition: { x: 10, y: 20 },\n});\n```\n\n**Arguments**\n\n- `source` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element to drag. If there are multiple elements satisfying the selector, the first will be used.\n\n- `target` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to search for an element to drop onto. If there are multiple elements satisfying the selector, the first will be used.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option has no effect.\n\n    This option has no effect.\n\n  - `sourcePosition` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Clicks on the source element at this point relative to the top-left corner of the element's padding box. If not specified, some visible point of the element is used.\n\n  - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.\n\n  - `targetPosition` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Drops on the target element at this point relative to the top-left corner of the element's padding box. If not specified, some visible point of the element is used.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### emulateMedia[​](#page-emulate-media \"Direct link to emulateMedia\")\n\nAdded before v1.9\n\nThis method changes the `CSS media type` through the `media` argument, and/or the `'prefers-colors-scheme'` media feature, using the `colorScheme` argument.\n\n**Usage**\n\n``` javascript\nawait page.evaluate(() => matchMedia('screen').matches);\n// → true\nawait page.evaluate(() => matchMedia('print').matches);\n// → false\n\nawait page.emulateMedia({ media: 'print' });\nawait page.evaluate(() => matchMedia('screen').matches);\n// → false\nawait page.evaluate(() => matchMedia('print').matches);\n// → true\n\nawait page.emulateMedia({});\nawait page.evaluate(() => matchMedia('screen').matches);\n// → true\nawait page.evaluate(() => matchMedia('print').matches);\n// → false\n```\n\n``` javascript\nawait page.emulateMedia({ colorScheme: 'dark' });\nawait page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);\n// → true\nawait page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);\n// → false\nawait page.evaluate(() => matchMedia('(prefers-color-scheme: no-preference)').matches);\n// → false\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `colorScheme` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| \"light\" \\| \"dark\" \\| \"no-preference\" *(optional)*\n\n    Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. Passing `null` disables color scheme emulation.\n\n  - `forcedColors` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| \"active\" \\| \"none\" *(optional)*\n\n    Emulates `'forced-colors'` media feature, supported values are `'active'` and `'none'`. Passing `null` disables forced colors emulation.\n\n  - `media` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| \"screen\" \\| \"print\" *(optional)*\n\n    Changes the CSS media type of the page. The only allowed values are `'screen'`, `'print'` and `null`. Passing `null` disables CSS media emulation.\n\n  - `reducedMotion` [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| \"reduce\" \\| \"no-preference\" *(optional)*\n\n    Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. Passing `null` disables reduced motion emulation.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### evaluate[​](#page-evaluate \"Direct link to evaluate\")\n\nAdded before v1.9\n\nReturns the value of the `pageFunction` invocation.\n\nIf the function passed to the [page.evaluate()](class-page#page-evaluate) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\"), then [page.evaluate()](class-page#page-evaluate) would wait for the promise to resolve and return its value.\n\nIf the function passed to the [page.evaluate()](class-page#page-evaluate) returns a non-[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\") value, then [page.evaluate()](class-page#page-evaluate) resolves to `undefined`. Playwright also supports transferring some additional values that are not serializable by `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`.\n\n**Usage**\n\nPassing argument to `pageFunction`:\n\n``` javascript\nconst result = await page.evaluate(([x, y]) => {\n  return Promise.resolve(x * y);\n}, [7, 8]);\nconsole.log(result); // prints \"56\"\n```\n\nA string can also be passed in instead of a function:\n\n``` javascript\nconsole.log(await page.evaluate('1 + 2')); // prints \"3\"\nconst x = 10;\nconsole.log(await page.evaluate(`1 + ${x}`)); // prints \"11\"\n```\n\n[ElementHandle](class-elementhandle \"ElementHandle\") instances can be passed as an argument to the [page.evaluate()](class-page#page-evaluate):\n\n``` javascript\nconst bodyHandle = await page.evaluate('document.body');\nconst html = await page.evaluate<string, HTMLElement>(([body, suffix]) =>\n  body.innerHTML + suffix, [bodyHandle, 'hello']\n);\nawait bodyHandle.dispose();\n```\n\n**Arguments**\n\n- `pageFunction` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Function to be evaluated in the page context.\n\n- `arg` [EvaluationArgument](../evaluating#evaluation-argument \"EvaluationArgument\") *(optional)*\n\n  Optional argument to pass to `pageFunction`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\")\\>\n\n### evaluateHandle[​](#page-evaluate-handle \"Direct link to evaluateHandle\")\n\nAdded before v1.9\n\nReturns the value of the `pageFunction` invocation as a [JSHandle](class-jshandle \"JSHandle\").\n\nThe only difference between [page.evaluate()](class-page#page-evaluate) and [page.evaluateHandle()](class-page#page-evaluate-handle) is that [page.evaluateHandle()](class-page#page-evaluate-handle) returns [JSHandle](class-jshandle \"JSHandle\").\n\nIf the function passed to the [page.evaluateHandle()](class-page#page-evaluate-handle) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\"), then [page.evaluateHandle()](class-page#page-evaluate-handle) would wait for the promise to resolve and return its value.\n\n**Usage**\n\n``` javascript\n// Handle for the window object.\nconst aWindowHandle = await page.evaluateHandle(() => Promise.resolve(window));\n```\n\nA string can also be passed in instead of a function:\n\n``` javascript\nconst aHandle = await page.evaluateHandle('document'); // Handle for the 'document'\n```\n\n[JSHandle](class-jshandle \"JSHandle\") instances can be passed as an argument to the [page.evaluateHandle()](class-page#page-evaluate-handle):\n\n``` javascript\nconst aHandle = await page.evaluateHandle(() => document.body);\nconst resultHandle = await page.evaluateHandle(body => body.innerHTML, aHandle);\nconsole.log(await resultHandle.jsonValue());\nawait resultHandle.dispose();\n```\n\n**Arguments**\n\n- `pageFunction` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Function to be evaluated in the page context.\n\n- `arg` [EvaluationArgument](../evaluating#evaluation-argument \"EvaluationArgument\") *(optional)*\n\n  Optional argument to pass to `pageFunction`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[JSHandle](class-jshandle \"JSHandle\")\\>\n\n### exposeBinding[​](#page-expose-binding \"Direct link to exposeBinding\")\n\nAdded before v1.9\n\nThe method adds a function called `name` on the `window` object of every frame in this page. When called, the function executes `callback` and returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\") which resolves to the return value of `callback`. If the `callback` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\"), it will be awaited.\n\nThe first argument of the `callback` function contains information about the caller: `{ browserContext: BrowserContext, page: Page, frame: Frame }`.\n\nSee [browserContext.exposeBinding()](class-browsercontext#browser-context-expose-binding) for the context-wide version.\n\n> note\n>\n> Functions installed via [page.exposeBinding()](class-page#page-expose-binding) survive navigations.\n\n**Usage**\n\nAn example of exposing page URL to all frames in a page:\n\n``` javascript\nconst { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.\n\n(async () => {\n  const browser = await webkit.launch({ headless: false });\n  const context = await browser.newContext();\n  const page = await context.newPage();\n  await page.exposeBinding('pageURL', ({ page }) => page.url());\n  await page.setContent(`\n    <script>\n      async function onClick() {\n        document.querySelector('div').textContent = await window.pageURL();\n      }\n    </script>\n    <button onclick=\"onClick()\">Click me</button>\n    <div></div>\n  `);\n  await page.click('button');\n})();\n```\n\n**Arguments**\n\n- `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Name of the function on the window object.\n\n- `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")\n\n  Callback function that will be called in the Playwright's context.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `handle` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    > Deprecated\n    >\n    > This option will be removed in the future.\n\n    Whether to pass the argument as a handle, instead of passing by value. When passing a handle, only one argument is supported. When passing by value, multiple arguments are supported.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### exposeFunction[​](#page-expose-function \"Direct link to exposeFunction\")\n\nAdded before v1.9\n\nThe method adds a function called `name` on the `window` object of every frame in the page. When called, the function executes `callback` and returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\") which resolves to the return value of `callback`.\n\nIf the `callback` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\"), it will be awaited.\n\nSee [browserContext.exposeFunction()](class-browsercontext#browser-context-expose-function) for context-wide exposed function.\n\n> note\n>\n> Functions installed via [page.exposeFunction()](class-page#page-expose-function) survive navigations.\n\n**Usage**\n\nAn example of adding a `sha256` function to the page:\n\n``` javascript\nconst { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.\nconst crypto = require('crypto');\n\n(async () => {\n  const browser = await webkit.launch({ headless: false });\n  const page = await browser.newPage();\n  await page.exposeFunction('sha256', text =>\n    crypto.createHash('sha256').update(text).digest('hex'),\n  );\n  await page.setContent(`\n    <script>\n      async function onClick() {\n        document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');\n      }\n    </script>\n    <button onclick=\"onClick()\">Click me</button>\n    <div></div>\n  `);\n  await page.click('button');\n})();\n```\n\n**Arguments**\n\n- `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Name of the function on the window object\n\n- `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")\n\n  Callback function which will be called in Playwright's context.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### frame[​](#page-frame \"Direct link to frame\")\n\nAdded before v1.9\n\nReturns frame matching the specified criteria. Either `name` or `url` must be specified.\n\n**Usage**\n\n``` javascript\nconst frame = page.frame('frame-name');\n```\n\n``` javascript\nconst frame = page.frame({ url: /.*domain.*/ });\n```\n\n**Arguments**\n\n- `frameSelector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Frame name specified in the `iframe`'s `name` attribute. Optional.\n\n  - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") \\| [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([URL](https://nodejs.org/api/url.html \"URL\")):[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    A glob pattern, regex pattern or predicate receiving frame's `url` as a [URL](https://nodejs.org/api/url.html \"URL\") object. Optional.\n\n  Frame name or other frame lookup options.\n\n**Returns**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Frame](class-frame \"Frame\")\n\n### frameLocator[​](#page-frame-locator \"Direct link to frameLocator\")\n\nWhen working with iframes, you can create a frame locator that will enter the iframe and allow selecting elements in that iframe.\n\n**Usage**\n\nFollowing snippet locates element with text \"Submit\" in the iframe with id `my-frame`, like `<iframe id=\"my-frame\">`:\n\n``` javascript\nconst locator = page.frameLocator('#my-iframe').getByText('Submit');\nawait locator.click();\n```\n\n**Arguments**\n\n- `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  A selector to use when resolving DOM element.\n\n**Returns**\n\n- [FrameLocator](class-framelocator \"FrameLocator\")\n\n### frames[​](#page-frames \"Direct link to frames\")\n\nAdded before v1.9\n\nAn array of all frames attached to the page.\n\n**Usage**\n\n``` javascript\npage.frames();\n```\n\n**Returns**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Frame](class-frame \"Frame\")\\>\n\n### getByAltText[​](#page-get-by-alt-text \"Direct link to getByAltText\")\n\nAllows locating elements by their alt text.\n\n**Usage**\n\nFor example, this method will find the image by alt text \"Playwright logo\":\n\n``` html\n<img alt='Playwright logo'>\n```\n\n``` javascript\nawait page.getByAltText('Playwright logo').click();\n```\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Text to locate the element for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### getByLabel[​](#page-get-by-label \"Direct link to getByLabel\")\n\nAllows locating input elements by the text of the associated `<label>` or `aria-labelledby` element, or by the `aria-label` attribute.\n\n**Usage**\n\nFor example, this method will find inputs by label \"Username\" and \"Password\" in the following DOM:\n\n``` html\n<input aria-label=\"Username\">\n<label for=\"password-input\">Password:</label>\n<input id=\"password-input\">\n```\n\n``` javascript\nawait page.getByLabel('Username').fill('john');\nawait page.getByLabel('Password').fill('secret');\n```\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Text to locate the element for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### getByPlaceholder[​](#page-get-by-placeholder \"Direct link to getByPlaceholder\")\n\nAllows locating input elements by the placeholder text.\n\n**Usage**\n\nFor example, consider the following DOM structure.\n\n``` html\n<input type=\"email\" placeholder=\"name@example.com\" />\n```\n\nYou can fill the input after locating it by the placeholder text:\n\n``` javascript\nawait page\n    .getByPlaceholder('name@example.com')\n    .fill('playwright@microsoft.com');\n```\n\n**Arguments**\n\n- `text` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Text to locate the element for.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n### getByRole[​](#page-get-by-role \"Direct link to getByRole\")\n\nAllows locating elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n\n**Usage**\n\nConsider the following DOM structure.\n\n``` html\n<h3>Sign up</h3>\n<label>\n  <input type=\"checkbox\" /> Subscribe\n</label>\n<br/>\n<button>Submit</button>\n```\n\nYou can locate each element by it's implicit role:\n\n``` javascript\nawait expect(page.getByRole('heading', { name: 'Sign up' })).toBeVisible();\n\nawait page.getByRole('checkbox', { name: 'Subscribe' }).check();\n\nawait page.getByRole('button', { name: /submit/i }).click();\n```\n\n**Arguments**\n\n- `role` \"alert\" \\| \"alertdialog\" \\| \"application\" \\| \"article\" \\| \"banner\" \\| \"blockquote\" \\| \"button\" \\| \"caption\" \\| \"cell\" \\| \"checkbox\" \\| \"code\" \\| \"columnheader\" \\| \"combobox\" \\| \"complementary\" \\| \"contentinfo\" \\| \"definition\" \\| \"deletion\" \\| \"dialog\" \\| \"directory\" \\| \"document\" \\| \"emphasis\" \\| \"feed\" \\| \"figure\" \\| \"form\" \\| \"generic\" \\| \"grid\" \\| \"gridcell\" \\| \"group\" \\| \"heading\" \\| \"img\" \\| \"insertion\" \\| \"link\" \\| \"list\" \\| \"listbox\" \\| \"listitem\" \\| \"log\" \\| \"main\" \\| \"marquee\" \\| \"math\" \\| \"meter\" \\| \"menu\" \\| \"menubar\" \\| \"menuitem\" \\| \"menuitemcheckbox\" \\| \"menuitemradio\" \\| \"navigation\" \\| \"none\" \\| \"note\" \\| \"option\" \\| \"paragraph\" \\| \"presentation\" \\| \"progressbar\" \\| \"radio\" \\| \"radiogroup\" \\| \"region\" \\| \"row\" \\| \"rowgroup\" \\| \"rowheader\" \\| \"scrollbar\" \\| \"search\" \\| \"searchbox\" \\| \"separator\" \\| \"slider\" \\| \"spinbutton\" \\| \"status\" \\| \"strong\" \\| \"subscript\" \\| \"superscript\" \\| \"switch\" \\| \"tab\" \\| \"table\" \\| \"tablist\" \\| \"tabpanel\" \\| \"term\" \\| \"textbox\" \\| \"time\" \\| \"timer\" \\| \"toolbar\" \\| \"tooltip\" \\| \"tree\" \\| \"treegrid\" \\| \"treeitem\"\n\n  Required aria role.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `checked` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    An attribute that is usually set by `aria-checked` or native `<input type=checkbox>` controls.\n\n    Learn more about [`aria-checked`](https://www.w3.org/TR/wai-aria-1.2/#aria-checked).\n\n  - `disabled` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    An attribute that is usually set by `aria-disabled` or `disabled`.\n\n    > note\n    >\n    > Unlike most other attributes, `disabled` is inherited through the DOM hierarchy. Learn more about [`aria-disabled`](https://www.w3.org/TR/wai-aria-1.2/#aria-disabled).\n\n  - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether `name` is matched exactly: case-sensitive and whole-string. Defaults to false. Ignored when `name` is a regular expression. Note that exact match still trims whitespace.\n\n  - `expanded` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    An attribute that is usually set by `aria-expanded`.\n\n    Learn more about [`aria-expanded`](https://www.w3.org/TR/wai-aria-1.2/#aria-expanded).\n\n  - `includeHidden` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Option that controls whether hidden elements are matched. By default, only non-hidden elements, as [defined by ARIA](https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion), are matched by role selector.\n\n    Learn more about [`aria-hidden`](https://www.w3.org/TR/wai-aria-1.2/#aria-hidden).\n\n  - `level` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    A number attribute that is usually present for roles `heading`, `listitem`, `row`, `treeitem`, with default values for `<h1>-<h6>` elements.\n\n    Learn more about [`aria-level`](https://www.w3.org/TR/wai-aria-1.2/#aria-level).\n\n  - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") *(optional)*\n\n    Option to match the [accessible name](https://w3c.github.io/accname/#dfn-accessible-name). By default, matching is case-insensitive and searches for a substring, use `exact` to control this behavior.\n\n    Learn more about [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n\n  - `pressed` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    An attribute that is usually set by `aria-pressed`.\n\n    Learn more about [`aria-pressed`](https://www.w3.org/TR/wai-aria-1.2/#aria-pressed).\n\n  - `selected` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    An attribute that is usually set by `aria-selected`.\n\n    Learn more about [`aria-selected`](https://www.w3.org/TR/wai-aria-1.2/#aria-selected).\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n**Details**\n\nRole selector **does not replace** accessibility audits and conformance tests, but rather gives early feedback about the ARIA guidelines.\n\nMany html elements have an implicitly [defined role](https://w3c.github.io/html-aam/#html-element-role-mappings) that is recognized by the role selector. You can find all the [supported roles here](https://www.w3.org/TR/wai-aria-1.2/#role_definitions). ARIA guidelines **do not recommend** duplicating implicit roles and attributes by setting `role` and/or `aria-*` attributes to default values.\n\n### getByTestId[​](#page-get-by-test-id \"Direct link to getByTestId\")\n\nLocate element by the test id.\n\n**Usage**\n\nConsider the following DOM structure.\n\n``` html\n<button data-testid=\"directions\">Itinéraire</button>\n```\n\nYou can locate the element by it's test id:\n\n``` javascript\nawait page.getByTestId('directions').click();\n```\n\n**Arguments**\n\n- `testId` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Id to locate the element by.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n**Details**\n\nBy default, the `data-testid` attribute is used as a test id. Use [selectors.setTestIdAttribute()](class-selectors#selectors-set-test-id-attribute) to configure a different test id attribute if necessary.\n\n``` javascript\n// Set custom test id attribute from @playwright/test config:\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    testIdAttribute: 'data-pw'\n  },\n});\n```\n\n### getByText\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-page](https://playwright.dev/docs/api/class-page)"
- name: Page object models
  id: pom
  summary: Large test suites can be structured to optimize ease of authoring and maintenance
  description: "# Page object models\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nLarge test suites can be structured to optimize ease of authoring and maintenance. Page object models are one such approach to structure your test suite.\n\nA page object represents a part of your web application. An e-commerce web application might have a home page, a listings page and a checkout page. Each of them can be represented by page object models.\n\nPage objects **simplify authoring** by creating a higher-level API which suits your application and **simplify maintenance** by capturing element selectors in one place and create reusable code to avoid repetition.\n\n## Implementation[​](#implementation \"Direct link to Implementation\")\n\nWe will create a `PlaywrightDevPage` helper class to encapsulate common operations on the `playwright.dev` page. Internally, it will use the `page` object.\n\n- TypeScript\n- JavaScript\n- Library\n\n``` javascript\nimport { expect, type Locator, type Page } from '@playwright/test';\n\nexport class PlaywrightDevPage {\n  readonly page: Page;\n  readonly getStartedLink: Locator;\n  readonly gettingStartedHeader: Locator;\n  readonly pomLink: Locator;\n  readonly tocList: Locator;\n\n  constructor(page: Page) {\n    this.page = page;\n    this.getStartedLink = page.locator('a', { hasText: 'Get started' });\n    this.gettingStartedHeader = page.locator('h1', { hasText: 'Installation' });\n    this.pomLink = page.locator('li', {\n      hasText: 'Guides',\n    }).locator('a', {\n      hasText: 'Page Object Model',\n    });\n    this.tocList = page.locator('article div.markdown ul > li > a');\n  }\n\n  async goto() {\n    await this.page.goto('https://playwright.dev');\n  }\n\n  async getStarted() {\n    await this.getStartedLink.first().click();\n    await expect(this.gettingStartedHeader).toBeVisible();\n  }\n\n  async pageObjectModel() {\n    await this.getStarted();\n    await this.pomLink.click();\n  }\n}\n```\n\n``` javascript\nconst { expect } = require('@playwright/test');\n\nexports.PlaywrightDevPage = class PlaywrightDevPage {\n\n  /**\n   * @param {import('@playwright/test').Page} page\n   */\n  constructor(page) {\n    this.page = page;\n    this.getStartedLink = page.locator('a', { hasText: 'Get started' });\n    this.gettingStartedHeader = page.locator('h1', { hasText: 'Installation' });\n    this.pomLink = page.locator('li', {\n      hasText: 'Guides',\n    }).locator('a', {\n      hasText: 'Page Object Model',\n    });\n    this.tocList = page.locator('article div.markdown ul > li > a');\n  }\n\n  async goto() {\n    await this.page.goto('https://playwright.dev');\n  }\n\n  async getStarted() {\n    await this.getStartedLink.first().click();\n    await expect(this.gettingStartedHeader).toBeVisible();\n  }\n\n  async pageObjectModel() {\n    await this.getStarted();\n    await this.pomLink.click();\n  }\n};\n```\n\n``` javascript\nclass PlaywrightDevPage {\n  /**\n   * @param {import('playwright').Page} page\n   */\n  constructor(page) {\n    this.page = page;\n    this.getStartedLink = page.locator('a', { hasText: 'Get started' });\n    this.gettingStartedHeader = page.locator('h1', { hasText: 'Installation' });\n    this.pomLink = page.locator('li', {\n      hasText: 'Playwright Test',\n    }).locator('a', {\n      hasText: 'Page Object Model',\n    });\n    this.tocList = page.locator('article div.markdown ul > li > a');\n  }\n  async getStarted() {\n    await this.getStartedLink.first().click();\n    await expect(this.gettingStartedHeader).toBeVisible();\n  }\n\n  async pageObjectModel() {\n    await this.getStarted();\n    await this.pomLink.click();\n  }\n}\nmodule.exports = { PlaywrightDevPage };\n```\n\nNow we can use the `PlaywrightDevPage` class in our tests.\n\n- TypeScript\n- JavaScript\n- Library\n\n``` javascript\nimport { test, expect } from '@playwright/test';\nimport { PlaywrightDevPage } from './playwright-dev-page';\n\ntest('getting started should contain table of contents', async ({ page }) => {\n  const playwrightDev = new PlaywrightDevPage(page);\n  await playwrightDev.goto();\n  await playwrightDev.getStarted();\n  await expect(playwrightDev.tocList).toHaveText([\n    `How to install Playwright`,\n    `What's Installed`,\n    `How to run the example test`,\n    `How to open the HTML test report`,\n    `Write tests using web first assertions, page fixtures and locators`,\n    `Run single test, multiple tests, headed mode`,\n    `Generate tests with Codegen`,\n    `See a trace of your tests`\n  ]);\n});\n\ntest('should show Page Object Model article', async ({ page }) => {\n  const playwrightDev = new PlaywrightDevPage(page);\n  await playwrightDev.goto();\n  await playwrightDev.pageObjectModel();\n  await expect(page.locator('article')).toContainText('Page Object Model is a common pattern');\n});\n```\n\n``` javascript\nconst { test, expect } = require('@playwright/test');\nconst { PlaywrightDevPage } = require('./playwright-dev-page');\n\ntest('getting started should contain table of contents', async ({ page }) => {\n  const playwrightDev = new PlaywrightDevPage(page);\n  await playwrightDev.goto();\n  await playwrightDev.getStarted();\n  await expect(playwrightDev.tocList).toHaveText([\n    `How to install Playwright`,\n    `What's Installed`,\n    `How to run the example test`,\n    `How to open the HTML test report`,\n    `Write tests using web first assertions, page fixtures and locators`,\n    `Run single test, multiple tests, headed mode`,\n    `Generate tests with Codegen`,\n    `See a trace of your tests`\n  ]);\n});\n\ntest('should show Page Object Model article', async ({ page }) => {\n  const playwrightDev = new PlaywrightDevPage(page);\n  await playwrightDev.goto();\n  await playwrightDev.pageObjectModel();\n  await expect(page.locator('article')).toContainText('Page Object Model is a common pattern');\n});\n```\n\n``` javascript\nconst { PlaywrightDevPage } = require('./playwright-dev-page');\n\n// In the test\nconst page = await browser.newPage();\nawait playwrightDev.goto();\nawait playwrightDev.getStarted();\nawait expect(playwrightDev.tocList).toHaveText([\n  `How to install Playwright`,\n  `What's Installed`,\n  `How to run the example test`,\n  `How to open the HTML test report`,\n  `Write tests using web first assertions, page fixtures and locators`,\n  `Run single test, multiple tests, headed mode`,\n  `Generate tests with Codegen`,\n  `See a trace of your tests`\n]);\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/pom](https://playwright.dev/docs/pom)"
- name: page.addInitScript
  id: api/class-page#page-add-init-script
  summary: The script is evaluated after the document was created but before any of its scripts were run
  belongs_to: Page
  description: |-
    ### addInitScript[​](#page-add-init-script "Direct link to addInitScript")

    Added before v1.9

    Adds a script which would be evaluated in one of the following scenarios:

    - Whenever the page is navigated.
    - Whenever the child frame is attached or navigated. In this case, the script is evaluated in the context of the newly attached frame.

    The script is evaluated after the document was created but before any of its scripts were run. This is useful to amend the JavaScript environment, e.g. to seed `Math.random`.

    **Usage**

    An example of overriding `Math.random` before the page loads:

    ``` javascript
    // preload.js
    Math.random = () => 42;
    ```

    ``` javascript
    // In your playwright script, assuming the preload.js file is in same directory
    await page.addInitScript({ path: './preload.js' });
    ```

    ``` javascript
    await page.addInitScript(mock => {
      window.mock = mock;
    }, mock);
    ```

    > note
    >
    > The order of evaluation of multiple scripts installed via [browserContext.addInitScript()](class-browsercontext#browser-context-add-init-script) and [page.addInitScript()](class-page#page-add-init-script) is not defined.

    **Arguments**

    - `script`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

      - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Path to the JavaScript file. If `path` is a relative path, then it is resolved relative to the current working directory. Optional.

      - `content` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Raw script content. Optional.

      Script to be evaluated in the page.

    - `arg` [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") *(optional)*

      Optional argument to pass to `script` (only supported when passing a function).

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>
- name: page.addLocatorHandler
  id: api/class-page#page-add-locator-handler
  summary: When testing a web page, sometimes unexpected overlays like a "Sign up" dialog appear and block actions you want to automate, e.g
  belongs_to: Page
  description: "### addLocatorHandler[​](#page-add-locator-handler \"Direct link to addLocatorHandler\")\n\nWhen testing a web page, sometimes unexpected overlays like a \"Sign up\" dialog appear and block actions you want to automate, e.g. clicking a button. These overlays don't always show up in the same way or at the same time, making them tricky to handle in automated tests.\n\nThis method lets you set up a special function, called a handler, that activates when it detects that overlay is visible. The handler's job is to remove the overlay, allowing your test to continue as if the overlay wasn't there.\n\nThings to keep in mind:\n\n- When an overlay is shown predictably, we recommend explicitly waiting for it in your test and dismissing it as a part of your normal test flow, instead of using [page.addLocatorHandler()](class-page#page-add-locator-handler).\n- Playwright checks for the overlay every time before executing or retrying an action that requires an [actionability check](../actionability), or before performing an auto-waiting assertion check. When overlay is visible, Playwright calls the handler first, and then proceeds with the action/assertion. Note that the handler is only called when you perform an action/assertion - if the overlay becomes visible but you don't perform any actions, the handler will not be triggered.\n- After executing the handler, Playwright will ensure that overlay that triggered the handler is not visible anymore. You can opt-out of this behavior with `noWaitAfter`.\n- The execution time of the handler counts towards the timeout of the action/assertion that executed the handler. If your handler takes too long, it might cause timeouts.\n- You can register multiple handlers. However, only a single handler will be running at a time. Make sure the actions within a handler don't depend on another handler.\n\n> warning\n>\n> Running the handler will alter your page state mid-test. For example it will change the currently focused element and move the mouse. Make sure that actions that run after the handler are self-contained and do not rely on the focus and mouse state being unchanged.  \n>   \n> For example, consider a test that calls [locator.focus()](class-locator#locator-focus) followed by [keyboard.press()](class-keyboard#keyboard-press). If your handler clicks a button between these two actions, the focused element most likely will be wrong, and key press will happen on the unexpected element. Use [locator.press()](class-locator#locator-press) instead to avoid this problem.  \n>   \n> Another example is a series of mouse actions, where [mouse.move()](class-mouse#mouse-move) is followed by [mouse.down()](class-mouse#mouse-down). Again, when the handler runs between these two actions, the mouse position will be wrong during the mouse down. Prefer self-contained actions like [locator.click()](class-locator#locator-click) that do not rely on the state being unchanged by a handler.\n\n**Usage**\n\nAn example that closes a \"Sign up to the newsletter\" dialog when it appears:\n\n``` javascript\n// Setup the handler.\nawait page.addLocatorHandler(page.getByText('Sign up to the newsletter'), async () => {\n  await page.getByRole('button', { name: 'No thanks' }).click();\n});\n\n// Write the test as usual.\nawait page.goto('https://example.com');\nawait page.getByRole('button', { name: 'Start here' }).click();\n```\n\nAn example that skips the \"Confirm your security details\" page when it is shown:\n\n``` javascript\n// Setup the handler.\nawait page.addLocatorHandler(page.getByText('Confirm your security details'), async () => {\n  await page.getByRole('button', { name: 'Remind me later' }).click();\n});\n\n// Write the test as usual.\nawait page.goto('https://example.com');\nawait page.getByRole('button', { name: 'Start here' }).click();\n```\n\nAn example with a custom callback on every actionability check. It uses a `<body>` locator that is always visible, so the handler is called before every actionability check. It is important to specify `noWaitAfter`, because the handler does not hide the `<body>` element.\n\n``` javascript\n// Setup the handler.\nawait page.addLocatorHandler(page.locator('body'), async () => {\n  await page.evaluate(() => window.removeObstructionsForTestIfNeeded());\n}, { noWaitAfter: true });\n\n// Write the test as usual.\nawait page.goto('https://example.com');\nawait page.getByRole('button', { name: 'Start here' }).click();\n```\n\nHandler takes the original locator as an argument. You can also automatically remove the handler after a number of invocations by setting `times`:\n\n``` javascript\nawait page.addLocatorHandler(page.getByLabel('Close'), async locator => {\n  await locator.click();\n}, { times: 1 });\n```\n\n**Arguments**\n\n- `locator` [Locator](class-locator \"Locator\")\n\n  Locator that triggers the handler.\n\n- `handler`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([Locator](class-locator \"Locator\")):[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n  Function that should be run once `locator` appears. This function should get rid of the element that blocks actions like click.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    By default, after calling the handler Playwright will wait until the overlay becomes hidden, and only then Playwright will continue with the action/assertion that triggered the handler. This option allows to opt-out of this behavior, so that overlay can stay visible after the handler has run.\n\n  - `times` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Specifies the maximum number of times this handler should be called. Unlimited by default.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n&nbsp;"
- name: page.addScriptTag
  id: api/class-page#page-add-script-tag
  summary: Adds a <script> tag into the page with the desired url or content
  belongs_to: Page
  description: |-
    ### addScriptTag[​](#page-add-script-tag "Direct link to addScriptTag")

    Added before v1.9

    Adds a `<script>` tag into the page with the desired url or content. Returns the added tag when the script's onload fires or when the script content was injected into frame.

    **Usage**

    ``` javascript
    await page.addScriptTag();
    await page.addScriptTag(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `content` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Raw JavaScript content to be injected into frame.

      - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Path to the JavaScript file to be injected into frame. If `path` is a relative path, then it is resolved relative to the current working directory.

      - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Script type. Use 'module' in order to load a JavaScript ES6 module. See [script](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script) for more details.

      - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        URL of a script to be added.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[ElementHandle](class-elementhandle "ElementHandle")\>

    &nbsp;
- name: page.addStyleTag
  id: api/class-page#page-add-style-tag
  summary: Adds a <link rel="stylesheet"> tag into the page with the desired url or a <style type="text/css"> tag with the content
  belongs_to: Page
  description: |-
    ### addStyleTag[​](#page-add-style-tag "Direct link to addStyleTag")

    Added before v1.9

    Adds a `<link rel="stylesheet">` tag into the page with the desired url or a `<style type="text/css">` tag with the content. Returns the added tag when the stylesheet's onload fires or when the CSS content was injected into frame.

    **Usage**

    ``` javascript
    await page.addStyleTag();
    await page.addStyleTag(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `content` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Raw CSS content to be injected into frame.

      - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Path to the CSS file to be injected into frame. If `path` is a relative path, then it is resolved relative to the current working directory.

      - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        URL of the `<link>` tag.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[ElementHandle](class-elementhandle "ElementHandle")\>

    &nbsp;
- name: page.bringToFront
  id: api/class-page#page-bring-to-front
  summary: Brings page to front (activates tab)
  belongs_to: Page
  description: |-
    ### bringToFront[​](#page-bring-to-front "Direct link to bringToFront")

    Added before v1.9

    Brings page to front (activates tab).

    **Usage**

    ``` javascript
    await page.bringToFront();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: page.close
  id: api/class-page#page-close
  summary: If runBeforeUnload is false, does not run any unload handlers and waits for the page to be closed
  belongs_to: Page
  description: |-
    ### close[​](#page-close "Direct link to close")

    Added before v1.9

    If `runBeforeUnload` is `false`, does not run any unload handlers and waits for the page to be closed. If `runBeforeUnload` is `true` the method will run unload handlers, but will **not** wait for the page to close.

    By default, `page.close()` **does not** run `beforeunload` handlers.

    > note
    >
    > if `runBeforeUnload` is passed as true, a `beforeunload` dialog might be summoned and should be handled manually via [page.on('dialog')](class-page#page-event-dialog) event.

    **Usage**

    ``` javascript
    await page.close();
    await page.close(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `reason` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        The reason to be reported to the operations interrupted by the page closure.

      - `runBeforeUnload` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Defaults to `false`. Whether to run the [before unload](https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload) page handlers.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: page.content
  id: api/class-page#page-content
  summary: Gets the full HTML contents of the page, including the doctype
  belongs_to: Page
  description: |-
    ### content[​](#page-content "Direct link to content")

    Added before v1.9

    Gets the full HTML contents of the page, including the doctype.

    **Usage**

    ``` javascript
    await page.content();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: page.context
  id: api/class-page#page-context
  summary: Get the browser context that the page belongs to
  belongs_to: Page
  description: |-
    ### context[​](#page-context "Direct link to context")

    Added before v1.9

    Get the browser context that the page belongs to.

    **Usage**

    ``` javascript
    page.context();
    ```

    **Returns**

    - [BrowserContext](class-browsercontext "BrowserContext")

    &nbsp;
- name: page.dragAndDrop
  id: api/class-page#page-drag-and-drop
  summary: This method drags the source element to the target element
  belongs_to: Page
  description: |-
    ### dragAndDrop[​](#page-drag-and-drop "Direct link to dragAndDrop")

    This method drags the source element to the target element. It will first move to the source element, perform a `mousedown`, then move to the target element and perform a `mouseup`.

    **Usage**

    ``` javascript
    await page.dragAndDrop('#source', '#target');
    // or specify exact positions relative to the top-left corners of the elements:
    await page.dragAndDrop('#source', '#target', {
      sourcePosition: { x: 34, y: 7 },
      targetPosition: { x: 10, y: 20 },
    });
    ```

    **Arguments**

    - `source` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element to drag. If there are multiple elements satisfying the selector, the first will be used.

    - `target` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to search for an element to drop onto. If there are multiple elements satisfying the selector, the first will be used.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `force` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to bypass the [actionability](../actionability) checks. Defaults to `false`.

      - `noWaitAfter` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option has no effect.

        This option has no effect.

      - `sourcePosition` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Clicks on the source element at this point relative to the top-left corner of the element's padding box. If not specified, some visible point of the element is used.

      - `strict` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, the call requires selector to resolve to a single element. If given selector resolves to more than one element, the call throws an exception.

      - `targetPosition` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Drops on the target element at this point relative to the top-left corner of the element's padding box. If not specified, some visible point of the element is used.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      - `trial` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When set, this method only performs the [actionability](../actionability) checks and skips the action. Defaults to `false`. Useful to wait until the element is ready for the action without performing it.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: page.emulateMedia
  id: api/class-page#page-emulate-media
  summary: This method changes the CSS media type through the media argument, and/or the 'prefers-colors-scheme' media feature, using the colorScheme argument
  belongs_to: Page
  description: |-
    ### emulateMedia[​](#page-emulate-media "Direct link to emulateMedia")

    Added before v1.9

    This method changes the `CSS media type` through the `media` argument, and/or the `'prefers-colors-scheme'` media feature, using the `colorScheme` argument.

    **Usage**

    ``` javascript
    await page.evaluate(() => matchMedia('screen').matches);
    // → true
    await page.evaluate(() => matchMedia('print').matches);
    // → false

    await page.emulateMedia({ media: 'print' });
    await page.evaluate(() => matchMedia('screen').matches);
    // → false
    await page.evaluate(() => matchMedia('print').matches);
    // → true

    await page.emulateMedia({});
    await page.evaluate(() => matchMedia('screen').matches);
    // → true
    await page.evaluate(() => matchMedia('print').matches);
    // → false
    ```

    ``` javascript
    await page.emulateMedia({ colorScheme: 'dark' });
    await page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);
    // → true
    await page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);
    // → false
    await page.evaluate(() => matchMedia('(prefers-color-scheme: no-preference)').matches);
    // → false
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `colorScheme`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "light" \| "dark" \| "no-preference" *(optional)*

        Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. Passing `null` disables color scheme emulation.

      - `forcedColors`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "active" \| "none" *(optional)*

        Emulates `'forced-colors'` media feature, supported values are `'active'` and `'none'`. Passing `null` disables forced colors emulation.

      - `media`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "screen" \| "print" *(optional)*

        Changes the CSS media type of the page. The only allowed values are `'screen'`, `'print'` and `null`. Passing `null` disables CSS media emulation.

      - `reducedMotion`[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "reduce" \| "no-preference" *(optional)*

        Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. Passing `null` disables reduced motion emulation.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: page.evaluate
  id: api/class-page#page-evaluate
  summary: Returns the value of the pageFunction invocation
  belongs_to: Page
  description: |-
    ### evaluate[​](#page-evaluate "Direct link to evaluate")

    Added before v1.9

    Returns the value of the `pageFunction` invocation.

    If the function passed to the [page.evaluate()](class-page#page-evaluate) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [page.evaluate()](class-page#page-evaluate) would wait for the promise to resolve and return its value.

    If the function passed to the [page.evaluate()](class-page#page-evaluate) returns a non-[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") value, then [page.evaluate()](class-page#page-evaluate) resolves to `undefined`. Playwright also supports transferring some additional values that are not serializable by `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`.

    **Usage**

    Passing argument to `pageFunction`:

    ``` javascript
    const result = await page.evaluate(([x, y]) => {
      return Promise.resolve(x * y);
    }, [7, 8]);
    console.log(result); // prints "56"
    ```

    A string can also be passed in instead of a function:

    ``` javascript
    console.log(await page.evaluate('1 + 2')); // prints "3"
    const x = 10;
    console.log(await page.evaluate(`1 + ${x}`)); // prints "11"
    ```

    [ElementHandle](class-elementhandle "ElementHandle") instances can be passed as an argument to the [page.evaluate()](class-page#page-evaluate):

    ``` javascript
    const bodyHandle = await page.evaluate('document.body');
    const html = await page.evaluate<string, HTMLElement>(([body, suffix]) =>
      body.innerHTML + suffix, [bodyHandle, 'hello']
    );
    await bodyHandle.dispose();
    ```

    **Arguments**

    - `pageFunction`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Function to be evaluated in the page context.

    - `arg` [EvaluationArgument](../evaluating#evaluation-argument "EvaluationArgument") *(optional)*

      Optional argument to pass to `pageFunction`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>

    &nbsp;
- name: page.evaluateHandle
  id: api/class-page#page-evaluate-handle
  summary: Returns the value of the pageFunction invocation as a JSHandle
  belongs_to: Page
  description: |-
    ### evaluateHandle[​](#page-evaluate-handle "Direct link to evaluateHandle")

    Added before v1.9

    Returns the value of the `pageFunction` invocation as a [JSHandle](class-jshandle "JSHandle").

    The only difference between [page.evaluate()](class-page#page-evaluate) and [page.evaluateHandle()](class-page#page-evaluate-handle) is that [page.evaluateHandle()](class-page#page-evaluate-handle) returns [JSHandle](class-jshandle "JSHandle").

    If the function passed to the [page.evaluateHandle()](class-page#page-evaluate-handle) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [page.evaluateHandle()](class-page#page-evaluate-handle) would wait for the promise to resolve and return its value.

    **Usage**

    ``` javascript
    // Handle for the window object.
    const aWindowHandle = await page.evaluateHandle(() => Promise.resolve(window));
    ```

    A string can also be passed in instead of a function:

    ``` javascript
    const aHandle = await page.evaluateHandle('document'); // Handle for the 'document'
    ```

    [JSHandle](class-jshandle "JSHandle") instances can be passed as an argument to the [page.evaluateHandle()](class-page#page-evaluate-handle):

    ``` javascript
    const aHandle = await page.evaluateHandle(() => document.body);
    const resultHandle = await page.evaluateHandle(body => body.innerHTML, aHandle);
    console.log(await resultHandle.jsonValue());
    await resultHandle.dispose();
    ```

    **Arguments**

    - `pageFunction`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Function to be evaluated in the page context.

    - `arg` [EvaluationArgument](../evaluating#evaluation-argument "EvaluationArgument") *(optional)*

      Optional argument to pass to `pageFunction`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[JSHandle](class-jshandle "JSHandle")\>

    &nbsp;
- name: page.exposeBinding
  id: api/class-page#page-expose-binding
  summary: The method adds a function called name on the window object of every frame in this page
  belongs_to: Page
  description: |-
    ### exposeBinding[​](#page-expose-binding "Direct link to exposeBinding")

    Added before v1.9

    The method adds a function called `name` on the `window` object of every frame in this page. When called, the function executes `callback` and returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise") which resolves to the return value of `callback`. If the `callback` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), it will be awaited.

    The first argument of the `callback` function contains information about the caller: `{ browserContext: BrowserContext, page: Page, frame: Frame }`.

    See [browserContext.exposeBinding()](class-browsercontext#browser-context-expose-binding) for the context-wide version.

    > note
    >
    > Functions installed via [page.exposeBinding()](class-page#page-expose-binding) survive navigations.

    **Usage**

    An example of exposing page URL to all frames in a page:

    ``` javascript
    const { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.

    (async () => {
      const browser = await webkit.launch({ headless: false });
      const context = await browser.newContext();
      const page = await context.newPage();
      await page.exposeBinding('pageURL', ({ page }) => page.url());
      await page.setContent(`
        <script>
          async function onClick() {
            document.querySelector('div').textContent = await window.pageURL();
          }
        </script>
        <button onclick="onClick()">Click me</button>
        <div></div>
      `);
      await page.click('button');
    })();
    ```

    **Arguments**

    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Name of the function on the window object.

    - `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")

      Callback function that will be called in the Playwright's context.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `handle` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        > Deprecated
        >
        > This option will be removed in the future.

        Whether to pass the argument as a handle, instead of passing by value. When passing a handle, only one argument is supported. When passing by value, multiple arguments are supported.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: page.exposeFunction
  id: api/class-page#page-expose-function
  summary: The method adds a function called name on the window object of every frame in the page
  belongs_to: Page
  description: |-
    ### exposeFunction[​](#page-expose-function "Direct link to exposeFunction")

    Added before v1.9

    The method adds a function called `name` on the `window` object of every frame in the page. When called, the function executes `callback` and returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise") which resolves to the return value of `callback`.

    If the `callback` returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), it will be awaited.

    See [browserContext.exposeFunction()](class-browsercontext#browser-context-expose-function) for context-wide exposed function.

    > note
    >
    > Functions installed via [page.exposeFunction()](class-page#page-expose-function) survive navigations.

    **Usage**

    An example of adding a `sha256` function to the page:

    ``` javascript
    const { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.
    const crypto = require('crypto');

    (async () => {
      const browser = await webkit.launch({ headless: false });
      const page = await browser.newPage();
      await page.exposeFunction('sha256', text =>
        crypto.createHash('sha256').update(text).digest('hex'),
      );
      await page.setContent(`
        <script>
          async function onClick() {
            document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');
          }
        </script>
        <button onclick="onClick()">Click me</button>
        <div></div>
      `);
      await page.click('button');
    })();
    ```

    **Arguments**

    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Name of the function on the window object

    - `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")

      Callback function which will be called in Playwright's context.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: page.frame
  id: api/class-page#page-frame
  summary: Returns frame matching the specified criteria
  belongs_to: Page
  description: |-
    ### frame[​](#page-frame "Direct link to frame")

    Added before v1.9

    Returns frame matching the specified criteria. Either `name` or `url` must be specified.

    **Usage**

    ``` javascript
    const frame = page.frame('frame-name');
    ```

    ``` javascript
    const frame = page.frame({ url: /.*domain.*/ });
    ```

    **Arguments**

    - `frameSelector`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")
      - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")*(optional)*

        Frame name specified in the `iframe`'s `name` attribute. Optional.

      - `url`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([URL](https://nodejs.org/api/url.html "URL")):[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        A glob pattern, regex pattern or predicate receiving frame's `url` as a [URL](https://nodejs.org/api/url.html "URL") object. Optional.

      Frame name or other frame lookup options.

    **Returns**

    - [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Frame](class-frame "Frame")

    &nbsp;
- name: page.frameLocator
  id: api/class-page#page-frame-locator
  summary: When working with iframes, you can create a frame locator that will enter the iframe and allow selecting elements in that iframe
  belongs_to: Page
  description: |-
    ### frameLocator[​](#page-frame-locator "Direct link to frameLocator")

    When working with iframes, you can create a frame locator that will enter the iframe and allow selecting elements in that iframe.

    **Usage**

    Following snippet locates element with text "Submit" in the iframe with id `my-frame`, like `<iframe id="my-frame">`:

    ``` javascript
    const locator = page.frameLocator('#my-iframe').getByText('Submit');
    await locator.click();
    ```

    **Arguments**

    - `selector` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      A selector to use when resolving DOM element.

    **Returns**

    - [FrameLocator](class-framelocator "FrameLocator")

    &nbsp;
- name: page.frames
  id: api/class-page#page-frames
  summary: An array of all frames attached to the page
  belongs_to: Page
  description: |-
    ### frames[​](#page-frames "Direct link to frames")

    Added before v1.9

    An array of all frames attached to the page.

    **Usage**

    ``` javascript
    page.frames();
    ```

    **Returns**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Frame](class-frame "Frame")\>

    &nbsp;
- name: page.getByAltText
  id: api/class-page#page-get-by-alt-text
  summary: Allows locating elements by their alt text
  belongs_to: Page
  description: |-
    ### getByAltText[​](#page-get-by-alt-text "Direct link to getByAltText")

    Allows locating elements by their alt text.

    **Usage**

    For example, this method will find the image by alt text "Playwright logo":

    ``` html
    <img alt='Playwright logo'>
    ```

    ``` javascript
    await page.getByAltText('Playwright logo').click();
    ```

    **Arguments**

    - `text`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Text to locate the element for.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: page.getByLabel
  id: api/class-page#page-get-by-label
  summary: Allows locating input elements by the text of the associated <label> or aria-labelledby element, or by the aria-label attribute
  belongs_to: Page
  description: |-
    ### getByLabel[​](#page-get-by-label "Direct link to getByLabel")

    Allows locating input elements by the text of the associated `<label>` or `aria-labelledby` element, or by the `aria-label` attribute.

    **Usage**

    For example, this method will find inputs by label "Username" and "Password" in the following DOM:

    ``` html
    <input aria-label="Username">
    <label for="password-input">Password:</label>
    <input id="password-input">
    ```

    ``` javascript
    await page.getByLabel('Username').fill('john');
    await page.getByLabel('Password').fill('secret');
    ```

    **Arguments**

    - `text`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Text to locate the element for.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: page.getByPlaceholder
  id: api/class-page#page-get-by-placeholder
  summary: Allows locating input elements by the placeholder text
  belongs_to: Page
  description: |-
    ### getByPlaceholder[​](#page-get-by-placeholder "Direct link to getByPlaceholder")

    Allows locating input elements by the placeholder text.

    **Usage**

    For example, consider the following DOM structure.

    ``` html
    <input type="email" placeholder="name@example.com" />
    ```

    You can fill the input after locating it by the placeholder text:

    ``` javascript
    await page
        .getByPlaceholder('name@example.com')
        .fill('playwright@microsoft.com');
    ```

    **Arguments**

    - `text`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Text to locate the element for.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a regular expression. Note that exact match still trims whitespace.

    **Returns**

    - [Locator](class-locator "Locator")

    &nbsp;
- name: page.getByRole
  id: api/class-page#page-get-by-role
  summary: Allows locating elements by their ARIA role, ARIA attributes and accessible name
  belongs_to: Page
  description: |-
    ### getByRole[​](#page-get-by-role "Direct link to getByRole")

    Allows locating elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).

    **Usage**

    Consider the following DOM structure.

    ``` html
    <h3>Sign up</h3>
    <label>
      <input type="checkbox" /> Subscribe
    </label>
    <br/>
    <button>Submit</button>
    ```

    You can locate each element by it's implicit role:

    ``` javascript
    await expect(page.getByRole('heading', { name: 'Sign up' })).toBeVisible();

    await page.getByRole('checkbox', { name: 'Subscribe' }).check();

    await page.getByRole('button', { name: /submit/i }).click();
    ```

    **Arguments**

    - `role` "alert" \| "alertdialog" \| "application" \| "article" \| "banner" \| "blockquote" \| "button" \| "caption" \| "cell" \| "checkbox" \| "code" \| "columnheader" \| "combobox" \| "complementary" \| "contentinfo" \| "definition" \| "deletion" \| "dialog" \| "directory" \| "document" \| "emphasis" \| "feed" \| "figure" \| "form" \| "generic" \| "grid" \| "gridcell" \| "group" \| "heading" \| "img" \| "insertion" \| "link" \| "list" \| "listbox" \| "listitem" \| "log" \| "main" \| "marquee" \| "math" \| "meter" \| "menu" \| "menubar" \| "menuitem" \| "menuitemcheckbox" \| "menuitemradio" \| "navigation" \| "none" \| "note" \| "option" \| "paragraph" \| "presentation" \| "progressbar" \| "radio" \| "radiogroup" \| "region" \| "row" \| "rowgroup" \| "rowheader" \| "scrollbar" \| "search" \| "searchbox" \| "separator" \| "slider" \| "spinbutton" \| "status" \| "strong" \| "subscript" \| "superscript" \| "switch" \| "tab" \| "table" \| "tablist" \| "tabpanel" \| "term" \| "textbox" \| "time" \| "timer" \| "toolbar" \| "tooltip" \| "tree" \| "treegrid" \| "treeitem"

      Required aria role.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `checked` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        An attribute that is usually set by `aria-checked` or native `<input type=checkbox>` controls.

        Learn more about [`aria-checked`](https://www.w3.org/TR/wai-aria-1.2/#aria-checked).

      - `disabled` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        An attribute that is usually set by `aria-disabled` or `disabled`.

        > note
        >
        > Unlike most other attributes, `disabled` is inherited through the DOM hierarchy. Learn more about [`aria-disabled`](https://www.w3.org/TR/wai-aria-1.2/#aria-disabled).

      - `exact` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether `name` is matched exactly: case-sensitive and whole-string. Defaults to false. Ignored when `name` is a regular expression. Note that exact match still trims whitespace.

      - `expanded` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        An attribute that is usually set by `aria-expanded`.

        Learn more about [`aria-expanded`](https://www.w3.org/TR/wai-aria-1.2/#aria-expanded).

      - `includeHidden` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Option that controls whether hidden elements are matched. By default, only non-hidden elements, as [defined by ARIA](https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion), are matched by role selector.

        Learn more about [`aria-hidden`](https://www.w3.org/TR/wai-aria-1.2/#aria-hidden).

      - `level` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        A number attribute that is usually present for roles `heading`, `listitem`, `row`, `treeitem`, with default values for `<h1>-<h6>` elements.

        Learn more about [`aria-level`](https://www.w3.org/TR/wai-aria-1.2/#aria-level).

      - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") *(optional)*

        Option to match the [accessible name](https://w3c.github.io/accname/#dfn-accessible-name). By default, matching is case-insensitive and searches for a substring, use `exact` to control this behavior.

        Learn more about [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).

      - `pressed` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        An attribute that is usually set by `aria-pressed`.

        Learn more about [`aria-pressed`](https://www.w3.org/TR/wai-aria-1.2/#aria-pressed).

      - `selected` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        An attribute that is usually set by `aria-selected`.

        Learn more about [`aria-selected`](https://www.w3.org/TR/wai-aria-1.2/#aria-selected).

    **Returns**

    - [Locator](class-locator "Locator")

    **Details**

    Role selector **does not replace** accessibility audits and conformance tests, but rather gives early feedback about the ARIA guidelines.

    Many html elements have an implicitly [defined role](https://w3c.github.io/html-aam/#html-element-role-mappings) that is recognized by the role selector. You can find all the [supported roles here](https://www.w3.org/TR/wai-aria-1.2/#role_definitions). ARIA guidelines **do not recommend** duplicating implicit roles and attributes by setting `role` and/or `aria-*` attributes to default values.
- name: page.getByTestId
  id: api/class-page#page-get-by-test-id
  summary: Locate element by the test id
  belongs_to: Page
  description: "### getByTestId[​](#page-get-by-test-id \"Direct link to getByTestId\")\n\nLocate element by the test id.\n\n**Usage**\n\nConsider the following DOM structure.\n\n``` html\n<button data-testid=\"directions\">Itinéraire</button>\n```\n\nYou can locate the element by it's test id:\n\n``` javascript\nawait page.getByTestId('directions').click();\n```\n\n**Arguments**\n\n- `testId`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Id to locate the element by.\n\n**Returns**\n\n- [Locator](class-locator \"Locator\")\n\n**Details**\n\nBy default, the `data-testid` attribute is used as a test id. Use [selectors.setTestIdAttribute()](class-selectors#selectors-set-test-id-attribute) to configure a different test id attribute if necessary.\n\n``` javascript\n// Set custom test id attribute from @playwright/test config:\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    testIdAttribute: 'data-pw'\n  },\n});\n```\n\n### getByText\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-page](https://playwright.dev/docs/api/class-page)"
- name: PageAssertions
  id: api/class-pageassertions
  summary: The PageAssertions class provides assertion methods that can be used to make assertions about the Page state in the tests
  description: "# PageAssertions\n\nThe [PageAssertions](class-pageassertions \"PageAssertions\") class provides assertion methods that can be used to make assertions about the [Page](class-page \"Page\") state in the tests.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('navigates to login', async ({ page }) => {\n  // ...\n  await page.getByText('Sign in').click();\n  await expect(page).toHaveURL(/.*\\/login/);\n});\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### toHaveScreenshot(name)[​](#page-assertions-to-have-screenshot-1 \"Direct link to toHaveScreenshot(name)\")\n\nThis function will wait until two consecutive page screenshots yield the same result, and then compare the last screenshot with the expectation.\n\n**Usage**\n\n``` javascript\nawait expect(page).toHaveScreenshot('image.png');\n```\n\nNote that screenshot assertions only work with Playwright test runner.\n\n**Arguments**\n\n- `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n  Snapshot name.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `animations` \"disabled\" \\| \"allow\" *(optional)*\n\n    When set to `\"disabled\"`, stops CSS animations, CSS transitions and Web Animations. Animations get different treatment depending on their duration:\n\n    - finite animations are fast-forwarded to completion, so they'll fire `transitionend` event.\n    - infinite animations are canceled to initial state, and then played over after the screenshot.\n\n    Defaults to `\"disabled\"` that disables animations.\n\n  - `caret` \"hide\" \\| \"initial\" *(optional)*\n\n    When set to `\"hide\"`, screenshot will hide text caret. When set to `\"initial\"`, text caret behavior will not be changed. Defaults to `\"hide\"`.\n\n  - `clip` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      x-coordinate of top-left corner of clip area\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      y-coordinate of top-left corner of clip area\n\n    - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      width of clipping area\n\n    - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      height of clipping area\n\n    An object which specifies clipping of the resulting image.\n\n  - `fullPage` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, takes a screenshot of the full scrollable page, instead of the currently visible viewport. Defaults to `false`.\n\n  - `mask` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Locator](class-locator \"Locator\")\\> *(optional)*\n\n    Specify locators that should be masked when the screenshot is taken. Masked elements will be overlaid with a pink box `#FF00FF` (customized by `maskColor`) that completely covers its bounding box.\n\n  - `maskColor` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Specify the color of the overlay box for masked elements, in [CSS color format](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Default color is pink `#FF00FF`.\n\n  - `maxDiffPixelRatio` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1`. Default is configurable with `TestConfig.expect`. Unset by default.\n\n  - `maxDiffPixels` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable amount of pixels that could be different. Default is configurable with `TestConfig.expect`. Unset by default.\n\n  - `omitBackground` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images. Defaults to `false`.\n\n  - `scale` \"css\" \\| \"device\" *(optional)*\n\n    When set to `\"css\"`, screenshot will have a single pixel per each css pixel on the page. For high-dpi devices, this will keep screenshots small. Using `\"device\"` option will produce a single pixel per each device pixel, so screenshots of high-dpi devices will be twice as large or even larger.\n\n    Defaults to `\"css\"`.\n\n  - `stylePath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    File name containing the stylesheet to apply while making the screenshot. This is where you can hide dynamic elements, make elements invisible or change their properties to help you creating repeatable screenshots. This stylesheet pierces the Shadow DOM and applies to the inner frames.\n\n  - `threshold` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable perceived color difference in the [YIQ color space](https://en.wikipedia.org/wiki/YIQ) between the same pixel in compared images, between zero (strict) and one (lax), default is configurable with `TestConfig.expect`. Defaults to `0.2`.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toHaveScreenshot()[​](#page-assertions-to-have-screenshot-2 \"Direct link to toHaveScreenshot()\")\n\nThis function will wait until two consecutive page screenshots yield the same result, and then compare the last screenshot with the expectation.\n\n**Usage**\n\n``` javascript\nawait expect(page).toHaveScreenshot();\n```\n\nNote that screenshot assertions only work with Playwright test runner.\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `animations` \"disabled\" \\| \"allow\" *(optional)*\n\n    When set to `\"disabled\"`, stops CSS animations, CSS transitions and Web Animations. Animations get different treatment depending on their duration:\n\n    - finite animations are fast-forwarded to completion, so they'll fire `transitionend` event.\n    - infinite animations are canceled to initial state, and then played over after the screenshot.\n\n    Defaults to `\"disabled\"` that disables animations.\n\n  - `caret` \"hide\" \\| \"initial\" *(optional)*\n\n    When set to `\"hide\"`, screenshot will hide text caret. When set to `\"initial\"`, text caret behavior will not be changed. Defaults to `\"hide\"`.\n\n  - `clip` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      x-coordinate of top-left corner of clip area\n\n    - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      y-coordinate of top-left corner of clip area\n\n    - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      width of clipping area\n\n    - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      height of clipping area\n\n    An object which specifies clipping of the resulting image.\n\n  - `fullPage` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, takes a screenshot of the full scrollable page, instead of the currently visible viewport. Defaults to `false`.\n\n  - `mask` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Locator](class-locator \"Locator\")\\> *(optional)*\n\n    Specify locators that should be masked when the screenshot is taken. Masked elements will be overlaid with a pink box `#FF00FF` (customized by `maskColor`) that completely covers its bounding box.\n\n  - `maskColor` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Specify the color of the overlay box for masked elements, in [CSS color format](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Default color is pink `#FF00FF`.\n\n  - `maxDiffPixelRatio` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1`. Default is configurable with `TestConfig.expect`. Unset by default.\n\n  - `maxDiffPixels` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable amount of pixels that could be different. Default is configurable with `TestConfig.expect`. Unset by default.\n\n  - `omitBackground` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images. Defaults to `false`.\n\n  - `scale` \"css\" \\| \"device\" *(optional)*\n\n    When set to `\"css\"`, screenshot will have a single pixel per each css pixel on the page. For high-dpi devices, this will keep screenshots small. Using `\"device\"` option will produce a single pixel per each device pixel, so screenshots of high-dpi devices will be twice as large or even larger.\n\n    Defaults to `\"css\"`.\n\n  - `stylePath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    File name containing the stylesheet to apply while making the screenshot. This is where you can hide dynamic elements, make elements invisible or change their properties to help you creating repeatable screenshots. This stylesheet pierces the Shadow DOM and applies to the inner frames.\n\n  - `threshold` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable perceived color difference in the [YIQ color space](https://en.wikipedia.org/wiki/YIQ) between the same pixel in compared images, between zero (strict) and one (lax), default is configurable with `TestConfig.expect`. Defaults to `0.2`.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toHaveTitle[​](#page-assertions-to-have-title \"Direct link to toHaveTitle\")\n\nEnsures the page has the given title.\n\n**Usage**\n\n``` javascript\nawait expect(page).toHaveTitle(/.*checkout/);\n```\n\n**Arguments**\n\n- `titleOrRegExp` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Expected title or RegExp.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### toHaveURL[​](#page-assertions-to-have-url \"Direct link to toHaveURL\")\n\nEnsures the page is navigated to the given URL.\n\n**Usage**\n\n``` javascript\nawait expect(page).toHaveURL(/.*checkout/);\n```\n\n**Arguments**\n\n- `urlOrRegExp` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\n\n  Expected URL string or RegExp.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `ignoreCase` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to perform case-insensitive match. `ignoreCase` option takes precedence over the corresponding regular expression flag if specified.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n## Properties[​](#properties \"Direct link to Properties\")\n\n### not[​](#page-assertions-not \"Direct link to not\")\n\nMakes the assertion check for the opposite condition. For example, this code tests that the page URL doesn't contain `\"error\"`:\n\n``` javascript\nawait expect(page).not.toHaveURL('error');\n```\n\n**Usage**\n\n``` javascript\nexpect(page).not\n```\n\n**Type**\n\n- [PageAssertions](class-pageassertions \"PageAssertions\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-pageassertions](https://playwright.dev/docs/api/class-pageassertions)"
- name: pageAssertions.not
  id: api/class-pageassertions#page-assertions-not
  summary: Makes the assertion check for the opposite condition
  belongs_to: PageAssertions
  description: "### not[​](#page-assertions-not \"Direct link to not\")\n\nMakes the assertion check for the opposite condition. For example, this code tests that the page URL doesn't contain `\"error\"`:\n\n``` javascript\nawait expect(page).not.toHaveURL('error');\n```\n\n**Usage**\n\n``` javascript\nexpect(page).not\n```\n\n**Type**\n\n- [PageAssertions](class-pageassertions \"PageAssertions\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-pageassertions](https://playwright.dev/docs/api/class-pageassertions)"
- name: pageAssertions.toHaveScreenshot()
  id: api/class-pageassertions#page-assertions-to-have-screenshot-2
  summary: This function will wait until two consecutive page screenshots yield the same result, and then compare the last screenshot with the expectation
  belongs_to: PageAssertions
  description: |-
    ### toHaveScreenshot()[​](#page-assertions-to-have-screenshot-2 "Direct link to toHaveScreenshot()")

    This function will wait until two consecutive page screenshots yield the same result, and then compare the last screenshot with the expectation.

    **Usage**

    ``` javascript
    await expect(page).toHaveScreenshot();
    ```

    Note that screenshot assertions only work with Playwright test runner.

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `animations` "disabled" \| "allow" *(optional)*

        When set to `"disabled"`, stops CSS animations, CSS transitions and Web Animations. Animations get different treatment depending on their duration:

        - finite animations are fast-forwarded to completion, so they'll fire `transitionend` event.
        - infinite animations are canceled to initial state, and then played over after the screenshot.

        Defaults to `"disabled"` that disables animations.

      - `caret` "hide" \| "initial" *(optional)*

        When set to `"hide"`, screenshot will hide text caret. When set to `"initial"`, text caret behavior will not be changed. Defaults to `"hide"`.

      - `clip` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          x-coordinate of top-left corner of clip area

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          y-coordinate of top-left corner of clip area

        - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          width of clipping area

        - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          height of clipping area

        An object which specifies clipping of the resulting image.

      - `fullPage` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, takes a screenshot of the full scrollable page, instead of the currently visible viewport. Defaults to `false`.

      - `mask`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Locator](class-locator "Locator")\> *(optional)*

        Specify locators that should be masked when the screenshot is taken. Masked elements will be overlaid with a pink box `#FF00FF` (customized by `maskColor`) that completely covers its bounding box.

      - `maskColor` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Specify the color of the overlay box for masked elements, in [CSS color format](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Default color is pink `#FF00FF`.

      - `maxDiffPixelRatio` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1`. Default is configurable with `TestConfig.expect`. Unset by default.

      - `maxDiffPixels` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        An acceptable amount of pixels that could be different. Default is configurable with `TestConfig.expect`. Unset by default.

      - `omitBackground` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images. Defaults to `false`.

      - `scale` "css" \| "device" *(optional)*

        When set to `"css"`, screenshot will have a single pixel per each css pixel on the page. For high-dpi devices, this will keep screenshots small. Using `"device"` option will produce a single pixel per each device pixel, so screenshots of high-dpi devices will be twice as large or even larger.

        Defaults to `"css"`.

      - `stylePath`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        File name containing the stylesheet to apply while making the screenshot. This is where you can hide dynamic elements, make elements invisible or change their properties to help you creating repeatable screenshots. This stylesheet pierces the Shadow DOM and applies to the inner frames.

      - `threshold` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        An acceptable perceived color difference in the [YIQ color space](https://en.wikipedia.org/wiki/YIQ) between the same pixel in compared images, between zero (strict) and one (lax), default is configurable with `TestConfig.expect`. Defaults to `0.2`.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: pageAssertions.toHaveScreenshot(name)
  id: api/class-pageassertions#page-assertions-to-have-screenshot-1
  summary: This function will wait until two consecutive page screenshots yield the same result, and then compare the last screenshot with the expectation
  belongs_to: PageAssertions
  description: |-
    ### toHaveScreenshot(name)[​](#page-assertions-to-have-screenshot-1 "Direct link to toHaveScreenshot(name)")

    This function will wait until two consecutive page screenshots yield the same result, and then compare the last screenshot with the expectation.

    **Usage**

    ``` javascript
    await expect(page).toHaveScreenshot('image.png');
    ```

    Note that screenshot assertions only work with Playwright test runner.

    **Arguments**

    - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

      Snapshot name.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `animations` "disabled" \| "allow" *(optional)*

        When set to `"disabled"`, stops CSS animations, CSS transitions and Web Animations. Animations get different treatment depending on their duration:

        - finite animations are fast-forwarded to completion, so they'll fire `transitionend` event.
        - infinite animations are canceled to initial state, and then played over after the screenshot.

        Defaults to `"disabled"` that disables animations.

      - `caret` "hide" \| "initial" *(optional)*

        When set to `"hide"`, screenshot will hide text caret. When set to `"initial"`, text caret behavior will not be changed. Defaults to `"hide"`.

      - `clip` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          x-coordinate of top-left corner of clip area

        - `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          y-coordinate of top-left corner of clip area

        - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          width of clipping area

        - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          height of clipping area

        An object which specifies clipping of the resulting image.

      - `fullPage` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        When true, takes a screenshot of the full scrollable page, instead of the currently visible viewport. Defaults to `false`.

      - `mask`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Locator](class-locator "Locator")\> *(optional)*

        Specify locators that should be masked when the screenshot is taken. Masked elements will be overlaid with a pink box `#FF00FF` (customized by `maskColor`) that completely covers its bounding box.

      - `maskColor` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Specify the color of the overlay box for masked elements, in [CSS color format](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Default color is pink `#FF00FF`.

      - `maxDiffPixelRatio` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1`. Default is configurable with `TestConfig.expect`. Unset by default.

      - `maxDiffPixels` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        An acceptable amount of pixels that could be different. Default is configurable with `TestConfig.expect`. Unset by default.

      - `omitBackground` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images. Defaults to `false`.

      - `scale` "css" \| "device" *(optional)*

        When set to `"css"`, screenshot will have a single pixel per each css pixel on the page. For high-dpi devices, this will keep screenshots small. Using `"device"` option will produce a single pixel per each device pixel, so screenshots of high-dpi devices will be twice as large or even larger.

        Defaults to `"css"`.

      - `stylePath`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        File name containing the stylesheet to apply while making the screenshot. This is where you can hide dynamic elements, make elements invisible or change their properties to help you creating repeatable screenshots. This stylesheet pierces the Shadow DOM and applies to the inner frames.

      - `threshold` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        An acceptable perceived color difference in the [YIQ color space](https://en.wikipedia.org/wiki/YIQ) between the same pixel in compared images, between zero (strict) and one (lax), default is configurable with `TestConfig.expect`. Defaults to `0.2`.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>
- name: pageAssertions.toHaveTitle
  id: api/class-pageassertions#page-assertions-to-have-title
  summary: Ensures the page has the given title
  belongs_to: PageAssertions
  description: |-
    ### toHaveTitle[​](#page-assertions-to-have-title "Direct link to toHaveTitle")

    Ensures the page has the given title.

    **Usage**

    ``` javascript
    await expect(page).toHaveTitle(/.*checkout/);
    ```

    **Arguments**

    - `titleOrRegExp`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Expected title or RegExp.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: pageAssertions.toHaveURL
  id: api/class-pageassertions#page-assertions-to-have-url
  summary: Ensures the page is navigated to the given URL
  belongs_to: PageAssertions
  description: |-
    ### toHaveURL[​](#page-assertions-to-have-url "Direct link to toHaveURL")

    Ensures the page is navigated to the given URL.

    **Usage**

    ``` javascript
    await expect(page).toHaveURL(/.*checkout/);
    ```

    **Arguments**

    - `urlOrRegExp`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")

      Expected URL string or RegExp.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `ignoreCase` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to perform case-insensitive match. `ignoreCase` option takes precedence over the corresponding regular expression flag if specified.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    ## Properties[​](#properties "Direct link to Properties")
- name: Pages
  id: pages
  summary: Each BrowserContext can have multiple pages
  description: "# Pages\n\n## Pages[​](#pages \"Direct link to Pages\")\n\nEach [BrowserContext](api/class-browsercontext \"BrowserContext\") can have multiple pages. A [Page](api/class-page \"Page\") refers to a single tab or a popup window within a browser context. It should be used to navigate to URLs and interact with the page content.\n\n``` javascript\n// Create a page.\nconst page = await context.newPage();\n\n// Navigate explicitly, similar to entering a URL in the browser.\nawait page.goto('http://example.com');\n// Fill an input.\nawait page.locator('#search').fill('query');\n\n// Navigate implicitly by clicking a link.\nawait page.locator('#submit').click();\n// Expect a new url.\nconsole.log(page.url());\n```\n\n## Multiple pages[​](#multiple-pages \"Direct link to Multiple pages\")\n\nEach browser context can host multiple pages (tabs).\n\n- Each page behaves like a focused, active page. Bringing the page to front is not required.\n- Pages inside a context respect context-level emulation, like viewport sizes, custom network routes or browser locale.\n\n``` javascript\n// Create two pages\nconst pageOne = await context.newPage();\nconst pageTwo = await context.newPage();\n\n// Get pages of a browser context\nconst allPages = context.pages();\n```\n\n## Handling new pages[​](#handling-new-pages \"Direct link to Handling new pages\")\n\nThe `page` event on browser contexts can be used to get new pages that are created in the context. This can be used to handle new pages opened by `target=\"_blank\"` links.\n\n``` javascript\n// Start waiting for new page before clicking. Note no await.\nconst pagePromise = context.waitForEvent('page');\nawait page.getByText('open new tab').click();\nconst newPage = await pagePromise;\n// Interact with the new page normally.\nawait newPage.getByRole('button').click();\nconsole.log(await newPage.title());\n```\n\nIf the action that triggers the new page is unknown, the following pattern can be used.\n\n``` javascript\n// Get all new pages (including popups) in the context\ncontext.on('page', async page => {\n  await page.waitForLoadState();\n  console.log(await page.title());\n});\n```\n\n## Handling popups[​](#handling-popups \"Direct link to Handling popups\")\n\nIf the page opens a pop-up (e.g. pages opened by `target=\"_blank\"` links), you can get a reference to it by listening to the `popup` event on the page.\n\nThis event is emitted in addition to the `browserContext.on('page')` event, but only for popups relevant to this page.\n\n``` javascript\n// Start waiting for popup before clicking. Note no await.\nconst popupPromise = page.waitForEvent('popup');\nawait page.getByText('open the popup').click();\nconst popup = await popupPromise;\n// Interact with the new popup normally.\nawait popup.getByRole('button').click();\nconsole.log(await popup.title());\n```\n\nIf the action that triggers the popup is unknown, the following pattern can be used.\n\n``` javascript\n// Get all popups when they open\npage.on('popup', async popup => {\n  await popup.waitForLoadState();\n  console.log(await popup.title());\n});\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/pages](https://playwright.dev/docs/pages)"
- name: Parallelism
  id: test-parallel
  summary: Playwright Test runs tests in parallel
  description: "# Parallelism\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright Test runs tests in parallel. In order to achieve that, it runs several worker processes that run at the same time. By default, **test files** are run in parallel. Tests in a single file are run in order, in the same worker process.\n\n- You can configure tests using [`test.describe.configure`](#parallelize-tests-in-a-single-file) to run **tests in a single file** in parallel.\n- You can configure **entire project** to have all tests in all files to run in parallel using [testProject.fullyParallel](api/class-testproject#test-project-fully-parallel) or [testConfig.fullyParallel](api/class-testconfig#test-config-fully-parallel).\n- To **disable** parallelism limit the number of [workers to one](#disable-parallelism).\n\nYou can control the number of [parallel worker processes](#limit-workers) and [limit the number of failures](#limit-failures-and-fail-fast) in the whole test suite for efficiency.\n\n## Worker processes[​](#worker-processes \"Direct link to Worker processes\")\n\nAll tests run in worker processes. These processes are OS processes, running independently, orchestrated by the test runner. All workers have identical environments and each starts its own browser.\n\nYou can't communicate between the workers. Playwright Test reuses a single worker as much as it can to make testing faster, so multiple test files are usually run in a single worker one after another.\n\nWorkers are always shutdown after a [test failure](test-retries#failures) to guarantee pristine environment for following tests.\n\n## Limit workers[​](#limit-workers \"Direct link to Limit workers\")\n\nYou can control the maximum number of parallel worker processes via [command line](test-cli) or in the [configuration file](test-configuration).\n\nFrom the command line:\n\n``` javascript\nnpx playwright test --workers 4\n```\n\nIn the configuration file:\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Limit the number of workers on CI, use default locally\n  workers: process.env.CI ? 2 : undefined,\n});\n```\n\n## Disable parallelism[​](#disable-parallelism \"Direct link to Disable parallelism\")\n\nYou can disable any parallelism by allowing just a single worker at any time. Either set `workers: 1` option in the configuration file or pass `--workers=1` to the command line.\n\n``` javascript\nnpx playwright test --workers=1\n```\n\n## Parallelize tests in a single file[​](#parallelize-tests-in-a-single-file \"Direct link to Parallelize tests in a single file\")\n\nBy default, tests in a single file are run in order. If you have many independent tests in a single file, you might want to run them in parallel with [test.describe.configure()](api/class-test#test-describe-configure).\n\nNote that parallel tests are executed in separate worker processes and cannot share any state or global variables. Each test executes all relevant hooks just for itself, including `beforeAll` and `afterAll`.\n\n``` javascript\nimport { test } from '@playwright/test';\n\ntest.describe.configure({ mode: 'parallel' });\n\ntest('runs in parallel 1', async ({ page }) => { /* ... */ });\ntest('runs in parallel 2', async ({ page }) => { /* ... */ });\n```\n\nAlternatively, you can opt-in all tests into this fully-parallel mode in the configuration file:\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  fullyParallel: true,\n});\n```\n\nYou can also opt in for fully-parallel mode for just a few projects:\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // runs all tests in all files of a specific project in parallel\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n      fullyParallel: true,\n    },\n  ]\n});\n```\n\n## Serial mode[​](#serial-mode \"Direct link to Serial mode\")\n\nYou can annotate inter-dependent tests as serial. If one of the serial tests fails, all subsequent tests are skipped. All tests in a group are retried together.\n\n> note\n>\n> Using serial is not recommended. It is usually better to make your tests isolated, so they can be run independently.\n\n``` javascript\nimport { test, type Page } from '@playwright/test';\n\n// Annotate entire file as serial.\ntest.describe.configure({ mode: 'serial' });\n\nlet page: Page;\n\ntest.beforeAll(async ({ browser }) => {\n  page = await browser.newPage();\n});\n\ntest.afterAll(async () => {\n  await page.close();\n});\n\ntest('runs first', async () => {\n  await page.goto('https://playwright.dev/');\n});\n\ntest('runs second', async () => {\n  await page.getByText('Get Started').click();\n});\n```\n\n## Shard tests between multiple machines[​](#shard-tests-between-multiple-machines \"Direct link to Shard tests between multiple machines\")\n\nPlaywright Test can shard a test suite, so that it can be executed on multiple machines. See [sharding guide](test-sharding) for more details.\n\n``` javascript\nnpx playwright test --shard=2/3\n```\n\n## Limit failures and fail fast[​](#limit-failures-and-fail-fast \"Direct link to Limit failures and fail fast\")\n\nYou can limit the number of failed tests in the whole test suite by setting `maxFailures` config option or passing `--max-failures` command line flag.\n\nWhen running with \"max failures\" set, Playwright Test will stop after reaching this number of failed tests and skip any tests that were not executed yet. This is useful to avoid wasting resources on broken test suites.\n\nPassing command line option:\n\n``` javascript\nnpx playwright test --max-failures=10\n```\n\nSetting in the configuration file:\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Limit the number of failures on CI to save resources\n  maxFailures: process.env.CI ? 10 : undefined,\n});\n```\n\n## Worker index and parallel index[​](#worker-index-and-parallel-index \"Direct link to Worker index and parallel index\")\n\nEach worker process is assigned two ids: a unique worker index that starts with 1, and a parallel index that is between `0` and `workers - 1`. When a worker is restarted, for example after a failure, the new worker process has the same `parallelIndex` and a new `workerIndex`.\n\nYou can read an index from environment variables `process.env.TEST_WORKER_INDEX` and `process.env.TEST_PARALLEL_INDEX`, or access them through [testInfo.workerIndex](api/class-testinfo#test-info-worker-index) and [testInfo.parallelIndex](api/class-testinfo#test-info-parallel-index).\n\n### Isolate test data between parallel workers[​](#isolate-test-data-between-parallel-workers \"Direct link to Isolate test data between parallel workers\")\n\nYou can leverage `process.env.TEST_WORKER_INDEX` or [testInfo.workerIndex](api/class-testinfo#test-info-worker-index) mentioned above to isolate user data in the database between tests running on different workers. All tests run by the worker reuse the same user.\n\nCreate `playwright/fixtures.ts` file that will [create `dbUserName` fixture](test-fixtures#creating-a-fixture) and initialize a new user in the test database. Use [testInfo.workerIndex](api/class-testinfo#test-info-worker-index) to differentiate between workers.\n\n``` javascript\nimport { test as baseTest, expect } from '@playwright/test';\n// Import project utils for managing users in the test database.\nimport { createUserInTestDatabase, deleteUserFromTestDatabase } from './my-db-utils';\n\nexport * from '@playwright/test';\nexport const test = baseTest.extend<{}, { dbUserName: string }>({\n  // Returns db user name unique for the worker.\n  dbUserName: [async ({ }, use) => {\n    // Use workerIndex as a unique identifier for each worker.\n    const userName = `user-${test.info().workerIndex}`;\n    // Initialize user in the database.\n    await createUserInTestDatabase(userName);\n    await use(userName);\n    // Clean up after the tests are done.\n    await deleteUserFromTestDatabase(userName);\n  }, { scope: 'worker' }],\n});\n```\n\nNow, each test file should import `test` from our fixtures file instead of `@playwright/test`.\n\n``` javascript\n// Important: import our fixtures.\nimport { test, expect } from '../playwright/fixtures';\n\ntest('test', async ({ dbUserName }) => {\n  // Use the user name in the test.\n});\n```\n\n## Control test order[​](#control-test-order \"Direct link to Control test order\")\n\nPlaywright Test runs tests from a single file in the order of declaration, unless you [parallelize tests in a single file](#parallelize-tests-in-a-single-file).\n\nThere is no guarantee about the order of test execution across the files, because Playwright Test runs test files in parallel by default. However, if you [disable parallelism](#disable-parallelism), you can control test order by either naming your files in alphabetical order or using a \"test list\" file.\n\n### Sort test files alphabetically[​](#sort-test-files-alphabetically \"Direct link to Sort test files alphabetically\")\n\nWhen you **disable parallel test execution**, Playwright Test runs test files in alphabetical order. You can use some naming convention to control the test order, for example `001-user-signin-flow.spec.ts`, `002-create-new-document.spec.ts` and so on.\n\n### Use a \"test list\" file[​](#use-a-test-list-file \"Direct link to Use a \"test list\" file\")\n\n> warning\n>\n> Tests lists are discouraged and supported as a best-effort only. Some features such as VS Code Extension and tracing may not work properly with test lists.\n\nYou can put your tests in helper functions in multiple files. Consider the following example where tests are not defined directly in the file, but rather in a wrapper function.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\nexport default function createTests() {\n  test('feature-a example test', async ({ page }) => {\n    // ... test goes here\n  });\n}\n```\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\nexport default function createTests() {\n  test.use({ viewport: { width: 500, height: 500 } });\n\n  test('feature-b example test', async ({ page }) => {\n    // ... test goes here\n  });\n}\n```\n\nYou can create a test list file that will control the order of tests - first run `feature-b` tests, then `feature-a` tests. Note how each test file is wrapped in a `test.describe()` block that calls the function where tests are defined. This way `test.use()` calls only affect tests from a single file.\n\n``` javascript\nimport { test } from '@playwright/test';\nimport featureBTests from './feature-b.spec.ts';\nimport featureATests from './feature-a.spec.ts';\n\ntest.describe(featureBTests);\ntest.describe(featureATests);\n```\n\nNow **disable parallel execution** by setting workers to one, and specify your test list file.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  workers: 1,\n  testMatch: 'test.list.ts',\n});\n```\n\n> note\n>\n> Do not define your tests directly in a helper file. This could lead to unexpected results because your tests are now dependent on the order of `import`/`require` statements. Instead, wrap tests in a function that will be explicitly called by a test list file, as in the example above.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/test-parallel](https://playwright.dev/docs/test-parallel)"
- name: Parameterize tests
  id: test-parameterize
  summary: You can either parameterize tests on a test level or on a project level
  description: "# Parameterize tests\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nYou can either parameterize tests on a test level or on a project level.\n\n## Parameterized Tests[​](#parameterized-tests \"Direct link to Parameterized Tests\")\n\n``` javascript\n[\n  { name: 'Alice', expected: 'Hello, Alice!' },\n  { name: 'Bob', expected: 'Hello, Bob!' },\n  { name: 'Charlie', expected: 'Hello, Charlie!' },\n].forEach(({ name, expected }) => {\n  // You can also do it with test.describe() or with multiple tests as long the test name is unique.\n  test(`testing with ${name}`, async ({ page }) => {\n    await page.goto(`https://example.com/greet?name=${name}`);\n    await expect(page.getByRole('heading')).toHaveText(expected);\n  });\n});\n```\n\n### Before and after hooks[​](#before-and-after-hooks \"Direct link to Before and after hooks\")\n\nMost of the time you should put `beforeEach`, `beforeAll`, `afterEach` and `afterAll` hooks outside of `forEach`, so that hooks are executed just once:\n\n``` javascript\ntest.beforeEach(async ({ page }) => {\n  // ...\n});\n\ntest.afterEach(async ({ page }) => {\n  // ...\n});\n\n[\n  { name: 'Alice', expected: 'Hello, Alice!' },\n  { name: 'Bob', expected: 'Hello, Bob!' },\n  { name: 'Charlie', expected: 'Hello, Charlie!' },\n].forEach(({ name, expected }) => {\n  test(`testing with ${name}`, async ({ page }) => {\n    await page.goto(`https://example.com/greet?name=${name}`);\n    await expect(page.getByRole('heading')).toHaveText(expected);\n  });\n});\n```\n\nIf you want to have hooks for each test, you can put them inside a `describe()` - so they are executed for each iteration / each individual test:\n\n``` javascript\n[\n  { name: 'Alice', expected: 'Hello, Alice!' },\n  { name: 'Bob', expected: 'Hello, Bob!' },\n  { name: 'Charlie', expected: 'Hello, Charlie!' },\n].forEach(({ name, expected }) => {\n  test.describe(() => {\n    test.beforeEach(async ({ page }) => {\n      await page.goto(`https://example.com/greet?name=${name}`);\n    });\n    test(`testing with ${expected}`, async ({ page }) => {\n      await expect(page.getByRole('heading')).toHaveText(expected);\n    });\n  });\n});\n```\n\n## Parameterized Projects[​](#parameterized-projects \"Direct link to Parameterized Projects\")\n\nPlaywright Test supports running multiple test projects at the same time. In the following example, we'll run two projects with different options.\n\nWe declare the option `person` and set the value in the config. The first project runs with the value `Alice` and the second with the value `Bob`.\n\n- TypeScript\n- JavaScript\n\n``` javascript\nimport { test as base } from '@playwright/test';\n\nexport type TestOptions = {\n  person: string;\n};\n\nexport const test = base.extend<TestOptions>({\n  // Define an option and provide a default value.\n  // We can later override it in the config.\n  person: ['John', { option: true }],\n});\n```\n\n``` javascript\nconst base = require('@playwright/test');\n\nexports.test = base.test.extend({\n  // Define an option and provide a default value.\n  // We can later override it in the config.\n  person: ['John', { option: true }],\n});\n```\n\nWe can use this option in the test, similarly to [fixtures](test-fixtures).\n\n``` javascript\nimport { test } from './my-test';\n\ntest('test 1', async ({ page, person }) => {\n  await page.goto(`/index.html`);\n  await expect(page.locator('#node')).toContainText(person);\n  // ...\n});\n```\n\nNow, we can run tests in multiple configurations by using projects.\n\n- TypeScript\n- JavaScript\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\nimport type { TestOptions } from './my-test';\n\nexport default defineConfig<TestOptions>({\n  projects: [\n    {\n      name: 'alice',\n      use: { person: 'Alice' },\n    },\n    {\n      name: 'bob',\n      use: { person: 'Bob' },\n    },\n  ]\n});\n```\n\n``` javascript\n// @ts-check\n\nmodule.exports = defineConfig({\n  projects: [\n    {\n      name: 'alice',\n      use: { person: 'Alice' },\n    },\n    {\n      name: 'bob',\n      use: { person: 'Bob' },\n    },\n  ]\n});\n```\n\nWe can also use the option in a fixture. Learn more about [fixtures](test-fixtures).\n\n- TypeScript\n- JavaScript\n\n``` javascript\nimport { test as base } from '@playwright/test';\n\nexport type TestOptions = {\n  person: string;\n};\n\nexport const test = base.extend<TestOptions>({\n  // Define an option and provide a default value.\n  // We can later override it in the config.\n  person: ['John', { option: true }],\n\n  // Override default \"page\" fixture.\n  page: async ({ page, person }, use) => {\n    await page.goto('/chat');\n    // We use \"person\" parameter as a \"name\" for the chat room.\n    await page.getByLabel('User Name').fill(person);\n    await page.getByText('Enter chat room').click();\n    // Each test will get a \"page\" that already has the person name.\n    await use(page);\n  },\n});\n```\n\n``` javascript\nconst base = require('@playwright/test');\n\nexports.test = base.test.extend({\n  // Define an option and provide a default value.\n  // We can later override it in the config.\n  person: ['John', { option: true }],\n\n  // Override default \"page\" fixture.\n  page: async ({ page, person }, use) => {\n    await page.goto('/chat');\n    // We use \"person\" parameter as a \"name\" for the chat room.\n    await page.getByLabel('User Name').fill(person);\n    await page.getByText('Enter chat room').click();\n    // Each test will get a \"page\" that already has the person name.\n    await use(page);\n  },\n});\n```\n\n> note\n>\n> Parameterized projects behavior has changed in version 1.18. [Learn more](release-notes#breaking-change-custom-config-options).\n\n## Passing Environment Variables[​](#passing-environment-variables \"Direct link to Passing Environment Variables\")\n\nYou can use environment variables to configure tests from the command line.\n\nFor example, consider the following test file that needs a username and a password. It is usually a good idea not to store your secrets in the source code, so we'll need a way to pass secrets from outside.\n\n``` javascript\ntest(`example test`, async ({ page }) => {\n  // ...\n  await page.getByLabel('User Name').fill(process.env.USER_NAME);\n  await page.getByLabel('Password').fill(process.env.PASSWORD);\n});\n```\n\nYou can run this test with your secret username and password set in the command line.\n\n- Bash\n- PowerShell\n- Batch\n\n``` javascript\nUSER_NAME=me PASSWORD=secret npx playwright test\n```\n\n``` javascript\n$env:USER_NAME=me\n$env:PASSWORD=secret\nnpx playwright test\n```\n\n``` javascript\nset USER_NAME=me\nset PASSWORD=secret\nnpx playwright test\n```\n\nSimilarly, configuration file can also read environment variables passed through the command line.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    baseURL: process.env.STAGING === '1' ? 'http://staging.example.test/' : 'http://example.test/',\n  }\n});\n```\n\nNow, you can run tests against a staging or a production environment:\n\n- Bash\n- PowerShell\n- Batch\n\n``` javascript\nSTAGING=1 npx playwright test\n```\n\n``` javascript\n$env:STAGING=1\nnpx playwright test\n```\n\n``` javascript\nset STAGING=1\nnpx playwright test\n```\n\n### .env files[​](#env-files \"Direct link to .env files\")\n\nTo make environment variables easier to manage, consider something like `.env` files. Here is an example that uses [`dotenv`](https://www.npmjs.com/package/dotenv) package to read environment variables directly in the configuration file.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\nimport dotenv from 'dotenv';\nimport path from 'path';\n\n// Read from \".env\" file.\ndotenv.config({ path: path.resolve(__dirname, '.env') });\n\n// Alternatively, read from \"../my.env\" file.\ndotenv.config({ path: path.resolve(__dirname, '..', 'my.env') });\n\nexport default defineConfig({\n  use: {\n    baseURL: process.env.STAGING === '1' ? 'http://staging.example.test/' : 'http://example.test/',\n  }\n});\n```\n\nNow, you can just edit `.env` file to set any variables you'd like.\n\n``` javascript\n# .env file\nSTAGING=0\nUSER_NAME=me\nPASSWORD=secret\n```\n\nRun tests as usual, your environment variables should be picked up.\n\n``` javascript\nnpx playwright test\n```\n\n## Create tests via a CSV file[​](#create-tests-via-a-csv-file \"Direct link to Create tests via a CSV file\")\n\nThe Playwright test-runner runs in Node.js, this means you can directly read files from the file system and parse them with your preferred CSV library.\n\nSee for example this CSV file, in our example `input.csv`:\n\n``` javascript\n\"test_case\",\"some_value\",\"some_other_value\"\n\"value 1\",\"value 11\",\"foobar1\"\n\"value 2\",\"value 22\",\"foobar21\"\n\"value 3\",\"value 33\",\"foobar321\"\n\"value 4\",\"value 44\",\"foobar4321\"\n```\n\nBased on this we'll generate some tests by using the [csv-parse](https://www.npmjs.com/package/csv-parse) library from NPM:\n\n``` javascript\nimport fs from 'fs';\nimport path from 'path';\nimport { test } from '@playwright/test';\nimport { parse } from 'csv-parse/sync';\n\nconst records = parse(fs.readFileSync(path.join(__dirname, 'input.csv')), {\n  columns: true,\n  skip_empty_lines: true\n});\n\nfor (const record of records) {\n  test(`foo: ${record.test_case}`, async ({ page }) => {\n    console.log(record.test_case, record.some_value, record.some_other_value);\n  });\n}\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/test-parameterize](https://playwright.dev/docs/test-parameterize)"
- name: Playwright Library
  id: api/class-playwright
  summary: Playwright module provides a method to launch a browser instance
  description: "# Playwright Library\n\nPlaywright module provides a method to launch a browser instance. The following is a typical example of using Playwright to drive automation:\n\n``` javascript\nconst { chromium, firefox, webkit } = require('playwright');\n\n(async () => {\n  const browser = await chromium.launch();  // Or 'firefox' or 'webkit'.\n  const page = await browser.newPage();\n  await page.goto('http://example.com');\n  // other actions...\n  await browser.close();\n})();\n```\n\n## Properties[​](#properties \"Direct link to Properties\")\n\n### chromium[​](#playwright-chromium \"Direct link to chromium\")\n\nAdded before v1.9\n\nThis object can be used to launch or connect to Chromium, returning instances of [Browser](class-browser \"Browser\").\n\n**Usage**\n\n``` javascript\nplaywright.chromium\n```\n\n**Type**\n\n- [BrowserType](class-browsertype \"BrowserType\")\n\n### devices[​](#playwright-devices \"Direct link to devices\")\n\nAdded before v1.9\n\nReturns a dictionary of devices to be used with [browser.newContext()](class-browser#browser-new-context) or [browser.newPage()](class-browser#browser-new-page).\n\n``` javascript\nconst { webkit, devices } = require('playwright');\nconst iPhone = devices['iPhone 6'];\n\n(async () => {\n  const browser = await webkit.launch();\n  const context = await browser.newContext({\n    ...iPhone\n  });\n  const page = await context.newPage();\n  await page.goto('http://example.com');\n  // other actions...\n  await browser.close();\n})();\n```\n\n**Usage**\n\n``` javascript\nplaywright.devices\n```\n\n**Type**\n\n- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n### errors[​](#playwright-errors \"Direct link to errors\")\n\nAdded before v1.9\n\nPlaywright methods might throw errors if they are unable to fulfill a request. For example, [locator.waitFor()](class-locator#locator-wait-for) might fail if the selector doesn't match any nodes during the given timeframe.\n\nFor certain types of errors Playwright uses specific error classes. These classes are available via [`playwright.errors`](#playwright-errors).\n\nAn example of handling a timeout error:\n\n``` javascript\ntry {\n  await page.locator('.foo').waitFor();\n} catch (e) {\n  if (e instanceof playwright.errors.TimeoutError) {\n    // Do something if this is a timeout.\n  }\n}\n```\n\n**Usage**\n\n``` javascript\nplaywright.errors\n```\n\n**Type**\n\n- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `TimeoutError` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")\n\n    A class of [TimeoutError](class-timeouterror \"TimeoutError\").\n\n### firefox[​](#playwright-firefox \"Direct link to firefox\")\n\nAdded before v1.9\n\nThis object can be used to launch or connect to Firefox, returning instances of [Browser](class-browser \"Browser\").\n\n**Usage**\n\n``` javascript\nplaywright.firefox\n```\n\n**Type**\n\n- [BrowserType](class-browsertype \"BrowserType\")\n\n### request[​](#playwright-request \"Direct link to request\")\n\nExposes API that can be used for the Web API testing.\n\n**Usage**\n\n``` javascript\nplaywright.request\n```\n\n**Type**\n\n- [APIRequest](class-apirequest \"APIRequest\")\n\n### selectors[​](#playwright-selectors \"Direct link to selectors\")\n\nAdded before v1.9\n\nSelectors can be used to install custom selector engines. See [extensibility](../extensibility) for more information.\n\n**Usage**\n\n``` javascript\nplaywright.selectors\n```\n\n**Type**\n\n- [Selectors](class-selectors \"Selectors\")\n\n### webkit[​](#playwright-webkit \"Direct link to webkit\")\n\nAdded before v1.9\n\nThis object can be used to launch or connect to WebKit, returning instances of [Browser](class-browser \"Browser\").\n\n**Usage**\n\n``` javascript\nplaywright.webkit\n```\n\n**Type**\n\n- [BrowserType](class-browsertype \"BrowserType\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-playwright](https://playwright.dev/docs/api/class-playwright)"
- name: Playwright Test
  id: api/class-test
  summary: Playwright Test provides a test function to declare tests and expect function to write assertions
  description: "# Playwright Test\n\nPlaywright Test provides a `test` function to declare tests and `expect` function to write assertions.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n  const name = await page.innerText('.navbar__title');\n  expect(name).toBe('Playwright');\n});\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### test[​](#test-call \"Direct link to test\")\n\nDeclares a test.\n\n- `test(title, body)`\n- `test(title, details, body)`\n\n**Usage**\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n  // ...\n});\n```\n\n**Tags**\n\nYou can tag tests by providing additional test details. Alternatively, you can include tags in the test title. Note that each tag must start with `@` symbol.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', {\n  tag: '@smoke',\n}, async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n  // ...\n});\n\ntest('another test @smoke', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n  // ...\n});\n```\n\nTest tags are displayed in the test report, and are available to a custom reporter via `TestCase.tags` property.\n\nYou can also filter tests by their tags during test execution:\n\n- in the [command line](../test-cli#reference);\n- in the config with [testConfig.grep](class-testconfig#test-config-grep) and [testProject.grep](class-testproject#test-project-grep);\n\nLearn more about [tagging](../test-annotations#tag-tests).\n\n**Annotations**\n\nYou can annotate tests by providing additional test details.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', {\n  annotation: {\n    type: 'issue',\n    description: 'https://github.com/microsoft/playwright/issues/23180',\n  },\n}, async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n  // ...\n});\n```\n\nTest annotations are displayed in the test report, and are available to a custom reporter via `TestCase.annotations` property.\n\nYou can also add annotations during runtime by manipulating [testInfo.annotations](class-testinfo#test-info-annotations).\n\nLearn more about [test annotations](../test-annotations).\n\n**Arguments**\n\n- `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Test title.\n\n- `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `tag` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n  - `annotation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Annotation type, for example `'issue'`.\n\n    - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n      Optional annotation description, for example an issue url.\n\n  Additional test details.\n\n- `body` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([Fixtures](class-fixtures \"Fixtures\"), [TestInfo](class-testinfo \"TestInfo\"))\n\n  Test body that takes one or two arguments: an object with fixtures and optional [TestInfo](class-testinfo \"TestInfo\").\n\n### test.afterAll[​](#test-after-all \"Direct link to test.afterAll\")\n\nDeclares an `afterAll` hook that is executed once per worker after all tests.\n\nWhen called in the scope of a test file, runs after all tests in the file. When called inside a [test.describe()](class-test#test-describe) group, runs after all tests in the group.\n\n**Usage**\n\n``` javascript\ntest.afterAll(async () => {\n  console.log('Done with tests');\n  // ...\n});\n```\n\nAlternatively, you can declare a hook **with a title**.\n\n``` javascript\ntest.afterAll('Teardown', async () => {\n  console.log('Done with tests');\n  // ...\n});\n```\n\n**Arguments**\n\n- `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  Hook title.\n\n- `hookFunction` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([Fixtures](class-fixtures \"Fixtures\"), [TestInfo](class-testinfo \"TestInfo\"))\n\n  Hook function that takes one or two arguments: an object with worker fixtures and optional [TestInfo](class-testinfo \"TestInfo\").\n\n**Details**\n\nWhen multiple `afterAll` hooks are added, they will run in the order of their registration.\n\nNote that worker process is restarted on test failures, and `afterAll` hook runs again in the new worker. Learn more about [workers and failures](../test-retries).\n\nPlaywright will continue running all applicable hooks even if some of them have failed.\n\n- `test.afterAll(hookFunction)`\n- `test.afterAll(title, hookFunction)`\n\n### test.afterEach[​](#test-after-each \"Direct link to test.afterEach\")\n\nDeclares an `afterEach` hook that is executed after each test.\n\nWhen called in the scope of a test file, runs after each test in the file. When called inside a [test.describe()](class-test#test-describe) group, runs after each test in the group.\n\nYou can access all the same [Fixtures](class-fixtures \"Fixtures\") as the test body itself, and also the [TestInfo](class-testinfo \"TestInfo\") object that gives a lot of useful information. For example, you can check whether the test succeeded or failed.\n\n- `test.afterEach(hookFunction)`\n- `test.afterEach(title, hookFunction)`\n\n**Usage**\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.afterEach(async ({ page }) => {\n  console.log(`Finished ${test.info().title} with status ${test.info().status}`);\n\n  if (test.info().status !== test.info().expectedStatus)\n    console.log(`Did not run as expected, ended up at ${page.url()}`);\n});\n\ntest('my test', async ({ page }) => {\n  // ...\n});\n```\n\nAlternatively, you can declare a hook **with a title**.\n\n``` javascript\ntest.afterEach('Status check', async ({ page }) => {\n  if (test.info().status !== test.info().expectedStatus)\n    console.log(`Did not run as expected, ended up at ${page.url()}`);\n});\n```\n\n**Arguments**\n\n- `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  Hook title.\n\n- `hookFunction` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([Fixtures](class-fixtures \"Fixtures\"), [TestInfo](class-testinfo \"TestInfo\"))\n\n  Hook function that takes one or two arguments: an object with fixtures and optional [TestInfo](class-testinfo \"TestInfo\").\n\n**Details**\n\nWhen multiple `afterEach` hooks are added, they will run in the order of their registration.\n\nPlaywright will continue running all applicable hooks even if some of them have failed.\n\n### test.beforeAll[​](#test-before-all \"Direct link to test.beforeAll\")\n\nDeclares a `beforeAll` hook that is executed once per worker process before all tests.\n\nWhen called in the scope of a test file, runs before all tests in the file. When called inside a [test.describe()](class-test#test-describe) group, runs before all tests in the group.\n\nYou can use [test.afterAll()](class-test#test-after-all) to teardown any resources set up in `beforeAll`.\n\n- `test.beforeAll(hookFunction)`\n- `test.beforeAll(title, hookFunction)`\n\n**Usage**\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.beforeAll(async () => {\n  console.log('Before tests');\n});\n\ntest.afterAll(async () => {\n  console.log('After tests');\n});\n\ntest('my test', async ({ page }) => {\n  // ...\n});\n```\n\nAlternatively, you can declare a hook **with a title**.\n\n``` javascript\ntest.beforeAll('Setup', async () => {\n  console.log('Before tests');\n});\n```\n\n**Arguments**\n\n- `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  Hook title.\n\n- `hookFunction` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([Fixtures](class-fixtures \"Fixtures\"), [TestInfo](class-testinfo \"TestInfo\"))\n\n  Hook function that takes one or two arguments: an object with worker fixtures and optional [TestInfo](class-testinfo \"TestInfo\").\n\n**Details**\n\nWhen multiple `beforeAll` hooks are added, they will run in the order of their registration.\n\nNote that worker process is restarted on test failures, and `beforeAll` hook runs again in the new worker. Learn more about [workers and failures](../test-retries).\n\nPlaywright will continue running all applicable hooks even if some of them have failed.\n\n### test.beforeEach[​](#test-before-each \"Direct link to test.beforeEach\")\n\nDeclares a `beforeEach` hook that is executed before each test.\n\nWhen called in the scope of a test file, runs before each test in the file. When called inside a [test.describe()](class-test#test-describe) group, runs before each test in the group.\n\nYou can access all the same [Fixtures](class-fixtures \"Fixtures\") as the test body itself, and also the [TestInfo](class-testinfo \"TestInfo\") object that gives a lot of useful information. For example, you can navigate the page before starting the test.\n\nYou can use [test.afterEach()](class-test#test-after-each) to teardown any resources set up in `beforeEach`.\n\n- `test.beforeEach(hookFunction)`\n- `test.beforeEach(title, hookFunction)`\n\n**Usage**\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.beforeEach(async ({ page }) => {\n  console.log(`Running ${test.info().title}`);\n  await page.goto('https://my.start.url/');\n});\n\ntest('my test', async ({ page }) => {\n  expect(page.url()).toBe('https://my.start.url/');\n});\n```\n\nAlternatively, you can declare a hook **with a title**.\n\n``` javascript\ntest.beforeEach('Open start URL', async ({ page }) => {\n  console.log(`Running ${test.info().title}`);\n  await page.goto('https://my.start.url/');\n});\n```\n\n**Arguments**\n\n- `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  Hook title.\n\n- `hookFunction` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([Fixtures](class-fixtures \"Fixtures\"), [TestInfo](class-testinfo \"TestInfo\"))\n\n  Hook function that takes one or two arguments: an object with fixtures and optional [TestInfo](class-testinfo \"TestInfo\").\n\n**Details**\n\nWhen multiple `beforeEach` hooks are added, they will run in the order of their registration.\n\nPlaywright will continue running all applicable hooks even if some of them have failed.\n\n### test.describe[​](#test-describe \"Direct link to test.describe\")\n\nDeclares a group of tests.\n\n- `test.describe(title, callback)`\n- `test.describe(callback)`\n- `test.describe(title, details, callback)`\n\n**Usage**\n\nYou can declare a group of tests with a title. The title will be visible in the test report as a part of each test's title.\n\n``` javascript\ntest.describe('two tests', () => {\n  test('one', async ({ page }) => {\n    // ...\n  });\n\n  test('two', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n**Anonymous group**\n\nYou can also declare a test group without a title. This is convenient to give a group of tests a common option with [test.use()](class-test#test-use).\n\n``` javascript\ntest.describe(() => {\n  test.use({ colorScheme: 'dark' });\n\n  test('one', async ({ page }) => {\n    // ...\n  });\n\n  test('two', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n**Tags**\n\nYou can tag all tests in a group by providing additional details. Note that each tag must start with `@` symbol.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.describe('two tagged tests', {\n  tag: '@smoke',\n}, () => {\n  test('one', async ({ page }) => {\n    // ...\n  });\n\n  test('two', async ({ page }) => {\n    // ...\n  });\n});\n```\n\nLearn more about [tagging](../test-annotations#tag-tests).\n\n**Annotations**\n\nYou can annotate all tests in a group by providing additional details.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.describe('two annotated tests', {\n  annotation: {\n    type: 'issue',\n    description: 'https://github.com/microsoft/playwright/issues/23180',\n  },\n}, () => {\n  test('one', async ({ page }) => {\n    // ...\n  });\n\n  test('two', async ({ page }) => {\n    // ...\n  });\n});\n```\n\nLearn more about [test annotations](../test-annotations).\n\n**Arguments**\n\n- `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  Group title.\n\n- `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `tag` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n  - `annotation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  Additional details for all tests in the group.\n\n- `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")\n\n  A callback that is run immediately when calling [test.describe()](class-test#test-describe). Any tests declared in this callback will belong to the group.\n\n### test.describe.configure[​](#test-describe-configure \"Direct link to test.describe.configure\")\n\nConfigures the enclosing scope. Can be executed either on the top level or inside a describe. Configuration applies to the entire scope, regardless of whether it run before or after the test declaration.\n\nLearn more about the execution modes [here](../test-parallel).\n\n**Usage**\n\n- Running tests in parallel.\n\n  ``` javascript\n  // Run all the tests in the file concurrently using parallel workers.\n  test.describe.configure({ mode: 'parallel' });\n  test('runs in parallel 1', async ({ page }) => {});\n  test('runs in parallel 2', async ({ page }) => {});\n  ```\n\n- Running tests serially, retrying from the start.\n\n  > note\n  >\n  > Running serially is not recommended. It is usually better to make your tests isolated, so they can be run independently.\n\n  ``` javascript\n  // Annotate tests as inter-dependent.\n  test.describe.configure({ mode: 'serial' });\n  test('runs first', async ({ page }) => {});\n  test('runs second', async ({ page }) => {});\n  ```\n\n- Configuring retries and timeout for each test.\n\n  ``` javascript\n  // Each test in the file will be retried twice and have a timeout of 20 seconds.\n  test.describe.configure({ retries: 2, timeout: 20_000 });\n  test('runs first', async ({ page }) => {});\n  test('runs second', async ({ page }) => {});\n  ```\n\n- Run multiple describes in parallel, but tests inside each describe in order.\n\n  ``` javascript\n  test.describe.configure({ mode: 'parallel' });\n\n  test.describe('A, runs in parallel with B', () => {\n    test.describe.configure({ mode: 'default' });\n    test('in order A1', async ({ page }) => {});\n    test('in order A2', async ({ page }) => {});\n  });\n\n  test.describe('B, runs in parallel with A', () => {\n    test.describe.configure({ mode: 'default' });\n    test('in order B1', async ({ page }) => {});\n    test('in order B2', async ({ page }) => {});\n  });\n  ```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `mode` \"default\" \\| \"parallel\" \\| \"serial\" *(optional)*\n\n    Execution mode. Learn more about the execution modes [here](../test-parallel).\n\n  - `retries` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    The number of retries for each test.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Timeout for each test in milliseconds. Overrides [testProject.timeout](class-testproject#test-project-timeout) and [testConfig.timeout](class-testconfig#test-config-timeout).\n\n### test.describe.fixme[​](#test-describe-fixme \"Direct link to test.describe.fixme\")\n\nDeclares a test group similarly to [test.describe()](class-test#test-describe). Tests in this group are marked as \"fixme\" and will not be executed.\n\n- `test.describe.fixme(title, callback)`\n- `test.describe.fixme(callback)`\n- `test.describe.fixme(title, details, callback)`\n\n**Usage**\n\n``` javascript\ntest.describe.fixme('broken tests that should be fixed', () => {\n  test('example', async ({ page }) => {\n    // This test will not run\n  });\n});\n```\n\nYou can also omit the title.\n\n``` javascript\ntest.describe.fixme(() => {\n  // ...\n});\n```\n\n**Arguments**\n\n- `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  Group title.\n\n- `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `tag` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n  - `annotation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  See [test.describe()](class-test#test-describe) for details description.\n\n- `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")\n\n  A callback that is run immediately when calling [test.describe.fixme()](class-test#test-describe-fixme). Any tests added in this callback will belong to the group, and will not be run.\n\n### test.describe.only[​](#test-describe-only \"Direct link to test.describe.only\")\n\nDeclares a focused group of tests. If there are some focused tests or suites, all of them will be run but nothing else.\n\n- `test.describe.only(title, callback)`\n- `test.describe.only(callback)`\n- `test.describe.only(title, details, callback)`\n\n**Usage**\n\n``` javascript\ntest.describe.only('focused group', () => {\n  test('in the focused group', async ({ page }) => {\n    // This test will run\n  });\n});\ntest('not in the focused group', async ({ page }) => {\n  // This test will not run\n});\n```\n\nYou can also omit the title.\n\n``` javascript\ntest.describe.only(() => {\n  // ...\n});\n```\n\n**Arguments**\n\n- `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  Group title.\n\n- `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `tag` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n  - `annotation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  See [test.describe()](class-test#test-describe) for details description.\n\n- `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")\n\n  A callback that is run immediately when calling [test.describe.only()](class-test#test-describe-only). Any tests added in this callback will belong to the group.\n\n### test.describe.skip[​](#test-describe-skip \"Direct link to test.describe.skip\")\n\nDeclares a skipped test group, similarly to [test.describe()](class-test#test-describe). Tests in the skipped group are never run.\n\n- `test.describe.skip(title, callback)`\n- `test.describe.skip(title)`\n- `test.describe.skip(title, details, callback)`\n\n**Usage**\n\n``` javascript\ntest.describe.skip('skipped group', () => {\n  test('example', async ({ page }) => {\n    // This test will not run\n  });\n});\n```\n\nYou can also omit the title.\n\n``` javascript\ntest.describe.skip(() => {\n  // ...\n});\n```\n\n**Arguments**\n\n- `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Group title.\n\n- `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `tag` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n  - `annotation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  See [test.describe()](class-test#test-describe) for details description.\n\n- `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")\n\n  A callback that is run immediately when calling [test.describe.skip()](class-test#test-describe-skip). Any tests added in this callback will belong to the group, and will not be run.\n\n### test.extend[​](#test-extend \"Direct link to test.extend\")\n\nExtends the `test` object by defining fixtures and/or options that can be used in the tests.\n\n**Usage**\n\nFirst define a fixture and/or an option.\n\n- TypeScript\n- JavaScript\n\n``` javascript\nimport { test as base } from '@playwright/test';\nimport { TodoPage } from './todo-page';\n\nexport type Options = { defaultItem: string };\n\n// Extend basic test by providing a \"defaultItem\" option and a \"todoPage\" fixture.\nexport const test = base.extend<Options & { todoPage: TodoPage }>({\n  // Define an option and provide a default value.\n  // We can later override it in the config.\n  defaultItem: ['Do stuff', { option: true }],\n\n  // Define a fixture. Note that it can use built-in fixture \"page\"\n  // and a new option \"defaultItem\".\n  todoPage: async ({ page, defaultItem }, use) => {\n    const todoPage = new TodoPage(page);\n    await todoPage.goto();\n    await todoPage.addToDo(defaultItem);\n    await use(todoPage);\n    await todoPage.removeAll();\n  },\n});\n```\n\n``` javascript\nconst base = require('@playwright/test');\nconst { TodoPage } = require('./todo-page');\n\n// Extend basic test by providing a \"defaultItem\" option and a \"todoPage\" fixture.\nexports.test = base.test.extend({\n  // Define an option and provide a default value.\n  // We can later override it in the config.\n  defaultItem: ['Do stuff', { option: true }],\n\n  // Define a fixture. Note that it can use built-in fixture \"page\"\n  // and a new option \"defaultItem\".\n  todoPage: async ({ page, defaultItem }, use) => {\n    const todoPage = new TodoPage(page);\n    await todoPage.goto();\n    await todoPage.addToDo(defaultItem);\n    await use(todoPage);\n    await todoPage.removeAll();\n  },\n});\n```\n\nThen use the fixture in the test.\n\n``` javascript\nimport { test } from './my-test';\n\ntest('test 1', async ({ todoPage }) => {\n  await todoPage.addToDo('my todo');\n  // ...\n});\n```\n\nConfigure the option in config file.\n\n- TypeScript\n- JavaScript\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\nimport type { Options } from './my-test';\n\nexport default defineConfig<Options>({\n  projects: [\n    {\n      name: 'shopping',\n      use: { defaultItem: 'Buy milk' },\n    },\n    {\n      name: 'wellbeing',\n      use: { defaultItem: 'Exercise!' },\n    },\n  ]\n});\n```\n\n``` javascript\n// @ts-check\n\nmodule.exports = defineConfig({\n  projects: [\n    {\n      name: 'shopping',\n      use: { defaultItem: 'Buy milk' },\n    },\n    {\n      name: 'wellbeing',\n      use: { defaultItem: 'Exercise!' },\n    },\n  ]\n});\n```\n\nLearn more about [fixtures](../test-fixtures) and [parametrizing tests](../test-parameterize).\n\n**Arguments**\n\n- `fixtures` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n  An object containing fixtures and/or options. Learn more about [fixtures format](../test-fixtures).\n\n**Returns**\n\n- [Test](class-test \"Test\")\n\n### test.fail[​](#test-fail \"Direct link to test.fail\")\n\nMarks a test as \"should fail\". Playwright runs this test and ensures that it is actually failing. This is useful for documentation purposes to acknowledge that some functionality is broken until it is fixed.\n\nTo declare a \"failing\" test:\n\n- `test.fail(title, body)`\n- `test.fail(title, details, body)`\n\nTo annotate test as \"failing\" at runtime:\n\n- `test.fail(condition, description)`\n- `test.fail(callback, description)`\n- `test.fail()`\n\n**Usage**\n\nYou can declare a test as failing, so that Playwright ensures it actually fails.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.fail('not yet ready', async ({ page }) => {\n  // ...\n});\n```\n\nIf your test fails in some configurations, but not all, you can mark the test as failing inside the test body based on some condition. We recommend passing a `description` argument in this case.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('fail in WebKit', async ({ page, browserName }) => {\n  test.fail(browserName === 'webkit', 'This feature is not implemented for Mac yet');\n  // ...\n});\n```\n\nYou can mark all tests in a file or [test.describe()](class-test#test-describe) group as \"should fail\" based on some condition with a single `test.fail(callback, description)` call.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.fail(({ browserName }) => browserName === 'webkit', 'not implemented yet');\n\ntest('fail in WebKit 1', async ({ page }) => {\n  // ...\n});\ntest('fail in WebKit 2', async ({ page }) => {\n  // ...\n});\n```\n\nYou can also call `test.fail()` without arguments inside the test body to always mark the test as failed. We recommend declaring a failing test with `test.fail(title, body)` instead.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('less readable', async ({ page }) => {\n  test.fail();\n  // ...\n});\n```\n\n**Arguments**\n\n- `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  Test title.\n\n- `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `tag` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n  - `annotation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  See [test()](class-test#test-call) for test details description.\n\n- `body` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([Fixtures](class-fixtures \"Fixtures\"), [TestInfo](class-testinfo \"TestInfo\")) *(optional)*\n\n  Test body that takes one or two arguments: an object with fixtures and optional [TestInfo](class-testinfo \"TestInfo\").\n\n- `condition` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n  Test is marked as \"should fail\" when the condition is `true`.\n\n- `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([Fixtures](class-fixtures \"Fixtures\")):[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n  A function that returns whether to mark as \"should fail\", based on test fixtures. Test or tests are marked as \"should fail\" when the return value is `true`.\n\n- `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  Optional description that will be reflected in a test report.\n\n### test.fixme[​](#test-fixme \"Direct link to test.fixme\")\n\nMark a test as \"fixme\", with the intention to fix it. Playwright will not run the test past the `test.fixme()` call.\n\nTo declare a \"fixme\" test:\n\n- `test.fixme(title, body)`\n- `test.fixme(title, details, body)`\n\nTo annotate test as \"fixme\" at runtime:\n\n- `test.fixme(condition, description)`\n- `test.fixme(callback, description)`\n- `test.fixme()`\n\n**Usage**\n\nYou can declare a test as to be fixed, and Playwright will not run it.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.fixme('to be fixed', async ({ page }) => {\n  // ...\n});\n```\n\nIf your test should be fixed in some configurations, but not all, you can mark the test as \"fixme\" inside the test body based on some condition. We recommend passing a `description` argument in this case. Playwright will run the test, but abort it immediately after the `test.fixme` call.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('to be fixed in Safari', async ({ page, browserName }) => {\n  test.fixme(browserName === 'webkit', 'This feature breaks in Safari for some reason');\n  // ...\n});\n```\n\nYou can mark all tests in a file or [test.describe()](class-test#test-describe) group as \"fixme\" based on some condition with a single `test.fixme(callback, description)` call.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.fixme(({ browserName }) => browserName === 'webkit', 'Should figure out the issue');\n\ntest('to be fixed in Safari 1', async ({ page }) => {\n  // ...\n});\ntest('to be fixed in Safari 2', async ({ page }) => {\n  // ...\n});\n```\n\nYou can also call `test.fixme()` without arguments inside the test body to always mark the test as failed. We recommend using `test.fixme(title, body)` instead.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('less readable', async ({ page }) => {\n  test.fixme();\n  // ...\n});\n```\n\n**Arguments**\n\n- `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  Test title.\n\n- `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `tag` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n  - `annotation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  See [test()](class-test#test-call) for test details description.\n\n- `body` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([Fixtures](class-fixtures \"Fixtures\"), [TestInfo](class-testinfo \"TestInfo\")) *(optional)*\n\n  Test body that takes one or two arguments: an object with fixtures and optional [TestInfo](class-testinfo \"TestInfo\").\n\n- `condition` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n  Test is marked as \"should fail\" when the condition is `true`.\n\n- `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([Fixtures](class-fixtures \"Fixtures\")):[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n  A function that returns whether to mark as \"should fail\", based on test fixtures. Test or tests are marked as \"should fail\" when the return value is `true`.\n\n- `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  Optional description that will be reflected in a test report.\n\n### test.info[​](#test-info \"Direct link to test.info\")\n\nReturns information about the currently running test. This method can only be called during the test execution, otherwise it throws.\n\n**Usage**\n\n``` javascript\ntest('example test', async ({ page }) => {\n  // ...\n  await test.info().attach('screenshot', {\n    body: await page.screenshot(),\n    contentType: 'image/png',\n  });\n});\n```\n\n**Returns**\n\n- [TestInfo](class-testinfo \"TestInfo\")\n\n### test.only[​](#test-only \"Direct link to test.only\")\n\nDeclares a focused test. If there are some focused tests or suites, all of them will be run but nothing else.\n\n- `test.only(title, body)`\n- `test.only(title, details, body)`\n\n**Usage**\n\n``` javascript\ntest.only('focus this test', async ({ page }) => {\n  // Run only focused tests in the entire project.\n});\n```\n\n**Arguments**\n\n- `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Test title.\n\n- `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `tag` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n  - `annotation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  See [test()](class-test#test-call) for test details description.\n\n- `body` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([Fixtures](class-fixtures \"Fixtures\"), [TestInfo](class-testinfo \"TestInfo\"))\n\n  Test body that takes one or two arguments: an object with fixtures and optional [TestInfo](class-testinfo \"TestInfo\").\n\n### test.setTimeout[​](#test-set-timeout \"Direct link to test.setTimeout\")\n\nChanges the timeout for the test. Zero means no timeout. Learn more about [various timeouts](../test-timeouts).\n\nTimeout for the currently running test is available through [testInfo.timeout](class-testinfo#test-info-timeout).\n\n**Usage**\n\n- Changing test timeout.\n\n  ``` javascript\n  test('very slow test', async ({ page }) => {\n    test.setTimeout(120000);\n    // ...\n  });\n  ```\n\n- Changing timeout from a slow `beforeEach` or `afterEach` hook. Note that this affects the test timeout that is shared with `beforeEach`/`afterEach` hooks.\n\n  ``` javascript\n  test.beforeEach(async ({ page }, testInfo) => {\n    // Extend timeout for all tests running this hook by 30 seconds.\n    test.setTimeout(testInfo.timeout + 30000);\n  });\n  ```\n\n- Changing timeout for a `beforeAll` or `afterAll` hook. Note this affects the hook's timeout, not the test timeout.\n\n  ``` javascript\n  test.beforeAll(async () => {\n    // Set timeout for this hook.\n    test.setTimeout(60000);\n  });\n  ```\n\n- Changing timeout for all tests in a [test.describe()](class-test#test-describe) group.\n\n  ``` javascript\n  test.describe('group', () => {\n    // Applies to all tests in this group.\n    test.describe.configure({ timeout: 60000 });\n\n    test('test one', async () => { /* ... */ });\n    test('test two', async () => { /* ... */ });\n    test('test three', async () => { /* ... */ });\n  });\n  ```\n\n**Arguments**\n\n- `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Timeout in milliseconds.\n\n### test.skip[​](#test-skip \"Direct link to test.skip\")\n\nSkip a test. Playwright will not run the test past the `test.skip()` call.\n\nSkipped tests are not supposed to be ever run. If you intent to fix the test, use [test.fixme()](class-test#test-fixme) instead.\n\nTo declare a skipped test:\n\n- `test.skip(title, body)`\n- `test.skip(title, details, body)`\n\nTo skip a test at runtime:\n\n- `test.skip(condition, description)`\n- `test.skip(callback, description)`\n- `test.skip()`\n\n**Usage**\n\nYou can declare a skipped test, and Playwright will not run it.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.skip('never run', async ({ page }) => {\n  // ...\n});\n```\n\nIf your test should be skipped in some configurations, but not all, you can skip the test inside the test body based on some condition. We recommend passing a `description` argument in this case. Playwright will run the test, but abort it immediately after the `test.skip` call.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('Safari-only test', async ({ page, browserName }) => {\n  test.skip(browserName !== 'webkit', 'This feature is Safari-only');\n  // ...\n});\n```\n\nYou can skip all tests in a file or [test.describe()](class-test#test-describe) group based on some condition with a single `test.skip(callback, description)` call.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.skip(({ browserName }) => browserName !== 'webkit', 'Safari-only');\n\ntest('Safari-only test 1', async ({ page }) => {\n  // ...\n});\ntest('Safari-only test 2', async ({ page }) => {\n  // ...\n});\n```\n\nYou can also call `test.skip()` without arguments inside the test body to always mark the test as failed. We recommend using `test.skip(title, body)` instead.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('less readable', async ({ page }) => {\n  test.skip();\n  // ...\n});\n```\n\n**Arguments**\n\n- `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  Test title.\n\n- `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `tag` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n  - `annotation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  See [test()](class-test#test-call) for test details description.\n\n- `body` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([Fixtures](class-fixtures \"Fixtures\"), [TestInfo](class-testinfo \"TestInfo\")) *(optional)*\n\n  Test body that takes one or two arguments: an object with fixtures and optional [TestInfo](class-testinfo \"TestInfo\").\n\n- `condition` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n  Test is marked as \"should fail\" when the condition is `true`.\n\n- `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([Fixtures](class-fixtures \"Fixtures\")):[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n  A function that returns whether to mark as \"should fail\", based on test fixtures. Test or tests are marked as \"should fail\" when the return value is `true`.\n\n- `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  Optional description that will be reflected in a test report.\n\n### test.slow[​](#test-slow \"Direct link to test.slow\")\n\nMarks a test as \"slow\". Slow test will be given triple the default timeout.\n\nNote that [test.slow()](class-test#test-slow) cannot be used in a `beforeAll` or `afterAll` hook. Use [test.setTimeout()](class-test#test-set-timeout) instead.\n\n- `test.slow()`\n- `test.slow(condition, description)`\n- `test.slow(callback, description)`\n\n**Usage**\n\nYou can mark a test as slow by calling `test.slow()` inside the test body.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('slow test', async ({ page }) => {\n  test.slow();\n  // ...\n});\n```\n\nIf your test is slow in some configurations, but not all, you can mark it as slow based on a condition. We recommend passing a `description` argument in this case.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('slow in Safari', async ({ page, browserName }) => {\n  test.slow(browserName === 'webkit', 'This feature is slow in Safari');\n  // ...\n});\n```\n\nYou can mark all tests in a file or [test.describe()](class-test#test-describe) group as \"slow\" based on some condition by passing a callback.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.slow(({ browserName }) => browserName === 'webkit', 'all tests are slow in Safari');\n\ntest('slow in Safari 1', async ({ page }) => {\n  // ...\n});\ntest('fail in Safari 2', async ({ page }) => {\n  // ...\n});\n```\n\n**Arguments**\n\n- `condition` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n  Test is marked as \"slow\" when the condition is `true`.\n\n- `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")([Fixtures](class-fixtures \"Fixtures\")):[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n  A function that returns whether to mark as \"slow\", based on test fixtures. Test or tests are marked as \"slow\" when the return value is `true`.\n\n- `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  Optional description that will be reflected in a test report.\n\n### test.step[​](#test-step \"Direct link to test.step\")\n\nDeclares a test step that is shown in the report.\n\n**Usage**\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  await test.step('Log in', async () => {\n    // ...\n  });\n\n  await test.step('Outer step', async () => {\n    // ...\n    // You can nest steps inside each other.\n    await test.step('Inner step', async () => {\n      // ...\n    });\n  });\n});\n```\n\n**Arguments**\n\n- `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Step name.\n\n- `body` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")():[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n  Step body.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `box` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to box the step in the report. Defaults to `false`. When the step is boxed, errors thrown from the step internals point to the step call site. See below for more details.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n**Details**\n\nThe method returns the value returned by the step callback.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  const user = await test.step('Log in', async () => {\n    // ...\n    return 'john';\n  });\n  expect(user).toBe('john');\n});\n```\n\n**Decorator**\n\nYou can use TypeScript method decorators to turn a method into a step. Each call to the decorated method will show up as a step in the report.\n\n``` javascript\nfunction step(target: Function, context: ClassMethodDecoratorContext) {\n  return function replacementMethod(...args: any) {\n    const name = this.constructor.name + '.' + (context.name as string);\n    return test.step(name, async () => {\n      return await target.call(this, ...args);\n    });\n  };\n}\n\nclass LoginPage {\n  constructor(readonly page: Page) {}\n\n  @step\n  async login() {\n    const account = { username: 'Alice', password: 's3cr3t' };\n    await this.page.getByLabel('Username or email address').fill(account.username);\n    await this.page.getByLabel('Password').fill(account.password);\n    await this.page.getByRole('button', { name: 'Sign in' }).click();\n    await expect(this.page.getByRole('button', { name: 'View profile and more' })).toBeVisible();\n  }\n}\n\ntest('example', async ({ page }) => {\n  const loginPage = new LoginPage(page);\n  await loginPage.login();\n});\n```\n\n**Boxing**\n\nWhen something inside a step fails, you would usually see the error pointing to the exact action that failed. For example, consider the following login step:\n\n``` javascript\nasync function login(page) {\n  await test.step('login', async () => {\n    const account = { username: 'Alice', password: 's3cr3t' };\n    await page.getByLabel('Username or email address').fill(account.username);\n    await page.getByLabel('Password').fill(account.password);\n    await page.getByRole('button', { name: 'Sign in' }).click();\n    await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();\n  });\n}\n\ntest('example', async ({ page }) => {\n  await page.goto('https://github.com/login');\n  await login(page);\n});\n```\n\n``` javascript\nError: Timed out 5000ms waiting for expect(locator).toBeVisible()\n  ... error details omitted ...\n\n   8 |     await page.getByRole('button', { name: 'Sign in' }).click();\n>  9 |     await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();\n     |                                                                               ^\n  10 |   });\n```\n\nAs we see above, the test may fail with an error pointing inside the step. If you would like the error to highlight the \"login\" step instead of its internals, use the `box` option. An error inside a boxed step points to the step call site.\n\n``` javascript\nasync function login(page) {\n  await test.step('login', async () => {\n    // ...\n  }, { box: true });  // Note the \"box\" option here.\n}\n```\n\n``` javascript\nError: Timed out 5000ms waiting for expect(locator).toBeVisible()\n  ... error details omitted ...\n\n  14 |   await page.goto('https://github.com/login');\n> 15 |   await login(page);\n     |         ^\n  16 | });\n```\n\nYou can also create a TypeScript decorator for a boxed step, similar to a regular step decorator above:\n\n``` javascript\nfunction boxedStep(target: Function, context: ClassMethodDecoratorContext) {\n  return function replacementMethod(...args: any) {\n    const name = this.constructor.name + '.' + (context.name as string);\n    return test.step(name, async () => {\n      return await target.call(this, ...args);\n    }, { box: true });  // Note the \"box\" option here.\n  };\n}\n\nclass LoginPage {\n  constructor(readonly page: Page) {}\n\n  @boxedStep\n  async login() {\n    // ....\n  }\n}\n\ntest('example', async ({ page }) => {\n  const loginPage = new LoginPage(page);\n  await loginPage.login();  // <-- Error will be reported on this line.\n});\n```\n\n### test.use[​](#test-use \"Direct link to test.use\")\n\nSpecifies options or fixtures to use in a single test file or a [test.describe()](class-test#test-describe) group. Most useful to set an option, for example set `locale` to configure `context` fixture.\n\n**Usage**\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.use({ locale: 'en-US' });\n\ntest('test with locale', async ({ page }) => {\n  // Default context and page have locale as specified\n});\n```\n\n**Arguments**\n\n- `options` [TestOptions](class-testoptions \"TestOptions\")\n\n  An object with local options.\n\n**Details**\n\n`test.use` can be called either in the global scope or inside `test.describe`. It is an error to call it within `beforeEach` or `beforeAll`.\n\nIt is also possible to override a fixture by providing a function.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.use({\n  locale: async ({}, use) => {\n    // Read locale from some configuration file.\n    const locale = await fs.promises.readFile('test-locale', 'utf-8');\n    await use(locale);\n  },\n});\n\ntest('test with locale', async ({ page }) => {\n  // Default context and page have locale as specified\n});\n```\n\n## Properties[​](#properties \"Direct link to Properties\")\n\n### test.expect[​](#test-expect \"Direct link to test.expect\")\n\n`expect` function can be used to create test assertions. Read more about [test assertions](../test-assertions).\n\n**Usage**\n\n``` javascript\ntest('example', async ({ page }) => {\n  await test.expect(page).toHaveTitle('Title');\n});\n```\n\n**Type**\n\n- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n## Deprecated[​](#deprecated \"Direct link to Deprecated\")\n\n### test.describe.parallel[​](#test-describe-parallel \"Direct link to test.describe.parallel\")\n\n> Discouraged\n>\n> See [test.describe.configure()](class-test#test-describe-configure) for the preferred way of configuring the execution mode.\n\nDeclares a group of tests that could be run in parallel. By default, tests in a single test file run one after another, but using [test.describe.parallel()](class-test#test-describe-parallel) allows them to run in parallel.\n\n- `test.describe.parallel(title, callback)`\n- `test.describe.parallel(callback)`\n- `test.describe.parallel(title, details, callback)`\n\n**Usage**\n\n``` javascript\ntest.describe.parallel('group', () => {\n  test('runs in parallel 1', async ({ page }) => {});\n  test('runs in parallel 2', async ({ page }) => {});\n});\n```\n\nNote that parallel tests are executed in separate processes and cannot share any state or global variables. Each of the parallel tests executes all relevant hooks.\n\nYou can also omit the title.\n\n``` javascript\ntest.describe.parallel(() => {\n  // ...\n});\n```\n\n**Arguments**\n\n- `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  Group title.\n\n- `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `tag` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n  - `annotation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  See [test.describe()](class-test#test-describe) for details description.\n\n- `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")\n\n  A callback that is run immediately when calling [test.describe.parallel()](class-test#test-describe-parallel). Any tests added in this callback will belong to the group.\n\n### test.describe.parallel.only[​](#test-describe-parallel-only \"Direct link to test.describe.parallel.only\")\n\n> Discouraged\n>\n> See [test.describe.configure()](class-test#test-describe-configure) for the preferred way of configuring the execution mode.\n\nDeclares a focused group of tests that could be run in parallel. This is similar to [test.describe.parallel()](class-test#test-describe-parallel), but focuses the group. If there are some focused tests or suites, all of them will be run but nothing else.\n\n- `test.describe.parallel.only(title, callback)`\n- `test.describe.parallel.only(callback)`\n- `test.describe.parallel.only(title, details, callback)`\n\n**Usage**\n\n``` javascript\ntest.describe.parallel.only('group', () => {\n  test('runs in parallel 1', async ({ page }) => {});\n  test('runs in parallel 2', async ({ page }) => {});\n});\n```\n\nYou can also omit the title.\n\n``` javascript\ntest.describe.parallel.only(() => {\n  // ...\n});\n```\n\n**Arguments**\n\n- `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  Group title.\n\n- `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `tag` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n  - `annotation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  See [test.describe()](class-test#test-describe) for details description.\n\n- `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")\n\n  A callback that is run immediately when calling [test.describe.parallel.only()](class-test#test-describe-parallel-only). Any tests added in this callback will belong to the group.\n\n### test.describe.serial[​](#test-describe-serial \"Direct link to test.describe.serial\")\n\n> Discouraged\n>\n> See [test.describe.configure()](class-test#test-describe-configure) for the preferred way of configuring the execution mode.\n\nDeclares a group of tests that should always be run serially. If one of the tests fails, all subsequent tests are skipped. All tests in a group are retried together.\n\n> note\n>\n> Using serial is not recommended. It is usually better to make your tests isolated, so they can be run independently.\n\n- `test.describe.serial(title, callback)`\n- `test.describe.serial(title)`\n- `test.describe.serial(title, details, callback)`\n\n**Usage**\n\n``` javascript\ntest.describe.serial('group', () => {\n  test('runs first', async ({ page }) => {});\n  test('runs second', async ({ page }) => {});\n});\n```\n\nYou can also omit the title.\n\n``` javascript\ntest.describe.serial(() => {\n  // ...\n});\n```\n\n**Arguments**\n\n- `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  Group title.\n\n- `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `tag` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n  - `annotation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  See [test.describe()](class-test#test-describe) for details description.\n\n- `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")\n\n  A callback that is run immediately when calling [test.describe.serial()](class-test#test-describe-serial). Any tests added in this callback will belong to the group.\n\n### test.describe.serial.only[​](#test-describe-serial-only \"Direct link to test.describe.serial.only\")\n\n> Discouraged\n>\n> See [test.describe.configure()](class-test#test-describe-configure) for the preferred way of configuring the execution mode.\n\nDeclares a focused group of tests that should always be run serially. If one of the tests fails, all subsequent tests are skipped. All tests in a group are retried together. If there are some focused tests or suites, all of them will be run but nothing else.\n\n> note\n>\n> Using serial is not recommended. It is usually better to make your tests isolated, so they can be run independently.\n\n- `test.describe.serial.only(title, callback)`\n- `test.describe.serial.only(title)`\n- `test.describe.serial.only(title, details, callback)`\n\n**Usage**\n\n``` javascript\ntest.describe.serial.only('group', () => {\n  test('runs first', async ({ page }) => {\n  });\n  test('runs second', async ({ page }) => {\n  });\n});\n```\n\nYou can also omit the title.\n\n``` javascript\ntest.describe.serial.only(() => {\n  // ...\n});\n```\n\n**Arguments**\n\n- `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Group title.\n\n- `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `tag` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n  - `annotation` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  See [test.describe()](class-test#test-describe) for details description.\n\n- `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")\n\n  A callback that is run immediately when calling [test.describe.serial.only()](class-test#test-describe-serial-only). Any tests added in this callback will belong to the group.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-test](https://playwright.dev/docs/api/class-test)"
- name: playwright.chromium
  id: api/class-playwright#playwright-chromium
  summary: This object can be used to launch or connect to Chromium, returning instances of Browser
  belongs_to: Playwright Library
  description: |-
    ### chromium[​](#playwright-chromium "Direct link to chromium")

    Added before v1.9

    This object can be used to launch or connect to Chromium, returning instances of [Browser](class-browser "Browser").

    **Usage**

    ``` javascript
    playwright.chromium
    ```

    **Type**

    - [BrowserType](class-browsertype "BrowserType")
- name: playwright.devices
  id: api/class-playwright#playwright-devices
  summary: Returns a dictionary of devices to be used with browser.newContext() or browser.newPage()
  belongs_to: Playwright Library
  description: |-
    ### devices[​](#playwright-devices "Direct link to devices")

    Added before v1.9

    Returns a dictionary of devices to be used with [browser.newContext()](class-browser#browser-new-context) or [browser.newPage()](class-browser#browser-new-page).

    ``` javascript
    const { webkit, devices } = require('playwright');
    const iPhone = devices['iPhone 6'];

    (async () => {
      const browser = await webkit.launch();
      const context = await browser.newContext({
        ...iPhone
      });
      const page = await context.newPage();
      await page.goto('http://example.com');
      // other actions...
      await browser.close();
    })();
    ```

    **Usage**

    ``` javascript
    playwright.devices
    ```

    **Type**

    - [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

    &nbsp;
- name: playwright.errors
  id: api/class-playwright#playwright-errors
  summary: Playwright methods might throw errors if they are unable to fulfill a request
  belongs_to: Playwright Library
  description: |-
    ### errors[​](#playwright-errors "Direct link to errors")

    Added before v1.9

    Playwright methods might throw errors if they are unable to fulfill a request. For example, [locator.waitFor()](class-locator#locator-wait-for) might fail if the selector doesn't match any nodes during the given timeframe.

    For certain types of errors Playwright uses specific error classes. These classes are available via [`playwright.errors`](#playwright-errors).

    An example of handling a timeout error:

    ``` javascript
    try {
      await page.locator('.foo').waitFor();
    } catch (e) {
      if (e instanceof playwright.errors.TimeoutError) {
        // Do something if this is a timeout.
      }
    }
    ```

    **Usage**

    ``` javascript
    playwright.errors
    ```

    **Type**

    - [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")
      - `TimeoutError` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")

        A class of [TimeoutError](class-timeouterror "TimeoutError").

    &nbsp;
- name: playwright.firefox
  id: api/class-playwright#playwright-firefox
  summary: This object can be used to launch or connect to Firefox, returning instances of Browser
  belongs_to: Playwright Library
  description: |-
    ### firefox[​](#playwright-firefox "Direct link to firefox")

    Added before v1.9

    This object can be used to launch or connect to Firefox, returning instances of [Browser](class-browser "Browser").

    **Usage**

    ``` javascript
    playwright.firefox
    ```

    **Type**

    - [BrowserType](class-browsertype "BrowserType")

    &nbsp;
- name: playwright.request
  id: api/class-playwright#playwright-request
  summary: Exposes API that can be used for the Web API testing
  belongs_to: Playwright Library
  description: |-
    ### request[​](#playwright-request "Direct link to request")

    Exposes API that can be used for the Web API testing.

    **Usage**

    ``` javascript
    playwright.request
    ```

    **Type**

    - [APIRequest](class-apirequest "APIRequest")

    &nbsp;
- name: playwright.selectors
  id: api/class-playwright#playwright-selectors
  summary: Selectors can be used to install custom selector engines
  belongs_to: Playwright Library
  description: |-
    ### selectors[​](#playwright-selectors "Direct link to selectors")

    Added before v1.9

    Selectors can be used to install custom selector engines. See [extensibility](../extensibility) for more information.

    **Usage**

    ``` javascript
    playwright.selectors
    ```

    **Type**

    - [Selectors](class-selectors "Selectors")

    &nbsp;
- name: playwright.webkit
  id: api/class-playwright#playwright-webkit
  summary: This object can be used to launch or connect to WebKit, returning instances of Browser
  belongs_to: Playwright Library
  description: "### webkit[​](#playwright-webkit \"Direct link to webkit\")\n\nAdded before v1.9\n\nThis object can be used to launch or connect to WebKit, returning instances of [Browser](class-browser \"Browser\").\n\n**Usage**\n\n``` javascript\nplaywright.webkit\n```\n\n**Type**\n\n- [BrowserType](class-browsertype \"BrowserType\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-playwright](https://playwright.dev/docs/api/class-playwright)"
- name: Projects
  id: test-projects
  summary: A project is logical group of tests running with the same configuration
  description: "# Projects\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nA project is logical group of tests running with the same configuration. We use projects so we can run tests on different browsers and devices. Projects are configured in the `playwright.config.ts` file and once configured you can then run your tests on all projects or only on a specific project. You can also use projects to run the same tests in different configurations. For example, you can run the same tests in a logged-in and logged-out state.\n\nBy setting up projects you can also run a group of tests with different timeouts or retries or a group of tests against different environments such as staging and production, splitting tests per package/functionality and more.\n\n## Configure projects for multiple browsers[​](#configure-projects-for-multiple-browsers \"Direct link to Configure projects for multiple browsers\")\n\nBy using **projects** you can run your tests in multiple browsers such as chromium, webkit and firefox as well as branded browsers such as Google Chrome and Microsoft Edge. Playwright can also run on emulated tablet and mobile devices. See the [registry of device parameters](https://github.com/microsoft/playwright/blob/main/packages/playwright-core/src/server/deviceDescriptorsSource.json) for a complete list of selected desktop, tablet and mobile devices.\n\n``` javascript\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n\n    /* Test against mobile viewports. */\n    {\n      name: 'Mobile Chrome',\n      use: { ...devices['Pixel 5'] },\n    },\n    {\n      name: 'Mobile Safari',\n      use: { ...devices['iPhone 12'] },\n    },\n\n    /* Test against branded browsers. */\n    {\n      name: 'Microsoft Edge',\n      use: {\n        ...devices['Desktop Edge'],\n        channel: 'msedge'\n      },\n    },\n    {\n      name: 'Google Chrome',\n      use: {\n        ...devices['Desktop Chrome'],\n        channel: 'chrome'\n      },\n    },\n  ],\n});\n```\n\n## Run projects[​](#run-projects \"Direct link to Run projects\")\n\nPlaywright will run all projects by default.\n\n``` javascript\nnpx playwright test\n\nRunning 7 tests using 5 workers\n\n  ✓ [chromium] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [firefox] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [webkit] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [Mobile Chrome] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [Mobile Safari] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [Microsoft Edge] › example.spec.ts:3:1 › basic test (2s)\n  ✓ [Google Chrome] › example.spec.ts:3:1 › basic test (2s)\n```\n\nUse the `--project` command line option to run a single project.\n\n``` javascript\nnpx playwright test --project=firefox\n\nRunning 1 test using 1 worker\n\n  ✓ [firefox] › example.spec.ts:3:1 › basic test (2s)\n```\n\nThe VS Code test runner runs your tests on the default browser of Chrome. To run on other/multiple browsers click the play button's dropdown from the testing sidebar and choose another profile or modify the default profile by clicking **Select Default Profile** and select the browsers you wish to run your tests on.\n\nChoose a specific profile, various profiles or all profiles to run tests on.\n\n## Configure projects for multiple environments[​](#configure-projects-for-multiple-environments \"Direct link to Configure projects for multiple environments\")\n\nBy setting up projects we can also run a group of tests with different timeouts or retries or run a group of tests against different environments. For example we can run our tests against a staging environment with 2 retries as well as against a production environment with 0 retries.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  timeout: 60000, // Timeout is shared between all tests.\n  projects: [\n    {\n      name: 'staging',\n      use: {\n        baseURL: 'staging.example.com',\n      },\n      retries: 2,\n    },\n    {\n      name: 'production',\n      use: {\n        baseURL: 'production.example.com',\n      },\n      retries: 0,\n    },\n  ],\n});\n```\n\n## Splitting tests into projects[​](#splitting-tests-into-projects \"Direct link to Splitting tests into projects\")\n\nWe can split tests into projects and use filters to run a subset of tests. For example, we can create a project that runs tests using a filter matching all tests with a specific file name. We can then have another group of tests that ignore specific test files.\n\nHere is an example that defines a common timeout and two projects. The \"Smoke\" project runs a small subset of tests without retries, and \"Default\" project runs all other tests with retries.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  timeout: 60000, // Timeout is shared between all tests.\n  projects: [\n    {\n      name: 'Smoke',\n      testMatch: /.*smoke.spec.ts/,\n      retries: 0,\n    },\n    {\n      name: 'Default',\n      testIgnore: /.*smoke.spec.ts/,\n      retries: 2,\n    },\n  ],\n});\n```\n\n## Dependencies[​](#dependencies \"Direct link to Dependencies\")\n\nDependencies are a list of projects that need to run before the tests in another project run. They can be useful for configuring the global setup actions so that one project depends on this running first. When using project dependencies, [test reporters](test-reporters) will show the setup tests and the [trace viewer](trace-viewer) will record traces of the setup. You can use the inspector to inspect the DOM snapshot of the trace of your setup tests and you can also use [fixtures](test-fixtures) inside your setup.\n\nIn this example the chromium, firefox and webkit projects depend on the setup project.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'setup',\n      testMatch: '**/*.setup.ts',\n    },\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n      dependencies: ['setup'],\n    },\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n      dependencies: ['setup'],\n    },\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n      dependencies: ['setup'],\n    },\n  ],\n});\n```\n\n### Running Sequence[​](#running-sequence \"Direct link to Running Sequence\")\n\nWhen working with tests that have a dependency, the dependency will always run first and once all tests from this project have passed, then the other projects will run in parallel.\n\nRunning order:\n\n1.  Tests in the 'setup' project run. Once all tests from this project have passed, then the tests from the dependent projects will start running.\n\n2.  Tests in the 'chromium', 'webkit' and 'firefox' projects run together. By default, these projects will [run in parallel](test-parallel), subject to the maximum workers limit.\n\nIf there are more than one dependency then these project dependencies will be run first and in parallel. If the tests from a dependency fails then the tests that rely on this project will not be run.\n\nRunning order:\n\n1.  Tests in the 'Browser Login' and 'DataBase' projects run in parallel:\n    - 'Browser Login' passes\n    - ❌ 'DataBase' fails!\n2.  The 'e2e tests' project is not run!\n\n### Teardown[​](#teardown \"Direct link to Teardown\")\n\nYou can also teardown your setup by adding a [testProject.teardown](api/class-testproject#test-project-teardown) property to your setup project. Teardown will run after all dependent projects have run. See the [teardown guide](test-global-setup-teardown#teardown) for more information.\n\n### Test filtering[​](#test-filtering \"Direct link to Test filtering\")\n\nIf `--grep/--grep-invert` or `--shard` [option](test-cli#reference) is used, test file name filter is specified in [command line](test-cli) or [test.only()](api/class-test#test-only) is used, it will only apply to the tests from the deepest projects in the project dependency chain. In other words, if a matching test belongs to a project that has project dependencies, Playwright will run all the tests from the project dependencies ignoring the filters.\n\n## Custom project parameters[​](#custom-project-parameters \"Direct link to Custom project parameters\")\n\nProjects can be also used to parametrize tests with your custom configuration - take a look at [this separate guide](test-parameterize#parameterized-projects).\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/test-projects](https://playwright.dev/docs/test-projects)"
- name: Release notes
  id: release-notes
  summary: Playwright now allows you to supply client-side certificates, so that server can verify them, as specified by TLS Client Authentication
  description: "# Release notes\n\n## Version 1.46[​](#version-146 \"Direct link to Version 1.46\")\n\n### TLS Client Certificates[​](#tls-client-certificates \"Direct link to TLS Client Certificates\")\n\nPlaywright now allows you to supply client-side certificates, so that server can verify them, as specified by TLS Client Authentication.\n\nThe following snippet sets up a client certificate for `https://example.com`:\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // ...\n  use: {\n    clientCertificates: [{\n      origin: 'https://example.com',\n      certPath: './cert.pem',\n      keyPath: './key.pem',\n      passphrase: 'mysecretpassword',\n    }],\n  },\n  // ...\n});\n```\n\nYou can also provide client certificates to a particular [test project](api/class-testproject#test-project-use) or as a parameter of [browser.newContext()](api/class-browser#browser-new-context) and [apiRequest.newContext()](api/class-apirequest#api-request-new-context).\n\n### `--only-changed` cli option[​](#--only-changed-cli-option \"Direct link to --only-changed-cli-option\")\n\nNew CLI option `--only-changed` allows to only run test files that have been changed since the last git commit or from a specific git \"ref\".\n\n``` javascript\n# Only run test files with uncommitted changes\nnpx playwright test --only-changed\n\n# Only run test files changed relative to the \"main\" branch\nnpx playwrigh test --only-changed=main\n```\n\n### Component Testing: New `router` fixture[​](#component-testing-new-router-fixture \"Direct link to component-testing-new-router-fixture\")\n\nThis release introduces an experimental `router` fixture to intercept and handle network requests in component testing. There are two ways to use the router fixture:\n\n- Call `router.route(url, handler)` that behaves similarly to [page.route()](api/class-page#page-route).\n- Call `router.use(handlers)` and pass [MSW library](https://mswjs.io) request handlers to it.\n\nHere is an example of reusing your existing MSW handlers in the test.\n\n``` javascript\nimport { handlers } from '@src/mocks/handlers';\n\ntest.beforeEach(async ({ router }) => {\n  // install common handlers before each test\n  await router.use(...handlers);\n});\n\ntest('example test', async ({ mount }) => {\n  // test as usual, your handlers are active\n  // ...\n});\n```\n\nThis fixture is only available in [component tests](test-components#handling-network-requests).\n\n### UI Mode / Trace Viewer Updates[​](#ui-mode--trace-viewer-updates \"Direct link to UI Mode / Trace Viewer Updates\")\n\n- Test annotations are now shown in UI mode.\n- Content of text attachments is now rendered inline in the attachments pane.\n- New setting to show/hide routing actions like [route.continue()](api/class-route#route-continue).\n- Request method and status are shown in the network details tab.\n- New button to copy source file location to clipboard.\n- Metadata pane now displays the `baseURL`.\n\n### Miscellaneous[​](#miscellaneous \"Direct link to Miscellaneous\")\n\n- New `maxRetries` option in [apiRequestContext.fetch()](api/class-apirequestcontext#api-request-context-fetch) which retries on the `ECONNRESET` network error.\n- New option to [box a fixture](test-fixtures#box-fixtures) to minimize the fixture exposure in test reports and error messages.\n- New option to provide a [custom fixture title](test-fixtures#custom-fixture-title) to be used in test reports and error messages.\n\n### Browser Versions[​](#browser-versions \"Direct link to Browser Versions\")\n\n- Chromium 128.0.6613.18\n- Mozilla Firefox 128.0\n- WebKit 18.0\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 127\n- Microsoft Edge 127\n\n## Version 1.45[​](#version-145 \"Direct link to Version 1.45\")\n\n### Clock[​](#clock \"Direct link to Clock\")\n\nUtilizing the new [Clock](api/class-clock \"Clock\") API allows to manipulate and control time within tests to verify time-related behavior. This API covers many common scenarios, including:\n\n- testing with predefined time;\n- keeping consistent time and timers;\n- monitoring inactivity;\n- ticking through time manually.\n\n``` javascript\n// Initialize clock and let the page load naturally.\nawait page.clock.install({ time: new Date('2024-02-02T08:00:00') });\nawait page.goto('http://localhost:3333');\n\n// Pretend that the user closed the laptop lid and opened it again at 10am,\n// Pause the time once reached that point.\nawait page.clock.pauseAt(new Date('2024-02-02T10:00:00'));\n\n// Assert the page state.\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:00:00 AM');\n\n// Close the laptop lid again and open it at 10:30am.\nawait page.clock.fastForward('30:00');\nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:30:00 AM');\n```\n\nSee [the clock guide](clock) for more details.\n\n### Test runner[​](#test-runner \"Direct link to Test runner\")\n\n- New CLI option `--fail-on-flaky-tests` that sets exit code to `1` upon any flaky tests. Note that by default, the test runner exits with code `0` when all failed tests recovered upon a retry. With this option, the test run will fail in such case.\n\n- New environment variable `PLAYWRIGHT_FORCE_TTY` controls whether built-in `list`, `line` and `dot` reporters assume a live terminal. For example, this could be useful to disable tty behavior when your CI environment does not handle ANSI control sequences well. Alternatively, you can enable tty behavior even when to live terminal is present, if you plan to post-process the output and handle control sequences.\n\n  ``` javascript\n  # Avoid TTY features that output ANSI control sequences\n  PLAYWRIGHT_FORCE_TTY=0 npx playwright test\n\n  # Enable TTY features, assuming a terminal width 80\n  PLAYWRIGHT_FORCE_TTY=80 npx playwright test\n  ```\n\n- New options [testConfig.respectGitIgnore](api/class-testconfig#test-config-respect-git-ignore) and [testProject.respectGitIgnore](api/class-testproject#test-project-respect-git-ignore) control whether files matching `.gitignore` patterns are excluded when searching for tests.\n\n- New property `timeout` is now available for custom expect matchers. This property takes into account `playwright.config.ts` and `expect.configure()`.\n\n  ``` javascript\n  import { expect as baseExpect } from '@playwright/test';\n\n  export const expect = baseExpect.extend({\n    async toHaveAmount(locator: Locator, expected: number, options?: { timeout?: number }) {\n      // When no timeout option is specified, use the config timeout.\n      const timeout = options?.timeout ?? this.timeout;\n      // ... implement the assertion ...\n    },\n  });\n  ```\n\n### Miscellaneous[​](#miscellaneous-1 \"Direct link to Miscellaneous\")\n\n- Method [locator.setInputFiles()](api/class-locator#locator-set-input-files) now supports uploading a directory for `<input type=file webkitdirectory>` elements.\n\n  ``` javascript\n  await page.getByLabel('Upload directory').setInputFiles(path.join(__dirname, 'mydir'));\n  ```\n\n- Multiple methods like [locator.click()](api/class-locator#locator-click) or [locator.press()](api/class-locator#locator-press) now support a `ControlOrMeta` modifier key. This key maps to `Meta` on macOS and maps to `Control` on Windows and Linux.\n\n  ``` javascript\n  // Press the common keyboard shortcut Control+S or Meta+S to trigger a \"Save\" operation.\n  await page.keyboard.press('ControlOrMeta+S');\n  ```\n\n- New property `httpCredentials.send` in [apiRequest.newContext()](api/class-apirequest#api-request-new-context) that allows to either always send the `Authorization` header or only send it in response to `401 Unauthorized`.\n\n- New option `reason` in [apiRequestContext.dispose()](api/class-apirequestcontext#api-request-context-dispose) that will be included in the error message of ongoing operations interrupted by the context disposal.\n\n- New option `host` in [browserType.launchServer()](api/class-browsertype#browser-type-launch-server) allows to accept websocket connections on a specific address instead of unspecified `0.0.0.0`.\n\n- Playwright now supports Chromium, Firefox and WebKit on Ubuntu 24.04.\n\n- v1.45 is the last release to receive WebKit update for macOS 12 Monterey. Please update macOS to keep using the latest WebKit.\n\n### Browser Versions[​](#browser-versions-1 \"Direct link to Browser Versions\")\n\n- Chromium 127.0.6533.5\n- Mozilla Firefox 127.0\n- WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 126\n- Microsoft Edge 126\n\n## Version 1.44[​](#version-144 \"Direct link to Version 1.44\")\n\n### New APIs[​](#new-apis \"Direct link to New APIs\")\n\n**Accessibility assertions**\n\n- [expect(locator).toHaveAccessibleName()](api/class-locatorassertions#locator-assertions-to-have-accessible-name) checks if the element has the specified accessible name:\n\n  ``` javascript\n  const locator = page.getByRole('button');\n  await expect(locator).toHaveAccessibleName('Submit');\n  ```\n\n- [expect(locator).toHaveAccessibleDescription()](api/class-locatorassertions#locator-assertions-to-have-accessible-description) checks if the element has the specified accessible description:\n\n  ``` javascript\n  const locator = page.getByRole('button');\n  await expect(locator).toHaveAccessibleDescription('Upload a photo');\n  ```\n\n- [expect(locator).toHaveRole()](api/class-locatorassertions#locator-assertions-to-have-role) checks if the element has the specified ARIA role:\n\n  ``` javascript\n  const locator = page.getByTestId('save-button');\n  await expect(locator).toHaveRole('button');\n  ```\n\n**Locator handler**\n\n- After executing the handler added with [page.addLocatorHandler()](api/class-page#page-add-locator-handler), Playwright will now wait until the overlay that triggered the handler is not visible anymore. You can opt-out of this behavior with the new `noWaitAfter` option.\n- You can use new `times` option in [page.addLocatorHandler()](api/class-page#page-add-locator-handler) to specify maximum number of times the handler should be run.\n- The handler in [page.addLocatorHandler()](api/class-page#page-add-locator-handler) now accepts the locator as argument.\n- New [page.removeLocatorHandler()](api/class-page#page-remove-locator-handler) method for removing previously added locator handlers.\n\n``` javascript\nconst locator = page.getByText('This interstitial covers the button');\nawait page.addLocatorHandler(locator, async overlay => {\n  await overlay.locator('#close').click();\n}, { times: 3, noWaitAfter: true });\n// Run your tests that can be interrupted by the overlay.\n// ...\nawait page.removeLocatorHandler(locator);\n```\n\n**Miscellaneous options**\n\n- [`multipart`](api/class-apirequestcontext#api-request-context-fetch-option-multipart) option in `apiRequestContext.fetch()` now accepts [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) and supports repeating fields with the same name.\n\n  ``` javascript\n  const formData = new FormData();\n  formData.append('file', new File(['let x = 2024;'], 'f1.js', { type: 'text/javascript' }));\n  formData.append('file', new File(['hello'], 'f2.txt', { type: 'text/plain' }));\n  context.request.post('https://example.com/uploadFiles', {\n    multipart: formData\n  });\n  ```\n\n- `expect(callback).toPass({ intervals })` can now be configured by `expect.toPass.intervals` option globally in [testConfig.expect](api/class-testconfig#test-config-expect) or per project in [testProject.expect](api/class-testproject#test-project-expect).\n\n- `expect(page).toHaveURL(url)` now supports `ignoreCase` [option](api/class-pageassertions#page-assertions-to-have-url-option-ignore-case).\n\n- [testProject.ignoreSnapshots](api/class-testproject#test-project-ignore-snapshots) allows to configure per project whether to skip screenshot expectations.\n\n**Reporter API**\n\n- New method [suite.entries()](api/class-suite#suite-entries) returns child test suites and test cases in their declaration order. [suite.type](api/class-suite#suite-type) and [testCase.type](api/class-testcase#test-case-type) can be used to tell apart test cases and suites in the list.\n- [Blob](test-reporters#blob-reporter) reporter now allows overriding report file path with a single option `outputFile`. The same option can also be specified as `PLAYWRIGHT_BLOB_OUTPUT_FILE` environment variable that might be more convenient on CI/CD.\n- [JUnit](test-reporters#junit-reporter) reporter now supports `includeProjectInTestName` option.\n\n**Command line**\n\n- `--last-failed` CLI option to for running only tests that failed in the previous run.\n\n  First run all tests:\n\n  ``` javascript\n  $ npx playwright test\n\n  Running 103 tests using 5 workers\n  ...\n  2 failed\n    [chromium] › my-test.spec.ts:8:5 › two ─────────────────────────────────────────────────────────\n    [chromium] › my-test.spec.ts:13:5 › three ──────────────────────────────────────────────  ────────\n  101 passed (30.0s)\n  ```\n\n  Now fix the failing tests and run Playwright again with `--last-failed` option:\n\n  ``` javascript\n  $ npx playwright test --last-failed\n\n  Running 2 tests using 2 workers\n    2 passed (1.2s)\n  ```\n\n### Browser Versions[​](#browser-versions-2 \"Direct link to Browser Versions\")\n\n- Chromium 125.0.6422.14\n- Mozilla Firefox 125.0.1\n- WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 124\n- Microsoft Edge 124\n\n## Version 1.43[​](#version-143 \"Direct link to Version 1.43\")\n\n### New APIs[​](#new-apis-1 \"Direct link to New APIs\")\n\n- Method [browserContext.clearCookies()](api/class-browsercontext#browser-context-clear-cookies) now supports filters to remove only some cookies.\n\n  ``` javascript\n  // Clear all cookies.\n  await context.clearCookies();\n  // New: clear cookies with a particular name.\n  await context.clearCookies({ name: 'session-id' });\n  // New: clear cookies for a particular domain.\n  await context.clearCookies({ domain: 'my-origin.com' });\n  ```\n\n- New mode `retain-on-first-failure` for [testOptions.trace](api/class-testoptions#test-options-trace). In this mode, trace is recorded for the first run of each test, but not for retires. When test run fails, the trace file is retained, otherwise it is removed.\n\n  ``` javascript\n  import { defineConfig } from '@playwright/test';\n\n  export default defineConfig({\n    use: {\n      trace: 'retain-on-first-failure',\n    },\n  });\n  ```\n\n- New property [testInfo.tags](api/class-testinfo#test-info-tags) exposes test tags during test execution.\n\n  ``` javascript\n  test('example', async ({ page }) => {\n    console.log(test.info().tags);\n  });\n  ```\n\n- New method [locator.contentFrame()](api/class-locator#locator-content-frame) converts a [Locator](api/class-locator \"Locator\") object to a [FrameLocator](api/class-framelocator \"FrameLocator\"). This can be useful when you have a [Locator](api/class-locator \"Locator\") object obtained somewhere, and later on would like to interact with the content inside the frame.\n\n  ``` javascript\n  const locator = page.locator('iframe[name=\"embedded\"]');\n  // ...\n  const frameLocator = locator.contentFrame();\n  await frameLocator.getByRole('button').click();\n  ```\n\n- New method [frameLocator.owner()](api/class-framelocator#frame-locator-owner) converts a [FrameLocator](api/class-framelocator \"FrameLocator\") object to a [Locator](api/class-locator \"Locator\"). This can be useful when you have a [FrameLocator](api/class-framelocator \"FrameLocator\") object obtained somewhere, and later on would like to interact with the `iframe` element.\n\n  ``` javascript\n  const frameLocator = page.frameLocator('iframe[name=\"embedded\"]');\n  // ...\n  const locator = frameLocator.owner();\n  await expect(locator).toBeVisible();\n  ```\n\n### UI Mode Updates[​](#ui-mode-updates \"Direct link to UI Mode Updates\")\n\n- See tags in the test list.\n- Filter by tags by typing `@fast` or clicking on the tag itself.\n- New shortcuts:\n  - \"F5\" to run tests.\n  - \"Shift F5\" to stop running tests.\n  - \"Ctrl \\`\" to toggle test output.\n\n### Browser Versions[​](#browser-versions-3 \"Direct link to Browser Versions\")\n\n- Chromium 124.0.6367.8\n- Mozilla Firefox 124.0\n- WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 123\n- Microsoft Edge 123\n\n## Version 1.42[​](#version-142 \"Direct link to Version 1.42\")\n\n### New APIs[​](#new-apis-2 \"Direct link to New APIs\")\n\n- New method [page.addLocatorHandler()](api/class-page#page-add-locator-handler) registers a callback that will be invoked when specified element becomes visible and may block Playwright actions. The callback can get rid of the overlay. Here is an example that closes a cookie dialog when it appears:\n\n``` javascript\n// Setup the handler.\nawait page.addLocatorHandler(\n    page.getByRole('heading', { name: 'Hej! You are in control of your cookies.' }),\n    async () => {\n      await page.getByRole('button', { name: 'Accept all' }).click();\n    });\n// Write the test as usual.\nawait page.goto('https://www.ikea.com/');\nawait page.getByRole('link', { name: 'Collection of blue and white' }).click();\nawait expect(page.getByRole('heading', { name: 'Light and easy' })).toBeVisible();\n```\n\n- `expect(callback).toPass()` timeout can now be configured by `expect.toPass.timeout` option [globally](api/class-testconfig#test-config-expect) or in [project config](api/class-testproject#test-project-expect)\n- [electronApplication.on('console')](api/class-electronapplication#electron-application-event-console) event is emitted when Electron main process calls console API methods.\n\n``` javascript\nelectronApp.on('console', async msg => {\n  const values = [];\n  for (const arg of msg.args())\n    values.push(await arg.jsonValue());\n  console.log(...values);\n});\nawait electronApp.evaluate(() => console.log('hello', 5, { foo: 'bar' }));\n```\n\n- [New syntax](test-annotations#tag-tests) for adding tags to the tests (@-tokens in the test title are still supported):\n\n``` javascript\ntest('test customer login', {\n  tag: ['@fast', '@login'],\n}, async ({ page }) => {\n  // ...\n});\n```\n\nUse `--grep` command line option to run only tests with certain tags.\n\n``` javascript\nnpx playwright test --grep @fast\n```\n\n- `--project` command line [flag](test-cli#reference) now supports '\\*' wildcard:\n\n``` javascript\nnpx playwright test --project='*mobile*'\n```\n\n- [New syntax](test-annotations#annotate-tests) for test annotations:\n\n``` javascript\ntest('test full report', {\n  annotation: [\n    { type: 'issue', description: 'https://github.com/microsoft/playwright/issues/23180' },\n    { type: 'docs', description: 'https://playwright.dev/docs/test-annotations#tag-tests' },\n  ],\n}, async ({ page }) => {\n  // ...\n});\n```\n\n- [page.pdf()](api/class-page#page-pdf) accepts two new options [`tagged`](api/class-page#page-pdf-option-tagged) and [`outline`](api/class-page#page-pdf-option-outline).\n\n### Announcements[​](#announcements \"Direct link to Announcements\")\n\n- ⚠️ Ubuntu 18 is not supported anymore.\n\n### Browser Versions[​](#browser-versions-4 \"Direct link to Browser Versions\")\n\n- Chromium 123.0.6312.4\n- Mozilla Firefox 123.0\n- WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 122\n- Microsoft Edge 123\n\n## Version 1.41[​](#version-141 \"Direct link to Version 1.41\")\n\n### New APIs[​](#new-apis-3 \"Direct link to New APIs\")\n\n- New method [page.unrouteAll()](api/class-page#page-unroute-all) removes all routes registered by [page.route()](api/class-page#page-route) and [page.routeFromHAR()](api/class-page#page-route-from-har). Optionally allows to wait for ongoing routes to finish, or ignore any errors from them.\n- New method [browserContext.unrouteAll()](api/class-browsercontext#browser-context-unroute-all) removes all routes registered by [browserContext.route()](api/class-browsercontext#browser-context-route) and [browserContext.routeFromHAR()](api/class-browsercontext#browser-context-route-from-har). Optionally allows to wait for ongoing routes to finish, or ignore any errors from them.\n- New option `style` in [page.screenshot()](api/class-page#page-screenshot) and [locator.screenshot()](api/class-locator#locator-screenshot) to add custom CSS to the page before taking a screenshot.\n- New option `stylePath` for methods [expect(page).toHaveScreenshot()](api/class-pageassertions#page-assertions-to-have-screenshot-1) and [expect(locator).toHaveScreenshot()](api/class-locatorassertions#locator-assertions-to-have-screenshot-1) to apply a custom stylesheet while making the screenshot.\n- New `fileName` option for [Blob reporter](test-reporters#blob-reporter), to specify the name of the report to be created.\n\n### Browser Versions[​](#browser-versions-5 \"Direct link to Browser Versions\")\n\n- Chromium 121.0.6167.57\n- Mozilla Firefox 121.0\n- WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 120\n- Microsoft Edge 120\n\n## Version 1.40[​](#version-140 \"Direct link to Version 1.40\")\n\n### Test Generator Update[​](#test-generator-update \"Direct link to Test Generator Update\")\n\nNew tools to generate assertions:\n\n- \"Assert visibility\" tool generates [expect(locator).toBeVisible()](api/class-locatorassertions#locator-assertions-to-be-visible).\n- \"Assert value\" tool generates [expect(locator).toHaveValue()](api/class-locatorassertions#locator-assertions-to-have-value).\n- \"Assert text\" tool generates [expect(locator).toContainText()](api/class-locatorassertions#locator-assertions-to-contain-text).\n\nHere is an example of a generated test with assertions:\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n  await page.getByRole('link', { name: 'Get started' }).click();\n  await expect(page.getByLabel('Breadcrumbs').getByRole('list')).toContainText('Installation');\n  await expect(page.getByLabel('Search')).toBeVisible();\n  await page.getByLabel('Search').click();\n  await page.getByPlaceholder('Search docs').fill('locator');\n  await expect(page.getByPlaceholder('Search docs')).toHaveValue('locator');\n});\n```\n\n### New APIs[​](#new-apis-4 \"Direct link to New APIs\")\n\n- Option `reason` in [page.close()](api/class-page#page-close), [browserContext.close()](api/class-browsercontext#browser-context-close) and [browser.close()](api/class-browser#browser-close). Close reason is reported for all operations interrupted by the closure.\n- Option `firefoxUserPrefs` in [browserType.launchPersistentContext()](api/class-browsertype#browser-type-launch-persistent-context).\n\n### Other Changes[​](#other-changes \"Direct link to Other Changes\")\n\n- Methods [download.path()](api/class-download#download-path) and [download.createReadStream()](api/class-download#download-create-read-stream) throw an error for failed and cancelled downloads.\n- Playwright [docker image](docker) now comes with Node.js v20.\n\n### Browser Versions[​](#browser-versions-6 \"Direct link to Browser Versions\")\n\n- Chromium 120.0.6099.28\n- Mozilla Firefox 119.0\n- WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 119\n- Microsoft Edge 119\n\n## Version 1.39[​](#version-139 \"Direct link to Version 1.39\")\n\n### Add custom matchers to your expect[​](#add-custom-matchers-to-your-expect \"Direct link to Add custom matchers to your expect\")\n\nYou can extend Playwright assertions by providing custom matchers. These matchers will be available on the expect object.\n\n``` javascript\nimport { expect as baseExpect } from '@playwright/test';\nexport const expect = baseExpect.extend({\n  async toHaveAmount(locator: Locator, expected: number, options?: { timeout?: number }) {\n    // ... see documentation for how to write matchers.\n  },\n});\n\ntest('pass', async ({ page }) => {\n  await expect(page.getByTestId('cart')).toHaveAmount(5);\n});\n```\n\nSee the documentation [for a full example](test-assertions#add-custom-matchers-using-expectextend).\n\n### Merge test fixtures[​](#merge-test-fixtures \"Direct link to Merge test fixtures\")\n\nYou can now merge test fixtures from multiple files or modules:\n\n``` javascript\nimport { mergeTests } from '@playwright/test';\nimport { test as dbTest } from 'database-test-utils';\nimport { test as a11yTest } from 'a11y-test-utils';\n\nexport const test = mergeTests(dbTest, a11yTest);\n```\n\n``` javascript\nimport { test } from './fixtures';\n\ntest('passes', async ({ database, page, a11y }) => {\n  // use database and a11y fixtures.\n});\n```\n\n### Merge custom expect matchers[​](#merge-custom-expect-matchers \"Direct link to Merge custom expect matchers\")\n\nYou can now merge custom expect matchers from multiple files or modules:\n\n``` javascript\nimport { mergeTests, mergeExpects } from '@playwright/test';\nimport { test as dbTest, expect as dbExpect } from 'database-test-utils';\nimport { test as a11yTest, expect as a11yExpect } from 'a11y-test-utils';\n\nexport const test = mergeTests(dbTest, a11yTest);\nexport const expect = mergeExpects(dbExpect, a11yExpect);\n```\n\n``` javascript\nimport { test, expect } from './fixtures';\n\ntest('passes', async ({ page, database }) => {\n  await expect(database).toHaveDatabaseUser('admin');\n  await expect(page).toPassA11yAudit();\n});\n```\n\n### Hide implementation details: box test steps[​](#hide-implementation-details-box-test-steps \"Direct link to Hide implementation details: box test steps\")\n\nYou can mark a [test.step()](api/class-test#test-step) as \"boxed\" so that errors inside it point to the step call site.\n\n``` javascript\nasync function login(page) {\n  await test.step('login', async () => {\n    // ...\n  }, { box: true });  // Note the \"box\" option here.\n}\n```\n\n``` javascript\nError: Timed out 5000ms waiting for expect(locator).toBeVisible()\n  ... error details omitted ...\n\n  14 |   await page.goto('https://github.com/login');\n> 15 |   await login(page);\n     |         ^\n  16 | });\n```\n\nSee [test.step()](api/class-test#test-step) documentation for a full example.\n\n### New APIs[​](#new-apis-5 \"Direct link to New APIs\")\n\n- [expect(locator).toHaveAttribute()](api/class-locatorassertions#locator-assertions-to-have-attribute-2)\n\n### Browser Versions[​](#browser-versions-7 \"Direct link to Browser Versions\")\n\n- Chromium 119.0.6045.9\n- Mozilla Firefox 118.0.1\n- WebKit 17.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 118\n- Microsoft Edge 118\n\n## Version 1.38[​](#version-138 \"Direct link to Version 1.38\")\n\n### UI Mode Updates[​](#ui-mode-updates-1 \"Direct link to UI Mode Updates\")\n\n1.  Zoom into time range.\n2.  Network panel redesign.\n\n### New APIs[​](#new-apis-6 \"Direct link to New APIs\")\n\n- [browserContext.on('weberror')](api/class-browsercontext#browser-context-event-web-error)\n- [locator.pressSequentially()](api/class-locator#locator-press-sequentially)\n- The [reporter.onEnd()](api/class-reporter#reporter-on-end) now reports `startTime` and total run `duration`.\n\n### Deprecations[​](#deprecations \"Direct link to Deprecations\")\n\n- The following methods were deprecated: [page.type()](api/class-page#page-type), [frame.type()](api/class-frame#frame-type), [locator.type()](api/class-locator#locator-type) and [elementHandle.type()](api/class-elementhandle#element-handle-type). Please use [locator.fill()](api/class-locator#locator-fill) instead which is much faster. Use [locator.pressSequentially()](api/class-locator#locator-press-sequentially) only if there is a special keyboard handling on the page, and you need to press keys one-by-one.\n\n### Breaking Changes: Playwright no longer downloads browsers automatically[​](#breaking-changes-playwright-no-longer-downloads-browsers-automatically \"Direct link to Breaking Changes: Playwright no longer downloads browsers automatically\")\n\n> **Note**: If you are using `@playwright/test` package, this change does not affect you.\n\nPlaywright recommends to use `@playwright/test` package and download browsers via `npx playwright install` command. If you are following this recommendation, nothing has changed for you.\n\nHowever, up to v1.38, installing the `playwright` package instead of `@playwright/test` did automatically download browsers. This is no longer the case, and we recommend to explicitly download browsers via `npx playwright install` command.\n\n**v1.37 and earlier**\n\n`playwright` package was downloading browsers during `npm install`, while `@playwright/test` was not.\n\n**v1.38 and later**\n\n`playwright` and `@playwright/test` packages do not download browsers during `npm install`.\n\n**Recommended migration**\n\nRun `npx playwright install` to download browsers after `npm install`. For example, in your CI configuration:\n\n``` javascript\n- run: npm ci\n- run: npx playwright install --with-deps\n```\n\n**Alternative migration option - not recommended**\n\nAdd `@playwright/browser-chromium`, `@playwright/browser-firefox` and `@playwright/browser-webkit` as a dependency. These packages download respective browsers during `npm install`. Make sure you keep the version of all playwright packages in sync:\n\n``` javascript\n// package.json\n{\n  \"devDependencies\": {\n    \"playwright\": \"1.38.0\",\n    \"@playwright/browser-chromium\": \"1.38.0\",\n    \"@playwright/browser-firefox\": \"1.38.0\",\n    \"@playwright/browser-webkit\": \"1.38.0\"\n  }\n}\n```\n\n### Browser Versions[​](#browser-versions-8 \"Direct link to Browser Versions\")\n\n- Chromium 117.0.5938.62\n- Mozilla Firefox 117.0\n- WebKit 17.0\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 116\n- Microsoft Edge 116\n\n## Version 1.37[​](#version-137 \"Direct link to Version 1.37\")\n\n### New `npx playwright merge-reports` tool[​](#new-npx-playwright-merge-reports-tool \"Direct link to new-npx-playwright-merge-reports-tool\")\n\nIf you run tests on multiple shards, you can now merge all reports in a single HTML report (or any other report) using the new `merge-reports` CLI tool.\n\nUsing `merge-reports` tool requires the following steps:\n\n1.  Adding a new \"blob\" reporter to the config when running on CI:\n\n    ``` javascript\n    export default defineConfig({\n      testDir: './tests',\n      reporter: process.env.CI ? 'blob' : 'html',\n    });\n    ```\n\n    The \"blob\" reporter will produce \".zip\" files that contain all the information about the test run.\n\n2.  Copying all \"blob\" reports in a single shared location and running `npx playwright merge-reports`:\n\n``` javascript\nnpx playwright merge-reports --reporter html ./all-blob-reports\n```\n\nRead more in [our documentation](test-sharding).\n\n### 📚 Debian 12 Bookworm Support[​](#-debian-12-bookworm-support \"Direct link to 📚 Debian 12 Bookworm Support\")\n\nPlaywright now supports Debian 12 Bookworm on both x86_64 and arm64 for Chromium, Firefox and WebKit. Let us know if you encounter any issues!\n\nLinux support looks like this:\n\n|          | Ubuntu 20.04 | Ubuntu 22.04 | Debian 11 | Debian 12 |\n|:---------|:------------:|:------------:|:---------:|:---------:|\n| Chromium |      ✅      |      ✅      |    ✅     |    ✅     |\n| WebKit   |      ✅      |      ✅      |    ✅     |    ✅     |\n| Firefox  |      ✅      |      ✅      |    ✅     |    ✅     |\n\n### UI Mode Updates[​](#ui-mode-updates-2 \"Direct link to UI Mode Updates\")\n\n- UI Mode now respects project dependencies. You can control which dependencies to respect by checking/unchecking them in a projects list.\n- Console logs from the test are now displayed in the Console tab.\n\n### Browser Versions[​](#browser-versions-9 \"Direct link to Browser Versions\")\n\n- Chromium 116.0.5845.82\n- Mozilla Firefox 115.0\n- WebKit 17.0\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 115\n- Microsoft Edge 115\n\n## Version 1.36[​](#version-136 \"Direct link to Version 1.36\")\n\n🏝️ Summer maintenance release.\n\n### Browser Versions[​](#browser-versions-10 \"Direct link to Browser Versions\")\n\n- Chromium 115.0.5790.75\n- Mozilla Firefox 115.0\n- WebKit 17.0\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 114\n- Microsoft Edge 114\n\n## Version 1.35[​](#version-135 \"Direct link to Version 1.35\")\n\n### Highlights[​](#highlights \"Direct link to Highlights\")\n\n- UI mode is now available in VSCode Playwright extension via a new \"Show trace viewer\" button:\n\n- UI mode and trace viewer mark network requests handled with [page.route()](api/class-page#page-route) and [browserContext.route()](api/class-browsercontext#browser-context-route) handlers, as well as those issued via the [API testing](api-testing):\n\n- New option `maskColor` for methods [page.screenshot()](api/class-page#page-screenshot), [locator.screenshot()](api/class-locator#locator-screenshot), [expect(page).toHaveScreenshot()](api/class-pageassertions#page-assertions-to-have-screenshot-1) and [expect(locator).toHaveScreenshot()](api/class-locatorassertions#locator-assertions-to-have-screenshot-1) to change default masking color:\n\n  ``` javascript\n  await page.goto('https://playwright.dev');\n  await expect(page).toHaveScreenshot({\n    mask: [page.locator('img')],\n    maskColor: '#00FF00', // green\n  });\n  ```\n\n- New `uninstall` CLI command to uninstall browser binaries:\n\n  ``` javascript\n  $ npx playwright uninstall # remove browsers installed by this installation\n  $ npx playwright uninstall --all # remove all ever-install Playwright browsers\n  ```\n\n- Both UI mode and trace viewer now could be opened in a browser tab:\n\n  ``` javascript\n  $ npx playwright test --ui-port 0 # open UI mode in a tab on a random port\n  $ npx playwright show-trace --port 0 # open trace viewer in tab on a random port\n  ```\n\n### ⚠️ Breaking changes[​](#%EF%B8%8F-breaking-changes \"Direct link to ⚠️ Breaking changes\")\n\n- `playwright-core` binary got renamed from `playwright` to `playwright-core`. So if you use `playwright-core` CLI, make sure to update the name:\n\n  ``` javascript\n  $ npx playwright-core install # the new way to install browsers when using playwright-core\n  ```\n\n  This change **does not** affect `@playwright/test` and `playwright` package users.\n\n### Browser Versions[​](#browser-versions-11 \"Direct link to Browser Versions\")\n\n- Chromium 115.0.5790.13\n- Mozilla Firefox 113.0\n- WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 114\n- Microsoft Edge 114\n\n## Version 1.34[​](#version-134 \"Direct link to Version 1.34\")\n\n### Highlights[​](#highlights-1 \"Direct link to Highlights\")\n\n- UI Mode now shows steps, fixtures and attachments:\n\n- New property [testProject.teardown](api/class-testproject#test-project-teardown) to specify a project that needs to run after this and all dependent projects have finished. Teardown is useful to cleanup any resources acquired by this project.\n\n  A common pattern would be a `setup` dependency with a corresponding `teardown`:\n\n  ``` javascript\n  import { defineConfig } from '@playwright/test';\n\n  export default defineConfig({\n    projects: [\n      {\n        name: 'setup',\n        testMatch: /global.setup\\.ts/,\n        teardown: 'teardown',\n      },\n      {\n        name: 'teardown',\n        testMatch: /global.teardown\\.ts/,\n      },\n      {\n        name: 'chromium',\n        use: devices['Desktop Chrome'],\n        dependencies: ['setup'],\n      },\n      {\n        name: 'firefox',\n        use: devices['Desktop Firefox'],\n        dependencies: ['setup'],\n      },\n      {\n        name: 'webkit',\n        use: devices['Desktop Safari'],\n        dependencies: ['setup'],\n      },\n    ],\n  });\n  ```\n\n- New method [`expect.configure`](test-assertions#expectconfigure) to create pre-configured expect instance with its own defaults such as `timeout` and `soft`.\n\n  ``` javascript\n  const slowExpect = expect.configure({ timeout: 10000 });\n  await slowExpect(locator).toHaveText('Submit');\n\n  // Always do soft assertions.\n  const softExpect = expect.configure({ soft: true });\n  ```\n\n- New options `stderr` and `stdout` in [testConfig.webServer](api/class-testconfig#test-config-web-server) to configure output handling:\n\n  ``` javascript\n  import { defineConfig } from '@playwright/test';\n\n  export default defineConfig({\n    // Run your local dev server before starting the tests\n    webServer: {\n      command: 'npm run start',\n      url: 'http://127.0.0.1:3000',\n      reuseExistingServer: !process.env.CI,\n      stdout: 'pipe',\n      stderr: 'pipe',\n    },\n  });\n  ```\n\n- New [locator.and()](api/class-locator#locator-and) to create a locator that matches both locators.\n\n  ``` javascript\n  const button = page.getByRole('button').and(page.getByTitle('Subscribe'));\n  ```\n\n- New events [browserContext.on('console')](api/class-browsercontext#browser-context-event-console) and [browserContext.on('dialog')](api/class-browsercontext#browser-context-event-dialog) to subscribe to any dialogs and console messages from any page from the given browser context. Use the new methods [consoleMessage.page()](api/class-consolemessage#console-message-page) and [dialog.page()](api/class-dialog#dialog-page) to pin-point event source.\n\n### ⚠️ Breaking changes[​](#%EF%B8%8F-breaking-changes-1 \"Direct link to ⚠️ Breaking changes\")\n\n- `npx playwright test` no longer works if you install both `playwright` and `@playwright/test`. There's no need to install both, since you can always import browser automation APIs from `@playwright/test` directly:\n\n  ``` javascript\n  import { chromium, firefox, webkit } from '@playwright/test';\n  /* ... */\n  ```\n\n- Node.js 14 is no longer supported since it [reached its end-of-life](https://nodejs.dev/en/about/releases/) on April 30, 2023.\n\n### Browser Versions[​](#browser-versions-12 \"Direct link to Browser Versions\")\n\n- Chromium 114.0.5735.26\n- Mozilla Firefox 113.0\n- WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 113\n- Microsoft Edge 113\n\n## Version 1.33[​](#version-133 \"Direct link to Version 1.33\")\n\n### Locators Update[​](#locators-update \"Direct link to Locators Update\")\n\n- Use [locator.or()](api/class-locator#locator-or) to create a locator that matches either of the two locators. Consider a scenario where you'd like to click on a \"New email\" button, but sometimes a security settings dialog shows up instead. In this case, you can wait for either a \"New email\" button, or a dialog and act accordingly:\n\n  ``` javascript\n  const newEmail = page.getByRole('button', { name: 'New email' });\n  const dialog = page.getByText('Confirm security settings');\n  await expect(newEmail.or(dialog)).toBeVisible();\n  if (await dialog.isVisible())\n    await page.getByRole('button', { name: 'Dismiss' }).click();\n  await newEmail.click();\n  ```\n\n- Use new options `hasNot` and `hasNotText` in [locator.filter()](api/class-locator#locator-filter) to find elements that **do not match** certain conditions.\n\n  ``` javascript\n  const rowLocator = page.locator('tr');\n  await rowLocator\n      .filter({ hasNotText: 'text in column 1' })\n      .filter({ hasNot: page.getByRole('button', { name: 'column 2 button' }) })\n      .screenshot();\n  ```\n\n- Use new web-first assertion [expect(locator).toBeAttached()](api/class-locatorassertions#locator-assertions-to-be-attached) to ensure that the element is present in the page's DOM. Do not confuse with the [expect(locator).toBeVisible()](api/class-locatorassertions#locator-assertions-to-be-visible) that ensures that element is both attached & visible.\n\n### New APIs[​](#new-apis-7 \"Direct link to New APIs\")\n\n- [locator.or()](api/class-locator#locator-or)\n- New option `hasNot` in [locator.filter()](api/class-locator#locator-filter)\n- New option `hasNotText` in [locator.filter()](api/class-locator#locator-filter)\n- [expect(locator).toBeAttached()](api/class-locatorassertions#locator-assertions-to-be-attached)\n- New option `timeout` in [route.fetch()](api/class-route#route-fetch)\n- [reporter.onExit()](api/class-reporter#reporter-on-exit)\n\n### ⚠️ Breaking change[​](#%EF%B8%8F-breaking-change \"Direct link to ⚠️ Breaking change\")\n\n- The `mcr.microsoft.com/playwright:v1.33.0` now serves a Playwright image based on Ubuntu Jammy. To use the focal-based image, please use `mcr.microsoft.com/playwright:v1.33.0-focal` instead.\n\n### Browser Versions[​](#browser-versions-13 \"Direct link to Browser Versions\")\n\n- Chromium 113.0.5672.53\n- Mozilla Firefox 112.0\n- WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 112\n- Microsoft Edge 112\n\n## Version 1.32[​](#version-132 \"Direct link to Version 1.32\")\n\n### Introducing UI Mode (preview)[​](#introducing-ui-mode-preview \"Direct link to Introducing UI Mode (preview)\")\n\nNew [UI Mode](test-ui-mode) lets you explore, run and debug tests. Comes with a built-in watch mode.\n\nEngage with a new flag `--ui`:\n\n``` javascript\nnpx playwright test --ui\n```\n\n### New APIs[​](#new-apis-8 \"Direct link to New APIs\")\n\n- New options `updateMode` and `updateContent` in [page.routeFromHAR()](api/class-page#page-route-from-har) and [browserContext.routeFromHAR()](api/class-browsercontext#browser-context-route-from-har).\n- Chaining existing locator objects, see [locator docs](locators#matching-inside-a-locator) for details.\n- New property [testInfo.testId](api/class-testinfo#test-info-test-id).\n- New option `name` in method [tracing.startChunk()](api/class-tracing#tracing-start-chunk).\n\n### ⚠️ Breaking change in component tests[​](#%EF%B8%8F-breaking-change-in-component-tests \"Direct link to ⚠️ Breaking change in component tests\")\n\nNote: **component tests only**, does not affect end-to-end tests.\n\n- `@playwright/experimental-ct-react` now supports **React 18 only**.\n- If you're running component tests with React 16 or 17, please replace `@playwright/experimental-ct-react` with `@playwright/experimental-ct-react17`.\n\n### Browser Versions[​](#browser-versions-14 \"Direct link to Browser Versions\")\n\n- Chromium 112.0.5615.29\n- Mozilla Firefox 111.0\n- WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 111\n- Microsoft Edge 111\n\n## Version 1.31[​](#version-131 \"Direct link to Version 1.31\")\n\n### New APIs[​](#new-apis-9 \"Direct link to New APIs\")\n\n- New property [testProject.dependencies](api/class-testproject#test-project-dependencies) to configure dependencies between projects.\n\n  Using dependencies allows global setup to produce traces and other artifacts, see the setup steps in the test report and more.\n\n  ``` javascript\n  import { defineConfig } from '@playwright/test';\n\n  export default defineConfig({\n    projects: [\n      {\n        name: 'setup',\n        testMatch: /global.setup\\.ts/,\n      },\n      {\n        name: 'chromium',\n        use: devices['Desktop Chrome'],\n        dependencies: ['setup'],\n      },\n      {\n        name: 'firefox',\n        use: devices['Desktop Firefox'],\n        dependencies: ['setup'],\n      },\n      {\n        name: 'webkit',\n        use: devices['Desktop Safari'],\n        dependencies: ['setup'],\n      },\n    ],\n  });\n  ```\n\n- New assertion [expect(locator).toBeInViewport()](api/class-locatorassertions#locator-assertions-to-be-in-viewport) ensures that locator points to an element that intersects viewport, according to the [intersection observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API).\n\n  ``` javascript\n  const button = page.getByRole('button');\n\n  // Make sure at least some part of element intersects viewport.\n  await expect(button).toBeInViewport();\n\n  // Make sure element is fully outside of viewport.\n  await expect(button).not.toBeInViewport();\n\n  // Make sure that at least half of the element intersects viewport.\n  await expect(button).toBeInViewport({ ratio: 0.5 });\n  ```\n\n### Miscellaneous[​](#miscellaneous-2 \"Direct link to Miscellaneous\")\n\n- DOM snapshots in trace viewer can be now opened in a separate window.\n- New method `defineConfig` to be used in `playwright.config`.\n- New option `Route.fetch.maxRedirects` for method [route.fetch()](api/class-route#route-fetch).\n- Playwright now supports Debian 11 arm64.\n- Official [docker images](docker) now include Node 18 instead of Node 16.\n\n### ⚠️ Breaking change in component tests[​](#%EF%B8%8F-breaking-change-in-component-tests-1 \"Direct link to ⚠️ Breaking change in component tests\")\n\nNote: **component tests only**, does not affect end-to-end tests.\n\n`playwright-ct.config` configuration file for [component testing](test-components) now requires calling `defineConfig`.\n\n``` javascript\n// Before\n\nimport { type PlaywrightTestConfig, devices } from '@playwright/experimental-ct-react';\nconst config: PlaywrightTestConfig = {\n  // ... config goes here ...\n};\nexport default config;\n```\n\nReplace `config` variable definition with `defineConfig` call:\n\n``` javascript\n// After\n\nimport { defineConfig, devices } from '@playwright/experimental-ct-react';\nexport default defineConfig({\n  // ... config goes here ...\n});\n```\n\n### Browser Versions[​](#browser-versions-15 \"Direct link to Browser Versions\")\n\n- Chromium 111.0.5563.19\n- Mozilla Firefox 109.0\n- WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 110\n- Microsoft Edge 110\n\n## Version 1.30[​](#version-130 \"Direct link to Version 1.30\")\n\n### Browser Versions[​](#browser-versions-16 \"Direct link to Browser Versions\")\n\n- Chromium 110.0.5481.38\n- Mozilla Firefox 108.0.2\n- WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 109\n- Microsoft Edge 109\n\n## Version 1.29[​](#version-129 \"Direct link to Version 1.29\")\n\n### New APIs[​](#new-apis-10 \"Direct link to New APIs\")\n\n- New method [route.fetch()](api/class-route#route-fetch) and new option `json` for [route.fulfill()](api/class-route#route-fulfill):\n\n  ``` javascript\n  await page.route('**/api/settings', async route => {\n    // Fetch original settings.\n    const response = await route.fetch();\n\n    // Force settings theme to a predefined value.\n    const json = await response.json();\n    json.theme = 'Solorized';\n\n    // Fulfill with modified data.\n    await route.fulfill({ json });\n  });\n  ```\n\n- New method [locator.all()](api/class-locator#locator-all) to iterate over all matching elements:\n\n  ``` javascript\n  // Check all checkboxes!\n  const checkboxes = page.getByRole('checkbox');\n  for (const checkbox of await checkboxes.all())\n    await checkbox.check();\n  ```\n\n- [locator.selectOption()](api/class-locator#locator-select-option) matches now by value or label:\n\n  ``` html\n  <select multiple>\n    <option value=\"red\">Red</div>\n    <option value=\"green\">Green</div>\n    <option value=\"blue\">Blue</div>\n  </select>\n  ```\n\n  ``` javascript\n  await element.selectOption('Red');\n  ```\n\n- Retry blocks of code until all assertions pass:\n\n  ``` javascript\n  await expect(async () => {\n    const response = await page.request.get('https://api.example.com');\n    await expect(response).toBeOK();\n  }).toPass();\n  ```\n\n  Read more in [our documentation](test-assertions#expecttopass).\n\n- Automatically capture **full page screenshot** on test failure:\n\n  ``` javascript\n  import { defineConfig } from '@playwright/test';\n  export default defineConfig({\n    use: {\n      screenshot: {\n        mode: 'only-on-failure',\n        fullPage: true,\n      }\n    }\n  });\n  ```\n\n### Miscellaneous[​](#miscellaneous-3 \"Direct link to Miscellaneous\")\n\n- Playwright Test now respects [`jsconfig.json`](https://code.visualstudio.com/docs/languages/jsconfig).\n- New options `args` and `proxy` for [androidDevice.launchBrowser()](api/class-androiddevice#android-device-launch-browser).\n- Option `postData` in method [route.continue()](api/class-route#route-continue) now supports [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\") values.\n\n### Browser Versions[​](#browser-versions-17 \"Direct link to Browser Versions\")\n\n- Chromium 109.0.5414.46\n- Mozilla Firefox 107.0\n- WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 108\n- Microsoft Edge 108\n\n## Version 1.28[​](#version-128 \"Direct link to Version 1.28\")\n\n### Playwright Tools[​](#playwright-tools \"Direct link to Playwright Tools\")\n\n- **Record at Cursor in VSCode.** You can run the test, position the cursor at the end of the test and continue generating the test.\n\n- **Live Locators in VSCode.** You can hover and edit locators in VSCode to get them highlighted in the opened browser.\n- **Live Locators in CodeGen.** Generate a locator for any element on the page using \"Explore\" tool.\n\n&nbsp;\n\n- **Codegen and Trace Viewer Dark Theme.** Automatically picked up from operating system settings.\n\n### Test Runner[​](#test-runner-1 \"Direct link to Test Runner\")\n\n- Configure retries and test timeout for a file or a test with [test.describe.configure()](api/class-test#test-describe-configure).\n\n  ``` javascript\n  // Each test in the file will be retried twice and have a timeout of 20 seconds.\n  test.describe.configure({ retries: 2, timeout: 20_000 });\n  test('runs first', async ({ page }) => {});\n  test('runs second', async ({ page }) => {});\n  ```\n\n- Use [testProject.snapshotPathTemplate](api/class-testproject#test-project-snapshot-path-template) and [testConfig.snapshotPathTemplate](api/class-testconfig#test-config-snapshot-path-template) to configure a template controlling location of snapshots generated by [expect(page).toHaveScreenshot()](api/class-pageassertions#page-assertions-to-have-screenshot-1) and [expect(value).toMatchSnapshot()](api/class-snapshotassertions#snapshot-assertions-to-match-snapshot-1).\n\n  ``` javascript\n  import { defineConfig } from '@playwright/test';\n  export default defineConfig({\n    testDir: './tests',\n    snapshotPathTemplate: '{testDir}/__screenshots__/{testFilePath}/{arg}{ext}',\n  });\n  ```\n\n### New APIs[​](#new-apis-11 \"Direct link to New APIs\")\n\n- [locator.blur()](api/class-locator#locator-blur)\n- [locator.clear()](api/class-locator#locator-clear)\n- [android.launchServer()](api/class-android#android-launch-server) and [android.connect()](api/class-android#android-connect)\n- [androidDevice.on('close')](api/class-androiddevice#android-device-event-close)\n\n### Browser Versions[​](#browser-versions-18 \"Direct link to Browser Versions\")\n\n- Chromium 108.0.5359.29\n- Mozilla Firefox 106.0\n- WebKit 16.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 107\n- Microsoft Edge 107\n\n## Version 1.27[​](#version-127 \"Direct link to Version 1.27\")\n\n### Locators[​](#locators \"Direct link to Locators\")\n\nWith these new APIs writing locators is a joy:\n\n- [page.getByText()](api/class-page#page-get-by-text) to locate by text content.\n- [page.getByRole()](api/class-page#page-get-by-role) to locate by [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n- [page.getByLabel()](api/class-page#page-get-by-label) to locate a form control by associated label's text.\n- [page.getByTestId()](api/class-page#page-get-by-test-id) to locate an element based on its `data-testid` attribute (other attribute can be configured).\n- [page.getByPlaceholder()](api/class-page#page-get-by-placeholder) to locate an input by placeholder.\n- [page.getByAltText()](api/class-page#page-get-by-alt-text) to locate an element, usually image, by its text alternative.\n- [page.getByTitle()](api/class-page#page-get-by-title) to locate an element by its title.\n\n``` javascript\nawait page.getByLabel('User Name').fill('John');\n\nawait page.getByLabel('Password').fill('secret-password');\n\nawait page.getByRole('button', { name: 'Sign in' }).click();\n\nawait expect(page.getByText('Welcome, John!')).toBeVisible();\n```\n\nAll the same methods are also available on [Locator](api/class-locator \"Locator\"), [FrameLocator](api/class-framelocator \"FrameLocator\") and [Frame](api/class-frame \"Frame\") classes.\n\n### Other highlights[​](#other-highlights \"Direct link to Other highlights\")\n\n- `workers` option in the `playwright.config.ts` now accepts a percentage string to use some of the available CPUs. You can also pass it in the command line:\n\n  ``` javascript\n  npx playwright test --workers=20%\n  ```\n\n- New options `host` and `port` for the html reporter.\n\n  ``` javascript\n  import { defineConfig } from '@playwright/test';\n\n  export default defineConfig({\n    reporter: [['html', { host: 'localhost', port: '9223' }]],\n  });\n  ```\n\n- New field `FullConfig.configFile` is available to test reporters, specifying the path to the config file if any.\n\n- As announced in v1.25, Ubuntu 18 will not be supported as of Dec 2022. In addition to that, there will be no WebKit updates on Ubuntu 18 starting from the next Playwright release.\n\n### Behavior Changes[​](#behavior-changes \"Direct link to Behavior Changes\")\n\n- [expect(locator).toHaveAttribute()](api/class-locatorassertions#locator-assertions-to-have-attribute) with an empty value does not match missing attribute anymore. For example, the following snippet will succeed when `button` **does not** have a `disabled` attribute.\n\n  ``` javascript\n  await expect(page.getByRole('button')).toHaveAttribute('disabled', '');\n  ```\n\n- Command line options `--grep` and `--grep-invert` previously incorrectly ignored `grep` and `grepInvert` options specified in the config. Now all of them are applied together.\n\n### Browser Versions[​](#browser-versions-19 \"Direct link to Browser Versions\")\n\n- Chromium 107.0.5304.18\n- Mozilla Firefox 105.0.1\n- WebKit 16.0\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 106\n- Microsoft Edge 106\n\n## Version 1.26[​](#version-126 \"Direct link to Version 1.26\")\n\n### Assertions[​](#assertions \"Direct link to Assertions\")\n\n- New option `enabled` for [expect(locator).toBeEnabled()](api/class-locatorassertions#locator-assertions-to-be-enabled).\n- [expect(locator).toHaveText()](api/class-locatorassertions#locator-assertions-to-have-text) now pierces open shadow roots.\n- New option `editable` for [expect(locator).toBeEditable()](api/class-locatorassertions#locator-assertions-to-be-editable).\n- New option `visible` for [expect(locator).toBeVisible()](api/class-locatorassertions#locator-assertions-to-be-visible).\n\n### Other highlights[​](#other-highlights-1 \"Direct link to Other highlights\")\n\n- New option `maxRedirects` for [apiRequestContext.get()](api/class-apirequestcontext#api-request-context-get) and others to limit redirect count.\n- New command-line flag `--pass-with-no-tests` that allows the test suite to pass when no files are found.\n- New command-line flag `--ignore-snapshots` to skip snapshot expectations, such as `expect(value).toMatchSnapshot()` and `expect(page).toHaveScreenshot()`.\n\n### Behavior Change[​](#behavior-change \"Direct link to Behavior Change\")\n\nA bunch of Playwright APIs already support the `waitUntil: 'domcontentloaded'` option. For example:\n\n``` javascript\nawait page.goto('https://playwright.dev', {\n  waitUntil: 'domcontentloaded',\n});\n```\n\nPrior to 1.26, this would wait for all iframes to fire the `DOMContentLoaded` event.\n\nTo align with web specification, the `'domcontentloaded'` value only waits for the target frame to fire the `'DOMContentLoaded'` event. Use `waitUntil: 'load'` to wait for all iframes.\n\n### Browser Versions[​](#browser-versions-20 \"Direct link to Browser Versions\")\n\n- Chromium 106.0.5249.30\n- Mozilla Firefox 104.0\n- WebKit 16.0\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 105\n- Microsoft Edge 105\n\n## Version 1.25[​](#version-125 \"Direct link to Version 1.25\")\n\n### VSCode Extension[​](#vscode-extension \"Direct link to VSCode Extension\")\n\n- Watch your tests running live & keep devtools open.\n- Pick selector.\n- Record new test from current page state.\n\n### Test Runner[​](#test-runner-2 \"Direct link to Test Runner\")\n\n- [test.step()](api/class-test#test-step) now returns the value of the step function:\n\n  ``` javascript\n  test('should work', async ({ page }) => {\n    const pageTitle = await test.step('get title', async () => {\n      await page.goto('https://playwright.dev');\n      return await page.title();\n    });\n    console.log(pageTitle);\n  });\n  ```\n\n- Added [test.describe.fixme()](api/class-test#test-describe-fixme).\n\n- New `'interrupted'` test status.\n\n- Enable tracing via CLI flag: `npx playwright test --trace=on`.\n\n### Announcements[​](#announcements-1 \"Direct link to Announcements\")\n\n- 🎁 We now ship Ubuntu 22.04 Jammy Jellyfish docker image: `mcr.microsoft.com/playwright:v1.34.0-jammy`.\n- 🪦 This is the last release with macOS 10.15 support (deprecated as of 1.21).\n- 🪦 This is the last release with Node.js 12 support, we recommend upgrading to Node.js LTS (16).\n- ⚠️ Ubuntu 18 is now deprecated and will not be supported as of Dec 2022.\n\n### Browser Versions[​](#browser-versions-21 \"Direct link to Browser Versions\")\n\n- Chromium 105.0.5195.19\n- Mozilla Firefox 103.0\n- WebKit 16.0\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 104\n- Microsoft Edge 104\n\n## Version 1.24[​](#version-124 \"Direct link to Version 1.24\")\n\n### 🌍 Multiple Web Servers in `playwright.config.ts`[​](#-multiple-web-servers-in-playwrightconfigts \"Direct link to -multiple-web-servers-in-playwrightconfigts\")\n\nLaunch multiple web servers, databases, or other processes by passing an array of configurations:\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  webServer: [\n    {\n      command: 'npm run start',\n      url: 'http://127.0.0.1:3000',\n      timeout: 120 * 1000,\n      reuseExistingServer: !process.env.CI,\n    },\n    {\n      command: 'npm run backend',\n      url: 'http://127.0.0.1:3333',\n      timeout: 120 * 1000,\n      reuseExistingServer: !process.env.CI,\n    }\n  ],\n  use: {\n    baseURL: 'http://localhost:3000/',\n  },\n});\n```\n\n### 🐂 Debian 11 Bullseye Support[​](#-debian-11-bullseye-support \"Direct link to 🐂 Debian 11 Bullseye Support\")\n\nPlaywright now supports Debian 11 Bullseye on x86_64 for Chromium, Firefox and WebKit. Let us know if you encounter any issues!\n\nLinux support looks like this:\n\n\\| \\| Ubuntu 20.04 \\| Ubuntu 22.04 \\| Debian 11 \\| :--- \\| :---: \\| :---: \\| :---: \\| :---: \\| \\| Chromium \\| ✅ \\| ✅ \\| ✅ \\| \\| WebKit \\| ✅ \\| ✅ \\| ✅ \\| \\| Firefox \\| ✅ \\| ✅ \\| ✅ \\|\n\n### 🕵️ Anonymous Describe[​](#%EF%B8%8F-anonymous-describe \"Direct link to 🕵️ Anonymous Describe\")\n\nIt is now possible to call [test.describe()](api/class-test#test-describe) to create suites without a title. This is useful for giving a group of tests a common option with [test.use()](api/class-test#test-use).\n\n``` javascript\ntest.describe(() => {\n  test.use({ colorScheme: 'dark' });\n\n  test('one', async ({ page }) => {\n    // ...\n  });\n\n  test('two', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n### 🧩 Component Tests Update[​](#-component-tests-update \"Direct link to 🧩 Component Tests Update\")\n\nPlaywright 1.24 Component Tests introduce `beforeMount` and `afterMount` hooks. Use these to configure your app for tests.\n\nFor example, this could be used to setup App router in Vue.js:\n\n``` javascript\nimport { test } from '@playwright/experimental-ct-vue';\nimport { Component } from './mycomponent';\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(Component, {\n    hooksConfig: {\n      /* anything to configure your app */\n    }\n  });\n});\n```\n\n``` javascript\nimport { router } from '../router';\nimport { beforeMount } from '@playwright/experimental-ct-vue/hooks';\n\nbeforeMount(async ({ app, hooksConfig }) => {\n  app.use(router);\n});\n```\n\nA similar configuration in Next.js would look like this:\n\n``` javascript\nimport { test } from '@playwright/experimental-ct-react';\nimport { Component } from './mycomponent';\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(<Component></Component>, {\n    // Pass mock value from test into `beforeMount`.\n    hooksConfig: {\n      router: {\n        query: { page: 1, per_page: 10 },\n        asPath: '/posts'\n      }\n    }\n  });\n});\n```\n\n``` javascript\nimport router from 'next/router';\nimport { beforeMount } from '@playwright/experimental-ct-react/hooks';\n\nbeforeMount(async ({ hooksConfig }) => {\n  // Before mount, redefine useRouter to return mock value from test.\n  router.useRouter = () => hooksConfig.router;\n});\n```\n\n## Version 1.23[​](#version-123 \"Direct link to Version 1.23\")\n\n### Network Replay[​](#network-replay \"Direct link to Network Replay\")\n\nNow you can record network traffic into a HAR file and re-use this traffic in your tests.\n\nTo record network into HAR file:\n\n``` javascript\nnpx playwright open --save-har=github.har.zip https://github.com/microsoft\n```\n\nAlternatively, you can record HAR programmatically:\n\n``` javascript\nconst context = await browser.newContext({\n  recordHar: { path: 'github.har.zip' }\n});\n// ... do stuff ...\nawait context.close();\n```\n\nUse the new methods [page.routeFromHAR()](api/class-page#page-route-from-har) or [browserContext.routeFromHAR()](api/class-browsercontext#browser-context-route-from-har) to serve matching responses from the [HAR](http://www.softwareishard.com/blog/har-12-spec/) file:\n\n``` javascript\nawait context.routeFromHAR('github.har.zip');\n```\n\nRead more in [our documentation](mock#mocking-with-har-files).\n\n### Advanced Routing[​](#advanced-routing \"Direct link to Advanced Routing\")\n\nYou can now use [route.fallback()](api/class-route#route-fallback) to defer routing to other handlers.\n\nConsider the following example:\n\n``` javascript\n// Remove a header from all requests.\ntest.beforeEach(async ({ page }) => {\n  await page.route('**/*', async route => {\n    const headers = await route.request().allHeaders();\n    delete headers['if-none-match'];\n    await route.fallback({ headers });\n  });\n});\n\ntest('should work', async ({ page }) => {\n  await page.route('**/*', async route => {\n    if (route.request().resourceType() === 'image')\n      await route.abort();\n    else\n      await route.fallback();\n  });\n});\n```\n\nNote that the new methods [page.routeFromHAR()](api/class-page#page-route-from-har) and [browserContext.routeFromHAR()](api/class-browsercontext#browser-context-route-from-har) also participate in routing and could be deferred to.\n\n### Web-First Assertions Update[​](#web-first-assertions-update \"Direct link to Web-First Assertions Update\")\n\n- New method [expect(locator).toHaveValues()](api/class-locatorassertions#locator-assertions-to-have-values) that asserts all selected values of `<select multiple>` element.\n- Methods [expect(locator).toContainText()](api/class-locatorassertions#locator-assertions-to-contain-text) and [expect(locator).toHaveText()](api/class-locatorassertions#locator-assertions-to-have-text) now accept `ignoreCase` option.\n\n### Component Tests Update[​](#component-tests-update \"Direct link to Component Tests Update\")\n\n- Support for Vue2 via the [`@playwright/experimental-ct-vue2`](https://www.npmjs.com/package/@playwright/experimental-ct-vue2) package.\n- Support for component tests for [create-react-app](https://www.npmjs.com/package/create-react-app) with components in `.js` files.\n\nRead more about [component testing with Playwright](test-components).\n\n### Miscellaneous[​](#miscellaneous-4 \"Direct link to Miscellaneous\")\n\n- If there's a service worker that's in your way, you can now easily disable it with a new context option `serviceWorkers`:\n\n  ``` javascript\n  export default {\n    use: {\n      serviceWorkers: 'block',\n    }\n  };\n  ```\n\n- Using `.zip` path for `recordHar` context option automatically zips the resulting HAR:\n\n  ``` javascript\n  const context = await browser.newContext({\n    recordHar: {\n      path: 'github.har.zip',\n    }\n  });\n  ```\n\n- If you intend to edit HAR by hand, consider using the `\"minimal\"` HAR recording mode that only records information that is essential for replaying:\n\n  ``` javascript\n  const context = await browser.newContext({\n    recordHar: {\n      path: 'github.har',\n      mode: 'minimal',\n    }\n  });\n  ```\n\n- Playwright now runs on Ubuntu 22 amd64 and Ubuntu 22 arm64. We also publish new docker image `mcr.microsoft.com/playwright:v1.34.0-jammy`.\n\n### ⚠️ Breaking Changes ⚠️[​](#%EF%B8%8F-breaking-changes-%EF%B8%8F \"Direct link to ⚠️ Breaking Changes ⚠️\")\n\nWebServer is now considered \"ready\" if request to the specified url has any of the following HTTP status codes:\n\n- `200-299`\n- `300-399` (new)\n- `400`, `401`, `402`, `403` (new)\n\n## Version 1.22[​](#version-122 \"Direct link to Version 1.22\")\n\n### Highlights[​](#highlights-2 \"Direct link to Highlights\")\n\n- Components Testing (preview)\n\n  Playwright Test can now test your [React](https://reactjs.org/), [Vue.js](https://vuejs.org/) or [Svelte](https://svelte.dev/) components. You can use all the features of Playwright Test (such as parallelization, emulation & debugging) while running components in real browsers.\n\n  Here is what a typical component test looks like:\n\n  ``` javascript\n  import { test, expect } from '@playwright/experimental-ct-react';\n  import App from './App';\n\n  // Let's test component in a dark scheme!\n  test.use({ colorScheme: 'dark' });\n\n  test('should render', async ({ mount }) => {\n    const component = await mount(<App></App>);\n\n    // As with any Playwright test, assert locator text.\n    await expect(component).toContainText('React');\n    // Or do a screenshot 🚀\n    await expect(component).toHaveScreenshot();\n    // Or use any Playwright method\n    await component.click();\n  });\n  ```\n\n  Read more in [our documentation](test-components).\n\n- Role selectors that allow selecting elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n\n  ``` javascript\n  // Click a button with accessible name \"log in\"\n  await page.locator('role=button[name=\"log in\"]').click();\n  ```\n\n  Read more in [our documentation](locators#locate-by-role).\n\n- New [locator.filter()](api/class-locator#locator-filter) API to filter an existing locator\n\n  ``` javascript\n  const buttons = page.locator('role=button');\n  // ...\n  const submitButton = buttons.filter({ hasText: 'Submit' });\n  await submitButton.click();\n  ```\n\n- New web-first assertions [expect(page).toHaveScreenshot()](api/class-pageassertions#page-assertions-to-have-screenshot-1) and [expect(locator).toHaveScreenshot()](api/class-locatorassertions#locator-assertions-to-have-screenshot-1) that wait for screenshot stabilization and enhances test reliability.\n\n  The new assertions has screenshot-specific defaults, such as:\n\n  - disables animations\n  - uses CSS scale option\n\n  ``` javascript\n  await page.goto('https://playwright.dev');\n  await expect(page).toHaveScreenshot();\n  ```\n\n  The new [expect(page).toHaveScreenshot()](api/class-pageassertions#page-assertions-to-have-screenshot-1) saves screenshots at the same location as [expect(value).toMatchSnapshot()](api/class-snapshotassertions#snapshot-assertions-to-match-snapshot-1).\n\n## Version 1.21[​](#version-121 \"Direct link to Version 1.21\")\n\n### Highlights[​](#highlights-3 \"Direct link to Highlights\")\n\n- New role selectors that allow selecting elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).\n\n  ``` javascript\n  // Click a button with accessible name \"log in\"\n  await page.locator('role=button[name=\"log in\"]').click();\n  ```\n\n  Read more in [our documentation](locators#locate-by-role).\n\n- New `scale` option in [page.screenshot()](api/class-page#page-screenshot) for smaller sized screenshots.\n\n- New `caret` option in [page.screenshot()](api/class-page#page-screenshot) to control text caret. Defaults to `\"hide\"`.\n\n- New method `expect.poll` to wait for an arbitrary condition:\n\n  ``` javascript\n  // Poll the method until it returns an expected result.\n  await expect.poll(async () => {\n    const response = await page.request.get('https://api.example.com');\n    return response.status();\n  }).toBe(200);\n  ```\n\n  `expect.poll` supports most synchronous matchers, like `.toBe()`, `.toContain()`, etc. Read more in [our documentation](test-assertions#expectpoll).\n\n### Behavior Changes[​](#behavior-changes-1 \"Direct link to Behavior Changes\")\n\n- ESM support when running TypeScript tests is now enabled by default. The `PLAYWRIGHT_EXPERIMENTAL_TS_ESM` env variable is no longer required.\n- The `mcr.microsoft.com/playwright` docker image no longer contains Python. Please use `mcr.microsoft.com/playwright/python` as a Playwright-ready docker image with pre-installed Python.\n- Playwright now supports large file uploads (100s of MBs) via [locator.setInputFiles()](api/class-locator#locator-set-input-files) API.\n\n### Browser Versions[​](#browser-versions-22 \"Direct link to Browser Versions\")\n\n- Chromium 101.0.4951.26\n- Mozilla Firefox 98.0.2\n- WebKit 15.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 100\n- Microsoft Edge 100\n\n## Version 1.20[​](#version-120 \"Direct link to Version 1.20\")\n\n### Highlights[​](#highlights-4 \"Direct link to Highlights\")\n\n- New options for methods [page.screenshot()](api/class-page#page-screenshot), [locator.screenshot()](api/class-locator#locator-screenshot) and [elementHandle.screenshot()](api/class-elementhandle#element-handle-screenshot):\n\n  - Option `animations: \"disabled\"` rewinds all CSS animations and transitions to a consistent state\n  - Option `mask: Locator[]` masks given elements, overlaying them with pink `#FF00FF` boxes.\n\n- `expect().toMatchSnapshot()` now supports anonymous snapshots: when snapshot name is missing, Playwright Test will generate one automatically:\n\n  ``` javascript\n  expect('Web is Awesome <3').toMatchSnapshot();\n  ```\n\n- New `maxDiffPixels` and `maxDiffPixelRatio` options for fine-grained screenshot comparison using `expect().toMatchSnapshot()`:\n\n  ``` javascript\n  expect(await page.screenshot()).toMatchSnapshot({\n    maxDiffPixels: 27, // allow no more than 27 different pixels.\n  });\n  ```\n\n  It is most convenient to specify `maxDiffPixels` or `maxDiffPixelRatio` once in [testConfig.expect](api/class-testconfig#test-config-expect).\n\n- Playwright Test now adds [testConfig.fullyParallel](api/class-testconfig#test-config-fully-parallel) mode. By default, Playwright Test parallelizes between files. In fully parallel mode, tests inside a single file are also run in parallel. You can also use `--fully-parallel` command line flag.\n\n  ``` javascript\n  export default {\n    fullyParallel: true,\n  };\n  ```\n\n- [testProject.grep](api/class-testproject#test-project-grep) and [testProject.grepInvert](api/class-testproject#test-project-grep-invert) are now configurable per project. For example, you can now configure smoke tests project using `grep`:\n\n  ``` javascript\n  export default {\n    projects: [\n      {\n        name: 'smoke tests',\n        grep: /@smoke/,\n      },\n    ],\n  };\n  ```\n\n- [Trace Viewer](trace-viewer) now shows [API testing requests](api-testing).\n\n- [locator.highlight()](api/class-locator#locator-highlight) visually reveals element(s) for easier debugging.\n\n### Announcements[​](#announcements-2 \"Direct link to Announcements\")\n\n- We now ship a designated Python docker image `mcr.microsoft.com/playwright/python`. Please switch over to it if you use Python. This is the last release that includes Python inside our javascript `mcr.microsoft.com/playwright` docker image.\n- v1.20 is the last release to receive WebKit update for macOS 10.15 Catalina. Please update macOS to keep using latest & greatest WebKit!\n\n### Browser Versions[​](#browser-versions-23 \"Direct link to Browser Versions\")\n\n- Chromium 101.0.4921.0\n- Mozilla Firefox 97.0.1\n- WebKit 15.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 99\n- Microsoft Edge 99\n\n## Version 1.19[​](#version-119 \"Direct link to Version 1.19\")\n\n### Playwright Test Update[​](#playwright-test-update \"Direct link to Playwright Test Update\")\n\n- Playwright Test v1.19 now supports *soft assertions*. Failed soft assertions\n\n  **do not** terminate test execution, but mark the test as failed.\n\n  ``` javascript\n  // Make a few checks that will not stop the test when failed...\n  await expect.soft(page.locator('#status')).toHaveText('Success');\n  await expect.soft(page.locator('#eta')).toHaveText('1 day');\n\n  // ... and continue the test to check more things.\n  await page.locator('#next-page').click();\n  await expect.soft(page.locator('#title')).toHaveText('Make another order');\n  ```\n\n  Read more in [our documentation](test-assertions#soft-assertions)\n\n- You can now specify a **custom expect message** as a second argument to the `expect` and `expect.soft` functions, for example:\n\n  ``` javascript\n  await expect(page.locator('text=Name'), 'should be logged in').toBeVisible();\n  ```\n\n  The error would look like this:\n\n  ``` javascript\n      Error: should be logged in\n\n      Call log:\n        - expect.toBeVisible with timeout 5000ms\n        - waiting for \"getByText('Name')\"\n\n\n        2 |\n        3 | test('example test', async({ page }) => {\n      > 4 |   await expect(page.locator('text=Name'), 'should be logged in').toBeVisible();\n          |                                                                  ^\n        5 | });\n        6 |\n  ```\n\n  Read more in [our documentation](test-assertions#custom-expect-message)\n\n- By default, tests in a single file are run in order. If you have many independent tests in a single file, you can now run them in parallel with [test.describe.configure()](api/class-test#test-describe-configure).\n\n### Other Updates[​](#other-updates \"Direct link to Other Updates\")\n\n- Locator now supports a `has` option that makes sure it contains another locator inside:\n\n  ``` javascript\n  await page.locator('article', {\n    has: page.locator('.highlight'),\n  }).click();\n  ```\n\n  Read more in [locator documentation](api/class-locator#locator-locator)\n\n- New [locator.page()](api/class-locator#locator-page)\n\n- [page.screenshot()](api/class-page#page-screenshot) and [locator.screenshot()](api/class-locator#locator-screenshot) now automatically hide blinking caret\n\n- Playwright Codegen now generates locators and frame locators\n\n- New option `url` in [testConfig.webServer](api/class-testconfig#test-config-web-server) to ensure your web server is ready before running the tests\n\n- New [testInfo.errors](api/class-testinfo#test-info-errors) and [testResult.errors](api/class-testresult#test-result-errors) that contain all failed assertions and soft assertions.\n\n### Potentially breaking change in Playwright Test Global Setup[​](#potentially-breaking-change-in-playwright-test-global-setup \"Direct link to Potentially breaking change in Playwright Test Global Setup\")\n\nIt is unlikely that this change will affect you, no action is required if your tests keep running as they did.\n\nWe've noticed that in rare cases, the set of tests to be executed was configured in the global setup by means of the environment variables. We also noticed some applications that were post processing the reporters' output in the global teardown. If you are doing one of the two, [learn more](https://github.com/microsoft/playwright/issues/12018)\n\n### Browser Versions[​](#browser-versions-24 \"Direct link to Browser Versions\")\n\n- Chromium 100.0.4863.0\n- Mozilla Firefox 96.0.1\n- WebKit 15.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 98\n- Microsoft Edge 98\n\n## Version 1.18[​](#version-118 \"Direct link to Version 1.18\")\n\n### Locator Improvements[​](#locator-improvements \"Direct link to Locator Improvements\")\n\n- [locator.dragTo()](api/class-locator#locator-drag-to)\n\n- [`expect(locator).toBeChecked({ checked })`](api/class-locatorassertions#locator-assertions-to-be-checked)\n\n- Each locator can now be optionally filtered by the text it contains:\n\n  ``` javascript\n  await page.locator('li', { hasText: 'my item' }).locator('button').click();\n  ```\n\n  Read more in [locator documentation](api/class-locator#locator-locator)\n\n### Testing API improvements[​](#testing-api-improvements \"Direct link to Testing API improvements\")\n\n- [`expect(response).toBeOK()`](test-assertions)\n- [`testInfo.attach()`](api/class-testinfo#test-info-attach)\n- [`test.info()`](api/class-test#test-info)\n\n### Improved TypeScript Support[​](#improved-typescript-support \"Direct link to Improved TypeScript Support\")\n\n1.  Playwright Test now respects `tsconfig.json`'s [`baseUrl`](https://www.typescriptlang.org/tsconfig#baseUrl) and [`paths`](https://www.typescriptlang.org/tsconfig#paths), so you can use aliases\n2.  There is a new environment variable `PW_EXPERIMENTAL_TS_ESM` that allows importing ESM modules in your TS code, without the need for the compile step. Don't forget the `.js` suffix when you are importing your esm modules. Run your tests as follows:\n\n``` javascript\nnpm i --save-dev @playwright/test@1.18.0-rc1\nPW_EXPERIMENTAL_TS_ESM=1 npx playwright test\n```\n\n### Create Playwright[​](#create-playwright \"Direct link to Create Playwright\")\n\nThe `npm init playwright` command is now generally available for your use:\n\n``` javascript\n# Run from your project's root directory\nnpm init playwright@latest\n# Or create a new project\nnpm init playwright@latest new-project\n```\n\nThis will create a Playwright Test configuration file, optionally add examples, a GitHub Action workflow and a first test `example.spec.ts`.\n\n### New APIs & changes[​](#new-apis--changes \"Direct link to New APIs & changes\")\n\n- new [`testCase.repeatEachIndex`](api/class-testcase#test-case-repeat-each-index) API\n- [`acceptDownloads`](api/class-browser#browser-new-context-option-accept-downloads) option now defaults to `true`\n\n### Breaking change: custom config options[​](#breaking-change-custom-config-options \"Direct link to Breaking change: custom config options\")\n\nCustom config options are a convenient way to parametrize projects with different values. Learn more in [this guide](test-parameterize#parameterized-projects).\n\nPreviously, any fixture introduced through [test.extend()](api/class-test#test-extend) could be overridden in the [testProject.use](api/class-testproject#test-project-use) config section. For example,\n\n``` javascript\n// WRONG: THIS SNIPPET DOES NOT WORK SINCE v1.18.\n\n// fixtures.js\nconst test = base.extend({\n  myParameter: 'default',\n});\n\n// playwright.config.js\nmodule.exports = {\n  use: {\n    myParameter: 'value',\n  },\n};\n```\n\nThe proper way to make a fixture parametrized in the config file is to specify `option: true` when defining the fixture. For example,\n\n``` javascript\n// CORRECT: THIS SNIPPET WORKS SINCE v1.18.\n\n// fixtures.js\nconst test = base.extend({\n  // Fixtures marked as \"option: true\" will get a value specified in the config,\n  // or fallback to the default value.\n  myParameter: ['default', { option: true }],\n});\n\n// playwright.config.js\nmodule.exports = {\n  use: {\n    myParameter: 'value',\n  },\n};\n```\n\n### Browser Versions[​](#browser-versions-25 \"Direct link to Browser Versions\")\n\n- Chromium 99.0.4812.0\n- Mozilla Firefox 95.0\n- WebKit 15.4\n\nThis version was also tested against the following stable channels:\n\n- Google Chrome 97\n- Microsoft Edge 97\n\n## Version 1.17[​](#version-117 \"Direct link to Version 1.17\")\n\n### Frame Locators[​](#frame-locators \"Direct link to Frame Locators\")\n\nPlaywright 1.17 introduces [frame locators](api/class-framelocator) - a locator to the iframe on the page. Frame locators capture the logic sufficient to retrieve the `iframe` and then locate elements in that iframe. Frame locators are strict by default, will wait for `iframe` to appear and can be used in Web-First assertions.\n\nFrame locators can be created with either [page.frameLocator()](api/class-page#page-frame-locator) or [locator.frameLocator()](api/class-locator#locator-frame-locator) method.\n\n``` javascript\nconst locator = page.frameLocator('#my-iframe').locator('text=Submit');\nawait locator.click();\n```\n\nRead more at [our documentation](api/class-framelocator).\n\n### Trace Viewer Update[​](#trace-viewer-update \"Direct link to Trace Viewer Update\")\n\nPlaywright Trace Viewer is now **available online** at [https://trace.playwright.dev](https://trace.playwright.dev)! Just drag-and-drop your `trace.zip` file to inspect its contents.\n\n> **NOTE**: trace files are not uploaded anywhere; [trace.playwright.dev](https://trace.playwright.dev) is a [progressive web application](https://web.dev/progressive-web-apps/) that processes traces locally.\n\n- Playwright Test traces now include sources by default (these could be turned off with tracing option)\n- Trace Viewer now shows test name\n- New trace metadata tab with browser details\n- Snapshots now have URL bar\n\n### HTML Report Update[​](#html-report-update \"Direct link to HTML Report Update\")\n\n- HTML report now supports dynamic filtering\n- Report is now a **single static HTML file** that could be sent by e-mail or as a slack attachment.\n\n### Ubuntu ARM64 support + more[​](#ubuntu-arm64-support--more \"Direct link to Ubuntu ARM64 support + more\")\n\n- Playwright now supports **Ubuntu 20.04 ARM64**. You can now run Playwright tests inside Docker on Apple M1 and on Raspberry Pi.\n\n- You can now use Playwright to install stable version of Edge on Linux:\n\n  ``` javascript\n  npx playwright install msedge\n  ```\n\n### New APIs[​](#new-apis-12 \"Direct link to New APIs\")\n\n- Tracing now supports a [`'title'`](api/class-tracing#tracing-start-option-title) option\n- Page navigations support a new [`'commit'`](api/class-page#page-goto) waiting option\n- HTML reporter got [new configuration options](test-reporters#html-reporter)\n- [`testConfig.snapshotDir` option](api/class-testconfig#test-config-snapshot-dir)\n- [`testInfo.parallelIndex`](api/class-testinfo#test-info-parallel-index)\n- [`testInfo.titlePath`](api/class-testinfo#test-info-title-path)\n- [`testOptions.trace`](api/class-testoptions#test-options-trace) has new options\n- [`expect.toMatchSnapshot`](api/class-genericassertions) supports subdirectories\n- [`reporter.printsToStdio()`](api/class-reporter#reporter-prints-to-stdio)\n\n## Version 1.16[​](#version-116 \"Direct link to Version 1.16\")\n\n### 🎭 Playwright Test[​](#-playwright-test \"Direct link to 🎭 Playwright Test\")\n\n#### API Testing[​](#api-testing \"Direct link to API Testing\")\n\nPlaywright 1.16 introduces new [API Testing](api/class-apirequestcontext) that lets you send requests to the server directly from Node.js! Now you can:\n\n- test your server API\n- prepare server side state before visiting the web application in a test\n- validate server side post-conditions after running some actions in the browser\n\nTo do a request on behalf of Playwright's Page, use **new [page.request](api/class-page#page-request) API**:\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('context fetch', async ({ page }) => {\n  // Do a GET request on behalf of page\n  const response = await page.request.get('http://example.com/foo.json');\n  // ...\n});\n```\n\nTo do a stand-alone request from node.js to an API endpoint, use **new [`request` fixture](api/class-fixtures#fixtures-request)**:\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('context fetch', async ({ request }) => {\n  // Do a GET request on behalf of page\n  const response = await request.get('http://example.com/foo.json');\n  // ...\n});\n```\n\nRead more about it in our [API testing guide](api-testing).\n\n#### Response Interception[​](#response-interception \"Direct link to Response Interception\")\n\nIt is now possible to do response interception by combining [API Testing](api-testing) with [request interception](network#modify-requests).\n\nFor example, we can blur all the images on the page:\n\n``` javascript\nimport { test, expect } from '@playwright/test';\nimport jimp from 'jimp'; // image processing library\n\ntest('response interception', async ({ page }) => {\n  await page.route('**/*.jpeg', async route => {\n    const response = await page._request.fetch(route.request());\n    const image = await jimp.read(await response.body());\n    await image.blur(5);\n    await route.fulfill({\n      response,\n      body: await image.getBufferAsync('image/jpeg'),\n    });\n  });\n  const response = await page.goto('https://playwright.dev');\n  expect(response.status()).toBe(200);\n});\n```\n\nRead more about [response interception](network#modify-responses).\n\n#### New HTML reporter[​](#new-html-reporter \"Direct link to New HTML reporter\")\n\nTry it out new HTML reporter with either `--reporter=html` or a `reporter` entry in `playwright.config.ts` file:\n\n``` javascript\n$ npx playwright test --reporter=html\n```\n\nThe HTML reporter has all the information about tests and their failures, including surfacing trace and image artifacts.\n\nRead more about [our reporters](test-reporters#html-reporter).\n\n### 🎭 Playwright Library[​](#-playwright-library \"Direct link to 🎭 Playwright Library\")\n\n#### locator.waitFor[​](#locatorwaitfor \"Direct link to locator.waitFor\")\n\nWait for a locator to resolve to a single element with a given state. Defaults to the `state: 'visible'`.\n\nComes especially handy when working with lists:\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('context fetch', async ({ page }) => {\n  const completeness = page.locator('text=Success');\n  await completeness.waitFor();\n  expect(await page.screenshot()).toMatchSnapshot('screen.png');\n});\n```\n\nRead more about [locator.waitFor()](api/class-locator#locator-wait-for).\n\n### Docker support for Arm64[​](#docker-support-for-arm64 \"Direct link to Docker support for Arm64\")\n\nPlaywright Docker image is now published for Arm64 so it can be used on Apple Silicon.\n\nRead more about [Docker integration](docker).\n\n### 🎭 Playwright Trace Viewer[​](#-playwright-trace-viewer \"Direct link to 🎭 Playwright Trace Viewer\")\n\n- web-first assertions inside trace viewer\n- run trace viewer with `npx playwright show-trace` and drop trace files to the trace viewer PWA\n- API testing is integrated with trace viewer\n- better visual attribution of action targets\n\nRead more about [Trace Viewer](trace-viewer).\n\n### Browser Versions[​](#browser-versions-26 \"Direct link to Browser Versions\")\n\n- Chromium 97.0.4666.0\n- Mozilla Firefox 93.0\n- WebKit 15.4\n\nThis version of Playwright was also tested against the following stable channels:\n\n- Google Chrome 94\n- Microsoft Edge 94\n\n## Version 1.15[​](#version-115 \"Direct link to Version 1.15\")\n\n### 🎭 Playwright Library[​](#-playwright-library-1 \"Direct link to 🎭 Playwright Library\")\n\n#### 🖱️ Mouse Wheel[​](#%EF%B8%8F-mouse-wheel \"Direct link to 🖱️ Mouse Wheel\")\n\nBy using [mouse.wheel()](api/class-mouse#mouse-wheel) you are now able to scroll vertically or horizontally.\n\n#### 📜 New Headers API[​](#-new-headers-api \"Direct link to 📜 New Headers API\")\n\nPreviously it was not possible to get multiple header values of a response. This is now possible and additional helper functions are available:\n\n- [request.allHeaders()](api/class-request#request-all-headers)\n- [request.headersArray()](api/class-request#request-headers-array)\n- [request.headerValue()](api/class-request#request-header-value)\n- [response.allHeaders()](api/class-response#response-all-headers)\n- [response.headersArray()](api/class-response#response-headers-array)\n- [response.headerValue()](api/class-response#response-header-value)\n- [response.headerValues()](api/class-response#response-header-values)\n\n#### 🌈 Forced-Colors emulation[​](#-forced-colors-emulation \"Direct link to 🌈 Forced-Colors emulation\")\n\nIts now possible to emulate the `forced-colors` CSS media feature by passing it in the [browser.newContext()](api/class-browser#browser-new-context) or calling [page.emulateMedia()](api/class-page#page-emulate-media).\n\n#### New APIs[​](#new-apis-13 \"Direct link to New APIs\")\n\n- [page.route()](api/class-page#page-route) accepts new `times` option to specify how many times this route should be matched.\n- [page.setChecked()](api/class-page#page-set-checked) and [locator.setChecked()](api/class-locator#locator-set-checked) were introduced to set the checked state of a checkbox.\n- [request.sizes()](api/class-request#request-sizes) Returns resource size information for given http request.\n- [tracing.startChunk()](api/class-tracing#tracing-start-chunk) - Start a new trace chunk.\n- [tracing.stopChunk()](api/class-tracing#tracing-stop-chunk) - Stops a new trace chunk.\n\n### 🎭 Playwright Test[​](#-playwright-test-1 \"Direct link to 🎭 Playwright Test\")\n\n#### 🤝 `test.parallel()` run tests in the same file in parallel[​](#-testparallel-run-tests-in-the-same-file-in-parallel \"Direct link to -testparallel-run-tests-in-the-same-file-in-parallel\")\n\n``` javascript\ntest.describe.parallel('group', () => {\n  test('runs in parallel 1', async ({ page }) => {\n  });\n  test('runs in parallel 2', async ({ page }) => {\n  });\n});\n```\n\nBy default, tests in a single file are run in order. If you have many independent tests in a single file, you can now run them in parallel with [test.describe.parallel(title, callback)](api/class-test#test-describe-parallel).\n\n#### 🛠 Add `--debug` CLI flag[​](#-add---debug-cli-flag \"Direct link to -add---debug-cli-flag\")\n\nBy using `npx playwright test --debug` it will enable the [Playwright Inspector](debug#playwright-inspector) for you to debug your tests.\n\n### Browser Versions[​](#browser-versions-27 \"Direct link to Browser Versions\")\n\n- Chromium 96.0.4641.0\n- Mozilla Firefox 92.0\n- WebKit 15.0\n\n## Version 1.14[​](#version-114 \"Direct link to Version 1.14\")\n\n### 🎭 Playwright Library[​](#-playwright-library-2 \"Direct link to 🎭 Playwright Library\")\n\n#### ⚡️ New \"strict\" mode[​](#%EF%B8%8F-new-strict-mode \"Direct link to ⚡️ New \"strict\" mode\")\n\nSelector ambiguity is a common problem in automation testing. **\"strict\" mode** ensures that your selector points to a single element and throws otherwise.\n\nPass `strict: true` into your action calls to opt in.\n\n``` javascript\n// This will throw if you have more than one button!\nawait page.click('button', { strict: true });\n```\n\n#### 📍 New [**Locators API**](api/class-locator)[​](#-new-locators-api \"Direct link to -new-locators-api\")\n\nLocator represents a view to the element(s) on the page. It captures the logic sufficient to retrieve the element at any given moment.\n\nThe difference between the [Locator](api/class-locator) and [ElementHandle](api/class-elementhandle) is that the latter points to a particular element, while [Locator](api/class-locator) captures the logic of how to retrieve that element.\n\nAlso, locators are **\"strict\" by default**!\n\n``` javascript\nconst locator = page.locator('button');\nawait locator.click();\n```\n\nLearn more in the [documentation](api/class-locator).\n\n#### 🧩 Experimental [**React**](other-locators#react-locator) and [**Vue**](other-locators#vue-locator) selector engines[​](#-experimental-react-and-vue-selector-engines \"Direct link to -experimental-react-and-vue-selector-engines\")\n\nReact and Vue selectors allow selecting elements by its component name and/or property values. The syntax is very similar to [attribute selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors) and supports all attribute selector operators.\n\n``` javascript\nawait page.locator('_react=SubmitButton[enabled=true]').click();\nawait page.locator('_vue=submit-button[enabled=true]').click();\n```\n\nLearn more in the [react selectors documentation](other-locators#react-locator) and the [vue selectors documentation](other-locators#vue-locator).\n\n#### ✨ New [**`nth`**](other-locators#n-th-element-locator) and [**`visible`**](other-locators#css-matching-only-visible-elements) selector engines[​](#-new-nth-and-visible-selector-engines \"Direct link to -new-nth-and-visible-selector-engines\")\n\n- [`nth`](other-locators#n-th-element-locator) selector engine is equivalent to the `:nth-match` pseudo class, but could be combined with other selector engines.\n- [`visible`](other-locators#css-matching-only-visible-elements) selector engine is equivalent to the `:visible` pseudo class, but could be combined with other selector engines.\n\n``` javascript\n// select the first button among all buttons\nawait button.click('button >> nth=0');\n// or if you are using locators, you can use first(), nth() and last()\nawait page.locator('button').first().click();\n\n// click a visible button\nawait button.click('button >> visible=true');\n```\n\n### 🎭 Playwright Test[​](#-playwright-test-2 \"Direct link to 🎭 Playwright Test\")\n\n#### ✅ Web-First Assertions[​](#-web-first-assertions \"Direct link to ✅ Web-First Assertions\")\n\n`expect` now supports lots of new web-first assertions.\n\nConsider the following example:\n\n``` javascript\nawait expect(page.locator('.status')).toHaveText('Submitted');\n```\n\nPlaywright Test will be re-testing the node with the selector `.status` until fetched Node has the `\"Submitted\"` text. It will be re-fetching the node and checking it over and over, until the condition is met or until the timeout is reached. You can either pass this timeout or configure it once via the [`testProject.expect`](api/class-testproject#test-project-expect) value in test config.\n\nBy default, the timeout for assertions is not set, so it'll wait forever, until the whole test times out.\n\nList of all new assertions:\n\n- [`expect(locator).toBeChecked()`](api/class-locatorassertions#locator-assertions-to-be-checked)\n- [`expect(locator).toBeDisabled()`](api/class-locatorassertions#locator-assertions-to-be-disabled)\n- [`expect(locator).toBeEditable()`](api/class-locatorassertions#locator-assertions-to-be-editable)\n- [`expect(locator).toBeEmpty()`](api/class-locatorassertions#locator-assertions-to-be-empty)\n- [`expect(locator).toBeEnabled()`](api/class-locatorassertions#locator-assertions-to-be-enabled)\n- [`expect(locator).toBeFocused()`](api/class-locatorassertions#locator-assertions-to-be-focused)\n- [`expect(locator).toBeHidden()`](api/class-locatorassertions#locator-assertions-to-be-hidden)\n- [`expect(locator).toBeVisible()`](api/class-locatorassertions#locator-assertions-to-be-visible)\n- [`expect(locator).toContainText(text, options?)`](api/class-locatorassertions#locator-assertions-to-contain-text)\n- [`expect(locator).toHaveAttribute(name, value)`](api/class-locatorassertions#locator-assertions-to-have-attribute)\n- [`expect(locator).toHaveClass(expected)`](api/class-locatorassertions#locator-assertions-to-have-class)\n- [`expect(locator).toHaveCount(count)`](api/class-locatorassertions#locator-assertions-to-have-count)\n- [`expect(locator).toHaveCSS(name, value)`](api/class-locatorassertions#locator-assertions-to-have-css)\n- [`expect(locator).toHaveId(id)`](api/class-locatorassertions#locator-assertions-to-have-id)\n- [`expect(locator).toHaveJSProperty(name, value)`](api/class-locatorassertions#locator-assertions-to-have-js-property)\n- [`expect(locator).toHaveText(expected, options)`](api/class-locatorassertions#locator-assertions-to-have-text)\n- [`expect(page).toHaveTitle(title)`](api/class-pageassertions#page-assertions-to-have-title)\n- [`expect(page).toHaveURL(url)`](api/class-pageassertions#page-assertions-to-have-url)\n- [`expect(locator).toHaveValue(value)`](api/class-locatorassertions#locator-assertions-to-have-value)\n\n#### ⛓ Serial mode with [`describe.serial`](api/class-test#test-describe-serial)[​](#-serial-mode-with-describeserial \"Direct link to -serial-mode-with-describeserial\")\n\nDeclares a group of tests that should always be run serially. If one of the tests fails, all subsequent tests are skipped. All tests in a group are retried together.\n\n``` javascript\ntest.describe.serial('group', () => {\n  test('runs first', async ({ page }) => { /* ... */ });\n  test('runs second', async ({ page }) => { /* ... */ });\n});\n```\n\nLearn more in the [documentation](api/class-test#test-describe-serial).\n\n#### 🐾 Steps API with [`test.step`](api/class-test#test-step)[​](#-steps-api-with-teststep \"Direct link to -steps-api-with-teststep\")\n\nSplit long tests into multiple steps using `test.step()` API:\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  await test.step('Log in', async () => {\n    // ...\n  });\n  await test.step('news feed', async () => {\n    // ...\n  });\n});\n```\n\nStep information is exposed in reporters API.\n\n#### 🌎 Launch web server before running tests[​](#-launch-web-server-before-running-tests \"Direct link to 🌎 Launch web server before running tests\")\n\nTo launch a server during the tests, use the [`webServer`](test-webserver) option in the configuration file. The server will wait for a given url to be available before running the tests, and the url will be passed over to Playwright as a [`baseURL`](api/class-testoptions#test-options-base-url) when creating a context.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  webServer: {\n    command: 'npm run start', // command to launch\n    url: 'http://127.0.0.1:3000', // url to await for\n    timeout: 120 * 1000,\n    reuseExistingServer: !process.env.CI,\n  },\n});\n```\n\nLearn more in the [documentation](test-webserver).\n\n### Browser Versions[​](#browser-versions-28 \"Direct link to Browser Versions\")\n\n- Chromium 94.0.4595.0\n- Mozilla Firefox 91.0\n- WebKit 15.0\n\n## Version 1.13[​](#version-113 \"Direct link to Version 1.13\")\n\n#### Playwright Test[​](#playwright-test \"Direct link to Playwright Test\")\n\n- **⚡️ Introducing [Reporter API](https://github.com/microsoft/playwright/blob/65a9037461ffc15d70cdc2055832a0c5512b227c/packages/playwright-test/types/testReporter.d.ts)** which is already used to create an [Allure Playwright reporter](https://github.com/allure-framework/allure-js/pull/297).\n- **⛺️ New [`baseURL` fixture](test-configuration#basic-configuration)** to support relative paths in tests.\n\n#### Playwright[​](#playwright \"Direct link to Playwright\")\n\n- **🖖 Programmatic drag-and-drop support** via the [page.dragAndDrop()](api/class-page#page-drag-and-drop) API.\n- **🔎 Enhanced HAR** with body sizes for requests and responses. Use via `recordHar` option in [browser.newContext()](api/class-browser#browser-new-context).\n\n#### Tools[​](#tools \"Direct link to Tools\")\n\n- Playwright Trace Viewer now shows parameters, returned values and `console.log()` calls.\n- Playwright Inspector can generate Playwright Test tests.\n\n#### New and Overhauled Guides[​](#new-and-overhauled-guides \"Direct link to New and Overhauled Guides\")\n\n- [Intro](index)\n- [Authentication](auth)\n- [Chrome Extensions](chrome-extensions)\n- [Playwright Test Annotations](test-annotations)\n- [Playwright Test Configuration](test-configuration)\n- [Playwright Test Fixtures](test-fixtures)\n\n#### Browser Versions[​](#browser-versions-29 \"Direct link to Browser Versions\")\n\n- Chromium 93.0.4576.0\n- Mozilla Firefox 90.0\n- WebKit 14.2\n\n#### New Playwright APIs[​](#new-playwright-apis \"Direct link to New Playwright APIs\")\n\n- new `baseURL` option in [browser.newContext()](api/class-browser#browser-new-context) and [browser.newPage()](api/class-browser#browser-new-page)\n- [response.securityDetails()](api/class-response#response-security-details) and [response.serverAddr()](api/class-response#response-server-addr)\n- [page.dragAndDrop()](api/class-page#page-drag-and-drop) and [frame.dragAndDrop()](api/class-frame#frame-drag-and-drop)\n- [download.cancel()](api/class-download#download-cancel)\n- [page.inputValue()](api/class-page#page-input-value), [frame.inputValue()](api/class-frame#frame-input-value) and [elementHandle.inputValue()](api/class-elementhandle#element-handle-input-value)\n- new `force` option in [page.fill()](api/class-page#page-fill), [frame.fill()](api/class-frame#frame-fill), and [elementHandle.fill()](api/class-elementhandle#element-handle-fill)\n- new `force` option in [page.selectOption()](api/class-page#page-select-option), [frame.selectOption()](api/class-frame#frame-select-option), and [elementHandle.selectOption()](api/class-elementhandle#element-handle-select-option)\n\n## Version 1.12[​](#version-112 \"Direct link to Version 1.12\")\n\n#### ⚡️ Introducing Playwright Test[​](#%EF%B8%8F-introducing-playwright-test \"Direct link to ⚡️ Introducing Playwright Test\")\n\n[Playwright Test](index) is a **new test runner** built from scratch by Playwright team specifically to accommodate end-to-end testing needs:\n\n- Run tests across all browsers.\n- Execute tests in parallel.\n- Enjoy context isolation and sensible defaults out of the box.\n- Capture videos, screenshots and other artifacts on failure.\n- Integrate your POMs as extensible fixtures.\n\nInstallation:\n\n``` javascript\nnpm i -D @playwright/test\n```\n\nSimple test `tests/foo.spec.ts`:\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n  const name = await page.innerText('.navbar__title');\n  expect(name).toBe('Playwright');\n});\n```\n\nRunning:\n\n``` javascript\nnpx playwright test\n```\n\n👉 Read more in [Playwright Test documentation](index).\n\n#### 🧟‍♂️ Introducing Playwright Trace Viewer[​](#%EF%B8%8F-introducing-playwright-trace-viewer \"Direct link to 🧟‍♂️ Introducing Playwright Trace Viewer\")\n\n[Playwright Trace Viewer](trace-viewer) is a new GUI tool that helps exploring recorded Playwright traces after the script ran. Playwright traces let you examine:\n\n- page DOM before and after each Playwright action\n- page rendering before and after each Playwright action\n- browser network during script execution\n\nTraces are recorded using the new [browserContext.tracing](api/class-browsercontext#browser-context-tracing) API:\n\n``` javascript\nconst browser = await chromium.launch();\nconst context = await browser.newContext();\n\n// Start tracing before creating / navigating a page.\nawait context.tracing.start({ screenshots: true, snapshots: true });\n\nconst page = await context.newPage();\nawait page.goto('https://playwright.dev');\n\n// Stop tracing and export it into a zip archive.\nawait context.tracing.stop({ path: 'trace.zip' });\n```\n\nTraces are examined later with the Playwright CLI:\n\n``` javascript\nnpx playwright show-trace trace.zip\n```\n\nThat will open the following GUI:\n\n👉 Read more in [trace viewer documentation](trace-viewer).\n\n#### Browser Versions[​](#browser-versions-30 \"Direct link to Browser Versions\")\n\n- Chromium 93.0.4530.0\n- Mozilla Firefox 89.0\n- WebKit 14.2\n\nThis version of Playwright was also tested against the following stable channels:\n\n- Google Chrome 91\n- Microsoft Edge 91\n\n#### New APIs[​](#new-apis-14 \"Direct link to New APIs\")\n\n- `reducedMotion` option in [page.emulateMedia()](api/class-page#page-emulate-media), [browserType.launchPersistentContext()](api/class-browsertype#browser-type-launch-persistent-context), [browser.newContext()](api/class-browser#browser-new-context) and [browser.newPage()](api/class-browser#browser-new-page)\n- [browserContext.on('request')](api/class-browsercontext#browser-context-event-request)\n- [browserContext.on('requestfailed')](api/class-browsercontext#browser-context-event-request-failed)\n- [browserContext.on('requestfinished')](api/class-browsercontext#browser-context-event-request-finished)\n- [browserContext.on('response')](api/class-browsercontext#browser-context-event-response)\n- `tracesDir` option in [browserType.launch()](api/class-browsertype#browser-type-launch) and [browserType.launchPersistentContext()](api/class-browsertype#browser-type-launch-persistent-context)\n- new [browserContext.tracing](api/class-browsercontext#browser-context-tracing) API namespace\n- new [download.page()](api/class-download#download-page) method\n\n## Version 1.11[​](#version-111 \"Direct link to Version 1.11\")\n\n🎥 New video: [Playwright: A New Test Automation Framework for the Modern Web](https://youtu.be/_Jla6DyuEu4) ([slides](https://docs.google.com/presentation/d/1xFhZIJrdHkVe2CuMKOrni92HoG2SWslo0DhJJQMR1DI/edit?usp=sharing))\n\n- We talked about Playwright\n- Showed engineering work behind the scenes\n- Did live demos with new features ✨\n- **Special thanks** to [applitools](http://applitools.com/) for hosting the event and inviting us!\n\n#### Browser Versions[​](#browser-versions-31 \"Direct link to Browser Versions\")\n\n- Chromium 92.0.4498.0\n- Mozilla Firefox 89.0b6\n- WebKit 14.2\n\n#### New APIs[​](#new-apis-15 \"Direct link to New APIs\")\n\n- support for **async predicates** across the API in methods such as [page.waitForRequest()](api/class-page#page-wait-for-request) and others\n- new **emulation devices**: Galaxy S8, Galaxy S9+, Galaxy Tab S4, Pixel 3, Pixel 4\n- new methods:\n  - [page.waitForURL()](api/class-page#page-wait-for-url) to await navigations to URL\n  - [video.delete()](api/class-video#video-delete) and [video.saveAs()](api/class-video#video-save-as) to manage screen recording\n- new options:\n  - `screen` option in the [browser.newContext()](api/class-browser#browser-new-context) method to emulate `window.screen` dimensions\n  - `position` option in [page.check()](api/class-page#page-check) and [page.uncheck()](api/class-page#page-uncheck) methods\n  - `trial` option to dry-run actions in [page.check()](api/class-page#page-check), [page.uncheck()](api/class-page#page-uncheck), [page.click()](api/class-page#page-click), [page.dblclick()](api/class-page#page-dblclick), [page.hover()](api/class-page#page-hover) and [page.tap()](api/class-page#page-tap)\n\n## Version 1.10[​](#version-110 \"Direct link to Version 1.10\")\n\n- [Playwright for Java v1.10](https://github.com/microsoft/playwright-java) is **now stable**!\n- Run Playwright against **Google Chrome** and **Microsoft Edge** stable channels with the [new channels API](browsers).\n- Chromium screenshots are **fast** on Mac & Windows.\n\n#### Bundled Browser Versions[​](#bundled-browser-versions \"Direct link to Bundled Browser Versions\")\n\n- Chromium 90.0.4430.0\n- Mozilla Firefox 87.0b10\n- WebKit 14.2\n\nThis version of Playwright was also tested against the following stable channels:\n\n- Google Chrome 89\n- Microsoft Edge 89\n\n#### New APIs[​](#new-apis-16 \"Direct link to New APIs\")\n\n- [browserType.launch()](api/class-browsertype#browser-type-launch) now accepts the new `'channel'` option. Read more in [our documentation](browsers).\n\n## Version 1.9[​](#version-19 \"Direct link to Version 1.9\")\n\n- [Playwright Inspector](debug) is a **new GUI tool** to author and debug your tests.\n  - **Line-by-line debugging** of your Playwright scripts, with play, pause and step-through.\n  - Author new scripts by **recording user actions**.\n  - **Generate element selectors** for your script by hovering over elements.\n  - Set the `PWDEBUG=1` environment variable to launch the Inspector\n- **Pause script execution** with [page.pause()](api/class-page#page-pause) in headed mode. Pausing the page launches [Playwright Inspector](debug) for debugging.\n- **New has-text pseudo-class** for CSS selectors. `:has-text(\"example\")` matches any element containing `\"example\"` somewhere inside, possibly in a child or a descendant element. See [more examples](other-locators#css-matching-by-text).\n- **Page dialogs are now auto-dismissed** during execution, unless a listener for `dialog` event is configured. [Learn more](dialogs) about this.\n- [Playwright for Python](https://github.com/microsoft/playwright-python) is **now stable** with an idiomatic snake case API and pre-built [Docker image](docker) to run tests in CI/CD.\n\n#### Browser Versions[​](#browser-versions-32 \"Direct link to Browser Versions\")\n\n- Chromium 90.0.4421.0\n- Mozilla Firefox 86.0b10\n- WebKit 14.1\n\n#### New APIs[​](#new-apis-17 \"Direct link to New APIs\")\n\n- [page.pause()](api/class-page#page-pause).\n\n## Version 1.8[​](#version-18 \"Direct link to Version 1.8\")\n\n- [Selecting elements based on layout](other-locators#css-matching-elements-based-on-layout) with `:left-of()`, `:right-of()`, `:above()` and `:below()`.\n\n- Playwright now includes [command line interface](test-cli), former playwright-cli.\n\n  ``` javascript\n  npx playwright --help\n  ```\n\n- [page.selectOption()](api/class-page#page-select-option) now waits for the options to be present.\n\n- New methods to [assert element state](actionability#assertions) like [page.isEditable()](api/class-page#page-is-editable).\n\n#### New APIs[​](#new-apis-18 \"Direct link to New APIs\")\n\n- [elementHandle.isChecked()](api/class-elementhandle#element-handle-is-checked).\n- [elementHandle.isDisabled()](api/class-elementhandle#element-handle-is-disabled).\n- [elementHandle.isEditable()](api/class-elementhandle#element-handle-is-editable).\n- [elementHandle.isEnabled()](api/class-elementhandle#element-handle-is-enabled).\n- [elementHandle.isHidden()](api/class-elementhandle#element-handle-is-hidden).\n- [elementHandle.isVisible()](api/class-elementhandle#element-handle-is-visible).\n- [page.isChecked()](api/class-page#page-is-checked).\n- [page.isDisabled()](api/class-page#page-is-disabled).\n- [page.isEditable()](api/class-page#page-is-editable).\n- [page.isEnabled()](api/class-page#page-is-enabled).\n- [page.isHidden()](api/class-page#page-is-hidden).\n- [page.isVisible()](api/class-page#page-is-visible).\n- New option `'editable'` in [elementHandle.waitForElementState()](api/class-elementhandle#element-handle-wait-for-element-state).\n\n#### Browser Versions[​](#browser-versions-33 \"Direct link to Browser Versions\")\n\n- Chromium 90.0.4392.0\n- Mozilla Firefox 85.0b5\n- WebKit 14.1\n\n## Version 1.7[​](#version-17 \"Direct link to Version 1.7\")\n\n- **New Java SDK**: [Playwright for Java](https://github.com/microsoft/playwright-java) is now on par with [JavaScript](https://github.com/microsoft/playwright), [Python](https://github.com/microsoft/playwright-python) and [.NET bindings](https://github.com/microsoft/playwright-dotnet).\n- **Browser storage API**: New convenience APIs to save and load browser storage state (cookies, local storage) to simplify automation scenarios with authentication.\n- **New CSS selectors**: We heard your feedback for more flexible selectors and have revamped the selectors implementation. Playwright 1.7 introduces [new CSS extensions](other-locators#css-locator) and there's more coming soon.\n- **New website**: The docs website at [playwright.dev](https://playwright.dev/) has been updated and is now built with [Docusaurus](https://v2.docusaurus.io/).\n- **Support for Apple Silicon**: Playwright browser binaries for WebKit and Chromium are now built for Apple Silicon.\n\n#### New APIs[​](#new-apis-19 \"Direct link to New APIs\")\n\n- [browserContext.storageState()](api/class-browsercontext#browser-context-storage-state) to get current state for later reuse.\n- `storageState` option in [browser.newContext()](api/class-browser#browser-new-context) and [browser.newPage()](api/class-browser#browser-new-page) to setup browser context state.\n\n#### Browser Versions[​](#browser-versions-34 \"Direct link to Browser Versions\")\n\n- Chromium 89.0.4344.0\n- Mozilla Firefox 84.0b9\n- WebKit 14.1\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/release-notes](https://playwright.dev/docs/release-notes)"
- name: Reporter
  id: api/class-reporter
  summary: Test runner notifies the reporter about various events during test execution
  description: "# Reporter\n\nTest runner notifies the reporter about various events during test execution. All methods of the reporter are optional.\n\nYou can create a custom reporter by implementing a class with some of the reporter methods. Make sure to export this class as default.\n\n- TypeScript\n- JavaScript\n\n``` javascript\nimport type {\n  Reporter, FullConfig, Suite, TestCase, TestResult, FullResult\n} from '@playwright/test/reporter';\n\nclass MyReporter implements Reporter {\n  constructor(options: { customOption?: string } = {}) {\n    console.log(`my-awesome-reporter setup with customOption set to ${options.customOption}`);\n  }\n\n  onBegin(config: FullConfig, suite: Suite) {\n    console.log(`Starting the run with ${suite.allTests().length} tests`);\n  }\n\n  onTestBegin(test: TestCase) {\n    console.log(`Starting test ${test.title}`);\n  }\n\n  onTestEnd(test: TestCase, result: TestResult) {\n    console.log(`Finished test ${test.title}: ${result.status}`);\n  }\n\n  onEnd(result: FullResult) {\n    console.log(`Finished the run: ${result.status}`);\n  }\n}\nexport default MyReporter;\n```\n\n``` javascript\n// @ts-check\n\n/** @implements {import('@playwright/test/reporter').Reporter} */\nclass MyReporter {\n  constructor(options) {\n    console.log(`my-awesome-reporter setup with customOption set to ${options.customOption}`);\n  }\n\n  onBegin(config, suite) {\n    console.log(`Starting the run with ${suite.allTests().length} tests`);\n  }\n\n  onTestBegin(test) {\n    console.log(`Starting test ${test.title}`);\n  }\n\n  onTestEnd(test, result) {\n    console.log(`Finished test ${test.title}: ${result.status}`);\n  }\n\n  onEnd(result) {\n    console.log(`Finished the run: ${result.status}`);\n  }\n}\n\nmodule.exports = MyReporter;\n```\n\nNow use this reporter with [testConfig.reporter](class-testconfig#test-config-reporter). Learn more about [using reporters](../test-reporters).\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['./my-awesome-reporter.ts', { customOption: 'some value' }]],\n});\n```\n\nHere is a typical order of reporter calls:\n\n- [reporter.onBegin()](class-reporter#reporter-on-begin) is called once with a root suite that contains all other suites and tests. Learn more about [suites hierarchy](class-suite \"Suite\").\n- [reporter.onTestBegin()](class-reporter#reporter-on-test-begin) is called for each test run. It is given a [TestCase](class-testcase \"TestCase\") that is executed, and a [TestResult](class-testresult \"TestResult\") that is almost empty. Test result will be populated while the test runs (for example, with steps and stdio) and will get final `status` once the test finishes.\n- [reporter.onStepBegin()](class-reporter#reporter-on-step-begin) and [reporter.onStepEnd()](class-reporter#reporter-on-step-end) are called for each executed step inside the test. When steps are executed, test run has not finished yet.\n- [reporter.onTestEnd()](class-reporter#reporter-on-test-end) is called when test run has finished. By this time, [TestResult](class-testresult \"TestResult\") is complete and you can use [testResult.status](class-testresult#test-result-status), [testResult.error](class-testresult#test-result-error) and more.\n- [reporter.onEnd()](class-reporter#reporter-on-end) is called once after all tests that should run had finished.\n- [reporter.onExit()](class-reporter#reporter-on-exit) is called immediately before the test runner exits.\n\nAdditionally, [reporter.onStdOut()](class-reporter#reporter-on-std-out) and [reporter.onStdErr()](class-reporter#reporter-on-std-err) are called when standard output is produced in the worker process, possibly during a test execution, and [reporter.onError()](class-reporter#reporter-on-error) is called when something went wrong outside of the test execution.\n\nIf your custom reporter does not print anything to the terminal, implement [reporter.printsToStdio()](class-reporter#reporter-prints-to-stdio) and return `false`. This way, Playwright will use one of the standard terminal reporters in addition to your custom reporter to enhance user experience.\n\n**Merged report API notes**\n\nWhen merging multiple [`blob`](../test-reporters#blob-reporter) reports via [`merge-reports`](../test-sharding#merge-reports-cli) CLI command, the same [Reporter](class-reporter \"Reporter\") API is called to produce final reports and all existing reporters should work without any changes. There some subtle differences though which might affect some custom reporters.\n\n- Projects from different shards are always kept as separate [TestProject](class-testproject \"TestProject\") objects. E.g. if project 'Desktop Chrome' was sharded across 5 machines then there will be 5 instances of projects with the same name in the config passed to [reporter.onBegin()](class-reporter#reporter-on-begin).\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### onBegin[​](#reporter-on-begin \"Direct link to onBegin\")\n\nCalled once before running tests. All tests have been already discovered and put into a hierarchy of [Suite](class-suite \"Suite\")s.\n\n**Usage**\n\n``` javascript\nreporter.onBegin(config, suite);\n```\n\n**Arguments**\n\n- `config` [FullConfig](class-fullconfig \"FullConfig\")\n\n  Resolved configuration.\n\n- `suite` [Suite](class-suite \"Suite\")\n\n  The root suite that contains all projects, files and test cases.\n\n### onEnd[​](#reporter-on-end \"Direct link to onEnd\")\n\nCalled after all tests have been run, or testing has been interrupted. Note that this method may return a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\") and Playwright Test will await it. Reporter is allowed to override the status and hence affect the exit code of the test runner.\n\n**Usage**\n\n``` javascript\nawait reporter.onEnd(result);\n```\n\n**Arguments**\n\n- `result` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `status` \"passed\" \\| \"failed\" \\| \"timedout\" \\| \"interrupted\"\n\n    Test run status.\n\n  - `startTime` \\[Date\\]\n\n    Test run start wall time.\n\n  - `duration` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Test run duration in milliseconds.\n\n  Result of the full test run, `status` can be one of:\n  - `'passed'` - Everything went as expected.\n  - `'failed'` - Any test has failed.\n  - `'timedout'` - The [testConfig.globalTimeout](class-testconfig#test-config-global-timeout) has been reached.\n  - `'interrupted'` - Interrupted by the user.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `status` \"passed\" \\| \"failed\" \\| \"timedout\" \\| \"interrupted\" *(optional)*\n\n### onError[​](#reporter-on-error \"Direct link to onError\")\n\nCalled on some global error, for example unhandled exception in the worker process.\n\n**Usage**\n\n``` javascript\nreporter.onError(error);\n```\n\n**Arguments**\n\n- `error` [TestError](class-testerror \"TestError\")\n\n  The error.\n\n### onExit[​](#reporter-on-exit \"Direct link to onExit\")\n\nCalled immediately before test runner exists. At this point all the reporters have received the [reporter.onEnd()](class-reporter#reporter-on-end) signal, so all the reports should be build. You can run the code that uploads the reports in this hook.\n\n**Usage**\n\n``` javascript\nawait reporter.onExit();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### onStdErr[​](#reporter-on-std-err \"Direct link to onStdErr\")\n\nCalled when something has been written to the standard error in the worker process.\n\n**Usage**\n\n``` javascript\nreporter.onStdErr(chunk, test, result);\n```\n\n**Arguments**\n\n- `chunk` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\n\n  Output chunk.\n\n- `test` [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\") \\| [TestCase](class-testcase \"TestCase\")\n\n  Test that was running. Note that output may happen when no test is running, in which case this will be [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\").\n\n- `result` [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\") \\| [TestResult](class-testresult \"TestResult\")\n\n  Result of the test run, this object gets populated while the test runs.\n\n### onStdOut[​](#reporter-on-std-out \"Direct link to onStdOut\")\n\nCalled when something has been written to the standard output in the worker process.\n\n**Usage**\n\n``` javascript\nreporter.onStdOut(chunk, test, result);\n```\n\n**Arguments**\n\n- `chunk` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\n\n  Output chunk.\n\n- `test` [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\") \\| [TestCase](class-testcase \"TestCase\")\n\n  Test that was running. Note that output may happen when no test is running, in which case this will be [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\").\n\n- `result` [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\") \\| [TestResult](class-testresult \"TestResult\")\n\n  Result of the test run, this object gets populated while the test runs.\n\n### onStepBegin[​](#reporter-on-step-begin \"Direct link to onStepBegin\")\n\nCalled when a test step started in the worker process.\n\n**Usage**\n\n``` javascript\nreporter.onStepBegin(test, result, step);\n```\n\n**Arguments**\n\n- `test` [TestCase](class-testcase \"TestCase\")\n\n  Test that the step belongs to.\n\n- `result` [TestResult](class-testresult \"TestResult\")\n\n  Result of the test run, this object gets populated while the test runs.\n\n- `step` [TestStep](class-teststep \"TestStep\")\n\n  Test step instance that has started.\n\n### onStepEnd[​](#reporter-on-step-end \"Direct link to onStepEnd\")\n\nCalled when a test step finished in the worker process.\n\n**Usage**\n\n``` javascript\nreporter.onStepEnd(test, result, step);\n```\n\n**Arguments**\n\n- `test` [TestCase](class-testcase \"TestCase\")\n\n  Test that the step belongs to.\n\n- `result` [TestResult](class-testresult \"TestResult\")\n\n  Result of the test run.\n\n- `step` [TestStep](class-teststep \"TestStep\")\n\n  Test step instance that has finished.\n\n### onTestBegin[​](#reporter-on-test-begin \"Direct link to onTestBegin\")\n\nCalled after a test has been started in the worker process.\n\n**Usage**\n\n``` javascript\nreporter.onTestBegin(test, result);\n```\n\n**Arguments**\n\n- `test` [TestCase](class-testcase \"TestCase\")\n\n  Test that has been started.\n\n- `result` [TestResult](class-testresult \"TestResult\")\n\n  Result of the test run, this object gets populated while the test runs.\n\n### onTestEnd[​](#reporter-on-test-end \"Direct link to onTestEnd\")\n\nCalled after a test has been finished in the worker process.\n\n**Usage**\n\n``` javascript\nreporter.onTestEnd(test, result);\n```\n\n**Arguments**\n\n- `test` [TestCase](class-testcase \"TestCase\")\n\n  Test that has been finished.\n\n- `result` [TestResult](class-testresult \"TestResult\")\n\n  Result of the test run.\n\n### printsToStdio[​](#reporter-prints-to-stdio \"Direct link to printsToStdio\")\n\nWhether this reporter uses stdio for reporting. When it does not, Playwright Test could add some output to enhance user experience. If your reporter does not print to the terminal, it is strongly recommended to return `false`.\n\n**Usage**\n\n``` javascript\nreporter.printsToStdio();\n```\n\n**Returns**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-reporter](https://playwright.dev/docs/api/class-reporter)"
- name: reporter.onBegin
  id: api/class-reporter#reporter-on-begin
  summary: Called once before running tests
  belongs_to: Reporter
  description: |-
    ### onBegin[​](#reporter-on-begin "Direct link to onBegin")

    Called once before running tests. All tests have been already discovered and put into a hierarchy of [Suite](class-suite "Suite")s.

    **Usage**

    ``` javascript
    reporter.onBegin(config, suite);
    ```

    **Arguments**

    - `config` [FullConfig](class-fullconfig "FullConfig")

      Resolved configuration.

    - `suite` [Suite](class-suite "Suite")

      The root suite that contains all projects, files and test cases.
- name: reporter.onEnd
  id: api/class-reporter#reporter-on-end
  summary: Called after all tests have been run, or testing has been interrupted
  belongs_to: Reporter
  description: |-
    ### onEnd[​](#reporter-on-end "Direct link to onEnd")

    Called after all tests have been run, or testing has been interrupted. Note that this method may return a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise") and Playwright Test will await it. Reporter is allowed to override the status and hence affect the exit code of the test runner.

    **Usage**

    ``` javascript
    await reporter.onEnd(result);
    ```

    **Arguments**

    - `result`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")
      - `status` "passed" \| "failed" \| "timedout" \| "interrupted"

        Test run status.

      - `startTime` \[Date\]

        Test run start wall time.

      - `duration`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Test run duration in milliseconds.

      Result of the full test run, `status` can be one of:
      - `'passed'` - Everything went as expected.
      - `'failed'` - Any test has failed.
      - `'timedout'` - The [testConfig.globalTimeout](class-testconfig#test-config-global-timeout) has been reached.
      - `'interrupted'` - Interrupted by the user.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `status` "passed" \| "failed" \| "timedout" \| "interrupted" *(optional)*

    &nbsp;
- name: reporter.onError
  id: api/class-reporter#reporter-on-error
  summary: Called on some global error, for example unhandled exception in the worker process
  belongs_to: Reporter
  description: |-
    ### onError[​](#reporter-on-error "Direct link to onError")

    Called on some global error, for example unhandled exception in the worker process.

    **Usage**

    ``` javascript
    reporter.onError(error);
    ```

    **Arguments**

    - `error` [TestError](class-testerror "TestError")

      The error.

    &nbsp;
- name: reporter.onExit
  id: api/class-reporter#reporter-on-exit
  summary: Called immediately before test runner exists
  belongs_to: Reporter
  description: |-
    ### onExit[​](#reporter-on-exit "Direct link to onExit")

    Called immediately before test runner exists. At this point all the reporters have received the [reporter.onEnd()](class-reporter#reporter-on-end) signal, so all the reports should be build. You can run the code that uploads the reports in this hook.

    **Usage**

    ``` javascript
    await reporter.onExit();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: reporter.onStdErr
  id: api/class-reporter#reporter-on-std-err
  summary: Called when something has been written to the standard error in the worker process
  belongs_to: Reporter
  description: |-
    ### onStdErr[​](#reporter-on-std-err "Direct link to onStdErr")

    Called when something has been written to the standard error in the worker process.

    **Usage**

    ``` javascript
    reporter.onStdErr(chunk, test, result);
    ```

    **Arguments**

    - `chunk`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")

      Output chunk.

    - `test`[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void") \| [TestCase](class-testcase "TestCase")

      Test that was running. Note that output may happen when no test is running, in which case this will be [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void").

    - `result`[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void") \| [TestResult](class-testresult "TestResult")

      Result of the test run, this object gets populated while the test runs.

    &nbsp;
- name: reporter.onStdOut
  id: api/class-reporter#reporter-on-std-out
  summary: Called when something has been written to the standard output in the worker process
  belongs_to: Reporter
  description: |-
    ### onStdOut[​](#reporter-on-std-out "Direct link to onStdOut")

    Called when something has been written to the standard output in the worker process.

    **Usage**

    ``` javascript
    reporter.onStdOut(chunk, test, result);
    ```

    **Arguments**

    - `chunk`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")

      Output chunk.

    - `test`[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void") \| [TestCase](class-testcase "TestCase")

      Test that was running. Note that output may happen when no test is running, in which case this will be [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void").

    - `result`[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void") \| [TestResult](class-testresult "TestResult")

      Result of the test run, this object gets populated while the test runs.

    &nbsp;
- name: reporter.onStepBegin
  id: api/class-reporter#reporter-on-step-begin
  summary: Called when a test step started in the worker process
  belongs_to: Reporter
  description: |-
    ### onStepBegin[​](#reporter-on-step-begin "Direct link to onStepBegin")

    Called when a test step started in the worker process.

    **Usage**

    ``` javascript
    reporter.onStepBegin(test, result, step);
    ```

    **Arguments**

    - `test` [TestCase](class-testcase "TestCase")

      Test that the step belongs to.

    - `result` [TestResult](class-testresult "TestResult")

      Result of the test run, this object gets populated while the test runs.

    - `step` [TestStep](class-teststep "TestStep")

      Test step instance that has started.

    &nbsp;
- name: reporter.onStepEnd
  id: api/class-reporter#reporter-on-step-end
  summary: Called when a test step finished in the worker process
  belongs_to: Reporter
  description: |-
    ### onStepEnd[​](#reporter-on-step-end "Direct link to onStepEnd")

    Called when a test step finished in the worker process.

    **Usage**

    ``` javascript
    reporter.onStepEnd(test, result, step);
    ```

    **Arguments**

    - `test` [TestCase](class-testcase "TestCase")

      Test that the step belongs to.

    - `result` [TestResult](class-testresult "TestResult")

      Result of the test run.

    - `step` [TestStep](class-teststep "TestStep")

      Test step instance that has finished.

    &nbsp;
- name: reporter.onTestBegin
  id: api/class-reporter#reporter-on-test-begin
  summary: Called after a test has been started in the worker process
  belongs_to: Reporter
  description: |-
    ### onTestBegin[​](#reporter-on-test-begin "Direct link to onTestBegin")

    Called after a test has been started in the worker process.

    **Usage**

    ``` javascript
    reporter.onTestBegin(test, result);
    ```

    **Arguments**

    - `test` [TestCase](class-testcase "TestCase")

      Test that has been started.

    - `result` [TestResult](class-testresult "TestResult")

      Result of the test run, this object gets populated while the test runs.

    &nbsp;
- name: reporter.onTestEnd
  id: api/class-reporter#reporter-on-test-end
  summary: Called after a test has been finished in the worker process
  belongs_to: Reporter
  description: |-
    ### onTestEnd[​](#reporter-on-test-end "Direct link to onTestEnd")

    Called after a test has been finished in the worker process.

    **Usage**

    ``` javascript
    reporter.onTestEnd(test, result);
    ```

    **Arguments**

    - `test` [TestCase](class-testcase "TestCase")

      Test that has been finished.

    - `result` [TestResult](class-testresult "TestResult")

      Result of the test run.

    &nbsp;
- name: reporter.printsToStdio
  id: api/class-reporter#reporter-prints-to-stdio
  summary: Whether this reporter uses stdio for reporting
  belongs_to: Reporter
  description: "### printsToStdio[​](#reporter-prints-to-stdio \"Direct link to printsToStdio\")\n\nWhether this reporter uses stdio for reporting. When it does not, Playwright Test could add some output to enhance user experience. If your reporter does not print to the terminal, it is strongly recommended to return `false`.\n\n**Usage**\n\n``` javascript\nreporter.printsToStdio();\n```\n\n**Returns**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-reporter](https://playwright.dev/docs/api/class-reporter)"
- name: Reporters
  id: test-reporters
  summary: Playwright Test comes with a few built-in reporters for different needs and ability to provide custom reporters
  description: "# Reporters\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright Test comes with a few built-in reporters for different needs and ability to provide custom reporters. The easiest way to try out built-in reporters is to pass `--reporter` [command line option](test-cli).\n\n``` javascript\nnpx playwright test --reporter=line\n```\n\nFor more control, you can specify reporters programmatically in the [configuration file](test-configuration).\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: 'line',\n});\n```\n\n### Multiple reporters[​](#multiple-reporters \"Direct link to Multiple reporters\")\n\nYou can use multiple reporters at the same time. For example you can use `'list'` for nice terminal output and `'json'` to get a comprehensive json file with the test results.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [\n    ['list'],\n    ['json', {  outputFile: 'test-results.json' }]\n  ],\n});\n```\n\n### Reporters on CI[​](#reporters-on-ci \"Direct link to Reporters on CI\")\n\nYou can use different reporters locally and on CI. For example, using concise `'dot'` reporter avoids too much output. This is the default on CI.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Concise 'dot' for CI, default 'list' when running locally\n  reporter: process.env.CI ? 'dot' : 'list',\n});\n```\n\n## Built-in reporters[​](#built-in-reporters \"Direct link to Built-in reporters\")\n\nAll built-in reporters show detailed information about failures, and mostly differ in verbosity for successful runs.\n\n### List reporter[​](#list-reporter \"Direct link to List reporter\")\n\nList reporter is default (except on CI where the `dot` reporter is default). It prints a line for each test being run.\n\n``` javascript\nnpx playwright test --reporter=list\n```\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: 'list',\n});\n```\n\nHere is an example output in the middle of a test run. Failures will be listed at the end.\n\n``` javascript\nnpx playwright test --reporter=list\nRunning 124 tests using 6 workers\n\n 1  ✓ should access error in env (438ms)\n 2  ✓ handle long test names (515ms)\n 3  x 1) render expected (691ms)\n 4  ✓ should timeout (932ms)\n 5    should repeat each:\n 6  ✓ should respect enclosing .gitignore (569ms)\n 7    should teardown env after timeout:\n 8    should respect excluded tests:\n 9  ✓ should handle env beforeEach error (638ms)\n10    should respect enclosing .gitignore:\n```\n\nYou can opt into the step rendering via passing the following config option:\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['list', { printSteps: true }]],\n});\n```\n\nList report supports the following configuration options and environment variables:\n\n| Environment Variable Name     | Reporter Config Option | Description                                                                                                                   | Default                                                 |\n|-------------------------------|------------------------|-------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------|\n| `PLAYWRIGHT_LIST_PRINT_STEPS` | `printSteps`           | Whether to print each step on its own line.                                                                                   | `false`                                                 |\n| `PLAYWRIGHT_FORCE_TTY`        |                        | Whether to produce output suitable for a live terminal. If a number is specified, it will also be used as the terminal width. | `true` when terminal is in TTY mode, `false` otherwise. |\n| `FORCE_COLOR`                 |                        | Whether to produce colored output.                                                                                            | `true` when terminal is in TTY mode, `false` otherwise. |\n\n### Line reporter[​](#line-reporter \"Direct link to Line reporter\")\n\nLine reporter is more concise than the list reporter. It uses a single line to report last finished test, and prints failures when they occur. Line reporter is useful for large test suites where it shows the progress but does not spam the output by listing all the tests.\n\n``` javascript\nnpx playwright test --reporter=line\n```\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: 'line',\n});\n```\n\nHere is an example output in the middle of a test run. Failures are reported inline.\n\n``` javascript\nnpx playwright test --reporter=line\nRunning 124 tests using 6 workers\n  1) dot-reporter.spec.ts:20:1 › render expected ===================================================\n\n    Error: expect(received).toBe(expected) // Object.is equality\n\n    Expected: 1\n    Received: 0\n\n[23/124] gitignore.spec.ts - should respect nested .gitignore\n```\n\nLine report supports the following configuration options and environment variables:\n\n| Environment Variable Name | Reporter Config Option | Description                                                                                                                   | Default                                                 |\n|---------------------------|------------------------|-------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------|\n| `PLAYWRIGHT_FORCE_TTY`    |                        | Whether to produce output suitable for a live terminal. If a number is specified, it will also be used as the terminal width. | `true` when terminal is in TTY mode, `false` otherwise. |\n| `FORCE_COLOR`             |                        | Whether to produce colored output.                                                                                            | `true` when terminal is in TTY mode, `false` otherwise. |\n\n### Dot reporter[​](#dot-reporter \"Direct link to Dot reporter\")\n\nDot reporter is very concise - it only produces a single character per successful test run. It is the default on CI and useful where you don't want a lot of output.\n\n``` javascript\nnpx playwright test --reporter=dot\n```\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: 'dot',\n});\n```\n\nHere is an example output in the middle of a test run. Failures will be listed at the end.\n\n``` javascript\nnpx playwright test --reporter=dot\nRunning 124 tests using 6 workers\n······F·············································\n```\n\nOne character is displayed for each test that has run, indicating its status:\n\n| Character | Description                               |\n|-----------|-------------------------------------------|\n| `·`       | Passed                                    |\n| `F`       | Failed                                    |\n| `×`       | Failed or timed out - and will be retried |\n| `±`       | Passed on retry (flaky)                   |\n| `T`       | Timed out                                 |\n| `°`       | Skipped                                   |\n\nDot report supports the following configuration options and environment variables:\n\n| Environment Variable Name | Reporter Config Option | Description                                                                                                                   | Default                                                 |\n|---------------------------|------------------------|-------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------|\n| `PLAYWRIGHT_FORCE_TTY`    |                        | Whether to produce output suitable for a live terminal. If a number is specified, it will also be used as the terminal width. | `true` when terminal is in TTY mode, `false` otherwise. |\n| `FORCE_COLOR`             |                        | Whether to produce colored output.                                                                                            | `true` when terminal is in TTY mode, `false` otherwise. |\n\n### HTML reporter[​](#html-reporter \"Direct link to HTML reporter\")\n\nHTML reporter produces a self-contained folder that contains report for the test run that can be served as a web page.\n\n``` javascript\nnpx playwright test --reporter=html\n```\n\nBy default, HTML report is opened automatically if some of the tests failed. You can control this behavior via the `open` property in the Playwright config or the `PLAYWRIGHT_HTML_OPEN` environmental variable. The possible values for that property are `always`, `never` and `on-failure` (default).\n\nYou can also configure `host` and `port` that are used to serve the HTML report.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['html', { open: 'never' }]],\n});\n```\n\nBy default, report is written into the `playwright-report` folder in the current working directory. One can override that location using the `PLAYWRIGHT_HTML_OUTPUT_DIR` environment variable or a reporter configuration.\n\nIn configuration file, pass options directly:\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['html', { outputFolder: 'my-report' }]],\n});\n```\n\nIf you are uploading attachments from data folder to other location, you can use `attachmentsBaseURL` option to let html report where to look for them.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['html', { attachmentsBaseURL: 'https://external-storage.com/' }]],\n});\n```\n\nA quick way of opening the last test run report is:\n\n``` javascript\nnpx playwright show-report\n```\n\nOr if there is a custom folder name:\n\n``` javascript\nnpx playwright show-report my-report\n```\n\nHTML report supports the following configuration options and environment variables:\n\n| Environment Variable Name              | Reporter Config Option | Description                                                                                                                                                       | Default                                                    |\n|----------------------------------------|------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------|\n| `PLAYWRIGHT_HTML_OUTPUT_DIR`           | `outputFolder`         | Directory to save the report to.                                                                                                                                  | `playwright-report`                                        |\n| `PLAYWRIGHT_HTML_OPEN`                 | `open`                 | When to open the html report in the browser, one of `'always'`, `'never'` or `'on-failure'`                                                                       | `'on-failure'`                                             |\n| `PLAYWRIGHT_HTML_HOST`                 | `host`                 | When report opens in the browser, it will be served bound to this hostname.                                                                                       | `localhost`                                                |\n| `PLAYWRIGHT_HTML_PORT`                 | `port`                 | When report opens in the browser, it will be served on this port.                                                                                                 | `9323` or any available port when `9323` is not available. |\n| `PLAYWRIGHT_HTML_ATTACHMENTS_BASE_URL` | `attachmentsBaseURL`   | A separate location where attachments from the `data` subdirectory are uploaded. Only needed when you upload report and `data` separately to different locations. | `data/`                                                    |\n\n### Blob reporter[​](#blob-reporter \"Direct link to Blob reporter\")\n\nBlob reports contain all the details about the test run and can be used later to produce any other report. Their primary function is to facilitate the merging of reports from [sharded tests](test-sharding).\n\n``` javascript\nnpx playwright test --reporter=blob\n```\n\nBy default, the report is written into the `blob-report` directory in the package.json directory or current working directory (if no package.json is found). The report file name looks like `report-<hash>.zip` or `report-<hash>-<shard_number>.zip` when [sharding](test-sharding) is used. The hash is an optional value computed from `--grep`, `--grepInverted`, `--project` and file filters passed as command line arguments. The hash guarantees that running Playwright with different command line options will produce different but stable between runs report names. The output file name can be overridden in the configuration file or pass as `'PLAYWRIGHT_BLOB_OUTPUT_FILE'` environment variable.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['blob', { outputFile: `./blob-report/report-${os.platform()}.zip` }]],\n});\n```\n\nBlob report supports following configuration options and environment variables:\n\n| Environment Variable Name     | Reporter Config Option | Description                                                                              | Default                                      |\n|-------------------------------|------------------------|------------------------------------------------------------------------------------------|----------------------------------------------|\n| `PLAYWRIGHT_BLOB_OUTPUT_DIR`  | `outputDir`            | Directory to save the output. Existing content is deleted before writing the new report. | `blob-report`                                |\n| `PLAYWRIGHT_BLOB_OUTPUT_NAME` | `fileName`             | Report file name.                                                                        | `report-<project>-<hash>-<shard_number>.zip` |\n| `PLAYWRIGHT_BLOB_OUTPUT_FILE` | `outputFile`           | Full path to the output file. If defined, `outputDir` and `fileName` will be ignored.    | `undefined`                                  |\n\n### JSON reporter[​](#json-reporter \"Direct link to JSON reporter\")\n\nJSON reporter produces an object with all information about the test run.\n\nMost likely you want to write the JSON to a file. When running with `--reporter=json`, use `PLAYWRIGHT_JSON_OUTPUT_NAME` environment variable:\n\n- Bash\n- PowerShell\n- Batch\n\n``` javascript\nPLAYWRIGHT_JSON_OUTPUT_NAME=results.json npx playwright test --reporter=json\n```\n\n``` javascript\n$env:PLAYWRIGHT_JSON_OUTPUT_NAME=\"results.json\"\nnpx playwright test --reporter=json\n```\n\n``` javascript\nset PLAYWRIGHT_JSON_OUTPUT_NAME=results.json\nnpx playwright test --reporter=json\n```\n\nIn configuration file, pass options directly:\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['json', { outputFile: 'results.json' }]],\n});\n```\n\nJSON report supports following configuration options and environment variables:\n\n| Environment Variable Name     | Reporter Config Option | Description                                                                                                               | Default                               |\n|-------------------------------|------------------------|---------------------------------------------------------------------------------------------------------------------------|---------------------------------------|\n| `PLAYWRIGHT_JSON_OUTPUT_DIR`  |                        | Directory to save the output file. Ignored if output file is specified.                                                   | `cwd` or config directory.            |\n| `PLAYWRIGHT_JSON_OUTPUT_NAME` | `outputFile`           | Base file name for the output, relative to the output dir.                                                                | JSON report is printed to the stdout. |\n| `PLAYWRIGHT_JSON_OUTPUT_FILE` | `outputFile`           | Full path to the output file. If defined, `PLAYWRIGHT_JSON_OUTPUT_DIR` and `PLAYWRIGHT_JSON_OUTPUT_NAME` will be ignored. | JSON report is printed to the stdout. |\n\n### JUnit reporter[​](#junit-reporter \"Direct link to JUnit reporter\")\n\nJUnit reporter produces a JUnit-style xml report.\n\nMost likely you want to write the report to an xml file. When running with `--reporter=junit`, use `PLAYWRIGHT_JUNIT_OUTPUT_NAME` environment variable:\n\n- Bash\n- PowerShell\n- Batch\n\n``` javascript\nPLAYWRIGHT_JUNIT_OUTPUT_NAME=results.xml npx playwright test --reporter=junit\n```\n\n``` javascript\n$env:PLAYWRIGHT_JUNIT_OUTPUT_NAME=\"results.xml\"\nnpx playwright test --reporter=junit\n```\n\n``` javascript\nset PLAYWRIGHT_JUNIT_OUTPUT_NAME=results.xml\nnpx playwright test --reporter=junit\n```\n\nIn configuration file, pass options directly:\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: [['junit', { outputFile: 'results.xml' }]],\n});\n```\n\nJUnit report supports following configuration options and environment variables:\n\n| Environment Variable Name                       | Reporter Config Option      | Description                                                                                                                 | Default                                |\n|-------------------------------------------------|-----------------------------|-----------------------------------------------------------------------------------------------------------------------------|----------------------------------------|\n| `PLAYWRIGHT_JUNIT_OUTPUT_DIR`                   |                             | Directory to save the output file. Ignored if output file is not specified.                                                 | `cwd` or config directory.             |\n| `PLAYWRIGHT_JUNIT_OUTPUT_NAME`                  | `outputFile`                | Base file name for the output, relative to the output dir.                                                                  | JUnit report is printed to the stdout. |\n| `PLAYWRIGHT_JUNIT_OUTPUT_FILE`                  | `outputFile`                | Full path to the output file. If defined, `PLAYWRIGHT_JUNIT_OUTPUT_DIR` and `PLAYWRIGHT_JUNIT_OUTPUT_NAME` will be ignored. | JUnit report is printed to the stdout. |\n| `PLAYWRIGHT_JUNIT_STRIP_ANSI`                   | `stripANSIControlSequences` | Whether to remove ANSI control sequences from the text before writing it in the report.                                     | By default output text is added as is. |\n| `PLAYWRIGHT_JUNIT_INCLUDE_PROJECT_IN_TEST_NAME` | `includeProjectInTestName`  | Whether to include Playwright project name in every test case as a name prefix.                                             | By default not included.               |\n| `PLAYWRIGHT_JUNIT_SUITE_ID`                     |                             | Value of the `id` attribute on the root `<testsuites/>` report entry.                                                       | Empty string.                          |\n| `PLAYWRIGHT_JUNIT_SUITE_NAME`                   |                             | Value of the `name` attribute on the root `<testsuites/>` report entry.                                                     | Empty string.                          |\n\n### GitHub Actions annotations[​](#github-actions-annotations \"Direct link to GitHub Actions annotations\")\n\nYou can use the built in `github` reporter to get automatic failure annotations when running in GitHub actions.\n\nNote that all other reporters work on GitHub Actions as well, but do not provide annotations. Also, it is not recommended to use this annotation type if running your tests with a matrix strategy as the stack trace failures will multiply and obscure the GitHub file view.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // 'github' for GitHub Actions CI to generate annotations, plus a concise 'dot'\n  // default 'list' when running locally\n  reporter: process.env.CI ? 'github' : 'list',\n});\n```\n\n## Custom reporters[​](#custom-reporters \"Direct link to Custom reporters\")\n\nYou can create a custom reporter by implementing a class with some of the reporter methods. Learn more about the [Reporter](api/class-reporter \"Reporter\") API.\n\n``` javascript\nimport type {\n  FullConfig, FullResult, Reporter, Suite, TestCase, TestResult\n} from '@playwright/test/reporter';\n\nclass MyReporter implements Reporter {\n  onBegin(config: FullConfig, suite: Suite) {\n    console.log(`Starting the run with ${suite.allTests().length} tests`);\n  }\n\n  onTestBegin(test: TestCase, result: TestResult) {\n    console.log(`Starting test ${test.title}`);\n  }\n\n  onTestEnd(test: TestCase, result: TestResult) {\n    console.log(`Finished test ${test.title}: ${result.status}`);\n  }\n\n  onEnd(result: FullResult) {\n    console.log(`Finished the run: ${result.status}`);\n  }\n}\n\nexport default MyReporter;\n```\n\nNow use this reporter with [testConfig.reporter](api/class-testconfig#test-config-reporter).\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: './my-awesome-reporter.ts',\n});\n```\n\nOr just pass the reporter file path as `--reporter` command line option:\n\n``` javascript\nnpx playwright test --reporter=\"./myreporter/my-awesome-reporter.ts\"\n```\n\n## Third party reporter showcase[​](#third-party-reporter-showcase \"Direct link to Third party reporter showcase\")\n\n- [Allure](https://www.npmjs.com/package/allure-playwright)\n- [Argos Visual Testing](https://argos-ci.com/docs/playwright)\n- [Currents](https://www.npmjs.com/package/@currents/playwright)\n- [GitHub Actions Reporter](https://www.npmjs.com/package/@estruyf/github-actions-reporter)\n- [GitHub Pull Request Comment](https://github.com/marketplace/actions/playwright-report-comment)\n- [Mail Reporter](https://www.npmjs.com/package/playwright-mail-reporter)\n- [Microsoft Teams Reporter](https://www.npmjs.com/package/playwright-msteams-reporter)\n- [Monocart](https://github.com/cenfun/monocart-reporter)\n- [ReportPortal](https://github.com/reportportal/agent-js-playwright)\n- [Serenity/JS](https://serenity-js.org/handbook/test-runners/playwright-test)\n- [Testmo](https://github.com/jonasclaes/playwright-testmo-reporter)\n- [Testomat.io](https://github.com/testomatio/reporter/blob/master/docs/frameworks.md#playwright)\n- [Tesults](https://www.tesults.com/docs/playwright)\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/test-reporters](https://playwright.dev/docs/test-reporters)"
- name: Request
  id: api/class-request
  summary: If request fails at some point, then instead of 'requestfinished' event (and possibly instead of 'response' event), the page.on('requestfailed') event is emitted
  description: "# Request\n\nWhenever the page sends a request for a network resource the following sequence of events are emitted by [Page](class-page \"Page\"):\n\n- [page.on('request')](class-page#page-event-request) emitted when the request is issued by the page.\n- [page.on('response')](class-page#page-event-response) emitted when/if the response status and headers are received for the request.\n- [page.on('requestfinished')](class-page#page-event-request-finished) emitted when the response body is downloaded and the request is complete.\n\nIf request fails at some point, then instead of `'requestfinished'` event (and possibly instead of 'response' event), the [page.on('requestfailed')](class-page#page-event-request-failed) event is emitted.\n\n> note\n>\n> HTTP Error responses, such as 404 or 503, are still successful responses from HTTP standpoint, so request will complete with `'requestfinished'` event.\n\nIf request gets a 'redirect' response, the request is successfully finished with the `requestfinished` event, and a new request is issued to a redirected url.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### allHeaders[​](#request-all-headers \"Direct link to allHeaders\")\n\nAn object with all the request HTTP headers associated with this request. The header names are lower-cased.\n\n**Usage**\n\n``` javascript\nawait request.allHeaders();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\\>\n\n### failure[​](#request-failure \"Direct link to failure\")\n\nAdded before v1.9\n\nThe method returns `null` unless this request has failed, as reported by `requestfailed` event.\n\n**Usage**\n\nExample of logging of all the failed requests:\n\n``` javascript\npage.on('requestfailed', request => {\n  console.log(request.url() + ' ' + request.failure().errorText);\n});\n```\n\n**Returns**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `errorText` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Human-readable error message, e.g. `'net::ERR_FAILED'`.\n\n### frame[​](#request-frame \"Direct link to frame\")\n\nAdded before v1.9\n\nReturns the [Frame](class-frame \"Frame\") that initiated this request.\n\n**Usage**\n\n``` javascript\nconst frameUrl = request.frame().url();\n```\n\n**Returns**\n\n- [Frame](class-frame \"Frame\")\n\n**Details**\n\nNote that in some cases the frame is not available, and this method will throw.\n\n- When request originates in the Service Worker. You can use `request.serviceWorker()` to check that.\n- When navigation request is issued before the corresponding frame is created. You can use [request.isNavigationRequest()](class-request#request-is-navigation-request) to check that.\n\nHere is an example that handles all the cases:\n\n``` javascript\nif (request.serviceWorker())\n  console.log(`request ${request.url()} from a service worker`);\nelse if (request.isNavigationRequest())\n  console.log(`request ${request.url()} is a navigation request`);\nelse\n  console.log(`request ${request.url()} from a frame ${request.frame().url()}`);\n```\n\n### headerValue[​](#request-header-value \"Direct link to headerValue\")\n\nReturns the value of the header matching the name. The name is case-insensitive.\n\n**Usage**\n\n``` javascript\nawait request.headerValue(name);\n```\n\n**Arguments**\n\n- `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Name of the header.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### headers[​](#request-headers \"Direct link to headers\")\n\nAdded before v1.9\n\nAn object with the request HTTP headers. The header names are lower-cased. Note that this method does not return security-related headers, including cookie-related ones. You can use [request.allHeaders()](class-request#request-all-headers) for complete list of headers that include `cookie` information.\n\n**Usage**\n\n``` javascript\nrequest.headers();\n```\n\n**Returns**\n\n- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### headersArray[​](#request-headers-array \"Direct link to headersArray\")\n\nAn array with all the request HTTP headers associated with this request. Unlike [request.allHeaders()](class-request#request-all-headers), header names are NOT lower-cased. Headers with multiple entries, such as `Set-Cookie`, appear in the array multiple times.\n\n**Usage**\n\n``` javascript\nawait request.headersArray();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\\>\n  - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Name of the header.\n\n  - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Value of the header.\n\n### isNavigationRequest[​](#request-is-navigation-request \"Direct link to isNavigationRequest\")\n\nAdded before v1.9\n\nWhether this request is driving frame's navigation.\n\nSome navigation requests are issued before the corresponding frame is created, and therefore do not have [request.frame()](class-request#request-frame) available.\n\n**Usage**\n\n``` javascript\nrequest.isNavigationRequest();\n```\n\n**Returns**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### method[​](#request-method \"Direct link to method\")\n\nAdded before v1.9\n\nRequest's method (GET, POST, etc.)\n\n**Usage**\n\n``` javascript\nrequest.method();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### postData[​](#request-post-data \"Direct link to postData\")\n\nAdded before v1.9\n\nRequest's post body, if any.\n\n**Usage**\n\n``` javascript\nrequest.postData();\n```\n\n**Returns**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### postDataBuffer[​](#request-post-data-buffer \"Direct link to postDataBuffer\")\n\nAdded before v1.9\n\nRequest's post body in a binary form, if any.\n\n**Usage**\n\n``` javascript\nrequest.postDataBuffer();\n```\n\n**Returns**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\n\n### postDataJSON[​](#request-post-data-json \"Direct link to postDataJSON\")\n\nAdded before v1.9\n\nReturns parsed request's body for `form-urlencoded` and JSON as a fallback if any.\n\nWhen the response is `application/x-www-form-urlencoded` then a key/value object of the values will be returned. Otherwise it will be parsed as JSON.\n\n**Usage**\n\n``` javascript\nrequest.postDataJSON();\n```\n\n**Returns**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\")\n\n### redirectedFrom[​](#request-redirected-from \"Direct link to redirectedFrom\")\n\nAdded before v1.9\n\nRequest that was redirected by the server to this one, if any.\n\nWhen the server responds with a redirect, Playwright creates a new [Request](class-request \"Request\") object. The two requests are connected by `redirectedFrom()` and `redirectedTo()` methods. When multiple server redirects has happened, it is possible to construct the whole redirect chain by repeatedly calling `redirectedFrom()`.\n\n**Usage**\n\nFor example, if the website `http://example.com` redirects to `https://example.com`:\n\n``` javascript\nconst response = await page.goto('http://example.com');\nconsole.log(response.request().redirectedFrom().url()); // 'http://example.com'\n```\n\nIf the website `https://google.com` has no redirects:\n\n``` javascript\nconst response = await page.goto('https://google.com');\nconsole.log(response.request().redirectedFrom()); // null\n```\n\n**Returns**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Request](class-request \"Request\")\n\n### redirectedTo[​](#request-redirected-to \"Direct link to redirectedTo\")\n\nAdded before v1.9\n\nNew request issued by the browser if the server responded with redirect.\n\n**Usage**\n\nThis method is the opposite of [request.redirectedFrom()](class-request#request-redirected-from):\n\n``` javascript\nconsole.log(request.redirectedFrom().redirectedTo() === request); // true\n```\n\n**Returns**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Request](class-request \"Request\")\n\n### resourceType[​](#request-resource-type \"Direct link to resourceType\")\n\nAdded before v1.9\n\nContains the request's resource type as it was perceived by the rendering engine. ResourceType will be one of the following: `document`, `stylesheet`, `image`, `media`, `font`, `script`, `texttrack`, `xhr`, `fetch`, `eventsource`, `websocket`, `manifest`, `other`.\n\n**Usage**\n\n``` javascript\nrequest.resourceType();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### response[​](#request-response \"Direct link to response\")\n\nAdded before v1.9\n\nReturns the matching [Response](class-response \"Response\") object, or `null` if the response was not received due to error.\n\n**Usage**\n\n``` javascript\nawait request.response();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Response](class-response \"Response\")\\>\n\n### serviceWorker[​](#request-service-worker \"Direct link to serviceWorker\")\n\nThe Service [Worker](class-worker \"Worker\") that is performing the request.\n\n**Usage**\n\n``` javascript\nrequest.serviceWorker();\n```\n\n**Returns**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Worker](class-worker \"Worker\")\n\n**Details**\n\nThis method is Chromium only. It's safe to call when using other browsers, but it will always be `null`.\n\nRequests originated in a Service Worker do not have a [request.frame()](class-request#request-frame) available.\n\n### sizes[​](#request-sizes \"Direct link to sizes\")\n\nReturns resource size information for given request.\n\n**Usage**\n\n``` javascript\nawait request.sizes();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `requestBodySize` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Size of the request body (POST data payload) in bytes. Set to 0 if there was no body.\n\n  - `requestHeadersSize` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Total number of bytes from the start of the HTTP request message until (and including) the double CRLF before the body.\n\n  - `responseBodySize` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Size of the received response body (encoded) in bytes.\n\n  - `responseHeadersSize` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Total number of bytes from the start of the HTTP response message until (and including) the double CRLF before the body.\n\n### timing[​](#request-timing \"Direct link to timing\")\n\nAdded before v1.9\n\nReturns resource timing information for given request. Most of the timing values become available upon the response, `responseEnd` becomes available when request finishes. Find more information at [Resource Timing API](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming).\n\n**Usage**\n\n``` javascript\nconst requestFinishedPromise = page.waitForEvent('requestfinished');\nawait page.goto('http://example.com');\nconst request = await requestFinishedPromise;\nconsole.log(request.timing());\n```\n\n**Returns**\n\n- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `startTime` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Request start time in milliseconds elapsed since January 1, 1970 00:00:00 UTC\n\n  - `domainLookupStart` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Time immediately before the browser starts the domain name lookup for the resource. The value is given in milliseconds relative to `startTime`, -1 if not available.\n\n  - `domainLookupEnd` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Time immediately after the browser starts the domain name lookup for the resource. The value is given in milliseconds relative to `startTime`, -1 if not available.\n\n  - `connectStart` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Time immediately before the user agent starts establishing the connection to the server to retrieve the resource. The value is given in milliseconds relative to `startTime`, -1 if not available.\n\n  - `secureConnectionStart` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Time immediately before the browser starts the handshake process to secure the current connection. The value is given in milliseconds relative to `startTime`, -1 if not available.\n\n  - `connectEnd` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Time immediately before the user agent starts establishing the connection to the server to retrieve the resource. The value is given in milliseconds relative to `startTime`, -1 if not available.\n\n  - `requestStart` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Time immediately before the browser starts requesting the resource from the server, cache, or local resource. The value is given in milliseconds relative to `startTime`, -1 if not available.\n\n  - `responseStart` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Time immediately after the browser receives the first byte of the response from the server, cache, or local resource. The value is given in milliseconds relative to `startTime`, -1 if not available.\n\n  - `responseEnd` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Time immediately after the browser receives the last byte of the resource or immediately before the transport connection is closed, whichever comes first. The value is given in milliseconds relative to `startTime`, -1 if not available.\n\n### url[​](#request-url \"Direct link to url\")\n\nAdded before v1.9\n\nURL of the request.\n\n**Usage**\n\n``` javascript\nrequest.url();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-request](https://playwright.dev/docs/api/class-request)"
- name: request.allHeaders
  id: api/class-request#request-all-headers
  summary: An object with all the request HTTP headers associated with this request
  belongs_to: Request
  description: |-
    ### allHeaders[​](#request-all-headers "Direct link to allHeaders")

    An object with all the request HTTP headers associated with this request. The header names are lower-cased.

    **Usage**

    ``` javascript
    await request.allHeaders();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>\>
- name: request.failure
  id: api/class-request#request-failure
  summary: The method returns null unless this request has failed, as reported by requestfailed event
  belongs_to: Request
  description: |-
    ### failure[​](#request-failure "Direct link to failure")

    Added before v1.9

    The method returns `null` unless this request has failed, as reported by `requestfailed` event.

    **Usage**

    Example of logging of all the failed requests:

    ``` javascript
    page.on('requestfailed', request => {
      console.log(request.url() + ' ' + request.failure().errorText);
    });
    ```

    **Returns**

    - [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")
      - `errorText`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        Human-readable error message, e.g. `'net::ERR_FAILED'`.

    &nbsp;
- name: request.frame
  id: api/class-request#request-frame
  summary: Returns the Frame that initiated this request
  belongs_to: Request
  description: |-
    ### frame[​](#request-frame "Direct link to frame")

    Added before v1.9

    Returns the [Frame](class-frame "Frame") that initiated this request.

    **Usage**

    ``` javascript
    const frameUrl = request.frame().url();
    ```

    **Returns**

    - [Frame](class-frame "Frame")

    **Details**

    Note that in some cases the frame is not available, and this method will throw.

    - When request originates in the Service Worker. You can use `request.serviceWorker()` to check that.
    - When navigation request is issued before the corresponding frame is created. You can use [request.isNavigationRequest()](class-request#request-is-navigation-request) to check that.

    Here is an example that handles all the cases:

    ``` javascript
    if (request.serviceWorker())
      console.log(`request ${request.url()} from a service worker`);
    else if (request.isNavigationRequest())
      console.log(`request ${request.url()} is a navigation request`);
    else
      console.log(`request ${request.url()} from a frame ${request.frame().url()}`);
    ```
- name: request.headers
  id: api/class-request#request-headers
  summary: An object with the request HTTP headers
  belongs_to: Request
  description: |-
    ### headers[​](#request-headers "Direct link to headers")

    Added before v1.9

    An object with the request HTTP headers. The header names are lower-cased. Note that this method does not return security-related headers, including cookie-related ones. You can use [request.allHeaders()](class-request#request-all-headers) for complete list of headers that include `cookie` information.

    **Usage**

    ``` javascript
    request.headers();
    ```

    **Returns**

    - [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: request.headersArray
  id: api/class-request#request-headers-array
  summary: An array with all the request HTTP headers associated with this request
  belongs_to: Request
  description: |-
    ### headersArray[​](#request-headers-array "Direct link to headersArray")

    An array with all the request HTTP headers associated with this request. Unlike [request.allHeaders()](class-request#request-all-headers), header names are NOT lower-cased. Headers with multiple entries, such as `Set-Cookie`, appear in the array multiple times.

    **Usage**

    ``` javascript
    await request.headersArray();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\>
      - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        Name of the header.

      - `value`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        Value of the header.

    &nbsp;
- name: request.headerValue
  id: api/class-request#request-header-value
  summary: Returns the value of the header matching the name
  belongs_to: Request
  description: |-
    ### headerValue[​](#request-header-value "Direct link to headerValue")

    Returns the value of the header matching the name. The name is case-insensitive.

    **Usage**

    ``` javascript
    await request.headerValue(name);
    ```

    **Arguments**

    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Name of the header.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: request.isNavigationRequest
  id: api/class-request#request-is-navigation-request
  summary: Whether this request is driving frame's navigation
  belongs_to: Request
  description: |-
    ### isNavigationRequest[​](#request-is-navigation-request "Direct link to isNavigationRequest")

    Added before v1.9

    Whether this request is driving frame's navigation.

    Some navigation requests are issued before the corresponding frame is created, and therefore do not have [request.frame()](class-request#request-frame) available.

    **Usage**

    ``` javascript
    request.isNavigationRequest();
    ```

    **Returns**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: request.method
  id: api/class-request#request-method
  summary: null
  belongs_to: Request
  description: |-
    ### method[​](#request-method "Direct link to method")

    Added before v1.9

    Request's method (GET, POST, etc.)

    **Usage**

    ``` javascript
    request.method();
    ```

    **Returns**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: request.postData
  id: api/class-request#request-post-data
  summary: Request's post body, if any
  belongs_to: Request
  description: |-
    ### postData[​](#request-post-data "Direct link to postData")

    Added before v1.9

    Request's post body, if any.

    **Usage**

    ``` javascript
    request.postData();
    ```

    **Returns**

    - [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: request.postDataBuffer
  id: api/class-request#request-post-data-buffer
  summary: Request's post body in a binary form, if any
  belongs_to: Request
  description: |-
    ### postDataBuffer[​](#request-post-data-buffer "Direct link to postDataBuffer")

    Added before v1.9

    Request's post body in a binary form, if any.

    **Usage**

    ``` javascript
    request.postDataBuffer();
    ```

    **Returns**

    - [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")

    &nbsp;
- name: request.postDataJSON
  id: api/class-request#request-post-data-json
  summary: Returns parsed request's body for form-urlencoded and JSON as a fallback if any
  belongs_to: Request
  description: |-
    ### postDataJSON[​](#request-post-data-json "Direct link to postDataJSON")

    Added before v1.9

    Returns parsed request's body for `form-urlencoded` and JSON as a fallback if any.

    When the response is `application/x-www-form-urlencoded` then a key/value object of the values will be returned. Otherwise it will be parsed as JSON.

    **Usage**

    ``` javascript
    request.postDataJSON();
    ```

    **Returns**

    - [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")

    &nbsp;
- name: request.redirectedFrom
  id: api/class-request#request-redirected-from
  summary: Request that was redirected by the server to this one, if any
  belongs_to: Request
  description: |-
    ### redirectedFrom[​](#request-redirected-from "Direct link to redirectedFrom")

    Added before v1.9

    Request that was redirected by the server to this one, if any.

    When the server responds with a redirect, Playwright creates a new [Request](class-request "Request") object. The two requests are connected by `redirectedFrom()` and `redirectedTo()` methods. When multiple server redirects has happened, it is possible to construct the whole redirect chain by repeatedly calling `redirectedFrom()`.

    **Usage**

    For example, if the website `http://example.com` redirects to `https://example.com`:

    ``` javascript
    const response = await page.goto('http://example.com');
    console.log(response.request().redirectedFrom().url()); // 'http://example.com'
    ```

    If the website `https://google.com` has no redirects:

    ``` javascript
    const response = await page.goto('https://google.com');
    console.log(response.request().redirectedFrom()); // null
    ```

    **Returns**

    - [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Request](class-request "Request")

    &nbsp;
- name: request.redirectedTo
  id: api/class-request#request-redirected-to
  summary: New request issued by the browser if the server responded with redirect
  belongs_to: Request
  description: |-
    ### redirectedTo[​](#request-redirected-to "Direct link to redirectedTo")

    Added before v1.9

    New request issued by the browser if the server responded with redirect.

    **Usage**

    This method is the opposite of [request.redirectedFrom()](class-request#request-redirected-from):

    ``` javascript
    console.log(request.redirectedFrom().redirectedTo() === request); // true
    ```

    **Returns**

    - [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Request](class-request "Request")

    &nbsp;
- name: request.resourceType
  id: api/class-request#request-resource-type
  summary: Contains the request's resource type as it was perceived by the rendering engine
  belongs_to: Request
  description: |-
    ### resourceType[​](#request-resource-type "Direct link to resourceType")

    Added before v1.9

    Contains the request's resource type as it was perceived by the rendering engine. ResourceType will be one of the following: `document`, `stylesheet`, `image`, `media`, `font`, `script`, `texttrack`, `xhr`, `fetch`, `eventsource`, `websocket`, `manifest`, `other`.

    **Usage**

    ``` javascript
    request.resourceType();
    ```

    **Returns**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: request.response
  id: api/class-request#request-response
  summary: Returns the matching Response object, or null if the response was not received due to error
  belongs_to: Request
  description: |-
    ### response[​](#request-response "Direct link to response")

    Added before v1.9

    Returns the matching [Response](class-response "Response") object, or `null` if the response was not received due to error.

    **Usage**

    ``` javascript
    await request.response();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Response](class-response "Response")\>

    &nbsp;
- name: request.serviceWorker
  id: api/class-request#request-service-worker
  summary: The Service Worker that is performing the request
  belongs_to: Request
  description: |-
    ### serviceWorker[​](#request-service-worker "Direct link to serviceWorker")

    The Service [Worker](class-worker "Worker") that is performing the request.

    **Usage**

    ``` javascript
    request.serviceWorker();
    ```

    **Returns**

    - [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Worker](class-worker "Worker")

    **Details**

    This method is Chromium only. It's safe to call when using other browsers, but it will always be `null`.

    Requests originated in a Service Worker do not have a [request.frame()](class-request#request-frame) available.
- name: request.sizes
  id: api/class-request#request-sizes
  summary: Returns resource size information for given request
  belongs_to: Request
  description: |-
    ### sizes[​](#request-sizes "Direct link to sizes")

    Returns resource size information for given request.

    **Usage**

    ``` javascript
    await request.sizes();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `requestBodySize`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Size of the request body (POST data payload) in bytes. Set to 0 if there was no body.

      - `requestHeadersSize`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Total number of bytes from the start of the HTTP request message until (and including) the double CRLF before the body.

      - `responseBodySize`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Size of the received response body (encoded) in bytes.

      - `responseHeadersSize`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Total number of bytes from the start of the HTTP response message until (and including) the double CRLF before the body.

    &nbsp;
- name: request.timing
  id: api/class-request#request-timing
  summary: Returns resource timing information for given request
  belongs_to: Request
  description: |-
    ### timing[​](#request-timing "Direct link to timing")

    Added before v1.9

    Returns resource timing information for given request. Most of the timing values become available upon the response, `responseEnd` becomes available when request finishes. Find more information at [Resource Timing API](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming).

    **Usage**

    ``` javascript
    const requestFinishedPromise = page.waitForEvent('requestfinished');
    await page.goto('http://example.com');
    const request = await requestFinishedPromise;
    console.log(request.timing());
    ```

    **Returns**

    - [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")
      - `startTime` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Request start time in milliseconds elapsed since January 1, 1970 00:00:00 UTC

      - `domainLookupStart` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Time immediately before the browser starts the domain name lookup for the resource. The value is given in milliseconds relative to `startTime`, -1 if not available.

      - `domainLookupEnd` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Time immediately after the browser starts the domain name lookup for the resource. The value is given in milliseconds relative to `startTime`, -1 if not available.

      - `connectStart` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Time immediately before the user agent starts establishing the connection to the server to retrieve the resource. The value is given in milliseconds relative to `startTime`, -1 if not available.

      - `secureConnectionStart` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Time immediately before the browser starts the handshake process to secure the current connection. The value is given in milliseconds relative to `startTime`, -1 if not available.

      - `connectEnd` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Time immediately before the user agent starts establishing the connection to the server to retrieve the resource. The value is given in milliseconds relative to `startTime`, -1 if not available.

      - `requestStart` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Time immediately before the browser starts requesting the resource from the server, cache, or local resource. The value is given in milliseconds relative to `startTime`, -1 if not available.

      - `responseStart` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Time immediately after the browser receives the first byte of the response from the server, cache, or local resource. The value is given in milliseconds relative to `startTime`, -1 if not available.

      - `responseEnd` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Time immediately after the browser receives the last byte of the resource or immediately before the transport connection is closed, whichever comes first. The value is given in milliseconds relative to `startTime`, -1 if not available.

    &nbsp;
- name: request.url
  id: api/class-request#request-url
  summary: URL of the request
  belongs_to: Request
  description: "### url[​](#request-url \"Direct link to url\")\n\nAdded before v1.9\n\nURL of the request.\n\n**Usage**\n\n``` javascript\nrequest.url();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-request](https://playwright.dev/docs/api/class-request)"
- name: Response
  id: api/class-response
  summary: Response class represents responses which are received by page
  description: "# Response\n\n[Response](class-response \"Response\") class represents responses which are received by page.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### allHeaders[​](#response-all-headers \"Direct link to allHeaders\")\n\nAn object with all the response HTTP headers associated with this response.\n\n**Usage**\n\n``` javascript\nawait response.allHeaders();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\\>\n\n### body[​](#response-body \"Direct link to body\")\n\nAdded before v1.9\n\nReturns the buffer with response body.\n\n**Usage**\n\n``` javascript\nawait response.body();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\\>\n\n### finished[​](#response-finished \"Direct link to finished\")\n\nAdded before v1.9\n\nWaits for this response to finish, returns always `null`.\n\n**Usage**\n\n``` javascript\nawait response.finished();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Error](https://nodejs.org/api/errors.html#errors_class_error \"Error\")\\>\n\n### frame[​](#response-frame \"Direct link to frame\")\n\nAdded before v1.9\n\nReturns the [Frame](class-frame \"Frame\") that initiated this response.\n\n**Usage**\n\n``` javascript\nresponse.frame();\n```\n\n**Returns**\n\n- [Frame](class-frame \"Frame\")\n\n### fromServiceWorker[​](#response-from-service-worker \"Direct link to fromServiceWorker\")\n\nIndicates whether this Response was fulfilled by a Service Worker's Fetch Handler (i.e. via [FetchEvent.respondWith](https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/respondWith)).\n\n**Usage**\n\n``` javascript\nresponse.fromServiceWorker();\n```\n\n**Returns**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### headerValue[​](#response-header-value \"Direct link to headerValue\")\n\nReturns the value of the header matching the name. The name is case-insensitive. If multiple headers have the same name (except `set-cookie`), they are returned as a list separated by `, `. For `set-cookie`, the `\\n` separator is used. If no headers are found, `null` is returned.\n\n**Usage**\n\n``` javascript\nawait response.headerValue(name);\n```\n\n**Arguments**\n\n- `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Name of the header.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### headerValues[​](#response-header-values \"Direct link to headerValues\")\n\nReturns all values of the headers matching the name, for example `set-cookie`. The name is case-insensitive.\n\n**Usage**\n\n``` javascript\nawait response.headerValues(name);\n```\n\n**Arguments**\n\n- `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Name of the header.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\\>\n\n### headers[​](#response-headers \"Direct link to headers\")\n\nAdded before v1.9\n\nAn object with the response HTTP headers. The header names are lower-cased. Note that this method does not return security-related headers, including cookie-related ones. You can use [response.allHeaders()](class-response#response-all-headers) for complete list of headers that include `cookie` information.\n\n**Usage**\n\n``` javascript\nresponse.headers();\n```\n\n**Returns**\n\n- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### headersArray[​](#response-headers-array \"Direct link to headersArray\")\n\nAn array with all the request HTTP headers associated with this response. Unlike [response.allHeaders()](class-response#response-all-headers), header names are NOT lower-cased. Headers with multiple entries, such as `Set-Cookie`, appear in the array multiple times.\n\n**Usage**\n\n``` javascript\nawait response.headersArray();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\\>\n  - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Name of the header.\n\n  - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Value of the header.\n\n### json[​](#response-json \"Direct link to json\")\n\nAdded before v1.9\n\nReturns the JSON representation of response body.\n\nThis method will throw if the response body is not parsable via `JSON.parse`.\n\n**Usage**\n\n``` javascript\nawait response.json();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\")\\>\n\n### ok[​](#response-ok \"Direct link to ok\")\n\nAdded before v1.9\n\nContains a boolean stating whether the response was successful (status in the range 200-299) or not.\n\n**Usage**\n\n``` javascript\nresponse.ok();\n```\n\n**Returns**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### request[​](#response-request \"Direct link to request\")\n\nAdded before v1.9\n\nReturns the matching [Request](class-request \"Request\") object.\n\n**Usage**\n\n``` javascript\nresponse.request();\n```\n\n**Returns**\n\n- [Request](class-request \"Request\")\n\n### securityDetails[​](#response-security-details \"Direct link to securityDetails\")\n\nReturns SSL and other security information.\n\n**Usage**\n\n``` javascript\nawait response.securityDetails();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `issuer` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Common Name component of the Issuer field. from the certificate. This should only be used for informational purposes. Optional.\n\n  - `protocol` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    The specific TLS protocol used. (e.g. `TLS 1.3`). Optional.\n\n  - `subjectName` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Common Name component of the Subject field from the certificate. This should only be used for informational purposes. Optional.\n\n  - `validFrom` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Unix timestamp (in seconds) specifying when this cert becomes valid. Optional.\n\n  - `validTo` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Unix timestamp (in seconds) specifying when this cert becomes invalid. Optional.\n\n### serverAddr[​](#response-server-addr \"Direct link to serverAddr\")\n\nReturns the IP address and port of the server.\n\n**Usage**\n\n``` javascript\nawait response.serverAddr();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `ipAddress` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    IPv4 or IPV6 address of the server.\n\n  - `port` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### status[​](#response-status \"Direct link to status\")\n\nAdded before v1.9\n\nContains the status code of the response (e.g., 200 for a success).\n\n**Usage**\n\n``` javascript\nresponse.status();\n```\n\n**Returns**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### statusText[​](#response-status-text \"Direct link to statusText\")\n\nAdded before v1.9\n\nContains the status text of the response (e.g. usually an \"OK\" for a success).\n\n**Usage**\n\n``` javascript\nresponse.statusText();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### text[​](#response-text \"Direct link to text\")\n\nAdded before v1.9\n\nReturns the text representation of response body.\n\n**Usage**\n\n``` javascript\nawait response.text();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### url[​](#response-url \"Direct link to url\")\n\nAdded before v1.9\n\nContains the URL of the response.\n\n**Usage**\n\n``` javascript\nresponse.url();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-response](https://playwright.dev/docs/api/class-response)"
- name: response.allHeaders
  id: api/class-response#response-all-headers
  summary: An object with all the response HTTP headers associated with this response
  belongs_to: Response
  description: |-
    ### allHeaders[​](#response-all-headers "Direct link to allHeaders")

    An object with all the response HTTP headers associated with this response.

    **Usage**

    ``` javascript
    await response.allHeaders();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>\>
- name: response.body
  id: api/class-response#response-body
  summary: Returns the buffer with response body
  belongs_to: Response
  description: |-
    ### body[​](#response-body "Direct link to body")

    Added before v1.9

    Returns the buffer with response body.

    **Usage**

    ``` javascript
    await response.body();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")\>

    &nbsp;
- name: response.finished
  id: api/class-response#response-finished
  summary: Waits for this response to finish, returns always null
  belongs_to: Response
  description: |-
    ### finished[​](#response-finished "Direct link to finished")

    Added before v1.9

    Waits for this response to finish, returns always `null`.

    **Usage**

    ``` javascript
    await response.finished();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Error](https://nodejs.org/api/errors.html#errors_class_error "Error")\>

    &nbsp;
- name: response.frame
  id: api/class-response#response-frame
  summary: Returns the Frame that initiated this response
  belongs_to: Response
  description: |-
    ### frame[​](#response-frame "Direct link to frame")

    Added before v1.9

    Returns the [Frame](class-frame "Frame") that initiated this response.

    **Usage**

    ``` javascript
    response.frame();
    ```

    **Returns**

    - [Frame](class-frame "Frame")

    &nbsp;
- name: response.fromServiceWorker
  id: api/class-response#response-from-service-worker
  summary: Indicates whether this Response was fulfilled by a Service Worker's Fetch Handler (i.e
  belongs_to: Response
  description: |-
    ### fromServiceWorker[​](#response-from-service-worker "Direct link to fromServiceWorker")

    Indicates whether this Response was fulfilled by a Service Worker's Fetch Handler (i.e. via [FetchEvent.respondWith](https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/respondWith)).

    **Usage**

    ``` javascript
    response.fromServiceWorker();
    ```

    **Returns**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: response.headers
  id: api/class-response#response-headers
  summary: An object with the response HTTP headers
  belongs_to: Response
  description: |-
    ### headers[​](#response-headers "Direct link to headers")

    Added before v1.9

    An object with the response HTTP headers. The header names are lower-cased. Note that this method does not return security-related headers, including cookie-related ones. You can use [response.allHeaders()](class-response#response-all-headers) for complete list of headers that include `cookie` information.

    **Usage**

    ``` javascript
    response.headers();
    ```

    **Returns**

    - [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: response.headersArray
  id: api/class-response#response-headers-array
  summary: An array with all the request HTTP headers associated with this response
  belongs_to: Response
  description: |-
    ### headersArray[​](#response-headers-array "Direct link to headersArray")

    An array with all the request HTTP headers associated with this response. Unlike [response.allHeaders()](class-response#response-all-headers), header names are NOT lower-cased. Headers with multiple entries, such as `Set-Cookie`, appear in the array multiple times.

    **Usage**

    ``` javascript
    await response.headersArray();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>\>
      - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        Name of the header.

      - `value`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        Value of the header.

    &nbsp;
- name: response.headerValue
  id: api/class-response#response-header-value
  summary: Returns the value of the header matching the name
  belongs_to: Response
  description: |-
    ### headerValue[​](#response-header-value "Direct link to headerValue")

    Returns the value of the header matching the name. The name is case-insensitive. If multiple headers have the same name (except `set-cookie`), they are returned as a list separated by `, `. For `set-cookie`, the `\n` separator is used. If no headers are found, `null` is returned.

    **Usage**

    ``` javascript
    await response.headerValue(name);
    ```

    **Arguments**

    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Name of the header.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: response.headerValues
  id: api/class-response#response-header-values
  summary: Returns all values of the headers matching the name, for example set-cookie
  belongs_to: Response
  description: |-
    ### headerValues[​](#response-header-values "Direct link to headerValues")

    Returns all values of the headers matching the name, for example `set-cookie`. The name is case-insensitive.

    **Usage**

    ``` javascript
    await response.headerValues(name);
    ```

    **Arguments**

    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Name of the header.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>\>

    &nbsp;
- name: response.json
  id: api/class-response#response-json
  summary: Returns the JSON representation of response body
  belongs_to: Response
  description: |-
    ### json[​](#response-json "Direct link to json")

    Added before v1.9

    Returns the JSON representation of response body.

    This method will throw if the response body is not parsable via `JSON.parse`.

    **Usage**

    ``` javascript
    await response.json();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>

    &nbsp;
- name: response.ok
  id: api/class-response#response-ok
  summary: Contains a boolean stating whether the response was successful (status in the range 200-299) or not
  belongs_to: Response
  description: |-
    ### ok[​](#response-ok "Direct link to ok")

    Added before v1.9

    Contains a boolean stating whether the response was successful (status in the range 200-299) or not.

    **Usage**

    ``` javascript
    response.ok();
    ```

    **Returns**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: response.request
  id: api/class-response#response-request
  summary: Returns the matching Request object
  belongs_to: Response
  description: |-
    ### request[​](#response-request "Direct link to request")

    Added before v1.9

    Returns the matching [Request](class-request "Request") object.

    **Usage**

    ``` javascript
    response.request();
    ```

    **Returns**

    - [Request](class-request "Request")

    &nbsp;
- name: response.securityDetails
  id: api/class-response#response-security-details
  summary: Returns SSL and other security information
  belongs_to: Response
  description: |-
    ### securityDetails[​](#response-security-details "Direct link to securityDetails")

    Returns SSL and other security information.

    **Usage**

    ``` javascript
    await response.securityDetails();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `issuer`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")*(optional)*

        Common Name component of the Issuer field. from the certificate. This should only be used for informational purposes. Optional.

      - `protocol`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")*(optional)*

        The specific TLS protocol used. (e.g. `TLS 1.3`). Optional.

      - `subjectName`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")*(optional)*

        Common Name component of the Subject field from the certificate. This should only be used for informational purposes. Optional.

      - `validFrom`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")*(optional)*

        Unix timestamp (in seconds) specifying when this cert becomes valid. Optional.

      - `validTo`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")*(optional)*

        Unix timestamp (in seconds) specifying when this cert becomes invalid. Optional.

    &nbsp;
- name: response.serverAddr
  id: api/class-response#response-server-addr
  summary: Returns the IP address and port of the server
  belongs_to: Response
  description: |-
    ### serverAddr[​](#response-server-addr "Direct link to serverAddr")

    Returns the IP address and port of the server.

    **Usage**

    ``` javascript
    await response.serverAddr();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `ipAddress`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        IPv4 or IPV6 address of the server.

      - `port`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: response.status
  id: api/class-response#response-status
  summary: Contains the status code of the response (e.g., 200 for a success)
  belongs_to: Response
  description: |-
    ### status[​](#response-status "Direct link to status")

    Added before v1.9

    Contains the status code of the response (e.g., 200 for a success).

    **Usage**

    ``` javascript
    response.status();
    ```

    **Returns**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: response.statusText
  id: api/class-response#response-status-text
  summary: Contains the status text of the response (e.g
  belongs_to: Response
  description: |-
    ### statusText[​](#response-status-text "Direct link to statusText")

    Added before v1.9

    Contains the status text of the response (e.g. usually an "OK" for a success).

    **Usage**

    ``` javascript
    response.statusText();
    ```

    **Returns**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: response.text
  id: api/class-response#response-text
  summary: Returns the text representation of response body
  belongs_to: Response
  description: |-
    ### text[​](#response-text "Direct link to text")

    Added before v1.9

    Returns the text representation of response body.

    **Usage**

    ``` javascript
    await response.text();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: response.url
  id: api/class-response#response-url
  summary: Contains the URL of the response
  belongs_to: Response
  description: "### url[​](#response-url \"Direct link to url\")\n\nAdded before v1.9\n\nContains the URL of the response.\n\n**Usage**\n\n``` javascript\nresponse.url();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-response](https://playwright.dev/docs/api/class-response)"
- name: Retries
  id: test-retries
  summary: Test retries are a way to automatically re-run a test when it fails
  description: "# Retries\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nTest retries are a way to automatically re-run a test when it fails. This is useful when a test is flaky and fails intermittently. Test retries are configured in the [configuration file](test-configuration).\n\n## Failures[​](#failures \"Direct link to Failures\")\n\nPlaywright Test runs tests in worker processes. These processes are OS processes, running independently, orchestrated by the test runner. All workers have identical environments and each starts its own browser.\n\nConsider the following snippet:\n\n``` javascript\nimport { test } from '@playwright/test';\n\ntest.describe('suite', () => {\n  test.beforeAll(async () => { /* ... */ });\n  test('first good', async ({ page }) => { /* ... */ });\n  test('second flaky', async ({ page }) => { /* ... */ });\n  test('third good', async ({ page }) => { /* ... */ });\n  test.afterAll(async () => { /* ... */ });\n});\n```\n\nWhen **all tests pass**, they will run in order in the same worker process.\n\n- Worker process starts\n  - `beforeAll` hook runs\n  - `first good` passes\n  - `second flaky` passes\n  - `third good` passes\n  - `afterAll` hook runs\n\nShould **any test fail**, Playwright Test will discard the entire worker process along with the browser and will start a new one. Testing will continue in the new worker process starting with the next test.\n\n- Worker process \\#1 starts\n  - `beforeAll` hook runs\n  - `first good` passes\n  - `second flaky` fails\n  - `afterAll` hook runs\n- Worker process \\#2 starts\n  - `beforeAll` hook runs again\n  - `third good` passes\n  - `afterAll` hook runs\n\nIf you **enable [retries](#retries)**, second worker process will start by retrying the failed test and continue from there.\n\n- Worker process \\#1 starts\n  - `beforeAll` hook runs\n  - `first good` passes\n  - `second flaky` fails\n  - `afterAll` hook runs\n- Worker process \\#2 starts\n  - `beforeAll` hook runs again\n  - `second flaky` is retried and passes\n  - `third good` passes\n  - `afterAll` hook runs\n\nThis scheme works perfectly for independent tests and guarantees that failing tests can't affect healthy ones.\n\n## Retries[​](#retries \"Direct link to Retries\")\n\nPlaywright supports **test retries**. When enabled, failing tests will be retried multiple times until they pass, or until the maximum number of retries is reached. By default failing tests are not retried.\n\n``` javascript\n# Give failing tests 3 retry attempts\nnpx playwright test --retries=3\n```\n\nYou can configure retries in the configuration file:\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Give failing tests 3 retry attempts\n  retries: 3,\n});\n```\n\nPlaywright Test will categorize tests as follows:\n\n- \"passed\" - tests that passed on the first run;\n- \"flaky\" - tests that failed on the first run, but passed when retried;\n- \"failed\" - tests that failed on the first run and failed all retries.\n\n``` javascript\nRunning 3 tests using 1 worker\n\n  ✓ example.spec.ts:4:2 › first passes (438ms)\n  x example.spec.ts:5:2 › second flaky (691ms)\n  ✓ example.spec.ts:5:2 › second flaky (522ms)\n  ✓ example.spec.ts:6:2 › third passes (932ms)\n\n  1 flaky\n    example.spec.ts:5:2 › second flaky\n  2 passed (4s)\n```\n\nYou can detect retries at runtime with [testInfo.retry](api/class-testinfo#test-info-retry), which is accessible to any test, hook or fixture. Here is an example that clears some server-side state before a retry.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('my test', async ({ page }, testInfo) => {\n  if (testInfo.retry)\n    await cleanSomeCachesOnTheServer();\n  // ...\n});\n```\n\nYou can specify retries for a specific group of tests or a single file with [test.describe.configure()](api/class-test#test-describe-configure).\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.describe(() => {\n  // All tests in this describe group will get 2 retry attempts.\n  test.describe.configure({ retries: 2 });\n\n  test('test 1', async ({ page }) => {\n    // ...\n  });\n\n  test('test 2', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n## Serial mode[​](#serial-mode \"Direct link to Serial mode\")\n\nUse [test.describe.serial()](api/class-test#test-describe-serial) to group dependent tests to ensure they will always run together and in order. If one of the tests fails, all subsequent tests are skipped. All tests in the group are retried together.\n\nConsider the following snippet that uses `test.describe.serial`:\n\n``` javascript\nimport { test } from '@playwright/test';\n\ntest.describe.configure({ mode: 'serial' });\n\ntest.beforeAll(async () => { /* ... */ });\ntest('first good', async ({ page }) => { /* ... */ });\ntest('second flaky', async ({ page }) => { /* ... */ });\ntest('third good', async ({ page }) => { /* ... */ });\n```\n\nWhen running without [retries](#retries), all tests after the failure are skipped:\n\n- Worker process \\#1:\n  - `beforeAll` hook runs\n  - `first good` passes\n  - `second flaky` fails\n  - `third good` is skipped entirely\n\nWhen running with [retries](#retries), all tests are retried together:\n\n- Worker process \\#1:\n  - `beforeAll` hook runs\n  - `first good` passes\n  - `second flaky` fails\n  - `third good` is skipped\n- Worker process \\#2:\n  - `beforeAll` hook runs again\n  - `first good` passes again\n  - `second flaky` passes\n  - `third good` passes\n\n> note\n>\n> It is usually better to make your tests isolated, so they can be efficiently run and retried independently.\n\n## Reuse single page between tests[​](#reuse-single-page-between-tests \"Direct link to Reuse single page between tests\")\n\nPlaywright Test creates an isolated [Page](api/class-page \"Page\") object for each test. However, if you'd like to reuse a single [Page](api/class-page \"Page\") object between multiple tests, you can create your own in [test.beforeAll()](api/class-test#test-before-all) and close it in [test.afterAll()](api/class-test#test-after-all).\n\n- TypeScript\n- JavaScript\n\n``` javascript\nimport { test, type Page } from '@playwright/test';\n\ntest.describe.configure({ mode: 'serial' });\n\nlet page: Page;\n\ntest.beforeAll(async ({ browser }) => {\n  page = await browser.newPage();\n});\n\ntest.afterAll(async () => {\n  await page.close();\n});\n\ntest('runs first', async () => {\n  await page.goto('https://playwright.dev/');\n});\n\ntest('runs second', async () => {\n  await page.getByText('Get Started').click();\n});\n```\n\n``` javascript\n// @ts-check\n\nconst { test } = require('@playwright/test');\n\ntest.describe.configure({ mode: 'serial' });\n\n/** @type {import('@playwright/test').Page} */\nlet page;\n\ntest.beforeAll(async ({ browser }) => {\n  page = await browser.newPage();\n});\n\ntest.afterAll(async () => {\n  await page.close();\n});\n\ntest('runs first', async () => {\n  await page.goto('https://playwright.dev/');\n});\n\ntest('runs second', async () => {\n  await page.getByText('Get Started').click();\n});\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/test-retries](https://playwright.dev/docs/test-retries)"
- name: Route
  id: api/class-route
  summary: Whenever a network route is set up with page.route() or browserContext.route(), the Route object allows to handle the route
  description: "# Route\n\nWhenever a network route is set up with [page.route()](class-page#page-route) or [browserContext.route()](class-browsercontext#browser-context-route), the `Route` object allows to handle the route.\n\nLearn more about [networking](../network).\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### abort[​](#route-abort \"Direct link to abort\")\n\nAdded before v1.9\n\nAborts the route's request.\n\n**Usage**\n\n``` javascript\nawait route.abort();\nawait route.abort(errorCode);\n```\n\n**Arguments**\n\n- `errorCode` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  Optional error code. Defaults to `failed`, could be one of the following:\n\n  - `'aborted'` - An operation was aborted (due to user action)\n  - `'accessdenied'` - Permission to access a resource, other than the network, was denied\n  - `'addressunreachable'` - The IP address is unreachable. This usually means that there is no route to the specified host or network.\n  - `'blockedbyclient'` - The client chose to block the request.\n  - `'blockedbyresponse'` - The request failed because the response was delivered along with requirements which are not met ('X-Frame-Options' and 'Content-Security-Policy' ancestor checks, for instance).\n  - `'connectionaborted'` - A connection timed out as a result of not receiving an ACK for data sent.\n  - `'connectionclosed'` - A connection was closed (corresponding to a TCP FIN).\n  - `'connectionfailed'` - A connection attempt failed.\n  - `'connectionrefused'` - A connection attempt was refused.\n  - `'connectionreset'` - A connection was reset (corresponding to a TCP RST).\n  - `'internetdisconnected'` - The Internet connection has been lost.\n  - `'namenotresolved'` - The host name could not be resolved.\n  - `'timedout'` - An operation timed out.\n  - `'failed'` - A generic failure occurred.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### continue[​](#route-continue \"Direct link to continue\")\n\nAdded before v1.9\n\nContinues route's request with optional overrides.\n\n**Usage**\n\n``` javascript\nawait page.route('**/*', async (route, request) => {\n  // Override headers\n  const headers = {\n    ...request.headers(),\n    foo: 'foo-value', // set \"foo\" header\n    bar: undefined, // remove \"bar\" header\n  };\n  await route.continue({ headers });\n});\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `headers` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    If set changes the request HTTP headers. Header values will be converted to a string.\n\n  - `method` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    If set changes the request method (e.g. GET or POST).\n\n  - `postData` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\") \\| [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\") *(optional)*\n\n    If set changes the post data of request.\n\n  - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    If set changes the request URL. New URL must have same protocol as original one.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n**Details**\n\nNote that any overrides such as `url` or `headers` only apply to the request being routed. If this request results in a redirect, overrides will not be applied to the new redirected request. If you want to propagate a header through redirects, use the combination of [route.fetch()](class-route#route-fetch) and [route.fulfill()](class-route#route-fulfill) instead.\n\n### fallback[​](#route-fallback \"Direct link to fallback\")\n\nWhen several routes match the given pattern, they run in the order opposite to their registration. That way the last registered route can always override all the previous ones. In the example below, request will be handled by the bottom-most handler first, then it'll fall back to the previous one and in the end will be aborted by the first registered route.\n\n**Usage**\n\n``` javascript\nawait page.route('**/*', async route => {\n  // Runs last.\n  await route.abort();\n});\nawait page.route('**/*', async route => {\n  // Runs second.\n  await route.fallback();\n});\nawait page.route('**/*', async route => {\n  // Runs first.\n  await route.fallback();\n});\n```\n\nRegistering multiple routes is useful when you want separate handlers to handle different kinds of requests, for example API calls vs page resources or GET requests vs POST requests as in the example below.\n\n``` javascript\n// Handle GET requests.\nawait page.route('**/*', async route => {\n  if (route.request().method() !== 'GET') {\n    await route.fallback();\n    return;\n  }\n  // Handling GET only.\n  // ...\n});\n\n// Handle POST requests.\nawait page.route('**/*', async route => {\n  if (route.request().method() !== 'POST') {\n    await route.fallback();\n    return;\n  }\n  // Handling POST only.\n  // ...\n});\n```\n\nOne can also modify request while falling back to the subsequent handler, that way intermediate route handler can modify url, method, headers and postData of the request.\n\n``` javascript\nawait page.route('**/*', async (route, request) => {\n  // Override headers\n  const headers = {\n    ...request.headers(),\n    foo: 'foo-value', // set \"foo\" header\n    bar: undefined, // remove \"bar\" header\n  };\n  await route.fallback({ headers });\n});\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `headers` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    If set changes the request HTTP headers. Header values will be converted to a string.\n\n  - `method` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    If set changes the request method (e.g. GET or POST).\n\n  - `postData` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\") \\| [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\") *(optional)*\n\n    If set changes the post data of request.\n\n  - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    If set changes the request URL. New URL must have same protocol as original one. Changing the URL won't affect the route matching, all the routes are matched using the original request URL.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### fetch[​](#route-fetch \"Direct link to fetch\")\n\nPerforms the request and fetches result without fulfilling it, so that the response could be modified and then fulfilled.\n\n**Usage**\n\n``` javascript\nawait page.route('https://dog.ceo/api/breeds/list/all', async route => {\n  const response = await route.fetch();\n  const json = await response.json();\n  json.message['big_red_dog'] = [];\n  await route.fulfill({ response, json });\n});\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `headers` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    If set changes the request HTTP headers. Header values will be converted to a string.\n\n  - `maxRedirects` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.\n\n  - `maxRetries` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.\n\n  - `method` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    If set changes the request method (e.g. GET or POST).\n\n  - `postData` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\") \\| [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\") *(optional)*\n\n    Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.\n\n  - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    If set changes the request URL. New URL must have same protocol as original one.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[APIResponse](class-apiresponse \"APIResponse\")\\>\n\n**Details**\n\nNote that `headers` option will apply to the fetched request as well as any redirects initiated by it. If you want to only apply `headers` to the original request, but not to redirects, look into [route.continue()](class-route#route-continue) instead.\n\n### fulfill[​](#route-fulfill \"Direct link to fulfill\")\n\nAdded before v1.9\n\nFulfills route's request with given response.\n\n**Usage**\n\nAn example of fulfilling all requests with 404 responses:\n\n``` javascript\nawait page.route('**/*', async route => {\n  await route.fulfill({\n    status: 404,\n    contentType: 'text/plain',\n    body: 'Not Found!'\n  });\n});\n```\n\nAn example of serving static file:\n\n``` javascript\nawait page.route('**/xhr_endpoint', route => route.fulfill({ path: 'mock_data.json' }));\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `body` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\") *(optional)*\n\n    Response body.\n\n  - `contentType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    If set, equals to setting `Content-Type` response header.\n\n  - `headers` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    Response headers. Header values will be converted to a string.\n\n  - `json` [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\") *(optional)*\n\n    JSON response. This method will set the content type to `application/json` if not set.\n\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    File path to respond with. The content type will be inferred from file extension. If `path` is a relative path, then it is resolved relative to the current working directory.\n\n  - `response` [APIResponse](class-apiresponse \"APIResponse\") *(optional)*\n\n    [APIResponse](class-apiresponse \"APIResponse\") to fulfill route's request with. Individual fields of the response (such as headers) can be overridden using fulfill options.\n\n  - `status` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Response status code, defaults to `200`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### request[​](#route-request \"Direct link to request\")\n\nAdded before v1.9\n\nA request to be routed.\n\n**Usage**\n\n``` javascript\nroute.request();\n```\n\n**Returns**\n\n- [Request](class-request \"Request\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-route](https://playwright.dev/docs/api/class-route)"
- name: route.abort
  id: api/class-route#route-abort
  summary: Aborts the route's request
  belongs_to: Route
  description: |-
    ### abort[​](#route-abort "Direct link to abort")

    Added before v1.9

    Aborts the route's request.

    **Usage**

    ``` javascript
    await route.abort();
    await route.abort(errorCode);
    ```

    **Arguments**

    - `errorCode` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      Optional error code. Defaults to `failed`, could be one of the following:

      - `'aborted'` - An operation was aborted (due to user action)
      - `'accessdenied'` - Permission to access a resource, other than the network, was denied
      - `'addressunreachable'` - The IP address is unreachable. This usually means that there is no route to the specified host or network.
      - `'blockedbyclient'` - The client chose to block the request.
      - `'blockedbyresponse'` - The request failed because the response was delivered along with requirements which are not met ('X-Frame-Options' and 'Content-Security-Policy' ancestor checks, for instance).
      - `'connectionaborted'` - A connection timed out as a result of not receiving an ACK for data sent.
      - `'connectionclosed'` - A connection was closed (corresponding to a TCP FIN).
      - `'connectionfailed'` - A connection attempt failed.
      - `'connectionrefused'` - A connection attempt was refused.
      - `'connectionreset'` - A connection was reset (corresponding to a TCP RST).
      - `'internetdisconnected'` - The Internet connection has been lost.
      - `'namenotresolved'` - The host name could not be resolved.
      - `'timedout'` - An operation timed out.
      - `'failed'` - A generic failure occurred.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>
- name: route.continue
  id: api/class-route#route-continue
  summary: Continues route's request with optional overrides
  belongs_to: Route
  description: |-
    ### continue[​](#route-continue "Direct link to continue")

    Added before v1.9

    Continues route's request with optional overrides.

    **Usage**

    ``` javascript
    await page.route('**/*', async (route, request) => {
      // Override headers
      const headers = {
        ...request.headers(),
        foo: 'foo-value', // set "foo" header
        bar: undefined, // remove "bar" header
      };
      await route.continue({ headers });
    });
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `headers`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        If set changes the request HTTP headers. Header values will be converted to a string.

      - `method` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        If set changes the request method (e.g. GET or POST).

      - `postData`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer") \| [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") *(optional)*

        If set changes the post data of request.

      - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        If set changes the request URL. New URL must have same protocol as original one.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    **Details**

    Note that any overrides such as `url` or `headers` only apply to the request being routed. If this request results in a redirect, overrides will not be applied to the new redirected request. If you want to propagate a header through redirects, use the combination of [route.fetch()](class-route#route-fetch) and [route.fulfill()](class-route#route-fulfill) instead.
- name: route.fallback
  id: api/class-route#route-fallback
  summary: When several routes match the given pattern, they run in the order opposite to their registration
  belongs_to: Route
  description: |-
    ### fallback[​](#route-fallback "Direct link to fallback")

    When several routes match the given pattern, they run in the order opposite to their registration. That way the last registered route can always override all the previous ones. In the example below, request will be handled by the bottom-most handler first, then it'll fall back to the previous one and in the end will be aborted by the first registered route.

    **Usage**

    ``` javascript
    await page.route('**/*', async route => {
      // Runs last.
      await route.abort();
    });
    await page.route('**/*', async route => {
      // Runs second.
      await route.fallback();
    });
    await page.route('**/*', async route => {
      // Runs first.
      await route.fallback();
    });
    ```

    Registering multiple routes is useful when you want separate handlers to handle different kinds of requests, for example API calls vs page resources or GET requests vs POST requests as in the example below.

    ``` javascript
    // Handle GET requests.
    await page.route('**/*', async route => {
      if (route.request().method() !== 'GET') {
        await route.fallback();
        return;
      }
      // Handling GET only.
      // ...
    });

    // Handle POST requests.
    await page.route('**/*', async route => {
      if (route.request().method() !== 'POST') {
        await route.fallback();
        return;
      }
      // Handling POST only.
      // ...
    });
    ```

    One can also modify request while falling back to the subsequent handler, that way intermediate route handler can modify url, method, headers and postData of the request.

    ``` javascript
    await page.route('**/*', async (route, request) => {
      // Override headers
      const headers = {
        ...request.headers(),
        foo: 'foo-value', // set "foo" header
        bar: undefined, // remove "bar" header
      };
      await route.fallback({ headers });
    });
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `headers`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        If set changes the request HTTP headers. Header values will be converted to a string.

      - `method` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        If set changes the request method (e.g. GET or POST).

      - `postData`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer") \| [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") *(optional)*

        If set changes the post data of request.

      - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        If set changes the request URL. New URL must have same protocol as original one. Changing the URL won't affect the route matching, all the routes are matched using the original request URL.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: route.fetch
  id: api/class-route#route-fetch
  summary: Performs the request and fetches result without fulfilling it, so that the response could be modified and then fulfilled
  belongs_to: Route
  description: |-
    ### fetch[​](#route-fetch "Direct link to fetch")

    Performs the request and fetches result without fulfilling it, so that the response could be modified and then fulfilled.

    **Usage**

    ``` javascript
    await page.route('https://dog.ceo/api/breeds/list/all', async route => {
      const response = await route.fetch();
      const json = await response.json();
      json.message['big_red_dog'] = [];
      await route.fulfill({ response, json });
    });
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `headers`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        If set changes the request HTTP headers. Header values will be converted to a string.

      - `maxRedirects` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded. Defaults to `20`. Pass `0` to not follow redirects.

      - `maxRetries` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.

      - `method` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        If set changes the request method (e.g. GET or POST).

      - `postData`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer") \| [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") *(optional)*

        Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be set to `application/octet-stream` if not explicitly set.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.

      - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        If set changes the request URL. New URL must have same protocol as original one.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[APIResponse](class-apiresponse "APIResponse")\>

    **Details**

    Note that `headers` option will apply to the fetched request as well as any redirects initiated by it. If you want to only apply `headers` to the original request, but not to redirects, look into [route.continue()](class-route#route-continue) instead.
- name: route.fulfill
  id: api/class-route#route-fulfill
  summary: Fulfills route's request with given response
  belongs_to: Route
  description: |-
    ### fulfill[​](#route-fulfill "Direct link to fulfill")

    Added before v1.9

    Fulfills route's request with given response.

    **Usage**

    An example of fulfilling all requests with 404 responses:

    ``` javascript
    await page.route('**/*', async route => {
      await route.fulfill({
        status: 404,
        contentType: 'text/plain',
        body: 'Not Found!'
      });
    });
    ```

    An example of serving static file:

    ``` javascript
    await page.route('**/xhr_endpoint', route => route.fulfill({ path: 'mock_data.json' }));
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `body`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer") *(optional)*

        Response body.

      - `contentType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        If set, equals to setting `Content-Type` response header.

      - `headers`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        Response headers. Header values will be converted to a string.

      - `json` [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") *(optional)*

        JSON response. This method will set the content type to `application/json` if not set.

      - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        File path to respond with. The content type will be inferred from file extension. If `path` is a relative path, then it is resolved relative to the current working directory.

      - `response` [APIResponse](class-apiresponse "APIResponse") *(optional)*

        [APIResponse](class-apiresponse "APIResponse") to fulfill route's request with. Individual fields of the response (such as headers) can be overridden using fulfill options.

      - `status` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Response status code, defaults to `200`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: route.request
  id: api/class-route#route-request
  summary: A request to be routed
  belongs_to: Route
  description: "### request[​](#route-request \"Direct link to request\")\n\nAdded before v1.9\n\nA request to be routed.\n\n**Usage**\n\n``` javascript\nroute.request();\n```\n\n**Returns**\n\n- [Request](class-request \"Request\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-route](https://playwright.dev/docs/api/class-route)"
- name: Running and debugging tests
  id: running-tests
  summary: With Playwright you can run a single test, a set of tests or all tests
  description: "# Running and debugging tests\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nWith Playwright you can run a single test, a set of tests or all tests. Tests can be run on one browser or multiple browsers by using the `--project` flag. Tests are run in parallel by default and are run in a headless manner, meaning no browser window will be opened while running the tests and results will be seen in the terminal. However, you can run tests in headed mode by using the `--headed` CLI argument, or you can run your tests in [UI mode](test-ui-mode) by using the `--ui` flag. See a full trace of your tests complete with watch mode, time travel debugging and more.\n\n**You will learn**\n\n- [How to run tests from the command line](running-tests#command-line)\n- [How to debug tests](running-tests#debugging-tests)\n- [How to open the HTML test reporter](running-tests#test-reports)\n\n## Running tests[​](#running-tests \"Direct link to Running tests\")\n\n### Command line[​](#command-line \"Direct link to Command line\")\n\nYou can run your tests with the `playwright test` command. This will run your tests on all browsers as configured in the `playwright.config` file. Tests run in headless mode by default meaning no browser window will be opened while running the tests and results will be seen in the terminal.\n\n``` javascript\nnpx playwright test\n```\n\n### Run tests in UI mode[​](#run-tests-in-ui-mode \"Direct link to Run tests in UI mode\")\n\nWe highly recommend running your tests with [UI Mode](test-ui-mode) for a better developer experience where you can easily walk through each step of the test and visually see what was happening before, during and after each step. UI mode also comes with many other features such as the locator picker, watch mode and more.\n\n``` javascript\nnpx playwright test --ui\n```\n\nCheck out or [detailed guide on UI Mode](test-ui-mode) to learn more about it's features.\n\n### Run tests in headed mode[​](#run-tests-in-headed-mode \"Direct link to Run tests in headed mode\")\n\nTo run your tests in headed mode, use the `--headed` flag. This will give you the ability to visually see how Playwright interacts with the website.\n\n``` javascript\nnpx playwright test --headed\n```\n\n### Run tests on different browsers[​](#run-tests-on-different-browsers \"Direct link to Run tests on different browsers\")\n\nTo specify which browser you would like to run your tests on, use the `--project` flag followed by the name of the browser.\n\n``` javascript\nnpx playwright test --project webkit\n```\n\nTo specify multiple browsers to run your tests on, use the `--project` flag multiple times followed by the name of each browser.\n\n``` javascript\nnpx playwright test --project webkit --project firefox\n```\n\n### Run specific tests[​](#run-specific-tests \"Direct link to Run specific tests\")\n\nTo run a single test file, pass in the name of the test file that you want to run.\n\n``` javascript\nnpx playwright test landing-page.spec.ts\n```\n\nTo run a set of test files from different directories, pass in the names of the directories that you want to run the tests in.\n\n``` javascript\nnpx playwright test tests/todo-page/ tests/landing-page/\n```\n\nTo run files that have `landing` or `login` in the file name, simply pass in these keywords to the CLI.\n\n``` javascript\nnpx playwright test landing login\n```\n\nTo run a test with a specific title, use the `-g` flag followed by the title of the test.\n\n``` javascript\nnpx playwright test -g \"add a todo item\"\n```\n\n### Run last failed tests[​](#run-last-failed-tests \"Direct link to Run last failed tests\")\n\nTo run only the tests that failed in the last test run, first run your tests and then run them again with the `--last-failed` flag.\n\n``` javascript\nnpx playwright test --last-failed\n```\n\n### Run tests in VS Code[​](#run-tests-in-vs-code \"Direct link to Run tests in VS Code\")\n\nTests can be run right from VS Code using the [VS Code extension](https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright). Once installed you can simply click the green triangle next to the test you want to run or run all tests from the testing sidebar. Check out our [Getting Started with VS Code](getting-started-vscode#running-tests) guide for more details.\n\n## Debugging tests[​](#debugging-tests \"Direct link to Debugging tests\")\n\nSince Playwright runs in Node.js, you can debug it with your debugger of choice e.g. using `console.log` or inside your IDE or directly in VS Code with the [VS Code Extension](getting-started-vscode). Playwright comes with [UI Mode](test-ui-mode), where you can easily walk through each step of the test, see logs, errors, network requests, inspect the DOM snapshot and more. You can also use the [Playwright Inspector](debug#playwright-inspector), which allows you to step through Playwright API calls, see their debug logs and explore [locators](locators).\n\n### Debug tests in UI mode[​](#debug-tests-in-ui-mode \"Direct link to Debug tests in UI mode\")\n\nWe highly recommend debugging your tests with [UI Mode](test-ui-mode) for a better developer experience where you can easily walk through each step of the test and visually see what was happening before, during and after each step. UI mode also comes with many other features such as the locator picker, watch mode and more.\n\n``` javascript\nnpx playwright test --ui\n```\n\nWhile debugging you can use the Pick Locator button to select an element on the page and see the locator that Playwright would use to find that element. You can also edit the locator in the locator playground and see it highlighting live on the Browser window. Use the Copy Locator button to copy the locator to your clipboard and then paste it into you test.\n\nCheck out our [detailed guide on UI Mode](test-ui-mode) to learn more about it's features.\n\n### Debug tests with the Playwright Inspector[​](#debug-tests-with-the-playwright-inspector \"Direct link to Debug tests with the Playwright Inspector\")\n\nTo debug all tests, run the Playwright test command followed by the `--debug` flag.\n\n``` javascript\nnpx playwright test --debug\n```\n\nThis command will open up a Browser window as well as the Playwright Inspector. You can use the step over button at the top of the inspector to step through your test. Or, press the play button to run your test from start to finish. Once the test has finished, the browser window will close.\n\nTo debug one test file, run the Playwright test command with the name of the test file that you want to debug followed by the `--debug` flag.\n\n``` javascript\nnpx playwright test example.spec.ts --debug\n```\n\nTo debug a specific test from the line number where the `test(..` is defined, add a colon followed by the line number at the end of the test file name, followed by the `--debug` flag.\n\n``` javascript\nnpx playwright test example.spec.ts:10 --debug\n```\n\nWhile debugging you can use the Pick Locator button to select an element on the page and see the locator that Playwright would use to find that element. You can also edit the locator and see it highlighting live on the Browser window. Use the Copy Locator button to copy the locator to your clipboard and then paste it into your test.\n\nCheck out our [debugging guide](debug) to learn more about debugging with the [VS Code debugger](debug#vs-code-debugger), UI Mode and the [Playwright Inspector](debug#playwright-inspector) as well as debugging with [Browser Developer tools](debug#browser-developer-tools).\n\n## Test reports[​](#test-reports \"Direct link to Test reports\")\n\nThe [HTML Reporter](test-reporters#html-reporter) shows you a full report of your tests allowing you to filter the report by browsers, passed tests, failed tests, skipped tests and flaky tests. By default, the HTML report is opened automatically if some of the tests failed, otherwise you can open it with the following command.\n\n``` javascript\nnpx playwright show-report\n```\n\nYou can filter and search for tests as well as click on each test to see the tests errors and explore each step of the test.\n\n## What's next[​](#whats-next \"Direct link to What's next\")\n\n- [Generate tests with Codegen](codegen-intro)\n- [See a trace of your tests](trace-viewer-intro)\n- [Explore all the features of UI Mode](test-ui-mode)\n- [Run your tests on CI with GitHub Actions](ci-intro)\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/running-tests](https://playwright.dev/docs/running-tests)"
- name: Screenshots
  id: screenshots
  summary: Screenshots API accepts many parameters for image format, clip area, quality, etc
  description: "# Screenshots\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nHere is a quick way to capture a screenshot and save it into a file:\n\n``` javascript\nawait page.screenshot({ path: 'screenshot.png' });\n```\n\n[Screenshots API](api/class-page#page-screenshot) accepts many parameters for image format, clip area, quality, etc. Make sure to check them out.\n\n## Full page screenshots[​](#full-page-screenshots \"Direct link to Full page screenshots\")\n\nFull page screenshot is a screenshot of a full scrollable page, as if you had a very tall screen and the page could fit it entirely.\n\n``` javascript\nawait page.screenshot({ path: 'screenshot.png', fullPage: true });\n```\n\n## Capture into buffer[​](#capture-into-buffer \"Direct link to Capture into buffer\")\n\nRather than writing into a file, you can get a buffer with the image and post-process it or pass it to a third party pixel diff facility.\n\n``` javascript\nconst buffer = await page.screenshot();\nconsole.log(buffer.toString('base64'));\n```\n\n## Element screenshot[​](#element-screenshot \"Direct link to Element screenshot\")\n\nSometimes it is useful to take a screenshot of a single element.\n\n``` javascript\nawait page.locator('.header').screenshot({ path: 'screenshot.png' });\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/screenshots](https://playwright.dev/docs/screenshots)"
- name: Selectors
  id: api/class-selectors
  summary: Selectors can be used to install custom selector engines
  description: "# Selectors\n\nSelectors can be used to install custom selector engines. See [extensibility](../extensibility) for more information.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### register[​](#selectors-register \"Direct link to register\")\n\nAdded before v1.9\n\nSelectors must be registered before creating the page.\n\n**Usage**\n\nAn example of registering selector engine that queries elements based on a tag name:\n\n``` javascript\nconst { selectors, firefox } = require('@playwright/test');  // Or 'chromium' or 'webkit'.\n\n(async () => {\n  // Must be a function that evaluates to a selector engine instance.\n  const createTagNameEngine = () => ({\n    // Returns the first element matching given selector in the root's subtree.\n    query(root, selector) {\n      return root.querySelector(selector);\n    },\n\n    // Returns all elements matching given selector in the root's subtree.\n    queryAll(root, selector) {\n      return Array.from(root.querySelectorAll(selector));\n    }\n  });\n\n  // Register the engine. Selectors will be prefixed with \"tag=\".\n  await selectors.register('tag', createTagNameEngine);\n\n  const browser = await firefox.launch();\n  const page = await browser.newPage();\n  await page.setContent(`<div><button>Click me</button></div>`);\n\n  // Use the selector prefixed with its name.\n  const button = page.locator('tag=button');\n  // We can combine it with built-in locators.\n  await page.locator('tag=div').getByText('Click me').click();\n  // Can use it in any methods supporting selectors.\n  const buttonCount = await page.locator('tag=button').count();\n\n  await browser.close();\n})();\n```\n\n**Arguments**\n\n- `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Name that is used in selectors as a prefix, e.g. `{name: 'foo'}` enables `foo=myselectorbody` selectors. May only contain `[a-zA-Z0-9_]` characters.\n\n- `script` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Path to the JavaScript file. If `path` is a relative path, then it is resolved relative to the current working directory. Optional.\n\n  - `content` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Raw script content. Optional.\n\n  Script that evaluates to a selector engine instance. The script is evaluated in the page context.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `contentScript` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to run this selector engine in isolated JavaScript environment. This environment has access to the same DOM, but not any JavaScript objects from the frame's scripts. Defaults to `false`. Note that running as a content script is not guaranteed when this engine is used together with other registered engines.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### setTestIdAttribute[​](#selectors-set-test-id-attribute \"Direct link to setTestIdAttribute\")\n\nDefines custom attribute name to be used in [page.getByTestId()](class-page#page-get-by-test-id). `data-testid` is used by default.\n\n**Usage**\n\n``` javascript\nselectors.setTestIdAttribute(attributeName);\n```\n\n**Arguments**\n\n- `attributeName` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Test id attribute name.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-selectors](https://playwright.dev/docs/api/class-selectors)"
- name: selectors.register
  id: api/class-selectors#selectors-register
  summary: Selectors must be registered before creating the page
  belongs_to: Selectors
  description: |-
    ### register[​](#selectors-register "Direct link to register")

    Added before v1.9

    Selectors must be registered before creating the page.

    **Usage**

    An example of registering selector engine that queries elements based on a tag name:

    ``` javascript
    const { selectors, firefox } = require('@playwright/test');  // Or 'chromium' or 'webkit'.

    (async () => {
      // Must be a function that evaluates to a selector engine instance.
      const createTagNameEngine = () => ({
        // Returns the first element matching given selector in the root's subtree.
        query(root, selector) {
          return root.querySelector(selector);
        },

        // Returns all elements matching given selector in the root's subtree.
        queryAll(root, selector) {
          return Array.from(root.querySelectorAll(selector));
        }
      });

      // Register the engine. Selectors will be prefixed with "tag=".
      await selectors.register('tag', createTagNameEngine);

      const browser = await firefox.launch();
      const page = await browser.newPage();
      await page.setContent(`<div><button>Click me</button></div>`);

      // Use the selector prefixed with its name.
      const button = page.locator('tag=button');
      // We can combine it with built-in locators.
      await page.locator('tag=div').getByText('Click me').click();
      // Can use it in any methods supporting selectors.
      const buttonCount = await page.locator('tag=button').count();

      await browser.close();
    })();
    ```

    **Arguments**

    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Name that is used in selectors as a prefix, e.g. `{name: 'foo'}` enables `foo=myselectorbody` selectors. May only contain `[a-zA-Z0-9_]` characters.

    - `script`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

      - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Path to the JavaScript file. If `path` is a relative path, then it is resolved relative to the current working directory. Optional.

      - `content` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Raw script content. Optional.

      Script that evaluates to a selector engine instance. The script is evaluated in the page context.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `contentScript` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to run this selector engine in isolated JavaScript environment. This environment has access to the same DOM, but not any JavaScript objects from the frame's scripts. Defaults to `false`. Note that running as a content script is not guaranteed when this engine is used together with other registered engines.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>
- name: selectors.setTestIdAttribute
  id: api/class-selectors#selectors-set-test-id-attribute
  summary: Defines custom attribute name to be used in page.getByTestId()
  belongs_to: Selectors
  description: "### setTestIdAttribute[​](#selectors-set-test-id-attribute \"Direct link to setTestIdAttribute\")\n\nDefines custom attribute name to be used in [page.getByTestId()](class-page#page-get-by-test-id). `data-testid` is used by default.\n\n**Usage**\n\n``` javascript\nselectors.setTestIdAttribute(attributeName);\n```\n\n**Arguments**\n\n- `attributeName` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Test id attribute name.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-selectors](https://playwright.dev/docs/api/class-selectors)"
- name: Selenium Grid (experimental)
  id: selenium-grid
  summary: Playwright can connect to Selenium Grid Hub that runs Selenium 4 to launch Google Chrome or Microsoft Edge browser, instead of running browser on the local machine
  description: "# Selenium Grid (experimental)\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright can connect to [Selenium Grid Hub](https://www.selenium.dev/documentation/grid/) that runs Selenium 4 to launch **Google Chrome** or **Microsoft Edge** browser, instead of running browser on the local machine. Note this feature is **experimental** and is prioritized accordingly.\n\n> warning\n>\n> There is a risk of Playwright integration with Selenium Grid Hub breaking in the future. Make sure you weight risks against benefits before using it.  \n>   \n>\n> More details Internally, Playwright connects to the browser using [Chrome DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/) websocket. Selenium 4 currently exposes this capability. However, this [might not be the case in the future](https://github.com/SeleniumHQ/selenium/issues/11590#issuecomment-1436113950). If Selenium drops this capability, Playwright will stop working with it.\n\nBefore connecting Playwright to your Selenium Grid, make sure that grid works with [Selenium WebDriver](https://www.selenium.dev/documentation/webdriver/). For example, run [one of the examples](https://github.com/SeleniumHQ/selenium/tree/trunk/javascript/node/selenium-webdriver/example) and pass `SELENIUM_REMOTE_URL` environment variable. If webdriver example does not work, look for any errors at your Selenium hub/node/standalone output and search [Selenium issues](https://github.com/SeleniumHQ/selenium/issues) for a possible solution.\n\n## Starting Selenium Grid[​](#starting-selenium-grid \"Direct link to Starting Selenium Grid\")\n\nIf you run distributed Selenium Grid, Playwright needs selenium nodes to be registered with an accessible address, so that it could connect to the browsers. To make sure it works as expected, set `SE_NODE_GRID_URL` environment variable pointing to the hub when running selenium nodes.\n\n``` javascript\n# Start selenium node\nSE_NODE_GRID_URL=\"http://<selenium-hub-ip>:4444\" java -jar selenium-server-<version>.jar node\n```\n\n## Connecting Playwright to Selenium Grid[​](#connecting-playwright-to-selenium-grid \"Direct link to Connecting Playwright to Selenium Grid\")\n\nTo connect Playwright to **Selenium Grid 4**, set `SELENIUM_REMOTE_URL` environment variable pointing to your Selenium Grid Hub. Note that this only works for Google Chrome and Microsoft Edge.\n\n``` javascript\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 npx playwright test\n```\n\nYou don't have to change your code, just use your testing harness or [browserType.launch()](api/class-browsertype#browser-type-launch) as usual.\n\n### Passing additional capabilities[​](#passing-additional-capabilities \"Direct link to Passing additional capabilities\")\n\nIf your grid requires additional capabilities to be set (for example, you use an external service), you can set `SELENIUM_REMOTE_CAPABILITIES` environment variable to provide JSON-serialized capabilities.\n\n``` javascript\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_CAPABILITIES=\"{'mygrid:options':{os:'windows',username:'John',password:'secure'}}\" npx playwright test\n```\n\n### Passing additional headers[​](#passing-additional-headers \"Direct link to Passing additional headers\")\n\nIf your grid requires additional headers to be set (for example, you should provide authorization token to use browsers in your cloud), you can set `SELENIUM_REMOTE_HEADERS` environment variable to provide JSON-serialized headers.\n\n``` javascript\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_HEADERS=\"{'Authorization':'OAuth 12345'}\" npx playwright test\n```\n\n### Detailed logs[​](#detailed-logs \"Direct link to Detailed logs\")\n\nRun with `DEBUG=pw:browser*` environment variable to see how Playwright is connecting to Selenium Grid.\n\n``` javascript\nDEBUG=pw:browser* SELENIUM_REMOTE_URL=http://internal.grid:4444 npx playwright test\n```\n\nIf you file an issue, please include this log.\n\n## Using Selenium Docker[​](#using-selenium-docker \"Direct link to Using Selenium Docker\")\n\nOne easy way to use Selenium Grid is to run official docker containers. Read more in [selenium docker images](https://github.com/SeleniumHQ/docker-selenium) documentation. For experimental arm images, see [docker-seleniarm](https://github.com/seleniumhq-community/docker-seleniarm).\n\n### Standalone mode[​](#standalone-mode \"Direct link to Standalone mode\")\n\nHere is an example of running selenium standalone and connecting Playwright to it. Note that hub and node are on the same `localhost`, and we pass `SE_NODE_GRID_URL` environment variable pointing to it.\n\nFirst start Selenium.\n\n``` javascript\ndocker run -d -p 4444:4444 --shm-size=\"2g\" -e SE_NODE_GRID_URL=\"http://localhost:4444\" selenium/standalone-chrome:4.3.0-20220726\n\n# Alternatively for arm architecture\ndocker run -d -p 4444:4444 --shm-size=\"2g\" -e SE_NODE_GRID_URL=\"http://localhost:4444\" seleniarm/standalone-chromium:103.0\n```\n\nThen run Playwright.\n\n``` javascript\nSELENIUM_REMOTE_URL=http://localhost:4444 npx playwright test\n```\n\n### Hub and nodes mode[​](#hub-and-nodes-mode \"Direct link to Hub and nodes mode\")\n\nHere is an example of running selenium hub and a single selenium node, and connecting Playwright to the hub. Note that hub and node have different IPs, and we pass `SE_NODE_GRID_URL` environment variable pointing to the hub when starting node containers.\n\nFirst start the hub container and one or more node containers.\n\n``` javascript\ndocker run -d -p 4442-4444:4442-4444 --name selenium-hub selenium/hub:4.3.0-20220726\ndocker run -d -p 5555:5555 \\\n    --shm-size=\"2g\" \\\n    -e SE_EVENT_BUS_HOST=<selenium-hub-ip> \\\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \\\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \\\n    -e SE_NODE_GRID_URL=\"http://<selenium-hub-ip>:4444\"\n    selenium/node-chrome:4.3.0-20220726\n\n# Alternatively for arm architecture\ndocker run -d -p 4442-4444:4442-4444 --name selenium-hub seleniarm/hub:4.3.0-20220728\ndocker run -d -p 5555:5555 \\\n    --shm-size=\"2g\" \\\n    -e SE_EVENT_BUS_HOST=<selenium-hub-ip> \\\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \\\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \\\n    -e SE_NODE_GRID_URL=\"http://<selenium-hub-ip>:4444\"\n    seleniarm/node-chromium:103.0\n```\n\nThen run Playwright.\n\n``` javascript\nSELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 npx playwright test\n```\n\n## Selenium 3[​](#selenium-3 \"Direct link to Selenium 3\")\n\nInternally, Playwright connects to the browser using [Chrome DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/) websocket. Selenium 4 exposes this capability, while Selenium 3 does not.\n\nThis means that Selenium 3 is supported in a best-effort manner, where Playwright tries to connect to the grid node directly. Grid nodes must be directly accessible from the machine that runs Playwright.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/selenium-grid](https://playwright.dev/docs/selenium-grid)"
- name: Sharding
  id: test-sharding
  summary: By default, Playwright runs test files in parallel and strives for optimal utilization of CPU cores on your machine
  description: "# Sharding\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nBy default, Playwright runs test files in [parallel](test-parallel) and strives for optimal utilization of CPU cores on your machine. In order to achieve even greater parallelisation, you can further scale Playwright test execution by running tests on multiple machines simultaneously. We call this mode of operation \"sharding\". Sharding in Playwright means splitting your tests into smaller parts called \"shards\". Each shard is like a separate job that can run independently. The whole purpose is to divide your tests to speed up test runtime.\n\nWhen you shard your tests, each shard can run on its own, utilizing the available CPU cores. This helps speed up the testing process by doing tasks simultaneously.\n\nIn a CI pipeline, each shard can run as a separate job, making use of the hardware resources available in your CI pipeline, like CPU cores, to run tests faster.\n\n## Sharding tests between multiple machines[​](#sharding-tests-between-multiple-machines \"Direct link to Sharding tests between multiple machines\")\n\nTo shard the test suite, pass `--shard=x/y` to the command line. For example, to split the suite into four shards, each running one fourth of the tests:\n\n``` javascript\nnpx playwright test --shard=1/4\nnpx playwright test --shard=2/4\nnpx playwright test --shard=3/4\nnpx playwright test --shard=4/4\n```\n\nNow, if you run these shards in parallel on different jobs, your test suite completes four times faster.\n\nNote that Playwright can only shard tests that can be run in parallel. By default, this means Playwright will shard test files. Learn about other options in the [parallelism guide](test-parallel).\n\n## Merging reports from multiple shards[​](#merging-reports-from-multiple-shards \"Direct link to Merging reports from multiple shards\")\n\nIn the previous example, each test shard has its own test report. If you want to have a combined report showing all the test results from all the shards, you can merge them.\n\nStart with adding `blob` reporter to the config when running on CI:\n\n``` javascript\nexport default defineConfig({\n  testDir: './tests',\n  reporter: process.env.CI ? 'blob' : 'html',\n});\n```\n\nBlob report contains information about all the tests that were run and their results as well as all test attachments such as traces and screenshot diffs. Blob reports can be merged and converted to any other Playwright report. By default, blob report will be generated into `blob-report` directory.\n\nTo merge reports from multiple shards, put the blob report files into a single directory, for example `all-blob-reports`. Blob report names contain shard number, so they will not clash.\n\nAfterwards, run `npx playwright merge-reports` command:\n\n``` javascript\nnpx playwright merge-reports --reporter html ./all-blob-reports\n```\n\nThis will produce a standard HTML report into `playwright-report` directory.\n\n## GitHub Actions example[​](#github-actions-example \"Direct link to GitHub Actions example\")\n\nGitHub Actions supports [sharding tests between multiple jobs](https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs) using the [`jobs.<job_id>.strategy.matrix`](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix) option. The `matrix` option will run a separate job for every possible combination of the provided options.\n\nThe following example shows you how to configure a job to run your tests on four machines in parallel and then merge the reports into a single report. Don't forget to add `reporter: process.env.CI ? 'blob' : 'html',` to your `playwright.config.ts` file as in the example above.\n\n1.  First we add a `matrix` option to our job configuration with the `shardTotal: [4]` option containing the total number of shards we want to create and `shardIndex: [1, 2, 3, 4]` with an array of the shard numbers.\n2.  Then we run our Playwright tests with the `--shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}` option. This will run our test command for each shard.\n3.  Finally we upload our blob report to the GitHub Actions Artifacts. This will make the blob report available to other jobs in the workflow.\n\n``` javascript\nname: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  playwright-tests:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        shardIndex: [1, 2, 3, 4]\n        shardTotal: [4]\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-node@v4\n      with:\n        node-version: 18\n    - name: Install dependencies\n      run: npm ci\n    - name: Install Playwright browsers\n      run: npx playwright install --with-deps\n\n    - name: Run Playwright tests\n      run: npx playwright test --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}\n\n    - name: Upload blob report to GitHub Actions Artifacts\n      if: ${{ !cancelled() }}\n      uses: actions/upload-artifact@v4\n      with:\n        name: blob-report-${{ matrix.shardIndex }}\n        path: blob-report\n        retention-days: 1\n```\n\n1.  After all shards have completed, you can run a separate job that will merge the reports and produce a combined [HTML report](test-reporters#html-reporter). To ensure the execution order, we make the `merge-reports` job [depend](https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow#defining-prerequisite-jobs) on our sharded `playwright-tests` job by adding `needs: [playwright-tests]`.\n\n``` javascript\njobs:\n...\n  merge-reports:\n    # Merge reports after playwright-tests, even if some shards have failed\n    if: ${{ !cancelled() }}\n    needs: [playwright-tests]\n\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-node@v4\n      with:\n        node-version: 18\n    - name: Install dependencies\n      run: npm ci\n\n    - name: Download blob reports from GitHub Actions Artifacts\n      uses: actions/download-artifact@v4\n      with:\n        path: all-blob-reports\n        pattern: blob-report-*\n        merge-multiple: true\n\n    - name: Merge into HTML Report\n      run: npx playwright merge-reports --reporter html ./all-blob-reports\n\n    - name: Upload HTML report\n      uses: actions/upload-artifact@v4\n      with:\n        name: html-report--attempt-${{ github.run_attempt }}\n        path: playwright-report\n        retention-days: 14\n```\n\nYou can now see the reports have been merged and a combined HTML report is available in the GitHub Actions Artifacts tab.\n\n## Merge-reports CLI[​](#merge-reports-cli \"Direct link to Merge-reports CLI\")\n\n`npx playwright merge-reports path/to/blob-reports-dir` reads all blob reports from the passed directory and merges them into a single report.\n\nWhen merging reports from different OS'es you'll have to provide an explicit merge config to disambiguate which directory should be used as tests root.\n\nSupported options:\n\n- `--reporter reporter-to-use`\n\n  Which report to produce. Can be multiple reporters separated by comma.\n\n  Example:\n\n  ``` javascript\n  npx playwright merge-reports --reporter=html,github ./blob-reports\n  ```\n\n- `--config path/to/config/file`\n\n  Specifies the Playwright configuration file with output reporters. Use this option to pass additional configuration to the output reporter. This configuration file can differ from the one used during the creation of blob reports.\n\n  Example:\n\n  ``` javascript\n  npx playwright merge-reports --config=merge.config.ts ./blob-reports\n  ```\n\n  ``` javascript\n  export default {\n    testDir: 'e2e',\n    reporter: [['html', { open: 'never' }]],\n  };\n  ```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/test-sharding](https://playwright.dev/docs/test-sharding)"
- name: SnapshotAssertions
  id: api/class-snapshotassertions
  summary: Playwright provides methods for comparing page and element screenshots with expected values stored in files
  description: "# SnapshotAssertions\n\nPlaywright provides methods for comparing page and element screenshots with expected values stored in files.\n\n``` javascript\nexpect(screenshot).toMatchSnapshot('landing-page.png');\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### toMatchSnapshot(name)[​](#snapshot-assertions-to-match-snapshot-1 \"Direct link to toMatchSnapshot(name)\")\n\n> caution\n>\n> To compare screenshots, use [expect(page).toHaveScreenshot()](class-pageassertions#page-assertions-to-have-screenshot-1) instead.\n\nEnsures that passed value, either a [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") or a [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\"), matches the expected snapshot stored in the test snapshots directory.\n\n**Usage**\n\n``` javascript\n// Basic usage.\nexpect(await page.screenshot()).toMatchSnapshot('landing-page.png');\n\n// Pass options to customize the snapshot comparison and have a generated name.\nexpect(await page.screenshot()).toMatchSnapshot('landing-page.png', {\n  maxDiffPixels: 27, // allow no more than 27 different pixels.\n});\n\n// Configure image matching threshold.\nexpect(await page.screenshot()).toMatchSnapshot('landing-page.png', { threshold: 0.3 });\n\n// Bring some structure to your snapshot files by passing file path segments.\nexpect(await page.screenshot()).toMatchSnapshot(['landing', 'step2.png']);\nexpect(await page.screenshot()).toMatchSnapshot(['landing', 'step3.png']);\n```\n\nLearn more about [visual comparisons](../test-snapshots).\n\nNote that matching snapshots only work with Playwright test runner.\n\n**Arguments**\n\n- `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n  Snapshot name.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `maxDiffPixelRatio` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1`. Default is configurable with `TestConfig.expect`. Unset by default.\n\n  - `maxDiffPixels` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable amount of pixels that could be different. Default is configurable with `TestConfig.expect`. Unset by default.\n\n  - `threshold` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable perceived color difference in the [YIQ color space](https://en.wikipedia.org/wiki/YIQ) between the same pixel in compared images, between zero (strict) and one (lax), default is configurable with `TestConfig.expect`. Defaults to `0.2`.\n\n### toMatchSnapshot()[​](#snapshot-assertions-to-match-snapshot-2 \"Direct link to toMatchSnapshot()\")\n\n> caution\n>\n> To compare screenshots, use [expect(page).toHaveScreenshot()](class-pageassertions#page-assertions-to-have-screenshot-2) instead.\n\nEnsures that passed value, either a [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") or a [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\"), matches the expected snapshot stored in the test snapshots directory.\n\n**Usage**\n\n``` javascript\n// Basic usage and the file name is derived from the test name.\nexpect(await page.screenshot()).toMatchSnapshot();\n\n// Pass options to customize the snapshot comparison and have a generated name.\nexpect(await page.screenshot()).toMatchSnapshot({\n  maxDiffPixels: 27, // allow no more than 27 different pixels.\n});\n\n// Configure image matching threshold and snapshot name.\nexpect(await page.screenshot()).toMatchSnapshot({\n  name: 'landing-page.png',\n  threshold: 0.3,\n});\n```\n\nLearn more about [visual comparisons](../test-snapshots).\n\nNote that matching snapshots only work with Playwright test runner.\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `maxDiffPixelRatio` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1`. Default is configurable with `TestConfig.expect`. Unset by default.\n\n  - `maxDiffPixels` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable amount of pixels that could be different. Default is configurable with `TestConfig.expect`. Unset by default.\n\n  - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    Snapshot name. If not passed, the test name and ordinals are used when called multiple times.\n\n  - `threshold` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable perceived color difference in the [YIQ color space](https://en.wikipedia.org/wiki/YIQ) between the same pixel in compared images, between zero (strict) and one (lax), default is configurable with `TestConfig.expect`. Defaults to `0.2`.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-snapshotassertions](https://playwright.dev/docs/api/class-snapshotassertions)"
- name: snapshotAssertions.toMatchSnapshot()
  id: api/class-snapshotassertions#snapshot-assertions-to-match-snapshot-2
  summary: To compare screenshots, use expect(page).toHaveScreenshot() instead
  belongs_to: SnapshotAssertions
  description: "### toMatchSnapshot()[​](#snapshot-assertions-to-match-snapshot-2 \"Direct link to toMatchSnapshot()\")\n\n> caution\n>\n> To compare screenshots, use [expect(page).toHaveScreenshot()](class-pageassertions#page-assertions-to-have-screenshot-2) instead.\n\nEnsures that passed value, either a [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") or a [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\"), matches the expected snapshot stored in the test snapshots directory.\n\n**Usage**\n\n``` javascript\n// Basic usage and the file name is derived from the test name.\nexpect(await page.screenshot()).toMatchSnapshot();\n\n// Pass options to customize the snapshot comparison and have a generated name.\nexpect(await page.screenshot()).toMatchSnapshot({\n  maxDiffPixels: 27, // allow no more than 27 different pixels.\n});\n\n// Configure image matching threshold and snapshot name.\nexpect(await page.screenshot()).toMatchSnapshot({\n  name: 'landing-page.png',\n  threshold: 0.3,\n});\n```\n\nLearn more about [visual comparisons](../test-snapshots).\n\nNote that matching snapshots only work with Playwright test runner.\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `maxDiffPixelRatio` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1`. Default is configurable with `TestConfig.expect`. Unset by default.\n\n  - `maxDiffPixels` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable amount of pixels that could be different. Default is configurable with `TestConfig.expect`. Unset by default.\n\n  - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    Snapshot name. If not passed, the test name and ordinals are used when called multiple times.\n\n  - `threshold` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    An acceptable perceived color difference in the [YIQ color space](https://en.wikipedia.org/wiki/YIQ) between the same pixel in compared images, between zero (strict) and one (lax), default is configurable with `TestConfig.expect`. Defaults to `0.2`.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-snapshotassertions](https://playwright.dev/docs/api/class-snapshotassertions)"
- name: snapshotAssertions.toMatchSnapshot(name)
  id: api/class-snapshotassertions#snapshot-assertions-to-match-snapshot-1
  summary: To compare screenshots, use expect(page).toHaveScreenshot() instead
  belongs_to: SnapshotAssertions
  description: |-
    ### toMatchSnapshot(name)[​](#snapshot-assertions-to-match-snapshot-1 "Direct link to toMatchSnapshot(name)")

    > caution
    >
    > To compare screenshots, use [expect(page).toHaveScreenshot()](class-pageassertions#page-assertions-to-have-screenshot-1) instead.

    Ensures that passed value, either a [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") or a [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer"), matches the expected snapshot stored in the test snapshots directory.

    **Usage**

    ``` javascript
    // Basic usage.
    expect(await page.screenshot()).toMatchSnapshot('landing-page.png');

    // Pass options to customize the snapshot comparison and have a generated name.
    expect(await page.screenshot()).toMatchSnapshot('landing-page.png', {
      maxDiffPixels: 27, // allow no more than 27 different pixels.
    });

    // Configure image matching threshold.
    expect(await page.screenshot()).toMatchSnapshot('landing-page.png', { threshold: 0.3 });

    // Bring some structure to your snapshot files by passing file path segments.
    expect(await page.screenshot()).toMatchSnapshot(['landing', 'step2.png']);
    expect(await page.screenshot()).toMatchSnapshot(['landing', 'step3.png']);
    ```

    Learn more about [visual comparisons](../test-snapshots).

    Note that matching snapshots only work with Playwright test runner.

    **Arguments**

    - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

      Snapshot name.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `maxDiffPixelRatio` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1`. Default is configurable with `TestConfig.expect`. Unset by default.

      - `maxDiffPixels` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        An acceptable amount of pixels that could be different. Default is configurable with `TestConfig.expect`. Unset by default.

      - `threshold` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        An acceptable perceived color difference in the [YIQ color space](https://en.wikipedia.org/wiki/YIQ) between the same pixel in compared images, between zero (strict) and one (lax), default is configurable with `TestConfig.expect`. Defaults to `0.2`.
- name: Suite
  id: api/class-suite
  summary: Suite is a group of tests
  description: "# Suite\n\n`Suite` is a group of tests. All tests in Playwright Test form the following hierarchy:\n\n- Root suite has a child suite for each [FullProject](class-fullproject \"FullProject\").\n  - Project suite \\#1. Has a child suite for each test file in the project.\n    - File suite \\#1\n      - [TestCase](class-testcase \"TestCase\") \\#1\n      - [TestCase](class-testcase \"TestCase\") \\#2\n      - Suite corresponding to a [test.describe()](class-test#test-describe) group\n        - [TestCase](class-testcase \"TestCase\") \\#1 in a group\n        - [TestCase](class-testcase \"TestCase\") \\#2 in a group\n      - \\< more test cases ... \\>\n    - File suite \\#2\n    - \\< more file suites ... \\>\n  - Project suite \\#2\n  - \\< more project suites ... \\>\n\nReporter is given a root suite in the [reporter.onBegin()](class-reporter#reporter-on-begin) method.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### allTests[​](#suite-all-tests \"Direct link to allTests\")\n\nReturns the list of all test cases in this suite and its descendants, as opposite to [suite.tests](class-suite#suite-tests).\n\n**Usage**\n\n``` javascript\nsuite.allTests();\n```\n\n**Returns**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[TestCase](class-testcase \"TestCase\")\\>\n\n### entries[​](#suite-entries \"Direct link to entries\")\n\nTest cases and suites defined directly in this suite. The elements are returned in their declaration order. You can differentiate between various entry types by using [testCase.type](class-testcase#test-case-type) and [suite.type](class-suite#suite-type).\n\n**Usage**\n\n``` javascript\nsuite.entries();\n```\n\n**Returns**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[TestCase](class-testcase \"TestCase\") \\| [Suite](class-suite \"Suite\")\\>\n\n### project[​](#suite-project \"Direct link to project\")\n\nConfiguration of the project this suite belongs to, or [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\") for the root suite.\n\n**Usage**\n\n``` javascript\nsuite.project();\n```\n\n**Returns**\n\n- [FullProject](class-fullproject \"FullProject\") \\| \\[undefined\\]\n\n### titlePath[​](#suite-title-path \"Direct link to titlePath\")\n\nReturns a list of titles from the root down to this suite.\n\n**Usage**\n\n``` javascript\nsuite.titlePath();\n```\n\n**Returns**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n## Properties[​](#properties \"Direct link to Properties\")\n\n### location[​](#suite-location \"Direct link to location\")\n\nLocation in the source where the suite is defined. Missing for root and project suites.\n\n**Usage**\n\n``` javascript\nsuite.location\n```\n\n**Type**\n\n- [Location](class-location \"Location\")\n\n### parent[​](#suite-parent \"Direct link to parent\")\n\nParent suite, missing for the root suite.\n\n**Usage**\n\n``` javascript\nsuite.parent\n```\n\n**Type**\n\n- [Suite](class-suite \"Suite\")\n\n### suites[​](#suite-suites \"Direct link to suites\")\n\nChild suites. See [Suite](class-suite \"Suite\") for the hierarchy of suites.\n\n**Usage**\n\n``` javascript\nsuite.suites\n```\n\n**Type**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Suite](class-suite \"Suite\")\\>\n\n### tests[​](#suite-tests \"Direct link to tests\")\n\nTest cases in the suite. Note that only test cases defined directly in this suite are in the list. Any test cases defined in nested [test.describe()](class-test#test-describe) groups are listed in the child [suite.suites](class-suite#suite-suites).\n\n**Usage**\n\n``` javascript\nsuite.tests\n```\n\n**Type**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[TestCase](class-testcase \"TestCase\")\\>\n\n### title[​](#suite-title \"Direct link to title\")\n\nSuite title.\n\n- Empty for root suite.\n- Project name for project suite.\n- File path for file suite.\n- Title passed to [test.describe()](class-test#test-describe) for a group suite.\n\n**Usage**\n\n``` javascript\nsuite.title\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### type[​](#suite-type \"Direct link to type\")\n\nReturns the type of the suite. The Suites form the following hierarchy: `root` -\\> `project` -\\> `file` -\\> `describe` -\\> ...`describe` -\\> `test`.\n\n**Usage**\n\n``` javascript\nsuite.type\n```\n\n**Type**\n\n- \"root\" \\| \"project\" \\| \"file\" \\| \"describe\"\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-suite](https://playwright.dev/docs/api/class-suite)"
- name: suite.allTests
  id: api/class-suite#suite-all-tests
  summary: Returns the list of all test cases in this suite and its descendants, as opposite to suite.tests
  belongs_to: Suite
  description: |-
    ### allTests[​](#suite-all-tests "Direct link to allTests")

    Returns the list of all test cases in this suite and its descendants, as opposite to [suite.tests](class-suite#suite-tests).

    **Usage**

    ``` javascript
    suite.allTests();
    ```

    **Returns**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[TestCase](class-testcase "TestCase")\>
- name: suite.entries
  id: api/class-suite#suite-entries
  summary: Test cases and suites defined directly in this suite
  belongs_to: Suite
  description: |-
    ### entries[​](#suite-entries "Direct link to entries")

    Test cases and suites defined directly in this suite. The elements are returned in their declaration order. You can differentiate between various entry types by using [testCase.type](class-testcase#test-case-type) and [suite.type](class-suite#suite-type).

    **Usage**

    ``` javascript
    suite.entries();
    ```

    **Returns**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[TestCase](class-testcase "TestCase") \| [Suite](class-suite "Suite")\>

    &nbsp;
- name: suite.location
  id: api/class-suite#suite-location
  summary: Location in the source where the suite is defined
  belongs_to: Suite
  description: |-
    ### location[​](#suite-location "Direct link to location")

    Location in the source where the suite is defined. Missing for root and project suites.

    **Usage**

    ``` javascript
    suite.location
    ```

    **Type**

    - [Location](class-location "Location")

    &nbsp;
- name: suite.parent
  id: api/class-suite#suite-parent
  summary: Parent suite, missing for the root suite
  belongs_to: Suite
  description: |-
    ### parent[​](#suite-parent "Direct link to parent")

    Parent suite, missing for the root suite.

    **Usage**

    ``` javascript
    suite.parent
    ```

    **Type**

    - [Suite](class-suite "Suite")

    &nbsp;
- name: suite.project
  id: api/class-suite#suite-project
  summary: Configuration of the project this suite belongs to, or void for the root suite
  belongs_to: Suite
  description: |-
    ### project[​](#suite-project "Direct link to project")

    Configuration of the project this suite belongs to, or [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void") for the root suite.

    **Usage**

    ``` javascript
    suite.project();
    ```

    **Returns**

    - [FullProject](class-fullproject "FullProject") \| \[undefined\]

    &nbsp;
- name: suite.suites
  id: api/class-suite#suite-suites
  summary: Child suites
  belongs_to: Suite
  description: |-
    ### suites[​](#suite-suites "Direct link to suites")

    Child suites. See [Suite](class-suite "Suite") for the hierarchy of suites.

    **Usage**

    ``` javascript
    suite.suites
    ```

    **Type**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Suite](class-suite "Suite")\>

    &nbsp;
- name: suite.tests
  id: api/class-suite#suite-tests
  summary: Test cases in the suite
  belongs_to: Suite
  description: |-
    ### tests[​](#suite-tests "Direct link to tests")

    Test cases in the suite. Note that only test cases defined directly in this suite are in the list. Any test cases defined in nested [test.describe()](class-test#test-describe) groups are listed in the child [suite.suites](class-suite#suite-suites).

    **Usage**

    ``` javascript
    suite.tests
    ```

    **Type**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[TestCase](class-testcase "TestCase")\>

    &nbsp;
- name: suite.title
  id: api/class-suite#suite-title
  summary: Suite title
  belongs_to: Suite
  description: |-
    ### title[​](#suite-title "Direct link to title")

    Suite title.

    - Empty for root suite.
    - Project name for project suite.
    - File path for file suite.
    - Title passed to [test.describe()](class-test#test-describe) for a group suite.

    **Usage**

    ``` javascript
    suite.title
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: suite.titlePath
  id: api/class-suite#suite-title-path
  summary: Returns a list of titles from the root down to this suite
  belongs_to: Suite
  description: |-
    ### titlePath[​](#suite-title-path "Direct link to titlePath")

    Returns a list of titles from the root down to this suite.

    **Usage**

    ``` javascript
    suite.titlePath();
    ```

    **Returns**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    ## Properties[​](#properties "Direct link to Properties")
- name: suite.type
  id: api/class-suite#suite-type
  summary: Returns the type of the suite
  belongs_to: Suite
  description: "### type[​](#suite-type \"Direct link to type\")\n\nReturns the type of the suite. The Suites form the following hierarchy: `root` -\\> `project` -\\> `file` -\\> `describe` -\\> ...`describe` -\\> `test`.\n\n**Usage**\n\n``` javascript\nsuite.type\n```\n\n**Type**\n\n- \"root\" \\| \"project\" \\| \"file\" \\| \"describe\"\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-suite](https://playwright.dev/docs/api/class-suite)"
- name: Supported languages
  id: languages
  summary: Playwright is available in multiple languages that share the same underlying implementation
  description: "# Supported languages\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright is available in multiple languages that share the same underlying implementation. All core features for automating the browser are supported in all languages, while testing ecosystem integration is different. Pick the language based on your experience, familiarity with its testing ecosystem and your project constraints. For the best experience pick the test runner that we recommend for each language.\n\n## JavaScript and TypeScript[​](#javascript-and-typescript \"Direct link to JavaScript and TypeScript\")\n\nPlaywright for Node.js comes with its own [test runner](running-tests) that provides great parallelization mechanism, screenshot assertions, html reporter, automatic tracing etc.\n\n- [Documentation](index)\n- [GitHub repo](https://github.com/microsoft/playwright)\n\n## Python[​](#python \"Direct link to Python\")\n\nPlaywright [Pytest plugin](https://playwright.dev/python/docs/test-runners) is the recommended way to run end-to-end tests. It provides context isolation, running it on multiple browser configurations and more out of the box.\n\n- [Documentation](https://playwright.dev/python/docs/intro)\n- [GitHub repo](https://github.com/microsoft/playwright-python)\n\n## Java[​](#java \"Direct link to Java\")\n\nYou can choose any testing framework such as JUnit or TestNG based on your project requirements.\n\n- [Documentation](https://playwright.dev/java/docs/intro)\n- [GitHub repo](https://github.com/microsoft/playwright-java)\n\n## .NET[​](#net \"Direct link to .NET\")\n\nPlaywright for .NET comes with [MSTest base classes](https://playwright.dev/dotnet/docs/test-runners#mstest) and [NUnit base classes](https://playwright.dev/dotnet/docs/test-runners#nunit) for writing end-to-end tests.\n\n- [Documentation](https://playwright.dev/dotnet/docs/intro)\n- [GitHub repo](https://github.com/microsoft/playwright-dotnet)\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/languages](https://playwright.dev/docs/languages)"
- name: Test configuration
  id: test-configuration
  summary: Playwright has many options to configure how your tests are run
  description: "# Test configuration\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright has many options to configure how your tests are run. You can specify these options in the configuration file. Note that test runner options are **top-level**, do not put them into the `use` section.\n\n## Basic Configuration[​](#basic-configuration \"Direct link to Basic Configuration\")\n\nHere are some of the most common configuration options.\n\n``` javascript\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  // Look for test files in the \"tests\" directory, relative to this configuration file.\n  testDir: 'tests',\n\n  // Run all tests in parallel.\n  fullyParallel: true,\n\n  // Fail the build on CI if you accidentally left test.only in the source code.\n  forbidOnly: !!process.env.CI,\n\n  // Retry on CI only.\n  retries: process.env.CI ? 2 : 0,\n\n  // Opt out of parallel tests on CI.\n  workers: process.env.CI ? 1 : undefined,\n\n  // Reporter to use\n  reporter: 'html',\n\n  use: {\n    // Base URL to use in actions like `await page.goto('/')`.\n    baseURL: 'http://127.0.0.1:3000',\n\n    // Collect trace when retrying the failed test.\n    trace: 'on-first-retry',\n  },\n  // Configure projects for major browsers.\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n  ],\n  // Run your local dev server before starting the tests.\n  webServer: {\n    command: 'npm run start',\n    url: 'http://127.0.0.1:3000',\n    reuseExistingServer: !process.env.CI,\n  },\n});\n```\n\n| Option                                                                      | Description                                                                                                                                                                                                                           |\n|:----------------------------------------------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [testConfig.forbidOnly](api/class-testconfig#test-config-forbid-only)       | Whether to exit with an error if any tests are marked as `test.only`. Useful on CI.                                                                                                                                                   |\n| [testConfig.fullyParallel](api/class-testconfig#test-config-fully-parallel) | have all tests in all files to run in parallel. See [Parallelism](test-parallel) and [Sharding](test-sharding) for more details.                                                                                                      |\n| [testConfig.projects](api/class-testconfig#test-config-projects)            | Run tests in multiple configurations or on multiple browsers                                                                                                                                                                          |\n| [testConfig.reporter](api/class-testconfig#test-config-reporter)            | Reporter to use. See [Test Reporters](test-reporters) to learn more about which reporters are available.                                                                                                                              |\n| [testConfig.retries](api/class-testconfig#test-config-retries)              | The maximum number of retry attempts per test. See [Test Retries](test-retries) to learn more about retries.                                                                                                                          |\n| [testConfig.testDir](api/class-testconfig#test-config-test-dir)             | Directory with the test files.                                                                                                                                                                                                        |\n| [testConfig.use](api/class-testconfig#test-config-use)                      | Options with `use{}`                                                                                                                                                                                                                  |\n| [testConfig.webServer](api/class-testconfig#test-config-web-server)         | To launch a server during the tests, use the `webServer` option                                                                                                                                                                       |\n| [testConfig.workers](api/class-testconfig#test-config-workers)              | The maximum number of concurrent worker processes to use for parallelizing tests. Can also be set as percentage of logical CPU cores, e.g. `'50%'.`. See [Parallelism](test-parallel) and [Sharding](test-sharding) for more details. |\n\n## Filtering Tests[​](#filtering-tests \"Direct link to Filtering Tests\")\n\nFilter tests by glob patterns or regular expressions.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Glob patterns or regular expressions to ignore test files.\n  testIgnore: '*test-assets',\n\n  // Glob patterns or regular expressions that match test files.\n  testMatch: '*todo-tests/*.spec.ts',\n});\n```\n\n| Option                                                                | Description                                                                                                                                                        |\n|:----------------------------------------------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [testConfig.testIgnore](api/class-testconfig#test-config-test-ignore) | Glob patterns or regular expressions that should be ignored when looking for the test files. For example, `'*test-assets'`                                         |\n| [testConfig.testMatch](api/class-testconfig#test-config-test-match)   | Glob patterns or regular expressions that match test files. For example, `'*todo-tests/*.spec.ts'`. By default, Playwright runs `.*(test|spec).(js|ts|mjs)` files. |\n\n## Advanced Configuration[​](#advanced-configuration \"Direct link to Advanced Configuration\")\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Folder for test artifacts such as screenshots, videos, traces, etc.\n  outputDir: 'test-results',\n\n  // path to the global setup files.\n  globalSetup: require.resolve('./global-setup'),\n\n  // path to the global teardown files.\n  globalTeardown: require.resolve('./global-teardown'),\n\n  // Each test is given 30 seconds.\n  timeout: 30000,\n\n});\n```\n\n| Option                                                                        | Description                                                                                                                                                                                     |\n|:------------------------------------------------------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [testConfig.globalSetup](api/class-testconfig#test-config-global-setup)       | Path to the global setup file. This file will be required and run before all the tests. It must export a single function.                                                                       |\n| [testConfig.globalTeardown](api/class-testconfig#test-config-global-teardown) | Path to the global teardown file. This file will be required and run after all the tests. It must export a single function.                                                                     |\n| [testConfig.outputDir](api/class-testconfig#test-config-output-dir)           | Folder for test artifacts such as screenshots, videos, traces, etc.                                                                                                                             |\n| [testConfig.timeout](api/class-testconfig#test-config-timeout)                | Playwright enforces a [timeout](test-timeouts) for each test, 30 seconds by default. Time spent by the test function, fixtures, beforeEach and afterEach hooks is included in the test timeout. |\n\n## Expect Options[​](#expect-options \"Direct link to Expect Options\")\n\nConfiguration for the expect assertion library.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  expect: {\n    // Maximum time expect() should wait for the condition to be met.\n    timeout: 5000,\n\n    toHaveScreenshot: {\n      // An acceptable amount of pixels that could be different, unset by default.\n      maxDiffPixels: 10,\n    },\n\n    toMatchSnapshot: {\n      // An acceptable ratio of pixels that are different to the\n      // total amount of pixels, between 0 and 1.\n      maxDiffPixelRatio: 0.1,\n    },\n  },\n\n});\n```\n\n| Option                                                                                                  | Description                                                                                                                                                                                                                                                                                                     |\n|:--------------------------------------------------------------------------------------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [testConfig.expect](api/class-testconfig#test-config-expect)                                            | [Web first assertions](test-assertions) like `expect(locator).toHaveText()` have a separate timeout of 5 seconds by default. This is the maximum time the `expect()` should wait for the condition to be met. Learn more about [test and expect timeouts](test-timeouts) and how to set them for a single test. |\n| [expect(page).toHaveScreenshot()](api/class-pageassertions#page-assertions-to-have-screenshot-1)        | Configuration for the `expect(locator).toHaveScreenshot()` method.                                                                                                                                                                                                                                              |\n| [expect(value).toMatchSnapshot()](api/class-snapshotassertions#snapshot-assertions-to-match-snapshot-1) | Configuration for the `expect(locator).toMatchSnapshot()` method.                                                                                                                                                                                                                                               |\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/test-configuration](https://playwright.dev/docs/test-configuration)"
- name: Test generator
  id: codegen
  summary: Playwright comes with the ability to generate tests for you as you perform actions in the browser and is a great way to quickly get started with testing
  description: "# Test generator\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright comes with the ability to generate tests for you as you perform actions in the browser and is a great way to quickly get started with testing. Playwright will look at your page and figure out the best locator, prioritizing [role, text and test id locators](locators). If the generator finds multiple elements matching the locator, it will improve the locator to make it resilient that uniquely identify the target element.\n\n## Generate tests in VS Code[​](#generate-tests-in-vs-code \"Direct link to Generate tests in VS Code\")\n\nInstall the VS Code extension and generate tests directly from VS Code. The extension is available on the [VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright). Check out our guide on [getting started with VS Code](getting-started-vscode).\n\n### Record a New Test[​](#record-a-new-test \"Direct link to Record a New Test\")\n\nTo record a test click on the **Record new** button from the Testing sidebar. This will create a `test-1.spec.ts` file as well as open up a browser window.\n\nIn the browser go to the URL you wish to test and start clicking around to record your user actions.\n\nPlaywright will record your actions and generate the test code directly in VS Code. You can also generate assertions by choosing one of the icons in the toolbar and then clicking on an element on the page to assert against. The following assertions can be generated:\n\n- `'assert visibility'` to assert that an element is visible\n- `'assert text'` to assert that an element contains specific text\n- `'assert value'` to assert that an element has a specific value\n\nOnce you are done recording click the **cancel** button or close the browser window. You can then inspect your `test-1.spec.ts` file and manually improve it if needed.\n\n### Record at Cursor[​](#record-at-cursor \"Direct link to Record at Cursor\")\n\nTo record from a specific point in your test move your cursor to where you want to record more actions and then click the **Record at cursor** button from the Testing sidebar. If your browser window is not already open then first run the test with 'Show browser' checked and then click the **Record at cursor** button.\n\nIn the browser window start performing the actions you want to record.\n\nIn the test file in VS Code you will see your new generated actions added to your test at the cursor position.\n\n### Generating locators[​](#generating-locators \"Direct link to Generating locators\")\n\nYou can generate locators with the test generator.\n\n- Click on the **Pick locator** button form the testing sidebar and then hover over elements in the browser window to see the [locator](locators) highlighted underneath each element.\n- Click the element you require and it will now show up in the **Pick locator** box in VS Code.\n- Press Enter on your keyboard to copy the locator into the clipboard and then paste anywhere in your code. Or press 'escape' if you want to cancel.\n\n## Generate tests with the Playwright Inspector[​](#generate-tests-with-the-playwright-inspector \"Direct link to Generate tests with the Playwright Inspector\")\n\nWhen running the `codegen` command two windows will be opened, a browser window where you interact with the website you wish to test and the Playwright Inspector window where you can record your tests and then copy them into your editor.\n\n### Running Codegen[​](#running-codegen \"Direct link to Running Codegen\")\n\nUse the `codegen` command to run the test generator followed by the URL of the website you want to generate tests for. The URL is optional and you can always run the command without it and then add the URL directly into the browser window instead.\n\n``` javascript\nnpx playwright codegen demo.playwright.dev/todomvc\n```\n\n### Recording a test[​](#recording-a-test \"Direct link to Recording a test\")\n\nRun the `codegen` command and perform actions in the browser window. Playwright will generate the code for the user interactions which you can see in the Playwright Inspector window. Once you have finished recording your test stop the recording and press the **copy** button to copy your generated test into your editor.\n\nWith the test generator you can record:\n\n- Actions like click or fill by simply interacting with the page\n- Assertions by clicking on one of the icons in the toolbar and then clicking on an element on the page to assert against. You can choose:\n  - `'assert visibility'` to assert that an element is visible\n  - `'assert text'` to assert that an element contains specific text\n  - `'assert value'` to assert that an element has a specific value\n\n###### [​](#-1 \"Direct link to -1\")\n\nWhen you have finished interacting with the page, press the **record** button to stop the recording and use the **copy** button to copy the generated code to your editor.\n\nUse the **clear** button to clear the code to start recording again. Once finished, close the Playwright inspector window or stop the terminal command.\n\n### Generating locators[​](#generating-locators-1 \"Direct link to Generating locators\")\n\nYou can generate [locators](locators) with the test generator.\n\n- Press the `'Record'` button to stop the recording and the `'Pick Locator'` button will appear.\n- Click on the `'Pick Locator'` button and then hover over elements in the browser window to see the locator highlighted underneath each element.\n- To choose a locator, click on the element you would like to locate and the code for that locator will appear in the field next to the Pick Locator button.\n- You can then edit the locator in this field to fine tune it or use the copy button to copy it and paste it into your code.\n\n###### [​](#-2 \"Direct link to -2\")\n\n## Emulation[​](#emulation \"Direct link to Emulation\")\n\nYou can use the test generator to generate tests using emulation so as to generate a test for a specific viewport, device, color scheme, as well as emulate the geolocation, language or timezone. The test generator can also generate a test while preserving authenticated state.\n\n### Emulate viewport size[​](#emulate-viewport-size \"Direct link to Emulate viewport size\")\n\nPlaywright opens a browser window with its viewport set to a specific width and height and is not responsive as tests need to be run under the same conditions. Use the `--viewport` option to generate tests with a different viewport size.\n\n``` javascript\nnpx playwright codegen --viewport-size=800,600 playwright.dev\n```\n\n###### [​](#-3 \"Direct link to -3\")\n\n### Emulate devices[​](#emulate-devices \"Direct link to Emulate devices\")\n\nRecord scripts and tests while emulating a mobile device using the `--device` option which sets the viewport size and user agent among others.\n\n``` javascript\nnpx playwright codegen --device=\"iPhone 13\" playwright.dev\n```\n\n###### [​](#-4 \"Direct link to -4\")\n\n### Emulate color scheme[​](#emulate-color-scheme \"Direct link to Emulate color scheme\")\n\nRecord scripts and tests while emulating the color scheme with the `--color-scheme` option.\n\n``` javascript\nnpx playwright codegen --color-scheme=dark playwright.dev\n```\n\n###### [​](#-5 \"Direct link to -5\")\n\n### Emulate geolocation, language and timezone[​](#emulate-geolocation-language-and-timezone \"Direct link to Emulate geolocation, language and timezone\")\n\nRecord scripts and tests while emulating timezone, language & location using the `--timezone`, `--geolocation` and `--lang` options. Once the page opens:\n\n1.  Accept the cookies\n2.  On the top right, click on the locate me button to see geolocation in action.\n\n``` javascript\nnpx playwright codegen --timezone=\"Europe/Rome\" --geolocation=\"41.890221,12.492348\" --lang=\"it-IT\" bing.com/maps\n```\n\n###### [​](#-6 \"Direct link to -6\")\n\n### Preserve authenticated state[​](#preserve-authenticated-state \"Direct link to Preserve authenticated state\")\n\nRun `codegen` with `--save-storage` to save [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies) and [localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) at the end of the session. This is useful to separately record an authentication step and reuse it later when recording more tests.\n\n``` javascript\nnpx playwright codegen github.com/microsoft/playwright --save-storage=auth.json\n```\n\n###### [​](#-7 \"Direct link to -7\")\n\n#### Login[​](#login \"Direct link to Login\")\n\nAfter performing authentication and closing the browser, `auth.json` will contain the storage state which you can then reuse in your tests.\n\nMake sure you only use the `auth.json` locally as it contains sensitive information. Add it to your `.gitignore` or delete it once you have finished generating your tests.\n\n#### Load authenticated state[​](#load-authenticated-state \"Direct link to Load authenticated state\")\n\nRun with `--load-storage` to consume the previously loaded storage from the `auth.json`. This way, all [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies) and [localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) will be restored, bringing most web apps to the authenticated state without the need to login again. This means you can continue generating tests from the logged in state.\n\n``` javascript\nnpx playwright codegen --load-storage=auth.json github.com/microsoft/playwright\n```\n\n###### [​](#-8 \"Direct link to -8\")\n\n## Record using custom setup[​](#record-using-custom-setup \"Direct link to Record using custom setup\")\n\nIf you would like to use codegen in some non-standard setup (for example, use [browserContext.route()](api/class-browsercontext#browser-context-route)), it is possible to call [page.pause()](api/class-page#page-pause) that will open a separate window with codegen controls.\n\n``` javascript\nconst { chromium } = require('@playwright/test');\n\n(async () => {\n  // Make sure to run headed.\n  const browser = await chromium.launch({ headless: false });\n\n  // Setup context however you like.\n  const context = await browser.newContext({ /* pass any options */ });\n  await context.route('**/*', route => route.continue());\n\n  // Pause the page, and start recording manually.\n  const page = await context.newPage();\n  await page.pause();\n})();\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/codegen](https://playwright.dev/docs/codegen)"
- name: Test use options
  id: test-use-options
  summary: In addition to configuring the test runner you can also configure Emulation, Network and Recording for the Browser or BrowserContext
  description: "# Test use options\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nIn addition to configuring the test runner you can also configure [Emulation](#emulation-options), [Network](#network-options) and [Recording](#recording-options) for the [Browser](api/class-browser \"Browser\") or [BrowserContext](api/class-browsercontext \"BrowserContext\"). These options are passed to the `use: {}` object in the Playwright config.\n\n### Basic Options[​](#basic-options \"Direct link to Basic Options\")\n\nSet the base URL and storage state for all tests:\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Base URL to use in actions like `await page.goto('/')`.\n    baseURL: 'http://127.0.0.1:3000',\n\n    // Populates context with given storage state.\n    storageState: 'state.json',\n  },\n});\n```\n\n| Option                                                                       | Description                                                                                                                 |\n|:-----------------------------------------------------------------------------|:----------------------------------------------------------------------------------------------------------------------------|\n| [testOptions.baseURL](api/class-testoptions#test-options-base-url)           | Base URL used for all pages in the context. Allows navigating by using just the path, for example `page.goto('/settings')`. |\n| [testOptions.storageState](api/class-testoptions#test-options-storage-state) | Populates context with given storage state. Useful for easy authentication, [learn more](auth).                             |\n\n### Emulation Options[​](#emulation-options \"Direct link to Emulation Options\")\n\nWith Playwright you can emulate a real device such as a mobile phone or tablet. See our [guide on projects](test-projects) for more info on emulating devices. You can also emulate the `\"geolocation\"`, `\"locale\"` and `\"timezone\"` for all tests or for a specific test as well as set the `\"permissions\"` to show notifications or change the `\"colorScheme\"`. See our [Emulation](emulation) guide to learn more.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Emulates `'prefers-colors-scheme'` media feature.\n    colorScheme: 'dark',\n\n    // Context geolocation.\n    geolocation: { longitude: 12.492507, latitude: 41.889938 },\n\n    // Emulates the user locale.\n    locale: 'en-GB',\n\n    // Grants specified permissions to the browser context.\n    permissions: ['geolocation'],\n\n    // Emulates the user timezone.\n    timezoneId: 'Europe/Paris',\n\n    // Viewport used for all pages in the context.\n    viewport: { width: 1280, height: 720 },\n  },\n});\n```\n\n| Option                                                                     | Description                                                                                                                                       |\n|:---------------------------------------------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------|\n| [testOptions.colorScheme](api/class-testoptions#test-options-color-scheme) | [Emulates](emulation#color-scheme-and-media) `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'` |\n| [testOptions.geolocation](api/class-testoptions#test-options-geolocation)  | Context [geolocation](emulation#geolocation).                                                                                                     |\n| [testOptions.locale](api/class-testoptions#test-options-locale)            | [Emulates](emulation#locale--timezone) the user locale, for example `en-GB`, `de-DE`, etc.                                                        |\n| [testOptions.permissions](api/class-testoptions#test-options-permissions)  | A list of [permissions](emulation#permissions) to grant to all pages in the context.                                                              |\n| [testOptions.timezoneId](api/class-testoptions#test-options-timezone-id)   | Changes the [timezone](emulation#locale--timezone) of the context.                                                                                |\n| [testOptions.viewport](api/class-testoptions#test-options-viewport)        | [Viewport](emulation#viewport) used for all pages in the context.                                                                                 |\n\n### Network Options[​](#network-options \"Direct link to Network Options\")\n\nAvailable options to configure networking:\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Whether to automatically download all the attachments.\n    acceptDownloads: false,\n\n    // An object containing additional HTTP headers to be sent with every request.\n    extraHTTPHeaders: {\n      'X-My-Header': 'value',\n    },\n\n    // Credentials for HTTP authentication.\n    httpCredentials: {\n      username: 'user',\n      password: 'pass',\n    },\n\n    // Whether to ignore HTTPS errors during navigation.\n    ignoreHTTPSErrors: true,\n\n    // Whether to emulate network being offline.\n    offline: true,\n\n    // Proxy settings used for all pages in the test.\n    proxy: {\n      server: 'http://myproxy.com:3128',\n      bypass: 'localhost',\n    },\n  },\n});\n```\n\n| Option                                                                                  | Description                                                                                                                      |\n|:----------------------------------------------------------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------|\n| [testOptions.acceptDownloads](api/class-testoptions#test-options-accept-downloads)      | Whether to automatically download all the attachments, defaults to `true`. [Learn more](downloads) about working with downloads. |\n| [testOptions.extraHTTPHeaders](api/class-testoptions#test-options-extra-http-headers)   | An object containing additional HTTP headers to be sent with every request. All header values must be strings.                   |\n| [testOptions.httpCredentials](api/class-testoptions#test-options-http-credentials)      | Credentials for [HTTP authentication](network#http-authentication).                                                              |\n| [testOptions.ignoreHTTPSErrors](api/class-testoptions#test-options-ignore-https-errors) | Whether to ignore HTTPS errors during navigation.                                                                                |\n| [testOptions.offline](api/class-testoptions#test-options-offline)                       | Whether to emulate network being offline.                                                                                        |\n| [testOptions.proxy](api/class-testoptions#test-options-proxy)                           | [Proxy settings](network#http-proxy) used for all pages in the test.                                                             |\n\n> note\n>\n> You don't have to configure anything to mock network requests. Just define a custom [Route](api/class-route \"Route\") that mocks the network for a browser context. See our [network mocking guide](network) to learn more.\n\n### Recording Options[​](#recording-options \"Direct link to Recording Options\")\n\nWith Playwright you can capture screenshots, record videos as well as traces of your test. By default these are turned off but you can enable them by setting the `screenshot`, `video` and `trace` options in your `playwright.config.js` file.\n\nTrace files, screenshots and videos will appear in the test output directory, typically `test-results`.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Capture screenshot after each test failure.\n    screenshot: 'only-on-failure',\n\n    // Record trace only when retrying a test for the first time.\n    trace: 'on-first-retry',\n\n    // Record video only when retrying a test for the first time.\n    video: 'on-first-retry'\n  },\n});\n```\n\n| Option                                                                  | Description                                                                                                                                                                                                                                                                  |\n|:------------------------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [testOptions.screenshot](api/class-testoptions#test-options-screenshot) | Capture [screenshots](screenshots) of your test. Options include `'off'`, `'on'` and `'only-on-failure'`                                                                                                                                                                     |\n| [testOptions.trace](api/class-testoptions#test-options-trace)           | Playwright can produce test traces while running the tests. Later on, you can view the trace and get detailed information about Playwright execution by opening [Trace Viewer](trace-viewer). Options include: `'off'`, `'on'`, `'retain-on-failure'` and `'on-first-retry'` |\n| [testOptions.video](api/class-testoptions#test-options-video)           | Playwright can record [videos](videos) for your tests. Options include: `'off'`, `'on'`, `'retain-on-failure'` and `'on-first-retry'`                                                                                                                                        |\n\n### Other Options[​](#other-options \"Direct link to Other Options\")\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Maximum time each action such as `click()` can take. Defaults to 0 (no limit).\n    actionTimeout: 0,\n\n    // Name of the browser that runs tests. For example `chromium`, `firefox`, `webkit`.\n    browserName: 'chromium',\n\n    // Toggles bypassing Content-Security-Policy.\n    bypassCSP: true,\n\n    // Channel to use, for example \"chrome\", \"chrome-beta\", \"msedge\", \"msedge-beta\".\n    channel: 'chrome',\n\n    // Run browser in headless mode.\n    headless: false,\n\n    // Change the default data-testid attribute.\n    testIdAttribute: 'pw-test-id',\n  },\n});\n```\n\n| Option                                                                              | Description                                                                                                                                                         |\n|:------------------------------------------------------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [testOptions.actionTimeout](api/class-testoptions#test-options-action-timeout)      | Timeout for each Playwright action in milliseconds. Defaults to `0` (no timeout). Learn more about [timeouts](test-timeouts) and how to set them for a single test. |\n| [testOptions.browserName](api/class-testoptions#test-options-browser-name)          | Name of the browser that runs tests. Defaults to 'chromium'. Options include `chromium`, `firefox`, or `webkit`.                                                    |\n| [testOptions.bypassCSP](api/class-testoptions#test-options-bypass-csp)              | Toggles bypassing Content-Security-Policy. Useful when CSP includes the production origin. Defaults to `false`.                                                     |\n| [testOptions.channel](api/class-testoptions#test-options-channel)                   | Browser channel to use. [Learn more](browsers) about different browsers and channels.                                                                               |\n| [testOptions.headless](api/class-testoptions#test-options-headless)                 | Whether to run the browser in headless mode meaning no browser is shown when running tests. Defaults to `true`.                                                     |\n| [testOptions.testIdAttribute](api/class-testoptions#test-options-test-id-attribute) | Changes the default [`data-testid` attribute](locators#locate-by-test-id) used by Playwright locators.                                                              |\n\n### More browser and context options[​](#more-browser-and-context-options \"Direct link to More browser and context options\")\n\nAny options accepted by [browserType.launch()](api/class-browsertype#browser-type-launch) or [browser.newContext()](api/class-browser#browser-new-context) can be put into `launchOptions` or `contextOptions` respectively in the `use` section.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    launchOptions: {\n      slowMo: 50,\n    },\n  },\n});\n```\n\nHowever, most common ones like `headless` or `viewport` are available directly in the `use` section - see [basic options](#basic-options), [emulation](#emulation-options) or [network](#network-options).\n\n### Explicit Context Creation and Option Inheritance[​](#explicit-context-creation-and-option-inheritance \"Direct link to Explicit Context Creation and Option Inheritance\")\n\nIf using the built-in `browser` fixture, calling [browser.newContext()](api/class-browser#browser-new-context) will create a context with options inherited from the config:\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    userAgent: 'some custom ua',\n    viewport: { width: 100, height: 100 },\n  },\n});\n```\n\nAn example test illustrating the initial context options are set:\n\n``` javascript\ntest('should inherit use options on context when using built-in browser fixture', async ({\n  browser,\n}) => {\n  const context = await browser.newContext();\n  const page = await context.newPage();\n  expect(await page.evaluate(() => navigator.userAgent)).toBe('some custom ua');\n  expect(await page.evaluate(() => window.innerWidth)).toBe(100);\n  await context.close();\n});\n```\n\n### Configuration Scopes[​](#configuration-scopes \"Direct link to Configuration Scopes\")\n\nYou can configure Playwright globally, per project, or per test. For example, you can set the locale to be used globally by adding `locale` to the `use` option of the Playwright config, and then override it for a specific project using the `project` option in the config. You can also override it for a specific test by adding `test.use({})` in the test file and passing in the options.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    locale: 'en-GB'\n  },\n});\n```\n\nYou can override options for a specific project using the `project` option in the Playwright config.\n\n``` javascript\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: {\n        ...devices['Desktop Chrome'],\n        locale: 'de-DE',\n      },\n    },\n  ],\n});\n```\n\nYou can override options for a specific test file by using the `test.use()` method and passing in the options. For example to run tests with the French locale for a specific test:\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.use({ locale: 'fr-FR' });\n\ntest('example', async ({ page }) => {\n  // ...\n});\n```\n\nThe same works inside a describe block. For example to run tests in a describe block with the French locale:\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.describe('french language block', () => {\n\n  test.use({ locale: 'fr-FR' });\n\n  test('example', async ({ page }) => {\n    // ...\n  });\n});\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/test-use-options](https://playwright.dev/docs/test-use-options)"
- name: test.test
  id: api/class-test#test-call
  summary: Declares a test
  belongs_to: Playwright Test
  description: |-
    ### test[​](#test-call "Direct link to test")

    Declares a test.

    - `test(title, body)`
    - `test(title, details, body)`

    **Usage**

    ``` javascript
    import { test, expect } from '@playwright/test';

    test('basic test', async ({ page }) => {
      await page.goto('https://playwright.dev/');
      // ...
    });
    ```

    **Tags**

    You can tag tests by providing additional test details. Alternatively, you can include tags in the test title. Note that each tag must start with `@` symbol.

    ``` javascript
    import { test, expect } from '@playwright/test';

    test('basic test', {
      tag: '@smoke',
    }, async ({ page }) => {
      await page.goto('https://playwright.dev/');
      // ...
    });

    test('another test @smoke', async ({ page }) => {
      await page.goto('https://playwright.dev/');
      // ...
    });
    ```

    Test tags are displayed in the test report, and are available to a custom reporter via `TestCase.tags` property.

    You can also filter tests by their tags during test execution:

    - in the [command line](../test-cli#reference);
    - in the config with [testConfig.grep](class-testconfig#test-config-grep) and [testProject.grep](class-testproject#test-project-grep);

    Learn more about [tagging](../test-annotations#tag-tests).

    **Annotations**

    You can annotate tests by providing additional test details.

    ``` javascript
    import { test, expect } from '@playwright/test';

    test('basic test', {
      annotation: {
        type: 'issue',
        description: 'https://github.com/microsoft/playwright/issues/23180',
      },
    }, async ({ page }) => {
      await page.goto('https://playwright.dev/');
      // ...
    });
    ```

    Test annotations are displayed in the test report, and are available to a custom reporter via `TestCase.annotations` property.

    You can also add annotations during runtime by manipulating [testInfo.annotations](class-testinfo#test-info-annotations).

    Learn more about [test annotations](../test-annotations).

    **Arguments**

    - `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Test title.

    - `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `tag`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

      - `annotation`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> *(optional)*

        - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          Annotation type, for example `'issue'`.

        - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

          Optional annotation description, for example an issue url.

      Additional test details.

    - `body`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Fixtures](class-fixtures "Fixtures"), [TestInfo](class-testinfo "TestInfo"))

      Test body that takes one or two arguments: an object with fixtures and optional [TestInfo](class-testinfo "TestInfo").
- name: test.test.afterAll
  id: api/class-test#test-after-all
  summary: Declares an afterAll hook that is executed once per worker after all tests
  belongs_to: Playwright Test
  description: |-
    ### test.afterAll[​](#test-after-all "Direct link to test.afterAll")

    Declares an `afterAll` hook that is executed once per worker after all tests.

    When called in the scope of a test file, runs after all tests in the file. When called inside a [test.describe()](class-test#test-describe) group, runs after all tests in the group.

    **Usage**

    ``` javascript
    test.afterAll(async () => {
      console.log('Done with tests');
      // ...
    });
    ```

    Alternatively, you can declare a hook **with a title**.

    ``` javascript
    test.afterAll('Teardown', async () => {
      console.log('Done with tests');
      // ...
    });
    ```

    **Arguments**

    - `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      Hook title.

    - `hookFunction`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Fixtures](class-fixtures "Fixtures"), [TestInfo](class-testinfo "TestInfo"))

      Hook function that takes one or two arguments: an object with worker fixtures and optional [TestInfo](class-testinfo "TestInfo").

    **Details**

    When multiple `afterAll` hooks are added, they will run in the order of their registration.

    Note that worker process is restarted on test failures, and `afterAll` hook runs again in the new worker. Learn more about [workers and failures](../test-retries).

    Playwright will continue running all applicable hooks even if some of them have failed.

    - `test.afterAll(hookFunction)`
    - `test.afterAll(title, hookFunction)`

    &nbsp;
- name: test.test.afterEach
  id: api/class-test#test-after-each
  summary: Declares an afterEach hook that is executed after each test
  belongs_to: Playwright Test
  description: |-
    ### test.afterEach[​](#test-after-each "Direct link to test.afterEach")

    Declares an `afterEach` hook that is executed after each test.

    When called in the scope of a test file, runs after each test in the file. When called inside a [test.describe()](class-test#test-describe) group, runs after each test in the group.

    You can access all the same [Fixtures](class-fixtures "Fixtures") as the test body itself, and also the [TestInfo](class-testinfo "TestInfo") object that gives a lot of useful information. For example, you can check whether the test succeeded or failed.

    - `test.afterEach(hookFunction)`
    - `test.afterEach(title, hookFunction)`

    **Usage**

    ``` javascript
    import { test, expect } from '@playwright/test';

    test.afterEach(async ({ page }) => {
      console.log(`Finished ${test.info().title} with status ${test.info().status}`);

      if (test.info().status !== test.info().expectedStatus)
        console.log(`Did not run as expected, ended up at ${page.url()}`);
    });

    test('my test', async ({ page }) => {
      // ...
    });
    ```

    Alternatively, you can declare a hook **with a title**.

    ``` javascript
    test.afterEach('Status check', async ({ page }) => {
      if (test.info().status !== test.info().expectedStatus)
        console.log(`Did not run as expected, ended up at ${page.url()}`);
    });
    ```

    **Arguments**

    - `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      Hook title.

    - `hookFunction`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Fixtures](class-fixtures "Fixtures"), [TestInfo](class-testinfo "TestInfo"))

      Hook function that takes one or two arguments: an object with fixtures and optional [TestInfo](class-testinfo "TestInfo").

    **Details**

    When multiple `afterEach` hooks are added, they will run in the order of their registration.

    Playwright will continue running all applicable hooks even if some of them have failed.
- name: test.test.beforeAll
  id: api/class-test#test-before-all
  summary: Declares a beforeAll hook that is executed once per worker process before all tests
  belongs_to: Playwright Test
  description: |-
    ### test.beforeAll[​](#test-before-all "Direct link to test.beforeAll")

    Declares a `beforeAll` hook that is executed once per worker process before all tests.

    When called in the scope of a test file, runs before all tests in the file. When called inside a [test.describe()](class-test#test-describe) group, runs before all tests in the group.

    You can use [test.afterAll()](class-test#test-after-all) to teardown any resources set up in `beforeAll`.

    - `test.beforeAll(hookFunction)`
    - `test.beforeAll(title, hookFunction)`

    **Usage**

    ``` javascript
    import { test, expect } from '@playwright/test';

    test.beforeAll(async () => {
      console.log('Before tests');
    });

    test.afterAll(async () => {
      console.log('After tests');
    });

    test('my test', async ({ page }) => {
      // ...
    });
    ```

    Alternatively, you can declare a hook **with a title**.

    ``` javascript
    test.beforeAll('Setup', async () => {
      console.log('Before tests');
    });
    ```

    **Arguments**

    - `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      Hook title.

    - `hookFunction`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Fixtures](class-fixtures "Fixtures"), [TestInfo](class-testinfo "TestInfo"))

      Hook function that takes one or two arguments: an object with worker fixtures and optional [TestInfo](class-testinfo "TestInfo").

    **Details**

    When multiple `beforeAll` hooks are added, they will run in the order of their registration.

    Note that worker process is restarted on test failures, and `beforeAll` hook runs again in the new worker. Learn more about [workers and failures](../test-retries).

    Playwright will continue running all applicable hooks even if some of them have failed.
- name: test.test.beforeEach
  id: api/class-test#test-before-each
  summary: Declares a beforeEach hook that is executed before each test
  belongs_to: Playwright Test
  description: |-
    ### test.beforeEach[​](#test-before-each "Direct link to test.beforeEach")

    Declares a `beforeEach` hook that is executed before each test.

    When called in the scope of a test file, runs before each test in the file. When called inside a [test.describe()](class-test#test-describe) group, runs before each test in the group.

    You can access all the same [Fixtures](class-fixtures "Fixtures") as the test body itself, and also the [TestInfo](class-testinfo "TestInfo") object that gives a lot of useful information. For example, you can navigate the page before starting the test.

    You can use [test.afterEach()](class-test#test-after-each) to teardown any resources set up in `beforeEach`.

    - `test.beforeEach(hookFunction)`
    - `test.beforeEach(title, hookFunction)`

    **Usage**

    ``` javascript
    import { test, expect } from '@playwright/test';

    test.beforeEach(async ({ page }) => {
      console.log(`Running ${test.info().title}`);
      await page.goto('https://my.start.url/');
    });

    test('my test', async ({ page }) => {
      expect(page.url()).toBe('https://my.start.url/');
    });
    ```

    Alternatively, you can declare a hook **with a title**.

    ``` javascript
    test.beforeEach('Open start URL', async ({ page }) => {
      console.log(`Running ${test.info().title}`);
      await page.goto('https://my.start.url/');
    });
    ```

    **Arguments**

    - `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      Hook title.

    - `hookFunction`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Fixtures](class-fixtures "Fixtures"), [TestInfo](class-testinfo "TestInfo"))

      Hook function that takes one or two arguments: an object with fixtures and optional [TestInfo](class-testinfo "TestInfo").

    **Details**

    When multiple `beforeEach` hooks are added, they will run in the order of their registration.

    Playwright will continue running all applicable hooks even if some of them have failed.
- name: test.test.describe
  id: api/class-test#test-describe
  summary: Declares a group of tests
  belongs_to: Playwright Test
  description: |-
    ### test.describe[​](#test-describe "Direct link to test.describe")

    Declares a group of tests.

    - `test.describe(title, callback)`
    - `test.describe(callback)`
    - `test.describe(title, details, callback)`

    **Usage**

    You can declare a group of tests with a title. The title will be visible in the test report as a part of each test's title.

    ``` javascript
    test.describe('two tests', () => {
      test('one', async ({ page }) => {
        // ...
      });

      test('two', async ({ page }) => {
        // ...
      });
    });
    ```

    **Anonymous group**

    You can also declare a test group without a title. This is convenient to give a group of tests a common option with [test.use()](class-test#test-use).

    ``` javascript
    test.describe(() => {
      test.use({ colorScheme: 'dark' });

      test('one', async ({ page }) => {
        // ...
      });

      test('two', async ({ page }) => {
        // ...
      });
    });
    ```

    **Tags**

    You can tag all tests in a group by providing additional details. Note that each tag must start with `@` symbol.

    ``` javascript
    import { test, expect } from '@playwright/test';

    test.describe('two tagged tests', {
      tag: '@smoke',
    }, () => {
      test('one', async ({ page }) => {
        // ...
      });

      test('two', async ({ page }) => {
        // ...
      });
    });
    ```

    Learn more about [tagging](../test-annotations#tag-tests).

    **Annotations**

    You can annotate all tests in a group by providing additional details.

    ``` javascript
    import { test, expect } from '@playwright/test';

    test.describe('two annotated tests', {
      annotation: {
        type: 'issue',
        description: 'https://github.com/microsoft/playwright/issues/23180',
      },
    }, () => {
      test('one', async ({ page }) => {
        // ...
      });

      test('two', async ({ page }) => {
        // ...
      });
    });
    ```

    Learn more about [test annotations](../test-annotations).

    **Arguments**

    - `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      Group title.

    - `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `tag`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

      - `annotation`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> *(optional)*

        - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      Additional details for all tests in the group.

    - `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")

      A callback that is run immediately when calling [test.describe()](class-test#test-describe). Any tests declared in this callback will belong to the group.

    &nbsp;
- name: test.test.describe.configure
  id: api/class-test#test-describe-configure
  summary: Configures the enclosing scope
  belongs_to: Playwright Test
  description: |-
    ### test.describe.configure[​](#test-describe-configure "Direct link to test.describe.configure")

    Configures the enclosing scope. Can be executed either on the top level or inside a describe. Configuration applies to the entire scope, regardless of whether it run before or after the test declaration.

    Learn more about the execution modes [here](../test-parallel).

    **Usage**

    - Running tests in parallel.

      ``` javascript
      // Run all the tests in the file concurrently using parallel workers.
      test.describe.configure({ mode: 'parallel' });
      test('runs in parallel 1', async ({ page }) => {});
      test('runs in parallel 2', async ({ page }) => {});
      ```

    - Running tests serially, retrying from the start.

      > note
      >
      > Running serially is not recommended. It is usually better to make your tests isolated, so they can be run independently.

      ``` javascript
      // Annotate tests as inter-dependent.
      test.describe.configure({ mode: 'serial' });
      test('runs first', async ({ page }) => {});
      test('runs second', async ({ page }) => {});
      ```

    - Configuring retries and timeout for each test.

      ``` javascript
      // Each test in the file will be retried twice and have a timeout of 20 seconds.
      test.describe.configure({ retries: 2, timeout: 20_000 });
      test('runs first', async ({ page }) => {});
      test('runs second', async ({ page }) => {});
      ```

    - Run multiple describes in parallel, but tests inside each describe in order.

      ``` javascript
      test.describe.configure({ mode: 'parallel' });

      test.describe('A, runs in parallel with B', () => {
        test.describe.configure({ mode: 'default' });
        test('in order A1', async ({ page }) => {});
        test('in order A2', async ({ page }) => {});
      });

      test.describe('B, runs in parallel with A', () => {
        test.describe.configure({ mode: 'default' });
        test('in order B1', async ({ page }) => {});
        test('in order B2', async ({ page }) => {});
      });
      ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `mode` "default" \| "parallel" \| "serial" *(optional)*

        Execution mode. Learn more about the execution modes [here](../test-parallel).

      - `retries` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        The number of retries for each test.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Timeout for each test in milliseconds. Overrides [testProject.timeout](class-testproject#test-project-timeout) and [testConfig.timeout](class-testconfig#test-config-timeout).

    &nbsp;
- name: test.test.describe.fixme
  id: api/class-test#test-describe-fixme
  summary: Declares a test group similarly to test.describe()
  belongs_to: Playwright Test
  description: |-
    ### test.describe.fixme[​](#test-describe-fixme "Direct link to test.describe.fixme")

    Declares a test group similarly to [test.describe()](class-test#test-describe). Tests in this group are marked as "fixme" and will not be executed.

    - `test.describe.fixme(title, callback)`
    - `test.describe.fixme(callback)`
    - `test.describe.fixme(title, details, callback)`

    **Usage**

    ``` javascript
    test.describe.fixme('broken tests that should be fixed', () => {
      test('example', async ({ page }) => {
        // This test will not run
      });
    });
    ```

    You can also omit the title.

    ``` javascript
    test.describe.fixme(() => {
      // ...
    });
    ```

    **Arguments**

    - `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      Group title.

    - `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `tag`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

      - `annotation`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> *(optional)*

        - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      See [test.describe()](class-test#test-describe) for details description.

    - `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")

      A callback that is run immediately when calling [test.describe.fixme()](class-test#test-describe-fixme). Any tests added in this callback will belong to the group, and will not be run.

    &nbsp;
- name: test.test.describe.only
  id: api/class-test#test-describe-only
  summary: Declares a focused group of tests
  belongs_to: Playwright Test
  description: |-
    ### test.describe.only[​](#test-describe-only "Direct link to test.describe.only")

    Declares a focused group of tests. If there are some focused tests or suites, all of them will be run but nothing else.

    - `test.describe.only(title, callback)`
    - `test.describe.only(callback)`
    - `test.describe.only(title, details, callback)`

    **Usage**

    ``` javascript
    test.describe.only('focused group', () => {
      test('in the focused group', async ({ page }) => {
        // This test will run
      });
    });
    test('not in the focused group', async ({ page }) => {
      // This test will not run
    });
    ```

    You can also omit the title.

    ``` javascript
    test.describe.only(() => {
      // ...
    });
    ```

    **Arguments**

    - `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      Group title.

    - `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `tag`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

      - `annotation`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> *(optional)*

        - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      See [test.describe()](class-test#test-describe) for details description.

    - `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")

      A callback that is run immediately when calling [test.describe.only()](class-test#test-describe-only). Any tests added in this callback will belong to the group.

    &nbsp;
- name: test.test.describe.parallel
  id: api/class-test#test-describe-parallel
  summary: See test.describe.configure() for the preferred way of configuring the execution mode
  belongs_to: Playwright Test
  description: |-
    ### test.describe.parallel[​](#test-describe-parallel "Direct link to test.describe.parallel")

    > Discouraged
    >
    > See [test.describe.configure()](class-test#test-describe-configure) for the preferred way of configuring the execution mode.

    Declares a group of tests that could be run in parallel. By default, tests in a single test file run one after another, but using [test.describe.parallel()](class-test#test-describe-parallel) allows them to run in parallel.

    - `test.describe.parallel(title, callback)`
    - `test.describe.parallel(callback)`
    - `test.describe.parallel(title, details, callback)`

    **Usage**

    ``` javascript
    test.describe.parallel('group', () => {
      test('runs in parallel 1', async ({ page }) => {});
      test('runs in parallel 2', async ({ page }) => {});
    });
    ```

    Note that parallel tests are executed in separate processes and cannot share any state or global variables. Each of the parallel tests executes all relevant hooks.

    You can also omit the title.

    ``` javascript
    test.describe.parallel(() => {
      // ...
    });
    ```

    **Arguments**

    - `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      Group title.

    - `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `tag`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

      - `annotation`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> *(optional)*

        - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      See [test.describe()](class-test#test-describe) for details description.

    - `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")

      A callback that is run immediately when calling [test.describe.parallel()](class-test#test-describe-parallel). Any tests added in this callback will belong to the group.

    &nbsp;
- name: test.test.describe.parallel.only
  id: api/class-test#test-describe-parallel-only
  summary: See test.describe.configure() for the preferred way of configuring the execution mode
  belongs_to: Playwright Test
  description: |-
    ### test.describe.parallel.only[​](#test-describe-parallel-only "Direct link to test.describe.parallel.only")

    > Discouraged
    >
    > See [test.describe.configure()](class-test#test-describe-configure) for the preferred way of configuring the execution mode.

    Declares a focused group of tests that could be run in parallel. This is similar to [test.describe.parallel()](class-test#test-describe-parallel), but focuses the group. If there are some focused tests or suites, all of them will be run but nothing else.

    - `test.describe.parallel.only(title, callback)`
    - `test.describe.parallel.only(callback)`
    - `test.describe.parallel.only(title, details, callback)`

    **Usage**

    ``` javascript
    test.describe.parallel.only('group', () => {
      test('runs in parallel 1', async ({ page }) => {});
      test('runs in parallel 2', async ({ page }) => {});
    });
    ```

    You can also omit the title.

    ``` javascript
    test.describe.parallel.only(() => {
      // ...
    });
    ```

    **Arguments**

    - `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      Group title.

    - `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `tag`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

      - `annotation`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> *(optional)*

        - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      See [test.describe()](class-test#test-describe) for details description.

    - `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")

      A callback that is run immediately when calling [test.describe.parallel.only()](class-test#test-describe-parallel-only). Any tests added in this callback will belong to the group.

    &nbsp;
- name: test.test.describe.serial
  id: api/class-test#test-describe-serial
  summary: See test.describe.configure() for the preferred way of configuring the execution mode
  belongs_to: Playwright Test
  description: |-
    ### test.describe.serial[​](#test-describe-serial "Direct link to test.describe.serial")

    > Discouraged
    >
    > See [test.describe.configure()](class-test#test-describe-configure) for the preferred way of configuring the execution mode.

    Declares a group of tests that should always be run serially. If one of the tests fails, all subsequent tests are skipped. All tests in a group are retried together.

    > note
    >
    > Using serial is not recommended. It is usually better to make your tests isolated, so they can be run independently.

    - `test.describe.serial(title, callback)`
    - `test.describe.serial(title)`
    - `test.describe.serial(title, details, callback)`

    **Usage**

    ``` javascript
    test.describe.serial('group', () => {
      test('runs first', async ({ page }) => {});
      test('runs second', async ({ page }) => {});
    });
    ```

    You can also omit the title.

    ``` javascript
    test.describe.serial(() => {
      // ...
    });
    ```

    **Arguments**

    - `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      Group title.

    - `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `tag`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

      - `annotation`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> *(optional)*

        - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      See [test.describe()](class-test#test-describe) for details description.

    - `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")

      A callback that is run immediately when calling [test.describe.serial()](class-test#test-describe-serial). Any tests added in this callback will belong to the group.

    &nbsp;
- name: test.test.describe.serial.only
  id: api/class-test#test-describe-serial-only
  summary: See test.describe.configure() for the preferred way of configuring the execution mode
  belongs_to: Playwright Test
  description: "### test.describe.serial.only[​](#test-describe-serial-only \"Direct link to test.describe.serial.only\")\n\n> Discouraged\n>\n> See [test.describe.configure()](class-test#test-describe-configure) for the preferred way of configuring the execution mode.\n\nDeclares a focused group of tests that should always be run serially. If one of the tests fails, all subsequent tests are skipped. All tests in a group are retried together. If there are some focused tests or suites, all of them will be run but nothing else.\n\n> note\n>\n> Using serial is not recommended. It is usually better to make your tests isolated, so they can be run independently.\n\n- `test.describe.serial.only(title, callback)`\n- `test.describe.serial.only(title)`\n- `test.describe.serial.only(title, details, callback)`\n\n**Usage**\n\n``` javascript\ntest.describe.serial.only('group', () => {\n  test('runs first', async ({ page }) => {\n  });\n  test('runs second', async ({ page }) => {\n  });\n});\n```\n\nYou can also omit the title.\n\n``` javascript\ntest.describe.serial.only(() => {\n  // ...\n});\n```\n\n**Arguments**\n\n- `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Group title.\n\n- `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `tag`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n  - `annotation`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> *(optional)*\n\n    - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  See [test.describe()](class-test#test-describe) for details description.\n\n- `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")\n\n  A callback that is run immediately when calling [test.describe.serial.only()](class-test#test-describe-serial-only). Any tests added in this callback will belong to the group.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-test](https://playwright.dev/docs/api/class-test)"
- name: test.test.describe.skip
  id: api/class-test#test-describe-skip
  summary: Declares a skipped test group, similarly to test.describe()
  belongs_to: Playwright Test
  description: |-
    ### test.describe.skip[​](#test-describe-skip "Direct link to test.describe.skip")

    Declares a skipped test group, similarly to [test.describe()](class-test#test-describe). Tests in the skipped group are never run.

    - `test.describe.skip(title, callback)`
    - `test.describe.skip(title)`
    - `test.describe.skip(title, details, callback)`

    **Usage**

    ``` javascript
    test.describe.skip('skipped group', () => {
      test('example', async ({ page }) => {
        // This test will not run
      });
    });
    ```

    You can also omit the title.

    ``` javascript
    test.describe.skip(() => {
      // ...
    });
    ```

    **Arguments**

    - `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Group title.

    - `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `tag`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

      - `annotation`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> *(optional)*

        - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      See [test.describe()](class-test#test-describe) for details description.

    - `callback` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")

      A callback that is run immediately when calling [test.describe.skip()](class-test#test-describe-skip). Any tests added in this callback will belong to the group, and will not be run.

    &nbsp;
- name: test.test.expect
  id: api/class-test#test-expect
  summary: expect function can be used to create test assertions
  belongs_to: Playwright Test
  description: |-
    ### test.expect[​](#test-expect "Direct link to test.expect")

    `expect` function can be used to create test assertions. Read more about [test assertions](../test-assertions).

    **Usage**

    ``` javascript
    test('example', async ({ page }) => {
      await test.expect(page).toHaveTitle('Title');
    });
    ```

    **Type**

    - [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

    ## Deprecated[​](#deprecated "Direct link to Deprecated")
- name: test.test.extend
  id: api/class-test#test-extend
  summary: Extends the test object by defining fixtures and/or options that can be used in the tests
  belongs_to: Playwright Test
  description: |-
    ### test.extend[​](#test-extend "Direct link to test.extend")

    Extends the `test` object by defining fixtures and/or options that can be used in the tests.

    **Usage**

    First define a fixture and/or an option.

    - TypeScript
    - JavaScript

    ``` javascript
    import { test as base } from '@playwright/test';
    import { TodoPage } from './todo-page';

    export type Options = { defaultItem: string };

    // Extend basic test by providing a "defaultItem" option and a "todoPage" fixture.
    export const test = base.extend<Options & { todoPage: TodoPage }>({
      // Define an option and provide a default value.
      // We can later override it in the config.
      defaultItem: ['Do stuff', { option: true }],

      // Define a fixture. Note that it can use built-in fixture "page"
      // and a new option "defaultItem".
      todoPage: async ({ page, defaultItem }, use) => {
        const todoPage = new TodoPage(page);
        await todoPage.goto();
        await todoPage.addToDo(defaultItem);
        await use(todoPage);
        await todoPage.removeAll();
      },
    });
    ```

    ``` javascript
    const base = require('@playwright/test');
    const { TodoPage } = require('./todo-page');

    // Extend basic test by providing a "defaultItem" option and a "todoPage" fixture.
    exports.test = base.test.extend({
      // Define an option and provide a default value.
      // We can later override it in the config.
      defaultItem: ['Do stuff', { option: true }],

      // Define a fixture. Note that it can use built-in fixture "page"
      // and a new option "defaultItem".
      todoPage: async ({ page, defaultItem }, use) => {
        const todoPage = new TodoPage(page);
        await todoPage.goto();
        await todoPage.addToDo(defaultItem);
        await use(todoPage);
        await todoPage.removeAll();
      },
    });
    ```

    Then use the fixture in the test.

    ``` javascript
    import { test } from './my-test';

    test('test 1', async ({ todoPage }) => {
      await todoPage.addToDo('my todo');
      // ...
    });
    ```

    Configure the option in config file.

    - TypeScript
    - JavaScript

    ``` javascript
    import { defineConfig } from '@playwright/test';
    import type { Options } from './my-test';

    export default defineConfig<Options>({
      projects: [
        {
          name: 'shopping',
          use: { defaultItem: 'Buy milk' },
        },
        {
          name: 'wellbeing',
          use: { defaultItem: 'Exercise!' },
        },
      ]
    });
    ```

    ``` javascript
    // @ts-check

    module.exports = defineConfig({
      projects: [
        {
          name: 'shopping',
          use: { defaultItem: 'Buy milk' },
        },
        {
          name: 'wellbeing',
          use: { defaultItem: 'Exercise!' },
        },
      ]
    });
    ```

    Learn more about [fixtures](../test-fixtures) and [parametrizing tests](../test-parameterize).

    **Arguments**

    - `fixtures` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

      An object containing fixtures and/or options. Learn more about [fixtures format](../test-fixtures).

    **Returns**

    - [Test](class-test "Test")

    &nbsp;
- name: test.test.fail
  id: api/class-test#test-fail
  summary: Marks a test as "should fail". Playwright runs this test and ensures that it is actually failing
  belongs_to: Playwright Test
  description: |-
    ### test.fail[​](#test-fail "Direct link to test.fail")

    Marks a test as "should fail". Playwright runs this test and ensures that it is actually failing. This is useful for documentation purposes to acknowledge that some functionality is broken until it is fixed.

    To declare a "failing" test:

    - `test.fail(title, body)`
    - `test.fail(title, details, body)`

    To annotate test as "failing" at runtime:

    - `test.fail(condition, description)`
    - `test.fail(callback, description)`
    - `test.fail()`

    **Usage**

    You can declare a test as failing, so that Playwright ensures it actually fails.

    ``` javascript
    import { test, expect } from '@playwright/test';

    test.fail('not yet ready', async ({ page }) => {
      // ...
    });
    ```

    If your test fails in some configurations, but not all, you can mark the test as failing inside the test body based on some condition. We recommend passing a `description` argument in this case.

    ``` javascript
    import { test, expect } from '@playwright/test';

    test('fail in WebKit', async ({ page, browserName }) => {
      test.fail(browserName === 'webkit', 'This feature is not implemented for Mac yet');
      // ...
    });
    ```

    You can mark all tests in a file or [test.describe()](class-test#test-describe) group as "should fail" based on some condition with a single `test.fail(callback, description)` call.

    ``` javascript
    import { test, expect } from '@playwright/test';

    test.fail(({ browserName }) => browserName === 'webkit', 'not implemented yet');

    test('fail in WebKit 1', async ({ page }) => {
      // ...
    });
    test('fail in WebKit 2', async ({ page }) => {
      // ...
    });
    ```

    You can also call `test.fail()` without arguments inside the test body to always mark the test as failed. We recommend declaring a failing test with `test.fail(title, body)` instead.

    ``` javascript
    import { test, expect } from '@playwright/test';

    test('less readable', async ({ page }) => {
      test.fail();
      // ...
    });
    ```

    **Arguments**

    - `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      Test title.

    - `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `tag`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

      - `annotation`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> *(optional)*

        - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      See [test()](class-test#test-call) for test details description.

    - `body`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Fixtures](class-fixtures "Fixtures"), [TestInfo](class-testinfo "TestInfo")) *(optional)*

      Test body that takes one or two arguments: an object with fixtures and optional [TestInfo](class-testinfo "TestInfo").

    - `condition` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

      Test is marked as "should fail" when the condition is `true`.

    - `callback`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Fixtures](class-fixtures "Fixtures")):[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")*(optional)*

      A function that returns whether to mark as "should fail", based on test fixtures. Test or tests are marked as "should fail" when the return value is `true`.

    - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      Optional description that will be reflected in a test report.

    &nbsp;
- name: test.test.fixme
  id: api/class-test#test-fixme
  summary: Mark a test as "fixme", with the intention to fix it
  belongs_to: Playwright Test
  description: |-
    ### test.fixme[​](#test-fixme "Direct link to test.fixme")

    Mark a test as "fixme", with the intention to fix it. Playwright will not run the test past the `test.fixme()` call.

    To declare a "fixme" test:

    - `test.fixme(title, body)`
    - `test.fixme(title, details, body)`

    To annotate test as "fixme" at runtime:

    - `test.fixme(condition, description)`
    - `test.fixme(callback, description)`
    - `test.fixme()`

    **Usage**

    You can declare a test as to be fixed, and Playwright will not run it.

    ``` javascript
    import { test, expect } from '@playwright/test';

    test.fixme('to be fixed', async ({ page }) => {
      // ...
    });
    ```

    If your test should be fixed in some configurations, but not all, you can mark the test as "fixme" inside the test body based on some condition. We recommend passing a `description` argument in this case. Playwright will run the test, but abort it immediately after the `test.fixme` call.

    ``` javascript
    import { test, expect } from '@playwright/test';

    test('to be fixed in Safari', async ({ page, browserName }) => {
      test.fixme(browserName === 'webkit', 'This feature breaks in Safari for some reason');
      // ...
    });
    ```

    You can mark all tests in a file or [test.describe()](class-test#test-describe) group as "fixme" based on some condition with a single `test.fixme(callback, description)` call.

    ``` javascript
    import { test, expect } from '@playwright/test';

    test.fixme(({ browserName }) => browserName === 'webkit', 'Should figure out the issue');

    test('to be fixed in Safari 1', async ({ page }) => {
      // ...
    });
    test('to be fixed in Safari 2', async ({ page }) => {
      // ...
    });
    ```

    You can also call `test.fixme()` without arguments inside the test body to always mark the test as failed. We recommend using `test.fixme(title, body)` instead.

    ``` javascript
    import { test, expect } from '@playwright/test';

    test('less readable', async ({ page }) => {
      test.fixme();
      // ...
    });
    ```

    **Arguments**

    - `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      Test title.

    - `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `tag`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

      - `annotation`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> *(optional)*

        - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      See [test()](class-test#test-call) for test details description.

    - `body`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Fixtures](class-fixtures "Fixtures"), [TestInfo](class-testinfo "TestInfo")) *(optional)*

      Test body that takes one or two arguments: an object with fixtures and optional [TestInfo](class-testinfo "TestInfo").

    - `condition` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

      Test is marked as "should fail" when the condition is `true`.

    - `callback`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Fixtures](class-fixtures "Fixtures")):[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")*(optional)*

      A function that returns whether to mark as "should fail", based on test fixtures. Test or tests are marked as "should fail" when the return value is `true`.

    - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      Optional description that will be reflected in a test report.

    &nbsp;
- name: test.test.info
  id: api/class-test#test-info
  summary: Returns information about the currently running test
  belongs_to: Playwright Test
  description: |-
    ### test.info[​](#test-info "Direct link to test.info")

    Returns information about the currently running test. This method can only be called during the test execution, otherwise it throws.

    **Usage**

    ``` javascript
    test('example test', async ({ page }) => {
      // ...
      await test.info().attach('screenshot', {
        body: await page.screenshot(),
        contentType: 'image/png',
      });
    });
    ```

    **Returns**

    - [TestInfo](class-testinfo "TestInfo")

    &nbsp;
- name: test.test.only
  id: api/class-test#test-only
  summary: Declares a focused test
  belongs_to: Playwright Test
  description: |-
    ### test.only[​](#test-only "Direct link to test.only")

    Declares a focused test. If there are some focused tests or suites, all of them will be run but nothing else.

    - `test.only(title, body)`
    - `test.only(title, details, body)`

    **Usage**

    ``` javascript
    test.only('focus this test', async ({ page }) => {
      // Run only focused tests in the entire project.
    });
    ```

    **Arguments**

    - `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Test title.

    - `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `tag`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

      - `annotation`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> *(optional)*

        - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      See [test()](class-test#test-call) for test details description.

    - `body`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Fixtures](class-fixtures "Fixtures"), [TestInfo](class-testinfo "TestInfo"))

      Test body that takes one or two arguments: an object with fixtures and optional [TestInfo](class-testinfo "TestInfo").

    &nbsp;
- name: test.test.setTimeout
  id: api/class-test#test-set-timeout
  summary: Changes the timeout for the test
  belongs_to: Playwright Test
  description: |-
    ### test.setTimeout[​](#test-set-timeout "Direct link to test.setTimeout")

    Changes the timeout for the test. Zero means no timeout. Learn more about [various timeouts](../test-timeouts).

    Timeout for the currently running test is available through [testInfo.timeout](class-testinfo#test-info-timeout).

    **Usage**

    - Changing test timeout.

      ``` javascript
      test('very slow test', async ({ page }) => {
        test.setTimeout(120000);
        // ...
      });
      ```

    - Changing timeout from a slow `beforeEach` or `afterEach` hook. Note that this affects the test timeout that is shared with `beforeEach`/`afterEach` hooks.

      ``` javascript
      test.beforeEach(async ({ page }, testInfo) => {
        // Extend timeout for all tests running this hook by 30 seconds.
        test.setTimeout(testInfo.timeout + 30000);
      });
      ```

    - Changing timeout for a `beforeAll` or `afterAll` hook. Note this affects the hook's timeout, not the test timeout.

      ``` javascript
      test.beforeAll(async () => {
        // Set timeout for this hook.
        test.setTimeout(60000);
      });
      ```

    - Changing timeout for all tests in a [test.describe()](class-test#test-describe) group.

      ``` javascript
      test.describe('group', () => {
        // Applies to all tests in this group.
        test.describe.configure({ timeout: 60000 });

        test('test one', async () => { /* ... */ });
        test('test two', async () => { /* ... */ });
        test('test three', async () => { /* ... */ });
      });
      ```

    **Arguments**

    - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Timeout in milliseconds.

    &nbsp;
- name: test.test.skip
  id: api/class-test#test-skip
  summary: Skip a test
  belongs_to: Playwright Test
  description: |-
    ### test.skip[​](#test-skip "Direct link to test.skip")

    Skip a test. Playwright will not run the test past the `test.skip()` call.

    Skipped tests are not supposed to be ever run. If you intent to fix the test, use [test.fixme()](class-test#test-fixme) instead.

    To declare a skipped test:

    - `test.skip(title, body)`
    - `test.skip(title, details, body)`

    To skip a test at runtime:

    - `test.skip(condition, description)`
    - `test.skip(callback, description)`
    - `test.skip()`

    **Usage**

    You can declare a skipped test, and Playwright will not run it.

    ``` javascript
    import { test, expect } from '@playwright/test';

    test.skip('never run', async ({ page }) => {
      // ...
    });
    ```

    If your test should be skipped in some configurations, but not all, you can skip the test inside the test body based on some condition. We recommend passing a `description` argument in this case. Playwright will run the test, but abort it immediately after the `test.skip` call.

    ``` javascript
    import { test, expect } from '@playwright/test';

    test('Safari-only test', async ({ page, browserName }) => {
      test.skip(browserName !== 'webkit', 'This feature is Safari-only');
      // ...
    });
    ```

    You can skip all tests in a file or [test.describe()](class-test#test-describe) group based on some condition with a single `test.skip(callback, description)` call.

    ``` javascript
    import { test, expect } from '@playwright/test';

    test.skip(({ browserName }) => browserName !== 'webkit', 'Safari-only');

    test('Safari-only test 1', async ({ page }) => {
      // ...
    });
    test('Safari-only test 2', async ({ page }) => {
      // ...
    });
    ```

    You can also call `test.skip()` without arguments inside the test body to always mark the test as failed. We recommend using `test.skip(title, body)` instead.

    ``` javascript
    import { test, expect } from '@playwright/test';

    test('less readable', async ({ page }) => {
      test.skip();
      // ...
    });
    ```

    **Arguments**

    - `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      Test title.

    - `details` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `tag`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

      - `annotation`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> *(optional)*

        - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      See [test()](class-test#test-call) for test details description.

    - `body`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Fixtures](class-fixtures "Fixtures"), [TestInfo](class-testinfo "TestInfo")) *(optional)*

      Test body that takes one or two arguments: an object with fixtures and optional [TestInfo](class-testinfo "TestInfo").

    - `condition` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

      Test is marked as "should fail" when the condition is `true`.

    - `callback`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Fixtures](class-fixtures "Fixtures")):[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")*(optional)*

      A function that returns whether to mark as "should fail", based on test fixtures. Test or tests are marked as "should fail" when the return value is `true`.

    - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      Optional description that will be reflected in a test report.

    &nbsp;
- name: test.test.slow
  id: api/class-test#test-slow
  summary: Marks a test as "slow". Slow test will be given triple the default timeout
  belongs_to: Playwright Test
  description: |-
    ### test.slow[​](#test-slow "Direct link to test.slow")

    Marks a test as "slow". Slow test will be given triple the default timeout.

    Note that [test.slow()](class-test#test-slow) cannot be used in a `beforeAll` or `afterAll` hook. Use [test.setTimeout()](class-test#test-set-timeout) instead.

    - `test.slow()`
    - `test.slow(condition, description)`
    - `test.slow(callback, description)`

    **Usage**

    You can mark a test as slow by calling `test.slow()` inside the test body.

    ``` javascript
    import { test, expect } from '@playwright/test';

    test('slow test', async ({ page }) => {
      test.slow();
      // ...
    });
    ```

    If your test is slow in some configurations, but not all, you can mark it as slow based on a condition. We recommend passing a `description` argument in this case.

    ``` javascript
    import { test, expect } from '@playwright/test';

    test('slow in Safari', async ({ page, browserName }) => {
      test.slow(browserName === 'webkit', 'This feature is slow in Safari');
      // ...
    });
    ```

    You can mark all tests in a file or [test.describe()](class-test#test-describe) group as "slow" based on some condition by passing a callback.

    ``` javascript
    import { test, expect } from '@playwright/test';

    test.slow(({ browserName }) => browserName === 'webkit', 'all tests are slow in Safari');

    test('slow in Safari 1', async ({ page }) => {
      // ...
    });
    test('fail in Safari 2', async ({ page }) => {
      // ...
    });
    ```

    **Arguments**

    - `condition` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

      Test is marked as "slow" when the condition is `true`.

    - `callback`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")([Fixtures](class-fixtures "Fixtures")):[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")*(optional)*

      A function that returns whether to mark as "slow", based on test fixtures. Test or tests are marked as "slow" when the return value is `true`.

    - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      Optional description that will be reflected in a test report.

    &nbsp;
- name: test.test.step
  id: api/class-test#test-step
  summary: Declares a test step that is shown in the report
  belongs_to: Playwright Test
  description: |-
    ### test.step[​](#test-step "Direct link to test.step")

    Declares a test step that is shown in the report.

    **Usage**

    ``` javascript
    import { test, expect } from '@playwright/test';

    test('test', async ({ page }) => {
      await test.step('Log in', async () => {
        // ...
      });

      await test.step('Outer step', async () => {
        // ...
        // You can nest steps inside each other.
        await test.step('Inner step', async () => {
          // ...
        });
      });
    });
    ```

    **Arguments**

    - `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Step name.

    - `body`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")():[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>

      Step body.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `box` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to box the step in the report. Defaults to `false`. When the step is boxed, errors thrown from the step internals point to the step call site. See below for more details.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>

    **Details**

    The method returns the value returned by the step callback.

    ``` javascript
    import { test, expect } from '@playwright/test';

    test('test', async ({ page }) => {
      const user = await test.step('Log in', async () => {
        // ...
        return 'john';
      });
      expect(user).toBe('john');
    });
    ```

    **Decorator**

    You can use TypeScript method decorators to turn a method into a step. Each call to the decorated method will show up as a step in the report.

    ``` javascript
    function step(target: Function, context: ClassMethodDecoratorContext) {
      return function replacementMethod(...args: any) {
        const name = this.constructor.name + '.' + (context.name as string);
        return test.step(name, async () => {
          return await target.call(this, ...args);
        });
      };
    }

    class LoginPage {
      constructor(readonly page: Page) {}

      @step
      async login() {
        const account = { username: 'Alice', password: 's3cr3t' };
        await this.page.getByLabel('Username or email address').fill(account.username);
        await this.page.getByLabel('Password').fill(account.password);
        await this.page.getByRole('button', { name: 'Sign in' }).click();
        await expect(this.page.getByRole('button', { name: 'View profile and more' })).toBeVisible();
      }
    }

    test('example', async ({ page }) => {
      const loginPage = new LoginPage(page);
      await loginPage.login();
    });
    ```

    **Boxing**

    When something inside a step fails, you would usually see the error pointing to the exact action that failed. For example, consider the following login step:

    ``` javascript
    async function login(page) {
      await test.step('login', async () => {
        const account = { username: 'Alice', password: 's3cr3t' };
        await page.getByLabel('Username or email address').fill(account.username);
        await page.getByLabel('Password').fill(account.password);
        await page.getByRole('button', { name: 'Sign in' }).click();
        await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();
      });
    }

    test('example', async ({ page }) => {
      await page.goto('https://github.com/login');
      await login(page);
    });
    ```

    ``` javascript
    Error: Timed out 5000ms waiting for expect(locator).toBeVisible()
      ... error details omitted ...

       8 |     await page.getByRole('button', { name: 'Sign in' }).click();
    >  9 |     await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();
         |                                                                               ^
      10 |   });
    ```

    As we see above, the test may fail with an error pointing inside the step. If you would like the error to highlight the "login" step instead of its internals, use the `box` option. An error inside a boxed step points to the step call site.

    ``` javascript
    async function login(page) {
      await test.step('login', async () => {
        // ...
      }, { box: true });  // Note the "box" option here.
    }
    ```

    ``` javascript
    Error: Timed out 5000ms waiting for expect(locator).toBeVisible()
      ... error details omitted ...

      14 |   await page.goto('https://github.com/login');
    > 15 |   await login(page);
         |         ^
      16 | });
    ```

    You can also create a TypeScript decorator for a boxed step, similar to a regular step decorator above:

    ``` javascript
    function boxedStep(target: Function, context: ClassMethodDecoratorContext) {
      return function replacementMethod(...args: any) {
        const name = this.constructor.name + '.' + (context.name as string);
        return test.step(name, async () => {
          return await target.call(this, ...args);
        }, { box: true });  // Note the "box" option here.
      };
    }

    class LoginPage {
      constructor(readonly page: Page) {}

      @boxedStep
      async login() {
        // ....
      }
    }

    test('example', async ({ page }) => {
      const loginPage = new LoginPage(page);
      await loginPage.login();  // <-- Error will be reported on this line.
    });
    ```
- name: test.test.use
  id: api/class-test#test-use
  summary: Specifies options or fixtures to use in a single test file or a test.describe() group
  belongs_to: Playwright Test
  description: |-
    ### test.use[​](#test-use "Direct link to test.use")

    Specifies options or fixtures to use in a single test file or a [test.describe()](class-test#test-describe) group. Most useful to set an option, for example set `locale` to configure `context` fixture.

    **Usage**

    ``` javascript
    import { test, expect } from '@playwright/test';

    test.use({ locale: 'en-US' });

    test('test with locale', async ({ page }) => {
      // Default context and page have locale as specified
    });
    ```

    **Arguments**

    - `options` [TestOptions](class-testoptions "TestOptions")

      An object with local options.

    **Details**

    `test.use` can be called either in the global scope or inside `test.describe`. It is an error to call it within `beforeEach` or `beforeAll`.

    It is also possible to override a fixture by providing a function.

    ``` javascript
    import { test, expect } from '@playwright/test';

    test.use({
      locale: async ({}, use) => {
        // Read locale from some configuration file.
        const locale = await fs.promises.readFile('test-locale', 'utf-8');
        await use(locale);
      },
    });

    test('test with locale', async ({ page }) => {
      // Default context and page have locale as specified
    });
    ```

    ## Properties[​](#properties "Direct link to Properties")
- name: TestCase
  id: api/class-testcase
  summary: TestCase corresponds to every test() call in a test file
  description: "# TestCase\n\n`TestCase` corresponds to every [test()](class-test#test-call) call in a test file. When a single [test()](class-test#test-call) is running in multiple projects or repeated multiple times, it will have multiple `TestCase` objects in corresponding projects' suites.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### ok[​](#test-case-ok \"Direct link to ok\")\n\nWhether the test is considered running fine. Non-ok tests fail the test run with non-zero exit code.\n\n**Usage**\n\n``` javascript\ntestCase.ok();\n```\n\n**Returns**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### outcome[​](#test-case-outcome \"Direct link to outcome\")\n\nTesting outcome for this test. Note that outcome is not the same as [testResult.status](class-testresult#test-result-status):\n\n- Test that is expected to fail and actually fails is `'expected'`.\n- Test that passes on a second retry is `'flaky'`.\n\n**Usage**\n\n``` javascript\ntestCase.outcome();\n```\n\n**Returns**\n\n- \"skipped\" \\| \"expected\" \\| \"unexpected\" \\| \"flaky\"\n\n### titlePath[​](#test-case-title-path \"Direct link to titlePath\")\n\nReturns a list of titles from the root down to this test.\n\n**Usage**\n\n``` javascript\ntestCase.titlePath();\n```\n\n**Returns**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n## Properties[​](#properties \"Direct link to Properties\")\n\n### annotations[​](#test-case-annotations \"Direct link to annotations\")\n\nThe list of annotations applicable to the current test. Includes:\n\n- annotations defined on the test or suite via [test()](class-test#test-call) and [test.describe()](class-test#test-describe);\n- annotations implicitly added by methods [test.skip()](class-test#test-skip), [test.fixme()](class-test#test-fixme) and [test.fail()](class-test#test-fail);\n- annotations appended to [testInfo.annotations](class-testinfo#test-info-annotations) during the test execution.\n\nAnnotations are available during test execution through [testInfo.annotations](class-testinfo#test-info-annotations).\n\nLearn more about [test annotations](../test-annotations).\n\n**Usage**\n\n``` javascript\ntestCase.annotations\n```\n\n**Type**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Annotation type, for example `'skip'` or `'fail'`.\n\n  - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Optional description.\n\n### expectedStatus[​](#test-case-expected-status \"Direct link to expectedStatus\")\n\nExpected test status.\n\n- Tests marked as [test.skip()](class-test#test-skip) or [test.fixme()](class-test#test-fixme) are expected to be `'skipped'`.\n- Tests marked as [test.fail()](class-test#test-fail) are expected to be `'failed'`.\n- Other tests are expected to be `'passed'`.\n\nSee also [testResult.status](class-testresult#test-result-status) for the actual status.\n\n**Usage**\n\n``` javascript\ntestCase.expectedStatus\n```\n\n**Type**\n\n- \"passed\" \\| \"failed\" \\| \"timedOut\" \\| \"skipped\" \\| \"interrupted\"\n\n### id[​](#test-case-id \"Direct link to id\")\n\nA test ID that is computed based on the test file name, test title and project name. The ID is unique within Playwright session.\n\n**Usage**\n\n``` javascript\ntestCase.id\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### location[​](#test-case-location \"Direct link to location\")\n\nLocation in the source where the test is defined.\n\n**Usage**\n\n``` javascript\ntestCase.location\n```\n\n**Type**\n\n- [Location](class-location \"Location\")\n\n### parent[​](#test-case-parent \"Direct link to parent\")\n\nSuite this test case belongs to.\n\n**Usage**\n\n``` javascript\ntestCase.parent\n```\n\n**Type**\n\n- [Suite](class-suite \"Suite\")\n\n### repeatEachIndex[​](#test-case-repeat-each-index \"Direct link to repeatEachIndex\")\n\nContains the repeat index when running in \"repeat each\" mode. This mode is enabled by passing `--repeat-each` to the [command line](../test-cli).\n\n**Usage**\n\n``` javascript\ntestCase.repeatEachIndex\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### results[​](#test-case-results \"Direct link to results\")\n\nResults for each run of this test.\n\n**Usage**\n\n``` javascript\ntestCase.results\n```\n\n**Type**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[TestResult](class-testresult \"TestResult\")\\>\n\n### retries[​](#test-case-retries \"Direct link to retries\")\n\nThe maximum number of retries given to this test in the configuration.\n\nLearn more about [test retries](../test-retries#retries).\n\n**Usage**\n\n``` javascript\ntestCase.retries\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### tags[​](#test-case-tags \"Direct link to tags\")\n\nThe list of tags defined on the test or suite via [test()](class-test#test-call) or [test.describe()](class-test#test-describe), as well as `@`-tokens extracted from test and suite titles.\n\nLearn more about [test tags](../test-annotations#tag-tests).\n\n**Usage**\n\n``` javascript\ntestCase.tags\n```\n\n**Type**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### timeout[​](#test-case-timeout \"Direct link to timeout\")\n\nThe timeout given to the test. Affected by [testConfig.timeout](class-testconfig#test-config-timeout), [testProject.timeout](class-testproject#test-project-timeout), [test.setTimeout()](class-test#test-set-timeout), [test.slow()](class-test#test-slow) and [testInfo.setTimeout()](class-testinfo#test-info-set-timeout).\n\n**Usage**\n\n``` javascript\ntestCase.timeout\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### title[​](#test-case-title \"Direct link to title\")\n\nTest title as passed to the [test()](class-test#test-call) call.\n\n**Usage**\n\n``` javascript\ntestCase.title\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### type[​](#test-case-type \"Direct link to type\")\n\nReturns \"test\". Useful for detecting test cases in [suite.entries()](class-suite#suite-entries).\n\n**Usage**\n\n``` javascript\ntestCase.type\n```\n\n**Type**\n\n- \"test\"\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-testcase](https://playwright.dev/docs/api/class-testcase)"
- name: testCase.annotations
  id: api/class-testcase#test-case-annotations
  summary: The list of annotations applicable to the current test
  belongs_to: TestCase
  description: |-
    ### annotations[​](#test-case-annotations "Direct link to annotations")

    The list of annotations applicable to the current test. Includes:

    - annotations defined on the test or suite via [test()](class-test#test-call) and [test.describe()](class-test#test-describe);
    - annotations implicitly added by methods [test.skip()](class-test#test-skip), [test.fixme()](class-test#test-fixme) and [test.fail()](class-test#test-fail);
    - annotations appended to [testInfo.annotations](class-testinfo#test-info-annotations) during the test execution.

    Annotations are available during test execution through [testInfo.annotations](class-testinfo#test-info-annotations).

    Learn more about [test annotations](../test-annotations).

    **Usage**

    ``` javascript
    testCase.annotations
    ```

    **Type**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `type`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        Annotation type, for example `'skip'` or `'fail'`.

      - `description`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")*(optional)*

        Optional description.

    &nbsp;
- name: testCase.expectedStatus
  id: api/class-testcase#test-case-expected-status
  summary: Expected test status
  belongs_to: TestCase
  description: |-
    ### expectedStatus[​](#test-case-expected-status "Direct link to expectedStatus")

    Expected test status.

    - Tests marked as [test.skip()](class-test#test-skip) or [test.fixme()](class-test#test-fixme) are expected to be `'skipped'`.
    - Tests marked as [test.fail()](class-test#test-fail) are expected to be `'failed'`.
    - Other tests are expected to be `'passed'`.

    See also [testResult.status](class-testresult#test-result-status) for the actual status.

    **Usage**

    ``` javascript
    testCase.expectedStatus
    ```

    **Type**

    - "passed" \| "failed" \| "timedOut" \| "skipped" \| "interrupted"

    &nbsp;
- name: testCase.id
  id: api/class-testcase#test-case-id
  summary: A test ID that is computed based on the test file name, test title and project name
  belongs_to: TestCase
  description: |-
    ### id[​](#test-case-id "Direct link to id")

    A test ID that is computed based on the test file name, test title and project name. The ID is unique within Playwright session.

    **Usage**

    ``` javascript
    testCase.id
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testCase.location
  id: api/class-testcase#test-case-location
  summary: Location in the source where the test is defined
  belongs_to: TestCase
  description: |-
    ### location[​](#test-case-location "Direct link to location")

    Location in the source where the test is defined.

    **Usage**

    ``` javascript
    testCase.location
    ```

    **Type**

    - [Location](class-location "Location")

    &nbsp;
- name: testCase.ok
  id: api/class-testcase#test-case-ok
  summary: Whether the test is considered running fine
  belongs_to: TestCase
  description: |-
    ### ok[​](#test-case-ok "Direct link to ok")

    Whether the test is considered running fine. Non-ok tests fail the test run with non-zero exit code.

    **Usage**

    ``` javascript
    testCase.ok();
    ```

    **Returns**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")
- name: testCase.outcome
  id: api/class-testcase#test-case-outcome
  summary: Testing outcome for this test
  belongs_to: TestCase
  description: |-
    ### outcome[​](#test-case-outcome "Direct link to outcome")

    Testing outcome for this test. Note that outcome is not the same as [testResult.status](class-testresult#test-result-status):

    - Test that is expected to fail and actually fails is `'expected'`.
    - Test that passes on a second retry is `'flaky'`.

    **Usage**

    ``` javascript
    testCase.outcome();
    ```

    **Returns**

    - "skipped" \| "expected" \| "unexpected" \| "flaky"

    &nbsp;
- name: testCase.parent
  id: api/class-testcase#test-case-parent
  summary: Suite this test case belongs to
  belongs_to: TestCase
  description: |-
    ### parent[​](#test-case-parent "Direct link to parent")

    Suite this test case belongs to.

    **Usage**

    ``` javascript
    testCase.parent
    ```

    **Type**

    - [Suite](class-suite "Suite")

    &nbsp;
- name: testCase.repeatEachIndex
  id: api/class-testcase#test-case-repeat-each-index
  summary: Contains the repeat index when running in "repeat each" mode
  belongs_to: TestCase
  description: |-
    ### repeatEachIndex[​](#test-case-repeat-each-index "Direct link to repeatEachIndex")

    Contains the repeat index when running in "repeat each" mode. This mode is enabled by passing `--repeat-each` to the [command line](../test-cli).

    **Usage**

    ``` javascript
    testCase.repeatEachIndex
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testCase.results
  id: api/class-testcase#test-case-results
  summary: Results for each run of this test
  belongs_to: TestCase
  description: |-
    ### results[​](#test-case-results "Direct link to results")

    Results for each run of this test.

    **Usage**

    ``` javascript
    testCase.results
    ```

    **Type**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[TestResult](class-testresult "TestResult")\>

    &nbsp;
- name: testCase.retries
  id: api/class-testcase#test-case-retries
  summary: The maximum number of retries given to this test in the configuration
  belongs_to: TestCase
  description: |-
    ### retries[​](#test-case-retries "Direct link to retries")

    The maximum number of retries given to this test in the configuration.

    Learn more about [test retries](../test-retries#retries).

    **Usage**

    ``` javascript
    testCase.retries
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testCase.tags
  id: api/class-testcase#test-case-tags
  summary: The list of tags defined on the test or suite via test() or test.describe(), as well as @-tokens extracted from test and suite titles
  belongs_to: TestCase
  description: |-
    ### tags[​](#test-case-tags "Direct link to tags")

    The list of tags defined on the test or suite via [test()](class-test#test-call) or [test.describe()](class-test#test-describe), as well as `@`-tokens extracted from test and suite titles.

    Learn more about [test tags](../test-annotations#tag-tests).

    **Usage**

    ``` javascript
    testCase.tags
    ```

    **Type**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: testCase.timeout
  id: api/class-testcase#test-case-timeout
  summary: The timeout given to the test
  belongs_to: TestCase
  description: |-
    ### timeout[​](#test-case-timeout "Direct link to timeout")

    The timeout given to the test. Affected by [testConfig.timeout](class-testconfig#test-config-timeout), [testProject.timeout](class-testproject#test-project-timeout), [test.setTimeout()](class-test#test-set-timeout), [test.slow()](class-test#test-slow) and [testInfo.setTimeout()](class-testinfo#test-info-set-timeout).

    **Usage**

    ``` javascript
    testCase.timeout
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testCase.title
  id: api/class-testcase#test-case-title
  summary: Test title as passed to the test() call
  belongs_to: TestCase
  description: |-
    ### title[​](#test-case-title "Direct link to title")

    Test title as passed to the [test()](class-test#test-call) call.

    **Usage**

    ``` javascript
    testCase.title
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testCase.titlePath
  id: api/class-testcase#test-case-title-path
  summary: Returns a list of titles from the root down to this test
  belongs_to: TestCase
  description: |-
    ### titlePath[​](#test-case-title-path "Direct link to titlePath")

    Returns a list of titles from the root down to this test.

    **Usage**

    ``` javascript
    testCase.titlePath();
    ```

    **Returns**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    ## Properties[​](#properties "Direct link to Properties")
- name: testCase.type
  id: api/class-testcase#test-case-type
  summary: Returns "test". Useful for detecting test cases in suite.entries()
  belongs_to: TestCase
  description: "### type[​](#test-case-type \"Direct link to type\")\n\nReturns \"test\". Useful for detecting test cases in [suite.entries()](class-suite#suite-entries).\n\n**Usage**\n\n``` javascript\ntestCase.type\n```\n\n**Type**\n\n- \"test\"\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-testcase](https://playwright.dev/docs/api/class-testcase)"
- name: TestConfig
  id: api/class-testconfig
  summary: Playwright Test provides many options to configure how your tests are collected and executed, for example timeout or testDir
  description: "# TestConfig\n\nPlaywright Test provides many options to configure how your tests are collected and executed, for example `timeout` or `testDir`. These options are described in the [TestConfig](class-testconfig \"TestConfig\") object in the [configuration file](../test-configuration). This type describes format of the configuration file, to access resolved configuration parameters at run time use [FullConfig](class-fullconfig \"FullConfig\").\n\nPlaywright Test supports running multiple test projects at the same time. Project-specific options should be put to [testConfig.projects](class-testconfig#test-config-projects), but top-level [TestConfig](class-testconfig \"TestConfig\") can also define base options shared between all projects.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  timeout: 30000,\n  globalTimeout: 600000,\n  reporter: 'list',\n  testDir: './tests',\n});\n```\n\n## Properties[​](#properties \"Direct link to Properties\")\n\n### build[​](#test-config-build \"Direct link to build\")\n\nPlaywright transpiler configuration.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  build: {\n    external: ['**/*bundle.js'],\n  },\n});\n```\n\n**Type**\n\n- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `external` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    Paths to exclude from the transpilation expressed as a list of glob patterns. Typically heavy JS bundles that your test uses are listed here.\n\n### expect[​](#test-config-expect \"Direct link to expect\")\n\nConfiguration for the `expect` assertion library. Learn more about [various timeouts](../test-timeouts).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  expect: {\n    timeout: 10000,\n    toMatchSnapshot: {\n      maxDiffPixels: 10,\n    },\n  },\n});\n```\n\n**Type**\n\n- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Default timeout for async expect matchers in milliseconds, defaults to 5000ms.\n\n  - `toHaveScreenshot` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `animations` \"allow\" \\| \"disabled\" *(optional)*\n\n      See `animations` in [page.screenshot()](class-page#page-screenshot). Defaults to `\"disabled\"`.\n\n    - `caret` \"hide\" \\| \"initial\" *(optional)*\n\n      See `caret` in [page.screenshot()](class-page#page-screenshot). Defaults to `\"hide\"`.\n\n    - `maxDiffPixels` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n      An acceptable amount of pixels that could be different, unset by default.\n\n    - `maxDiffPixelRatio` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n      An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1` , unset by default.\n\n    - `scale` \"css\" \\| \"device\" *(optional)*\n\n      See `scale` in [page.screenshot()](class-page#page-screenshot). Defaults to `\"css\"`.\n\n    - `stylePath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n      See `style` in [page.screenshot()](class-page#page-screenshot).\n\n    - `threshold` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n      An acceptable perceived color difference between the same pixel in compared images, ranging from `0` (strict) and `1` (lax). `\"pixelmatch\"` comparator computes color difference in [YIQ color space](https://en.wikipedia.org/wiki/YIQ) and defaults `threshold` value to `0.2`.\n\n    Configuration for the [expect(page).toHaveScreenshot()](class-pageassertions#page-assertions-to-have-screenshot-1) method.\n\n  - `toMatchSnapshot` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `maxDiffPixels` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n      An acceptable amount of pixels that could be different, unset by default.\n\n    - `maxDiffPixelRatio` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n      An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1` , unset by default.\n\n    - `threshold` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n      An acceptable perceived color difference between the same pixel in compared images, ranging from `0` (strict) and `1` (lax). `\"pixelmatch\"` comparator computes color difference in [YIQ color space](https://en.wikipedia.org/wiki/YIQ) and defaults `threshold` value to `0.2`.\n\n    Configuration for the [expect(value).toMatchSnapshot()](class-snapshotassertions#snapshot-assertions-to-match-snapshot-1) method.\n\n  - `toPass` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `intervals` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\\> *(optional)*\n\n      Probe intervals for toPass method in milliseconds.\n\n    - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n      Timeout for toPass method in milliseconds.\n\n    Configuration for the [expect(value).toPass()](../test-assertions#expecttopass) method.\n\n### forbidOnly[​](#test-config-forbid-only \"Direct link to forbidOnly\")\n\nWhether to exit with an error if any tests or groups are marked as [test.only()](class-test#test-only) or [test.describe.only()](class-test#test-describe-only). Useful on CI.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  forbidOnly: !!process.env.CI,\n});\n```\n\n**Type**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### fullyParallel[​](#test-config-fully-parallel \"Direct link to fullyParallel\")\n\nPlaywright Test runs tests in parallel. In order to achieve that, it runs several worker processes that run at the same time. By default, **test files** are run in parallel. Tests in a single file are run in order, in the same worker process.\n\nYou can configure entire test run to concurrently execute all tests in all files using this option.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  fullyParallel: true,\n});\n```\n\n**Type**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### globalSetup[​](#test-config-global-setup \"Direct link to globalSetup\")\n\nPath to the global setup file. This file will be required and run before all the tests. It must export a single function that takes a [FullConfig](class-fullconfig \"FullConfig\") argument.\n\nLearn more about [global setup and teardown](../test-global-setup-teardown).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  globalSetup: './global-setup',\n});\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### globalTeardown[​](#test-config-global-teardown \"Direct link to globalTeardown\")\n\nPath to the global teardown file. This file will be required and run after all the tests. It must export a single function. See also [testConfig.globalSetup](class-testconfig#test-config-global-setup).\n\nLearn more about [global setup and teardown](../test-global-setup-teardown).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  globalTeardown: './global-teardown',\n});\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### globalTimeout[​](#test-config-global-timeout \"Direct link to globalTimeout\")\n\nMaximum time in milliseconds the whole test suite can run. Zero timeout (default) disables this behavior. Useful on CI to prevent broken setup from running too long and wasting resources. Learn more about [various timeouts](../test-timeouts).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  globalTimeout: process.env.CI ? 60 * 60 * 1000 : undefined,\n});\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### grep[​](#test-config-grep \"Direct link to grep\")\n\nFilter to only run tests with a title matching one of the patterns. For example, passing `grep: /cart/` should only run tests with \"cart\" in the title. Also available in the [command line](../test-cli) with the `-g` option. The regular expression will be tested against the string that consists of the project name, the test file name, the `test.describe` name (if any), the test name and the test tags divided by spaces, e.g. `chromium my-test.spec.ts my-suite my-test`.\n\n`grep` option is also useful for [tagging tests](../test-annotations#tag-tests).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  grep: /smoke/,\n});\n```\n\n**Type**\n\n- [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\\>\n\n### grepInvert[​](#test-config-grep-invert \"Direct link to grepInvert\")\n\nFilter to only run tests with a title **not** matching one of the patterns. This is the opposite of [testConfig.grep](class-testconfig#test-config-grep). Also available in the [command line](../test-cli) with the `--grep-invert` option.\n\n`grepInvert` option is also useful for [tagging tests](../test-annotations#tag-tests).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  grepInvert: /manual/,\n});\n```\n\n**Type**\n\n- [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\\>\n\n### ignoreSnapshots[​](#test-config-ignore-snapshots \"Direct link to ignoreSnapshots\")\n\nWhether to skip snapshot expectations, such as `expect(value).toMatchSnapshot()` and `await expect(page).toHaveScreenshot()`.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  ignoreSnapshots: !process.env.CI,\n});\n```\n\n**Type**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### maxFailures[​](#test-config-max-failures \"Direct link to maxFailures\")\n\nThe maximum number of test failures for the whole test suite run. After reaching this number, testing will stop and exit with an error. Setting to zero (default) disables this behavior.\n\nAlso available in the [command line](../test-cli) with the `--max-failures` and `-x` options.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  maxFailures: process.env.CI ? 1 : 0,\n});\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### metadata[​](#test-config-metadata \"Direct link to metadata\")\n\nMetadata that will be put directly to the test report serialized as JSON.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  metadata: 'acceptance tests',\n});\n```\n\n**Type**\n\n- [Metadata](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object<string, any>\")\n\n### name[​](#test-config-name \"Direct link to name\")\n\nConfig name is visible in the report and during test execution, unless overridden by [testProject.name](class-testproject#test-project-name).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  name: 'acceptance tests',\n});\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### outputDir[​](#test-config-output-dir \"Direct link to outputDir\")\n\nThe output directory for files created during test execution. Defaults to `<package.json-directory>/test-results`.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  outputDir: './test-results',\n});\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n**Details**\n\nThis directory is cleaned at the start. When running a test, a unique subdirectory inside the [testConfig.outputDir](class-testconfig#test-config-output-dir) is created, guaranteeing that test running in parallel do not conflict. This directory can be accessed by [testInfo.outputDir](class-testinfo#test-info-output-dir) and [testInfo.outputPath()](class-testinfo#test-info-output-path).\n\nHere is an example that uses [testInfo.outputPath()](class-testinfo#test-info-output-path) to create a temporary file.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\nimport fs from 'fs';\n\ntest('example test', async ({}, testInfo) => {\n  const file = testInfo.outputPath('temporary-file.txt');\n  await fs.promises.writeFile(file, 'Put some data to the file', 'utf8');\n});\n```\n\n### preserveOutput[​](#test-config-preserve-output \"Direct link to preserveOutput\")\n\nWhether to preserve test output in the [testConfig.outputDir](class-testconfig#test-config-output-dir). Defaults to `'always'`.\n\n- `'always'` - preserve output for all tests;\n- `'never'` - do not preserve output for any tests;\n- `'failures-only'` - only preserve output for failed tests.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  preserveOutput: 'always',\n});\n```\n\n**Type**\n\n- \"always\" \\| \"never\" \\| \"failures-only\"\n\n### projects[​](#test-config-projects \"Direct link to projects\")\n\nPlaywright Test supports running multiple test projects at the same time. See [TestProject](class-testproject \"TestProject\") for more information.\n\n**Usage**\n\n``` javascript\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    { name: 'chromium', use: devices['Desktop Chrome'] }\n  ]\n});\n```\n\n**Type**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[TestProject](class-testproject \"TestProject\")\\>\n\n### quiet[​](#test-config-quiet \"Direct link to quiet\")\n\nWhether to suppress stdio and stderr output from the tests.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  quiet: !!process.env.CI,\n});\n```\n\n**Type**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### repeatEach[​](#test-config-repeat-each \"Direct link to repeatEach\")\n\nThe number of times to repeat each test, useful for debugging flaky tests.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  repeatEach: 3,\n});\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### reportSlowTests[​](#test-config-report-slow-tests \"Direct link to reportSlowTests\")\n\nWhether to report slow test files. Pass `null` to disable this feature.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reportSlowTests: null,\n});\n```\n\n**Type**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `max` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    The maximum number of slow test files to report. Defaults to `5`.\n\n  - `threshold` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Test duration in milliseconds that is considered slow. Defaults to 15 seconds.\n\n**Details**\n\nTest files that took more than `threshold` milliseconds are considered slow, and the slowest ones are reported, no more than `max` number of them. Passing zero as `max` reports all test files that exceed the threshold.\n\n### reporter[​](#test-config-reporter \"Direct link to reporter\")\n\nThe list of reporters to use. Each reporter can be:\n\n- A builtin reporter name like `'list'` or `'json'`.\n- A module name like `'my-awesome-reporter'`.\n- A relative path to the reporter like `'./reporters/my-awesome-reporter.js'`.\n\nYou can pass options to the reporter in a tuple like `['json', { outputFile: './report.json' }]`.\n\nLearn more in the [reporters guide](../test-reporters).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  reporter: 'line',\n});\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\> \\| \"list\" \\| \"dot\" \\| \"line\" \\| \"github\" \\| \"json\" \\| \"junit\" \\| \"null\" \\| \"html\"\n  - `0` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Reporter name or module or file path\n\n  - `1` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n    An object with reporter options if any\n\n### respectGitIgnore[​](#test-config-respect-git-ignore \"Direct link to respectGitIgnore\")\n\nWhether to skip entries from `.gitignore` when searching for test files. By default, if neither [testConfig.testDir](class-testconfig#test-config-test-dir) nor [testProject.testDir](class-testproject#test-project-test-dir) are explicitly specified, Playwright will ignore any test files matching `.gitignore` entries.\n\n**Usage**\n\n``` javascript\ntestConfig.respectGitIgnore\n```\n\n**Type**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### retries[​](#test-config-retries \"Direct link to retries\")\n\nThe maximum number of retry attempts given to failed tests. By default failing tests are not retried. Learn more about [test retries](../test-retries#retries).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  retries: 2,\n});\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### shard[​](#test-config-shard \"Direct link to shard\")\n\nShard tests and execute only the selected shard. Specify in the one-based form like `{ total: 5, current: 2 }`.\n\nLearn more about [parallelism and sharding](../test-parallel) with Playwright Test.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  shard: { total: 10, current: 3 },\n});\n```\n\n**Type**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `current` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    The index of the shard to execute, one-based.\n\n  - `total` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    The total number of shards.\n\n### snapshotPathTemplate[​](#test-config-snapshot-path-template \"Direct link to snapshotPathTemplate\")\n\nThis option configures a template controlling location of snapshots generated by [expect(page).toHaveScreenshot()](class-pageassertions#page-assertions-to-have-screenshot-1) and [expect(value).toMatchSnapshot()](class-snapshotassertions#snapshot-assertions-to-match-snapshot-1).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './tests',\n  snapshotPathTemplate: '{testDir}/__screenshots__/{testFilePath}/{arg}{ext}',\n});\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n**Details**\n\nThe value might include some \"tokens\" that will be replaced with actual values during test execution.\n\nConsider the following file structure:\n\n``` javascript\nplaywright.config.ts\ntests/\n└── page/\n    └── page-click.spec.ts\n```\n\nAnd the following `page-click.spec.ts` that uses `toHaveScreenshot()` call:\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.describe('suite', () => {\n  test('test should work', async ({ page }) => {\n    await expect(page).toHaveScreenshot(['foo', 'bar', 'baz.png']);\n  });\n});\n```\n\nThe list of supported tokens:\n\n- `{arg}` - Relative snapshot path **without extension**. These come from the arguments passed to the `toHaveScreenshot()` and `toMatchSnapshot()` calls; if called without arguments, this will be an auto-generated snapshot name.\n  - Value: `foo/bar/baz`\n- `{ext}` - snapshot extension (with dots)\n  - Value: `.png`\n- `{platform}` - The value of `process.platform`.\n- `{projectName}` - Project's file-system-sanitized name, if any.\n  - Value: `''` (empty string).\n- `{snapshotDir}` - Project's [testConfig.snapshotDir](class-testconfig#test-config-snapshot-dir).\n  - Value: `/home/playwright/tests` (since `snapshotDir` is not provided in config, it defaults to `testDir`)\n- `{testDir}` - Project's [testConfig.testDir](class-testconfig#test-config-test-dir).\n  - Value: `/home/playwright/tests` (absolute path is since `testDir` is resolved relative to directory with config)\n- `{testFileDir}` - Directories in relative path from `testDir` to **test file**.\n  - Value: `page`\n- `{testFileName}` - Test file name with extension.\n  - Value: `page-click.spec.ts`\n- `{testFilePath}` - Relative path from `testDir` to **test file**\n  - Value: `page/page-click.spec.ts`\n- `{testName}` - File-system-sanitized test title, including parent describes but excluding file name.\n  - Value: `suite-test-should-work`\n\nEach token can be preceded with a single character that will be used **only if** this token has non-empty value.\n\nConsider the following config:\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  snapshotPathTemplate: '__screenshots__{/projectName}/{testFilePath}/{arg}{ext}',\n  testMatch: 'example.spec.ts',\n  projects: [\n    { use: { browserName: 'firefox' } },\n    { name: 'chromium', use: { browserName: 'chromium' } },\n  ],\n});\n```\n\nIn this config:\n\n1.  First project **does not** have a name, so its snapshots will be stored in `<configDir>/__screenshots__/example.spec.ts/...`.\n2.  Second project **does** have a name, so its snapshots will be stored in `<configDir>/__screenshots__/chromium/example.spec.ts/..`.\n3.  Since `snapshotPathTemplate` resolves to relative path, it will be resolved relative to `configDir`.\n4.  Forward slashes `\"/\"` can be used as path separators on any platform.\n\n### testDir[​](#test-config-test-dir \"Direct link to testDir\")\n\nDirectory that will be recursively scanned for test files. Defaults to the directory of the configuration file.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './tests/playwright',\n});\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### testIgnore[​](#test-config-test-ignore \"Direct link to testIgnore\")\n\nFiles matching one of these patterns are not executed as test files. Matching is performed against the absolute file path. Strings are treated as glob patterns.\n\nFor example, `'**/test-assets/**'` will ignore any files in the `test-assets` directory.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  testIgnore: '**/test-assets/**',\n});\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\\>\n\n### testMatch[​](#test-config-test-match \"Direct link to testMatch\")\n\nOnly the files matching one of these patterns are executed as test files. Matching is performed against the absolute file path. Strings are treated as glob patterns.\n\nBy default, Playwright looks for files matching the following glob pattern: `**/*.@(spec|test).?(c|m)[jt]s?(x)`. This means JavaScript or TypeScript files with `\".test\"` or `\".spec\"` suffix, for example `login-screen.wrong-credentials.spec.ts`.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  testMatch: /.*\\.e2e\\.js/,\n});\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\\>\n\n### timeout[​](#test-config-timeout \"Direct link to timeout\")\n\nTimeout for each test in milliseconds. Defaults to 30 seconds.\n\nThis is a base timeout for all tests. In addition, each test can configure its own timeout with [test.setTimeout()](class-test#test-set-timeout). Learn more about [various timeouts](../test-timeouts).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  timeout: 5 * 60 * 1000,\n});\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### updateSnapshots[​](#test-config-update-snapshots \"Direct link to updateSnapshots\")\n\nWhether to update expected snapshots with the actual results produced by the test run. Defaults to `'missing'`.\n\n- `'all'` - All tests that are executed will update snapshots that did not match. Matching snapshots will not be updated.\n- `'none'` - No snapshots are updated.\n- `'missing'` - Missing snapshots are created, for example when authoring a new test and running it for the first time. This is the default.\n\nLearn more about [snapshots](../test-snapshots).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  updateSnapshots: 'missing',\n});\n```\n\n**Type**\n\n- \"all\" \\| \"none\" \\| \"missing\"\n\n### use[​](#test-config-use \"Direct link to use\")\n\nGlobal options for all tests, for example [testOptions.browserName](class-testoptions#test-options-browser-name). Learn more about [configuration](../test-configuration) and see [available options](class-testoptions \"TestOptions\").\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    browserName: 'chromium',\n  },\n});\n```\n\n**Type**\n\n- [TestOptions](class-testoptions \"TestOptions\")\n\n### webServer[​](#test-config-web-server \"Direct link to webServer\")\n\nLaunch a development web server (or multiple) during the tests.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  webServer: {\n    command: 'npm run start',\n    url: 'http://127.0.0.1:3000',\n    timeout: 120 * 1000,\n    reuseExistingServer: !process.env.CI,\n  },\n  use: {\n    baseURL: 'http://localhost:3000/',\n  },\n});\n```\n\nNow you can use a relative path when navigating the page:\n\n``` javascript\nimport { test } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  // This will result in http://localhost:3000/foo\n  await page.goto('/foo');\n});\n```\n\nMultiple web servers (or background processes) can be launched:\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  webServer: [\n    {\n      command: 'npm run start',\n      url: 'http://127.0.0.1:3000',\n      timeout: 120 * 1000,\n      reuseExistingServer: !process.env.CI,\n    },\n    {\n      command: 'npm run backend',\n      url: 'http://127.0.0.1:3333',\n      timeout: 120 * 1000,\n      reuseExistingServer: !process.env.CI,\n    }\n  ],\n  use: {\n    baseURL: 'http://127.0.0.1:3000',\n  },\n});\n```\n\n**Type**\n\n- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `command` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Shell command to start. For example `npm run start`..\n\n  - `cwd` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Current working directory of the spawned process, defaults to the directory of the configuration file.\n\n  - `env` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    Environment variables to set for the command, `process.env` by default.\n\n  - `ignoreHTTPSErrors` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to ignore HTTPS errors when fetching the `url`. Defaults to `false`.\n\n  - `port` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    The port that your http server is expected to appear on. It does wait until it accepts connections. Either `port` or `url` should be specified.\n\n  - `reuseExistingServer` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    If true, it will re-use an existing server on the `port` or `url` when available. If no server is running on that `port` or `url`, it will run the command to start a new server. If `false`, it will throw if an existing process is listening on the `port` or `url`. This should be commonly set to `!process.env.CI` to allow the local dev server when running tests locally.\n\n  - `stdout` \"pipe\" \\| \"ignore\" *(optional)*\n\n    If `\"pipe\"`, it will pipe the stdout of the command to the process stdout. If `\"ignore\"`, it will ignore the stdout of the command. Default to `\"ignore\"`.\n\n  - `stderr` \"pipe\" \\| \"ignore\" *(optional)*\n\n    Whether to pipe the stderr of the command to the process stderr or ignore it. Defaults to `\"pipe\"`.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    How long to wait for the process to start up and be available in milliseconds. Defaults to 60000.\n\n  - `url` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    The url on your http server that is expected to return a 2xx, 3xx, 400, 401, 402, or 403 status code when the server is ready to accept connections. Redirects (3xx status codes) are being followed and the new location is checked. Either `port` or `url` should be specified.\n\n**Details**\n\nIf the port is specified, Playwright Test will wait for it to be available on `127.0.0.1` or `::1`, before running the tests. If the url is specified, Playwright Test will wait for the URL to return a 2xx, 3xx, 400, 401, 402, or 403 status code before running the tests.\n\nFor continuous integration, you may want to use the `reuseExistingServer: !process.env.CI` option which does not use an existing server on the CI. To see the stdout, you can set the `DEBUG=pw:webserver` environment variable.\n\nThe `port` (but not the `url`) gets passed over to Playwright as a [testOptions.baseURL](class-testoptions#test-options-base-url). For example port `8080` produces `baseURL` equal `http://localhost:8080`. If `webServer` is specified as an array, you must explicitly configure the `baseURL` (even if it only has one entry).\n\n> note\n>\n> It is also recommended to specify [testOptions.baseURL](class-testoptions#test-options-base-url) in the config, so that tests could use relative urls.\n\n### workers[​](#test-config-workers \"Direct link to workers\")\n\nThe maximum number of concurrent worker processes to use for parallelizing tests. Can also be set as percentage of logical CPU cores, e.g. `'50%'.`\n\nPlaywright Test uses worker processes to run tests. There is always at least one worker process, but more can be used to speed up test execution.\n\nDefaults to half of the number of logical CPU cores. Learn more about [parallelism and sharding](../test-parallel) with Playwright Test.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  workers: 3,\n});\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n## Deprecated[​](#deprecated \"Direct link to Deprecated\")\n\n### snapshotDir[​](#test-config-snapshot-dir \"Direct link to snapshotDir\")\n\n> Discouraged\n>\n> Use [testConfig.snapshotPathTemplate](class-testconfig#test-config-snapshot-path-template) to configure snapshot paths.\n\nThe base directory, relative to the config file, for snapshot files created with `toMatchSnapshot`. Defaults to [testConfig.testDir](class-testconfig#test-config-test-dir).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  snapshotDir: './snapshots',\n});\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n**Details**\n\nThe directory for each test can be accessed by [testInfo.snapshotDir](class-testinfo#test-info-snapshot-dir) and [testInfo.snapshotPath()](class-testinfo#test-info-snapshot-path).\n\nThis path will serve as the base directory for each test file snapshot directory. Setting `snapshotDir` to `'snapshots'`, the [testInfo.snapshotDir](class-testinfo#test-info-snapshot-dir) would resolve to `snapshots/a.spec.js-snapshots`.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-testconfig](https://playwright.dev/docs/api/class-testconfig)"
- name: testConfig.build
  id: api/class-testconfig#test-config-build
  summary: Playwright transpiler configuration
  belongs_to: TestConfig
  description: |-
    ### build[​](#test-config-build "Direct link to build")

    Playwright transpiler configuration.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      build: {
        external: ['**/*bundle.js'],
      },
    });
    ```

    **Type**

    - [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")
      - `external`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        Paths to exclude from the transpilation expressed as a list of glob patterns. Typically heavy JS bundles that your test uses are listed here.
- name: testConfig.expect
  id: api/class-testconfig#test-config-expect
  summary: Configuration for the expect assertion library
  belongs_to: TestConfig
  description: |-
    ### expect[​](#test-config-expect "Direct link to expect")

    Configuration for the `expect` assertion library. Learn more about [various timeouts](../test-timeouts).

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      expect: {
        timeout: 10000,
        toMatchSnapshot: {
          maxDiffPixels: 10,
        },
      },
    });
    ```

    **Type**

    - [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Default timeout for async expect matchers in milliseconds, defaults to 5000ms.

      - `toHaveScreenshot` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `animations` "allow" \| "disabled" *(optional)*

          See `animations` in [page.screenshot()](class-page#page-screenshot). Defaults to `"disabled"`.

        - `caret` "hide" \| "initial" *(optional)*

          See `caret` in [page.screenshot()](class-page#page-screenshot). Defaults to `"hide"`.

        - `maxDiffPixels` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

          An acceptable amount of pixels that could be different, unset by default.

        - `maxDiffPixelRatio` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

          An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1` , unset by default.

        - `scale` "css" \| "device" *(optional)*

          See `scale` in [page.screenshot()](class-page#page-screenshot). Defaults to `"css"`.

        - `stylePath`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

          See `style` in [page.screenshot()](class-page#page-screenshot).

        - `threshold` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

          An acceptable perceived color difference between the same pixel in compared images, ranging from `0` (strict) and `1` (lax). `"pixelmatch"` comparator computes color difference in [YIQ color space](https://en.wikipedia.org/wiki/YIQ) and defaults `threshold` value to `0.2`.

        Configuration for the [expect(page).toHaveScreenshot()](class-pageassertions#page-assertions-to-have-screenshot-1) method.

      - `toMatchSnapshot` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `maxDiffPixels` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

          An acceptable amount of pixels that could be different, unset by default.

        - `maxDiffPixelRatio` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

          An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1` , unset by default.

        - `threshold` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

          An acceptable perceived color difference between the same pixel in compared images, ranging from `0` (strict) and `1` (lax). `"pixelmatch"` comparator computes color difference in [YIQ color space](https://en.wikipedia.org/wiki/YIQ) and defaults `threshold` value to `0.2`.

        Configuration for the [expect(value).toMatchSnapshot()](class-snapshotassertions#snapshot-assertions-to-match-snapshot-1) method.

      - `toPass` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `intervals`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> *(optional)*

          Probe intervals for toPass method in milliseconds.

        - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

          Timeout for toPass method in milliseconds.

        Configuration for the [expect(value).toPass()](../test-assertions#expecttopass) method.

    &nbsp;
- name: testConfig.forbidOnly
  id: api/class-testconfig#test-config-forbid-only
  summary: Whether to exit with an error if any tests or groups are marked as test.only() or test.describe.only()
  belongs_to: TestConfig
  description: |-
    ### forbidOnly[​](#test-config-forbid-only "Direct link to forbidOnly")

    Whether to exit with an error if any tests or groups are marked as [test.only()](class-test#test-only) or [test.describe.only()](class-test#test-describe-only). Useful on CI.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      forbidOnly: !!process.env.CI,
    });
    ```

    **Type**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: testConfig.fullyParallel
  id: api/class-testconfig#test-config-fully-parallel
  summary: Playwright Test runs tests in parallel
  belongs_to: TestConfig
  description: |-
    ### fullyParallel[​](#test-config-fully-parallel "Direct link to fullyParallel")

    Playwright Test runs tests in parallel. In order to achieve that, it runs several worker processes that run at the same time. By default, **test files** are run in parallel. Tests in a single file are run in order, in the same worker process.

    You can configure entire test run to concurrently execute all tests in all files using this option.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      fullyParallel: true,
    });
    ```

    **Type**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: testConfig.globalSetup
  id: api/class-testconfig#test-config-global-setup
  summary: Path to the global setup file
  belongs_to: TestConfig
  description: |-
    ### globalSetup[​](#test-config-global-setup "Direct link to globalSetup")

    Path to the global setup file. This file will be required and run before all the tests. It must export a single function that takes a [FullConfig](class-fullconfig "FullConfig") argument.

    Learn more about [global setup and teardown](../test-global-setup-teardown).

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      globalSetup: './global-setup',
    });
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testConfig.globalTeardown
  id: api/class-testconfig#test-config-global-teardown
  summary: Path to the global teardown file
  belongs_to: TestConfig
  description: |-
    ### globalTeardown[​](#test-config-global-teardown "Direct link to globalTeardown")

    Path to the global teardown file. This file will be required and run after all the tests. It must export a single function. See also [testConfig.globalSetup](class-testconfig#test-config-global-setup).

    Learn more about [global setup and teardown](../test-global-setup-teardown).

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      globalTeardown: './global-teardown',
    });
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testConfig.globalTimeout
  id: api/class-testconfig#test-config-global-timeout
  summary: Maximum time in milliseconds the whole test suite can run
  belongs_to: TestConfig
  description: |-
    ### globalTimeout[​](#test-config-global-timeout "Direct link to globalTimeout")

    Maximum time in milliseconds the whole test suite can run. Zero timeout (default) disables this behavior. Useful on CI to prevent broken setup from running too long and wasting resources. Learn more about [various timeouts](../test-timeouts).

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      globalTimeout: process.env.CI ? 60 * 60 * 1000 : undefined,
    });
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testConfig.grep
  id: api/class-testconfig#test-config-grep
  summary: Filter to only run tests with a title matching one of the patterns
  belongs_to: TestConfig
  description: |-
    ### grep[​](#test-config-grep "Direct link to grep")

    Filter to only run tests with a title matching one of the patterns. For example, passing `grep: /cart/` should only run tests with "cart" in the title. Also available in the [command line](../test-cli) with the `-g` option. The regular expression will be tested against the string that consists of the project name, the test file name, the `test.describe` name (if any), the test name and the test tags divided by spaces, e.g. `chromium my-test.spec.ts my-suite my-test`.

    `grep` option is also useful for [tagging tests](../test-annotations#tag-tests).

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      grep: /smoke/,
    });
    ```

    **Type**

    - [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")\>

    &nbsp;
- name: testConfig.grepInvert
  id: api/class-testconfig#test-config-grep-invert
  summary: Filter to only run tests with a title not matching one of the patterns
  belongs_to: TestConfig
  description: |-
    ### grepInvert[​](#test-config-grep-invert "Direct link to grepInvert")

    Filter to only run tests with a title **not** matching one of the patterns. This is the opposite of [testConfig.grep](class-testconfig#test-config-grep). Also available in the [command line](../test-cli) with the `--grep-invert` option.

    `grepInvert` option is also useful for [tagging tests](../test-annotations#tag-tests).

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      grepInvert: /manual/,
    });
    ```

    **Type**

    - [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")\>

    &nbsp;
- name: testConfig.ignoreSnapshots
  id: api/class-testconfig#test-config-ignore-snapshots
  summary: Whether to skip snapshot expectations, such as expect(value).toMatchSnapshot() and await expect(page).toHaveScreenshot()
  belongs_to: TestConfig
  description: |-
    ### ignoreSnapshots[​](#test-config-ignore-snapshots "Direct link to ignoreSnapshots")

    Whether to skip snapshot expectations, such as `expect(value).toMatchSnapshot()` and `await expect(page).toHaveScreenshot()`.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      ignoreSnapshots: !process.env.CI,
    });
    ```

    **Type**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: testConfig.maxFailures
  id: api/class-testconfig#test-config-max-failures
  summary: The maximum number of test failures for the whole test suite run
  belongs_to: TestConfig
  description: |-
    ### maxFailures[​](#test-config-max-failures "Direct link to maxFailures")

    The maximum number of test failures for the whole test suite run. After reaching this number, testing will stop and exit with an error. Setting to zero (default) disables this behavior.

    Also available in the [command line](../test-cli) with the `--max-failures` and `-x` options.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      maxFailures: process.env.CI ? 1 : 0,
    });
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testConfig.metadata
  id: api/class-testconfig#test-config-metadata
  summary: Metadata that will be put directly to the test report serialized as JSON
  belongs_to: TestConfig
  description: |-
    ### metadata[​](#test-config-metadata "Direct link to metadata")

    Metadata that will be put directly to the test report serialized as JSON.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      metadata: 'acceptance tests',
    });
    ```

    **Type**

    - [Metadata](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object<string, any>")

    &nbsp;
- name: testConfig.name
  id: api/class-testconfig#test-config-name
  summary: Config name is visible in the report and during test execution, unless overridden by testProject.name
  belongs_to: TestConfig
  description: |-
    ### name[​](#test-config-name "Direct link to name")

    Config name is visible in the report and during test execution, unless overridden by [testProject.name](class-testproject#test-project-name).

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      name: 'acceptance tests',
    });
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testConfig.outputDir
  id: api/class-testconfig#test-config-output-dir
  summary: The output directory for files created during test execution
  belongs_to: TestConfig
  description: |-
    ### outputDir[​](#test-config-output-dir "Direct link to outputDir")

    The output directory for files created during test execution. Defaults to `<package.json-directory>/test-results`.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      outputDir: './test-results',
    });
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    **Details**

    This directory is cleaned at the start. When running a test, a unique subdirectory inside the [testConfig.outputDir](class-testconfig#test-config-output-dir) is created, guaranteeing that test running in parallel do not conflict. This directory can be accessed by [testInfo.outputDir](class-testinfo#test-info-output-dir) and [testInfo.outputPath()](class-testinfo#test-info-output-path).

    Here is an example that uses [testInfo.outputPath()](class-testinfo#test-info-output-path) to create a temporary file.

    ``` javascript
    import { test, expect } from '@playwright/test';
    import fs from 'fs';

    test('example test', async ({}, testInfo) => {
      const file = testInfo.outputPath('temporary-file.txt');
      await fs.promises.writeFile(file, 'Put some data to the file', 'utf8');
    });
    ```
- name: testConfig.preserveOutput
  id: api/class-testconfig#test-config-preserve-output
  summary: Whether to preserve test output in the testConfig.outputDir
  belongs_to: TestConfig
  description: |-
    ### preserveOutput[​](#test-config-preserve-output "Direct link to preserveOutput")

    Whether to preserve test output in the [testConfig.outputDir](class-testconfig#test-config-output-dir). Defaults to `'always'`.

    - `'always'` - preserve output for all tests;
    - `'never'` - do not preserve output for any tests;
    - `'failures-only'` - only preserve output for failed tests.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      preserveOutput: 'always',
    });
    ```

    **Type**

    - "always" \| "never" \| "failures-only"

    &nbsp;
- name: testConfig.projects
  id: api/class-testconfig#test-config-projects
  summary: Playwright Test supports running multiple test projects at the same time
  belongs_to: TestConfig
  description: |-
    ### projects[​](#test-config-projects "Direct link to projects")

    Playwright Test supports running multiple test projects at the same time. See [TestProject](class-testproject "TestProject") for more information.

    **Usage**

    ``` javascript
    import { defineConfig, devices } from '@playwright/test';

    export default defineConfig({
      projects: [
        { name: 'chromium', use: devices['Desktop Chrome'] }
      ]
    });
    ```

    **Type**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[TestProject](class-testproject "TestProject")\>

    &nbsp;
- name: testConfig.quiet
  id: api/class-testconfig#test-config-quiet
  summary: Whether to suppress stdio and stderr output from the tests
  belongs_to: TestConfig
  description: |-
    ### quiet[​](#test-config-quiet "Direct link to quiet")

    Whether to suppress stdio and stderr output from the tests.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      quiet: !!process.env.CI,
    });
    ```

    **Type**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: testConfig.repeatEach
  id: api/class-testconfig#test-config-repeat-each
  summary: The number of times to repeat each test, useful for debugging flaky tests
  belongs_to: TestConfig
  description: |-
    ### repeatEach[​](#test-config-repeat-each "Direct link to repeatEach")

    The number of times to repeat each test, useful for debugging flaky tests.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      repeatEach: 3,
    });
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testConfig.reporter
  id: api/class-testconfig#test-config-reporter
  summary: The list of reporters to use
  belongs_to: TestConfig
  description: |-
    ### reporter[​](#test-config-reporter "Direct link to reporter")

    The list of reporters to use. Each reporter can be:

    - A builtin reporter name like `'list'` or `'json'`.
    - A module name like `'my-awesome-reporter'`.
    - A relative path to the reporter like `'./reporters/my-awesome-reporter.js'`.

    You can pass options to the reporter in a tuple like `['json', { outputFile: './report.json' }]`.

    Learn more in the [reporters guide](../test-reporters).

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      reporter: 'line',
    });
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\> \| "list" \| "dot" \| "line" \| "github" \| "json" \| "junit" \| "null" \| "html"
      - `0`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        Reporter name or module or file path

      - `1`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

        An object with reporter options if any

    &nbsp;
- name: testConfig.reportSlowTests
  id: api/class-testconfig#test-config-report-slow-tests
  summary: Whether to report slow test files
  belongs_to: TestConfig
  description: |-
    ### reportSlowTests[​](#test-config-report-slow-tests "Direct link to reportSlowTests")

    Whether to report slow test files. Pass `null` to disable this feature.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      reportSlowTests: null,
    });
    ```

    **Type**

    - [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")
      - `max`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        The maximum number of slow test files to report. Defaults to `5`.

      - `threshold`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Test duration in milliseconds that is considered slow. Defaults to 15 seconds.

    **Details**

    Test files that took more than `threshold` milliseconds are considered slow, and the slowest ones are reported, no more than `max` number of them. Passing zero as `max` reports all test files that exceed the threshold.
- name: testConfig.respectGitIgnore
  id: api/class-testconfig#test-config-respect-git-ignore
  summary: Whether to skip entries from .gitignore when searching for test files
  belongs_to: TestConfig
  description: |-
    ### respectGitIgnore[​](#test-config-respect-git-ignore "Direct link to respectGitIgnore")

    Whether to skip entries from `.gitignore` when searching for test files. By default, if neither [testConfig.testDir](class-testconfig#test-config-test-dir) nor [testProject.testDir](class-testproject#test-project-test-dir) are explicitly specified, Playwright will ignore any test files matching `.gitignore` entries.

    **Usage**

    ``` javascript
    testConfig.respectGitIgnore
    ```

    **Type**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: testConfig.retries
  id: api/class-testconfig#test-config-retries
  summary: The maximum number of retry attempts given to failed tests
  belongs_to: TestConfig
  description: |-
    ### retries[​](#test-config-retries "Direct link to retries")

    The maximum number of retry attempts given to failed tests. By default failing tests are not retried. Learn more about [test retries](../test-retries#retries).

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      retries: 2,
    });
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testConfig.shard
  id: api/class-testconfig#test-config-shard
  summary: Shard tests and execute only the selected shard
  belongs_to: TestConfig
  description: |-
    ### shard[​](#test-config-shard "Direct link to shard")

    Shard tests and execute only the selected shard. Specify in the one-based form like `{ total: 5, current: 2 }`.

    Learn more about [parallelism and sharding](../test-parallel) with Playwright Test.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      shard: { total: 10, current: 3 },
    });
    ```

    **Type**

    - [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")
      - `current`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        The index of the shard to execute, one-based.

      - `total`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        The total number of shards.

    &nbsp;
- name: testConfig.snapshotDir
  id: api/class-testconfig#test-config-snapshot-dir
  summary: Use testConfig.snapshotPathTemplate to configure snapshot paths
  belongs_to: TestConfig
  description: "### snapshotDir[​](#test-config-snapshot-dir \"Direct link to snapshotDir\")\n\n> Discouraged\n>\n> Use [testConfig.snapshotPathTemplate](class-testconfig#test-config-snapshot-path-template) to configure snapshot paths.\n\nThe base directory, relative to the config file, for snapshot files created with `toMatchSnapshot`. Defaults to [testConfig.testDir](class-testconfig#test-config-test-dir).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  snapshotDir: './snapshots',\n});\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n**Details**\n\nThe directory for each test can be accessed by [testInfo.snapshotDir](class-testinfo#test-info-snapshot-dir) and [testInfo.snapshotPath()](class-testinfo#test-info-snapshot-path).\n\nThis path will serve as the base directory for each test file snapshot directory. Setting `snapshotDir` to `'snapshots'`, the [testInfo.snapshotDir](class-testinfo#test-info-snapshot-dir) would resolve to `snapshots/a.spec.js-snapshots`.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-testconfig](https://playwright.dev/docs/api/class-testconfig)"
- name: testConfig.snapshotPathTemplate
  id: api/class-testconfig#test-config-snapshot-path-template
  summary: This option configures a template controlling location of snapshots generated by expect(page).toHaveScreenshot() and expect(value).toMatchSnapshot()
  belongs_to: TestConfig
  description: |-
    ### snapshotPathTemplate[​](#test-config-snapshot-path-template "Direct link to snapshotPathTemplate")

    This option configures a template controlling location of snapshots generated by [expect(page).toHaveScreenshot()](class-pageassertions#page-assertions-to-have-screenshot-1) and [expect(value).toMatchSnapshot()](class-snapshotassertions#snapshot-assertions-to-match-snapshot-1).

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      testDir: './tests',
      snapshotPathTemplate: '{testDir}/__screenshots__/{testFilePath}/{arg}{ext}',
    });
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    **Details**

    The value might include some "tokens" that will be replaced with actual values during test execution.

    Consider the following file structure:

    ``` javascript
    playwright.config.ts
    tests/
    └── page/
        └── page-click.spec.ts
    ```

    And the following `page-click.spec.ts` that uses `toHaveScreenshot()` call:

    ``` javascript
    import { test, expect } from '@playwright/test';

    test.describe('suite', () => {
      test('test should work', async ({ page }) => {
        await expect(page).toHaveScreenshot(['foo', 'bar', 'baz.png']);
      });
    });
    ```

    The list of supported tokens:

    - `{arg}` - Relative snapshot path **without extension**. These come from the arguments passed to the `toHaveScreenshot()` and `toMatchSnapshot()` calls; if called without arguments, this will be an auto-generated snapshot name.
      - Value: `foo/bar/baz`
    - `{ext}` - snapshot extension (with dots)
      - Value: `.png`
    - `{platform}` - The value of `process.platform`.
    - `{projectName}` - Project's file-system-sanitized name, if any.
      - Value: `''` (empty string).
    - `{snapshotDir}` - Project's [testConfig.snapshotDir](class-testconfig#test-config-snapshot-dir).
      - Value: `/home/playwright/tests` (since `snapshotDir` is not provided in config, it defaults to `testDir`)
    - `{testDir}` - Project's [testConfig.testDir](class-testconfig#test-config-test-dir).
      - Value: `/home/playwright/tests` (absolute path is since `testDir` is resolved relative to directory with config)
    - `{testFileDir}` - Directories in relative path from `testDir` to **test file**.
      - Value: `page`
    - `{testFileName}` - Test file name with extension.
      - Value: `page-click.spec.ts`
    - `{testFilePath}` - Relative path from `testDir` to **test file**
      - Value: `page/page-click.spec.ts`
    - `{testName}` - File-system-sanitized test title, including parent describes but excluding file name.
      - Value: `suite-test-should-work`

    Each token can be preceded with a single character that will be used **only if** this token has non-empty value.

    Consider the following config:

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      snapshotPathTemplate: '__screenshots__{/projectName}/{testFilePath}/{arg}{ext}',
      testMatch: 'example.spec.ts',
      projects: [
        { use: { browserName: 'firefox' } },
        { name: 'chromium', use: { browserName: 'chromium' } },
      ],
    });
    ```

    In this config:

    1.  First project **does not** have a name, so its snapshots will be stored in `<configDir>/__screenshots__/example.spec.ts/...`.
    2.  Second project **does** have a name, so its snapshots will be stored in `<configDir>/__screenshots__/chromium/example.spec.ts/..`.
    3.  Since `snapshotPathTemplate` resolves to relative path, it will be resolved relative to `configDir`.
    4.  Forward slashes `"/"` can be used as path separators on any platform.

    &nbsp;
- name: testConfig.testDir
  id: api/class-testconfig#test-config-test-dir
  summary: Directory that will be recursively scanned for test files
  belongs_to: TestConfig
  description: |-
    ### testDir[​](#test-config-test-dir "Direct link to testDir")

    Directory that will be recursively scanned for test files. Defaults to the directory of the configuration file.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      testDir: './tests/playwright',
    });
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testConfig.testIgnore
  id: api/class-testconfig#test-config-test-ignore
  summary: Files matching one of these patterns are not executed as test files
  belongs_to: TestConfig
  description: |-
    ### testIgnore[​](#test-config-test-ignore "Direct link to testIgnore")

    Files matching one of these patterns are not executed as test files. Matching is performed against the absolute file path. Strings are treated as glob patterns.

    For example, `'**/test-assets/**'` will ignore any files in the `test-assets` directory.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      testIgnore: '**/test-assets/**',
    });
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")\>

    &nbsp;
- name: testConfig.testMatch
  id: api/class-testconfig#test-config-test-match
  summary: Only the files matching one of these patterns are executed as test files
  belongs_to: TestConfig
  description: |-
    ### testMatch[​](#test-config-test-match "Direct link to testMatch")

    Only the files matching one of these patterns are executed as test files. Matching is performed against the absolute file path. Strings are treated as glob patterns.

    By default, Playwright looks for files matching the following glob pattern: `**/*.@(spec|test).?(c|m)[jt]s?(x)`. This means JavaScript or TypeScript files with `".test"` or `".spec"` suffix, for example `login-screen.wrong-credentials.spec.ts`.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      testMatch: /.*\.e2e\.js/,
    });
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")\>

    &nbsp;
- name: testConfig.timeout
  id: api/class-testconfig#test-config-timeout
  summary: Timeout for each test in milliseconds
  belongs_to: TestConfig
  description: |-
    ### timeout[​](#test-config-timeout "Direct link to timeout")

    Timeout for each test in milliseconds. Defaults to 30 seconds.

    This is a base timeout for all tests. In addition, each test can configure its own timeout with [test.setTimeout()](class-test#test-set-timeout). Learn more about [various timeouts](../test-timeouts).

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      timeout: 5 * 60 * 1000,
    });
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testConfig.updateSnapshots
  id: api/class-testconfig#test-config-update-snapshots
  summary: Whether to update expected snapshots with the actual results produced by the test run
  belongs_to: TestConfig
  description: |-
    ### updateSnapshots[​](#test-config-update-snapshots "Direct link to updateSnapshots")

    Whether to update expected snapshots with the actual results produced by the test run. Defaults to `'missing'`.

    - `'all'` - All tests that are executed will update snapshots that did not match. Matching snapshots will not be updated.
    - `'none'` - No snapshots are updated.
    - `'missing'` - Missing snapshots are created, for example when authoring a new test and running it for the first time. This is the default.

    Learn more about [snapshots](../test-snapshots).

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      updateSnapshots: 'missing',
    });
    ```

    **Type**

    - "all" \| "none" \| "missing"

    &nbsp;
- name: testConfig.use
  id: api/class-testconfig#test-config-use
  summary: Global options for all tests, for example testOptions.browserName
  belongs_to: TestConfig
  description: |-
    ### use[​](#test-config-use "Direct link to use")

    Global options for all tests, for example [testOptions.browserName](class-testoptions#test-options-browser-name). Learn more about [configuration](../test-configuration) and see [available options](class-testoptions "TestOptions").

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        browserName: 'chromium',
      },
    });
    ```

    **Type**

    - [TestOptions](class-testoptions "TestOptions")

    &nbsp;
- name: testConfig.webServer
  id: api/class-testconfig#test-config-web-server
  summary: Launch a development web server (or multiple) during the tests
  belongs_to: TestConfig
  description: |-
    ### webServer[​](#test-config-web-server "Direct link to webServer")

    Launch a development web server (or multiple) during the tests.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';
    export default defineConfig({
      webServer: {
        command: 'npm run start',
        url: 'http://127.0.0.1:3000',
        timeout: 120 * 1000,
        reuseExistingServer: !process.env.CI,
      },
      use: {
        baseURL: 'http://localhost:3000/',
      },
    });
    ```

    Now you can use a relative path when navigating the page:

    ``` javascript
    import { test } from '@playwright/test';

    test('test', async ({ page }) => {
      // This will result in http://localhost:3000/foo
      await page.goto('/foo');
    });
    ```

    Multiple web servers (or background processes) can be launched:

    ``` javascript
    import { defineConfig } from '@playwright/test';
    export default defineConfig({
      webServer: [
        {
          command: 'npm run start',
          url: 'http://127.0.0.1:3000',
          timeout: 120 * 1000,
          reuseExistingServer: !process.env.CI,
        },
        {
          command: 'npm run backend',
          url: 'http://127.0.0.1:3333',
          timeout: 120 * 1000,
          reuseExistingServer: !process.env.CI,
        }
      ],
      use: {
        baseURL: 'http://127.0.0.1:3000',
      },
    });
    ```

    **Type**

    - [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `command`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        Shell command to start. For example `npm run start`..

      - `cwd`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")*(optional)*

        Current working directory of the spawned process, defaults to the directory of the configuration file.

      - `env`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        Environment variables to set for the command, `process.env` by default.

      - `ignoreHTTPSErrors`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")*(optional)*

        Whether to ignore HTTPS errors when fetching the `url`. Defaults to `false`.

      - `port`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")*(optional)*

        The port that your http server is expected to appear on. It does wait until it accepts connections. Either `port` or `url` should be specified.

      - `reuseExistingServer`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")*(optional)*

        If true, it will re-use an existing server on the `port` or `url` when available. If no server is running on that `port` or `url`, it will run the command to start a new server. If `false`, it will throw if an existing process is listening on the `port` or `url`. This should be commonly set to `!process.env.CI` to allow the local dev server when running tests locally.

      - `stdout` "pipe" \| "ignore" *(optional)*

        If `"pipe"`, it will pipe the stdout of the command to the process stdout. If `"ignore"`, it will ignore the stdout of the command. Default to `"ignore"`.

      - `stderr` "pipe" \| "ignore" *(optional)*

        Whether to pipe the stderr of the command to the process stderr or ignore it. Defaults to `"pipe"`.

      - `timeout`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")*(optional)*

        How long to wait for the process to start up and be available in milliseconds. Defaults to 60000.

      - `url`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")*(optional)*

        The url on your http server that is expected to return a 2xx, 3xx, 400, 401, 402, or 403 status code when the server is ready to accept connections. Redirects (3xx status codes) are being followed and the new location is checked. Either `port` or `url` should be specified.

    **Details**

    If the port is specified, Playwright Test will wait for it to be available on `127.0.0.1` or `::1`, before running the tests. If the url is specified, Playwright Test will wait for the URL to return a 2xx, 3xx, 400, 401, 402, or 403 status code before running the tests.

    For continuous integration, you may want to use the `reuseExistingServer: !process.env.CI` option which does not use an existing server on the CI. To see the stdout, you can set the `DEBUG=pw:webserver` environment variable.

    The `port` (but not the `url`) gets passed over to Playwright as a [testOptions.baseURL](class-testoptions#test-options-base-url). For example port `8080` produces `baseURL` equal `http://localhost:8080`. If `webServer` is specified as an array, you must explicitly configure the `baseURL` (even if it only has one entry).

    > note
    >
    > It is also recommended to specify [testOptions.baseURL](class-testoptions#test-options-base-url) in the config, so that tests could use relative urls.
- name: testConfig.workers
  id: api/class-testconfig#test-config-workers
  summary: The maximum number of concurrent worker processes to use for parallelizing tests
  belongs_to: TestConfig
  description: |-
    ### workers[​](#test-config-workers "Direct link to workers")

    The maximum number of concurrent worker processes to use for parallelizing tests. Can also be set as percentage of logical CPU cores, e.g. `'50%'.`

    Playwright Test uses worker processes to run tests. There is always at least one worker process, but more can be used to speed up test execution.

    Defaults to half of the number of logical CPU cores. Learn more about [parallelism and sharding](../test-parallel) with Playwright Test.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      workers: 3,
    });
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    ## Deprecated[​](#deprecated "Direct link to Deprecated")
- name: TestError
  id: api/class-testerror
  summary: Information about an error thrown during test execution
  description: "# TestError\n\nInformation about an error thrown during test execution.\n\n## Properties[​](#properties \"Direct link to Properties\")\n\n### location[​](#test-error-location \"Direct link to location\")\n\nError location in the source code.\n\n**Usage**\n\n``` javascript\ntestError.location\n```\n\n**Type**\n\n- [Location](class-location \"Location\")\n\n### message[​](#test-error-message \"Direct link to message\")\n\nError message. Set when [Error](https://nodejs.org/api/errors.html#errors_class_error \"Error\") (or its subclass) has been thrown.\n\n**Usage**\n\n``` javascript\ntestError.message\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### snippet[​](#test-error-snippet \"Direct link to snippet\")\n\nSource code snippet with highlighted error.\n\n**Usage**\n\n``` javascript\ntestError.snippet\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### stack[​](#test-error-stack \"Direct link to stack\")\n\nError stack. Set when [Error](https://nodejs.org/api/errors.html#errors_class_error \"Error\") (or its subclass) has been thrown.\n\n**Usage**\n\n``` javascript\ntestError.stack\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### value[​](#test-error-value \"Direct link to value\")\n\nThe value that was thrown. Set when anything except the [Error](https://nodejs.org/api/errors.html#errors_class_error \"Error\") (or its subclass) has been thrown.\n\n**Usage**\n\n``` javascript\ntestError.value\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-testerror](https://playwright.dev/docs/api/class-testerror)"
- name: testError.location
  id: api/class-testerror#test-error-location
  summary: Error location in the source code
  belongs_to: TestError
  description: |-
    ### location[​](#test-error-location "Direct link to location")

    Error location in the source code.

    **Usage**

    ``` javascript
    testError.location
    ```

    **Type**

    - [Location](class-location "Location")
- name: testError.message
  id: api/class-testerror#test-error-message
  summary: Error message
  belongs_to: TestError
  description: |-
    ### message[​](#test-error-message "Direct link to message")

    Error message. Set when [Error](https://nodejs.org/api/errors.html#errors_class_error "Error") (or its subclass) has been thrown.

    **Usage**

    ``` javascript
    testError.message
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testError.snippet
  id: api/class-testerror#test-error-snippet
  summary: Source code snippet with highlighted error
  belongs_to: TestError
  description: |-
    ### snippet[​](#test-error-snippet "Direct link to snippet")

    Source code snippet with highlighted error.

    **Usage**

    ``` javascript
    testError.snippet
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testError.stack
  id: api/class-testerror#test-error-stack
  summary: Error stack
  belongs_to: TestError
  description: |-
    ### stack[​](#test-error-stack "Direct link to stack")

    Error stack. Set when [Error](https://nodejs.org/api/errors.html#errors_class_error "Error") (or its subclass) has been thrown.

    **Usage**

    ``` javascript
    testError.stack
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testError.value
  id: api/class-testerror#test-error-value
  summary: The value that was thrown
  belongs_to: TestError
  description: "### value[​](#test-error-value \"Direct link to value\")\n\nThe value that was thrown. Set when anything except the [Error](https://nodejs.org/api/errors.html#errors_class_error \"Error\") (or its subclass) has been thrown.\n\n**Usage**\n\n``` javascript\ntestError.value\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-testerror](https://playwright.dev/docs/api/class-testerror)"
- name: TestInfo
  id: api/class-testinfo
  summary: TestInfo contains information about currently running test
  description: "# TestInfo\n\n`TestInfo` contains information about currently running test. It is available to test functions, [test.beforeEach()](class-test#test-before-each), [test.afterEach()](class-test#test-after-each), [test.beforeAll()](class-test#test-before-all) and [test.afterAll()](class-test#test-after-all) hooks, and test-scoped fixtures. `TestInfo` provides utilities to control test execution: attach files, update test timeout, determine which test is currently running and whether it was retried, etc.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }, testInfo) => {\n  expect(testInfo.title).toBe('basic test');\n  await page.screenshot(testInfo.outputPath('screenshot.png'));\n});\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### attach[​](#test-info-attach \"Direct link to attach\")\n\nAttach a value or a file from disk to the current test. Some reporters show test attachments. Either `path` or `body` must be specified, but not both.\n\nFor example, you can attach a screenshot to the test:\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }, testInfo) => {\n  await page.goto('https://playwright.dev');\n  const screenshot = await page.screenshot();\n  await testInfo.attach('screenshot', { body: screenshot, contentType: 'image/png' });\n});\n```\n\nOr you can attach files returned by your APIs:\n\n``` javascript\nimport { test, expect } from '@playwright/test';\nimport { download } from './my-custom-helpers';\n\ntest('basic test', async ({}, testInfo) => {\n  const tmpPath = await download('a');\n  await testInfo.attach('downloaded', { path: tmpPath });\n});\n```\n\n> note\n>\n> [testInfo.attach()](class-testinfo#test-info-attach) automatically takes care of copying attached files to a location that is accessible to reporters. You can safely remove the attachment after awaiting the attach call.\n\n**Usage**\n\n``` javascript\nawait testInfo.attach(name);\nawait testInfo.attach(name, options);\n```\n\n**Arguments**\n\n- `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Attachment name. The name will also be sanitized and used as the prefix of file name when saving to disk.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `body` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\") *(optional)*\n\n    Attachment body. Mutually exclusive with `path`.\n\n  - `contentType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Content type of this attachment to properly present in the report, for example `'application/json'` or `'image/png'`. If omitted, content type is inferred based on the `path`, or defaults to `text/plain` for [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") attachments and `application/octet-stream` for [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\") attachments.\n\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Path on the filesystem to the attached file. Mutually exclusive with `body`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### fail()[​](#test-info-fail-1 \"Direct link to fail()\")\n\nMarks the currently running test as \"should fail\". Playwright Test runs this test and ensures that it is actually failing. This is useful for documentation purposes to acknowledge that some functionality is broken until it is fixed. This is similar to [test.fail()](class-test#test-fail).\n\n**Usage**\n\n``` javascript\ntestInfo.fail();\n```\n\n### fail(condition)[​](#test-info-fail-2 \"Direct link to fail(condition)\")\n\nConditionally mark the currently running test as \"should fail\" with an optional description. This is similar to [test.fail()](class-test#test-fail).\n\n**Usage**\n\n``` javascript\ntestInfo.fail(condition);\ntestInfo.fail(condition, description);\n```\n\n**Arguments**\n\n- `condition` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n  Test is marked as \"should fail\" when the condition is `true`.\n\n- `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  Optional description that will be reflected in a test report.\n\n### fixme()[​](#test-info-fixme-1 \"Direct link to fixme()\")\n\nMark a test as \"fixme\", with the intention to fix it. Test is immediately aborted. This is similar to [test.fixme()](class-test#test-fixme).\n\n**Usage**\n\n``` javascript\ntestInfo.fixme();\n```\n\n### fixme(condition)[​](#test-info-fixme-2 \"Direct link to fixme(condition)\")\n\nConditionally mark the currently running test as \"fixme\" with an optional description. This is similar to [test.fixme()](class-test#test-fixme).\n\n**Usage**\n\n``` javascript\ntestInfo.fixme(condition);\ntestInfo.fixme(condition, description);\n```\n\n**Arguments**\n\n- `condition` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n  Test is marked as \"fixme\" when the condition is `true`.\n\n- `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  Optional description that will be reflected in a test report.\n\n### outputPath[​](#test-info-output-path \"Direct link to outputPath\")\n\nReturns a path inside the [testInfo.outputDir](class-testinfo#test-info-output-dir) where the test can safely put a temporary file. Guarantees that tests running in parallel will not interfere with each other.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\nimport fs from 'fs';\n\ntest('example test', async ({}, testInfo) => {\n  const file = testInfo.outputPath('dir', 'temporary-file.txt');\n  await fs.promises.writeFile(file, 'Put some data to the dir/temporary-file.txt', 'utf8');\n});\n```\n\n> Note that `pathSegments` accepts path segments to the test output directory such as `testInfo.outputPath('relative', 'path', 'to', 'output')`. However, this path must stay within the [testInfo.outputDir](class-testinfo#test-info-output-dir) directory for each test (i.e. `test-results/a-test-title`), otherwise it will throw.\n\n**Usage**\n\n``` javascript\ntestInfo.outputPath(...pathSegments);\n```\n\n**Arguments**\n\n- `...pathSegments` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n  Path segments to append at the end of the resulting path.\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### setTimeout[​](#test-info-set-timeout \"Direct link to setTimeout\")\n\nChanges the timeout for the currently running test. Zero means no timeout. Learn more about [various timeouts](../test-timeouts).\n\nTimeout is usually specified in the [configuration file](../test-configuration), but it could be useful to change the timeout in certain scenarios:\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.beforeEach(async ({ page }, testInfo) => {\n  // Extend timeout for all tests running this hook by 30 seconds.\n  testInfo.setTimeout(testInfo.timeout + 30000);\n});\n```\n\n**Usage**\n\n``` javascript\ntestInfo.setTimeout(timeout);\n```\n\n**Arguments**\n\n- `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Timeout in milliseconds.\n\n### skip()[​](#test-info-skip-1 \"Direct link to skip()\")\n\nUnconditionally skip the currently running test. Test is immediately aborted. This is similar to [test.skip()](class-test#test-skip).\n\n**Usage**\n\n``` javascript\ntestInfo.skip();\n```\n\n### skip(condition)[​](#test-info-skip-2 \"Direct link to skip(condition)\")\n\nConditionally skips the currently running test with an optional description. This is similar to [test.skip()](class-test#test-skip).\n\n**Usage**\n\n``` javascript\ntestInfo.skip(condition);\ntestInfo.skip(condition, description);\n```\n\n**Arguments**\n\n- `condition` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n  A skip condition. Test is skipped when the condition is `true`.\n\n- `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  Optional description that will be reflected in a test report.\n\n### slow()[​](#test-info-slow-1 \"Direct link to slow()\")\n\nMarks the currently running test as \"slow\", giving it triple the default timeout. This is similar to [test.slow()](class-test#test-slow).\n\n**Usage**\n\n``` javascript\ntestInfo.slow();\n```\n\n### slow(condition)[​](#test-info-slow-2 \"Direct link to slow(condition)\")\n\nConditionally mark the currently running test as \"slow\" with an optional description, giving it triple the default timeout. This is similar to [test.slow()](class-test#test-slow).\n\n**Usage**\n\n``` javascript\ntestInfo.slow(condition);\ntestInfo.slow(condition, description);\n```\n\n**Arguments**\n\n- `condition` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n  Test is marked as \"slow\" when the condition is `true`.\n\n- `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n  Optional description that will be reflected in a test report.\n\n### snapshotPath[​](#test-info-snapshot-path \"Direct link to snapshotPath\")\n\nReturns a path to a snapshot file with the given `pathSegments`. Learn more about [snapshots](../test-snapshots).\n\n> Note that `pathSegments` accepts path segments to the snapshot file such as `testInfo.snapshotPath('relative', 'path', 'to', 'snapshot.png')`. However, this path must stay within the snapshots directory for each test file (i.e. `a.spec.js-snapshots`), otherwise it will throw.\n\n**Usage**\n\n``` javascript\ntestInfo.snapshotPath(...pathSegments);\n```\n\n**Arguments**\n\n- `...pathSegments` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n  The name of the snapshot or the path segments to define the snapshot file path. Snapshots with the same name in the same test file are expected to be the same.\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n## Properties[​](#properties \"Direct link to Properties\")\n\n### annotations[​](#test-info-annotations \"Direct link to annotations\")\n\nThe list of annotations applicable to the current test. Includes annotations from the test, annotations from all [test.describe()](class-test#test-describe) groups the test belongs to and file-level annotations for the test file.\n\nLearn more about [test annotations](../test-annotations).\n\n**Usage**\n\n``` javascript\ntestInfo.annotations\n```\n\n**Type**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `type` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Annotation type, for example `'skip'` or `'fail'`.\n\n  - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Optional description.\n\n### attachments[​](#test-info-attachments \"Direct link to attachments\")\n\nThe list of files or buffers attached to the current test. Some reporters show test attachments.\n\nTo add an attachment, use [testInfo.attach()](class-testinfo#test-info-attach) instead of directly pushing onto this array.\n\n**Usage**\n\n``` javascript\ntestInfo.attachments\n```\n\n**Type**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Attachment name.\n\n  - `contentType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Content type of this attachment to properly present in the report, for example `'application/json'` or `'image/png'`.\n\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Optional path on the filesystem to the attached file.\n\n  - `body` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\") *(optional)*\n\n    Optional attachment body used instead of a file.\n\n### column[​](#test-info-column \"Direct link to column\")\n\nColumn number where the currently running test is declared.\n\n**Usage**\n\n``` javascript\ntestInfo.column\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### config[​](#test-info-config \"Direct link to config\")\n\nProcessed configuration from the [configuration file](../test-configuration).\n\n**Usage**\n\n``` javascript\ntestInfo.config\n```\n\n**Type**\n\n- [FullConfig](class-fullconfig \"FullConfig\")\n\n### duration[​](#test-info-duration \"Direct link to duration\")\n\nThe number of milliseconds the test took to finish. Always zero before the test finishes, either successfully or not. Can be used in [test.afterEach()](class-test#test-after-each) hook.\n\n**Usage**\n\n``` javascript\ntestInfo.duration\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### error[​](#test-info-error \"Direct link to error\")\n\nFirst error thrown during test execution, if any. This is equal to the first element in [testInfo.errors](class-testinfo#test-info-errors).\n\n**Usage**\n\n``` javascript\ntestInfo.error\n```\n\n**Type**\n\n- [TestInfoError](class-testinfoerror \"TestInfoError\")\n\n### errors[​](#test-info-errors \"Direct link to errors\")\n\nErrors thrown during test execution, if any.\n\n**Usage**\n\n``` javascript\ntestInfo.errors\n```\n\n**Type**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[TestInfoError](class-testinfoerror \"TestInfoError\")\\>\n\n### expectedStatus[​](#test-info-expected-status \"Direct link to expectedStatus\")\n\nExpected status for the currently running test. This is usually `'passed'`, except for a few cases:\n\n- `'skipped'` for skipped tests, e.g. with [test.skip()](class-test#test-skip);\n- `'failed'` for tests marked as failed with [test.fail()](class-test#test-fail).\n\nExpected status is usually compared with the actual [testInfo.status](class-testinfo#test-info-status):\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.afterEach(async ({}, testInfo) => {\n  if (testInfo.status !== testInfo.expectedStatus)\n    console.log(`${testInfo.title} did not run as expected!`);\n});\n```\n\n**Usage**\n\n``` javascript\ntestInfo.expectedStatus\n```\n\n**Type**\n\n- \"passed\" \\| \"failed\" \\| \"timedOut\" \\| \"skipped\" \\| \"interrupted\"\n\n### file[​](#test-info-file \"Direct link to file\")\n\nAbsolute path to a file where the currently running test is declared.\n\n**Usage**\n\n``` javascript\ntestInfo.file\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### fn[​](#test-info-fn \"Direct link to fn\")\n\nTest function as passed to `test(title, testFunction)`.\n\n**Usage**\n\n``` javascript\ntestInfo.fn\n```\n\n**Type**\n\n- [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")\n\n### line[​](#test-info-line \"Direct link to line\")\n\nLine number where the currently running test is declared.\n\n**Usage**\n\n``` javascript\ntestInfo.line\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### outputDir[​](#test-info-output-dir \"Direct link to outputDir\")\n\nAbsolute path to the output directory for this specific test run. Each test run gets its own directory so they cannot conflict.\n\n**Usage**\n\n``` javascript\ntestInfo.outputDir\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### parallelIndex[​](#test-info-parallel-index \"Direct link to parallelIndex\")\n\nThe index of the worker between `0` and `workers - 1`. It is guaranteed that workers running at the same time have a different `parallelIndex`. When a worker is restarted, for example after a failure, the new worker process has the same `parallelIndex`.\n\nAlso available as `process.env.TEST_PARALLEL_INDEX`. Learn more about [parallelism and sharding](../test-parallel) with Playwright Test.\n\n**Usage**\n\n``` javascript\ntestInfo.parallelIndex\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### project[​](#test-info-project \"Direct link to project\")\n\nProcessed project configuration from the [configuration file](../test-configuration).\n\n**Usage**\n\n``` javascript\ntestInfo.project\n```\n\n**Type**\n\n- [FullProject](class-fullproject \"FullProject\")\n\n### repeatEachIndex[​](#test-info-repeat-each-index \"Direct link to repeatEachIndex\")\n\nSpecifies a unique repeat index when running in \"repeat each\" mode. This mode is enabled by passing `--repeat-each` to the [command line](../test-cli).\n\n**Usage**\n\n``` javascript\ntestInfo.repeatEachIndex\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### retry[​](#test-info-retry \"Direct link to retry\")\n\nSpecifies the retry number when the test is retried after a failure. The first test run has [testInfo.retry](class-testinfo#test-info-retry) equal to zero, the first retry has it equal to one, and so on. Learn more about [retries](../test-retries#retries).\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.beforeEach(async ({}, testInfo) => {\n  // You can access testInfo.retry in any hook or fixture.\n  if (testInfo.retry > 0)\n    console.log(`Retrying!`);\n});\n\ntest('my test', async ({ page }, testInfo) => {\n  // Here we clear some server-side state when retrying.\n  if (testInfo.retry)\n    await cleanSomeCachesOnTheServer();\n  // ...\n});\n```\n\n**Usage**\n\n``` javascript\ntestInfo.retry\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### snapshotDir[​](#test-info-snapshot-dir \"Direct link to snapshotDir\")\n\nAbsolute path to the snapshot output directory for this specific test. Each test suite gets its own directory so they cannot conflict.\n\nThis property does not account for the [testProject.snapshotPathTemplate](class-testproject#test-project-snapshot-path-template) configuration.\n\n**Usage**\n\n``` javascript\ntestInfo.snapshotDir\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### snapshotSuffix[​](#test-info-snapshot-suffix \"Direct link to snapshotSuffix\")\n\n> note\n>\n> Use of [testInfo.snapshotSuffix](class-testinfo#test-info-snapshot-suffix) is discouraged. Please use [testConfig.snapshotPathTemplate](class-testconfig#test-config-snapshot-path-template) to configure snapshot paths.\n\nSuffix used to differentiate snapshots between multiple test configurations. For example, if snapshots depend on the platform, you can set `testInfo.snapshotSuffix` equal to `process.platform`. In this case `expect(value).toMatchSnapshot(snapshotName)` will use different snapshots depending on the platform. Learn more about [snapshots](../test-snapshots).\n\n**Usage**\n\n``` javascript\ntestInfo.snapshotSuffix\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### status[​](#test-info-status \"Direct link to status\")\n\nActual status for the currently running test. Available after the test has finished in [test.afterEach()](class-test#test-after-each) hook and fixtures.\n\nStatus is usually compared with the [testInfo.expectedStatus](class-testinfo#test-info-expected-status):\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.afterEach(async ({}, testInfo) => {\n  if (testInfo.status !== testInfo.expectedStatus)\n    console.log(`${testInfo.title} did not run as expected!`);\n});\n```\n\n**Usage**\n\n``` javascript\ntestInfo.status\n```\n\n**Type**\n\n- \"passed\" \\| \"failed\" \\| \"timedOut\" \\| \"skipped\" \\| \"interrupted\"\n\n### tags[​](#test-info-tags \"Direct link to tags\")\n\nTags that apply to the test. Learn more about [tags](../test-annotations#tag-tests).\n\nNote that any changes made to this list while the test is running will not be visible to test reporters.\n\n**Usage**\n\n``` javascript\ntestInfo.tags\n```\n\n**Type**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### testId[​](#test-info-test-id \"Direct link to testId\")\n\nTest id matching the test case id in the reporter API.\n\n**Usage**\n\n``` javascript\ntestInfo.testId\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### timeout[​](#test-info-timeout \"Direct link to timeout\")\n\nTimeout in milliseconds for the currently running test. Zero means no timeout. Learn more about [various timeouts](../test-timeouts).\n\nTimeout is usually specified in the [configuration file](../test-configuration)\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.beforeEach(async ({ page }, testInfo) => {\n  // Extend timeout for all tests running this hook by 30 seconds.\n  testInfo.setTimeout(testInfo.timeout + 30000);\n});\n```\n\n**Usage**\n\n``` javascript\ntestInfo.timeout\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### title[​](#test-info-title \"Direct link to title\")\n\nThe title of the currently running test as passed to `test(title, testFunction)`.\n\n**Usage**\n\n``` javascript\ntestInfo.title\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### titlePath[​](#test-info-title-path \"Direct link to titlePath\")\n\nThe full title path starting with the project.\n\n**Usage**\n\n``` javascript\ntestInfo.titlePath\n```\n\n**Type**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### workerIndex[​](#test-info-worker-index \"Direct link to workerIndex\")\n\nThe unique index of the worker process that is running the test. When a worker is restarted, for example after a failure, the new worker process gets a new unique `workerIndex`.\n\nAlso available as `process.env.TEST_WORKER_INDEX`. Learn more about [parallelism and sharding](../test-parallel) with Playwright Test.\n\n**Usage**\n\n``` javascript\ntestInfo.workerIndex\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-testinfo](https://playwright.dev/docs/api/class-testinfo)"
- name: testInfo.annotations
  id: api/class-testinfo#test-info-annotations
  summary: The list of annotations applicable to the current test
  belongs_to: TestInfo
  description: |-
    ### annotations[​](#test-info-annotations "Direct link to annotations")

    The list of annotations applicable to the current test. Includes annotations from the test, annotations from all [test.describe()](class-test#test-describe) groups the test belongs to and file-level annotations for the test file.

    Learn more about [test annotations](../test-annotations).

    **Usage**

    ``` javascript
    testInfo.annotations
    ```

    **Type**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `type`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        Annotation type, for example `'skip'` or `'fail'`.

      - `description`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")*(optional)*

        Optional description.

    &nbsp;
- name: testInfo.attach
  id: api/class-testinfo#test-info-attach
  summary: Attach a value or a file from disk to the current test
  belongs_to: TestInfo
  description: |-
    ### attach[​](#test-info-attach "Direct link to attach")

    Attach a value or a file from disk to the current test. Some reporters show test attachments. Either `path` or `body` must be specified, but not both.

    For example, you can attach a screenshot to the test:

    ``` javascript
    import { test, expect } from '@playwright/test';

    test('basic test', async ({ page }, testInfo) => {
      await page.goto('https://playwright.dev');
      const screenshot = await page.screenshot();
      await testInfo.attach('screenshot', { body: screenshot, contentType: 'image/png' });
    });
    ```

    Or you can attach files returned by your APIs:

    ``` javascript
    import { test, expect } from '@playwright/test';
    import { download } from './my-custom-helpers';

    test('basic test', async ({}, testInfo) => {
      const tmpPath = await download('a');
      await testInfo.attach('downloaded', { path: tmpPath });
    });
    ```

    > note
    >
    > [testInfo.attach()](class-testinfo#test-info-attach) automatically takes care of copying attached files to a location that is accessible to reporters. You can safely remove the attachment after awaiting the attach call.

    **Usage**

    ``` javascript
    await testInfo.attach(name);
    await testInfo.attach(name, options);
    ```

    **Arguments**

    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Attachment name. The name will also be sanitized and used as the prefix of file name when saving to disk.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `body`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer") *(optional)*

        Attachment body. Mutually exclusive with `path`.

      - `contentType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Content type of this attachment to properly present in the report, for example `'application/json'` or `'image/png'`. If omitted, content type is inferred based on the `path`, or defaults to `text/plain` for [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") attachments and `application/octet-stream` for [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer") attachments.

      - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Path on the filesystem to the attached file. Mutually exclusive with `body`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>
- name: testInfo.attachments
  id: api/class-testinfo#test-info-attachments
  summary: The list of files or buffers attached to the current test
  belongs_to: TestInfo
  description: |-
    ### attachments[​](#test-info-attachments "Direct link to attachments")

    The list of files or buffers attached to the current test. Some reporters show test attachments.

    To add an attachment, use [testInfo.attach()](class-testinfo#test-info-attach) instead of directly pushing onto this array.

    **Usage**

    ``` javascript
    testInfo.attachments
    ```

    **Type**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        Attachment name.

      - `contentType`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        Content type of this attachment to properly present in the report, for example `'application/json'` or `'image/png'`.

      - `path`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")*(optional)*

        Optional path on the filesystem to the attached file.

      - `body`[Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")*(optional)*

        Optional attachment body used instead of a file.

    &nbsp;
- name: testInfo.column
  id: api/class-testinfo#test-info-column
  summary: Column number where the currently running test is declared
  belongs_to: TestInfo
  description: |-
    ### column[​](#test-info-column "Direct link to column")

    Column number where the currently running test is declared.

    **Usage**

    ``` javascript
    testInfo.column
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testInfo.config
  id: api/class-testinfo#test-info-config
  summary: Processed configuration from the configuration file
  belongs_to: TestInfo
  description: |-
    ### config[​](#test-info-config "Direct link to config")

    Processed configuration from the [configuration file](../test-configuration).

    **Usage**

    ``` javascript
    testInfo.config
    ```

    **Type**

    - [FullConfig](class-fullconfig "FullConfig")

    &nbsp;
- name: testInfo.duration
  id: api/class-testinfo#test-info-duration
  summary: The number of milliseconds the test took to finish
  belongs_to: TestInfo
  description: |-
    ### duration[​](#test-info-duration "Direct link to duration")

    The number of milliseconds the test took to finish. Always zero before the test finishes, either successfully or not. Can be used in [test.afterEach()](class-test#test-after-each) hook.

    **Usage**

    ``` javascript
    testInfo.duration
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testInfo.error
  id: api/class-testinfo#test-info-error
  summary: First error thrown during test execution, if any
  belongs_to: TestInfo
  description: |-
    ### error[​](#test-info-error "Direct link to error")

    First error thrown during test execution, if any. This is equal to the first element in [testInfo.errors](class-testinfo#test-info-errors).

    **Usage**

    ``` javascript
    testInfo.error
    ```

    **Type**

    - [TestInfoError](class-testinfoerror "TestInfoError")

    &nbsp;
- name: testInfo.errors
  id: api/class-testinfo#test-info-errors
  summary: Errors thrown during test execution, if any
  belongs_to: TestInfo
  description: |-
    ### errors[​](#test-info-errors "Direct link to errors")

    Errors thrown during test execution, if any.

    **Usage**

    ``` javascript
    testInfo.errors
    ```

    **Type**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[TestInfoError](class-testinfoerror "TestInfoError")\>

    &nbsp;
- name: testInfo.expectedStatus
  id: api/class-testinfo#test-info-expected-status
  summary: Expected status for the currently running test
  belongs_to: TestInfo
  description: |-
    ### expectedStatus[​](#test-info-expected-status "Direct link to expectedStatus")

    Expected status for the currently running test. This is usually `'passed'`, except for a few cases:

    - `'skipped'` for skipped tests, e.g. with [test.skip()](class-test#test-skip);
    - `'failed'` for tests marked as failed with [test.fail()](class-test#test-fail).

    Expected status is usually compared with the actual [testInfo.status](class-testinfo#test-info-status):

    ``` javascript
    import { test, expect } from '@playwright/test';

    test.afterEach(async ({}, testInfo) => {
      if (testInfo.status !== testInfo.expectedStatus)
        console.log(`${testInfo.title} did not run as expected!`);
    });
    ```

    **Usage**

    ``` javascript
    testInfo.expectedStatus
    ```

    **Type**

    - "passed" \| "failed" \| "timedOut" \| "skipped" \| "interrupted"

    &nbsp;
- name: testInfo.fail()
  id: api/class-testinfo#test-info-fail-1
  summary: Marks the currently running test as "should fail". Playwright Test runs this test and ensures that it is actually failing
  belongs_to: TestInfo
  description: |-
    ### fail()[​](#test-info-fail-1 "Direct link to fail()")

    Marks the currently running test as "should fail". Playwright Test runs this test and ensures that it is actually failing. This is useful for documentation purposes to acknowledge that some functionality is broken until it is fixed. This is similar to [test.fail()](class-test#test-fail).

    **Usage**

    ``` javascript
    testInfo.fail();
    ```
- name: testInfo.fail(condition)
  id: api/class-testinfo#test-info-fail-2
  summary: Conditionally mark the currently running test as "should fail" with an optional description
  belongs_to: TestInfo
  description: |-
    ### fail(condition)[​](#test-info-fail-2 "Direct link to fail(condition)")

    Conditionally mark the currently running test as "should fail" with an optional description. This is similar to [test.fail()](class-test#test-fail).

    **Usage**

    ``` javascript
    testInfo.fail(condition);
    testInfo.fail(condition, description);
    ```

    **Arguments**

    - `condition` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

      Test is marked as "should fail" when the condition is `true`.

    - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      Optional description that will be reflected in a test report.

    &nbsp;
- name: testInfo.file
  id: api/class-testinfo#test-info-file
  summary: Absolute path to a file where the currently running test is declared
  belongs_to: TestInfo
  description: |-
    ### file[​](#test-info-file "Direct link to file")

    Absolute path to a file where the currently running test is declared.

    **Usage**

    ``` javascript
    testInfo.file
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testInfo.fixme()
  id: api/class-testinfo#test-info-fixme-1
  summary: Mark a test as "fixme", with the intention to fix it
  belongs_to: TestInfo
  description: |-
    ### fixme()[​](#test-info-fixme-1 "Direct link to fixme()")

    Mark a test as "fixme", with the intention to fix it. Test is immediately aborted. This is similar to [test.fixme()](class-test#test-fixme).

    **Usage**

    ``` javascript
    testInfo.fixme();
    ```
- name: testInfo.fixme(condition)
  id: api/class-testinfo#test-info-fixme-2
  summary: Conditionally mark the currently running test as "fixme" with an optional description
  belongs_to: TestInfo
  description: |-
    ### fixme(condition)[​](#test-info-fixme-2 "Direct link to fixme(condition)")

    Conditionally mark the currently running test as "fixme" with an optional description. This is similar to [test.fixme()](class-test#test-fixme).

    **Usage**

    ``` javascript
    testInfo.fixme(condition);
    testInfo.fixme(condition, description);
    ```

    **Arguments**

    - `condition` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

      Test is marked as "fixme" when the condition is `true`.

    - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      Optional description that will be reflected in a test report.

    &nbsp;
- name: testInfo.fn
  id: api/class-testinfo#test-info-fn
  summary: Test function as passed to test(title, testFunction)
  belongs_to: TestInfo
  description: |-
    ### fn[​](#test-info-fn "Direct link to fn")

    Test function as passed to `test(title, testFunction)`.

    **Usage**

    ``` javascript
    testInfo.fn
    ```

    **Type**

    - [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")

    &nbsp;
- name: testInfo.line
  id: api/class-testinfo#test-info-line
  summary: Line number where the currently running test is declared
  belongs_to: TestInfo
  description: |-
    ### line[​](#test-info-line "Direct link to line")

    Line number where the currently running test is declared.

    **Usage**

    ``` javascript
    testInfo.line
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testInfo.outputDir
  id: api/class-testinfo#test-info-output-dir
  summary: Absolute path to the output directory for this specific test run
  belongs_to: TestInfo
  description: |-
    ### outputDir[​](#test-info-output-dir "Direct link to outputDir")

    Absolute path to the output directory for this specific test run. Each test run gets its own directory so they cannot conflict.

    **Usage**

    ``` javascript
    testInfo.outputDir
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testInfo.outputPath
  id: api/class-testinfo#test-info-output-path
  summary: Returns a path inside the testInfo.outputDir where the test can safely put a temporary file
  belongs_to: TestInfo
  description: |-
    ### outputPath[​](#test-info-output-path "Direct link to outputPath")

    Returns a path inside the [testInfo.outputDir](class-testinfo#test-info-output-dir) where the test can safely put a temporary file. Guarantees that tests running in parallel will not interfere with each other.

    ``` javascript
    import { test, expect } from '@playwright/test';
    import fs from 'fs';

    test('example test', async ({}, testInfo) => {
      const file = testInfo.outputPath('dir', 'temporary-file.txt');
      await fs.promises.writeFile(file, 'Put some data to the dir/temporary-file.txt', 'utf8');
    });
    ```

    > Note that `pathSegments` accepts path segments to the test output directory such as `testInfo.outputPath('relative', 'path', 'to', 'output')`. However, this path must stay within the [testInfo.outputDir](class-testinfo#test-info-output-dir) directory for each test (i.e. `test-results/a-test-title`), otherwise it will throw.

    **Usage**

    ``` javascript
    testInfo.outputPath(...pathSegments);
    ```

    **Arguments**

    - `...pathSegments`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

      Path segments to append at the end of the resulting path.

    **Returns**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testInfo.parallelIndex
  id: api/class-testinfo#test-info-parallel-index
  summary: The index of the worker between 0 and workers - 1
  belongs_to: TestInfo
  description: |-
    ### parallelIndex[​](#test-info-parallel-index "Direct link to parallelIndex")

    The index of the worker between `0` and `workers - 1`. It is guaranteed that workers running at the same time have a different `parallelIndex`. When a worker is restarted, for example after a failure, the new worker process has the same `parallelIndex`.

    Also available as `process.env.TEST_PARALLEL_INDEX`. Learn more about [parallelism and sharding](../test-parallel) with Playwright Test.

    **Usage**

    ``` javascript
    testInfo.parallelIndex
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testInfo.project
  id: api/class-testinfo#test-info-project
  summary: Processed project configuration from the configuration file
  belongs_to: TestInfo
  description: |-
    ### project[​](#test-info-project "Direct link to project")

    Processed project configuration from the [configuration file](../test-configuration).

    **Usage**

    ``` javascript
    testInfo.project
    ```

    **Type**

    - [FullProject](class-fullproject "FullProject")

    &nbsp;
- name: testInfo.repeatEachIndex
  id: api/class-testinfo#test-info-repeat-each-index
  summary: Specifies a unique repeat index when running in "repeat each" mode
  belongs_to: TestInfo
  description: |-
    ### repeatEachIndex[​](#test-info-repeat-each-index "Direct link to repeatEachIndex")

    Specifies a unique repeat index when running in "repeat each" mode. This mode is enabled by passing `--repeat-each` to the [command line](../test-cli).

    **Usage**

    ``` javascript
    testInfo.repeatEachIndex
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testInfo.retry
  id: api/class-testinfo#test-info-retry
  summary: Specifies the retry number when the test is retried after a failure
  belongs_to: TestInfo
  description: |-
    ### retry[​](#test-info-retry "Direct link to retry")

    Specifies the retry number when the test is retried after a failure. The first test run has [testInfo.retry](class-testinfo#test-info-retry) equal to zero, the first retry has it equal to one, and so on. Learn more about [retries](../test-retries#retries).

    ``` javascript
    import { test, expect } from '@playwright/test';

    test.beforeEach(async ({}, testInfo) => {
      // You can access testInfo.retry in any hook or fixture.
      if (testInfo.retry > 0)
        console.log(`Retrying!`);
    });

    test('my test', async ({ page }, testInfo) => {
      // Here we clear some server-side state when retrying.
      if (testInfo.retry)
        await cleanSomeCachesOnTheServer();
      // ...
    });
    ```

    **Usage**

    ``` javascript
    testInfo.retry
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testInfo.setTimeout
  id: api/class-testinfo#test-info-set-timeout
  summary: Changes the timeout for the currently running test
  belongs_to: TestInfo
  description: |-
    ### setTimeout[​](#test-info-set-timeout "Direct link to setTimeout")

    Changes the timeout for the currently running test. Zero means no timeout. Learn more about [various timeouts](../test-timeouts).

    Timeout is usually specified in the [configuration file](../test-configuration), but it could be useful to change the timeout in certain scenarios:

    ``` javascript
    import { test, expect } from '@playwright/test';

    test.beforeEach(async ({ page }, testInfo) => {
      // Extend timeout for all tests running this hook by 30 seconds.
      testInfo.setTimeout(testInfo.timeout + 30000);
    });
    ```

    **Usage**

    ``` javascript
    testInfo.setTimeout(timeout);
    ```

    **Arguments**

    - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

      Timeout in milliseconds.

    &nbsp;
- name: testInfo.skip()
  id: api/class-testinfo#test-info-skip-1
  summary: Unconditionally skip the currently running test
  belongs_to: TestInfo
  description: |-
    ### skip()[​](#test-info-skip-1 "Direct link to skip()")

    Unconditionally skip the currently running test. Test is immediately aborted. This is similar to [test.skip()](class-test#test-skip).

    **Usage**

    ``` javascript
    testInfo.skip();
    ```
- name: testInfo.skip(condition)
  id: api/class-testinfo#test-info-skip-2
  summary: Conditionally skips the currently running test with an optional description
  belongs_to: TestInfo
  description: |-
    ### skip(condition)[​](#test-info-skip-2 "Direct link to skip(condition)")

    Conditionally skips the currently running test with an optional description. This is similar to [test.skip()](class-test#test-skip).

    **Usage**

    ``` javascript
    testInfo.skip(condition);
    testInfo.skip(condition, description);
    ```

    **Arguments**

    - `condition` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

      A skip condition. Test is skipped when the condition is `true`.

    - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      Optional description that will be reflected in a test report.

    &nbsp;
- name: testInfo.slow()
  id: api/class-testinfo#test-info-slow-1
  summary: Marks the currently running test as "slow", giving it triple the default timeout
  belongs_to: TestInfo
  description: |-
    ### slow()[​](#test-info-slow-1 "Direct link to slow()")

    Marks the currently running test as "slow", giving it triple the default timeout. This is similar to [test.slow()](class-test#test-slow).

    **Usage**

    ``` javascript
    testInfo.slow();
    ```
- name: testInfo.slow(condition)
  id: api/class-testinfo#test-info-slow-2
  summary: Conditionally mark the currently running test as "slow" with an optional description, giving it triple the default timeout
  belongs_to: TestInfo
  description: |-
    ### slow(condition)[​](#test-info-slow-2 "Direct link to slow(condition)")

    Conditionally mark the currently running test as "slow" with an optional description, giving it triple the default timeout. This is similar to [test.slow()](class-test#test-slow).

    **Usage**

    ``` javascript
    testInfo.slow(condition);
    testInfo.slow(condition, description);
    ```

    **Arguments**

    - `condition` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

      Test is marked as "slow" when the condition is `true`.

    - `description` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

      Optional description that will be reflected in a test report.

    &nbsp;
- name: testInfo.snapshotDir
  id: api/class-testinfo#test-info-snapshot-dir
  summary: Absolute path to the snapshot output directory for this specific test
  belongs_to: TestInfo
  description: |-
    ### snapshotDir[​](#test-info-snapshot-dir "Direct link to snapshotDir")

    Absolute path to the snapshot output directory for this specific test. Each test suite gets its own directory so they cannot conflict.

    This property does not account for the [testProject.snapshotPathTemplate](class-testproject#test-project-snapshot-path-template) configuration.

    **Usage**

    ``` javascript
    testInfo.snapshotDir
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testInfo.snapshotPath
  id: api/class-testinfo#test-info-snapshot-path
  summary: Returns a path to a snapshot file with the given pathSegments
  belongs_to: TestInfo
  description: |-
    ### snapshotPath[​](#test-info-snapshot-path "Direct link to snapshotPath")

    Returns a path to a snapshot file with the given `pathSegments`. Learn more about [snapshots](../test-snapshots).

    > Note that `pathSegments` accepts path segments to the snapshot file such as `testInfo.snapshotPath('relative', 'path', 'to', 'snapshot.png')`. However, this path must stay within the snapshots directory for each test file (i.e. `a.spec.js-snapshots`), otherwise it will throw.

    **Usage**

    ``` javascript
    testInfo.snapshotPath(...pathSegments);
    ```

    **Arguments**

    - `...pathSegments`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

      The name of the snapshot or the path segments to define the snapshot file path. Snapshots with the same name in the same test file are expected to be the same.

    **Returns**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    ## Properties[​](#properties "Direct link to Properties")
- name: testInfo.snapshotSuffix
  id: api/class-testinfo#test-info-snapshot-suffix
  summary: Use of testInfo.snapshotSuffix is discouraged
  belongs_to: TestInfo
  description: |-
    ### snapshotSuffix[​](#test-info-snapshot-suffix "Direct link to snapshotSuffix")

    > note
    >
    > Use of [testInfo.snapshotSuffix](class-testinfo#test-info-snapshot-suffix) is discouraged. Please use [testConfig.snapshotPathTemplate](class-testconfig#test-config-snapshot-path-template) to configure snapshot paths.

    Suffix used to differentiate snapshots between multiple test configurations. For example, if snapshots depend on the platform, you can set `testInfo.snapshotSuffix` equal to `process.platform`. In this case `expect(value).toMatchSnapshot(snapshotName)` will use different snapshots depending on the platform. Learn more about [snapshots](../test-snapshots).

    **Usage**

    ``` javascript
    testInfo.snapshotSuffix
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testInfo.status
  id: api/class-testinfo#test-info-status
  summary: Actual status for the currently running test
  belongs_to: TestInfo
  description: |-
    ### status[​](#test-info-status "Direct link to status")

    Actual status for the currently running test. Available after the test has finished in [test.afterEach()](class-test#test-after-each) hook and fixtures.

    Status is usually compared with the [testInfo.expectedStatus](class-testinfo#test-info-expected-status):

    ``` javascript
    import { test, expect } from '@playwright/test';

    test.afterEach(async ({}, testInfo) => {
      if (testInfo.status !== testInfo.expectedStatus)
        console.log(`${testInfo.title} did not run as expected!`);
    });
    ```

    **Usage**

    ``` javascript
    testInfo.status
    ```

    **Type**

    - "passed" \| "failed" \| "timedOut" \| "skipped" \| "interrupted"

    &nbsp;
- name: testInfo.tags
  id: api/class-testinfo#test-info-tags
  summary: Tags that apply to the test
  belongs_to: TestInfo
  description: |-
    ### tags[​](#test-info-tags "Direct link to tags")

    Tags that apply to the test. Learn more about [tags](../test-annotations#tag-tests).

    Note that any changes made to this list while the test is running will not be visible to test reporters.

    **Usage**

    ``` javascript
    testInfo.tags
    ```

    **Type**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: testInfo.testId
  id: api/class-testinfo#test-info-test-id
  summary: Test id matching the test case id in the reporter API
  belongs_to: TestInfo
  description: |-
    ### testId[​](#test-info-test-id "Direct link to testId")

    Test id matching the test case id in the reporter API.

    **Usage**

    ``` javascript
    testInfo.testId
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testInfo.timeout
  id: api/class-testinfo#test-info-timeout
  summary: Timeout in milliseconds for the currently running test
  belongs_to: TestInfo
  description: |-
    ### timeout[​](#test-info-timeout "Direct link to timeout")

    Timeout in milliseconds for the currently running test. Zero means no timeout. Learn more about [various timeouts](../test-timeouts).

    Timeout is usually specified in the [configuration file](../test-configuration)

    ``` javascript
    import { test, expect } from '@playwright/test';

    test.beforeEach(async ({ page }, testInfo) => {
      // Extend timeout for all tests running this hook by 30 seconds.
      testInfo.setTimeout(testInfo.timeout + 30000);
    });
    ```

    **Usage**

    ``` javascript
    testInfo.timeout
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testInfo.title
  id: api/class-testinfo#test-info-title
  summary: The title of the currently running test as passed to test(title, testFunction)
  belongs_to: TestInfo
  description: |-
    ### title[​](#test-info-title "Direct link to title")

    The title of the currently running test as passed to `test(title, testFunction)`.

    **Usage**

    ``` javascript
    testInfo.title
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testInfo.titlePath
  id: api/class-testinfo#test-info-title-path
  summary: The full title path starting with the project
  belongs_to: TestInfo
  description: |-
    ### titlePath[​](#test-info-title-path "Direct link to titlePath")

    The full title path starting with the project.

    **Usage**

    ``` javascript
    testInfo.titlePath
    ```

    **Type**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: testInfo.workerIndex
  id: api/class-testinfo#test-info-worker-index
  summary: The unique index of the worker process that is running the test
  belongs_to: TestInfo
  description: "### workerIndex[​](#test-info-worker-index \"Direct link to workerIndex\")\n\nThe unique index of the worker process that is running the test. When a worker is restarted, for example after a failure, the new worker process gets a new unique `workerIndex`.\n\nAlso available as `process.env.TEST_WORKER_INDEX`. Learn more about [parallelism and sharding](../test-parallel) with Playwright Test.\n\n**Usage**\n\n``` javascript\ntestInfo.workerIndex\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-testinfo](https://playwright.dev/docs/api/class-testinfo)"
- name: TestInfoError
  id: api/class-testinfoerror
  summary: Information about an error thrown during test execution
  description: "# TestInfoError\n\nInformation about an error thrown during test execution.\n\n## Properties[​](#properties \"Direct link to Properties\")\n\n### message[​](#test-info-error-message \"Direct link to message\")\n\nError message. Set when [Error](https://nodejs.org/api/errors.html#errors_class_error \"Error\") (or its subclass) has been thrown.\n\n**Usage**\n\n``` javascript\ntestInfoError.message\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### stack[​](#test-info-error-stack \"Direct link to stack\")\n\nError stack. Set when [Error](https://nodejs.org/api/errors.html#errors_class_error \"Error\") (or its subclass) has been thrown.\n\n**Usage**\n\n``` javascript\ntestInfoError.stack\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### value[​](#test-info-error-value \"Direct link to value\")\n\nThe value that was thrown. Set when anything except the [Error](https://nodejs.org/api/errors.html#errors_class_error \"Error\") (or its subclass) has been thrown.\n\n**Usage**\n\n``` javascript\ntestInfoError.value\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-testinfoerror](https://playwright.dev/docs/api/class-testinfoerror)"
- name: testInfoError.message
  id: api/class-testinfoerror#test-info-error-message
  summary: Error message
  belongs_to: TestInfoError
  description: |-
    ### message[​](#test-info-error-message "Direct link to message")

    Error message. Set when [Error](https://nodejs.org/api/errors.html#errors_class_error "Error") (or its subclass) has been thrown.

    **Usage**

    ``` javascript
    testInfoError.message
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")
- name: testInfoError.stack
  id: api/class-testinfoerror#test-info-error-stack
  summary: Error stack
  belongs_to: TestInfoError
  description: |-
    ### stack[​](#test-info-error-stack "Direct link to stack")

    Error stack. Set when [Error](https://nodejs.org/api/errors.html#errors_class_error "Error") (or its subclass) has been thrown.

    **Usage**

    ``` javascript
    testInfoError.stack
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testInfoError.value
  id: api/class-testinfoerror#test-info-error-value
  summary: The value that was thrown
  belongs_to: TestInfoError
  description: "### value[​](#test-info-error-value \"Direct link to value\")\n\nThe value that was thrown. Set when anything except the [Error](https://nodejs.org/api/errors.html#errors_class_error \"Error\") (or its subclass) has been thrown.\n\n**Usage**\n\n``` javascript\ntestInfoError.value\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-testinfoerror](https://playwright.dev/docs/api/class-testinfoerror)"
- name: TestOptions
  id: api/class-testoptions
  summary: Playwright Test provides many options to configure test environment, Browser, BrowserContext and more
  description: "# TestOptions\n\nPlaywright Test provides many options to configure test environment, [Browser](class-browser \"Browser\"), [BrowserContext](class-browsercontext \"BrowserContext\") and more.\n\nThese options are usually provided in the [configuration file](../test-configuration) through [testConfig.use](class-testconfig#test-config-use) and [testProject.use](class-testproject#test-project-use).\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    headless: false,\n    viewport: { width: 1280, height: 720 },\n    ignoreHTTPSErrors: true,\n    video: 'on-first-retry',\n  },\n});\n```\n\nAlternatively, with [test.use()](class-test#test-use) you can override some options for a file.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\n// Run tests in this file with portrait-like viewport.\ntest.use({ viewport: { width: 600, height: 900 } });\n\ntest('my portrait test', async ({ page }) => {\n  // ...\n});\n```\n\n## Properties[​](#properties \"Direct link to Properties\")\n\n### acceptDownloads[​](#test-options-accept-downloads \"Direct link to acceptDownloads\")\n\nWhether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    acceptDownloads: false,\n  },\n});\n```\n\n**Type**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### actionTimeout[​](#test-options-action-timeout \"Direct link to actionTimeout\")\n\nDefault timeout for each Playwright action in milliseconds, defaults to 0 (no timeout).\n\nThis is a default timeout for all Playwright actions, same as configured via [page.setDefaultTimeout()](class-page#page-set-default-timeout).\n\n**Usage**\n\n``` javascript\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    /* Maximum time each action such as `click()` can take. Defaults to 0 (no limit). */\n    actionTimeout: 0,\n  },\n});\n```\n\nLearn more about [various timeouts](../test-timeouts).\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### baseURL[​](#test-options-base-url \"Direct link to baseURL\")\n\nWhen using [page.goto()](class-page#page-goto), [page.route()](class-page#page-route), [page.waitForURL()](class-page#page-wait-for-url), [page.waitForRequest()](class-page#page-wait-for-request), or [page.waitForResponse()](class-page#page-wait-for-response) it takes the base URL in consideration by using the [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL. Unset by default. Examples:\n\n- baseURL: `http://localhost:3000` and navigating to `/bar.html` results in `http://localhost:3000/bar.html`\n- baseURL: `http://localhost:3000/foo/` and navigating to `./bar.html` results in `http://localhost:3000/foo/bar.html`\n- baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in `http://localhost:3000/bar.html`\n\n**Usage**\n\n``` javascript\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    /* Base URL to use in actions like `await page.goto('/')`. */\n    baseURL: 'http://localhost:3000',\n  },\n});\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### browserName[​](#test-options-browser-name \"Direct link to browserName\")\n\nName of the browser that runs tests. Defaults to `'chromium'`. Most of the time you should set `browserName` in your [TestConfig](class-testconfig \"TestConfig\"):\n\n**Usage**\n\n``` javascript\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    browserName: 'firefox',\n  },\n});\n```\n\n**Type**\n\n- \"chromium\" \\| \"firefox\" \\| \"webkit\"\n\n### bypassCSP[​](#test-options-bypass-csp \"Direct link to bypassCSP\")\n\nToggles bypassing page's Content-Security-Policy. Defaults to `false`.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    bypassCSP: true,\n  }\n});\n```\n\n**Type**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### channel[​](#test-options-channel \"Direct link to channel\")\n\nBrowser distribution channel. Supported values are \"chrome\", \"chrome-beta\", \"chrome-dev\", \"chrome-canary\", \"msedge\", \"msedge-beta\", \"msedge-dev\", \"msedge-canary\". Read more about using [Google Chrome and Microsoft Edge](../browsers#google-chrome--microsoft-edge).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'Microsoft Edge',\n      use: {\n        ...devices['Desktop Edge'],\n        channel: 'msedge'\n      },\n    },\n  ]\n});\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### clientCertificates[​](#test-options-client-certificates \"Direct link to clientCertificates\")\n\nTLS Client Authentication allows the server to request a client certificate and verify it.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    clientCertificates: [{\n      origin: 'https://example.com',\n      certPath: './cert.pem',\n      keyPath: './key.pem',\n      passphrase: 'mysecretpassword',\n    }],\n  },\n});\n```\n\n**Type**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Exact origin that the certificate is valid for. Origin includes `https` protocol, a hostname and optionally a port.\n\n  - `certPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Path to the file with the certificate in PEM format.\n\n  - `keyPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Path to the file with the private key in PEM format.\n\n  - `pfxPath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Path to the PFX or PKCS12 encoded private key and certificate chain.\n\n  - `passphrase` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Passphrase for the private key (PEM or PFX).\n\n**Details**\n\nAn array of client certificates to be used. Each certificate object must have both `certPath` and `keyPath` or a single `pfxPath` to load the client certificate. Optionally, `passphrase` property should be provided if the certficiate is encrypted. The `origin` property should be provided with an exact match to the request origin that the certificate is valid for.\n\n> note\n>\n> Using Client Certificates in combination with Proxy Servers is not supported.\n\n> note\n>\n> When using WebKit on macOS, accessing `localhost` will not pick up client certificates. You can make it work by replacing `localhost` with `local.playwright`.\n\n### colorScheme[​](#test-options-color-scheme \"Direct link to colorScheme\")\n\nEmulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'light'`.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    colorScheme: 'dark',\n  },\n});\n```\n\n**Type**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| \"light\" \\| \"dark\" \\| \"no-preference\"\n\n### connectOptions[​](#test-options-connect-options \"Direct link to connectOptions\")\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    connectOptions: {\n      wsEndpoint: 'ws://localhost:5678',\n    },\n  },\n});\n```\n\nWhen connect options are specified, default [fixtures.browser](class-fixtures#fixtures-browser), [fixtures.context](class-fixtures#fixtures-context) and [fixtures.page](class-fixtures#fixtures-page) use the remote browser instead of launching a browser locally, and any launch options like [testOptions.headless](class-testoptions#test-options-headless) or [testOptions.channel](class-testoptions#test-options-channel) are ignored.\n\n**Type**\n\n- [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `wsEndpoint` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    A browser websocket endpoint to connect to.\n\n  - `headers` [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n    Additional HTTP headers to be sent with web socket connect request. Optional.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Timeout in milliseconds for the connection to be established. Optional, defaults to no timeout.\n\n  - `exposeNetwork` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Option to expose network available on the connecting client to the browser being connected to. See [browserType.connect()](class-browsertype#browser-type-connect) for more details.\n\n### contextOptions[​](#test-options-context-options \"Direct link to contextOptions\")\n\nOptions used to create the context, as passed to [browser.newContext()](class-browser#browser-new-context). Specific options like [testOptions.viewport](class-testoptions#test-options-viewport) take priority over this.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    contextOptions: {\n      reducedMotion: 'reduce',\n    },\n  },\n});\n```\n\n**Type**\n\n- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n### deviceScaleFactor[​](#test-options-device-scale-factor \"Direct link to deviceScaleFactor\")\n\nSpecify device scale factor (can be thought of as dpr). Defaults to `1`. Learn more about [emulating devices with device scale factor](../emulation#devices).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    viewport: { width: 2560, height: 1440 },\n    deviceScaleFactor: 2,\n  },\n});\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### extraHTTPHeaders[​](#test-options-extra-http-headers \"Direct link to extraHTTPHeaders\")\n\nAn object containing additional HTTP headers to be sent with every request. Defaults to none.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    extraHTTPHeaders: {\n      'X-My-Header': 'value',\n    },\n  },\n});\n```\n\n**Type**\n\n- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### geolocation[​](#test-options-geolocation \"Direct link to geolocation\")\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    geolocation: { longitude: 12.492507, latitude: 41.889938 },\n  },\n});\n```\n\nLearn more about [geolocation](../emulation#color-scheme-and-media).\n\n**Type**\n\n- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `latitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Latitude between -90 and 90.\n\n  - `longitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Longitude between -180 and 180.\n\n  - `accuracy` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Non-negative accuracy value. Defaults to `0`.\n\n### hasTouch[​](#test-options-has-touch \"Direct link to hasTouch\")\n\nSpecifies if viewport supports touch events. Defaults to false. Learn more about [mobile emulation](../emulation#devices).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    hasTouch: true\n  },\n});\n```\n\n**Type**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### headless[​](#test-options-headless \"Direct link to headless\")\n\nWhether to run browser in headless mode. More details for [Chromium](https://developers.google.com/web/updates/2017/04/headless-chrome) and [Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode). Defaults to `true` unless the `devtools` option is `true`.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    headless: false\n  },\n});\n```\n\n**Type**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### httpCredentials[​](#test-options-http-credentials \"Direct link to httpCredentials\")\n\nCredentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no origin is specified, the username and password are sent to any servers upon unauthorized responses.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    httpCredentials: {\n      username: 'user',\n      password: 'pass',\n    },\n  },\n});\n```\n\n**Type**\n\n- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Restrain sending http credentials on specific origin (scheme://host:port).\n\n  - `send` \"unauthorized\" \\| \"always\" *(optional)*\n\n    This option only applies to the requests sent from corresponding [APIRequestContext](class-apirequestcontext \"APIRequestContext\") and does not affect requests sent from the browser. `'always'` - `Authorization` header with basic authentication credentials will be sent with the each API request. `'unauthorized` - the credentials are only sent when 401 (Unauthorized) response with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.\n\n### ignoreHTTPSErrors[​](#test-options-ignore-https-errors \"Direct link to ignoreHTTPSErrors\")\n\nWhether to ignore HTTPS errors when sending network requests. Defaults to `false`.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    ignoreHTTPSErrors: true,\n  },\n});\n```\n\n**Type**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### isMobile[​](#test-options-is-mobile \"Direct link to isMobile\")\n\nWhether the `meta viewport` tag is taken into account and touch events are enabled. isMobile is a part of device, so you don't actually need to set it manually. Defaults to `false` and is not supported in Firefox. Learn more about [mobile emulation](../emulation#ismobile).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    isMobile: false,\n  },\n});\n```\n\n**Type**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### javaScriptEnabled[​](#test-options-java-script-enabled \"Direct link to javaScriptEnabled\")\n\nWhether or not to enable JavaScript in the context. Defaults to `true`. Learn more about [disabling JavaScript](../emulation#javascript-enabled).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    javaScriptEnabled: false,\n  },\n});\n```\n\n**Type**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### launchOptions[​](#test-options-launch-options \"Direct link to launchOptions\")\n\nOptions used to launch the browser, as passed to [browserType.launch()](class-browsertype#browser-type-launch). Specific options [testOptions.headless](class-testoptions#test-options-headless) and [testOptions.channel](class-testoptions#test-options-channel) take priority over this.\n\n> warning\n>\n> Use custom browser args at your own risk, as some of them may break Playwright functionality.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: {\n        ...devices['Desktop Chrome'],\n        launchOptions: {\n          args: ['--start-maximized']\n        }\n      }\n    }\n  ]\n});\n```\n\n**Type**\n\n- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n\n### locale[​](#test-options-locale \"Direct link to locale\")\n\nSpecify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default locale. Learn more about emulation in our [emulation guide](../emulation#locale--timezone).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    locale: 'it-IT',\n  },\n});\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### navigationTimeout[​](#test-options-navigation-timeout \"Direct link to navigationTimeout\")\n\nTimeout for each navigation action in milliseconds. Defaults to 0 (no timeout).\n\nThis is a default navigation timeout, same as configured via [page.setDefaultNavigationTimeout()](class-page#page-set-default-navigation-timeout).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    navigationTimeout: 3000,\n  },\n});\n```\n\nLearn more about [various timeouts](../test-timeouts).\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### offline[​](#test-options-offline \"Direct link to offline\")\n\nWhether to emulate network being offline. Defaults to `false`. Learn more about [network emulation](../emulation#offline).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    offline: true\n  },\n});\n```\n\n**Type**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### permissions[​](#test-options-permissions \"Direct link to permissions\")\n\nA list of permissions to grant to all pages in this context. See [browserContext.grantPermissions()](class-browsercontext#browser-context-grant-permissions) for more details. Defaults to none.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    permissions: ['notifications'],\n  },\n});\n```\n\n**Type**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### proxy[​](#test-options-proxy \"Direct link to proxy\")\n\nNetwork proxy settings.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    proxy: {\n      server: 'http://myproxy.com:3128',\n      bypass: 'localhost',\n    },\n  },\n});\n```\n\n**Type**\n\n- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `server` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.\n\n  - `bypass` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Optional comma-separated domains to bypass proxy, for example `\".com, chromium.org, .domain.com\"`.\n\n  - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Optional username to use if HTTP proxy requires authentication.\n\n  - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Optional password to use if HTTP proxy requires authentication.\n\n### screenshot[​](#test-options-screenshot \"Direct link to screenshot\")\n\nWhether to automatically capture a screenshot after each test. Defaults to `'off'`.\n\n- `'off'`: Do not capture screenshots.\n- `'on'`: Capture screenshot after each test.\n- `'only-on-failure'`: Capture screenshot after each test failure.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    screenshot: 'only-on-failure',\n  },\n});\n```\n\nLearn more about [automatic screenshots](../test-use-options#recording-options).\n\n**Type**\n\n- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| \"off\" \\| \"on\" \\| \"only-on-failure\"\n  - `mode` \"off\" \\| \"on\" \\| \"only-on-failure\"\n\n    Automatic screenshot mode.\n\n  - `fullPage` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    When true, takes a screenshot of the full scrollable page, instead of the currently visible viewport. Defaults to `false`.\n\n  - `omitBackground` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images. Defaults to `false`.\n\n### serviceWorkers[​](#test-options-service-workers \"Direct link to serviceWorkers\")\n\nWhether to allow sites to register Service workers. Defaults to `'allow'`.\n\n- `'allow'`: [Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) can be registered.\n- `'block'`: Playwright will block all registration of Service Workers.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    serviceWorkers: 'allow'\n  },\n});\n```\n\n**Type**\n\n- \"allow\" \\| \"block\"\n\n### storageState[​](#test-options-storage-state \"Direct link to storageState\")\n\nLearn more about [storage state and auth](../auth).\n\nPopulates context with given storage state. This option can be used to initialize context with logged-in information obtained via [browserContext.storageState()](class-browsercontext#browser-context-storage-state).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    storageState: 'storage-state.json',\n  },\n});\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `cookies` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n    - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `domain` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Domain and path are required. For the cookie to apply to all subdomains as well, prefix domain with a dot, like this: \".example.com\"\n\n    - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      Domain and path are required\n\n    - `expires` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n      Unix time in seconds.\n\n    - `httpOnly` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    - `secure` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n    - `sameSite` \"Strict\" \\| \"Lax\" \\| \"None\"\n\n      sameSite flag\n\n    Cookies to set for context\n  - `origins` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n    - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    - `localStorage` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n      - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n      - `value` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    localStorage to set for context\n\n**Details**\n\nWhen storage state is set up in the config, it is possible to reset storage state for a file:\n\n``` javascript\nimport { test } from '@playwright/test';\n\n// Reset storage state for this file to avoid being authenticated\ntest.use({ storageState: { cookies: [], origins: [] } });\n\ntest('not signed in test', async ({ page }) => {\n  // ...\n});\n```\n\n### testIdAttribute[​](#test-options-test-id-attribute \"Direct link to testIdAttribute\")\n\nCustom attribute to be used in [page.getByTestId()](class-page#page-get-by-test-id). `data-testid` is used by default.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    testIdAttribute: 'pw-test-id',\n  },\n});\n```\n\n### timezoneId[​](#test-options-timezone-id \"Direct link to timezoneId\")\n\nChanges the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1) for a list of supported timezone IDs. Defaults to the system timezone.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    timezoneId: 'Europe/Rome',\n  },\n});\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### trace[​](#test-options-trace \"Direct link to trace\")\n\nWhether to record trace for each test. Defaults to `'off'`.\n\n- `'off'`: Do not record trace.\n- `'on'`: Record trace for each test.\n- `'on-first-retry'`: Record trace only when retrying a test for the first time.\n- `'on-all-retries'`: Record trace only when retrying a test.\n- `'retain-on-failure'`: Record trace for each test. When test run passes, remove the recorded trace.\n- `'retain-on-first-failure'`: Record trace for the first run of each test, but not for retries. When test run passes, remove the recorded trace.\n\nFor more control, pass an object that specifies `mode` and trace features to enable.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    trace: 'on-first-retry'\n  },\n});\n```\n\nLearn more about [recording trace](../test-use-options#recording-options).\n\n**Type**\n\n- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| \"off\" \\| \"on\" \\| \"retain-on-failure\" \\| \"on-first-retry\" \\| \"retain-on-first-failure\"\n  - `mode` \"off\" \\| \"on\" \\| \"retain-on-failure\" \\| \"on-first-retry\" \\| \"on-all-retries\" \\| \"retain-on-first-failure\"\n\n    Trace recording mode.\n\n  - `attachments` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to include test attachments. Defaults to true. Optional.\n\n  - `screenshots` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to capture screenshots during tracing. Screenshots are used to build a timeline preview. Defaults to true. Optional.\n\n  - `snapshots` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to capture DOM snapshot on every action. Defaults to true. Optional.\n\n  - `sources` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to include source files for trace actions. Defaults to true. Optional.\n\n### userAgent[​](#test-options-user-agent \"Direct link to userAgent\")\n\nSpecific user agent to use in this context.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    userAgent: 'some custom ua',\n  },\n});\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### video[​](#test-options-video \"Direct link to video\")\n\nWhether to record video for each test. Defaults to `'off'`.\n\n- `'off'`: Do not record video.\n- `'on'`: Record video for each test.\n- `'retain-on-failure'`: Record video for each test, but remove all videos from successful test runs.\n- `'on-first-retry'`: Record video only when retrying a test for the first time.\n\nTo control video size, pass an object with `mode` and `size` properties. If video size is not specified, it will be equal to [testOptions.viewport](class-testoptions#test-options-viewport) scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    video: 'on-first-retry',\n  },\n});\n```\n\nLearn more about [recording video](../test-use-options#recording-options).\n\n**Type**\n\n- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") \\| \"off\" \\| \"on\" \\| \"retain-on-failure\" \\| \"on-first-retry\"\n  - `mode` \"off\" \\| \"on\" \\| \"retain-on-failure\" \\| \"on-first-retry\"\n\n    Video recording mode.\n\n  - `size` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    Size of the recorded video. Optional.\n\n### viewport[​](#test-options-viewport \"Direct link to viewport\")\n\nEmulates consistent viewport for each page. Defaults to an 1280x720 viewport. Use `null` to disable the consistent viewport emulation. Learn more about [viewport emulation](../emulation#viewport).\n\n> note\n>\n> The `null` value opts out from the default presets, makes viewport depend on the host window size defined by the operating system. It makes the execution of the tests non-deterministic.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    viewport: { width: 100, height: 100 },\n  },\n});\n```\n\n**Type**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `width` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    page width in pixels.\n\n  - `height` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    page height in pixels.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-testoptions](https://playwright.dev/docs/api/class-testoptions)"
- name: testOptions.acceptDownloads
  id: api/class-testoptions#test-options-accept-downloads
  summary: Whether to automatically download all the attachments
  belongs_to: TestOptions
  description: |-
    ### acceptDownloads[​](#test-options-accept-downloads "Direct link to acceptDownloads")

    Whether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        acceptDownloads: false,
      },
    });
    ```

    **Type**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")
- name: testOptions.actionTimeout
  id: api/class-testoptions#test-options-action-timeout
  summary: Default timeout for each Playwright action in milliseconds, defaults to 0 (no timeout)
  belongs_to: TestOptions
  description: |-
    ### actionTimeout[​](#test-options-action-timeout "Direct link to actionTimeout")

    Default timeout for each Playwright action in milliseconds, defaults to 0 (no timeout).

    This is a default timeout for all Playwright actions, same as configured via [page.setDefaultTimeout()](class-page#page-set-default-timeout).

    **Usage**

    ``` javascript
    import { defineConfig, devices } from '@playwright/test';

    export default defineConfig({
      use: {
        /* Maximum time each action such as `click()` can take. Defaults to 0 (no limit). */
        actionTimeout: 0,
      },
    });
    ```

    Learn more about [various timeouts](../test-timeouts).

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testOptions.baseURL
  id: api/class-testoptions#test-options-base-url
  summary: When using page.goto(), page.route(), page.waitForURL(), page.waitForRequest(), or page.waitForResponse() it takes the base URL in consideration by using the URL() constructor for building the corresponding URL
  belongs_to: TestOptions
  description: |-
    ### baseURL[​](#test-options-base-url "Direct link to baseURL")

    When using [page.goto()](class-page#page-goto), [page.route()](class-page#page-route), [page.waitForURL()](class-page#page-wait-for-url), [page.waitForRequest()](class-page#page-wait-for-request), or [page.waitForResponse()](class-page#page-wait-for-response) it takes the base URL in consideration by using the [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL. Unset by default. Examples:

    - baseURL: `http://localhost:3000` and navigating to `/bar.html` results in `http://localhost:3000/bar.html`
    - baseURL: `http://localhost:3000/foo/` and navigating to `./bar.html` results in `http://localhost:3000/foo/bar.html`
    - baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in `http://localhost:3000/bar.html`

    **Usage**

    ``` javascript
    import { defineConfig, devices } from '@playwright/test';

    export default defineConfig({
      use: {
        /* Base URL to use in actions like `await page.goto('/')`. */
        baseURL: 'http://localhost:3000',
      },
    });
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testOptions.browserName
  id: api/class-testoptions#test-options-browser-name
  summary: Name of the browser that runs tests
  belongs_to: TestOptions
  description: |-
    ### browserName[​](#test-options-browser-name "Direct link to browserName")

    Name of the browser that runs tests. Defaults to `'chromium'`. Most of the time you should set `browserName` in your [TestConfig](class-testconfig "TestConfig"):

    **Usage**

    ``` javascript
    import { defineConfig, devices } from '@playwright/test';

    export default defineConfig({
      use: {
        browserName: 'firefox',
      },
    });
    ```

    **Type**

    - "chromium" \| "firefox" \| "webkit"

    &nbsp;
- name: testOptions.bypassCSP
  id: api/class-testoptions#test-options-bypass-csp
  summary: Toggles bypassing page's Content-Security-Policy
  belongs_to: TestOptions
  description: |-
    ### bypassCSP[​](#test-options-bypass-csp "Direct link to bypassCSP")

    Toggles bypassing page's Content-Security-Policy. Defaults to `false`.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        bypassCSP: true,
      }
    });
    ```

    **Type**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: testOptions.channel
  id: api/class-testoptions#test-options-channel
  summary: Browser distribution channel
  belongs_to: TestOptions
  description: |-
    ### channel[​](#test-options-channel "Direct link to channel")

    Browser distribution channel. Supported values are "chrome", "chrome-beta", "chrome-dev", "chrome-canary", "msedge", "msedge-beta", "msedge-dev", "msedge-canary". Read more about using [Google Chrome and Microsoft Edge](../browsers#google-chrome--microsoft-edge).

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      projects: [
        {
          name: 'Microsoft Edge',
          use: {
            ...devices['Desktop Edge'],
            channel: 'msedge'
          },
        },
      ]
    });
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testOptions.clientCertificates
  id: api/class-testoptions#test-options-client-certificates
  summary: TLS Client Authentication allows the server to request a client certificate and verify it
  belongs_to: TestOptions
  description: |-
    ### clientCertificates[​](#test-options-client-certificates "Direct link to clientCertificates")

    TLS Client Authentication allows the server to request a client certificate and verify it.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        clientCertificates: [{
          origin: 'https://example.com',
          certPath: './cert.pem',
          keyPath: './key.pem',
          passphrase: 'mysecretpassword',
        }],
      },
    });
    ```

    **Type**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `origin`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        Exact origin that the certificate is valid for. Origin includes `https` protocol, a hostname and optionally a port.

      - `certPath`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")*(optional)*

        Path to the file with the certificate in PEM format.

      - `keyPath`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")*(optional)*

        Path to the file with the private key in PEM format.

      - `pfxPath`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")*(optional)*

        Path to the PFX or PKCS12 encoded private key and certificate chain.

      - `passphrase`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")*(optional)*

        Passphrase for the private key (PEM or PFX).

    **Details**

    An array of client certificates to be used. Each certificate object must have both `certPath` and `keyPath` or a single `pfxPath` to load the client certificate. Optionally, `passphrase` property should be provided if the certficiate is encrypted. The `origin` property should be provided with an exact match to the request origin that the certificate is valid for.

    > note
    >
    > Using Client Certificates in combination with Proxy Servers is not supported.

    > note
    >
    > When using WebKit on macOS, accessing `localhost` will not pick up client certificates. You can make it work by replacing `localhost` with `local.playwright`.
- name: testOptions.colorScheme
  id: api/class-testoptions#test-options-color-scheme
  summary: Emulates 'prefers-colors-scheme' media feature, supported values are 'light', 'dark', 'no-preference'. See page.emulateMedia() for more details
  belongs_to: TestOptions
  description: |-
    ### colorScheme[​](#test-options-color-scheme "Direct link to colorScheme")

    Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See [page.emulateMedia()](class-page#page-emulate-media) for more details. Passing `null` resets emulation to system defaults. Defaults to `'light'`.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        colorScheme: 'dark',
      },
    });
    ```

    **Type**

    - [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null "null") \| "light" \| "dark" \| "no-preference"

    &nbsp;
- name: testOptions.connectOptions
  id: api/class-testoptions#test-options-connect-options
  summary: When connect options are specified, default fixtures.browser, fixtures.context and fixtures.page use the remote browser instead of launching a browser locally, and any launch options like testOptions.headless or testOptions.channel are ignored
  belongs_to: TestOptions
  description: |-
    ### connectOptions[​](#test-options-connect-options "Direct link to connectOptions")

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        connectOptions: {
          wsEndpoint: 'ws://localhost:5678',
        },
      },
    });
    ```

    When connect options are specified, default [fixtures.browser](class-fixtures#fixtures-browser), [fixtures.context](class-fixtures#fixtures-context) and [fixtures.page](class-fixtures#fixtures-page) use the remote browser instead of launching a browser locally, and any launch options like [testOptions.headless](class-testoptions#test-options-headless) or [testOptions.channel](class-testoptions#test-options-channel) are ignored.

    **Type**

    - [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")
      - `wsEndpoint`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        A browser websocket endpoint to connect to.

      - `headers`[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

        Additional HTTP headers to be sent with web socket connect request. Optional.

      - `timeout`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")*(optional)*

        Timeout in milliseconds for the connection to be established. Optional, defaults to no timeout.

      - `exposeNetwork`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")*(optional)*

        Option to expose network available on the connecting client to the browser being connected to. See [browserType.connect()](class-browsertype#browser-type-connect) for more details.

    &nbsp;
- name: testOptions.contextOptions
  id: api/class-testoptions#test-options-context-options
  summary: Options used to create the context, as passed to browser.newContext()
  belongs_to: TestOptions
  description: |-
    ### contextOptions[​](#test-options-context-options "Direct link to contextOptions")

    Options used to create the context, as passed to [browser.newContext()](class-browser#browser-new-context). Specific options like [testOptions.viewport](class-testoptions#test-options-viewport) take priority over this.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        contextOptions: {
          reducedMotion: 'reduce',
        },
      },
    });
    ```

    **Type**

    - [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

    &nbsp;
- name: testOptions.deviceScaleFactor
  id: api/class-testoptions#test-options-device-scale-factor
  summary: Specify device scale factor (can be thought of as dpr)
  belongs_to: TestOptions
  description: |-
    ### deviceScaleFactor[​](#test-options-device-scale-factor "Direct link to deviceScaleFactor")

    Specify device scale factor (can be thought of as dpr). Defaults to `1`. Learn more about [emulating devices with device scale factor](../emulation#devices).

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        viewport: { width: 2560, height: 1440 },
        deviceScaleFactor: 2,
      },
    });
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testOptions.extraHTTPHeaders
  id: api/class-testoptions#test-options-extra-http-headers
  summary: An object containing additional HTTP headers to be sent with every request
  belongs_to: TestOptions
  description: |-
    ### extraHTTPHeaders[​](#test-options-extra-http-headers "Direct link to extraHTTPHeaders")

    An object containing additional HTTP headers to be sent with every request. Defaults to none.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        extraHTTPHeaders: {
          'X-My-Header': 'value',
        },
      },
    });
    ```

    **Type**

    - [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string"), [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: testOptions.geolocation
  id: api/class-testoptions#test-options-geolocation
  summary: Learn more about geolocation
  belongs_to: TestOptions
  description: |-
    ### geolocation[​](#test-options-geolocation "Direct link to geolocation")

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        geolocation: { longitude: 12.492507, latitude: 41.889938 },
      },
    });
    ```

    Learn more about [geolocation](../emulation#color-scheme-and-media).

    **Type**

    - [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")
      - `latitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Latitude between -90 and 90.

      - `longitude` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Longitude between -180 and 180.

      - `accuracy` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Non-negative accuracy value. Defaults to `0`.

    &nbsp;
- name: testOptions.hasTouch
  id: api/class-testoptions#test-options-has-touch
  summary: Specifies if viewport supports touch events
  belongs_to: TestOptions
  description: |-
    ### hasTouch[​](#test-options-has-touch "Direct link to hasTouch")

    Specifies if viewport supports touch events. Defaults to false. Learn more about [mobile emulation](../emulation#devices).

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        hasTouch: true
      },
    });
    ```

    **Type**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: testOptions.headless
  id: api/class-testoptions#test-options-headless
  summary: Whether to run browser in headless mode
  belongs_to: TestOptions
  description: |-
    ### headless[​](#test-options-headless "Direct link to headless")

    Whether to run browser in headless mode. More details for [Chromium](https://developers.google.com/web/updates/2017/04/headless-chrome) and [Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode). Defaults to `true` unless the `devtools` option is `true`.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        headless: false
      },
    });
    ```

    **Type**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: testOptions.httpCredentials
  id: api/class-testoptions#test-options-http-credentials
  summary: Credentials for HTTP authentication
  belongs_to: TestOptions
  description: |-
    ### httpCredentials[​](#test-options-http-credentials "Direct link to httpCredentials")

    Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no origin is specified, the username and password are sent to any servers upon unauthorized responses.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        httpCredentials: {
          username: 'user',
          password: 'pass',
        },
      },
    });
    ```

    **Type**

    - [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")
      - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      - `origin` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Restrain sending http credentials on specific origin (scheme://host:port).

      - `send` "unauthorized" \| "always" *(optional)*

        This option only applies to the requests sent from corresponding [APIRequestContext](class-apirequestcontext "APIRequestContext") and does not affect requests sent from the browser. `'always'` - `Authorization` header with basic authentication credentials will be sent with the each API request. `'unauthorized` - the credentials are only sent when 401 (Unauthorized) response with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.

    &nbsp;
- name: testOptions.ignoreHTTPSErrors
  id: api/class-testoptions#test-options-ignore-https-errors
  summary: Whether to ignore HTTPS errors when sending network requests
  belongs_to: TestOptions
  description: |-
    ### ignoreHTTPSErrors[​](#test-options-ignore-https-errors "Direct link to ignoreHTTPSErrors")

    Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        ignoreHTTPSErrors: true,
      },
    });
    ```

    **Type**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: testOptions.isMobile
  id: api/class-testoptions#test-options-is-mobile
  summary: Whether the meta viewport tag is taken into account and touch events are enabled
  belongs_to: TestOptions
  description: |-
    ### isMobile[​](#test-options-is-mobile "Direct link to isMobile")

    Whether the `meta viewport` tag is taken into account and touch events are enabled. isMobile is a part of device, so you don't actually need to set it manually. Defaults to `false` and is not supported in Firefox. Learn more about [mobile emulation](../emulation#ismobile).

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        isMobile: false,
      },
    });
    ```

    **Type**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: testOptions.javaScriptEnabled
  id: api/class-testoptions#test-options-java-script-enabled
  summary: Whether or not to enable JavaScript in the context
  belongs_to: TestOptions
  description: |-
    ### javaScriptEnabled[​](#test-options-java-script-enabled "Direct link to javaScriptEnabled")

    Whether or not to enable JavaScript in the context. Defaults to `true`. Learn more about [disabling JavaScript](../emulation#javascript-enabled).

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        javaScriptEnabled: false,
      },
    });
    ```

    **Type**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: testOptions.launchOptions
  id: api/class-testoptions#test-options-launch-options
  summary: Options used to launch the browser, as passed to browserType.launch()
  belongs_to: TestOptions
  description: |-
    ### launchOptions[​](#test-options-launch-options "Direct link to launchOptions")

    Options used to launch the browser, as passed to [browserType.launch()](class-browsertype#browser-type-launch). Specific options [testOptions.headless](class-testoptions#test-options-headless) and [testOptions.channel](class-testoptions#test-options-channel) take priority over this.

    > warning
    >
    > Use custom browser args at your own risk, as some of them may break Playwright functionality.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      projects: [
        {
          name: 'chromium',
          use: {
            ...devices['Desktop Chrome'],
            launchOptions: {
              args: ['--start-maximized']
            }
          }
        }
      ]
    });
    ```

    **Type**

    - [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")

    &nbsp;
- name: testOptions.locale
  id: api/class-testoptions#test-options-locale
  summary: Specify user locale, for example en-GB, de-DE, etc
  belongs_to: TestOptions
  description: |-
    ### locale[​](#test-options-locale "Direct link to locale")

    Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default locale. Learn more about emulation in our [emulation guide](../emulation#locale--timezone).

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        locale: 'it-IT',
      },
    });
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testOptions.navigationTimeout
  id: api/class-testoptions#test-options-navigation-timeout
  summary: Timeout for each navigation action in milliseconds
  belongs_to: TestOptions
  description: |-
    ### navigationTimeout[​](#test-options-navigation-timeout "Direct link to navigationTimeout")

    Timeout for each navigation action in milliseconds. Defaults to 0 (no timeout).

    This is a default navigation timeout, same as configured via [page.setDefaultNavigationTimeout()](class-page#page-set-default-navigation-timeout).

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        navigationTimeout: 3000,
      },
    });
    ```

    Learn more about [various timeouts](../test-timeouts).

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testOptions.offline
  id: api/class-testoptions#test-options-offline
  summary: Whether to emulate network being offline
  belongs_to: TestOptions
  description: |-
    ### offline[​](#test-options-offline "Direct link to offline")

    Whether to emulate network being offline. Defaults to `false`. Learn more about [network emulation](../emulation#offline).

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        offline: true
      },
    });
    ```

    **Type**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: testOptions.permissions
  id: api/class-testoptions#test-options-permissions
  summary: A list of permissions to grant to all pages in this context
  belongs_to: TestOptions
  description: |-
    ### permissions[​](#test-options-permissions "Direct link to permissions")

    A list of permissions to grant to all pages in this context. See [browserContext.grantPermissions()](class-browsercontext#browser-context-grant-permissions) for more details. Defaults to none.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        permissions: ['notifications'],
      },
    });
    ```

    **Type**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: testOptions.proxy
  id: api/class-testoptions#test-options-proxy
  summary: Network proxy settings
  belongs_to: TestOptions
  description: |-
    ### proxy[​](#test-options-proxy "Direct link to proxy")

    Network proxy settings.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        proxy: {
          server: 'http://myproxy.com:3128',
          bypass: 'localhost',
        },
      },
    });
    ```

    **Type**

    - [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")
      - `server` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.

      - `bypass` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.

      - `username` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Optional username to use if HTTP proxy requires authentication.

      - `password` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Optional password to use if HTTP proxy requires authentication.

    &nbsp;
- name: testOptions.screenshot
  id: api/class-testoptions#test-options-screenshot
  summary: Whether to automatically capture a screenshot after each test
  belongs_to: TestOptions
  description: |-
    ### screenshot[​](#test-options-screenshot "Direct link to screenshot")

    Whether to automatically capture a screenshot after each test. Defaults to `'off'`.

    - `'off'`: Do not capture screenshots.
    - `'on'`: Capture screenshot after each test.
    - `'only-on-failure'`: Capture screenshot after each test failure.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        screenshot: 'only-on-failure',
      },
    });
    ```

    Learn more about [automatic screenshots](../test-use-options#recording-options).

    **Type**

    - [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \| "off" \| "on" \| "only-on-failure"
      - `mode` "off" \| "on" \| "only-on-failure"

        Automatic screenshot mode.

      - `fullPage`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")*(optional)*

        When true, takes a screenshot of the full scrollable page, instead of the currently visible viewport. Defaults to `false`.

      - `omitBackground`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")*(optional)*

        Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images. Defaults to `false`.

    &nbsp;
- name: testOptions.serviceWorkers
  id: api/class-testoptions#test-options-service-workers
  summary: Whether to allow sites to register Service workers
  belongs_to: TestOptions
  description: |-
    ### serviceWorkers[​](#test-options-service-workers "Direct link to serviceWorkers")

    Whether to allow sites to register Service workers. Defaults to `'allow'`.

    - `'allow'`: [Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) can be registered.
    - `'block'`: Playwright will block all registration of Service Workers.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        serviceWorkers: 'allow'
      },
    });
    ```

    **Type**

    - "allow" \| "block"

    &nbsp;
- name: testOptions.storageState
  id: api/class-testoptions#test-options-storage-state
  summary: Learn more about storage state and auth
  belongs_to: TestOptions
  description: |-
    ### storageState[​](#test-options-storage-state "Direct link to storageState")

    Learn more about [storage state and auth](../auth).

    Populates context with given storage state. This option can be used to initialize context with logged-in information obtained via [browserContext.storageState()](class-browsercontext#browser-context-storage-state).

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        storageState: 'storage-state.json',
      },
    });
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")
      - `cookies`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
        - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `value`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `domain`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          Domain and path are required. For the cookie to apply to all subdomains as well, prefix domain with a dot, like this: ".example.com"

        - `path`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          Domain and path are required

        - `expires`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

          Unix time in seconds.

        - `httpOnly`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

        - `secure`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

        - `sameSite` "Strict" \| "Lax" \| "None"

          sameSite flag

        Cookies to set for context
      - `origins`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
        - `origin`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        - `localStorage`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>

          - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

          - `value`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        localStorage to set for context

    **Details**

    When storage state is set up in the config, it is possible to reset storage state for a file:

    ``` javascript
    import { test } from '@playwright/test';

    // Reset storage state for this file to avoid being authenticated
    test.use({ storageState: { cookies: [], origins: [] } });

    test('not signed in test', async ({ page }) => {
      // ...
    });
    ```
- name: testOptions.testIdAttribute
  id: api/class-testoptions#test-options-test-id-attribute
  summary: Custom attribute to be used in page.getByTestId()
  belongs_to: TestOptions
  description: |-
    ### testIdAttribute[​](#test-options-test-id-attribute "Direct link to testIdAttribute")

    Custom attribute to be used in [page.getByTestId()](class-page#page-get-by-test-id). `data-testid` is used by default.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        testIdAttribute: 'pw-test-id',
      },
    });
    ```
- name: testOptions.timezoneId
  id: api/class-testoptions#test-options-timezone-id
  summary: Changes the timezone of the context
  belongs_to: TestOptions
  description: |-
    ### timezoneId[​](#test-options-timezone-id "Direct link to timezoneId")

    Changes the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1) for a list of supported timezone IDs. Defaults to the system timezone.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        timezoneId: 'Europe/Rome',
      },
    });
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testOptions.trace
  id: api/class-testoptions#test-options-trace
  summary: Whether to record trace for each test
  belongs_to: TestOptions
  description: |-
    ### trace[​](#test-options-trace "Direct link to trace")

    Whether to record trace for each test. Defaults to `'off'`.

    - `'off'`: Do not record trace.
    - `'on'`: Record trace for each test.
    - `'on-first-retry'`: Record trace only when retrying a test for the first time.
    - `'on-all-retries'`: Record trace only when retrying a test.
    - `'retain-on-failure'`: Record trace for each test. When test run passes, remove the recorded trace.
    - `'retain-on-first-failure'`: Record trace for the first run of each test, but not for retries. When test run passes, remove the recorded trace.

    For more control, pass an object that specifies `mode` and trace features to enable.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        trace: 'on-first-retry'
      },
    });
    ```

    Learn more about [recording trace](../test-use-options#recording-options).

    **Type**

    - [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \| "off" \| "on" \| "retain-on-failure" \| "on-first-retry" \| "retain-on-first-failure"
      - `mode` "off" \| "on" \| "retain-on-failure" \| "on-first-retry" \| "on-all-retries" \| "retain-on-first-failure"

        Trace recording mode.

      - `attachments`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")*(optional)*

        Whether to include test attachments. Defaults to true. Optional.

      - `screenshots`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")*(optional)*

        Whether to capture screenshots during tracing. Screenshots are used to build a timeline preview. Defaults to true. Optional.

      - `snapshots`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")*(optional)*

        Whether to capture DOM snapshot on every action. Defaults to true. Optional.

      - `sources`[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")*(optional)*

        Whether to include source files for trace actions. Defaults to true. Optional.

    &nbsp;
- name: testOptions.userAgent
  id: api/class-testoptions#test-options-user-agent
  summary: Specific user agent to use in this context
  belongs_to: TestOptions
  description: |-
    ### userAgent[​](#test-options-user-agent "Direct link to userAgent")

    Specific user agent to use in this context.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        userAgent: 'some custom ua',
      },
    });
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testOptions.video
  id: api/class-testoptions#test-options-video
  summary: Whether to record video for each test
  belongs_to: TestOptions
  description: |-
    ### video[​](#test-options-video "Direct link to video")

    Whether to record video for each test. Defaults to `'off'`.

    - `'off'`: Do not record video.
    - `'on'`: Record video for each test.
    - `'retain-on-failure'`: Record video for each test, but remove all videos from successful test runs.
    - `'on-first-retry'`: Record video only when retrying a test for the first time.

    To control video size, pass an object with `mode` and `size` properties. If video size is not specified, it will be equal to [testOptions.viewport](class-testoptions#test-options-viewport) scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      use: {
        video: 'on-first-retry',
      },
    });
    ```

    Learn more about [recording video](../test-use-options#recording-options).

    **Type**

    - [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") \| "off" \| "on" \| "retain-on-failure" \| "on-first-retry"
      - `mode` "off" \| "on" \| "retain-on-failure" \| "on-first-retry"

        Video recording mode.

      - `size`[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")*(optional)*

        - `width`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        - `height`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

        Size of the recorded video. Optional.

    &nbsp;
- name: testOptions.viewport
  id: api/class-testoptions#test-options-viewport
  summary: Emulates consistent viewport for each page
  belongs_to: TestOptions
  description: "### viewport[​](#test-options-viewport \"Direct link to viewport\")\n\nEmulates consistent viewport for each page. Defaults to an 1280x720 viewport. Use `null` to disable the consistent viewport emulation. Learn more about [viewport emulation](../emulation#viewport).\n\n> note\n>\n> The `null` value opts out from the default presets, makes viewport depend on the host window size defined by the operating system. It makes the execution of the tests non-deterministic.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    viewport: { width: 100, height: 100 },\n  },\n});\n```\n\n**Type**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `width`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    page width in pixels.\n\n  - `height`[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n    page height in pixels.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-testoptions](https://playwright.dev/docs/api/class-testoptions)"
- name: TestProject
  id: api/class-testproject
  summary: Playwright Test supports running multiple test projects at the same time
  description: "# TestProject\n\nPlaywright Test supports running multiple test projects at the same time. This is useful for running tests in multiple configurations. For example, consider running tests against multiple browsers. This type describes format of a project in the configuration file, to access resolved configuration parameters at run time use [FullProject](class-fullproject \"FullProject\").\n\n`TestProject` encapsulates configuration specific to a single project. Projects are configured in [testConfig.projects](class-testconfig#test-config-projects) specified in the [configuration file](../test-configuration). Note that all properties of [TestProject](class-testproject \"TestProject\") are available in the top-level [TestConfig](class-testconfig \"TestConfig\"), in which case they are shared between all projects.\n\nHere is an example configuration that runs every test in Chromium, Firefox and WebKit, both Desktop and Mobile versions.\n\n``` javascript\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  // Options shared for all projects.\n  timeout: 30000,\n  use: {\n    ignoreHTTPSErrors: true,\n  },\n\n  // Options specific to each project.\n  projects: [\n    {\n      name: 'chromium',\n      use: devices['Desktop Chrome'],\n    },\n    {\n      name: 'firefox',\n      use: devices['Desktop Firefox'],\n    },\n    {\n      name: 'webkit',\n      use: devices['Desktop Safari'],\n    },\n    {\n      name: 'Mobile Chrome',\n      use: devices['Pixel 5'],\n    },\n    {\n      name: 'Mobile Safari',\n      use: devices['iPhone 12'],\n    },\n  ],\n});\n```\n\n## Properties[​](#properties \"Direct link to Properties\")\n\n### dependencies[​](#test-project-dependencies \"Direct link to dependencies\")\n\nList of projects that need to run before any test in this project runs. Dependencies can be useful for configuring the global setup actions in a way that every action is in a form of a test. Passing `--no-deps` argument ignores the dependencies and behaves as if they were not specified.\n\nUsing dependencies allows global setup to produce traces and other artifacts, see the setup steps in the test report, etc.\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'setup',\n      testMatch: /global.setup\\.ts/,\n    },\n    {\n      name: 'chromium',\n      use: devices['Desktop Chrome'],\n      dependencies: ['setup'],\n    },\n    {\n      name: 'firefox',\n      use: devices['Desktop Firefox'],\n      dependencies: ['setup'],\n    },\n    {\n      name: 'webkit',\n      use: devices['Desktop Safari'],\n      dependencies: ['setup'],\n    },\n  ],\n});\n```\n\n**Type**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### expect[​](#test-project-expect \"Direct link to expect\")\n\nConfiguration for the `expect` assertion library.\n\nUse [testConfig.expect](class-testconfig#test-config-expect) to change this option for all projects.\n\n**Usage**\n\n``` javascript\ntestProject.expect\n```\n\n**Type**\n\n- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Default timeout for async expect matchers in milliseconds, defaults to 5000ms.\n\n  - `toHaveScreenshot` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `threshold` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n      an acceptable perceived color difference between the same pixel in compared images, ranging from `0` (strict) and `1` (lax). `\"pixelmatch\"` comparator computes color difference in [YIQ color space](https://en.wikipedia.org/wiki/YIQ) and defaults `threshold` value to `0.2`.\n\n    - `maxDiffPixels` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n      an acceptable amount of pixels that could be different, unset by default.\n\n    - `maxDiffPixelRatio` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n      an acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1` , unset by default.\n\n    - `animations` \"allow\" \\| \"disabled\" *(optional)*\n\n      See `animations` in [page.screenshot()](class-page#page-screenshot). Defaults to `\"disabled\"`.\n\n    - `caret` \"hide\" \\| \"initial\" *(optional)*\n\n      See `caret` in [page.screenshot()](class-page#page-screenshot). Defaults to `\"hide\"`.\n\n    - `scale` \"css\" \\| \"device\" *(optional)*\n\n      See `scale` in [page.screenshot()](class-page#page-screenshot). Defaults to `\"css\"`.\n\n    - `stylePath` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\> *(optional)*\n\n      See `style` in [page.screenshot()](class-page#page-screenshot).\n\n    Configuration for the [expect(page).toHaveScreenshot()](class-pageassertions#page-assertions-to-have-screenshot-1) method.\n\n  - `toMatchSnapshot` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `threshold` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n      an acceptable perceived color difference between the same pixel in compared images, ranging from `0` (strict) and `1` (lax). `\"pixelmatch\"` comparator computes color difference in [YIQ color space](https://en.wikipedia.org/wiki/YIQ) and defaults `threshold` value to `0.2`.\n\n    - `maxDiffPixels` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n      an acceptable amount of pixels that could be different, unset by default.\n\n    - `maxDiffPixelRatio` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n      an acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1` , unset by default.\n\n    Configuration for the [expect(value).toMatchSnapshot()](class-snapshotassertions#snapshot-assertions-to-match-snapshot-1) method.\n\n  - `toPass` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n    - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n      timeout for toPass method in milliseconds.\n\n    - `intervals` [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\\> *(optional)*\n\n      probe intervals for toPass method in milliseconds.\n\n    Configuration for the [expect(value).toPass()](../test-assertions) method.\n\n### fullyParallel[​](#test-project-fully-parallel \"Direct link to fullyParallel\")\n\nPlaywright Test runs tests in parallel. In order to achieve that, it runs several worker processes that run at the same time. By default, **test files** are run in parallel. Tests in a single file are run in order, in the same worker process.\n\nYou can configure entire test project to concurrently run all tests in all files using this option.\n\n**Usage**\n\n``` javascript\ntestProject.fullyParallel\n```\n\n**Type**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### grep[​](#test-project-grep \"Direct link to grep\")\n\nFilter to only run tests with a title matching one of the patterns. For example, passing `grep: /cart/` should only run tests with \"cart\" in the title. Also available globally and in the [command line](../test-cli) with the `-g` option. The regular expression will be tested against the string that consists of the project name, the test file name, the `test.describe` name (if any), the test name and the test tags divided by spaces, e.g. `chromium my-test.spec.ts my-suite my-test`.\n\n`grep` option is also useful for [tagging tests](../test-annotations#tag-tests).\n\n**Usage**\n\n``` javascript\ntestProject.grep\n```\n\n**Type**\n\n- [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\\>\n\n### grepInvert[​](#test-project-grep-invert \"Direct link to grepInvert\")\n\nFilter to only run tests with a title **not** matching one of the patterns. This is the opposite of [testProject.grep](class-testproject#test-project-grep). Also available globally and in the [command line](../test-cli) with the `--grep-invert` option.\n\n`grepInvert` option is also useful for [tagging tests](../test-annotations#tag-tests).\n\n**Usage**\n\n``` javascript\ntestProject.grepInvert\n```\n\n**Type**\n\n- [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\\>\n\n### ignoreSnapshots[​](#test-project-ignore-snapshots \"Direct link to ignoreSnapshots\")\n\nWhether to skip snapshot expectations, such as `expect(value).toMatchSnapshot()` and `await expect(page).toHaveScreenshot()`.\n\n**Usage**\n\nThe following example will only perform screenshot assertions on Chromium.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: devices['Desktop Chrome'],\n    },\n    {\n      name: 'firefox',\n      use: devices['Desktop Firefox'],\n      ignoreSnapshots: true,\n    },\n    {\n      name: 'webkit',\n      use: devices['Desktop Safari'],\n      ignoreSnapshots: true,\n    },\n  ],\n});\n```\n\n**Type**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### metadata[​](#test-project-metadata \"Direct link to metadata\")\n\nMetadata that will be put directly to the test report serialized as JSON.\n\n**Usage**\n\n``` javascript\ntestProject.metadata\n```\n\n**Type**\n\n- [Metadata](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object<string, any>\")\n\n### name[​](#test-project-name \"Direct link to name\")\n\nProject name is visible in the report and during test execution.\n\n**Usage**\n\n``` javascript\ntestProject.name\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### outputDir[​](#test-project-output-dir \"Direct link to outputDir\")\n\nThe output directory for files created during test execution. Defaults to `<package.json-directory>/test-results`.\n\nThis directory is cleaned at the start. When running a test, a unique subdirectory inside the [testProject.outputDir](class-testproject#test-project-output-dir) is created, guaranteeing that test running in parallel do not conflict. This directory can be accessed by [testInfo.outputDir](class-testinfo#test-info-output-dir) and [testInfo.outputPath()](class-testinfo#test-info-output-path).\n\nHere is an example that uses [testInfo.outputPath()](class-testinfo#test-info-output-path) to create a temporary file.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\nimport fs from 'fs';\n\ntest('example test', async ({}, testInfo) => {\n  const file = testInfo.outputPath('temporary-file.txt');\n  await fs.promises.writeFile(file, 'Put some data to the file', 'utf8');\n});\n```\n\nUse [testConfig.outputDir](class-testconfig#test-config-output-dir) to change this option for all projects.\n\n**Usage**\n\n``` javascript\ntestProject.outputDir\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### repeatEach[​](#test-project-repeat-each \"Direct link to repeatEach\")\n\nThe number of times to repeat each test, useful for debugging flaky tests.\n\nUse [testConfig.repeatEach](class-testconfig#test-config-repeat-each) to change this option for all projects.\n\n**Usage**\n\n``` javascript\ntestProject.repeatEach\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### respectGitIgnore[​](#test-project-respect-git-ignore \"Direct link to respectGitIgnore\")\n\nWhether to skip entries from `.gitignore` when searching for test files. By default, if neither [testConfig.testDir](class-testconfig#test-config-test-dir) nor [testProject.testDir](class-testproject#test-project-test-dir) are explicitly specified, Playwright will ignore any test files matching `.gitignore` entries. This option allows to override that behavior.\n\n**Usage**\n\n``` javascript\ntestProject.respectGitIgnore\n```\n\n**Type**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### retries[​](#test-project-retries \"Direct link to retries\")\n\nThe maximum number of retry attempts given to failed tests. Learn more about [test retries](../test-retries#retries).\n\nUse [test.describe.configure()](class-test#test-describe-configure) to change the number of retries for a specific file or a group of tests.\n\nUse [testConfig.retries](class-testconfig#test-config-retries) to change this option for all projects.\n\n**Usage**\n\n``` javascript\ntestProject.retries\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### snapshotDir[​](#test-project-snapshot-dir \"Direct link to snapshotDir\")\n\nThe base directory, relative to the config file, for snapshot files created with `toMatchSnapshot`. Defaults to [testProject.testDir](class-testproject#test-project-test-dir).\n\nThe directory for each test can be accessed by [testInfo.snapshotDir](class-testinfo#test-info-snapshot-dir) and [testInfo.snapshotPath()](class-testinfo#test-info-snapshot-path).\n\nThis path will serve as the base directory for each test file snapshot directory. Setting `snapshotDir` to `'snapshots'`, the [testInfo.snapshotDir](class-testinfo#test-info-snapshot-dir) would resolve to `snapshots/a.spec.js-snapshots`.\n\n**Usage**\n\n``` javascript\ntestProject.snapshotDir\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### snapshotPathTemplate[​](#test-project-snapshot-path-template \"Direct link to snapshotPathTemplate\")\n\nThis option configures a template controlling location of snapshots generated by [expect(page).toHaveScreenshot()](class-pageassertions#page-assertions-to-have-screenshot-1) and [expect(value).toMatchSnapshot()](class-snapshotassertions#snapshot-assertions-to-match-snapshot-1).\n\n**Usage**\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './tests',\n  snapshotPathTemplate: '{testDir}/__screenshots__/{testFilePath}/{arg}{ext}',\n});\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n**Details**\n\nThe value might include some \"tokens\" that will be replaced with actual values during test execution.\n\nConsider the following file structure:\n\n``` javascript\nplaywright.config.ts\ntests/\n└── page/\n    └── page-click.spec.ts\n```\n\nAnd the following `page-click.spec.ts` that uses `toHaveScreenshot()` call:\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.describe('suite', () => {\n  test('test should work', async ({ page }) => {\n    await expect(page).toHaveScreenshot(['foo', 'bar', 'baz.png']);\n  });\n});\n```\n\nThe list of supported tokens:\n\n- `{arg}` - Relative snapshot path **without extension**. These come from the arguments passed to the `toHaveScreenshot()` and `toMatchSnapshot()` calls; if called without arguments, this will be an auto-generated snapshot name.\n  - Value: `foo/bar/baz`\n- `{ext}` - snapshot extension (with dots)\n  - Value: `.png`\n- `{platform}` - The value of `process.platform`.\n- `{projectName}` - Project's file-system-sanitized name, if any.\n  - Value: `''` (empty string).\n- `{snapshotDir}` - Project's [testConfig.snapshotDir](class-testconfig#test-config-snapshot-dir).\n  - Value: `/home/playwright/tests` (since `snapshotDir` is not provided in config, it defaults to `testDir`)\n- `{testDir}` - Project's [testConfig.testDir](class-testconfig#test-config-test-dir).\n  - Value: `/home/playwright/tests` (absolute path is since `testDir` is resolved relative to directory with config)\n- `{testFileDir}` - Directories in relative path from `testDir` to **test file**.\n  - Value: `page`\n- `{testFileName}` - Test file name with extension.\n  - Value: `page-click.spec.ts`\n- `{testFilePath}` - Relative path from `testDir` to **test file**\n  - Value: `page/page-click.spec.ts`\n- `{testName}` - File-system-sanitized test title, including parent describes but excluding file name.\n  - Value: `suite-test-should-work`\n\nEach token can be preceded with a single character that will be used **only if** this token has non-empty value.\n\nConsider the following config:\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  snapshotPathTemplate: '__screenshots__{/projectName}/{testFilePath}/{arg}{ext}',\n  testMatch: 'example.spec.ts',\n  projects: [\n    { use: { browserName: 'firefox' } },\n    { name: 'chromium', use: { browserName: 'chromium' } },\n  ],\n});\n```\n\nIn this config:\n\n1.  First project **does not** have a name, so its snapshots will be stored in `<configDir>/__screenshots__/example.spec.ts/...`.\n2.  Second project **does** have a name, so its snapshots will be stored in `<configDir>/__screenshots__/chromium/example.spec.ts/..`.\n3.  Since `snapshotPathTemplate` resolves to relative path, it will be resolved relative to `configDir`.\n4.  Forward slashes `\"/\"` can be used as path separators on any platform.\n\n### teardown[​](#test-project-teardown \"Direct link to teardown\")\n\nName of a project that needs to run after this and all dependent projects have finished. Teardown is useful to cleanup any resources acquired by this project.\n\nPassing `--no-deps` argument ignores [testProject.teardown](class-testproject#test-project-teardown) and behaves as if it was not specified.\n\n**Usage**\n\nA common pattern is a \"setup\" dependency that has a corresponding \"teardown\":\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'setup',\n      testMatch: /global.setup\\.ts/,\n      teardown: 'teardown',\n    },\n    {\n      name: 'teardown',\n      testMatch: /global.teardown\\.ts/,\n    },\n    {\n      name: 'chromium',\n      use: devices['Desktop Chrome'],\n      dependencies: ['setup'],\n    },\n    {\n      name: 'firefox',\n      use: devices['Desktop Firefox'],\n      dependencies: ['setup'],\n    },\n    {\n      name: 'webkit',\n      use: devices['Desktop Safari'],\n      dependencies: ['setup'],\n    },\n  ],\n});\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### testDir[​](#test-project-test-dir \"Direct link to testDir\")\n\nDirectory that will be recursively scanned for test files. Defaults to the directory of the configuration file.\n\nEach project can use a different directory. Here is an example that runs smoke tests in three browsers and all other tests in stable Chrome browser.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'Smoke Chromium',\n      testDir: './smoke-tests',\n      use: {\n        browserName: 'chromium',\n      }\n    },\n    {\n      name: 'Smoke WebKit',\n      testDir: './smoke-tests',\n      use: {\n        browserName: 'webkit',\n      }\n    },\n    {\n      name: 'Smoke Firefox',\n      testDir: './smoke-tests',\n      use: {\n        browserName: 'firefox',\n      }\n    },\n    {\n      name: 'Chrome Stable',\n      testDir: './',\n      use: {\n        browserName: 'chromium',\n        channel: 'chrome',\n      }\n    },\n  ],\n});\n```\n\nUse [testConfig.testDir](class-testconfig#test-config-test-dir) to change this option for all projects.\n\n**Usage**\n\n``` javascript\ntestProject.testDir\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### testIgnore[​](#test-project-test-ignore \"Direct link to testIgnore\")\n\nFiles matching one of these patterns are not executed as test files. Matching is performed against the absolute file path. Strings are treated as glob patterns.\n\nFor example, `'**/test-assets/**'` will ignore any files in the `test-assets` directory.\n\nUse [testConfig.testIgnore](class-testconfig#test-config-test-ignore) to change this option for all projects.\n\n**Usage**\n\n``` javascript\ntestProject.testIgnore\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\\>\n\n### testMatch[​](#test-project-test-match \"Direct link to testMatch\")\n\nOnly the files matching one of these patterns are executed as test files. Matching is performed against the absolute file path. Strings are treated as glob patterns.\n\nBy default, Playwright looks for files matching the following glob pattern: `**/*.@(spec|test).?(c|m)[jt]s?(x)`. This means JavaScript or TypeScript files with `\".test\"` or `\".spec\"` suffix, for example `login-screen.wrong-credentials.spec.ts`.\n\nUse [testConfig.testMatch](class-testconfig#test-config-test-match) to change this option for all projects.\n\n**Usage**\n\n``` javascript\ntestProject.testMatch\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\") \\| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp \"RegExp\")\\>\n\n### timeout[​](#test-project-timeout \"Direct link to timeout\")\n\nTimeout for each test in milliseconds. Defaults to 30 seconds.\n\nThis is a base timeout for all tests. Each test can configure its own timeout with [test.setTimeout()](class-test#test-set-timeout). Each file or a group of tests can configure the timeout with [test.describe.configure()](class-test#test-describe-configure).\n\nUse [testConfig.timeout](class-testconfig#test-config-timeout) to change this option for all projects.\n\n**Usage**\n\n``` javascript\ntestProject.timeout\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### use[​](#test-project-use \"Direct link to use\")\n\nOptions for all tests in this project, for example [testOptions.browserName](class-testoptions#test-options-browser-name). Learn more about [configuration](../test-configuration) and see [available options](class-testoptions \"TestOptions\").\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'Chromium',\n      use: {\n        browserName: 'chromium',\n      },\n    },\n  ],\n});\n```\n\nUse [testConfig.use](class-testconfig#test-config-use) to change this option for all projects.\n\n**Usage**\n\n``` javascript\ntestProject.use\n```\n\n**Type**\n\n- [TestOptions](class-testoptions \"TestOptions\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-testproject](https://playwright.dev/docs/api/class-testproject)"
- name: testProject.dependencies
  id: api/class-testproject#test-project-dependencies
  summary: List of projects that need to run before any test in this project runs
  belongs_to: TestProject
  description: |-
    ### dependencies[​](#test-project-dependencies "Direct link to dependencies")

    List of projects that need to run before any test in this project runs. Dependencies can be useful for configuring the global setup actions in a way that every action is in a form of a test. Passing `--no-deps` argument ignores the dependencies and behaves as if they were not specified.

    Using dependencies allows global setup to produce traces and other artifacts, see the setup steps in the test report, etc.

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      projects: [
        {
          name: 'setup',
          testMatch: /global.setup\.ts/,
        },
        {
          name: 'chromium',
          use: devices['Desktop Chrome'],
          dependencies: ['setup'],
        },
        {
          name: 'firefox',
          use: devices['Desktop Firefox'],
          dependencies: ['setup'],
        },
        {
          name: 'webkit',
          use: devices['Desktop Safari'],
          dependencies: ['setup'],
        },
      ],
    });
    ```

    **Type**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>
- name: testProject.expect
  id: api/class-testproject#test-project-expect
  summary: Configuration for the expect assertion library
  belongs_to: TestProject
  description: |-
    ### expect[​](#test-project-expect "Direct link to expect")

    Configuration for the `expect` assertion library.

    Use [testConfig.expect](class-testconfig#test-config-expect) to change this option for all projects.

    **Usage**

    ``` javascript
    testProject.expect
    ```

    **Type**

    - [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")
      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Default timeout for async expect matchers in milliseconds, defaults to 5000ms.

      - `toHaveScreenshot` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `threshold` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

          an acceptable perceived color difference between the same pixel in compared images, ranging from `0` (strict) and `1` (lax). `"pixelmatch"` comparator computes color difference in [YIQ color space](https://en.wikipedia.org/wiki/YIQ) and defaults `threshold` value to `0.2`.

        - `maxDiffPixels` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

          an acceptable amount of pixels that could be different, unset by default.

        - `maxDiffPixelRatio` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

          an acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1` , unset by default.

        - `animations` "allow" \| "disabled" *(optional)*

          See `animations` in [page.screenshot()](class-page#page-screenshot). Defaults to `"disabled"`.

        - `caret` "hide" \| "initial" *(optional)*

          See `caret` in [page.screenshot()](class-page#page-screenshot). Defaults to `"hide"`.

        - `scale` "css" \| "device" *(optional)*

          See `scale` in [page.screenshot()](class-page#page-screenshot). Defaults to `"css"`.

        - `stylePath`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\> *(optional)*

          See `style` in [page.screenshot()](class-page#page-screenshot).

        Configuration for the [expect(page).toHaveScreenshot()](class-pageassertions#page-assertions-to-have-screenshot-1) method.

      - `toMatchSnapshot` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `threshold` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

          an acceptable perceived color difference between the same pixel in compared images, ranging from `0` (strict) and `1` (lax). `"pixelmatch"` comparator computes color difference in [YIQ color space](https://en.wikipedia.org/wiki/YIQ) and defaults `threshold` value to `0.2`.

        - `maxDiffPixels` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

          an acceptable amount of pixels that could be different, unset by default.

        - `maxDiffPixelRatio` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

          an acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1` , unset by default.

        Configuration for the [expect(value).toMatchSnapshot()](class-snapshotassertions#snapshot-assertions-to-match-snapshot-1) method.

      - `toPass` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

        - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

          timeout for toPass method in milliseconds.

        - `intervals`[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")\> *(optional)*

          probe intervals for toPass method in milliseconds.

        Configuration for the [expect(value).toPass()](../test-assertions) method.

    &nbsp;
- name: testProject.fullyParallel
  id: api/class-testproject#test-project-fully-parallel
  summary: Playwright Test runs tests in parallel
  belongs_to: TestProject
  description: |-
    ### fullyParallel[​](#test-project-fully-parallel "Direct link to fullyParallel")

    Playwright Test runs tests in parallel. In order to achieve that, it runs several worker processes that run at the same time. By default, **test files** are run in parallel. Tests in a single file are run in order, in the same worker process.

    You can configure entire test project to concurrently run all tests in all files using this option.

    **Usage**

    ``` javascript
    testProject.fullyParallel
    ```

    **Type**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: testProject.grep
  id: api/class-testproject#test-project-grep
  summary: Filter to only run tests with a title matching one of the patterns
  belongs_to: TestProject
  description: |-
    ### grep[​](#test-project-grep "Direct link to grep")

    Filter to only run tests with a title matching one of the patterns. For example, passing `grep: /cart/` should only run tests with "cart" in the title. Also available globally and in the [command line](../test-cli) with the `-g` option. The regular expression will be tested against the string that consists of the project name, the test file name, the `test.describe` name (if any), the test name and the test tags divided by spaces, e.g. `chromium my-test.spec.ts my-suite my-test`.

    `grep` option is also useful for [tagging tests](../test-annotations#tag-tests).

    **Usage**

    ``` javascript
    testProject.grep
    ```

    **Type**

    - [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")\>

    &nbsp;
- name: testProject.grepInvert
  id: api/class-testproject#test-project-grep-invert
  summary: Filter to only run tests with a title not matching one of the patterns
  belongs_to: TestProject
  description: |-
    ### grepInvert[​](#test-project-grep-invert "Direct link to grepInvert")

    Filter to only run tests with a title **not** matching one of the patterns. This is the opposite of [testProject.grep](class-testproject#test-project-grep). Also available globally and in the [command line](../test-cli) with the `--grep-invert` option.

    `grepInvert` option is also useful for [tagging tests](../test-annotations#tag-tests).

    **Usage**

    ``` javascript
    testProject.grepInvert
    ```

    **Type**

    - [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")\>

    &nbsp;
- name: testProject.ignoreSnapshots
  id: api/class-testproject#test-project-ignore-snapshots
  summary: Whether to skip snapshot expectations, such as expect(value).toMatchSnapshot() and await expect(page).toHaveScreenshot()
  belongs_to: TestProject
  description: |-
    ### ignoreSnapshots[​](#test-project-ignore-snapshots "Direct link to ignoreSnapshots")

    Whether to skip snapshot expectations, such as `expect(value).toMatchSnapshot()` and `await expect(page).toHaveScreenshot()`.

    **Usage**

    The following example will only perform screenshot assertions on Chromium.

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      projects: [
        {
          name: 'chromium',
          use: devices['Desktop Chrome'],
        },
        {
          name: 'firefox',
          use: devices['Desktop Firefox'],
          ignoreSnapshots: true,
        },
        {
          name: 'webkit',
          use: devices['Desktop Safari'],
          ignoreSnapshots: true,
        },
      ],
    });
    ```

    **Type**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: testProject.metadata
  id: api/class-testproject#test-project-metadata
  summary: Metadata that will be put directly to the test report serialized as JSON
  belongs_to: TestProject
  description: |-
    ### metadata[​](#test-project-metadata "Direct link to metadata")

    Metadata that will be put directly to the test report serialized as JSON.

    **Usage**

    ``` javascript
    testProject.metadata
    ```

    **Type**

    - [Metadata](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object<string, any>")

    &nbsp;
- name: testProject.name
  id: api/class-testproject#test-project-name
  summary: Project name is visible in the report and during test execution
  belongs_to: TestProject
  description: |-
    ### name[​](#test-project-name "Direct link to name")

    Project name is visible in the report and during test execution.

    **Usage**

    ``` javascript
    testProject.name
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testProject.outputDir
  id: api/class-testproject#test-project-output-dir
  summary: The output directory for files created during test execution
  belongs_to: TestProject
  description: |-
    ### outputDir[​](#test-project-output-dir "Direct link to outputDir")

    The output directory for files created during test execution. Defaults to `<package.json-directory>/test-results`.

    This directory is cleaned at the start. When running a test, a unique subdirectory inside the [testProject.outputDir](class-testproject#test-project-output-dir) is created, guaranteeing that test running in parallel do not conflict. This directory can be accessed by [testInfo.outputDir](class-testinfo#test-info-output-dir) and [testInfo.outputPath()](class-testinfo#test-info-output-path).

    Here is an example that uses [testInfo.outputPath()](class-testinfo#test-info-output-path) to create a temporary file.

    ``` javascript
    import { test, expect } from '@playwright/test';
    import fs from 'fs';

    test('example test', async ({}, testInfo) => {
      const file = testInfo.outputPath('temporary-file.txt');
      await fs.promises.writeFile(file, 'Put some data to the file', 'utf8');
    });
    ```

    Use [testConfig.outputDir](class-testconfig#test-config-output-dir) to change this option for all projects.

    **Usage**

    ``` javascript
    testProject.outputDir
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testProject.repeatEach
  id: api/class-testproject#test-project-repeat-each
  summary: The number of times to repeat each test, useful for debugging flaky tests
  belongs_to: TestProject
  description: |-
    ### repeatEach[​](#test-project-repeat-each "Direct link to repeatEach")

    The number of times to repeat each test, useful for debugging flaky tests.

    Use [testConfig.repeatEach](class-testconfig#test-config-repeat-each) to change this option for all projects.

    **Usage**

    ``` javascript
    testProject.repeatEach
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testProject.respectGitIgnore
  id: api/class-testproject#test-project-respect-git-ignore
  summary: Whether to skip entries from .gitignore when searching for test files
  belongs_to: TestProject
  description: |-
    ### respectGitIgnore[​](#test-project-respect-git-ignore "Direct link to respectGitIgnore")

    Whether to skip entries from `.gitignore` when searching for test files. By default, if neither [testConfig.testDir](class-testconfig#test-config-test-dir) nor [testProject.testDir](class-testproject#test-project-test-dir) are explicitly specified, Playwright will ignore any test files matching `.gitignore` entries. This option allows to override that behavior.

    **Usage**

    ``` javascript
    testProject.respectGitIgnore
    ```

    **Type**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")

    &nbsp;
- name: testProject.retries
  id: api/class-testproject#test-project-retries
  summary: The maximum number of retry attempts given to failed tests
  belongs_to: TestProject
  description: |-
    ### retries[​](#test-project-retries "Direct link to retries")

    The maximum number of retry attempts given to failed tests. Learn more about [test retries](../test-retries#retries).

    Use [test.describe.configure()](class-test#test-describe-configure) to change the number of retries for a specific file or a group of tests.

    Use [testConfig.retries](class-testconfig#test-config-retries) to change this option for all projects.

    **Usage**

    ``` javascript
    testProject.retries
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testProject.snapshotDir
  id: api/class-testproject#test-project-snapshot-dir
  summary: The base directory, relative to the config file, for snapshot files created with toMatchSnapshot
  belongs_to: TestProject
  description: |-
    ### snapshotDir[​](#test-project-snapshot-dir "Direct link to snapshotDir")

    The base directory, relative to the config file, for snapshot files created with `toMatchSnapshot`. Defaults to [testProject.testDir](class-testproject#test-project-test-dir).

    The directory for each test can be accessed by [testInfo.snapshotDir](class-testinfo#test-info-snapshot-dir) and [testInfo.snapshotPath()](class-testinfo#test-info-snapshot-path).

    This path will serve as the base directory for each test file snapshot directory. Setting `snapshotDir` to `'snapshots'`, the [testInfo.snapshotDir](class-testinfo#test-info-snapshot-dir) would resolve to `snapshots/a.spec.js-snapshots`.

    **Usage**

    ``` javascript
    testProject.snapshotDir
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testProject.snapshotPathTemplate
  id: api/class-testproject#test-project-snapshot-path-template
  summary: This option configures a template controlling location of snapshots generated by expect(page).toHaveScreenshot() and expect(value).toMatchSnapshot()
  belongs_to: TestProject
  description: |-
    ### snapshotPathTemplate[​](#test-project-snapshot-path-template "Direct link to snapshotPathTemplate")

    This option configures a template controlling location of snapshots generated by [expect(page).toHaveScreenshot()](class-pageassertions#page-assertions-to-have-screenshot-1) and [expect(value).toMatchSnapshot()](class-snapshotassertions#snapshot-assertions-to-match-snapshot-1).

    **Usage**

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      testDir: './tests',
      snapshotPathTemplate: '{testDir}/__screenshots__/{testFilePath}/{arg}{ext}',
    });
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    **Details**

    The value might include some "tokens" that will be replaced with actual values during test execution.

    Consider the following file structure:

    ``` javascript
    playwright.config.ts
    tests/
    └── page/
        └── page-click.spec.ts
    ```

    And the following `page-click.spec.ts` that uses `toHaveScreenshot()` call:

    ``` javascript
    import { test, expect } from '@playwright/test';

    test.describe('suite', () => {
      test('test should work', async ({ page }) => {
        await expect(page).toHaveScreenshot(['foo', 'bar', 'baz.png']);
      });
    });
    ```

    The list of supported tokens:

    - `{arg}` - Relative snapshot path **without extension**. These come from the arguments passed to the `toHaveScreenshot()` and `toMatchSnapshot()` calls; if called without arguments, this will be an auto-generated snapshot name.
      - Value: `foo/bar/baz`
    - `{ext}` - snapshot extension (with dots)
      - Value: `.png`
    - `{platform}` - The value of `process.platform`.
    - `{projectName}` - Project's file-system-sanitized name, if any.
      - Value: `''` (empty string).
    - `{snapshotDir}` - Project's [testConfig.snapshotDir](class-testconfig#test-config-snapshot-dir).
      - Value: `/home/playwright/tests` (since `snapshotDir` is not provided in config, it defaults to `testDir`)
    - `{testDir}` - Project's [testConfig.testDir](class-testconfig#test-config-test-dir).
      - Value: `/home/playwright/tests` (absolute path is since `testDir` is resolved relative to directory with config)
    - `{testFileDir}` - Directories in relative path from `testDir` to **test file**.
      - Value: `page`
    - `{testFileName}` - Test file name with extension.
      - Value: `page-click.spec.ts`
    - `{testFilePath}` - Relative path from `testDir` to **test file**
      - Value: `page/page-click.spec.ts`
    - `{testName}` - File-system-sanitized test title, including parent describes but excluding file name.
      - Value: `suite-test-should-work`

    Each token can be preceded with a single character that will be used **only if** this token has non-empty value.

    Consider the following config:

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      snapshotPathTemplate: '__screenshots__{/projectName}/{testFilePath}/{arg}{ext}',
      testMatch: 'example.spec.ts',
      projects: [
        { use: { browserName: 'firefox' } },
        { name: 'chromium', use: { browserName: 'chromium' } },
      ],
    });
    ```

    In this config:

    1.  First project **does not** have a name, so its snapshots will be stored in `<configDir>/__screenshots__/example.spec.ts/...`.
    2.  Second project **does** have a name, so its snapshots will be stored in `<configDir>/__screenshots__/chromium/example.spec.ts/..`.
    3.  Since `snapshotPathTemplate` resolves to relative path, it will be resolved relative to `configDir`.
    4.  Forward slashes `"/"` can be used as path separators on any platform.

    &nbsp;
- name: testProject.teardown
  id: api/class-testproject#test-project-teardown
  summary: Name of a project that needs to run after this and all dependent projects have finished
  belongs_to: TestProject
  description: |-
    ### teardown[​](#test-project-teardown "Direct link to teardown")

    Name of a project that needs to run after this and all dependent projects have finished. Teardown is useful to cleanup any resources acquired by this project.

    Passing `--no-deps` argument ignores [testProject.teardown](class-testproject#test-project-teardown) and behaves as if it was not specified.

    **Usage**

    A common pattern is a "setup" dependency that has a corresponding "teardown":

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      projects: [
        {
          name: 'setup',
          testMatch: /global.setup\.ts/,
          teardown: 'teardown',
        },
        {
          name: 'teardown',
          testMatch: /global.teardown\.ts/,
        },
        {
          name: 'chromium',
          use: devices['Desktop Chrome'],
          dependencies: ['setup'],
        },
        {
          name: 'firefox',
          use: devices['Desktop Firefox'],
          dependencies: ['setup'],
        },
        {
          name: 'webkit',
          use: devices['Desktop Safari'],
          dependencies: ['setup'],
        },
      ],
    });
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testProject.testDir
  id: api/class-testproject#test-project-test-dir
  summary: Directory that will be recursively scanned for test files
  belongs_to: TestProject
  description: |-
    ### testDir[​](#test-project-test-dir "Direct link to testDir")

    Directory that will be recursively scanned for test files. Defaults to the directory of the configuration file.

    Each project can use a different directory. Here is an example that runs smoke tests in three browsers and all other tests in stable Chrome browser.

    ``` javascript
    import { defineConfig } from '@playwright/test';

    export default defineConfig({
      projects: [
        {
          name: 'Smoke Chromium',
          testDir: './smoke-tests',
          use: {
            browserName: 'chromium',
          }
        },
        {
          name: 'Smoke WebKit',
          testDir: './smoke-tests',
          use: {
            browserName: 'webkit',
          }
        },
        {
          name: 'Smoke Firefox',
          testDir: './smoke-tests',
          use: {
            browserName: 'firefox',
          }
        },
        {
          name: 'Chrome Stable',
          testDir: './',
          use: {
            browserName: 'chromium',
            channel: 'chrome',
          }
        },
      ],
    });
    ```

    Use [testConfig.testDir](class-testconfig#test-config-test-dir) to change this option for all projects.

    **Usage**

    ``` javascript
    testProject.testDir
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: testProject.testIgnore
  id: api/class-testproject#test-project-test-ignore
  summary: Files matching one of these patterns are not executed as test files
  belongs_to: TestProject
  description: |-
    ### testIgnore[​](#test-project-test-ignore "Direct link to testIgnore")

    Files matching one of these patterns are not executed as test files. Matching is performed against the absolute file path. Strings are treated as glob patterns.

    For example, `'**/test-assets/**'` will ignore any files in the `test-assets` directory.

    Use [testConfig.testIgnore](class-testconfig#test-config-test-ignore) to change this option for all projects.

    **Usage**

    ``` javascript
    testProject.testIgnore
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")\>

    &nbsp;
- name: testProject.testMatch
  id: api/class-testproject#test-project-test-match
  summary: Only the files matching one of these patterns are executed as test files
  belongs_to: TestProject
  description: |-
    ### testMatch[​](#test-project-test-match "Direct link to testMatch")

    Only the files matching one of these patterns are executed as test files. Matching is performed against the absolute file path. Strings are treated as glob patterns.

    By default, Playwright looks for files matching the following glob pattern: `**/*.@(spec|test).?(c|m)[jt]s?(x)`. This means JavaScript or TypeScript files with `".test"` or `".spec"` suffix, for example `login-screen.wrong-credentials.spec.ts`.

    Use [testConfig.testMatch](class-testconfig#test-config-test-match) to change this option for all projects.

    **Usage**

    ``` javascript
    testProject.testMatch
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp") \| [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp "RegExp")\>

    &nbsp;
- name: testProject.timeout
  id: api/class-testproject#test-project-timeout
  summary: Timeout for each test in milliseconds
  belongs_to: TestProject
  description: |-
    ### timeout[​](#test-project-timeout "Direct link to timeout")

    Timeout for each test in milliseconds. Defaults to 30 seconds.

    This is a base timeout for all tests. Each test can configure its own timeout with [test.setTimeout()](class-test#test-set-timeout). Each file or a group of tests can configure the timeout with [test.describe.configure()](class-test#test-describe-configure).

    Use [testConfig.timeout](class-testconfig#test-config-timeout) to change this option for all projects.

    **Usage**

    ``` javascript
    testProject.timeout
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testProject.use
  id: api/class-testproject#test-project-use
  summary: Options for all tests in this project, for example testOptions.browserName
  belongs_to: TestProject
  description: "### use[​](#test-project-use \"Direct link to use\")\n\nOptions for all tests in this project, for example [testOptions.browserName](class-testoptions#test-options-browser-name). Learn more about [configuration](../test-configuration) and see [available options](class-testoptions \"TestOptions\").\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'Chromium',\n      use: {\n        browserName: 'chromium',\n      },\n    },\n  ],\n});\n```\n\nUse [testConfig.use](class-testconfig#test-config-use) to change this option for all projects.\n\n**Usage**\n\n``` javascript\ntestProject.use\n```\n\n**Type**\n\n- [TestOptions](class-testoptions \"TestOptions\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-testproject](https://playwright.dev/docs/api/class-testproject)"
- name: TestResult
  id: api/class-testresult
  summary: A result of a single TestCase run
  description: "# TestResult\n\nA result of a single [TestCase](class-testcase \"TestCase\") run.\n\n## Properties[​](#properties \"Direct link to Properties\")\n\n### attachments[​](#test-result-attachments \"Direct link to attachments\")\n\nThe list of files or buffers attached during the test execution through [testInfo.attachments](class-testinfo#test-info-attachments).\n\n**Usage**\n\n``` javascript\ntestResult.attachments\n```\n\n**Type**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n  - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Attachment name.\n\n  - `contentType` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n    Content type of this attachment to properly present in the report, for example `'application/json'` or `'image/png'`.\n\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Optional path on the filesystem to the attached file.\n\n  - `body` [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\") *(optional)*\n\n    Optional attachment body used instead of a file.\n\n### duration[​](#test-result-duration \"Direct link to duration\")\n\nRunning time in milliseconds.\n\n**Usage**\n\n``` javascript\ntestResult.duration\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### error[​](#test-result-error \"Direct link to error\")\n\nFirst error thrown during test execution, if any. This is equal to the first element in [testResult.errors](class-testresult#test-result-errors).\n\n**Usage**\n\n``` javascript\ntestResult.error\n```\n\n**Type**\n\n- [TestError](class-testerror \"TestError\")\n\n### errors[​](#test-result-errors \"Direct link to errors\")\n\nErrors thrown during the test execution.\n\n**Usage**\n\n``` javascript\ntestResult.errors\n```\n\n**Type**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[TestError](class-testerror \"TestError\")\\>\n\n### parallelIndex[​](#test-result-parallel-index \"Direct link to parallelIndex\")\n\nThe index of the worker between `0` and `workers - 1`. It is guaranteed that workers running at the same time have a different `parallelIndex`.\n\n**Usage**\n\n``` javascript\ntestResult.parallelIndex\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### retry[​](#test-result-retry \"Direct link to retry\")\n\nWhen test is retries multiple times, each retry attempt is given a sequential number.\n\nLearn more about [test retries](../test-retries#retries).\n\n**Usage**\n\n``` javascript\ntestResult.retry\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### startTime[​](#test-result-start-time \"Direct link to startTime\")\n\nStart time of this particular test run.\n\n**Usage**\n\n``` javascript\ntestResult.startTime\n```\n\n**Type**\n\n- \\[Date\\]\n\n### status[​](#test-result-status \"Direct link to status\")\n\nThe status of this test result. See also [testCase.expectedStatus](class-testcase#test-case-expected-status).\n\n**Usage**\n\n``` javascript\ntestResult.status\n```\n\n**Type**\n\n- \"passed\" \\| \"failed\" \\| \"timedOut\" \\| \"skipped\" \\| \"interrupted\"\n\n### stderr[​](#test-result-stderr \"Direct link to stderr\")\n\nAnything written to the standard error during the test run.\n\n**Usage**\n\n``` javascript\ntestResult.stderr\n```\n\n**Type**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\\>\n\n### stdout[​](#test-result-stdout \"Direct link to stdout\")\n\nAnything written to the standard output during the test run.\n\n**Usage**\n\n``` javascript\ntestResult.stdout\n```\n\n**Type**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\\>\n\n### steps[​](#test-result-steps \"Direct link to steps\")\n\nList of steps inside this test run.\n\n**Usage**\n\n``` javascript\ntestResult.steps\n```\n\n**Type**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[TestStep](class-teststep \"TestStep\")\\>\n\n### workerIndex[​](#test-result-worker-index \"Direct link to workerIndex\")\n\nIndex of the worker where the test was run. If the test was not run a single time, for example when the user interrupted testing, the only result will have a `workerIndex` equal to `-1`.\n\nLearn more about [parallelism and sharding](../test-parallel) with Playwright Test.\n\n**Usage**\n\n``` javascript\ntestResult.workerIndex\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-testresult](https://playwright.dev/docs/api/class-testresult)"
- name: testResult.attachments
  id: api/class-testresult#test-result-attachments
  summary: The list of files or buffers attached during the test execution through testInfo.attachments
  belongs_to: TestResult
  description: |-
    ### attachments[​](#test-result-attachments "Direct link to attachments")

    The list of files or buffers attached during the test execution through [testInfo.attachments](class-testinfo#test-info-attachments).

    **Usage**

    ``` javascript
    testResult.attachments
    ```

    **Type**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>
      - `name`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        Attachment name.

      - `contentType`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

        Content type of this attachment to properly present in the report, for example `'application/json'` or `'image/png'`.

      - `path`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")*(optional)*

        Optional path on the filesystem to the attached file.

      - `body`[Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")*(optional)*

        Optional attachment body used instead of a file.
- name: testResult.duration
  id: api/class-testresult#test-result-duration
  summary: Running time in milliseconds
  belongs_to: TestResult
  description: |-
    ### duration[​](#test-result-duration "Direct link to duration")

    Running time in milliseconds.

    **Usage**

    ``` javascript
    testResult.duration
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testResult.error
  id: api/class-testresult#test-result-error
  summary: First error thrown during test execution, if any
  belongs_to: TestResult
  description: |-
    ### error[​](#test-result-error "Direct link to error")

    First error thrown during test execution, if any. This is equal to the first element in [testResult.errors](class-testresult#test-result-errors).

    **Usage**

    ``` javascript
    testResult.error
    ```

    **Type**

    - [TestError](class-testerror "TestError")

    &nbsp;
- name: testResult.errors
  id: api/class-testresult#test-result-errors
  summary: Errors thrown during the test execution
  belongs_to: TestResult
  description: |-
    ### errors[​](#test-result-errors "Direct link to errors")

    Errors thrown during the test execution.

    **Usage**

    ``` javascript
    testResult.errors
    ```

    **Type**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[TestError](class-testerror "TestError")\>

    &nbsp;
- name: testResult.parallelIndex
  id: api/class-testresult#test-result-parallel-index
  summary: The index of the worker between 0 and workers - 1
  belongs_to: TestResult
  description: |-
    ### parallelIndex[​](#test-result-parallel-index "Direct link to parallelIndex")

    The index of the worker between `0` and `workers - 1`. It is guaranteed that workers running at the same time have a different `parallelIndex`.

    **Usage**

    ``` javascript
    testResult.parallelIndex
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testResult.retry
  id: api/class-testresult#test-result-retry
  summary: When test is retries multiple times, each retry attempt is given a sequential number
  belongs_to: TestResult
  description: |-
    ### retry[​](#test-result-retry "Direct link to retry")

    When test is retries multiple times, each retry attempt is given a sequential number.

    Learn more about [test retries](../test-retries#retries).

    **Usage**

    ``` javascript
    testResult.retry
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testResult.startTime
  id: api/class-testresult#test-result-start-time
  summary: Start time of this particular test run
  belongs_to: TestResult
  description: |-
    ### startTime[​](#test-result-start-time "Direct link to startTime")

    Start time of this particular test run.

    **Usage**

    ``` javascript
    testResult.startTime
    ```

    **Type**

    - \[Date\]

    &nbsp;
- name: testResult.status
  id: api/class-testresult#test-result-status
  summary: The status of this test result
  belongs_to: TestResult
  description: |-
    ### status[​](#test-result-status "Direct link to status")

    The status of this test result. See also [testCase.expectedStatus](class-testcase#test-case-expected-status).

    **Usage**

    ``` javascript
    testResult.status
    ```

    **Type**

    - "passed" \| "failed" \| "timedOut" \| "skipped" \| "interrupted"

    &nbsp;
- name: testResult.stderr
  id: api/class-testresult#test-result-stderr
  summary: Anything written to the standard error during the test run
  belongs_to: TestResult
  description: |-
    ### stderr[​](#test-result-stderr "Direct link to stderr")

    Anything written to the standard error during the test run.

    **Usage**

    ``` javascript
    testResult.stderr
    ```

    **Type**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")\>

    &nbsp;
- name: testResult.stdout
  id: api/class-testresult#test-result-stdout
  summary: Anything written to the standard output during the test run
  belongs_to: TestResult
  description: |-
    ### stdout[​](#test-result-stdout "Direct link to stdout")

    Anything written to the standard output during the test run.

    **Usage**

    ``` javascript
    testResult.stdout
    ```

    **Type**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")\>

    &nbsp;
- name: testResult.steps
  id: api/class-testresult#test-result-steps
  summary: List of steps inside this test run
  belongs_to: TestResult
  description: |-
    ### steps[​](#test-result-steps "Direct link to steps")

    List of steps inside this test run.

    **Usage**

    ``` javascript
    testResult.steps
    ```

    **Type**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[TestStep](class-teststep "TestStep")\>

    &nbsp;
- name: testResult.workerIndex
  id: api/class-testresult#test-result-worker-index
  summary: Index of the worker where the test was run
  belongs_to: TestResult
  description: "### workerIndex[​](#test-result-worker-index \"Direct link to workerIndex\")\n\nIndex of the worker where the test was run. If the test was not run a single time, for example when the user interrupted testing, the only result will have a `workerIndex` equal to `-1`.\n\nLearn more about [parallelism and sharding](../test-parallel) with Playwright Test.\n\n**Usage**\n\n``` javascript\ntestResult.workerIndex\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-testresult](https://playwright.dev/docs/api/class-testresult)"
- name: TestStep
  id: api/class-teststep
  summary: Represents a step in the [TestRun]
  description: "# TestStep\n\nRepresents a step in the \\[TestRun\\].\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### titlePath[​](#test-step-title-path \"Direct link to titlePath\")\n\nReturns a list of step titles from the root step down to this step.\n\n**Usage**\n\n``` javascript\ntestStep.titlePath();\n```\n\n**Returns**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n## Properties[​](#properties \"Direct link to Properties\")\n\n### category[​](#test-step-category \"Direct link to category\")\n\nStep category to differentiate steps with different origin and verbosity. Built-in categories are:\n\n- `hook` for fixtures and hooks initialization and teardown\n- `expect` for expect calls\n- `pw:api` for Playwright API calls.\n- `test.step` for test.step API calls.\n\n**Usage**\n\n``` javascript\ntestStep.category\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### duration[​](#test-step-duration \"Direct link to duration\")\n\nRunning time in milliseconds.\n\n**Usage**\n\n``` javascript\ntestStep.duration\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### error[​](#test-step-error \"Direct link to error\")\n\nError thrown during the step execution, if any.\n\n**Usage**\n\n``` javascript\ntestStep.error\n```\n\n**Type**\n\n- [TestError](class-testerror \"TestError\")\n\n### location[​](#test-step-location \"Direct link to location\")\n\nOptional location in the source where the step is defined.\n\n**Usage**\n\n``` javascript\ntestStep.location\n```\n\n**Type**\n\n- [Location](class-location \"Location\")\n\n### parent[​](#test-step-parent \"Direct link to parent\")\n\nParent step, if any.\n\n**Usage**\n\n``` javascript\ntestStep.parent\n```\n\n**Type**\n\n- [TestStep](class-teststep \"TestStep\")\n\n### startTime[​](#test-step-start-time \"Direct link to startTime\")\n\nStart time of this particular test step.\n\n**Usage**\n\n``` javascript\ntestStep.startTime\n```\n\n**Type**\n\n- \\[Date\\]\n\n### steps[​](#test-step-steps \"Direct link to steps\")\n\nList of steps inside this step.\n\n**Usage**\n\n``` javascript\ntestStep.steps\n```\n\n**Type**\n\n- [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array \"Array\")\\<[TestStep](class-teststep \"TestStep\")\\>\n\n### title[​](#test-step-title \"Direct link to title\")\n\nUser-friendly test step title.\n\n**Usage**\n\n``` javascript\ntestStep.title\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-teststep](https://playwright.dev/docs/api/class-teststep)"
- name: testStep.category
  id: api/class-teststep#test-step-category
  summary: Step category to differentiate steps with different origin and verbosity
  belongs_to: TestStep
  description: |-
    ### category[​](#test-step-category "Direct link to category")

    Step category to differentiate steps with different origin and verbosity. Built-in categories are:

    - `hook` for fixtures and hooks initialization and teardown
    - `expect` for expect calls
    - `pw:api` for Playwright API calls.
    - `test.step` for test.step API calls.

    **Usage**

    ``` javascript
    testStep.category
    ```

    **Type**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")
- name: testStep.duration
  id: api/class-teststep#test-step-duration
  summary: Running time in milliseconds
  belongs_to: TestStep
  description: |-
    ### duration[​](#test-step-duration "Direct link to duration")

    Running time in milliseconds.

    **Usage**

    ``` javascript
    testStep.duration
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: testStep.error
  id: api/class-teststep#test-step-error
  summary: Error thrown during the step execution, if any
  belongs_to: TestStep
  description: |-
    ### error[​](#test-step-error "Direct link to error")

    Error thrown during the step execution, if any.

    **Usage**

    ``` javascript
    testStep.error
    ```

    **Type**

    - [TestError](class-testerror "TestError")

    &nbsp;
- name: testStep.location
  id: api/class-teststep#test-step-location
  summary: Optional location in the source where the step is defined
  belongs_to: TestStep
  description: |-
    ### location[​](#test-step-location "Direct link to location")

    Optional location in the source where the step is defined.

    **Usage**

    ``` javascript
    testStep.location
    ```

    **Type**

    - [Location](class-location "Location")

    &nbsp;
- name: testStep.parent
  id: api/class-teststep#test-step-parent
  summary: Parent step, if any
  belongs_to: TestStep
  description: |-
    ### parent[​](#test-step-parent "Direct link to parent")

    Parent step, if any.

    **Usage**

    ``` javascript
    testStep.parent
    ```

    **Type**

    - [TestStep](class-teststep "TestStep")

    &nbsp;
- name: testStep.startTime
  id: api/class-teststep#test-step-start-time
  summary: Start time of this particular test step
  belongs_to: TestStep
  description: |-
    ### startTime[​](#test-step-start-time "Direct link to startTime")

    Start time of this particular test step.

    **Usage**

    ``` javascript
    testStep.startTime
    ```

    **Type**

    - \[Date\]

    &nbsp;
- name: testStep.steps
  id: api/class-teststep#test-step-steps
  summary: List of steps inside this step
  belongs_to: TestStep
  description: |-
    ### steps[​](#test-step-steps "Direct link to steps")

    List of steps inside this step.

    **Usage**

    ``` javascript
    testStep.steps
    ```

    **Type**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[TestStep](class-teststep "TestStep")\>

    &nbsp;
- name: testStep.title
  id: api/class-teststep#test-step-title
  summary: User-friendly test step title
  belongs_to: TestStep
  description: "### title[​](#test-step-title \"Direct link to title\")\n\nUser-friendly test step title.\n\n**Usage**\n\n``` javascript\ntestStep.title\n```\n\n**Type**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-teststep](https://playwright.dev/docs/api/class-teststep)"
- name: testStep.titlePath
  id: api/class-teststep#test-step-title-path
  summary: Returns a list of step titles from the root step down to this step
  belongs_to: TestStep
  description: |-
    ### titlePath[​](#test-step-title-path "Direct link to titlePath")

    Returns a list of step titles from the root step down to this step.

    **Usage**

    ``` javascript
    testStep.titlePath();
    ```

    **Returns**

    - [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array "Array")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    ## Properties[​](#properties "Direct link to Properties")
- name: TimeoutError
  id: api/class-timeouterror
  summary: TimeoutError is emitted whenever certain operations are terminated due to timeout, e.g
  description: "# TimeoutError\n\n- extends: [Error](https://nodejs.org/api/errors.html#errors_class_error \"Error\")\n\nTimeoutError is emitted whenever certain operations are terminated due to timeout, e.g. [locator.waitFor()](class-locator#locator-wait-for) or [browserType.launch()](class-browsertype#browser-type-launch).\n\n``` javascript\nconst playwright = require('playwright');\n\n(async () => {\n  const browser = await playwright.chromium.launch();\n  const context = await browser.newContext();\n  const page = await context.newPage();\n  try {\n    await page.locator('text=Foo').click({\n      timeout: 100,\n    });\n  } catch (error) {\n    if (error instanceof playwright.errors.TimeoutError)\n      console.log('Timeout!');\n  }\n  await browser.close();\n})();\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-timeouterror](https://playwright.dev/docs/api/class-timeouterror)"
- name: Timeouts
  id: test-timeouts
  summary: Playwright Test has multiple configurable timeouts for various tasks
  description: "# Timeouts\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright Test has multiple configurable timeouts for various tasks.\n\n| Timeout        | Default  | Description                                                                                                                                  |\n|:---------------|:---------|:---------------------------------------------------------------------------------------------------------------------------------------------|\n| Test timeout   | 30000 ms | Timeout for each test, includes test, hooks and fixtures: Set default `config = { timeout: 60000 }` Override `test.setTimeout(120000)`       |\n| Expect timeout | 5000 ms  | Timeout for each assertion: Set default `config = { expect: { timeout: 10000 } }` Override `expect(locator).toBeVisible({ timeout: 10000 })` |\n\n## Test timeout[​](#test-timeout \"Direct link to Test timeout\")\n\nPlaywright Test enforces a timeout for each test, 30 seconds by default. Time spent by the test function, fixtures, `beforeEach` and `afterEach` hooks is included in the test timeout.\n\nTimed out test produces the following error:\n\n``` javascript\nexample.spec.ts:3:1 › basic test ===========================\n\nTimeout of 30000ms exceeded.\n```\n\nThe same timeout value also applies to `beforeAll` and `afterAll` hooks, but they do not share time with any test.\n\n### Set test timeout in the config[​](#set-test-timeout-in-the-config \"Direct link to Set test timeout in the config\")\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  timeout: 5 * 60 * 1000,\n});\n```\n\nAPI reference: [testConfig.timeout](api/class-testconfig#test-config-timeout).\n\n### Set timeout for a single test[​](#set-timeout-for-a-single-test \"Direct link to Set timeout for a single test\")\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('slow test', async ({ page }) => {\n  test.slow(); // Easy way to triple the default timeout\n  // ...\n});\n\ntest('very slow test', async ({ page }) => {\n  test.setTimeout(120000);\n  // ...\n});\n```\n\nAPI reference: [test.setTimeout()](api/class-test#test-set-timeout) and [test.slow()](api/class-test#test-slow).\n\n### Change timeout from a `beforeEach` hook[​](#change-timeout-from-a-beforeeach-hook \"Direct link to change-timeout-from-a-beforeeach-hook\")\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.beforeEach(async ({ page }, testInfo) => {\n  // Extend timeout for all tests running this hook by 30 seconds.\n  testInfo.setTimeout(testInfo.timeout + 30000);\n});\n```\n\nAPI reference: [testInfo.setTimeout()](api/class-testinfo#test-info-set-timeout).\n\n### Change timeout for `beforeAll`/`afterAll` hook[​](#change-timeout-for-beforeallafterall-hook \"Direct link to change-timeout-for-beforeallafterall-hook\")\n\n`beforeAll` and `afterAll` hooks have a separate timeout, by default equal to test timeout. You can change it separately for each hook by calling [testInfo.setTimeout()](api/class-testinfo#test-info-set-timeout) inside the hook.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.beforeAll(async () => {\n  // Set timeout for this hook.\n  test.setTimeout(60000);\n});\n```\n\nAPI reference: [testInfo.setTimeout()](api/class-testinfo#test-info-set-timeout).\n\n## Expect timeout[​](#expect-timeout \"Direct link to Expect timeout\")\n\nWeb-first assertions like `expect(locator).toHaveText()` have a separate timeout, 5 seconds by default. Assertion timeout is unrelated to the test timeout. It produces the following error:\n\n``` javascript\nexample.spec.ts:3:1 › basic test ===========================\n\nError: expect(received).toHaveText(expected)\n\nExpected string: \"my text\"\nReceived string: \"\"\nCall log:\n  - expect.toHaveText with timeout 5000ms\n  - waiting for \"locator('button')\"\n```\n\n### Set expect timeout in the config[​](#set-expect-timeout-in-the-config \"Direct link to Set expect timeout in the config\")\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  expect: {\n    timeout: 10 * 1000,\n  },\n});\n```\n\n## Global timeout[​](#global-timeout \"Direct link to Global timeout\")\n\nPlaywright Test supports a timeout for the whole test run. This prevents excess resource usage when everything went wrong. There is no default global timeout, but you can set a reasonable one in the config, for example one hour. Global timeout produces the following error:\n\n``` javascript\nRunning 1000 tests using 10 workers\n\n  514 skipped\n  486 passed\n  Timed out waiting 3600s for the entire test run\n```\n\nYou can set global timeout in the config.\n\n``` javascript\n// playwright.config.ts\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  globalTimeout: 60 * 60 * 1000,\n});\n```\n\nAPI reference: [testConfig.globalTimeout](api/class-testconfig#test-config-global-timeout).\n\n## Advanced: low level timeouts[​](#advanced-low-level-timeouts \"Direct link to Advanced: low level timeouts\")\n\nThese are the low-level timeouts that are pre-configured by the test runner, you should not need to change these. If you happen to be in this section because your test are flaky, it is very likely that you should be looking for the solution elsewhere.\n\n| Timeout                        | Default    | Description                                                                                                                                    |\n|:-------------------------------|:-----------|:-----------------------------------------------------------------------------------------------------------------------------------------------|\n| Action timeout                 | no timeout | Timeout for each action: Set default `config = { use: { actionTimeout: 10000 } }` Override `locator.click({ timeout: 10000 })`                 |\n| Navigation timeout             | no timeout | Timeout for each navigation action: Set default `config = { use: { navigationTimeout: 30000 } }` Override `page.goto('/', { timeout: 30000 })` |\n| Global timeout                 | no timeout | Global timeout for the whole test run: Set in config `config = { globalTimeout: 60*60*1000 }`                                                  |\n| `beforeAll`/`afterAll` timeout | 30000 ms   | Timeout for the hook: Set in hook `test.setTimeout(60000)`                                                                                     |\n| Fixture timeout                | no timeout | Timeout for an individual fixture: Set in fixture `{ scope: 'test', timeout: 30000 }`                                                          |\n\n### Set timeout for a single assertion[​](#set-timeout-for-a-single-assertion \"Direct link to Set timeout for a single assertion\")\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  await expect(page.getByRole('button')).toHaveText('Sign in', { timeout: 10000 });\n});\n```\n\n### Set action and navigation timeouts in the config[​](#set-action-and-navigation-timeouts-in-the-config \"Direct link to Set action and navigation timeouts in the config\")\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    actionTimeout: 10 * 1000,\n    navigationTimeout: 30 * 1000,\n  },\n});\n```\n\nAPI reference: [testOptions.actionTimeout](api/class-testoptions#test-options-action-timeout) and [testOptions.navigationTimeout](api/class-testoptions#test-options-navigation-timeout).\n\n### Set timeout for a single action[​](#set-timeout-for-a-single-action \"Direct link to Set timeout for a single action\")\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }) => {\n  await page.goto('https://playwright.dev', { timeout: 30000 });\n  await page.getByText('Get Started').click({ timeout: 10000 });\n});\n```\n\n## Fixture timeout[​](#fixture-timeout \"Direct link to Fixture timeout\")\n\nBy default, [fixture](test-fixtures) shares timeout with the test. However, for slow fixtures, especially [worker-scoped](test-fixtures#worker-scoped-fixtures) ones, it is convenient to have a separate timeout. This way you can keep the overall test timeout small, and give the slow fixture more time.\n\n- TypeScript\n- JavaScript\n\n``` javascript\nimport { test as base, expect } from '@playwright/test';\n\nconst test = base.extend<{ slowFixture: string }>({\n  slowFixture: [async ({}, use) => {\n    // ... perform a slow operation ...\n    await use('hello');\n  }, { timeout: 60000 }]\n});\n\ntest('example test', async ({ slowFixture }) => {\n  // ...\n});\n```\n\n``` javascript\nconst { test: base, expect } = require('@playwright/test');\n\nconst test = base.extend({\n  slowFixture: [async ({}, use) => {\n    // ... perform a slow operation ...\n    await use('hello');\n  }, { timeout: 60000 }]\n});\n\ntest('example test', async ({ slowFixture }) => {\n  // ...\n});\n```\n\nAPI reference: [test.extend()](api/class-test#test-extend).\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/test-timeouts](https://playwright.dev/docs/test-timeouts)"
- name: Touchscreen
  id: api/class-touchscreen
  summary: The Touchscreen class operates in main-frame CSS pixels relative to the top-left corner of the viewport
  description: "# Touchscreen\n\nThe Touchscreen class operates in main-frame CSS pixels relative to the top-left corner of the viewport. Methods on the touchscreen can only be used in browser contexts that have been initialized with `hasTouch` set to true.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### tap[​](#touchscreen-tap \"Direct link to tap\")\n\nAdded before v1.9\n\nDispatches a `touchstart` and `touchend` event with a single touch at the position (`x`,`y`).\n\n> note\n>\n> [page.tap()](class-page#page-tap) the method will throw if `hasTouch` option of the browser context is false.\n\n**Usage**\n\n``` javascript\nawait touchscreen.tap(x, y);\n```\n\n**Arguments**\n\n- `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  X coordinate relative to the main frame's viewport in CSS pixels.\n\n- `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Y coordinate relative to the main frame's viewport in CSS pixels.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-touchscreen](https://playwright.dev/docs/api/class-touchscreen)"
- name: touchscreen.tap
  id: api/class-touchscreen#touchscreen-tap
  summary: Dispatches a touchstart and touchend event with a single touch at the position (x,y)
  belongs_to: Touchscreen
  description: "### tap[​](#touchscreen-tap \"Direct link to tap\")\n\nAdded before v1.9\n\nDispatches a `touchstart` and `touchend` event with a single touch at the position (`x`,`y`).\n\n> note\n>\n> [page.tap()](class-page#page-tap) the method will throw if `hasTouch` option of the browser context is false.\n\n**Usage**\n\n``` javascript\nawait touchscreen.tap(x, y);\n```\n\n**Arguments**\n\n- `x` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  X coordinate relative to the main frame's viewport in CSS pixels.\n\n- `y` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n  Y coordinate relative to the main frame's viewport in CSS pixels.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-touchscreen](https://playwright.dev/docs/api/class-touchscreen)"
- name: Trace viewer
  id: trace-viewer
  summary: Playwright Trace Viewer is a GUI tool that helps you explore recorded Playwright traces after the script has run
  description: "# Trace viewer\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright Trace Viewer is a GUI tool that helps you explore recorded Playwright traces after the script has run. Traces are a great way for debugging your tests when they fail on CI. You can open traces [locally](#opening-the-trace) or in your browser on [trace.playwright.dev](https://trace.playwright.dev).\n\n## Trace Viewer features[​](#trace-viewer-features \"Direct link to Trace Viewer features\")\n\n### Actions[​](#actions \"Direct link to Actions\")\n\nIn the Actions tab you can see what locator was used for every action and how long each one took to run. Hover over each action of your test and visually see the change in the DOM snapshot. Go back and forward in time and click an action to inspect and debug. Use the Before and After tabs to visually see what happened before and after the action.\n\n**Selecting each action reveals:**\n\n- action snapshots\n- action log\n- source code location\n\n### Screenshots[​](#screenshots \"Direct link to Screenshots\")\n\nWhen tracing with the `screenshots` option turned on (default), each trace records a screencast and renders it as a film strip. You can hover over the film strip to see a magnified image of for each action and state which helps you easily find the action you want to inspect.\n\nDouble click on an action to see the time range for that action. You can use the slider in the timeline to increase the actions selected and these will be shown in the Actions tab and all console logs and network logs will be filtered to only show the logs for the actions selected.\n\n### Snapshots[​](#snapshots \"Direct link to Snapshots\")\n\nWhen tracing with the `snapshots` option turned on (default), Playwright captures a set of complete DOM snapshots for each action. Depending on the type of the action, it will capture:\n\n| Type   | Description                                                                                                                                  |\n|--------|----------------------------------------------------------------------------------------------------------------------------------------------|\n| Before | A snapshot at the time action is called.                                                                                                     |\n| Action | A snapshot at the moment of the performed input. This type of snapshot is especially useful when exploring where exactly Playwright clicked. |\n| After  | A snapshot after the action.                                                                                                                 |\n\n  \n\nHere is what the typical Action snapshot looks like:\n\nNotice how it highlights both, the DOM Node as well as the exact click position.\n\n### Source[​](#source \"Direct link to Source\")\n\nWhen you click on an action in the sidebar, the line of code for that action is highlighted in the source panel.\n\n### Call[​](#call \"Direct link to Call\")\n\nThe call tab shows you information about the action such as the time it took, what locator was used, if in strict mode and what key was used.\n\n### Log[​](#log \"Direct link to Log\")\n\nSee a full log of your test to better understand what Playwright is doing behind the scenes such as scrolling into view, waiting for element to be visible, enabled and stable and performing actions such as click, fill, press etc.\n\n### Errors[​](#errors \"Direct link to Errors\")\n\nIf your test fails you will see the error messages for each test in the Errors tab. The timeline will also show a red line highlighting where the error occurred. You can also click on the source tab to see on which line of the source code the error is.\n\n### Console[​](#console \"Direct link to Console\")\n\nSee console logs from the browser as well as from your test. Different icons are displayed to show you if the console log came from the browser or from the test file.\n\nDouble click on an action from your test in the actions sidebar. This will filter the console to only show the logs that were made during that action. Click the *Show all* button to see all console logs again.\n\nUse the timeline to filter actions, by clicking a start point and dragging to an ending point. The console tab will also be filtered to only show the logs that were made during the actions selected.\n\n### Network[​](#network \"Direct link to Network\")\n\nThe Network tab shows you all the network requests that were made during your test. You can sort by different types of requests, status code, method, request, content type, duration and size. Click on a request to see more information about it such as the request headers, response headers, request body and response body.\n\nDouble click on an action from your test in the actions sidebar. This will filter the network requests to only show the requests that were made during that action. Click the *Show all* button to see all network requests again.\n\nUse the timeline to filter actions, by clicking a start point and dragging to an ending point. The network tab will also be filtered to only show the network requests that were made during the actions selected.\n\n### Metadata[​](#metadata \"Direct link to Metadata\")\n\nNext to the Actions tab you will find the Metadata tab which will show you more information on your test such as the Browser, viewport size, test duration and more.\n\n### Attachments[​](#attachments \"Direct link to Attachments\")\n\nThe \"Attachments\" tab allows you to explore attachments. If you're doing [visual regression testing](test-snapshots), you'll be able to compare screenshots by examining the image diff, the actual image and the expected image. When you click on the expected image you can use the slider to slide one image over the other so you can easily see the differences in your screenshots.\n\n## Recording a trace locally[​](#recording-a-trace-locally \"Direct link to Recording a trace locally\")\n\nTo record a trace during development mode set the `--trace` flag to `on` when running your tests. You can also use [UI Mode](test-ui-mode) for a better developer experience.\n\n``` javascript\nnpx playwright test --trace on\n```\n\nYou can then open the HTML report and click on the trace icon to open the trace.\n\n``` javascript\nnpx playwright show-report\n```\n\n## Recording a trace on CI[​](#recording-a-trace-on-ci \"Direct link to Recording a trace on CI\")\n\nTraces should be run on continuous integration on the first retry of a failed test by setting the `trace: 'on-first-retry'` option in the test configuration file. This will produce a `trace.zip` file for each test that was retried.\n\n- Test\n- Library\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  retries: 1,\n  use: {\n    trace: 'on-first-retry',\n  },\n});\n```\n\n``` javascript\nconst browser = await chromium.launch();\nconst context = await browser.newContext();\n\n// Start tracing before creating / navigating a page.\nawait context.tracing.start({ screenshots: true, snapshots: true });\n\nconst page = await context.newPage();\nawait page.goto('https://playwright.dev');\n\n// Stop tracing and export it into a zip archive.\nawait context.tracing.stop({ path: 'trace.zip' });\n```\n\nAvailable options to record a trace:\n\n- `'on-first-retry'` - Record a trace only when retrying a test for the first time.\n- `'on-all-retries'` - Record traces for all test retries.\n- `'off'` - Do not record a trace.\n- `'on'` - Record a trace for each test. (not recommended as it's performance heavy)\n- `'retain-on-failure'` - Record a trace for each test, but remove it from successful test runs.\n\nYou can also use `trace: 'retain-on-failure'` if you do not enable retries but still want traces for failed tests.\n\nThere are more granular options available, see [testOptions.trace](api/class-testoptions#test-options-trace).\n\nIf you are not using Playwright as a Test Runner, use the [browserContext.tracing](api/class-browsercontext#browser-context-tracing) API instead.\n\n## Opening the trace[​](#opening-the-trace \"Direct link to Opening the trace\")\n\nYou can open the saved trace using the Playwright CLI or in your browser on [`trace.playwright.dev`](https://trace.playwright.dev). Make sure to add the full path to where your `trace.zip` file is located.\n\n``` javascript\nnpx playwright show-trace path/to/trace.zip\n```\n\n## Using [trace.playwright.dev](https://trace.playwright.dev)[​](#using-traceplaywrightdev \"Direct link to using-traceplaywrightdev\")\n\n[trace.playwright.dev](https://trace.playwright.dev) is a statically hosted variant of the Trace Viewer. You can upload trace files using drag and drop.\n\n## Viewing remote traces[​](#viewing-remote-traces \"Direct link to Viewing remote traces\")\n\nYou can open remote traces using its URL. They could be generated on a CI run which makes it easy to view the remote trace without having to manually download the file.\n\n``` javascript\nnpx playwright show-trace https://example.com/trace.zip\n```\n\nYou can also pass the URL of your uploaded trace (e.g. inside your CI) from some accessible storage as a parameter. CORS (Cross-Origin Resource Sharing) rules might apply.\n\n``` javascript\nhttps://trace.playwright.dev/?trace=https://demo.playwright.dev/reports/todomvc/data/cb0fa77ebd9487a5c899f3ae65a7ffdbac681182.zip\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/trace-viewer](https://playwright.dev/docs/trace-viewer)"
- name: Trace viewer
  id: trace-viewer-intro
  summary: Playwright Trace Viewer is a GUI tool that lets you explore recorded Playwright traces of your tests meaning you can go back and forward through each action of your test and visually see what was happening during each action
  description: "# Trace viewer\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright Trace Viewer is a GUI tool that lets you explore recorded Playwright traces of your tests meaning you can go back and forward through each action of your test and visually see what was happening during each action.\n\n**You will learn**\n\n- [How to record a trace](trace-viewer-intro#recording-a-trace)\n- [How to open the HTML report](trace-viewer-intro#opening-the-html-report)\n- [How to open and view the trace](trace-viewer-intro#opening-the-trace)\n\n## Recording a Trace[​](#recording-a-trace \"Direct link to Recording a Trace\")\n\nBy default the [playwright.config](trace-viewer#recording-a-trace-on-ci) file will contain the configuration needed to create a `trace.zip` file for each test. Traces are setup to run `on-first-retry` meaning they will be run on the first retry of a failed test. Also `retries` are set to 2 when running on CI and 0 locally. This means the traces will be recorded on the first retry of a failed test but not on the first run and not on the second retry.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  retries: process.env.CI ? 2 : 0, // set to 2 when running on CI\n  // ...\n  use: {\n    trace: 'on-first-retry', // record traces on first retry of each test\n  },\n});\n```\n\nTo learn more about available options to record a trace check out our detailed guide on [Trace Viewer](trace-viewer).\n\nTraces are normally run in a Continuous Integration(CI) environment, because locally you can use [UI Mode](test-ui-mode) for developing and debugging tests. However, if you want to run traces locally without using [UI Mode](test-ui-mode), you can force tracing to be on with `--trace on`.\n\n``` javascript\nnpx playwright test --trace on\n```\n\n## Opening the HTML report[​](#opening-the-html-report \"Direct link to Opening the HTML report\")\n\nThe HTML report shows you a report of all your tests that have been ran and on which browsers as well as how long they took. Tests can be filtered by passed tests, failed, flakey or skipped tests. You can also search for a particular test. Clicking on a test will open the detailed view where you can see more information on your tests such as the errors, the test steps and the trace.\n\n``` javascript\nnpx playwright show-report\n```\n\n## Opening the trace[​](#opening-the-trace \"Direct link to Opening the trace\")\n\nIn the HTML report click on the trace icon next to the test name file name to directly open the trace for the required test.\n\nYou can also click open the detailed view of the test and scroll down to the `'Traces'` tab and open the trace by clicking on the trace screenshot.\n\nTo learn more about reporters check out our detailed guide on reporters including the [HTML Reporter](test-reporters#html-reporter).\n\n## Viewing the trace[​](#viewing-the-trace \"Direct link to Viewing the trace\")\n\nView traces of your test by clicking through each action or hovering using the timeline and see the state of the page before and after the action. Inspect the log, source and network, errors and console during each step of the test. The trace viewer creates a DOM snapshot so you can fully interact with it and open the browser DevTools to inspect the HTML, CSS, etc.\n\nTo learn more about traces check out our detailed guide on [Trace Viewer](trace-viewer).\n\n## What's next[​](#whats-next \"Direct link to What's next\")\n\n- [Run tests on CI with GitHub Actions](ci-intro)\n- [Learn more about Trace Viewer](trace-viewer)\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/trace-viewer-intro](https://playwright.dev/docs/trace-viewer-intro)"
- name: Tracing
  id: api/class-tracing
  summary: API for collecting and saving Playwright traces
  description: "# Tracing\n\nAPI for collecting and saving Playwright traces. Playwright traces can be opened in [Trace Viewer](../trace-viewer) after Playwright script runs.\n\nStart recording a trace before performing actions. At the end, stop tracing and save it to a file.\n\n``` javascript\nconst browser = await chromium.launch();\nconst context = await browser.newContext();\nawait context.tracing.start({ screenshots: true, snapshots: true });\nconst page = await context.newPage();\nawait page.goto('https://playwright.dev');\nawait context.tracing.stop({ path: 'trace.zip' });\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### start[​](#tracing-start \"Direct link to start\")\n\nStart tracing.\n\n**Usage**\n\n``` javascript\nawait context.tracing.start({ screenshots: true, snapshots: true });\nconst page = await context.newPage();\nawait page.goto('https://playwright.dev');\nawait context.tracing.stop({ path: 'trace.zip' });\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    If specified, intermediate trace files are going to be saved into the files with the given name prefix inside the `tracesDir` folder specified in [browserType.launch()](class-browsertype#browser-type-launch). To specify the final trace zip file name, you need to pass `path` option to [tracing.stop()](class-tracing#tracing-stop) instead.\n\n  - `screenshots` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to capture screenshots during tracing. Screenshots are used to build a timeline preview.\n\n  - `snapshots` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    If this option is true tracing will\n\n    - capture DOM snapshot on every action\n    - record network activity\n\n  - `sources` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\") *(optional)*\n\n    Whether to include source files for trace actions.\n\n  - `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Trace name to be shown in the Trace Viewer.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### startChunk[​](#tracing-start-chunk \"Direct link to startChunk\")\n\nStart a new trace chunk. If you'd like to record multiple traces on the same [BrowserContext](class-browsercontext \"BrowserContext\"), use [tracing.start()](class-tracing#tracing-start) once, and then create multiple trace chunks with [tracing.startChunk()](class-tracing#tracing-start-chunk) and [tracing.stopChunk()](class-tracing#tracing-stop-chunk).\n\n**Usage**\n\n``` javascript\nawait context.tracing.start({ screenshots: true, snapshots: true });\nconst page = await context.newPage();\nawait page.goto('https://playwright.dev');\n\nawait context.tracing.startChunk();\nawait page.getByText('Get Started').click();\n// Everything between startChunk and stopChunk will be recorded in the trace.\nawait context.tracing.stopChunk({ path: 'trace1.zip' });\n\nawait context.tracing.startChunk();\nawait page.goto('http://example.com');\n// Save a second trace file with different actions.\nawait context.tracing.stopChunk({ path: 'trace2.zip' });\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    If specified, intermediate trace files are going to be saved into the files with the given name prefix inside the `tracesDir` folder specified in [browserType.launch()](class-browsertype#browser-type-launch). To specify the final trace zip file name, you need to pass `path` option to [tracing.stopChunk()](class-tracing#tracing-stop-chunk) instead.\n\n  - `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Trace name to be shown in the Trace Viewer.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### stop[​](#tracing-stop \"Direct link to stop\")\n\nStop tracing.\n\n**Usage**\n\n``` javascript\nawait tracing.stop();\nawait tracing.stop(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Export trace into the file with the given path.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### stopChunk[​](#tracing-stop-chunk \"Direct link to stopChunk\")\n\nStop the trace chunk. See [tracing.startChunk()](class-tracing#tracing-start-chunk) for more details about multiple trace chunks.\n\n**Usage**\n\n``` javascript\nawait tracing.stopChunk();\nawait tracing.stopChunk(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Export trace collected since the last [tracing.startChunk()](class-tracing#tracing-start-chunk) call into the file with the given path.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-tracing](https://playwright.dev/docs/api/class-tracing)"
- name: tracing.start
  id: api/class-tracing#tracing-start
  summary: Start tracing
  belongs_to: Tracing
  description: |-
    ### start[​](#tracing-start "Direct link to start")

    Start tracing.

    **Usage**

    ``` javascript
    await context.tracing.start({ screenshots: true, snapshots: true });
    const page = await context.newPage();
    await page.goto('https://playwright.dev');
    await context.tracing.stop({ path: 'trace.zip' });
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        If specified, intermediate trace files are going to be saved into the files with the given name prefix inside the `tracesDir` folder specified in [browserType.launch()](class-browsertype#browser-type-launch). To specify the final trace zip file name, you need to pass `path` option to [tracing.stop()](class-tracing#tracing-stop) instead.

      - `screenshots` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to capture screenshots during tracing. Screenshots are used to build a timeline preview.

      - `snapshots` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        If this option is true tracing will

        - capture DOM snapshot on every action
        - record network activity

      - `sources` [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean") *(optional)*

        Whether to include source files for trace actions.

      - `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Trace name to be shown in the Trace Viewer.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>
- name: tracing.startChunk
  id: api/class-tracing#tracing-start-chunk
  summary: Start a new trace chunk
  belongs_to: Tracing
  description: |-
    ### startChunk[​](#tracing-start-chunk "Direct link to startChunk")

    Start a new trace chunk. If you'd like to record multiple traces on the same [BrowserContext](class-browsercontext "BrowserContext"), use [tracing.start()](class-tracing#tracing-start) once, and then create multiple trace chunks with [tracing.startChunk()](class-tracing#tracing-start-chunk) and [tracing.stopChunk()](class-tracing#tracing-stop-chunk).

    **Usage**

    ``` javascript
    await context.tracing.start({ screenshots: true, snapshots: true });
    const page = await context.newPage();
    await page.goto('https://playwright.dev');

    await context.tracing.startChunk();
    await page.getByText('Get Started').click();
    // Everything between startChunk and stopChunk will be recorded in the trace.
    await context.tracing.stopChunk({ path: 'trace1.zip' });

    await context.tracing.startChunk();
    await page.goto('http://example.com');
    // Save a second trace file with different actions.
    await context.tracing.stopChunk({ path: 'trace2.zip' });
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `name` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        If specified, intermediate trace files are going to be saved into the files with the given name prefix inside the `tracesDir` folder specified in [browserType.launch()](class-browsertype#browser-type-launch). To specify the final trace zip file name, you need to pass `path` option to [tracing.stopChunk()](class-tracing#tracing-stop-chunk) instead.

      - `title` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Trace name to be shown in the Trace Viewer.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: tracing.stop
  id: api/class-tracing#tracing-stop
  summary: Stop tracing
  belongs_to: Tracing
  description: |-
    ### stop[​](#tracing-stop "Direct link to stop")

    Stop tracing.

    **Usage**

    ``` javascript
    await tracing.stop();
    await tracing.stop(options);
    ```

    **Arguments**

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*
      - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") *(optional)*

        Export trace into the file with the given path.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>

    &nbsp;
- name: tracing.stopChunk
  id: api/class-tracing#tracing-stop-chunk
  summary: Stop the trace chunk
  belongs_to: Tracing
  description: "### stopChunk[​](#tracing-stop-chunk \"Direct link to stopChunk\")\n\nStop the trace chunk. See [tracing.startChunk()](class-tracing#tracing-start-chunk) for more details about multiple trace chunks.\n\n**Usage**\n\n``` javascript\nawait tracing.stopChunk();\nawait tracing.stopChunk(options);\n```\n\n**Arguments**\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n  - `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") *(optional)*\n\n    Export trace collected since the last [tracing.startChunk()](class-tracing#tracing-start-chunk) call into the file with the given path.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-tracing](https://playwright.dev/docs/api/class-tracing)"
- name: TypeScript
  id: test-typescript
  summary: Playwright supports TypeScript out of the box
  description: "# TypeScript\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright supports TypeScript out of the box. You just write tests in TypeScript, and Playwright will read them, transform to JavaScript and run. Note that Playwright does not check the types and will run tests even if there are non-critical TypeScript compilation errors.\n\nWe recommend you run TypeScript compiler alongside Playwright. For example on GitHub actions:\n\n``` javascript\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    ...\n    - name: Run type checks\n      run: npx tsc -p tsconfig.json --noEmit\n    - name: Run Playwright tests\n      run: npx playwright test\n```\n\nFor local development, you can run `tsc` in [watch](https://www.typescriptlang.org/docs/handbook/configuring-watch.html) mode like this:\n\n``` javascript\nnpx tsc -p tsconfig.json --noEmit -w\n```\n\n## tsconfig.json[​](#tsconfigjson \"Direct link to tsconfig.json\")\n\nPlaywright will pick up `tsconfig.json` for each source file it loads. Note that Playwright **only supports** the following tsconfig options: `paths` and `baseUrl`.\n\nWe recommend setting up a separate `tsconfig.json` in the tests directory so that you can change some preferences specifically for the tests. Here is an example directory structure.\n\n``` javascript\nsrc/\n    source.ts\n\ntests/\n    tsconfig.json  # test-specific tsconfig\n    example.spec.ts\n\ntsconfig.json  # generic tsconfig for all typescript sources\n\nplaywright.config.ts\n```\n\n### tsconfig path mapping[​](#tsconfig-path-mapping \"Direct link to tsconfig path mapping\")\n\nPlaywright supports [path mapping](https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping) declared in the `tsconfig.json`. Make sure that `baseUrl` is also set.\n\nHere is an example `tsconfig.json` that works with Playwright Test:\n\n``` javascript\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\", // This must be specified if \"paths\" is.\n    \"paths\": {\n      \"@myhelper/*\": [\"packages/myhelper/*\"] // This mapping is relative to \"baseUrl\".\n    }\n  }\n}\n```\n\nYou can now import using the mapped paths:\n\n``` javascript\nimport { test, expect } from '@playwright/test';\nimport { username, password } from '@myhelper/credentials';\n\ntest('example', async ({ page }) => {\n  await page.getByLabel('User Name').fill(username);\n  await page.getByLabel('Password').fill(password);\n});\n```\n\n## Manually compile tests with TypeScript[​](#manually-compile-tests-with-typescript \"Direct link to Manually compile tests with TypeScript\")\n\nSometimes, Playwright Test will not be able to transform your TypeScript code correctly, for example when you are using experimental or very recent features of TypeScript, usually configured in `tsconfig.json`.\n\nIn this case, you can perform your own TypeScript compilation before sending the tests to Playwright.\n\nFirst add a `tsconfig.json` file inside the tests directory:\n\n``` javascript\n{\n    \"compilerOptions\": {\n        \"target\": \"ESNext\",\n        \"module\": \"commonjs\",\n        \"moduleResolution\": \"Node\",\n        \"sourceMap\": true,\n        \"outDir\": \"../tests-out\",\n    }\n}\n```\n\nIn `package.json`, add two scripts:\n\n``` javascript\n{\n  \"scripts\": {\n    \"pretest\": \"tsc --incremental -p tests/tsconfig.json\",\n    \"test\": \"playwright test -c tests-out\"\n  }\n}\n```\n\nThe `pretest` script runs typescript on the tests. `test` will run the tests that have been generated to the `tests-out` directory. The `-c` argument configures the test runner to look for tests inside the `tests-out` directory.\n\nThen `npm run test` will build the tests and run them.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/test-typescript](https://playwright.dev/docs/test-typescript)"
- name: UI Mode
  id: test-ui-mode
  summary: UI Mode lets you explore, run and debug tests with a time travel experience complete with watch mode
  description: "# UI Mode\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nUI Mode lets you explore, run and debug tests with a time travel experience complete with watch mode. All test files are loaded into the testing sidebar where you can expand each file and describe block to individually run, view, watch and debug each test. Filter tests by **text** or **@tag** or by **passed**, **failed** and **skipped** tests as well as by [**projects**](test-projects) as set in your `playwright.config` file. See a full trace of your tests and hover back and forward over each action to see what was happening during each step and pop out the DOM snapshot to a separate window for a better debugging experience.\n\n## Opening UI Mode[​](#opening-ui-mode \"Direct link to Opening UI Mode\")\n\nTo open UI mode, run the following command in your terminal:\n\n``` javascript\nnpx playwright test --ui\n```\n\n## Running your tests[​](#running-your-tests \"Direct link to Running your tests\")\n\nOnce you launch UI Mode you will see a list of all your test files. You can run all your tests by clicking the triangle icon in the sidebar. You can also run a single test file, a block of tests or a single test by hovering over the name and clicking on the triangle next to it.\n\n## Filtering tests[​](#filtering-tests \"Direct link to Filtering tests\")\n\nFilter tests by text or `@tag` or by passed, failed or skipped tests. You can also filter by [projects](test-projects) as set in your `playwright.config` file. If you are using project dependencies make sure to run your setup tests first before running the tests that depend on them. The UI mode will not take into consideration the setup tests and therefore you will have to manually run them first.\n\n## Timeline view[​](#timeline-view \"Direct link to Timeline view\")\n\nAt the top of the trace you can see a timeline view of your test with different colors to highlight navigation and actions. Hover back and forth to see an image snapshot for each action. Double click on an action to see the time range for that action. You can use the slider in the timeline to increase the actions selected and these will be shown in the Actions tab and all console logs and network logs will be filtered to only show the logs for the actions selected.\n\n## Actions[​](#actions \"Direct link to Actions\")\n\nIn the Actions tab you can see what locator was used for every action and how long each one took to run. Hover over each action of your test and visually see the change in the DOM snapshot. Go back and forward in time and click an action to inspect and debug. Use the Before and After tabs to visually see what happened before and after the action.\n\n## Pop out and inspect the DOM[​](#pop-out-and-inspect-the-dom \"Direct link to Pop out and inspect the DOM\")\n\nPop out the DOM snapshot into its own window for a better debugging experience by clicking on the pop out icon above the DOM snapshot. From there you can open the browser DevTools and inspect the HTML, CSS, Console etc. Go back to UI Mode and click on another action and pop that one out to easily compare the two side by side or debug each individually.\n\n## Pick locator[​](#pick-locator \"Direct link to Pick locator\")\n\nClick on the pick locator button and hover over the DOM snapshot to see the locator for each element highlighted as you hover. Click on an element to add the locator playground. You can modify the locator in the playground and see if your modified locator matches any locators in the DOM snapshot. Once you are satisfied with the locator you can use the copy button to copy the locator and paste it into your test.\n\n## Source[​](#source \"Direct link to Source\")\n\nAs you hover over each action of your test the line of code for that action is highlighted in the source panel.\n\n## Call[​](#call \"Direct link to Call\")\n\nThe call tab shows you information about the action such as the time it took, what locator was used, if in strict mode and what key was used.\n\n## Log[​](#log \"Direct link to Log\")\n\nSee a full log of your test to better understand what Playwright is doing behind the scenes such as scrolling into view, waiting for element to be visible, enabled and stable and performing actions such as click, fill, press etc.\n\n## Errors[​](#errors \"Direct link to Errors\")\n\nIf your test fails you will see the error messages for each test in the Errors tab. The timeline will also show a red line highlighting where the error occurred. You can also click on the source tab to see on which line of the source code the error is.\n\n## Console[​](#console \"Direct link to Console\")\n\nSee console logs from the browser as well as from your test. Different icons are displayed to show you if the console log came from the browser or from the test file.\n\n## Network[​](#network \"Direct link to Network\")\n\nThe Network tab shows you all the network requests that were made during your test. You can sort by different types of requests, status code, method, request, content type, duration and size. Click on a request to see more information about it such as the request headers, response headers, request body and response body.\n\n## Attachments[​](#attachments \"Direct link to Attachments\")\n\nThe \"Attachments\" tab allows you to explore attachments. If you're doing [visual regression testing](test-snapshots), you'll be able to compare screenshots by examining the image diff, the actual image and the expected image. When you click on the expected image you can use the slider to slide one image over the other so you can easily see the differences in your screenshots.\n\n## Metadata[​](#metadata \"Direct link to Metadata\")\n\nNext to the Actions tab you will find the Metadata tab which will show you more information on your test such as the Browser, viewport size, test duration and more.\n\n## Watch mode[​](#watch-mode \"Direct link to Watch mode\")\n\nNext to the name of each test in the sidebar you will find an eye icon. Clicking on the icon will activate watch mode which will re-run the test when you make changes to it. You can watch a number of tests at the same time be clicking the eye icon next to each one or all tests by clicking the eye icon at the top of the sidebar. If you are using VS Code then you can easily open your test by clicking on the file icon next to the eye icon. This will open your test in VS Code right at the line of code that you clicked on.\n\n## Docker & GitHub Codespaces[​](#docker--github-codespaces \"Direct link to Docker & GitHub Codespaces\")\n\nFor Docker and GitHub Codespaces environments, you can run UI mode in the browser. In order for an endpoint to be accessible outside of the container, it needs to be bound to the `0.0.0.0` interface:\n\n``` javascript\nnpx playwright test --ui-host=0.0.0.0\n```\n\nIn the case of GitHub Codespaces, the port gets [forwarded automatically](https://docs.github.com/en/codespaces/developing-in-codespaces/forwarding-ports-in-your-codespace#about-forwarded-ports), so you can open UI mode in the browser by clicking on the link in the terminal.\n\nTo have a static port, you can pass the `--ui-port` flag:\n\n``` javascript\nnpx playwright test --ui-port=8080 --ui-host=0.0.0.0\n```\n\n> note\n>\n> Be aware that when specifying the `--ui-host=0.0.0.0` flag, UI Mode with your traces, the passwords and secrets is accessible from other machines inside your network. In the case of GitHub Codespaces, the ports are only accessible from your account by default.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/test-ui-mode](https://playwright.dev/docs/test-ui-mode)"
- name: Video
  id: api/class-video
  summary: When browser context is created with the recordVideo option, each page has a video object associated with it
  description: "# Video\n\nWhen browser context is created with the `recordVideo` option, each page has a video object associated with it.\n\n``` javascript\nconsole.log(await page.video().path());\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### delete[​](#video-delete \"Direct link to delete\")\n\nDeletes the video file. Will wait for the video to finish if necessary.\n\n**Usage**\n\n``` javascript\nawait video.delete();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n### path[​](#video-path \"Direct link to path\")\n\nAdded before v1.9\n\nReturns the file system path this video will be recorded to. The video is guaranteed to be written to the filesystem upon closing the browser context. This method throws when connected remotely.\n\n**Usage**\n\n``` javascript\nawait video.path();\n```\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\\>\n\n### saveAs[​](#video-save-as \"Direct link to saveAs\")\n\nSaves the video to a user-specified path. It is safe to call this method while the video is still in progress, or after the page has closed. This method waits until the page is closed and the video is fully saved.\n\n**Usage**\n\n``` javascript\nawait video.saveAs(path);\n```\n\n**Arguments**\n\n- `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Path where the video should be saved.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-video](https://playwright.dev/docs/api/class-video)"
- name: video.delete
  id: api/class-video#video-delete
  summary: Deletes the video file
  belongs_to: Video
  description: |-
    ### delete[​](#video-delete "Direct link to delete")

    Deletes the video file. Will wait for the video to finish if necessary.

    **Usage**

    ``` javascript
    await video.delete();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined "void")\>
- name: video.path
  id: api/class-video#video-path
  summary: Returns the file system path this video will be recorded to
  belongs_to: Video
  description: |-
    ### path[​](#video-path "Direct link to path")

    Added before v1.9

    Returns the file system path this video will be recorded to. The video is guaranteed to be written to the filesystem upon closing the browser context. This method throws when connected remotely.

    **Usage**

    ``` javascript
    await video.path();
    ```

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")\>

    &nbsp;
- name: video.saveAs
  id: api/class-video#video-save-as
  summary: Saves the video to a user-specified path
  belongs_to: Video
  description: "### saveAs[​](#video-save-as \"Direct link to saveAs\")\n\nSaves the video to a user-specified path. It is safe to call this method while the video is still in progress, or after the page has closed. This method waits until the page is closed and the video is fully saved.\n\n**Usage**\n\n``` javascript\nawait video.saveAs(path);\n```\n\n**Arguments**\n\n- `path` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Path where the video should be saved.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined \"void\")\\>\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-video](https://playwright.dev/docs/api/class-video)"
- name: Videos
  id: videos
  summary: With Playwright you can record videos for your tests
  description: "# Videos\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nWith Playwright you can record videos for your tests.\n\n## Record video[​](#record-video \"Direct link to Record video\")\n\nPlaywright Test can record videos for your tests, controlled by the `video` option in your Playwright config. By default videos are off.\n\n- `'off'` - Do not record video.\n- `'on'` - Record video for each test.\n- `'retain-on-failure'` - Record video for each test, but remove all videos from successful test runs.\n- `'on-first-retry'` - Record video only when retrying a test for the first time.\n\nVideo files will appear in the test output directory, typically `test-results`. See [testOptions.video](api/class-testoptions#test-options-video) for advanced video configuration.\n\nVideos are saved upon [browser context](browser-contexts) closure at the end of a test. If you create a browser context manually, make sure to await [browserContext.close()](api/class-browsercontext#browser-context-close).\n\n- Test\n- Library\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    video: 'on-first-retry',\n  },\n});\n```\n\n``` javascript\nconst context = await browser.newContext({ recordVideo: { dir: 'videos/' } });\n// Make sure to await close, so that videos are saved.\nawait context.close();\n```\n\nYou can also specify video size. The video size defaults to the viewport size scaled down to fit 800x800. The video of the viewport is placed in the top-left corner of the output video, scaled down to fit if necessary. You may need to set the viewport size to match your desired video size.\n\n- Test\n- Library\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    video: {\n      mode: 'on-first-retry',\n      size: { width: 640, height: 480 }\n    }\n  },\n});\n```\n\n``` javascript\nconst context = await browser.newContext({\n  recordVideo: {\n    dir: 'videos/',\n    size: { width: 640, height: 480 },\n  }\n});\n```\n\nFor multi-page scenarios, you can access the video file associated with the page via the [page.video()](api/class-page#page-video).\n\n``` javascript\nconst path = await page.video().path();\n```\n\n> note\n>\n> Note that the video is only available after the page or browser context is closed.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/videos](https://playwright.dev/docs/videos)"
- name: Visual comparisons
  id: test-snapshots
  summary: Playwright Test includes the ability to produce and visually compare screenshots using await expect(page).toHaveScreenshot()
  description: "# Visual comparisons\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright Test includes the ability to produce and visually compare screenshots using `await expect(page).toHaveScreenshot()`. On first execution, Playwright test will generate reference screenshots. Subsequent runs will compare against the reference.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('example test', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n  await expect(page).toHaveScreenshot();\n});\n```\n\n## Generating screenshots[​](#generating-screenshots \"Direct link to Generating screenshots\")\n\nWhen you run above for the first time, test runner will say:\n\n``` javascript\nError: A snapshot doesn't exist at example.spec.ts-snapshots/example-test-1-chromium-darwin.png, writing actual.\n```\n\nThat's because there was no golden file yet. This method took a bunch of screenshots until two consecutive screenshots matched, and saved the last screenshot to file system. It is now ready to be added to the repository.\n\nThe name of the folder with the golden expectations starts with the name of your test file:\n\n``` javascript\ndrwxr-xr-x  5 user  group  160 Jun  4 11:46 .\ndrwxr-xr-x  6 user  group  192 Jun  4 11:45 ..\n-rw-r--r--  1 user  group  231 Jun  4 11:16 example.spec.ts\ndrwxr-xr-x  3 user  group   96 Jun  4 11:46 example.spec.ts-snapshots\n```\n\nThe snapshot name `example-test-1-chromium-darwin.png` consists of a few parts:\n\n- `example-test-1.png` - an auto-generated name of the snapshot. Alternatively you can specify snapshot name as the first argument of the `toHaveScreenshot()` method:\n\n  ``` javascript\n  await expect(page).toHaveScreenshot('landing.png');\n  ```\n\n- `chromium-darwin` - the browser name and the platform. Screenshots differ between browsers and platforms due to different rendering, fonts and more, so you will need different snapshots for them. If you use multiple projects in your [configuration file](test-configuration), project name will be used instead of `chromium`.\n\nThe snapshot name and path can be configured with [`snapshotPathTemplate`](api/class-testproject#test-project-snapshot-path-template) in the playwright config.\n\n## Updating screenshots[​](#updating-screenshots \"Direct link to Updating screenshots\")\n\nSometimes you need to update the reference screenshot, for example when the page has changed. Do this with the `--update-snapshots` flag.\n\n``` javascript\nnpx playwright test --update-snapshots\n```\n\n> Note that `snapshotName` also accepts an array of path segments to the snapshot file such as `expect().toHaveScreenshot(['relative', 'path', 'to', 'snapshot.png'])`. However, this path must stay within the snapshots directory for each test file (i.e. `a.spec.js-snapshots`), otherwise it will throw.\n\n## Options[​](#options \"Direct link to Options\")\n\n### maxDiffPixels[​](#maxdiffpixels \"Direct link to maxDiffPixels\")\n\nPlaywright Test uses the [pixelmatch](https://github.com/mapbox/pixelmatch) library. You can [pass various options](api/class-pageassertions#page-assertions-to-have-screenshot-1) to modify its behavior:\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('example test', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n  await expect(page).toHaveScreenshot({ maxDiffPixels: 100 });\n});\n```\n\nIf you'd like to share the default value among all the tests in the project, you can specify it in the playwright config, either globally or per project:\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  expect: {\n    toHaveScreenshot: { maxDiffPixels: 100 },\n  },\n});\n```\n\n### stylePath[​](#stylepath \"Direct link to stylePath\")\n\nYou can apply a custom stylesheet to your page while taking screenshot. This allows filtering out dynamic or volatile elements, hence improving the screenshot determinism.\n\n``` javascript\niframe {\n  visibility: hidden;\n}\n```\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('example test', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n  await expect(page).toHaveScreenshot({ stylePath: path.join(__dirname, 'screenshot.css') });\n});\n```\n\nIf you'd like to share the default value among all the tests in the project, you can specify it in the playwright config, either globally or per project:\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  expect: {\n    toHaveScreenshot: {\n      stylePath: './screenshot.css'\n    },\n  },\n});\n```\n\n## Non-image snapshots[​](#non-image-snapshots \"Direct link to Non-image snapshots\")\n\nApart from screenshots, you can use `expect(value).toMatchSnapshot(snapshotName)` to compare text or arbitrary binary data. Playwright Test auto-detects the content type and uses the appropriate comparison algorithm.\n\nHere we compare text content against the reference.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('example test', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n  expect(await page.textContent('.hero__title')).toMatchSnapshot('hero.txt');\n});\n```\n\nSnapshots are stored next to the test file, in a separate directory. For example, `my.spec.ts` file will produce and store snapshots in the `my.spec.ts-snapshots` directory. You should commit this directory to your version control (e.g. `git`), and review any changes to it.\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/test-snapshots](https://playwright.dev/docs/test-snapshots)"
- name: Web server
  id: test-webserver
  summary: Playwright comes with a webserver option in the config file which gives you the ability to launch a local dev server before running your tests
  description: "# Web server\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright comes with a `webserver` option in the config file which gives you the ability to launch a local dev server before running your tests. This is ideal for when writing your tests during development and when you don't have a staging or production url to test against.\n\n## Configuring a web server[​](#configuring-a-web-server \"Direct link to Configuring a web server\")\n\nUse the `webserver` property in your Playwright config to launch a development web server during the tests.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Run your local dev server before starting the tests\n  webServer: {\n    command: 'npm run start',\n    url: 'http://127.0.0.1:3000',\n    reuseExistingServer: !process.env.CI,\n    stdout: 'ignore',\n    stderr: 'pipe',\n  },\n});\n```\n\n| Property                                                            | Description                                                                                                                                                                                                                                                                                                         |\n|:--------------------------------------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [testConfig.webServer](api/class-testconfig#test-config-web-server) | Launch a development web server (or multiple) during the tests.                                                                                                                                                                                                                                                     |\n| `command`                                                           | Shell command to start the local dev server of your app.                                                                                                                                                                                                                                                            |\n| `url`                                                               | URL of your http server that is expected to return a 2xx, 3xx, 400, 401, 402, or 403 status code when the server is ready to accept connections.                                                                                                                                                                    |\n| `reuseExistingServer`                                               | If `true`, it will re-use an existing server on the url when available. If no server is running on that url, it will run the command to start a new server. If `false`, it will throw if an existing process is listening on the url. To see the stdout, you can set the `DEBUG=pw:webserver` environment variable. |\n| `ignoreHTTPSErrors`                                                 | Whether to ignore HTTPS errors when fetching the `url`. Defaults to `false`.                                                                                                                                                                                                                                        |\n| `cwd`                                                               | Current working directory of the spawned process, defaults to the directory of the configuration file.                                                                                                                                                                                                              |\n| `stdout`                                                            | If `\"pipe\"`, it will pipe the stdout of the command to the process stdout. If `\"ignore\"`, it will ignore the stdout of the command. Default to `\"ignore\"`.                                                                                                                                                          |\n| `stderr`                                                            | Whether to pipe the stderr of the command to the process stderr or ignore it. Defaults to `\"pipe\"`.                                                                                                                                                                                                                 |\n| `timeout`                                                           | \\`How long to wait for the process to start up and be available in milliseconds. Defaults to 60000.                                                                                                                                                                                                                 |\n\n## Adding a server timeout[​](#adding-a-server-timeout \"Direct link to Adding a server timeout\")\n\nWebservers can sometimes take longer to boot up. In this case, you can increase the timeout to wait for the server to start.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Rest of your config...\n\n  // Run your local dev server before starting the tests\n  webServer: {\n    command: 'npm run start',\n    url: 'http://127.0.0.1:3000',\n    reuseExistingServer: !process.env.CI,\n    timeout: 120 * 1000,\n  },\n});\n```\n\n## Adding a baseURL[​](#adding-a-baseurl \"Direct link to Adding a baseURL\")\n\nIt is also recommended to specify the `baseURL` in the `use: {}` section of your config, so that tests can use relative urls and you don't have to specify the full URL over and over again.\n\nWhen using [page.goto()](api/class-page#page-goto), [page.route()](api/class-page#page-route), [page.waitForURL()](api/class-page#page-wait-for-url), [page.waitForRequest()](api/class-page#page-wait-for-request), or [page.waitForResponse()](api/class-page#page-wait-for-response) it takes the base URL in consideration by using the [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL. For Example, by setting the baseURL to `http://127.0.0.1:3000` and navigating to `/login` in your tests, Playwright will run the test using `http://127.0.0.1:3000/login`.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Rest of your config...\n\n  // Run your local dev server before starting the tests\n  webServer: {\n    command: 'npm run start',\n    url: 'http://127.0.0.1:3000',\n    reuseExistingServer: !process.env.CI,\n  },\n  use: {\n    baseURL: 'http://127.0.0.1:3000',\n  },\n});\n```\n\nNow you can use a relative path when navigating the page:\n\n``` javascript\nimport { test } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  // This will navigate to http://127.0.0.1:3000/login\n  await page.goto('./login');\n});\n```\n\n## Multiple web servers[​](#multiple-web-servers \"Direct link to Multiple web servers\")\n\nMultiple web servers (or background processes) can be launched simultaneously by providing an array of `webServer` configurations. See [testConfig.webServer](api/class-testconfig#test-config-web-server) for more info.\n\n``` javascript\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  webServer: [\n    {\n      command: 'npm run start',\n      url: 'http://127.0.0.1:3000',\n      timeout: 120 * 1000,\n      reuseExistingServer: !process.env.CI,\n    },\n    {\n      command: 'npm run backend',\n      url: 'http://127.0.0.1:3333',\n      timeout: 120 * 1000,\n      reuseExistingServer: !process.env.CI,\n    }\n  ],\n  use: {\n    baseURL: 'http://127.0.0.1:3000',\n  },\n});\n```\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/test-webserver](https://playwright.dev/docs/test-webserver)"
- name: WebError
  id: api/class-weberror
  summary: WebError class represents an unhandled exception thrown in the page
  description: "# WebError\n\n[WebError](class-weberror \"WebError\") class represents an unhandled exception thrown in the page. It is dispatched via the [browserContext.on('weberror')](class-browsercontext#browser-context-event-web-error) event.\n\n``` javascript\n// Log all uncaught errors to the terminal\ncontext.on('weberror', webError => {\n  console.log(`Uncaught exception: \"${webError.error()}\"`);\n});\n\n// Navigate to a page with an exception.\nawait page.goto('data:text/html,<script>throw new Error(\"Test\")</script>');\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### error[​](#web-error-error \"Direct link to error\")\n\nUnhandled error that was thrown.\n\n**Usage**\n\n``` javascript\nwebError.error();\n```\n\n**Returns**\n\n- [Error](https://nodejs.org/api/errors.html#errors_class_error \"Error\")\n\n### page[​](#web-error-page \"Direct link to page\")\n\nThe page that produced this unhandled exception, if any.\n\n**Usage**\n\n``` javascript\nwebError.page();\n```\n\n**Returns**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Page](class-page \"Page\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-weberror](https://playwright.dev/docs/api/class-weberror)"
- name: webError.error
  id: api/class-weberror#web-error-error
  summary: Unhandled error that was thrown
  belongs_to: WebError
  description: |-
    ### error[​](#web-error-error "Direct link to error")

    Unhandled error that was thrown.

    **Usage**

    ``` javascript
    webError.error();
    ```

    **Returns**

    - [Error](https://nodejs.org/api/errors.html#errors_class_error "Error")
- name: webError.page
  id: api/class-weberror#web-error-page
  summary: The page that produced this unhandled exception, if any
  belongs_to: WebError
  description: "### page[​](#web-error-page \"Direct link to page\")\n\nThe page that produced this unhandled exception, if any.\n\n**Usage**\n\n``` javascript\nwebError.page();\n```\n\n**Returns**\n\n- [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null \"null\") \\| [Page](class-page \"Page\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-weberror](https://playwright.dev/docs/api/class-weberror)"
- name: WebSocket
  id: api/class-websocket
  summary: The WebSocket class represents websocket connections in the page
  description: "# WebSocket\n\nThe [WebSocket](class-websocket \"WebSocket\") class represents websocket connections in the page.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### isClosed[​](#web-socket-is-closed \"Direct link to isClosed\")\n\nAdded before v1.9\n\nIndicates that the web socket has been closed.\n\n**Usage**\n\n``` javascript\nwebSocket.isClosed();\n```\n\n**Returns**\n\n- [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\")\n\n### url[​](#web-socket-url \"Direct link to url\")\n\nAdded before v1.9\n\nContains the URL of the WebSocket.\n\n**Usage**\n\n``` javascript\nwebSocket.url();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n### waitForEvent[​](#web-socket-wait-for-event \"Direct link to waitForEvent\")\n\nAdded before v1.9\n\nWaits for event to fire and passes its value into the predicate function. Returns when the predicate returns truthy value. Will throw an error if the webSocket is closed before the event is fired. Returns the event data value.\n\n**Usage**\n\n``` javascript\nawait webSocket.waitForEvent(event);\nawait webSocket.waitForEvent(event, optionsOrPredicate, options);\n```\n\n**Arguments**\n\n- `event` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Event name, same one would pass into `webSocket.on(event)`.\n\n- `optionsOrPredicate` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\") \\| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `predicate` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\")\n\n    Receives the event data and resolves to truthy value when the waiting should resolve.\n\n  - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\") *(optional)*\n\n    Maximum time to wait for in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.\n\n  Either a predicate that receives an event or an options object. Optional.\n\n- `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\") *(optional)*\n\n  - `predicate` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\") *(optional)*\n\n    Receives the event data and resolves to truthy value when the waiting should resolve.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\\>\n\n## Events[​](#events \"Direct link to Events\")\n\n### on('close')[​](#web-socket-event-close \"Direct link to on('close')\")\n\nAdded before v1.9\n\nFired when the websocket closes.\n\n**Usage**\n\n``` javascript\nwebSocket.on('close', data => {});\n```\n\n**Event data**\n\n- [WebSocket](class-websocket \"WebSocket\")\n\n### on('framereceived')[​](#web-socket-event-frame-received \"Direct link to on('framereceived')\")\n\nFired when the websocket receives a frame.\n\n**Usage**\n\n``` javascript\nwebSocket.on('framereceived', data => {});\n```\n\n**Event data**\n\n- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `payload` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\n\n    frame payload\n\n### on('framesent')[​](#web-socket-event-frame-sent \"Direct link to on('framesent')\")\n\nFired when the websocket sends a frame.\n\n**Usage**\n\n``` javascript\nwebSocket.on('framesent', data => {});\n```\n\n**Event data**\n\n- [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\")\n  - `payload` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\") \\| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\")\n\n    frame payload\n\n### on('socketerror')[​](#web-socket-event-socket-error \"Direct link to on('socketerror')\")\n\nFired when the websocket has an error.\n\n**Usage**\n\n``` javascript\nwebSocket.on('socketerror', data => {});\n```\n\n**Event data**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-websocket](https://playwright.dev/docs/api/class-websocket)"
- name: webSocket.isClosed
  id: api/class-websocket#web-socket-is-closed
  summary: Indicates that the web socket has been closed
  belongs_to: WebSocket
  description: |-
    ### isClosed[​](#web-socket-is-closed "Direct link to isClosed")

    Added before v1.9

    Indicates that the web socket has been closed.

    **Usage**

    ``` javascript
    webSocket.isClosed();
    ```

    **Returns**

    - [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type "Boolean")
- name: webSocket.on('close')
  id: api/class-websocket#web-socket-event-close
  summary: Fired when the websocket closes
  belongs_to: WebSocket
  description: |-
    ### on('close')[​](#web-socket-event-close "Direct link to on('close')")

    Added before v1.9

    Fired when the websocket closes.

    **Usage**

    ``` javascript
    webSocket.on('close', data => {});
    ```

    **Event data**

    - [WebSocket](class-websocket "WebSocket")

    &nbsp;
- name: webSocket.on('framereceived')
  id: api/class-websocket#web-socket-event-frame-received
  summary: Fired when the websocket receives a frame
  belongs_to: WebSocket
  description: |-
    ### on('framereceived')[​](#web-socket-event-frame-received "Direct link to on('framereceived')")

    Fired when the websocket receives a frame.

    **Usage**

    ``` javascript
    webSocket.on('framereceived', data => {});
    ```

    **Event data**

    - [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")
      - `payload`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")

        frame payload

    &nbsp;
- name: webSocket.on('framesent')
  id: api/class-websocket#web-socket-event-frame-sent
  summary: Fired when the websocket sends a frame
  belongs_to: WebSocket
  description: |-
    ### on('framesent')[​](#web-socket-event-frame-sent "Direct link to on('framesent')")

    Fired when the websocket sends a frame.

    **Usage**

    ``` javascript
    webSocket.on('framesent', data => {});
    ```

    **Event data**

    - [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")
      - `payload`[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string") \| [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer "Buffer")

        frame payload

    &nbsp;
- name: webSocket.on('socketerror')
  id: api/class-websocket#web-socket-event-socket-error
  summary: Fired when the websocket has an error
  belongs_to: WebSocket
  description: "### on('socketerror')[​](#web-socket-event-socket-error \"Direct link to on('socketerror')\")\n\nFired when the websocket has an error.\n\n**Usage**\n\n``` javascript\nwebSocket.on('socketerror', data => {});\n```\n\n**Event data**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-websocket](https://playwright.dev/docs/api/class-websocket)"
- name: webSocket.url
  id: api/class-websocket#web-socket-url
  summary: Contains the URL of the WebSocket
  belongs_to: WebSocket
  description: |-
    ### url[​](#web-socket-url "Direct link to url")

    Added before v1.9

    Contains the URL of the WebSocket.

    **Usage**

    ``` javascript
    webSocket.url();
    ```

    **Returns**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    &nbsp;
- name: webSocket.waitForEvent
  id: api/class-websocket#web-socket-wait-for-event
  summary: Waits for event to fire and passes its value into the predicate function
  belongs_to: WebSocket
  description: |-
    ### waitForEvent[​](#web-socket-wait-for-event "Direct link to waitForEvent")

    Added before v1.9

    Waits for event to fire and passes its value into the predicate function. Returns when the predicate returns truthy value. Will throw an error if the webSocket is closed before the event is fired. Returns the event data value.

    **Usage**

    ``` javascript
    await webSocket.waitForEvent(event);
    await webSocket.waitForEvent(event, optionsOrPredicate, options);
    ```

    **Arguments**

    - `event` [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Event name, same one would pass into `webSocket.on(event)`.

    - `optionsOrPredicate`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function") \| [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `predicate` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function")

        Receives the event data and resolves to truthy value when the waiting should resolve.

      - `timeout` [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number") *(optional)*

        Maximum time to wait for in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout` option in the config, or by using the [browserContext.setDefaultTimeout()](class-browsercontext#browser-context-set-default-timeout) or [page.setDefaultTimeout()](class-page#page-set-default-timeout) methods.

      Either a predicate that receives an event or an options object. Optional.

    - `options` [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object") *(optional)*

      - `predicate` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function") *(optional)*

        Receives the event data and resolves to truthy value when the waiting should resolve.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object "Object")\>

    ## Events[​](#events "Direct link to Events")
- name: WebView2
  id: webview2
  summary: The following will explain how to use Playwright with Microsoft Edge WebView2
  description: "# WebView2\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nThe following will explain how to use Playwright with [Microsoft Edge WebView2](https://docs.microsoft.com/en-us/microsoft-edge/webview2/). WebView2 is a WinForms control, which will use Microsoft Edge under the hood to render web content. It is a part of the Microsoft Edge browser and is available on Windows 10 and Windows 11. Playwright can be used to automate WebView2 applications and can be used to test web content in WebView2. For connecting to WebView2, Playwright uses [browserType.connectOverCDP()](api/class-browsertype#browser-type-connect-over-cdp) which connects to it via the Chrome DevTools Protocol (CDP).\n\n## Overview[​](#overview \"Direct link to Overview\")\n\nA WebView2 control can be instructed to listen to incoming CDP connections by setting either the `WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS` environment variable with `--remote-debugging-port=9222` or calling [EnsureCoreWebView2Async](https://docs.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.wpf.webview2.ensurecorewebview2async?view=webview2-dotnet-1.0.1343.22) with the `--remote-debugging-port=9222` argument. This will start the WebView2 process with the Chrome DevTools Protocol enabled which allows the automation by Playwright. 9222 is an example port in this case, but any other unused port can be used as well.\n\n``` javascript\nawait this.webView.EnsureCoreWebView2Async(await CoreWebView2Environment.CreateAsync(null, null, new CoreWebView2EnvironmentOptions()\n{\n  AdditionalBrowserArguments = \"--remote-debugging-port=9222\",\n})).ConfigureAwait(false);\n```\n\nOnce your application with the WebView2 control is running, you can connect to it via Playwright:\n\n``` javascript\nconst browser = await playwright.chromium.connectOverCDP('http://localhost:9222');\nconst context = browser.contexts()[0];\nconst page = context.pages()[0];\n```\n\nTo ensure that the WebView2 control is ready, you can wait for the [`CoreWebView2InitializationCompleted`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.wpf.webview2.corewebview2initializationcompleted?view=webview2-dotnet-1.0.1343.22) event:\n\n``` javascript\nthis.webView.CoreWebView2InitializationCompleted += (_, e) =>\n{\n    if (e.IsSuccess)\n    {\n        Console.WriteLine(\"WebView2 initialized\");\n    }\n};\n```\n\n## Writing and running tests[​](#writing-and-running-tests \"Direct link to Writing and running tests\")\n\nBy default, the WebView2 control will use the same user data directory for all instances. This means that if you run multiple tests in parallel, they will interfere with each other. To avoid this, you should set the `WEBVIEW2_USER_DATA_FOLDER` environment variable (or use [WebView2.EnsureCoreWebView2Async Method](https://docs.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.wpf.webview2.ensurecorewebview2async?view=webview2-dotnet-1.0.1343.22)) to a different folder for each test. This will make sure that each test runs in its own user data directory.\n\nUsing the following, Playwright will run your WebView2 application as a sub-process, assign a unique user data directory to it and provide the [Page](api/class-page \"Page\") instance to your test:\n\n``` javascript\nimport { test as base } from '@playwright/test';\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport childProcess from 'child_process';\n\nconst EXECUTABLE_PATH = path.join(\n    __dirname,\n    '../../webview2-app/bin/Debug/net8.0-windows/webview2.exe',\n);\n\nexport const test = base.extend({\n  browser: async ({ playwright }, use, testInfo) => {\n    const cdpPort = 10000 + testInfo.workerIndex;\n    // Make sure that the executable exists and is executable\n    fs.accessSync(EXECUTABLE_PATH, fs.constants.X_OK);\n    const userDataDir = path.join(\n        fs.realpathSync.native(os.tmpdir()),\n        `playwright-webview2-tests/user-data-dir-${testInfo.workerIndex}`,\n    );\n    const webView2Process = childProcess.spawn(EXECUTABLE_PATH, [], {\n      shell: true,\n      env: {\n        ...process.env,\n        WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS: `--remote-debugging-port=${cdpPort}`,\n        WEBVIEW2_USER_DATA_FOLDER: userDataDir,\n      }\n    });\n    await new Promise<void>(resolve => webView2Process.stdout.on('data', data => {\n      if (data.toString().includes('WebView2 initialized'))\n        resolve();\n    }));\n    const browser = await playwright.chromium.connectOverCDP(`http://127.0.0.1:${cdpPort}`);\n    await use(browser);\n    await browser.close();\n    childProcess.execSync(`taskkill /pid ${webView2Process.pid} /T /F`);\n    fs.rmdirSync(userDataDir, { recursive: true });\n  },\n  context: async ({ browser }, use) => {\n    const context = browser.contexts()[0];\n    await use(context);\n  },\n  page: async ({ context }, use) => {\n    const page = context.pages()[0];\n    await use(page);\n  },\n});\n\nexport { expect } from '@playwright/test';\n```\n\n``` javascript\nimport { test, expect } from './webView2Test';\n\ntest('test WebView2', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n  const getStarted = page.getByText('Get Started');\n  await expect(getStarted).toBeVisible();\n});\n```\n\n## Debugging[​](#debugging \"Direct link to Debugging\")\n\nInside your webview2 control, you can just right-click to open the context menu and select \"Inspect\" to open the DevTools or press F12. You can also use the [WebView2.CoreWebView2.OpenDevToolsWindow](https://learn.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.core.corewebview2.opendevtoolswindow?view=webview2-dotnet-1.0.1462.37) method to open the DevTools programmatically.\n\nFor debugging tests, see the Playwright [Debugging guide](debug).\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/webview2](https://playwright.dev/docs/webview2)"
- name: Worker
  id: api/class-worker
  summary: The Worker class represents a WebWorker
  description: "# Worker\n\nThe Worker class represents a [WebWorker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API). `worker` event is emitted on the page object to signal a worker creation. `close` event is emitted on the worker object when the worker is gone.\n\n``` javascript\npage.on('worker', worker => {\n  console.log('Worker created: ' + worker.url());\n  worker.on('close', worker => console.log('Worker destroyed: ' + worker.url()));\n});\n\nconsole.log('Current workers:');\nfor (const worker of page.workers())\n  console.log('  ' + worker.url());\n```\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n### evaluate[​](#worker-evaluate \"Direct link to evaluate\")\n\nAdded before v1.9\n\nReturns the return value of `pageFunction`.\n\nIf the function passed to the [worker.evaluate()](class-worker#worker-evaluate) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\"), then [worker.evaluate()](class-worker#worker-evaluate) would wait for the promise to resolve and return its value.\n\nIf the function passed to the [worker.evaluate()](class-worker#worker-evaluate) returns a non-[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\") value, then [worker.evaluate()](class-worker#worker-evaluate) returns `undefined`. Playwright also supports transferring some additional values that are not serializable by `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`.\n\n**Usage**\n\n``` javascript\nawait worker.evaluate(pageFunction);\nawait worker.evaluate(pageFunction, arg);\n```\n\n**Arguments**\n\n- `pageFunction` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Function to be evaluated in the worker context.\n\n- `arg` [EvaluationArgument](../evaluating#evaluation-argument \"EvaluationArgument\") *(optional)*\n\n  Optional argument to pass to `pageFunction`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\")\\>\n\n### evaluateHandle[​](#worker-evaluate-handle \"Direct link to evaluateHandle\")\n\nAdded before v1.9\n\nReturns the return value of `pageFunction` as a [JSHandle](class-jshandle \"JSHandle\").\n\nThe only difference between [worker.evaluate()](class-worker#worker-evaluate) and [worker.evaluateHandle()](class-worker#worker-evaluate-handle) is that [worker.evaluateHandle()](class-worker#worker-evaluate-handle) returns [JSHandle](class-jshandle \"JSHandle\").\n\nIf the function passed to the [worker.evaluateHandle()](class-worker#worker-evaluate-handle) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\"), then [worker.evaluateHandle()](class-worker#worker-evaluate-handle) would wait for the promise to resolve and return its value.\n\n**Usage**\n\n``` javascript\nawait worker.evaluateHandle(pageFunction);\nawait worker.evaluateHandle(pageFunction, arg);\n```\n\n**Arguments**\n\n- `pageFunction` [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function \"Function\") \\| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n  Function to be evaluated in the worker context.\n\n- `arg` [EvaluationArgument](../evaluating#evaluation-argument \"EvaluationArgument\") *(optional)*\n\n  Optional argument to pass to `pageFunction`.\n\n**Returns**\n\n- [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise \"Promise\")\\<[JSHandle](class-jshandle \"JSHandle\")\\>\n\n### url[​](#worker-url \"Direct link to url\")\n\nAdded before v1.9\n\n**Usage**\n\n``` javascript\nworker.url();\n```\n\n**Returns**\n\n- [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"string\")\n\n## Events[​](#events \"Direct link to Events\")\n\n### on('close')[​](#worker-event-close \"Direct link to on('close')\")\n\nAdded before v1.9\n\nEmitted when this dedicated [WebWorker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) is terminated.\n\n**Usage**\n\n``` javascript\nworker.on('close', data => {});\n```\n\n**Event data**\n\n- [Worker](class-worker \"Worker\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-worker](https://playwright.dev/docs/api/class-worker)"
- name: worker.evaluate
  id: api/class-worker#worker-evaluate
  summary: Returns the return value of pageFunction
  belongs_to: Worker
  description: |-
    ### evaluate[​](#worker-evaluate "Direct link to evaluate")

    Added before v1.9

    Returns the return value of `pageFunction`.

    If the function passed to the [worker.evaluate()](class-worker#worker-evaluate) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [worker.evaluate()](class-worker#worker-evaluate) would wait for the promise to resolve and return its value.

    If the function passed to the [worker.evaluate()](class-worker#worker-evaluate) returns a non-[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable") value, then [worker.evaluate()](class-worker#worker-evaluate) returns `undefined`. Playwright also supports transferring some additional values that are not serializable by `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`.

    **Usage**

    ``` javascript
    await worker.evaluate(pageFunction);
    await worker.evaluate(pageFunction, arg);
    ```

    **Arguments**

    - `pageFunction`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Function to be evaluated in the worker context.

    - `arg` [EvaluationArgument](../evaluating#evaluation-argument "EvaluationArgument") *(optional)*

      Optional argument to pass to `pageFunction`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description "Serializable")\>
- name: worker.evaluateHandle
  id: api/class-worker#worker-evaluate-handle
  summary: Returns the return value of pageFunction as a JSHandle
  belongs_to: Worker
  description: |-
    ### evaluateHandle[​](#worker-evaluate-handle "Direct link to evaluateHandle")

    Added before v1.9

    Returns the return value of `pageFunction` as a [JSHandle](class-jshandle "JSHandle").

    The only difference between [worker.evaluate()](class-worker#worker-evaluate) and [worker.evaluateHandle()](class-worker#worker-evaluate-handle) is that [worker.evaluateHandle()](class-worker#worker-evaluate-handle) returns [JSHandle](class-jshandle "JSHandle").

    If the function passed to the [worker.evaluateHandle()](class-worker#worker-evaluate-handle) returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise"), then [worker.evaluateHandle()](class-worker#worker-evaluate-handle) would wait for the promise to resolve and return its value.

    **Usage**

    ``` javascript
    await worker.evaluateHandle(pageFunction);
    await worker.evaluateHandle(pageFunction, arg);
    ```

    **Arguments**

    - `pageFunction`[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function "Function") \| [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

      Function to be evaluated in the worker context.

    - `arg` [EvaluationArgument](../evaluating#evaluation-argument "EvaluationArgument") *(optional)*

      Optional argument to pass to `pageFunction`.

    **Returns**

    - [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise "Promise")\<[JSHandle](class-jshandle "JSHandle")\>

    &nbsp;
- name: worker.on('close')
  id: api/class-worker#worker-event-close
  summary: Emitted when this dedicated WebWorker is terminated
  belongs_to: Worker
  description: "### on('close')[​](#worker-event-close \"Direct link to on('close')\")\n\nAdded before v1.9\n\nEmitted when this dedicated [WebWorker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) is terminated.\n\n**Usage**\n\n``` javascript\nworker.on('close', data => {});\n```\n\n**Event data**\n\n- [Worker](class-worker \"Worker\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-worker](https://playwright.dev/docs/api/class-worker)"
- name: worker.url
  id: api/class-worker#worker-url
  summary: null
  belongs_to: Worker
  description: |-
    ### url[​](#worker-url "Direct link to url")

    Added before v1.9

    **Usage**

    ``` javascript
    worker.url();
    ```

    **Returns**

    - [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type "string")

    ## Events[​](#events "Direct link to Events")
- name: WorkerInfo
  id: api/class-workerinfo
  summary: WorkerInfo contains information about the worker that is running tests and is available to worker-scoped fixtures
  description: "# WorkerInfo\n\n`WorkerInfo` contains information about the worker that is running tests and is available to worker-scoped fixtures. `WorkerInfo` is a subset of [TestInfo](class-testinfo \"TestInfo\") that is available in many other places.\n\n## Properties[​](#properties \"Direct link to Properties\")\n\n### config[​](#worker-info-config \"Direct link to config\")\n\nProcessed configuration from the [configuration file](../test-configuration).\n\n**Usage**\n\n``` javascript\nworkerInfo.config\n```\n\n**Type**\n\n- [FullConfig](class-fullconfig \"FullConfig\")\n\n### parallelIndex[​](#worker-info-parallel-index \"Direct link to parallelIndex\")\n\nThe index of the worker between `0` and `workers - 1`. It is guaranteed that workers running at the same time have a different `parallelIndex`. When a worker is restarted, for example after a failure, the new worker process has the same `parallelIndex`.\n\nAlso available as `process.env.TEST_PARALLEL_INDEX`. Learn more about [parallelism and sharding](../test-parallel) with Playwright Test.\n\n**Usage**\n\n``` javascript\nworkerInfo.parallelIndex\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n### project[​](#worker-info-project \"Direct link to project\")\n\nProcessed project configuration from the [configuration file](../test-configuration).\n\n**Usage**\n\n``` javascript\nworkerInfo.project\n```\n\n**Type**\n\n- [FullProject](class-fullproject \"FullProject\")\n\n### workerIndex[​](#worker-info-worker-index \"Direct link to workerIndex\")\n\nThe unique index of the worker process that is running the test. When a worker is restarted, for example after a failure, the new worker process gets a new unique `workerIndex`.\n\nAlso available as `process.env.TEST_WORKER_INDEX`. Learn more about [parallelism and sharding](../test-parallel) with Playwright Test.\n\n**Usage**\n\n``` javascript\nworkerInfo.workerIndex\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-workerinfo](https://playwright.dev/docs/api/class-workerinfo)"
- name: workerInfo.config
  id: api/class-workerinfo#worker-info-config
  summary: Processed configuration from the configuration file
  belongs_to: WorkerInfo
  description: |-
    ### config[​](#worker-info-config "Direct link to config")

    Processed configuration from the [configuration file](../test-configuration).

    **Usage**

    ``` javascript
    workerInfo.config
    ```

    **Type**

    - [FullConfig](class-fullconfig "FullConfig")
- name: workerInfo.parallelIndex
  id: api/class-workerinfo#worker-info-parallel-index
  summary: The index of the worker between 0 and workers - 1
  belongs_to: WorkerInfo
  description: |-
    ### parallelIndex[​](#worker-info-parallel-index "Direct link to parallelIndex")

    The index of the worker between `0` and `workers - 1`. It is guaranteed that workers running at the same time have a different `parallelIndex`. When a worker is restarted, for example after a failure, the new worker process has the same `parallelIndex`.

    Also available as `process.env.TEST_PARALLEL_INDEX`. Learn more about [parallelism and sharding](../test-parallel) with Playwright Test.

    **Usage**

    ``` javascript
    workerInfo.parallelIndex
    ```

    **Type**

    - [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type "Number")

    &nbsp;
- name: workerInfo.project
  id: api/class-workerinfo#worker-info-project
  summary: Processed project configuration from the configuration file
  belongs_to: WorkerInfo
  description: |-
    ### project[​](#worker-info-project "Direct link to project")

    Processed project configuration from the [configuration file](../test-configuration).

    **Usage**

    ``` javascript
    workerInfo.project
    ```

    **Type**

    - [FullProject](class-fullproject "FullProject")

    &nbsp;
- name: workerInfo.workerIndex
  id: api/class-workerinfo#worker-info-worker-index
  summary: The unique index of the worker process that is running the test
  belongs_to: WorkerInfo
  description: "### workerIndex[​](#worker-info-worker-index \"Direct link to workerIndex\")\n\nThe unique index of the worker process that is running the test. When a worker is restarted, for example after a failure, the new worker process gets a new unique `workerIndex`.\n\nAlso available as `process.env.TEST_WORKER_INDEX`. Learn more about [parallelism and sharding](../test-parallel) with Playwright Test.\n\n**Usage**\n\n``` javascript\nworkerInfo.workerIndex\n```\n\n**Type**\n\n- [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\")\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/api/class-workerinfo](https://playwright.dev/docs/api/class-workerinfo)"
- name: Writing tests
  id: writing-tests
  summary: 'There is no need to wait for anything prior to performing an action: Playwright automatically waits for the wide range of actionability checks to pass prior to performing each action'
  description: "# Writing tests\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nPlaywright tests are simple, they\n\n- **perform actions**, and\n- **assert the state** against expectations.\n\nThere is no need to wait for anything prior to performing an action: Playwright automatically waits for the wide range of [actionability](actionability) checks to pass prior to performing each action.\n\nThere is also no need to deal with the race conditions when performing the checks - Playwright assertions are designed in a way that they describe the expectations that need to be eventually met.\n\nThat's it! These design choices allow Playwright users to forget about flaky timeouts and racy checks in their tests altogether.\n\n**You will learn**\n\n- [How to write the first test](writing-tests#first-test)\n- [How to perform actions](writing-tests#actions)\n- [How to use assertions](writing-tests#assertions)\n- [How tests run in isolation](writing-tests#test-isolation)\n- [How to use test hooks](writing-tests#using-test-hooks)\n\n## First test[​](#first-test \"Direct link to First test\")\n\nTake a look at the following example to see how to write a test.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest('has title', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n\n  // Expect a title \"to contain\" a substring.\n  await expect(page).toHaveTitle(/Playwright/);\n});\n\ntest('get started link', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n\n  // Click the get started link.\n  await page.getByRole('link', { name: 'Get started' }).click();\n\n  // Expects page to have a heading with the name of Installation.\n  await expect(page.getByRole('heading', { name: 'Installation' })).toBeVisible();\n});\n```\n\n> note\n>\n> Add `// @ts-check` at the start of each test file when using JavaScript in VS Code to get automatic type checking.\n\n## Actions[​](#actions \"Direct link to Actions\")\n\n### Navigation[​](#navigation \"Direct link to Navigation\")\n\nMost of the tests will start with navigating page to the URL. After that, test will be able to interact with the page elements.\n\n``` javascript\nawait page.goto('https://playwright.dev/');\n```\n\nPlaywright will wait for page to reach the load state prior to moving forward. Learn more about the [page.goto()](api/class-page#page-goto) options.\n\n### Interactions[​](#interactions \"Direct link to Interactions\")\n\nPerforming actions starts with locating the elements. Playwright uses [Locators API](locators) for that. Locators represent a way to find element(s) on the page at any moment, learn more about the [different types](locators) of locators available. Playwright will wait for the element to be [actionable](actionability) prior to performing the action, so there is no need to wait for it to become available.\n\n``` javascript\n// Create a locator.\nconst getStarted = page.getByRole('link', { name: 'Get started' });\n\n// Click it.\nawait getStarted.click();\n```\n\nIn most cases, it'll be written in one line:\n\n``` javascript\nawait page.getByRole('link', { name: 'Get started' }).click();\n```\n\n### Basic actions[​](#basic-actions \"Direct link to Basic actions\")\n\nThis is the list of the most popular Playwright actions. Note that there are many more, so make sure to check the [Locator API](api/class-locator) section to learn more about them.\n\n| Action                                                               | Description                     |\n|:---------------------------------------------------------------------|:--------------------------------|\n| [locator.check()](api/class-locator#locator-check)                   | Check the input checkbox        |\n| [locator.click()](api/class-locator#locator-click)                   | Click the element               |\n| [locator.uncheck()](api/class-locator#locator-uncheck)               | Uncheck the input checkbox      |\n| [locator.hover()](api/class-locator#locator-hover)                   | Hover mouse over the element    |\n| [locator.fill()](api/class-locator#locator-fill)                     | Fill the form field, input text |\n| [locator.focus()](api/class-locator#locator-focus)                   | Focus the element               |\n| [locator.press()](api/class-locator#locator-press)                   | Press single key                |\n| [locator.setInputFiles()](api/class-locator#locator-set-input-files) | Pick files to upload            |\n| [locator.selectOption()](api/class-locator#locator-select-option)    | Select option in the drop down  |\n\n## Assertions[​](#assertions \"Direct link to Assertions\")\n\nPlaywright includes [test assertions](test-assertions) in the form of `expect` function. To make an assertion, call `expect(value)` and choose a matcher that reflects the expectation.\n\nThere are many generic matchers like `toEqual`, `toContain`, `toBeTruthy` that can be used to assert any conditions.\n\n``` javascript\nexpect(success).toBeTruthy();\n```\n\nPlaywright also includes async matchers that will wait until the expected condition is met. Using these matchers allows making the tests non-flaky and resilient. For example, this code will wait until the page gets the title containing \"Playwright\":\n\n``` javascript\nawait expect(page).toHaveTitle(/Playwright/);\n```\n\nHere is the list of the most popular async assertions. Note that there are [many more](test-assertions) to get familiar with:\n\n| Assertion                                                                                             | Description                       |\n|:------------------------------------------------------------------------------------------------------|:----------------------------------|\n| [expect(locator).toBeChecked()](api/class-locatorassertions#locator-assertions-to-be-checked)         | Checkbox is checked               |\n| [expect(locator).toBeEnabled()](api/class-locatorassertions#locator-assertions-to-be-enabled)         | Control is enabled                |\n| [expect(locator).toBeVisible()](api/class-locatorassertions#locator-assertions-to-be-visible)         | Element is visible                |\n| [expect(locator).toContainText()](api/class-locatorassertions#locator-assertions-to-contain-text)     | Element contains text             |\n| [expect(locator).toHaveAttribute()](api/class-locatorassertions#locator-assertions-to-have-attribute) | Element has attribute             |\n| [expect(locator).toHaveCount()](api/class-locatorassertions#locator-assertions-to-have-count)         | List of elements has given length |\n| [expect(locator).toHaveText()](api/class-locatorassertions#locator-assertions-to-have-text)           | Element matches text              |\n| [expect(locator).toHaveValue()](api/class-locatorassertions#locator-assertions-to-have-value)         | Input element has value           |\n| [expect(page).toHaveTitle()](api/class-pageassertions#page-assertions-to-have-title)                  | Page has title                    |\n| [expect(page).toHaveURL()](api/class-pageassertions#page-assertions-to-have-url)                      | Page has URL                      |\n\n### Test Isolation[​](#test-isolation \"Direct link to Test Isolation\")\n\nPlaywright Test is based on the concept of [test fixtures](test-fixtures) such as the [built in page fixture](test-fixtures#built-in-fixtures), which is passed into your test. Pages are [isolated between tests due to the Browser Context](browser-contexts), which is equivalent to a brand new browser profile, where every test gets a fresh environment, even when multiple tests run in a single Browser.\n\n``` javascript\nimport { test } from '@playwright/test';\n\ntest('example test', async ({ page }) => {\n  // \"page\" belongs to an isolated BrowserContext, created for this specific test.\n});\n\ntest('another test', async ({ page }) => {\n  // \"page\" in this second test is completely isolated from the first test.\n});\n```\n\n### Using Test Hooks[​](#using-test-hooks \"Direct link to Using Test Hooks\")\n\nYou can use various [test hooks](api/class-test) such as `test.describe` to declare a group of tests and `test.beforeEach` and `test.afterEach` which are executed before/after each test. Other hooks include the `test.beforeAll` and `test.afterAll` which are executed once per worker before/after all tests.\n\n``` javascript\nimport { test, expect } from '@playwright/test';\n\ntest.describe('navigation', () => {\n  test.beforeEach(async ({ page }) => {\n    // Go to the starting url before each test.\n    await page.goto('https://playwright.dev/');\n  });\n\n  test('main navigation', async ({ page }) => {\n    // Assertions use the expect API.\n    await expect(page).toHaveURL('https://playwright.dev/');\n  });\n});\n```\n\n## What's Next[​](#whats-next \"Direct link to What's Next\")\n\n- [Run single test, multiple tests, headed mode](running-tests)\n- [Generate tests with Codegen](codegen-intro)\n- [See a trace of your tests](trace-viewer-intro)\n- [Explore UI Mode](test-ui-mode)\n- [Run tests on CI with GitHub Actions](ci-intro)\n\n© 2024 Microsoft  \nLicensed under the Apache License, Version 2.0.  \n[https://playwright.dev/docs/writing-tests](https://playwright.dev/docs/writing-tests)"
