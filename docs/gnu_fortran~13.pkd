---
name: GNU Fortran
slug: gnu_fortran~13
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: '13'
copyright: |-
  © Free Software Foundation
  Licensed under the GNU Free Documentation License, Version 1.3.
  https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/index.html
homepage: https://gcc.gnu.org/fortran/

---
- name: 1. Introduction ¶
  id: introduction
  summary: © Free Software Foundation Licensed under the GNU Free Documentation License, Version 1.3
  description: "Next: [GNU Fortran Command Options](invoking-gnu-fortran), Previous: [Introduction](index), Up: [Introduction](index) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 1 Introduction [¶](#Introduction-2)\n\n- [About GNU Fortran](about-gnu-fortran)\n- [GNU Fortran and GCC](gnu-fortran-and-gcc)\n- [Standards](standards)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Introduction.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Introduction.html)"
- name: 1.1. About GNU Fortran ¶
  id: about-gnu-fortran
  summary: The GNU Fortran compiler is the successor to g77, the Fortran 77 front end included in GCC prior to version 4 (released in 2005)
  description: "Next: [GNU Fortran and GCC](gnu-fortran-and-gcc), Up: [Introduction](introduction) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 1.1 About GNU Fortran [¶](#About-GNU-Fortran-1)\n\nThe GNU Fortran compiler is the successor to `g77`, the Fortran 77 front end included in GCC prior to version 4 (released in 2005). While it is backward-compatible with most `g77` extensions and command-line options, `gfortran` is a completely new implemention designed to support more modern dialects of Fortran. GNU Fortran implements the Fortran 77, 90 and 95 standards completely, most of the Fortran 2003 and 2008 standards, and some features from the 2018 standard. It also implements several extensions including OpenMP and OpenACC support for parallel programming.\n\nThe GNU Fortran compiler passes the [NIST Fortran 77 Test Suite](http://www.fortran-2000.com/ArnaudRecipes/fcvs21_f95.html), and produces acceptable results on the [LAPACK Test Suite](https://www.netlib.org/lapack/faq.html). It also provides respectable performance on the [Polyhedron Fortran compiler benchmarks](https://polyhedron.com/?page_id=175) and the [Livermore Fortran Kernels test](https://www.netlib.org/benchmark/livermore). It has been used to compile a number of large real-world programs, including [the HARMONIE and HIRLAM weather forecasting code](http://hirlam.org/) and [the Tonto quantum chemistry package](https://github.com/dylan-jayatilaka/tonto); see [https://gcc.gnu.org/wiki/GfortranApps](https://gcc.gnu.org/wiki/GfortranApps) for an extended list.\n\nGNU Fortran provides the following functionality:\n\n- Read a program, stored in a file and containing *source code* instructions written in Fortran 77.\n\n- Translate the program into instructions a computer can carry out more quickly than it takes to translate the original Fortran instructions. The result after compilation of a program is *machine code*, which is efficiently translated and processed by a machine such as your computer. Humans usually are not as good writing machine code as they are at writing Fortran (or C++, Ada, or Java), because it is easy to make tiny mistakes writing machine code.\n\n- Provide information about the reasons why the compiler may be unable to create a binary from the source code, for example if the source code is flawed. The Fortran language standards require that the compiler can point out mistakes in your code. An incorrect usage of the language causes an *error message*.\n\n  The compiler also attempts to diagnose cases where your program contains a correct usage of the language, but instructs the computer to do something questionable. This kind of diagnostic message is called a *warning message*.\n\n- Provide optional information about the translation passes from the source code to machine code. This can help you to find the cause of certain bugs which may not be obvious in the source code, but may be more easily found at a lower level compiler output. It also helps developers to find bugs in the compiler itself.\n\n- Provide information in the generated machine code that can make it easier to find bugs in the program (using a debugging tool, called a *debugger*, such as the GNU Debugger `gdb`).\n\n- Locate and gather machine code already generated to perform actions requested by statements in the program. This machine code is organized into *modules* and is located and *linked* to the user program.\n\nThe GNU Fortran compiler consists of several components:\n\n- A version of the `gcc` command (which also might be installed as the system’s `cc` command) that also understands and accepts Fortran source code. The `gcc` command is the *driver* program for all the languages in the GNU Compiler Collection (GCC); With `gcc`, you can compile the source code of any language for which a front end is available in GCC.\n- The `gfortran` command itself, which also might be installed as the system’s `f95` command. `gfortran` is just another driver program, but specifically for the Fortran compiler only. The primary difference between the `gcc` and `gfortran` commands is that the latter automatically links the correct libraries to your program.\n- A collection of run-time libraries. These libraries contain the machine code needed to support capabilities of the Fortran language that are not directly provided by the machine code generated by the `gfortran` compilation phase, such as intrinsic functions and subroutines, and routines for interaction with files and the operating system.\n- The Fortran compiler itself, (`f951`). This is the GNU Fortran parser and code generator, linked to and interfaced with the GCC backend library. `f951` “translates” the source code to assembler code. You would typically not use this program directly; instead, the `gcc` or `gfortran` driver programs call it for you.\n\nNext: [GNU Fortran and GCC](gnu-fortran-and-gcc), Up: [Introduction](introduction) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/About-GNU-Fortran.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/About-GNU-Fortran.html)"
- name: 1.2. GNU Fortran and GCC ¶
  id: gnu-fortran-and-gcc
  summary: GNU Fortran is a part of GCC, the GNU Compiler Collection
  description: "Next: [Standards](standards), Previous: [About GNU Fortran](about-gnu-fortran), Up: [Introduction](introduction) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 1.2 GNU Fortran and GCC [¶](#GNU-Fortran-and-GCC-1)\n\nGNU Fortran is a part of GCC, the *GNU Compiler Collection*. GCC consists of a collection of front ends for various languages, which translate the source code into a language-independent form called *GENERIC*. This is then processed by a common middle end which provides optimization, and then passed to one of a collection of back ends which generate code for different computer architectures and operating systems.\n\nFunctionally, this is implemented with a driver program (`gcc`) which provides the command-line interface for the compiler. It calls the relevant compiler front-end program (e.g., `f951` for Fortran) for each file in the source code, and then calls the assembler and linker as appropriate to produce the compiled output. In a copy of GCC that has been compiled with Fortran language support enabled, `gcc` recognizes files with `.f`, `.for`, `.ftn`, `.f90`, `.f95`, `.f03` and `.f08` extensions as Fortran source code, and compiles it accordingly. A `gfortran` driver program is also provided, which is identical to `gcc` except that it automatically links the Fortran runtime libraries into the compiled program.\n\nSource files with `.f`, `.for`, `.fpp`, `.ftn`, `.F`, `.FOR`, `.FPP`, and `.FTN` extensions are treated as fixed form. Source files with `.f90`, `.f95`, `.f03`, `.f08`, `.F90`, `.F95`, `.F03` and `.F08` extensions are treated as free form. The capitalized versions of either form are run through preprocessing. Source files with the lower case `.fpp` extension are also run through preprocessing.\n\nThis manual specifically documents the Fortran front end, which handles the programming language’s syntax and semantics. The aspects of GCC that relate to the optimization passes and the back-end code generation are documented in the GCC manual; see [Introduction](https://gcc.gnu.org/onlinedocs/gcc/index.html#Top) in Using the GNU Compiler Collection (GCC). The two manuals together provide a complete reference for the GNU Fortran compiler.\n\nNext: [Standards](standards), Previous: [About GNU Fortran](about-gnu-fortran), Up: [Introduction](introduction) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GNU-Fortran-and-GCC.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GNU-Fortran-and-GCC.html)"
- name: 1.3. Standards ¶
  id: standards
  summary: Fortran is developed by the Working Group 5 of Sub-Committee 22 of the Joint Technical Committee 1 of the International Organization for Standardization and the International Electrotechnical Commission (IEC)
  description: "Previous: [GNU Fortran and GCC](gnu-fortran-and-gcc), Up: [Introduction](introduction) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 1.3 Standards [¶](#Standards-1)\n\nFortran is developed by the Working Group 5 of Sub-Committee 22 of the Joint Technical Committee 1 of the International Organization for Standardization and the International Electrotechnical Commission (IEC). This group is known as [WG5](http://www.nag.co.uk/sc22wg5/). Official Fortran standard documents are available for purchase from ISO; a collection of free documents (typically final drafts) are also available on the [wiki](https://gcc.gnu.org/wiki/GFortranStandards).\n\nThe GNU Fortran compiler implements ISO/IEC 1539:1997 (Fortran 95). As such, it can also compile essentially all standard-compliant Fortran 90 and Fortran 77 programs. It also supports the ISO/IEC TR-15581 enhancements to allocatable arrays.\n\nGNU Fortran also supports almost all of ISO/IEC 1539-1:2004 (Fortran 2003) and ISO/IEC 1539-1:2010 (Fortran 2008). It has partial support for features introduced in ISO/IEC 1539:2018 (Fortran 2018), the most recent version of the Fortran language standard, including full support for the Technical Specification `Further Interoperability of Fortran with C` (ISO/IEC TS 29113:2012). More details on support for these standards can be found in the following sections of the documentation.\n\nAdditionally, the GNU Fortran compilers supports the OpenMP specification (version 4.5 and partial support of the features of the 5.0 version, [https://openmp.org/specifications/](https://openmp.org/specifications/)). There also is support for the OpenACC specification (targeting version 2.6, [https://www.openacc.org/](https://www.openacc.org/)). See [https://gcc.gnu.org/wiki/OpenACC](https://gcc.gnu.org/wiki/OpenACC) for more information.\n\n- [Fortran 95 status](fortran-95-status)\n- [Fortran 2003 status](fortran-2003-status)\n- [Fortran 2008 status](fortran-2008-status)\n- [Fortran 2018 status](fortran-2018-status)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Standards.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Standards.html)"
- name: 1.3.1. Fortran 95 status ¶
  id: fortran-95-status
  summary: The Fortran 95 standard specifies in Part 2 (ISO/IEC 1539-2:2000) varying length character strings
  description: "Next: [Fortran 2003 status](fortran-2003-status), Up: [Standards](standards) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 1.3.1 Fortran 95 status [¶](#Fortran-95-status-1)\n\nThe Fortran 95 standard specifies in Part 2 (ISO/IEC 1539-2:2000) varying length character strings. While GNU Fortran currently does not support such strings directly, there exist two Fortran implementations for them, which work with GNU Fortran. One can be found at [http://user.astro.wisc.edu/~townsend/static.php?ref=iso-varying-string](http://user.astro.wisc.edu/~townsend/static.php?ref=iso-varying-string).\n\nDeferred-length character strings of Fortran 2003 supports part of the features of `ISO_VARYING_STRING` and should be considered as replacement. (Namely, allocatable or pointers of the type `character(len=:)`.)\n\nPart 3 of the Fortran 95 standard (ISO/IEC 1539-3:1998) defines Conditional Compilation, which is not widely used and not directly supported by the GNU Fortran compiler. You can use the program coco to preprocess such files ([http://www.daniellnagle.com/coco.html](http://www.daniellnagle.com/coco.html)).\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Fortran-95-status.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Fortran-95-status.html)"
- name: 1.3.2. Fortran 2003 status ¶
  id: fortran-2003-status
  summary: GNU Fortran implements the Fortran 2003 (ISO/IEC 1539-1:2004) standard except for finalization support, which is incomplete
  description: "Next: [Fortran 2008 status](fortran-2008-status), Previous: [Fortran 95 status](fortran-95-status), Up: [Standards](standards) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 1.3.2 Fortran 2003 status [¶](#Fortran-2003-status-1)\n\nGNU Fortran implements the Fortran 2003 (ISO/IEC 1539-1:2004) standard except for finalization support, which is incomplete. See the [wiki page](https://gcc.gnu.org/wiki/Fortran2003) for a full list of new features introduced by Fortran 2003 and their implementation status.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Fortran-2003-status.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Fortran-2003-status.html)"
- name: 1.3.3. Fortran 2008 status ¶
  id: fortran-2008-status
  summary: The GNU Fortran compiler supports almost all features of Fortran 2008; the wiki has some information about the current implementation status
  description: "Next: [Fortran 2018 status](fortran-2018-status), Previous: [Fortran 2003 status](fortran-2003-status), Up: [Standards](standards) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 1.3.3 Fortran 2008 status [¶](#Fortran-2008-status-1)\n\nThe GNU Fortran compiler supports almost all features of Fortran 2008; the [wiki](https://gcc.gnu.org/wiki/Fortran2008Status) has some information about the current implementation status. In particular, the following are not yet supported:\n\n- `DO CONCURRENT` and `FORALL` do not recognize a type-spec in the loop header.\n- The change to permit any constant expression in subscripts and nested implied-do limits in a `DATA` statement has not been implemented.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Fortran-2008-status.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Fortran-2008-status.html)"
- name: 1.3.4. Fortran 2018 status ¶
  id: fortran-2018-status
  summary: Fortran 2018 (ISO/IEC 1539:2018) is the most recent version of the Fortran language standard
  description: "Previous: [Fortran 2008 status](fortran-2008-status), Up: [Standards](standards) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 1.3.4 Fortran 2018 status [¶](#Fortran-2018-status-1)\n\nFortran 2018 (ISO/IEC 1539:2018) is the most recent version of the Fortran language standard. GNU Fortran implements some of the new features of this standard:\n\n- All Fortran 2018 features derived from ISO/IEC TS 29113:2012, “Further Interoperability of Fortran with C”, are supported by GNU Fortran. This includes assumed-type and assumed-rank objects and the `SELECT RANK` construct as well as the parts relating to `BIND(C)` functions. See also [Further Interoperability of Fortran with C](further-interoperability-of-fortran-with-c).\n- GNU Fortran supports a subset of features derived from ISO/IEC TS 18508:2015, “Additional Parallel Features in Fortran”:\n  - The new atomic ADD, CAS, FETCH and ADD/OR/XOR, OR and XOR intrinsics.\n  - The `CO_MIN` and `CO_MAX` and `SUM` reduction intrinsics, and the `CO_BROADCAST` and `CO_REDUCE` intrinsic, except that those do not support polymorphic types or types with allocatable, pointer or polymorphic components.\n  - Events (`EVENT POST`, `EVENT WAIT`, `EVENT_QUERY`).\n  - Failed images (`FAIL IMAGE`, `IMAGE_STATUS`, `FAILED_IMAGES`, `STOPPED_IMAGES`).\n- An `ERROR STOP` statement is permitted in a `PURE` procedure.\n- GNU Fortran supports the `IMPLICIT NONE` statement with an `implicit-none-spec-list`.\n- The behavior of the `INQUIRE` statement with the `RECL=` specifier now conforms to Fortran 2018.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Fortran-2018-status.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Fortran-2018-status.html)"
- name: 2. GNU Fortran Command Options ¶
  id: invoking-gnu-fortran
  summary: The gfortran command supports all the options supported by the gcc command
  description: "Next: [Runtime: Influencing runtime behavior with environment variables](runtime), Previous: [Introduction](introduction), Up: [Introduction](index) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 2 GNU Fortran Command Options [¶](#GNU-Fortran-Command-Options)\n\nThe `gfortran` command supports all the options supported by the `gcc` command. Only options specific to GNU Fortran are documented here.\n\nSee [GCC Command Options](https://gcc.gnu.org/onlinedocs/gcc/Invoking-GCC.html#Invoking-GCC) in Using the GNU Compiler Collection (GCC), for information on the non-Fortran-specific aspects of the `gcc` command (and, therefore, the `gfortran` command).\n\nAll GCC and GNU Fortran options are accepted both by `gfortran` and by `gcc` (as well as any other drivers built at the same time, such as `g++`), since adding GNU Fortran to the GCC distribution enables acceptance of GNU Fortran options by all of the relevant drivers.\n\nIn some cases, options have positive and negative forms; the negative form of `-ffoo` would be `-fno-foo`. This manual documents only one of these two forms, whichever one is not the default.\n\n- [Option summary](option-summary)\n- [Options controlling Fortran dialect](fortran-dialect-options)\n- [Enable and customize preprocessing](preprocessing-options)\n- [Options to request or suppress errors and warnings](error-and-warning-options)\n- [Options for debugging your program or GNU Fortran](debugging-options)\n- [Options for directory search](directory-options)\n- [Influencing the linking step](link-options)\n- [Influencing runtime behavior](runtime-options)\n- [Options for code generation conventions](code-gen-options)\n- [Options for interoperability with other languages](interoperability-options)\n- [Environment variables affecting `gfortran`](environment-variables)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Invoking-GNU-Fortran.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Invoking-GNU-Fortran.html)"
- name: 2.1. Option summary ¶
  id: option-summary
  summary: Here is a summary of all the options specific to GNU Fortran, grouped by type
  description: "Next: [Options controlling Fortran dialect](fortran-dialect-options), Up: [GNU Fortran Command Options](invoking-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 2.1 Option summary [¶](#Option-summary)\n\nHere is a summary of all the options specific to GNU Fortran, grouped by type. Explanations are in the following sections.\n\nFortran Language Options  \nSee [Options controlling Fortran dialect](fortran-dialect-options).\n\n``` example-preformatted\n-fall-intrinsics -fallow-argument-mismatch -fallow-invalid-boz\n-fbackslash -fcray-pointer -fd-lines-as-code -fd-lines-as-comments\n-fdec -fdec-char-conversions -fdec-structure -fdec-intrinsic-ints\n-fdec-static -fdec-math -fdec-include -fdec-format-defaults\n-fdec-blank-format-item -fdefault-double-8 -fdefault-integer-8\n-fdefault-real-8 -fdefault-real-10 -fdefault-real-16 -fdollar-ok\n-ffixed-line-length-n -ffixed-line-length-none -fpad-source\n-ffree-form -ffree-line-length-n -ffree-line-length-none\n-fimplicit-none -finteger-4-integer-8 -fmax-identifier-length\n-fmodule-private -ffixed-form -fno-range-check -fopenacc -fopenmp\n-freal-4-real-10 -freal-4-real-16 -freal-4-real-8 -freal-8-real-10\n-freal-8-real-16 -freal-8-real-4 -std=std -ftest-forall-temp\n```\n\nPreprocessing Options  \nSee [Enable and customize preprocessing](preprocessing-options).\n\n``` example-preformatted\n-A-question[=answer]\n-Aquestion=answer -C -CC -Dmacro[=defn]\n-H -P\n-Umacro -cpp -dD -dI -dM -dN -dU -fworking-directory\n-imultilib dir\n-iprefix file -iquote -isysroot dir -isystem dir -nocpp \n-nostdinc\n-undef\n```\n\nError and Warning Options  \nSee [Options to request or suppress errors and warnings](error-and-warning-options).\n\n``` example-preformatted\n-Waliasing -Wall -Wampersand -Warray-bounds\n-Wc-binding-type -Wcharacter-truncation -Wconversion\n-Wdo-subscript -Wfunction-elimination -Wimplicit-interface\n-Wimplicit-procedure -Wintrinsic-shadow -Wuse-without-only\n-Wintrinsics-std -Wline-truncation -Wno-align-commons\n-Wno-overwrite-recursive -Wno-tabs -Wreal-q-constant -Wsurprising\n-Wunderflow -Wunused-parameter -Wrealloc-lhs -Wrealloc-lhs-all\n-Wfrontend-loop-interchange -Wtarget-lifetime -fmax-errors=n\n-fsyntax-only -pedantic\n-pedantic-errors\n```\n\nDebugging Options  \nSee [Options for debugging your program or GNU Fortran](debugging-options).\n\n``` example-preformatted\n-fbacktrace -fdump-fortran-optimized -fdump-fortran-original\n-fdebug-aux-vars -fdump-fortran-global -fdump-parse-tree -ffpe-trap=list\n-ffpe-summary=list\n```\n\nDirectory Options  \nSee [Options for directory search](directory-options).\n\n``` example-preformatted\n-Idir  -Jdir -fintrinsic-modules-path dir\n```\n\nLink Options  \nSee [Options for influencing the linking step](link-options).\n\n``` example-preformatted\n-static-libgfortran  -static-libquadmath\n```\n\nRuntime Options  \nSee [Options for influencing runtime behavior](runtime-options).\n\n``` example-preformatted\n-fconvert=conversion -fmax-subrecord-length=length\n-frecord-marker=length -fsign-zero\n```\n\nInteroperability Options  \nSee [Options for interoperability](interoperability-options).\n\n``` example-preformatted\n-fc-prototypes -fc-prototypes-external\n```\n\nCode Generation Options  \nSee [Options for code generation conventions](code-gen-options).\n\n``` example-preformatted\n-faggressive-function-elimination -fblas-matmul-limit=n\n-fbounds-check -ftail-call-workaround -ftail-call-workaround=n\n-fcheck-array-temporaries\n-fcheck=<all|array-temps|bits|bounds|do|mem|pointer|recursion>\n-fcoarray=<none|single|lib> -fexternal-blas -ff2c\n-ffrontend-loop-interchange -ffrontend-optimize\n-finit-character=n -finit-integer=n -finit-local-zero\n-finit-derived -finit-logical=<true|false>\n-finit-real=<zero|inf|-inf|nan|snan>\n-finline-matmul-limit=n\n-finline-arg-packing -fmax-array-constructor=n\n-fmax-stack-var-size=n -fno-align-commons -fno-automatic\n-fno-protect-parens -fno-underscoring -fsecond-underscore\n-fpack-derived -frealloc-lhs -frecursive -frepack-arrays\n-fshort-enums -fstack-arrays\n```\n\nNext: [Options controlling Fortran dialect](fortran-dialect-options), Up: [GNU Fortran Command Options](invoking-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Summary.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Summary.html)"
- name: 2.2. Options controlling Fortran dialect ¶
  id: fortran-dialect-options
  summary: -ffree-form ¶ -ffixed-form Specify the layout used by the source file
  description: "Next: [Enable and customize preprocessing](preprocessing-options), Previous: [Option summary](option-summary), Up: [GNU Fortran Command Options](invoking-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 2.2 Options controlling Fortran dialect [¶](#Options-controlling-Fortran-dialect)\n\nThe following options control the details of the Fortran dialect accepted by the compiler:\n\n`-ffree-form` [¶](#index-ffree-form)  \n`-ffixed-form`  \nSpecify the layout used by the source file. The free form layout was introduced in Fortran 90. Fixed form was traditionally used in older Fortran programs. When neither option is specified, the source form is determined by the file extension.\n\n`-fall-intrinsics` [¶](#index-fall-intrinsics)  \nThis option causes all intrinsic procedures (including the GNU-specific extensions) to be accepted. This can be useful with `-std=` to force standard-compliance but get access to the full range of intrinsics available with `gfortran`. As a consequence, `-Wintrinsics-std` will be ignored and no user-defined procedure with the same name as any intrinsic will be called except when it is explicitly declared `EXTERNAL`.\n\n`-fallow-argument-mismatch` [¶](#index-fallow-argument-mismatch)  \nSome code contains calls to external procedures with mismatches between the calls and the procedure definition, or with mismatches between different calls. Such code is non-conforming, and will usually be flagged with an error. This options degrades the error to a warning, which can only be disabled by disabling all warnings via `-w`. Only a single occurrence per argument is flagged by this warning. `-fallow-argument-mismatch` is implied by `-std=legacy`.\n\nUsing this option is *strongly* discouraged. It is possible to provide standard-conforming code which allows different types of arguments by using an explicit interface and `TYPE(*)`.\n\n`-fallow-invalid-boz` [¶](#index-allow-invalid-boz)  \nA BOZ literal constant can occur in a limited number of contexts in standard conforming Fortran. This option degrades an error condition to a warning, and allows a BOZ literal constant to appear where the Fortran standard would otherwise prohibit its use.\n\n`-fd-lines-as-code` [¶](#index-fd-lines-as-code)  \n`-fd-lines-as-comments`  \nEnable special treatment for lines beginning with `d` or `D` in fixed form sources. If the `-fd-lines-as-code` option is given they are treated as if the first column contained a blank. If the `-fd-lines-as-comments` option is given, they are treated as comment lines.\n\n`-fdec` [¶](#index-fdec)  \nDEC compatibility mode. Enables extensions and other features that mimic the default behavior of older compilers (such as DEC). These features are non-standard and should be avoided at all costs. For details on GNU Fortran’s implementation of these extensions see the full documentation.\n\nOther flags enabled by this switch are: `-fdollar-ok` `-fcray-pointer` `-fdec-char-conversions` `-fdec-structure` `-fdec-intrinsic-ints` `-fdec-static` `-fdec-math` `-fdec-include` `-fdec-blank-format-item` `-fdec-format-defaults`\n\nIf `-fd-lines-as-code`/`-fd-lines-as-comments` are unset, then `-fdec` also sets `-fd-lines-as-comments`.\n\n`-fdec-char-conversions` [¶](#index-fdec-char-conversions)  \nEnable the use of character literals in assignments and `DATA` statements for non-character variables.\n\n`-fdec-structure` [¶](#index-fdec-structure)  \nEnable DEC `STRUCTURE` and `RECORD` as well as `UNION`, `MAP`, and dot (’.’) as a member separator (in addition to ’%’). This is provided for compatibility only; Fortran 90 derived types should be used instead where possible.\n\n`-fdec-intrinsic-ints` [¶](#index-fdec-intrinsic-ints)  \nEnable B/I/J/K kind variants of existing integer functions (e.g. BIAND, IIAND, JIAND, etc...). For a complete list of intrinsics see the full documentation.\n\n`-fdec-math` [¶](#index-fdec-math)  \nEnable legacy math intrinsics such as COTAN and degree-valued trigonometric functions (e.g. TAND, ATAND, etc...) for compatability with older code.\n\n`-fdec-static` [¶](#index-fdec-static)  \nEnable DEC-style STATIC and AUTOMATIC attributes to explicitly specify the storage of variables and other objects.\n\n`-fdec-include` [¶](#index-fdec-include)  \nEnable parsing of INCLUDE as a statement in addition to parsing it as INCLUDE line. When parsed as INCLUDE statement, INCLUDE does not have to be on a single line and can use line continuations.\n\n`-fdec-format-defaults` [¶](#index-fdec-format-defaults)  \nEnable format specifiers F, G and I to be used without width specifiers, default widths will be used instead.\n\n`-fdec-blank-format-item` [¶](#index-fdec-blank-format-item)  \nEnable a blank format item at the end of a format specification i.e. nothing following the final comma.\n\n`-fdollar-ok` [¶](#index-fdollar-ok)  \nAllow ‘`$`’ as a valid non-first character in a symbol name. Symbols that start with ‘`$`’ are rejected since it is unclear which rules to apply to implicit typing as different vendors implement different rules. Using ‘`$`’ in `IMPLICIT` statements is also rejected.\n\n`-fbackslash` [¶](#index-backslash-1)  \nChange the interpretation of backslashes in string literals from a single backslash character to “C-style” escape characters. The following combinations are expanded `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\v`, `\\\\`, and `\\0` to the ASCII characters alert, backspace, form feed, newline, carriage return, horizontal tab, vertical tab, backslash, and NUL, respectively. Additionally, `\\x``nn`, `\\u``nnnn` and `\\U``nnnnnnnn` (where each `n` is a hexadecimal digit) are translated into the Unicode characters corresponding to the specified code points. All other combinations of a character preceded by \\\\ are unexpanded.\n\n`-fmodule-private` [¶](#index-fmodule-private)  \nSet the default accessibility of module entities to `PRIVATE`. Use-associated entities will not be accessible unless they are explicitly declared as `PUBLIC`.\n\n`-ffixed-line-length-``n` [¶](#index-ffixed-line-length-n)  \nSet column after which characters are ignored in typical fixed-form lines in the source file, and, unless `-fno-pad-source`, through which spaces are assumed (as if padded to that length) after the ends of short fixed-form lines.\n\nPopular values for `n` include 72 (the standard and the default), 80 (card image), and 132 (corresponding to “extended-source” options in some popular compilers). `n` may also be ‘`none`’, meaning that the entire line is meaningful and that continued character constants never have implicit spaces appended to them to fill out the line. `-ffixed-line-length-0` means the same thing as `-ffixed-line-length-none`.\n\n`-fno-pad-source` [¶](#index-fpad-source)  \nBy default fixed-form lines have spaces assumed (as if padded to that length) after the ends of short fixed-form lines. This is not done either if `-ffixed-line-length-0`, `-ffixed-line-length-none` or if `-fno-pad-source` option is used. With any of those options continued character constants never have implicit spaces appended to them to fill out the line.\n\n`-ffree-line-length-``n` [¶](#index-ffree-line-length-n)  \nSet column after which characters are ignored in typical free-form lines in the source file. The default value is 132. `n` may be ‘`none`’, meaning that the entire line is meaningful. `-ffree-line-length-0` means the same thing as `-ffree-line-length-none`.\n\n`-fmax-identifier-length=``n` [¶](#index-fmax-identifier-length_003dn)  \nSpecify the maximum allowed identifier length. Typical values are 31 (Fortran 95) and 63 (Fortran 2003 and later).\n\n`-fimplicit-none` [¶](#index-fimplicit-none)  \nSpecify that no implicit typing is allowed, unless overridden by explicit `IMPLICIT` statements. This is the equivalent of adding `implicit none` to the start of every procedure.\n\n`-fcray-pointer` [¶](#index-fcray-pointer)  \nEnable the Cray pointer extension, which provides C-like pointer functionality.\n\n`-fopenacc` [¶](#index-fopenacc)  \nEnable the OpenACC extensions. This includes OpenACC `!$acc` directives in free form and `c$acc`, `*$acc` and `!$acc` directives in fixed form, `!$` conditional compilation sentinels in free form and `c$`, `*$` and `!$` sentinels in fixed form, and when linking arranges for the OpenACC runtime library to be linked in.\n\n`-fopenmp` [¶](#index-fopenmp)  \nEnable the OpenMP extensions. This includes OpenMP `!$omp` directives in free form and `c$omp`, `*$omp` and `!$omp` directives in fixed form, `!$` conditional compilation sentinels in free form and `c$`, `*$` and `!$` sentinels in fixed form, and when linking arranges for the OpenMP runtime library to be linked in. The option `-fopenmp` implies `-frecursive`.\n\n`-fno-range-check` [¶](#index-frange-check)  \nDisable range checking on results of simplification of constant expressions during compilation. For example, GNU Fortran will give an error at compile time when simplifying `a = 1. / 0`. With this option, no error will be given and `a` will be assigned the value `+Infinity`. If an expression evaluates to a value outside of the relevant range of \\[`-HUGE()`:`HUGE()`\\], then the expression will be replaced by `-Inf` or `+Inf` as appropriate. Similarly, `DATA i/Z'FFFFFFFF'/` will result in an integer overflow on most systems, but with `-fno-range-check` the value will “wrap around” and `i` will be initialized to *-1* instead.\n\n`-fdefault-integer-8` [¶](#index-fdefault-integer-8)  \nSet the default integer and logical types to an 8 byte wide type. This option also affects the kind of integer constants like `42`. Unlike `-finteger-4-integer-8`, it does not promote variables with explicit kind declaration.\n\n`-fdefault-real-8` [¶](#index-fdefault-real-8)  \nSet the default real type to an 8 byte wide type. This option also affects the kind of non-double real constants like `1.0`. This option promotes the default width of `DOUBLE PRECISION` and double real constants like `1.d0` to 16 bytes if possible. If `-fdefault-double-8` is given along with `fdefault-real-8`, `DOUBLE PRECISION` and double real constants are not promoted. Unlike `-freal-4-real-8`, `fdefault-real-8` does not promote variables with explicit kind declarations.\n\n`-fdefault-real-10` [¶](#index-fdefault-real-10)  \nSet the default real type to an 10 byte wide type. This option also affects the kind of non-double real constants like `1.0`. This option promotes the default width of `DOUBLE PRECISION` and double real constants like `1.d0` to 16 bytes if possible. If `-fdefault-double-8` is given along with `fdefault-real-10`, `DOUBLE PRECISION` and double real constants are not promoted. Unlike `-freal-4-real-10`, `fdefault-real-10` does not promote variables with explicit kind declarations.\n\n`-fdefault-real-16` [¶](#index-fdefault-real-16)  \nSet the default real type to an 16 byte wide type. This option also affects the kind of non-double real constants like `1.0`. This option promotes the default width of `DOUBLE PRECISION` and double real constants like `1.d0` to 16 bytes if possible. If `-fdefault-double-8` is given along with `fdefault-real-16`, `DOUBLE PRECISION` and double real constants are not promoted. Unlike `-freal-4-real-16`, `fdefault-real-16` does not promote variables with explicit kind declarations.\n\n`-fdefault-double-8` [¶](#index-fdefault-double-8)  \nSet the `DOUBLE PRECISION` type and double real constants like `1.d0` to an 8 byte wide type. Do nothing if this is already the default. This option prevents `-fdefault-real-8`, `-fdefault-real-10`, and `-fdefault-real-16`, from promoting `DOUBLE PRECISION` and double real constants like `1.d0` to 16 bytes.\n\n`-finteger-4-integer-8` [¶](#index-finteger-4-integer-8)  \nPromote all `INTEGER(KIND=4)` entities to an `INTEGER(KIND=8)` entities. If `KIND=8` is unavailable, then an error will be issued. This option should be used with care and may not be suitable for your codes. Areas of possible concern include calls to external procedures, alignment in `EQUIVALENCE` and/or `COMMON`, generic interfaces, BOZ literal constant conversion, and I/O. Inspection of the intermediate representation of the translated Fortran code, produced by `-fdump-tree-original`, is suggested.\n\n`-freal-4-real-8` [¶](#index-freal-4-real-8)  \n`-freal-4-real-10`  \n`-freal-4-real-16`  \n`-freal-8-real-4`  \n`-freal-8-real-10`  \n`-freal-8-real-16`  \nPromote all `REAL(KIND=M)` entities to `REAL(KIND=N)` entities. If `REAL(KIND=N)` is unavailable, then an error will be issued. The `-freal-4-` flags also affect the default real kind and the `-freal-8-` flags also the double-precision real kind. All other real-kind types are unaffected by this option. The promotion is also applied to real literal constants of default and double-precision kind and a specified kind number of 4 or 8, respectively. However, `-fdefault-real-8`, `-fdefault-real-10`, `-fdefault-real-10`, and `-fdefault-double-8` take precedence for the default and double-precision real kinds, both for real literal constants and for declarations without a kind number. Note that for `REAL(KIND=KIND(1.0))` the literal may get promoted and then the result may get promoted again. These options should be used with care and may not be suitable for your codes. Areas of possible concern include calls to external procedures, alignment in `EQUIVALENCE` and/or `COMMON`, generic interfaces, BOZ literal constant conversion, and I/O and calls to intrinsic procedures when passing a value to the `kind=` dummy argument. Inspection of the intermediate representation of the translated Fortran code, produced by `-fdump-fortran-original` or `-fdump-tree-original`, is suggested.\n\n`-std=``std` [¶](#index-std_003dstd-option)  \nSpecify the standard to which the program is expected to conform, which may be one of ‘`f95`’, ‘`f2003`’, ‘`f2008`’, ‘`f2018`’, ‘`gnu`’, or ‘`legacy`’. The default value for `std` is ‘`gnu`’, which specifies a superset of the latest Fortran standard that includes all of the extensions supported by GNU Fortran, although warnings will be given for obsolete extensions not recommended for use in new code. The ‘`legacy`’ value is equivalent but without the warnings for obsolete extensions, and may be useful for old non-standard programs. The ‘`f95`’, ‘`f2003`’, ‘`f2008`’, and ‘`f2018`’ values specify strict conformance to the Fortran 95, Fortran 2003, Fortran 2008 and Fortran 2018 standards, respectively; errors are given for all extensions beyond the relevant language standard, and warnings are given for the Fortran 77 features that are permitted but obsolescent in later standards. The deprecated option ‘`-std=f2008ts`’ acts as an alias for ‘`-std=f2018`’. It is only present for backwards compatibility with earlier gfortran versions and should not be used any more.\n\n`-ftest-forall-temp` [¶](#index-ftest-forall-temp)  \nEnhance test coverage by forcing most forall assignments to use temporary.\n\nNext: [Enable and customize preprocessing](preprocessing-options), Previous: [Option summary](option-summary), Up: [GNU Fortran Command Options](invoking-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Fortran-Dialect-Options.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Fortran-Dialect-Options.html)"
- name: 2.3. Enable and customize preprocessing ¶
  id: preprocessing-options
  summary: Many Fortran compilers including GNU Fortran allow passing the source code through a C preprocessor (CPP; sometimes also called the Fortran preprocessor, FPP) to allow for conditional compilation
  description: "Next: [Options to request or suppress errors and warnings](error-and-warning-options), Previous: [Options controlling Fortran dialect](fortran-dialect-options), Up: [GNU Fortran Command Options](invoking-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 2.3 Enable and customize preprocessing [¶](#Enable-and-customize-preprocessing)\n\nMany Fortran compilers including GNU Fortran allow passing the source code through a C preprocessor (CPP; sometimes also called the Fortran preprocessor, FPP) to allow for conditional compilation. In the case of GNU Fortran, this is the GNU C Preprocessor in the traditional mode. On systems with case-preserving file names, the preprocessor is automatically invoked if the filename extension is `.F`, `.FOR`, `.FTN`, `.fpp`, `.FPP`, `.F90`, `.F95`, `.F03` or `.F08`. To manually invoke the preprocessor on any file, use `-cpp`, to disable preprocessing on files where the preprocessor is run automatically, use `-nocpp`.\n\nIf a preprocessed file includes another file with the Fortran `INCLUDE` statement, the included file is not preprocessed. To preprocess included files, use the equivalent preprocessor statement `#include`.\n\nIf GNU Fortran invokes the preprocessor, `__GFORTRAN__` is defined. The macros `__GNUC__`, `__GNUC_MINOR__` and `__GNUC_PATCHLEVEL__` can be used to determine the version of the compiler. See [Overview](https://gcc.gnu.org/onlinedocs/cpp/index.html#Top) in The C Preprocessor for details.\n\nGNU Fortran supports a number of `INTEGER` and `REAL` kind types in additional to the kind types required by the Fortran standard. The availability of any given kind type is architecture dependent. The following pre-defined preprocessor macros can be used to conditionally include code for these additional kind types: `__GFC_INT_1__`, `__GFC_INT_2__`, `__GFC_INT_8__`, `__GFC_INT_16__`, `__GFC_REAL_10__`, and `__GFC_REAL_16__`.\n\nWhile CPP is the de-facto standard for preprocessing Fortran code, Part 3 of the Fortran 95 standard (ISO/IEC 1539-3:1998) defines Conditional Compilation, which is not widely used and not directly supported by the GNU Fortran compiler. You can use the program coco to preprocess such files ([http://www.daniellnagle.com/coco.html](http://www.daniellnagle.com/coco.html)).\n\nThe following options control preprocessing of Fortran code:\n\n`-cpp` [¶](#index-cpp)  \n`-nocpp`  \nEnable preprocessing. The preprocessor is automatically invoked if the file extension is `.fpp`, `.FPP`, `.F`, `.FOR`, `.FTN`, `.F90`, `.F95`, `.F03` or `.F08`. Use this option to manually enable preprocessing of any kind of Fortran file.\n\nTo disable preprocessing of files with any of the above listed extensions, use the negative form: `-nocpp`.\n\nThe preprocessor is run in traditional mode. Any restrictions of the file-format, especially the limits on line length, apply for preprocessed output as well, so it might be advisable to use the `-ffree-line-length-none` or `-ffixed-line-length-none` options.\n\n`-dM` [¶](#index-dM)  \nInstead of the normal output, generate a list of `'#define'` directives for all the macros defined during the execution of the preprocessor, including predefined macros. This gives you a way of finding out what is predefined in your version of the preprocessor. Assuming you have no file `foo.f90`, the command\n\n``` example-preformatted\ntouch foo.f90; gfortran -cpp -E -dM foo.f90\n```\n\nwill show all the predefined macros.\n\n`-dD` [¶](#index-dD)  \nLike `-dM` except in two respects: it does not include the predefined macros, and it outputs both the `#define` directives and the result of preprocessing. Both kinds of output go to the standard output file.\n\n`-dN` [¶](#index-dN)  \nLike `-dD`, but emit only the macro names, not their expansions.\n\n`-dU` [¶](#index-dU)  \nLike `dD` except that only macros that are expanded, or whose definedness is tested in preprocessor directives, are output; the output is delayed until the use or test of the macro; and `'#undef'` directives are also output for macros tested but undefined at the time.\n\n`-dI` [¶](#index-dI)  \nOutput `'#include'` directives in addition to the result of preprocessing.\n\n`-fworking-directory` [¶](#index-fworking-directory)  \nEnable generation of linemarkers in the preprocessor output that will let the compiler know the current working directory at the time of preprocessing. When this option is enabled, the preprocessor will emit, after the initial linemarker, a second linemarker with the current working directory followed by two slashes. GCC will use this directory, when it is present in the preprocessed input, as the directory emitted as the current working directory in some debugging information formats. This option is implicitly enabled if debugging information is enabled, but this can be inhibited with the negated form `-fno-working-directory`. If the `-P` flag is present in the command line, this option has no effect, since no `#line` directives are emitted whatsoever.\n\n`-idirafter ``dir` [¶](#index-idirafter-dir)  \nSearch `dir` for include files, but do it after all directories specified with `-I` and the standard system directories have been exhausted. `dir` is treated as a system include directory. If dir begins with `=`, then the `=` will be replaced by the sysroot prefix; see `--sysroot` and `-isysroot`.\n\n`-imultilib ``dir` [¶](#index-imultilib-dir)  \nUse `dir` as a subdirectory of the directory containing target-specific C++ headers.\n\n`-iprefix ``prefix` [¶](#index-iprefix-prefix)  \nSpecify `prefix` as the prefix for subsequent `-iwithprefix` options. If the `prefix` represents a directory, you should include the final `'/'`.\n\n`-isysroot ``dir` [¶](#index-isysroot-dir)  \nThis option is like the `--sysroot` option, but applies only to header files. See the `--sysroot` option for more information.\n\n`-iquote ``dir` [¶](#index-iquote-dir)  \nSearch `dir` only for header files requested with `#include \"file\"`; they are not searched for `#include <file>`, before all directories specified by `-I` and before the standard system directories. If `dir` begins with `=`, then the `=` will be replaced by the sysroot prefix; see `--sysroot` and `-isysroot`.\n\n`-isystem ``dir` [¶](#index-isystem-dir)  \nSearch `dir` for header files, after all directories specified by `-I` but before the standard system directories. Mark it as a system directory, so that it gets the same special treatment as is applied to the standard system directories. If `dir` begins with `=`, then the `=` will be replaced by the sysroot prefix; see `--sysroot` and `-isysroot`.\n\n`-nostdinc` [¶](#index-nostdinc)  \nDo not search the standard system directories for header files. Only the directories you have specified with `-I` options (and the directory of the current file, if appropriate) are searched.\n\n`-undef` [¶](#index-undef)  \nDo not predefine any system-specific or GCC-specific macros. The standard predefined macros remain defined.\n\n`-A``predicate``=``answer` [¶](#index-Apredicate_003danswer)  \nMake an assertion with the predicate `predicate` and answer `answer`. This form is preferred to the older form -A predicate(answer), which is still supported, because it does not use shell special characters.\n\n`-A-``predicate``=``answer` [¶](#index-A-predicate_003danswer)  \nCancel an assertion with the predicate `predicate` and answer `answer`.\n\n`-C` [¶](#index-C)  \nDo not discard comments. All comments are passed through to the output file, except for comments in processed directives, which are deleted along with the directive.\n\nYou should be prepared for side effects when using `-C`; it causes the preprocessor to treat comments as tokens in their own right. For example, comments appearing at the start of what would be a directive line have the effect of turning that line into an ordinary source line, since the first token on the line is no longer a `'#'`.\n\nWarning: this currently handles C-Style comments only. The preprocessor does not yet recognize Fortran-style comments.\n\n`-CC` [¶](#index-CC)  \nDo not discard comments, including during macro expansion. This is like `-C`, except that comments contained within macros are also passed through to the output file where the macro is expanded.\n\nIn addition to the side-effects of the `-C` option, the `-CC` option causes all C++-style comments inside a macro to be converted to C-style comments. This is to prevent later use of that macro from inadvertently commenting out the remainder of the source line. The `-CC` option is generally used to support lint comments.\n\nWarning: this currently handles C- and C++-Style comments only. The preprocessor does not yet recognize Fortran-style comments.\n\n`-D``name` [¶](#index-Dname)  \nPredefine name as a macro, with definition `1`.\n\n`-D``name``=``definition` [¶](#index-Dname_003ddefinition)  \nThe contents of `definition` are tokenized and processed as if they appeared during translation phase three in a `'#define'` directive. In particular, the definition will be truncated by embedded newline characters.\n\nIf you are invoking the preprocessor from a shell or shell-like program you may need to use the shell’s quoting syntax to protect characters such as spaces that have a meaning in the shell syntax.\n\nIf you wish to define a function-like macro on the command line, write its argument list with surrounding parentheses before the equals sign (if any). Parentheses are meaningful to most shells, so you will need to quote the option. With sh and csh, `-D'name(args...)=definition'` works.\n\n`-D` and `-U` options are processed in the order they are given on the command line. All -imacros file and -include file options are processed after all -D and -U options.\n\n`-H` [¶](#index-H)  \nPrint the name of each header file used, in addition to other normal activities. Each name is indented to show how deep in the `'#include'` stack it is.\n\n`-P` [¶](#index-P)  \nInhibit generation of linemarkers in the output from the preprocessor. This might be useful when running the preprocessor on something that is not C code, and will be sent to a program which might be confused by the linemarkers.\n\n`-U``name` [¶](#index-Uname)  \nCancel any previous definition of `name`, either built in or provided with a `-D` option.\n\nNext: [Options to request or suppress errors and warnings](error-and-warning-options), Previous: [Options controlling Fortran dialect](fortran-dialect-options), Up: [GNU Fortran Command Options](invoking-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Preprocessing-Options.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Preprocessing-Options.html)"
- name: 2.4. Options to request or suppress errors and warnings ¶
  id: error-and-warning-options
  summary: Errors are diagnostic messages that report that the GNU Fortran compiler cannot compile the relevant piece of source code
  description: "Next: [Options for debugging your program or GNU Fortran](debugging-options), Previous: [Enable and customize preprocessing](preprocessing-options), Up: [GNU Fortran Command Options](invoking-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 2.4 Options to request or suppress errors and warnings [¶](#Options-to-request-or-suppress-errors-and-warnings)\n\nErrors are diagnostic messages that report that the GNU Fortran compiler cannot compile the relevant piece of source code. The compiler will continue to process the program in an attempt to report further errors to aid in debugging, but will not produce any compiled output.\n\nWarnings are diagnostic messages that report constructions which are not inherently erroneous but which are risky or suggest there is likely to be a bug in the program. Unless `-Werror` is specified, they do not prevent compilation of the program.\n\nYou can request many specific warnings with options beginning `-W`, for example `-Wimplicit` to request warnings on implicit declarations. Each of these specific warning options also has a negative form beginning `-Wno-` to turn off warnings; for example, `-Wno-implicit`. This manual lists only one of the two forms, whichever is not the default.\n\nThese options control the amount and kinds of errors and warnings produced by GNU Fortran:\n\n`-fmax-errors=``n` [¶](#index-fmax-errors_003dn)  \nLimits the maximum number of error messages to `n`, at which point GNU Fortran bails out rather than attempting to continue processing the source code. If `n` is 0, there is no limit on the number of error messages produced.\n\n`-fsyntax-only` [¶](#index-fsyntax-only)  \nCheck the code for syntax errors, but do not actually compile it. This will generate module files for each module present in the code, but no other output file.\n\n`-Wpedantic` [¶](#index-pedantic)  \n`-pedantic`  \nIssue warnings for uses of extensions to Fortran. `-pedantic` also applies to C-language constructs where they occur in GNU Fortran source files, such as use of ‘`\\e`’ in a character constant within a directive like `#include`.\n\nValid Fortran programs should compile properly with or without this option. However, without this option, certain GNU extensions and traditional Fortran features are supported as well. With this option, many of them are rejected.\n\nSome users try to use `-pedantic` to check programs for conformance. They soon find that it does not do quite what they want—it finds some nonstandard practices, but not all. However, improvements to GNU Fortran in this area are welcome.\n\nThis should be used in conjunction with `-std=f95`, `-std=f2003`, `-std=f2008` or `-std=f2018`.\n\n`-pedantic-errors` [¶](#index-pedantic-errors)  \nLike `-pedantic`, except that errors are produced rather than warnings.\n\n`-Wall` [¶](#index-Wall)  \nEnables commonly used warning options pertaining to usage that we recommend avoiding and that we believe are easy to avoid. This currently includes `-Waliasing`, `-Wampersand`, `-Wconversion`, `-Wsurprising`, `-Wc-binding-type`, `-Wintrinsics-std`, `-Wtabs`, `-Wintrinsic-shadow`, `-Wline-truncation`, `-Wtarget-lifetime`, `-Winteger-division`, `-Wreal-q-constant`, `-Wunused` and `-Wundefined-do-loop`.\n\n`-Waliasing` [¶](#index-Waliasing)  \nWarn about possible aliasing of dummy arguments. Specifically, it warns if the same actual argument is associated with a dummy argument with `INTENT(IN)` and a dummy argument with `INTENT(OUT)` in a call with an explicit interface.\n\nThe following example will trigger the warning.\n\n``` example-preformatted\ninterface\n  subroutine bar(a,b)\n    integer, intent(in) :: a\n    integer, intent(out) :: b\n  end subroutine\nend interface\ninteger :: a\n\ncall bar(a,a)\n```\n\n`-Wampersand` [¶](#index-Wampersand)  \nWarn about missing ampersand in continued character constants. The warning is given with `-Wampersand`, `-pedantic`, `-std=f95`, `-std=f2003`, `-std=f2008` and `-std=f2018`. Note: With no ampersand given in a continued character constant, GNU Fortran assumes continuation at the first non-comment, non-whitespace character after the ampersand that initiated the continuation.\n\n`-Warray-temporaries` [¶](#index-Warray-temporaries)  \nWarn about array temporaries generated by the compiler. The information generated by this warning is sometimes useful in optimization, in order to avoid such temporaries.\n\n`-Wc-binding-type` [¶](#index-Wc-binding-type)  \nWarn if the a variable might not be C interoperable. In particular, warn if the variable has been declared using an intrinsic type with default kind instead of using a kind parameter defined for C interoperability in the intrinsic `ISO_C_Binding` module. This option is implied by `-Wall`.\n\n`-Wcharacter-truncation` [¶](#index-Wcharacter-truncation)  \nWarn when a character assignment will truncate the assigned string.\n\n`-Wline-truncation` [¶](#index-Wline-truncation)  \nWarn when a source code line will be truncated. This option is implied by `-Wall`. For free-form source code, the default is `-Werror=line-truncation` such that truncations are reported as error.\n\n`-Wconversion` [¶](#index-Wconversion)  \nWarn about implicit conversions that are likely to change the value of the expression after conversion. Implied by `-Wall`.\n\n`-Wconversion-extra` [¶](#index-Wconversion-extra)  \nWarn about implicit conversions between different types and kinds. This option does *not* imply `-Wconversion`.\n\n`-Wextra` [¶](#index-Wextra)  \nEnables some warning options for usages of language features which may be problematic. This currently includes `-Wcompare-reals`, `-Wunused-parameter` and `-Wdo-subscript`.\n\n`-Wfrontend-loop-interchange` [¶](#index-Wfrontend-loop-interchange)  \nWarn when using `-ffrontend-loop-interchange` for performing loop interchanges.\n\n`-Wimplicit-interface` [¶](#index-Wimplicit-interface)  \nWarn if a procedure is called without an explicit interface. Note this only checks that an explicit interface is present. It does not check that the declared interfaces are consistent across program units.\n\n`-Wimplicit-procedure` [¶](#index-Wimplicit-procedure)  \nWarn if a procedure is called that has neither an explicit interface nor has been declared as `EXTERNAL`.\n\n`-Winteger-division` [¶](#index-Winteger-division)  \nWarn if a constant integer division truncates its result. As an example, 3/5 evaluates to 0.\n\n`-Wintrinsics-std` [¶](#index-Wintrinsics-std)  \nWarn if `gfortran` finds a procedure named like an intrinsic not available in the currently selected standard (with `-std`) and treats it as `EXTERNAL` procedure because of this. `-fall-intrinsics` can be used to never trigger this behavior and always link to the intrinsic regardless of the selected standard.\n\n`-Wno-overwrite-recursive` [¶](#index-Woverwrite-recursive)  \nDo not warn when `-fno-automatic` is used with `-frecursive`. Recursion will be broken if the relevant local variables do not have the attribute `AUTOMATIC` explicitly declared. This option can be used to suppress the warning when it is known that recursion is not broken. Useful for build environments that use `-Werror`.\n\n`-Wreal-q-constant` [¶](#index-Wreal-q-constant)  \nProduce a warning if a real-literal-constant contains a `q` exponent-letter.\n\n`-Wsurprising` [¶](#index-Wsurprising)  \nProduce a warning when “suspicious” code constructs are encountered. While technically legal these usually indicate that an error has been made.\n\nThis currently produces a warning under the following circumstances:\n\n- An INTEGER SELECT construct has a CASE that can never be matched as its lower value is greater than its upper value.\n- A LOGICAL SELECT construct has three CASE statements.\n- A TRANSFER specifies a source that is shorter than the destination.\n- The type of a function result is declared more than once with the same type. If `-pedantic` or standard-conforming mode is enabled, this is an error.\n- A `CHARACTER` variable is declared with negative length.\n- With `-fopenmp`, for fixed-form source code, when an `omx` vendor-extension sentinel is encountered. (The equivalent `ompx`, used in free-form source code, is diagnosed by default.)\n\n`-Wtabs` [¶](#index-Wtabs)  \nBy default, tabs are accepted as whitespace, but tabs are not members of the Fortran Character Set. For continuation lines, a tab followed by a digit between 1 and 9 is supported. `-Wtabs` will cause a warning to be issued if a tab is encountered. Note, `-Wtabs` is active for `-pedantic`, `-std=f95`, `-std=f2003`, `-std=f2008`, `-std=f2018` and `-Wall`.\n\n`-Wundefined-do-loop` [¶](#index-Wundefined-do-loop)  \nWarn if a DO loop with step either 1 or -1 yields an underflow or an overflow during iteration of an induction variable of the loop. This option is implied by `-Wall`.\n\n`-Wunderflow` [¶](#index-Wunderflow)  \nProduce a warning when numerical constant expressions are encountered, which yield an UNDERFLOW during compilation. Enabled by default.\n\n`-Wintrinsic-shadow` [¶](#index-Wintrinsic-shadow)  \nWarn if a user-defined procedure or module procedure has the same name as an intrinsic; in this case, an explicit interface or `EXTERNAL` or `INTRINSIC` declaration might be needed to get calls later resolved to the desired intrinsic/procedure. This option is implied by `-Wall`.\n\n`-Wuse-without-only` [¶](#index-Wuse-without-only)  \nWarn if a `USE` statement has no `ONLY` qualifier and thus implicitly imports all public entities of the used module.\n\n`-Wunused-dummy-argument` [¶](#index-Wunused-dummy-argument)  \nWarn about unused dummy arguments. This option is implied by `-Wall`.\n\n`-Wunused-parameter` [¶](#index-Wunused-parameter)  \nContrary to `gcc`’s meaning of `-Wunused-parameter`, `gfortran`’s implementation of this option does not warn about unused dummy arguments (see `-Wunused-dummy-argument`), but about unused `PARAMETER` values. `-Wunused-parameter` is implied by `-Wextra` if also `-Wunused` or `-Wall` is used.\n\n`-Walign-commons` [¶](#index-Walign-commons)  \nBy default, `gfortran` warns about any occasion of variables being padded for proper alignment inside a `COMMON` block. This warning can be turned off via `-Wno-align-commons`. See also `-falign-commons`.\n\n`-Wfunction-elimination` [¶](#index-Wfunction-elimination)  \nWarn if any calls to impure functions are eliminated by the optimizations enabled by the `-ffrontend-optimize` option. This option is implied by `-Wextra`.\n\n`-Wrealloc-lhs` [¶](#index-Wrealloc-lhs)  \nWarn when the compiler might insert code to for allocation or reallocation of an allocatable array variable of intrinsic type in intrinsic assignments. In hot loops, the Fortran 2003 reallocation feature may reduce the performance. If the array is already allocated with the correct shape, consider using a whole-array array-spec (e.g. `(:,:,:)`) for the variable on the left-hand side to prevent the reallocation check. Note that in some cases the warning is shown, even if the compiler will optimize reallocation checks away. For instance, when the right-hand side contains the same variable multiplied by a scalar. See also `-frealloc-lhs`.\n\n`-Wrealloc-lhs-all` [¶](#index-Wrealloc-lhs-all)  \nWarn when the compiler inserts code to for allocation or reallocation of an allocatable variable; this includes scalars and derived types.\n\n`-Wcompare-reals` [¶](#index-Wcompare-reals)  \nWarn when comparing real or complex types for equality or inequality. This option is implied by `-Wextra`.\n\n`-Wtarget-lifetime` [¶](#index-Wtargt-lifetime)  \nWarn if the pointer in a pointer assignment might be longer than the its target. This option is implied by `-Wall`.\n\n`-Wzerotrip` [¶](#index-Wzerotrip)  \nWarn if a `DO` loop is known to execute zero times at compile time. This option is implied by `-Wall`.\n\n`-Wdo-subscript` [¶](#index-Wdo-subscript)  \nWarn if an array subscript inside a DO loop could lead to an out-of-bounds access even if the compiler cannot prove that the statement is actually executed, in cases like\n\n``` example-preformatted\nreal a(3)\ndo i=1,4\n  if (condition(i)) then\n    a(i) = 1.2\n  end if\nend do\n```\n\nThis option is implied by `-Wextra`.\n\n`-Werror` [¶](#index-Werror)  \nTurns all warnings into errors.\n\nSee [Options to Request or Suppress Errors and Warnings](https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#Warning-Options) in Using the GNU Compiler Collection (GCC), for information on more options offered by the GBE shared by `gfortran`, `gcc` and other GNU compilers.\n\nSome of these have no effect when compiling programs written in Fortran.\n\nNext: [Options for debugging your program or GNU Fortran](debugging-options), Previous: [Enable and customize preprocessing](preprocessing-options), Up: [GNU Fortran Command Options](invoking-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Error-and-Warning-Options.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Error-and-Warning-Options.html)"
- name: 2.5. Options for debugging your program or GNU Fortran ¶
  id: debugging-options
  summary: GNU Fortran has various special options that are used for debugging either your program or the GNU Fortran compiler
  description: "Next: [Options for directory search](directory-options), Previous: [Options to request or suppress errors and warnings](error-and-warning-options), Up: [GNU Fortran Command Options](invoking-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 2.5 Options for debugging your program or GNU Fortran [¶](#Options-for-debugging-your-program-or-GNU-Fortran)\n\nGNU Fortran has various special options that are used for debugging either your program or the GNU Fortran compiler.\n\n`-fdump-fortran-original` [¶](#index-fdump-fortran-original)  \nOutput the internal parse tree after translating the source program into internal representation. This option is mostly useful for debugging the GNU Fortran compiler itself. The output generated by this option might change between releases. This option may also generate internal compiler errors for features which have only recently been added.\n\n`-fdump-fortran-optimized` [¶](#index-fdump-fortran-optimized)  \nOutput the parse tree after front-end optimization. Mostly useful for debugging the GNU Fortran compiler itself. The output generated by this option might change between releases. This option may also generate internal compiler errors for features which have only recently been added.\n\n`-fdump-parse-tree` [¶](#index-fdump-parse-tree)  \nOutput the internal parse tree after translating the source program into internal representation. Mostly useful for debugging the GNU Fortran compiler itself. The output generated by this option might change between releases. This option may also generate internal compiler errors for features which have only recently been added. This option is deprecated; use `-fdump-fortran-original` instead.\n\n`-fdebug-aux-vars` [¶](#index-fdebug-aux-vars)  \nRenames internal variables created by the gfortran front end and makes them accessible to a debugger. The name of the internal variables then start with upper-case letters followed by an underscore. This option is useful for debugging the compiler’s code generation together with `-fdump-tree-original` and enabling debugging of the executable program by using `-g` or `-ggdb3`.\n\n`-fdump-fortran-global` [¶](#index-fdump-fortran-global)  \nOutput a list of the global identifiers after translating into middle-end representation. Mostly useful for debugging the GNU Fortran compiler itself. The output generated by this option might change between releases. This option may also generate internal compiler errors for features which have only recently been added.\n\n`-ffpe-trap=``list` [¶](#index-ffpe-trap_003dlist)  \nSpecify a list of floating point exception traps to enable. On most systems, if a floating point exception occurs and the trap for that exception is enabled, a SIGFPE signal will be sent and the program being aborted, producing a core file useful for debugging. `list` is a (possibly empty) comma-separated list of the following exceptions: ‘`invalid`’ (invalid floating point operation, such as `SQRT(-1.0)`), ‘`zero`’ (division by zero), ‘`overflow`’ (overflow in a floating point operation), ‘`underflow`’ (underflow in a floating point operation), ‘`inexact`’ (loss of precision during operation), and ‘`denormal`’ (operation performed on a denormal value). The first five exceptions correspond to the five IEEE 754 exceptions, whereas the last one (‘`denormal`’) is not part of the IEEE 754 standard but is available on some common architectures such as x86.\n\nThe first three exceptions (‘`invalid`’, ‘`zero`’, and ‘`overflow`’) often indicate serious errors, and unless the program has provisions for dealing with these exceptions, enabling traps for these three exceptions is probably a good idea.\n\nIf the option is used more than once in the command line, the lists will be joined: ’`ffpe-trap=``list1` `ffpe-trap=``list2`’ is equivalent to `ffpe-trap=``list1`,`list2`.\n\nNote that once enabled an exception cannot be disabled (no negative form).\n\nMany, if not most, floating point operations incur loss of precision due to rounding, and hence the `ffpe-trap=inexact` is likely to be uninteresting in practice.\n\nBy default no exception traps are enabled.\n\n`-ffpe-summary=``list` [¶](#index-ffpe-summary_003dlist)  \nSpecify a list of floating-point exceptions, whose flag status is printed to `ERROR_UNIT` when invoking `STOP` and `ERROR STOP`. `list` can be either ‘`none`’, ‘`all`’ or a comma-separated list of the following exceptions: ‘`invalid`’, ‘`zero`’, ‘`overflow`’, ‘`underflow`’, ‘`inexact`’ and ‘`denormal`’. (See `-ffpe-trap` for a description of the exceptions.)\n\nIf the option is used more than once in the command line, only the last one will be used.\n\nBy default, a summary for all exceptions but ‘`inexact`’ is shown.\n\n`-fno-backtrace` [¶](#index-fno-backtrace)  \nWhen a serious runtime error is encountered or a deadly signal is emitted (segmentation fault, illegal instruction, bus error, floating-point exception, and the other POSIX signals that have the action ‘`core`’), the Fortran runtime library tries to output a backtrace of the error. `-fno-backtrace` disables the backtrace generation. This option only has influence for compilation of the Fortran main program.\n\nSee [Options for Debugging Your Program or GCC](https://gcc.gnu.org/onlinedocs/gcc/Debugging-Options.html#Debugging-Options) in Using the GNU Compiler Collection (GCC), for more information on debugging options.\n\nNext: [Options for directory search](directory-options), Previous: [Options to request or suppress errors and warnings](error-and-warning-options), Up: [GNU Fortran Command Options](invoking-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Debugging-Options.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Debugging-Options.html)"
- name: 2.6. Options for directory search ¶
  id: directory-options
  summary: These options affect how GNU Fortran searches for files specified by the INCLUDE directive and where it searches for previously compiled modules
  description: "Next: [Influencing the linking step](link-options), Previous: [Options for debugging your program or GNU Fortran](debugging-options), Up: [GNU Fortran Command Options](invoking-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 2.6 Options for directory search [¶](#Options-for-directory-search)\n\nThese options affect how GNU Fortran searches for files specified by the `INCLUDE` directive and where it searches for previously compiled modules.\n\nIt also affects the search paths used by `cpp` when used to preprocess Fortran source.\n\n`-I``dir` [¶](#index-Idir)  \nThese affect interpretation of the `INCLUDE` directive (as well as of the `#include` directive of the `cpp` preprocessor).\n\nAlso note that the general behavior of `-I` and `INCLUDE` is pretty much the same as of `-I` with `#include` in the `cpp` preprocessor, with regard to looking for `header.gcc` files and other such things.\n\nThis path is also used to search for `.mod` files when previously compiled modules are required by a `USE` statement.\n\nSee [Options for Directory Search](https://gcc.gnu.org/onlinedocs/gcc/Directory-Options.html#Directory-Options) in Using the GNU Compiler Collection (GCC), for information on the `-I` option.\n\n`-J``dir` [¶](#index-Jdir)  \nThis option specifies where to put `.mod` files for compiled modules. It is also added to the list of directories to searched by an `USE` statement.\n\nThe default is the current directory.\n\n`-fintrinsic-modules-path ``dir` [¶](#index-fintrinsic-modules-path-dir)  \nThis option specifies the location of pre-compiled intrinsic modules, if they are not in the default location expected by the compiler.\n\nNext: [Influencing the linking step](link-options), Previous: [Options for debugging your program or GNU Fortran](debugging-options), Up: [GNU Fortran Command Options](invoking-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Directory-Options.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Directory-Options.html)"
- name: 2.7. Influencing the linking step ¶
  id: link-options
  summary: These options come into play when the compiler links object files into an executable output file
  description: "Next: [Influencing runtime behavior](runtime-options), Previous: [Options for directory search](directory-options), Up: [GNU Fortran Command Options](invoking-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 2.7 Influencing the linking step [¶](#Influencing-the-linking-step)\n\nThese options come into play when the compiler links object files into an executable output file. They are meaningless if the compiler is not doing a link step.\n\n`-static-libgfortran` [¶](#index-static-libgfortran)  \nOn systems that provide `libgfortran` as a shared and a static library, this option forces the use of the static version. If no shared version of `libgfortran` was built when the compiler was configured, this option has no effect.\n\n`-static-libquadmath` [¶](#index-static-libquadmath)  \nOn systems that provide `libquadmath` as a shared and a static library, this option forces the use of the static version. If no shared version of `libquadmath` was built when the compiler was configured, this option has no effect.\n\nPlease note that the `libquadmath` runtime library is licensed under the GNU Lesser General Public License (LGPL), and linking it statically introduces requirements when redistributing the resulting binaries.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Link-Options.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Link-Options.html)"
- name: 2.8. Influencing runtime behavior ¶
  id: runtime-options
  summary: These options affect the runtime behavior of programs compiled with GNU Fortran
  description: "Next: [Options for code generation conventions](code-gen-options), Previous: [Influencing the linking step](link-options), Up: [GNU Fortran Command Options](invoking-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 2.8 Influencing runtime behavior [¶](#Influencing-runtime-behavior)\n\nThese options affect the runtime behavior of programs compiled with GNU Fortran.\n\n`-fconvert=``conversion` [¶](#index-fconvert_003dconversion)  \nSpecify the representation of data for unformatted files. Valid values for conversion on most systems are: ‘`native`’, the default; ‘`swap`’, swap between big- and little-endian; ‘`big-endian`’, use big-endian representation for unformatted files; ‘`little-endian`’, use little-endian representation for unformatted files.\n\nOn POWER systems which suppport `-mabi=ieeelongdouble`, there are additional options, which can be combined with others with commas. Those are\n\n- `-fconvert=r16_ieee` Use IEEE 128-bit format for `REAL(KIND=16)`.\n- `-fconvert=r16_ibm` Use IBM long double format for `REAL(KIND=16)`.\n\n*This option has an effect only when used in the main program. The `CONVERT` specifier and the GFORTRAN_CONVERT_UNIT environment variable override the default specified by `-fconvert`.*\n\n`-frecord-marker=``length` [¶](#index-frecord-marker_003dlength)  \nSpecify the length of record markers for unformatted files. Valid values for `length` are 4 and 8. Default is 4. *This is different from previous versions of `gfortran`*, which specified a default record marker length of 8 on most systems. If you want to read or write files compatible with earlier versions of `gfortran`, use `-frecord-marker=8`.\n\n`-fmax-subrecord-length=``length` [¶](#index-fmax-subrecord-length_003dlength)  \nSpecify the maximum length for a subrecord. The maximum permitted value for length is 2147483639, which is also the default. Only really useful for use by the gfortran testsuite.\n\n`-fsign-zero` [¶](#index-fsign-zero)  \nWhen enabled, floating point numbers of value zero with the sign bit set are written as negative number in formatted output and treated as negative in the `SIGN` intrinsic. `-fno-sign-zero` does not print the negative sign of zero values (or values rounded to zero for I/O) and regards zero as positive number in the `SIGN` intrinsic for compatibility with Fortran 77. The default is `-fsign-zero`.\n\nNext: [Options for code generation conventions](code-gen-options), Previous: [Influencing the linking step](link-options), Up: [GNU Fortran Command Options](invoking-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Runtime-Options.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Runtime-Options.html)"
- name: 2.9. Options for code generation conventions ¶
  id: code-gen-options
  summary: These machine-independent options control the interface conventions used in code generation
  description: "Next: [Options for interoperability with other languages](interoperability-options), Previous: [Influencing runtime behavior](runtime-options), Up: [GNU Fortran Command Options](invoking-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 2.9 Options for code generation conventions [¶](#Options-for-code-generation-conventions)\n\nThese machine-independent options control the interface conventions used in code generation.\n\nMost of them have both positive and negative forms; the negative form of `-ffoo` would be `-fno-foo`. In the table below, only one of the forms is listed—the one which is not the default. You can figure out the other form by either removing `no-` or adding it.\n\n`-fno-automatic` [¶](#index-fno-automatic)  \nTreat each program unit (except those marked as RECURSIVE) as if the `SAVE` statement were specified for every local variable and array referenced in it. Does not affect common blocks. (Some Fortran compilers provide this option under the name `-static` or `-save`.) The default, which is `-fautomatic`, uses the stack for local variables smaller than the value given by `-fmax-stack-var-size`. Use the option `-frecursive` to use no static memory.\n\nLocal variables or arrays having an explicit `SAVE` attribute are silently ignored unless the `-pedantic` option is added.\n\n`-ff2c` [¶](#index-ff2c)  \nGenerate code designed to be compatible with code generated by `g77` and `f2c`.\n\nThe calling conventions used by `g77` (originally implemented in `f2c`) require functions that return type default `REAL` to actually return the C type `double`, and functions that return type `COMPLEX` to return the values via an extra argument in the calling sequence that points to where to store the return value. Under the default GNU calling conventions, such functions simply return their results as they would in GNU C—default `REAL` functions return the C type `float`, and `COMPLEX` functions return the GNU C type `complex`. Additionally, this option implies the `-fsecond-underscore` option, unless `-fno-second-underscore` is explicitly requested.\n\nThis does not affect the generation of code that interfaces with the `libgfortran` library.\n\n*Caution:* It is not a good idea to mix Fortran code compiled with `-ff2c` with code compiled with the default `-fno-f2c` calling conventions as, calling `COMPLEX` or default `REAL` functions between program parts which were compiled with different calling conventions will break at execution time.\n\n*Caution:* This will break code which passes intrinsic functions of type default `REAL` or `COMPLEX` as actual arguments, as the library implementations use the `-fno-f2c` calling conventions.\n\n`-fno-underscoring` [¶](#index-fno-underscoring)  \nDo not transform names of entities specified in the Fortran source file by appending underscores to them.\n\nWith `-funderscoring` in effect, GNU Fortran appends one underscore to external names. This is done to ensure compatibility with code produced by many UNIX Fortran compilers.\n\n*Caution*: The default behavior of GNU Fortran is incompatible with `f2c` and `g77`, please use the `-ff2c` option if you want object files compiled with GNU Fortran to be compatible with object code created with these tools.\n\nUse of `-fno-underscoring` is not recommended unless you are experimenting with issues such as integration of GNU Fortran into existing system environments (vis-à-vis existing libraries, tools, and so on).\n\nFor example, with `-funderscoring`, and assuming that `j()` and `max_count()` are external functions while `my_var` and `lvar` are local variables, a statement like\n\n``` example-preformatted\nI = J() + MAX_COUNT (MY_VAR, LVAR)\n```\n\nis implemented as something akin to:\n\n``` example-preformatted\ni = j_() + max_count_(&my_var, &lvar);\n```\n\nWith `-fno-underscoring`, the same statement is implemented as:\n\n``` example-preformatted\ni = j() + max_count(&my_var, &lvar);\n```\n\nUse of `-fno-underscoring` allows direct specification of user-defined names while debugging and when interfacing GNU Fortran code with other languages.\n\nNote that just because the names match does *not* mean that the interface implemented by GNU Fortran for an external name matches the interface implemented by some other language for that same name. That is, getting code produced by GNU Fortran to link to code produced by some other compiler using this or any other method can be only a small part of the overall solution—getting the code generated by both compilers to agree on issues other than naming can require significant effort, and, unlike naming disagreements, linkers normally cannot detect disagreements in these other areas.\n\nAlso, note that with `-fno-underscoring`, the lack of appended underscores introduces the very real possibility that a user-defined external name will conflict with a name in a system library, which could make finding unresolved-reference bugs quite difficult in some cases—they might occur at program run time, and show up only as buggy behavior at run time.\n\nIn future versions of GNU Fortran we hope to improve naming and linking issues so that debugging always involves using the names as they appear in the source, even if the names as seen by the linker are mangled to prevent accidental linking between procedures with incompatible interfaces.\n\n`-fsecond-underscore` [¶](#index-fsecond-underscore)  \nBy default, GNU Fortran appends an underscore to external names. If this option is used GNU Fortran appends two underscores to names with underscores and one underscore to external names with no underscores. GNU Fortran also appends two underscores to internal names with underscores to avoid naming collisions with external names.\n\nThis option has no effect if `-fno-underscoring` is in effect. It is implied by the `-ff2c` option.\n\nOtherwise, with this option, an external name such as `MAX_COUNT` is implemented as a reference to the link-time external symbol `max_count__`, instead of `max_count_`. This is required for compatibility with `g77` and `f2c`, and is implied by use of the `-ff2c` option.\n\n`-fcoarray=``<keyword>` [¶](#index-fcoarray)  \n‘`none`’  \nDisable coarray support; using coarray declarations and image-control statements will produce a compile-time error. (Default)\n\n‘`single`’  \nSingle-image mode, i.e. `num_images()` is always one.\n\n‘`lib`’  \nLibrary-based coarray parallelization; a suitable GNU Fortran coarray library needs to be linked.\n\n`-fcheck=``<keyword>` [¶](#index-fcheck)  \nEnable the generation of run-time checks; the argument shall be a comma-delimited list of the following keywords. Prefixing a check with `no-` disables it if it was activated by a previous specification.\n\n‘`all`’  \nEnable all run-time test of `-fcheck`.\n\n‘`array-temps`’  \nWarns at run time when for passing an actual argument a temporary array had to be generated. The information generated by this warning is sometimes useful in optimization, in order to avoid such temporaries.\n\nNote: The warning is only printed once per location.\n\n‘`bits`’  \nEnable generation of run-time checks for invalid arguments to the bit manipulation intrinsics.\n\n‘`bounds`’  \nEnable generation of run-time checks for array subscripts and against the declared minimum and maximum values. It also checks array indices for assumed and deferred shape arrays against the actual allocated bounds and ensures that all string lengths are equal for character array constructors without an explicit typespec.\n\nSome checks require that `-fcheck=bounds` is set for the compilation of the main program.\n\nNote: In the future this may also include other forms of checking, e.g., checking substring references.\n\n‘`do`’  \nEnable generation of run-time checks for invalid modification of loop iteration variables.\n\n‘`mem`’  \nEnable generation of run-time checks for memory allocation. Note: This option does not affect explicit allocations using the `ALLOCATE` statement, which will be always checked.\n\n‘`pointer`’  \nEnable generation of run-time checks for pointers and allocatables.\n\n‘`recursion`’  \nEnable generation of run-time checks for recursively called subroutines and functions which are not marked as recursive. See also `-frecursive`. Note: This check does not work for OpenMP programs and is disabled if used together with `-frecursive` and `-fopenmp`.\n\nExample: Assuming you have a file `foo.f90`, the command\n\n``` example-preformatted\ngfortran -fcheck=all,no-array-temps foo.f90\n```\n\nwill compile the file with all checks enabled as specified above except warnings for generated array temporaries.\n\n`-fbounds-check` [¶](#index-fbounds-check)  \nDeprecated alias for `-fcheck=bounds`.\n\n`-ftail-call-workaround` [¶](#index-tail-call-workaround)  \n`-ftail-call-workaround=``n`  \nSome C interfaces to Fortran codes violate the gfortran ABI by omitting the hidden character length arguments as described in See [Argument passing conventions](argument-passing-conventions). This can lead to crashes because pushing arguments for tail calls can overflow the stack.\n\nTo provide a workaround for existing binary packages, this option disables tail call optimization for gfortran procedures with character arguments. With `-ftail-call-workaround=2` tail call optimization is disabled in all gfortran procedures with character arguments, with `-ftail-call-workaround=1` or equivalent `-ftail-call-workaround` only in gfortran procedures with character arguments that call implicitly prototyped procedures.\n\nUsing this option can lead to problems including crashes due to insufficient stack space.\n\nIt is *very strongly* recommended to fix the code in question. The `-fc-prototypes-external` option can be used to generate prototypes which conform to gfortran’s ABI, for inclusion in the source code.\n\nSupport for this option will likely be withdrawn in a future release of gfortran.\n\nThe negative form, `-fno-tail-call-workaround` or equivalent `-ftail-call-workaround=0`, can be used to disable this option.\n\nDefault is currently `-ftail-call-workaround`, this will change in future releases.\n\n`-fcheck-array-temporaries` [¶](#index-fcheck-array-temporaries)  \nDeprecated alias for `-fcheck=array-temps`.\n\n`-fmax-array-constructor=``n` [¶](#index-fmax-array-constructor)  \nThis option can be used to increase the upper limit permitted in array constructors. The code below requires this option to expand the array at compile time.\n\n``` example-preformatted\nprogram test\nimplicit none\ninteger j\ninteger, parameter :: n = 100000\ninteger, parameter :: i(n) = (/ (2*j, j = 1, n) /)\nprint '(10(I0,1X))', i\nend program test\n```\n\n*Caution: This option can lead to long compile times and excessively large object files.*\n\nThe default value for `n` is 65535.\n\n`-fmax-stack-var-size=``n` [¶](#index-fmax-stack-var-size)  \nThis option specifies the size in bytes of the largest array that will be put on the stack; if the size is exceeded static memory is used (except in procedures marked as RECURSIVE). Use the option `-frecursive` to allow for recursive procedures which do not have a RECURSIVE attribute or for parallel programs. Use `-fno-automatic` to never use the stack.\n\nThis option currently only affects local arrays declared with constant bounds, and may not apply to all character variables. Future versions of GNU Fortran may improve this behavior.\n\nThe default value for `n` is 65536.\n\n`-fstack-arrays` [¶](#index-fstack-arrays)  \nAdding this option will make the Fortran compiler put all arrays of unknown size and array temporaries onto stack memory. If your program uses very large local arrays it is possible that you will have to extend your runtime limits for stack memory on some operating systems. This flag is enabled by default at optimization level `-Ofast` unless `-fmax-stack-var-size` is specified.\n\n`-fpack-derived` [¶](#index-fpack-derived)  \nThis option tells GNU Fortran to pack derived type members as closely as possible. Code compiled with this option is likely to be incompatible with code compiled without this option, and may execute slower.\n\n`-frepack-arrays` [¶](#index-frepack-arrays)  \nIn some circumstances GNU Fortran may pass assumed shape array sections via a descriptor describing a noncontiguous area of memory. This option adds code to the function prologue to repack the data into a contiguous block at runtime.\n\nThis should result in faster accesses to the array. However it can introduce significant overhead to the function call, especially when the passed data is noncontiguous.\n\n`-fshort-enums` [¶](#index-fshort-enums)  \nThis option is provided for interoperability with C code that was compiled with the `-fshort-enums` option. It will make GNU Fortran choose the smallest `INTEGER` kind a given enumerator set will fit in, and give all its enumerators this kind.\n\n`-finline-arg-packing` [¶](#index-finline-arg-packing)  \nWhen passing an assumed-shape argument of a procedure as actual argument to an assumed-size or explicit size or as argument to a procedure that does not have an explicit interface, the argument may have to be packed, that is put into contiguous memory. An example is the call to `foo` in\n\n``` example-preformatted\nsubroutine foo(a)\n   real, dimension(*) :: a\nend subroutine foo\nsubroutine bar(b)\n   real, dimension(:) :: b\n   call foo(b)\nend subroutine bar\n```\n\nWhen `-finline-arg-packing` is in effect, this packing will be performed by inline code. This allows for more optimization while increasing code size.\n\n`-finline-arg-packing` is implied by any of the `-O` options except when optimizing for size via `-Os`. If the code contains a very large number of argument that have to be packed, code size and also compilation time may become excessive. If that is the case, it may be better to disable this option. Instances of packing can be found by using `-Warray-temporaries`.\n\n`-fexternal-blas` [¶](#index-fexternal-blas)  \nThis option will make `gfortran` generate calls to BLAS functions for some matrix operations like `MATMUL`, instead of using our own algorithms, if the size of the matrices involved is larger than a given limit (see `-fblas-matmul-limit`). This may be profitable if an optimized vendor BLAS library is available. The BLAS library will have to be specified at link time.\n\n`-fblas-matmul-limit=``n` [¶](#index-fblas-matmul-limit)  \nOnly significant when `-fexternal-blas` is in effect. Matrix multiplication of matrices with size larger than (or equal to) `n` will be performed by calls to BLAS functions, while others will be handled by `gfortran` internal algorithms. If the matrices involved are not square, the size comparison is performed using the geometric mean of the dimensions of the argument and result matrices.\n\nThe default value for `n` is 30.\n\n`-finline-matmul-limit=``n` [¶](#index-finline-matmul-limit)  \nWhen front-end optimization is active, some calls to the `MATMUL` intrinsic function will be inlined. This may result in code size increase if the size of the matrix cannot be determined at compile time, as code for both cases is generated. Setting `-finline-matmul-limit=0` will disable inlining in all cases. Setting this option with a value of `n` will produce inline code for matrices with size up to `n`. If the matrices involved are not square, the size comparison is performed using the geometric mean of the dimensions of the argument and result matrices.\n\nThe default value for `n` is 30. The `-fblas-matmul-limit` can be used to change this value.\n\n`-frecursive` [¶](#index-frecursive)  \nAllow indirect recursion by forcing all local arrays to be allocated on the stack. This flag cannot be used together with `-fmax-stack-var-size=` or `-fno-automatic`.\n\n`-finit-local-zero` [¶](#index-finit-local-zero)  \n`-finit-derived`  \n`-finit-integer=``n`  \n`-finit-real=``<zero|inf|-inf|nan|snan>`  \n`-finit-logical=``<true|false>`  \n`-finit-character=``n`  \nThe `-finit-local-zero` option instructs the compiler to initialize local `INTEGER`, `REAL`, and `COMPLEX` variables to zero, `LOGICAL` variables to false, and `CHARACTER` variables to a string of null bytes. Finer-grained initialization options are provided by the `-finit-integer=``n`, `-finit-real=``<zero|inf|-inf|nan|snan>` (which also initializes the real and imaginary parts of local `COMPLEX` variables), `-finit-logical=``<true|false>`, and `-finit-character=``n` (where `n` is an ASCII character value) options.\n\nWith `-finit-derived`, components of derived type variables will be initialized according to these flags. Components whose type is not covered by an explicit `-finit-*` flag will be treated as described above with `-finit-local-zero`.\n\nThese options do not initialize\n\n- objects with the POINTER attribute\n- allocatable arrays\n- variables that appear in an `EQUIVALENCE` statement.\n\n(These limitations may be removed in future releases).\n\nNote that the `-finit-real=nan` option initializes `REAL` and `COMPLEX` variables with a quiet NaN. For a signalling NaN use `-finit-real=snan`; note, however, that compile-time optimizations may convert them into quiet NaN and that trapping needs to be enabled (e.g. via `-ffpe-trap`).\n\nThe `-finit-integer` option will parse the value into an integer of type `INTEGER(kind=C_LONG)` on the host. Said value is then assigned to the integer variables in the Fortran code, which might result in wraparound if the value is too large for the kind.\n\nFinally, note that enabling any of the `-finit-*` options will silence warnings that would have been emitted by `-Wuninitialized` for the affected local variables.\n\n`-falign-commons` [¶](#index-falign-commons)  \nBy default, `gfortran` enforces proper alignment of all variables in a `COMMON` block by padding them as needed. On certain platforms this is mandatory, on others it increases performance. If a `COMMON` block is not declared with consistent data types everywhere, this padding can cause trouble, and `-fno-align-commons` can be used to disable automatic alignment. The same form of this option should be used for all files that share a `COMMON` block. To avoid potential alignment issues in `COMMON` blocks, it is recommended to order objects from largest to smallest.\n\n`-fno-protect-parens` [¶](#index-fno-protect-parens)  \nBy default the parentheses in expression are honored for all optimization levels such that the compiler does not do any re-association. Using `-fno-protect-parens` allows the compiler to reorder `REAL` and `COMPLEX` expressions to produce faster code. Note that for the re-association optimization `-fno-signed-zeros` and `-fno-trapping-math` need to be in effect. The parentheses protection is enabled by default, unless `-Ofast` is given.\n\n`-frealloc-lhs` [¶](#index-frealloc-lhs)  \nAn allocatable left-hand side of an intrinsic assignment is automatically (re)allocated if it is either unallocated or has a different shape. The option is enabled by default except when `-std=f95` is given. See also `-Wrealloc-lhs`.\n\n`-faggressive-function-elimination` [¶](#index-faggressive-function-elimination)  \nFunctions with identical argument lists are eliminated within statements, regardless of whether these functions are marked `PURE` or not. For example, in\n\n``` example-preformatted\na = f(b,c) + f(b,c)\n```\n\nthere will only be a single call to `f`. This option only works if `-ffrontend-optimize` is in effect.\n\n`-ffrontend-optimize` [¶](#index-frontend-optimize)  \nThis option performs front-end optimization, based on manipulating parts the Fortran parse tree. Enabled by default by any `-O` option except `-O0` and `-Og`. Optimizations enabled by this option include:\n\n- inlining calls to `MATMUL`,\n- elimination of identical function calls within expressions,\n- removing unnecessary calls to `TRIM` in comparisons and assignments,\n- replacing `TRIM(a)` with `a(1:LEN_TRIM(a))` and\n- short-circuiting of logical operators (`.AND.` and `.OR.`).\n\nIt can be deselected by specifying `-fno-frontend-optimize`.\n\n`-ffrontend-loop-interchange` [¶](#index-frontend-loop-interchange)  \nAttempt to interchange loops in the Fortran front end where profitable. Enabled by default by any `-O` option. At the moment, this option only affects `FORALL` and `DO CONCURRENT` statements with several forall triplets.\n\nSee [Options for Code Generation Conventions](https://gcc.gnu.org/onlinedocs/gcc/Code-Gen-Options.html#Code-Gen-Options) in Using the GNU Compiler Collection (GCC), for information on more options offered by the GBE shared by `gfortran`, `gcc`, and other GNU compilers.\n\nNext: [Options for interoperability with other languages](interoperability-options), Previous: [Influencing runtime behavior](runtime-options), Up: [GNU Fortran Command Options](invoking-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Code-Gen-Options.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Code-Gen-Options.html)"
- name: 2.10. Options for interoperability with other languages ¶
  id: interoperability-options
  summary: -fc-prototypes ¶ This option will generate C prototypes from BIND(C) variable declarations, types and procedure interfaces and writes them to standard output
  description: "Next: [Environment variables affecting `gfortran`](environment-variables), Previous: [Options for code generation conventions](code-gen-options), Up: [GNU Fortran Command Options](invoking-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 2.10 Options for interoperability with other languages [¶](#Options-for-interoperability-with-other-languages)\n\n-fc-prototypes [¶](#index-c-prototypes)  \nThis option will generate C prototypes from `BIND(C)` variable declarations, types and procedure interfaces and writes them to standard output. `ENUM` is not yet supported.\n\nThe generated prototypes may need inclusion of an appropriate header, such as `<stdint.h>` or `<stdlib.h>`. For types which are not specified using the appropriate kind from the `iso_c_binding` module, a warning is added as a comment to the code.\n\nFor function pointers, a pointer to a function returning `int` without an explicit argument list is generated.\n\nExample of use:\n\n``` example-preformatted\n$ gfortran -fc-prototypes -fsyntax-only foo.f90 > foo.h\n```\n\nwhere the C code intended for interoperating with the Fortran code then uses `#include \"foo.h\"`.\n\n-fc-prototypes-external [¶](#index-c-prototypes-external)  \nThis option will generate C prototypes from external functions and subroutines and write them to standard output. This may be useful for making sure that C bindings to Fortran code are correct. This option does not generate prototypes for `BIND(C)` procedures, use `-fc-prototypes` for that.\n\nThe generated prototypes may need inclusion of an appropriate header, such as `<stdint.h>` or `<stdlib.h>`.\n\nThis is primarily meant for legacy code to ensure that existing C bindings match what `gfortran` emits. The generated C prototypes should be correct for the current version of the compiler, but may not match what other compilers or earlier versions of `gfortran` need. For new developments, use of the `BIND(C)` features is recommended.\n\nExample of use:\n\n``` example-preformatted\n$ gfortran -fc-prototypes-external -fsyntax-only foo.f > foo.h\n```\n\nwhere the C code intended for interoperating with the Fortran code then uses `#include \"foo.h\"`.\n\nNext: [Environment variables affecting `gfortran`](environment-variables), Previous: [Options for code generation conventions](code-gen-options), Up: [GNU Fortran Command Options](invoking-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Interoperability-Options.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Interoperability-Options.html)"
- name: 2.11. Environment variables affecting gfortran ¶
  id: environment-variables
  summary: The gfortran compiler currently does not make use of any environment variables to control its operation above and beyond those that affect the operation of gcc
  description: "Previous: [Options for interoperability with other languages](interoperability-options), Up: [GNU Fortran Command Options](invoking-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 2.11 Environment variables affecting gfortran [¶](#Environment-variables-affecting-gfortran)\n\nThe `gfortran` compiler currently does not make use of any environment variables to control its operation above and beyond those that affect the operation of `gcc`.\n\nSee [Environment Variables Affecting GCC](https://gcc.gnu.org/onlinedocs/gcc/Environment-Variables.html#Environment-Variables) in Using the GNU Compiler Collection (GCC), for information on environment variables.\n\nSee [Runtime: Influencing runtime behavior with environment variables](runtime), for environment variables that affect the run-time behavior of programs compiled with GNU Fortran.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Environment-Variables.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Environment-Variables.html)"
- name: '3. Runtime: Influencing runtime behavior with environment variables ¶'
  id: runtime
  summary: The behavior of the gfortran can be influenced by environment variables
  description: "Next: [Compiler Characteristics](compiler-characteristics), Previous: [GNU Fortran Command Options](invoking-gnu-fortran), Up: [Introduction](index) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 3 Runtime: Influencing runtime behavior with environment variables [¶](#Runtime_003a-Influencing-runtime-behavior-with-environment-variables)\n\nThe behavior of the `gfortran` can be influenced by environment variables.\n\nMalformed environment variables are silently ignored.\n\n- [`TMPDIR`—Directory for scratch files](tmpdir)\n- [`GFORTRAN_STDIN_UNIT`—Unit number for standard input](gfortran_005fstdin_005funit)\n- [`GFORTRAN_STDOUT_UNIT`—Unit number for standard output](gfortran_005fstdout_005funit)\n- [`GFORTRAN_STDERR_UNIT`—Unit number for standard error](gfortran_005fstderr_005funit)\n- [`GFORTRAN_UNBUFFERED_ALL`—Do not buffer I/O on all units](gfortran_005funbuffered_005fall)\n- [`GFORTRAN_UNBUFFERED_PRECONNECTED`—Do not buffer I/O on preconnected units](gfortran_005funbuffered_005fpreconnected)\n- [`GFORTRAN_SHOW_LOCUS`—Show location for runtime errors](gfortran_005fshow_005flocus)\n- [`GFORTRAN_OPTIONAL_PLUS`—Print leading + where permitted](gfortran_005foptional_005fplus)\n- [`GFORTRAN_LIST_SEPARATOR`—Separator for list output](gfortran_005flist_005fseparator)\n- [`GFORTRAN_CONVERT_UNIT`—Set conversion for unformatted I/O](gfortran_005fconvert_005funit)\n- [`GFORTRAN_ERROR_BACKTRACE`—Show backtrace on run-time errors](gfortran_005ferror_005fbacktrace)\n- [`GFORTRAN_FORMATTED_BUFFER_SIZE`—Set buffer size for formatted I/O](gfortran_005fformatted_005fbuffer_005fsize)\n- [`GFORTRAN_UNFORMATTED_BUFFER_SIZE`—Set buffer size for unformatted I/O](gfortran_005funformatted_005fbuffer_005fsize)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Runtime.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Runtime.html)"
- name: 3.1. TMPDIR
  id: tmpdir
  summary: When opening a file with STATUS='SCRATCH', GNU Fortran tries to create the file in one of the potential directories by testing each directory in the order below
  description: "Next: [`GFORTRAN_STDIN_UNIT`—Unit number for standard input](gfortran_005fstdin_005funit), Up: [Runtime: Influencing runtime behavior with environment variables](runtime) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 3.1 TMPDIR—Directory for scratch files [¶](#TMPDIR---Directory-for-scratch-files)\n\nWhen opening a file with `STATUS='SCRATCH'`, GNU Fortran tries to create the file in one of the potential directories by testing each directory in the order below.\n\n1.  The environment variable `TMPDIR`, if it exists.\n2.  On the MinGW target, the directory returned by the `GetTempPath` function. Alternatively, on the Cygwin target, the `TMP` and `TEMP` environment variables, if they exist, in that order.\n3.  The `P_tmpdir` macro if it is defined, otherwise the directory `/tmp`.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TMPDIR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TMPDIR.html)"
- name: 3.2. GFORTRAN_STDIN_UNIT
  id: gfortran_005fstdin_005funit
  summary: This environment variable can be used to select the unit number preconnected to standard input
  description: "Next: [`GFORTRAN_STDOUT_UNIT`—Unit number for standard output](gfortran_005fstdout_005funit), Previous: [`TMPDIR`—Directory for scratch files](tmpdir), Up: [Runtime: Influencing runtime behavior with environment variables](runtime) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 3.2 GFORTRAN_STDIN_UNIT—Unit number for standard input [¶](#GFORTRAN_005fSTDIN_005fUNIT---Unit-number-for-standard-input)\n\nThis environment variable can be used to select the unit number preconnected to standard input. This must be a positive integer. The default value is 5.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fSTDIN_005fUNIT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fSTDIN_005fUNIT.html)"
- name: 3.3. GFORTRAN_STDOUT_UNIT
  id: gfortran_005fstdout_005funit
  summary: This environment variable can be used to select the unit number preconnected to standard output
  description: "Next: [`GFORTRAN_STDERR_UNIT`—Unit number for standard error](gfortran_005fstderr_005funit), Previous: [`GFORTRAN_STDIN_UNIT`—Unit number for standard input](gfortran_005fstdin_005funit), Up: [Runtime: Influencing runtime behavior with environment variables](runtime) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 3.3 GFORTRAN_STDOUT_UNIT—Unit number for standard output [¶](#GFORTRAN_005fSTDOUT_005fUNIT---Unit-number-for-standard-output)\n\nThis environment variable can be used to select the unit number preconnected to standard output. This must be a positive integer. The default value is 6.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fSTDOUT_005fUNIT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fSTDOUT_005fUNIT.html)"
- name: 3.4. GFORTRAN_STDERR_UNIT
  id: gfortran_005fstderr_005funit
  summary: This environment variable can be used to select the unit number preconnected to standard error
  description: "Next: [`GFORTRAN_UNBUFFERED_ALL`—Do not buffer I/O on all units](gfortran_005funbuffered_005fall), Previous: [`GFORTRAN_STDOUT_UNIT`—Unit number for standard output](gfortran_005fstdout_005funit), Up: [Runtime: Influencing runtime behavior with environment variables](runtime) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 3.4 GFORTRAN_STDERR_UNIT—Unit number for standard error [¶](#GFORTRAN_005fSTDERR_005fUNIT---Unit-number-for-standard-error)\n\nThis environment variable can be used to select the unit number preconnected to standard error. This must be a positive integer. The default value is 0.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fSTDERR_005fUNIT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fSTDERR_005fUNIT.html)"
- name: 3.5. GFORTRAN_UNBUFFERED_ALL
  id: gfortran_005funbuffered_005fall
  summary: This environment variable controls whether all I/O is unbuffered
  description: "Next: [`GFORTRAN_UNBUFFERED_PRECONNECTED`—Do not buffer I/O on preconnected units](gfortran_005funbuffered_005fpreconnected), Previous: [`GFORTRAN_STDERR_UNIT`—Unit number for standard error](gfortran_005fstderr_005funit), Up: [Runtime: Influencing runtime behavior with environment variables](runtime) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 3.5 GFORTRAN_UNBUFFERED_ALL—Do not buffer I/O on all units [¶](#GFORTRAN_005fUNBUFFERED_005fALL---Do-not-buffer-I_002fO-on-all-units)\n\nThis environment variable controls whether all I/O is unbuffered. If the first letter is ‘`y`’, ‘`Y`’ or ‘`1`’, all I/O is unbuffered. This will slow down small sequential reads and writes. If the first letter is ‘`n`’, ‘`N`’ or ‘`0`’, I/O is buffered. This is the default.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fUNBUFFERED_005fALL.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fUNBUFFERED_005fALL.html)"
- name: 3.6. GFORTRAN_UNBUFFERED_PRECONNECTED
  id: gfortran_005funbuffered_005fpreconnected
  summary: The environment variable named GFORTRAN_UNBUFFERED_PRECONNECTED controls whether I/O on a preconnected unit (i.e
  description: "Next: [`GFORTRAN_SHOW_LOCUS`—Show location for runtime errors](gfortran_005fshow_005flocus), Previous: [`GFORTRAN_UNBUFFERED_ALL`—Do not buffer I/O on all units](gfortran_005funbuffered_005fall), Up: [Runtime: Influencing runtime behavior with environment variables](runtime) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 3.6 GFORTRAN_UNBUFFERED_PRECONNECTED—Do not buffer I/O on preconnected units [¶](#GFORTRAN_005fUNBUFFERED_005fPRECONNECTED---Do-not-buffer-I_002fO-on-preconnected-units)\n\nThe environment variable named `GFORTRAN_UNBUFFERED_PRECONNECTED` controls whether I/O on a preconnected unit (i.e. STDOUT or STDERR) is unbuffered. If the first letter is ‘`y`’, ‘`Y`’ or ‘`1`’, I/O is unbuffered. This will slow down small sequential reads and writes. If the first letter is ‘`n`’, ‘`N`’ or ‘`0`’, I/O is buffered. This is the default.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fUNBUFFERED_005fPRECONNECTED.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fUNBUFFERED_005fPRECONNECTED.html)"
- name: 3.7. GFORTRAN_SHOW_LOCUS
  id: gfortran_005fshow_005flocus
  summary: If the first letter is ‘y’, ‘Y’ or ‘1’, filename and line numbers for runtime errors are printed
  description: "Next: [`GFORTRAN_OPTIONAL_PLUS`—Print leading + where permitted](gfortran_005foptional_005fplus), Previous: [`GFORTRAN_UNBUFFERED_PRECONNECTED`—Do not buffer I/O on preconnected units](gfortran_005funbuffered_005fpreconnected), Up: [Runtime: Influencing runtime behavior with environment variables](runtime) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 3.7 GFORTRAN_SHOW_LOCUS—Show location for runtime errors [¶](#GFORTRAN_005fSHOW_005fLOCUS---Show-location-for-runtime-errors)\n\nIf the first letter is ‘`y`’, ‘`Y`’ or ‘`1`’, filename and line numbers for runtime errors are printed. If the first letter is ‘`n`’, ‘`N`’ or ‘`0`’, do not print filename and line numbers for runtime errors. The default is to print the location.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fSHOW_005fLOCUS.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fSHOW_005fLOCUS.html)"
- name: 3.8. GFORTRAN_OPTIONAL_PLUS
  id: gfortran_005foptional_005fplus
  summary: If the first letter is ‘y’, ‘Y’ or ‘1’, a plus sign is printed where permitted by the Fortran standard
  description: "Next: [`GFORTRAN_LIST_SEPARATOR`—Separator for list output](gfortran_005flist_005fseparator), Previous: [`GFORTRAN_SHOW_LOCUS`—Show location for runtime errors](gfortran_005fshow_005flocus), Up: [Runtime: Influencing runtime behavior with environment variables](runtime) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 3.8 GFORTRAN_OPTIONAL_PLUS—Print leading + where permitted [¶](#GFORTRAN_005fOPTIONAL_005fPLUS---Print-leading-_002b-where-permitted)\n\nIf the first letter is ‘`y`’, ‘`Y`’ or ‘`1`’, a plus sign is printed where permitted by the Fortran standard. If the first letter is ‘`n`’, ‘`N`’ or ‘`0`’, a plus sign is not printed in most cases. Default is not to print plus signs.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fOPTIONAL_005fPLUS.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fOPTIONAL_005fPLUS.html)"
- name: 3.9. GFORTRAN_LIST_SEPARATOR
  id: gfortran_005flist_005fseparator
  summary: This environment variable specifies the separator when writing list-directed output
  description: "Next: [`GFORTRAN_CONVERT_UNIT`—Set conversion for unformatted I/O](gfortran_005fconvert_005funit), Previous: [`GFORTRAN_OPTIONAL_PLUS`—Print leading + where permitted](gfortran_005foptional_005fplus), Up: [Runtime: Influencing runtime behavior with environment variables](runtime) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 3.9 GFORTRAN_LIST_SEPARATOR—Separator for list output [¶](#GFORTRAN_005fLIST_005fSEPARATOR---Separator-for-list-output)\n\nThis environment variable specifies the separator when writing list-directed output. It may contain any number of spaces and at most one comma. If you specify this on the command line, be sure to quote spaces, as in\n\n``` example-preformatted\n$ GFORTRAN_LIST_SEPARATOR='  ,  ' ./a.out\n```\n\nwhen `a.out` is the compiled Fortran program that you want to run. Default is a single space.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fLIST_005fSEPARATOR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fLIST_005fSEPARATOR.html)"
- name: 3.10. GFORTRAN_CONVERT_UNIT
  id: gfortran_005fconvert_005funit
  summary: By setting the GFORTRAN_CONVERT_UNIT variable, it is possible to change the representation of data for unformatted files
  description: "Next: [`GFORTRAN_ERROR_BACKTRACE`—Show backtrace on run-time errors](gfortran_005ferror_005fbacktrace), Previous: [`GFORTRAN_LIST_SEPARATOR`—Separator for list output](gfortran_005flist_005fseparator), Up: [Runtime: Influencing runtime behavior with environment variables](runtime) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 3.10 GFORTRAN_CONVERT_UNIT—Set conversion for unformatted I/O [¶](#GFORTRAN_005fCONVERT_005fUNIT---Set-conversion-for-unformatted-I_002fO)\n\nBy setting the `GFORTRAN_CONVERT_UNIT` variable, it is possible to change the representation of data for unformatted files. The syntax for the `GFORTRAN_CONVERT_UNIT` variable for most systems is:\n\n``` example-preformatted\nGFORTRAN_CONVERT_UNIT: mode | mode ';' exception | exception ;\nmode: 'native' | 'swap' | 'big_endian' | 'little_endian' ;\nexception: mode ':' unit_list | unit_list ;\nunit_list: unit_spec | unit_list unit_spec ;\nunit_spec: INTEGER | INTEGER '-' INTEGER ;\n```\n\nThe variable consists of an optional default mode, followed by a list of optional exceptions, which are separated by semicolons from the preceding default and each other. Each exception consists of a format and a comma-separated list of units. Valid values for the modes are the same as for the `CONVERT` specifier:\n\n- `NATIVE` Use the native format. This is the default.\n- `SWAP` Swap between little- and big-endian.\n- `LITTLE_ENDIAN` Use the little-endian format for unformatted files.\n- `BIG_ENDIAN` Use the big-endian format for unformatted files.\n\nFor POWER systems which support `-mabi=ieeelongdouble`, there are additional options, which can be combined with the others with commas. Those are\n\n- `R16_IEEE` Use IEEE 128-bit format for `REAL(KIND=16)`.\n- `R16_IBM` Use IBM `long double` format for `REAL(KIND=16)`.\n\nA missing mode for an exception is taken to mean `BIG_ENDIAN`. Examples of values for `GFORTRAN_CONVERT_UNIT` are:\n\n- `'big_endian'` Do all unformatted I/O in big_endian mode.\n- `'little_endian;native:10-20,25'` Do all unformatted I/O in little_endian mode, except for units 10 to 20 and 25, which are in native format.\n- `'10-20'` Units 10 to 20 are big-endian, the rest is native.\n- `'big_endian,r16_ibm'` Do all unformatted I/O in big-endian mode and use IBM long double for output of `REAL(KIND=16)` values.\n\nSetting the environment variables should be done on the command line or via the `export` command for `sh`-compatible shells and via `setenv` for `csh`-compatible shells.\n\nExample for `sh`:\n\n``` example-preformatted\n$ gfortran foo.f90\n$ GFORTRAN_CONVERT_UNIT='big_endian;native:10-20' ./a.out\n```\n\nExample code for `csh`:\n\n``` example-preformatted\n% gfortran foo.f90\n% setenv GFORTRAN_CONVERT_UNIT 'big_endian;native:10-20'\n% ./a.out\n```\n\nUsing anything but the native representation for unformatted data carries a significant speed overhead. If speed in this area matters to you, it is best if you use this only for data that needs to be portable.\n\nSee [`CONVERT` specifier](convert-specifier), for an alternative way to specify the data representation for unformatted files. See [Influencing runtime behavior](runtime-options), for setting a default data representation for the whole program. The `CONVERT` specifier overrides the `-fconvert` compile options.\n\n*Note that the values specified via the GFORTRAN_CONVERT_UNIT environment variable will override the CONVERT specifier in the open statement*. This is to give control over data formats to users who do not have the source code of their program available.\n\nNext: [`GFORTRAN_ERROR_BACKTRACE`—Show backtrace on run-time errors](gfortran_005ferror_005fbacktrace), Previous: [`GFORTRAN_LIST_SEPARATOR`—Separator for list output](gfortran_005flist_005fseparator), Up: [Runtime: Influencing runtime behavior with environment variables](runtime) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fCONVERT_005fUNIT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fCONVERT_005fUNIT.html)"
- name: 3.11. GFORTRAN_ERROR_BACKTRACE
  id: gfortran_005ferror_005fbacktrace
  summary: If the GFORTRAN_ERROR_BACKTRACE variable is set to ‘y’, ‘Y’ or ‘1’ (only the first letter is relevant) then a backtrace is printed when a serious run-time error occurs
  description: "Next: [`GFORTRAN_FORMATTED_BUFFER_SIZE`—Set buffer size for formatted I/O](gfortran_005fformatted_005fbuffer_005fsize), Previous: [`GFORTRAN_CONVERT_UNIT`—Set conversion for unformatted I/O](gfortran_005fconvert_005funit), Up: [Runtime: Influencing runtime behavior with environment variables](runtime) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 3.11 GFORTRAN_ERROR_BACKTRACE—Show backtrace on run-time errors [¶](#GFORTRAN_005fERROR_005fBACKTRACE---Show-backtrace-on-run-time-errors)\n\nIf the `GFORTRAN_ERROR_BACKTRACE` variable is set to ‘`y`’, ‘`Y`’ or ‘`1`’ (only the first letter is relevant) then a backtrace is printed when a serious run-time error occurs. To disable the backtracing, set the variable to ‘`n`’, ‘`N`’, ‘`0`’. Default is to print a backtrace unless the `-fno-backtrace` compile option was used.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fERROR_005fBACKTRACE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fERROR_005fBACKTRACE.html)"
- name: 3.12. GFORTRAN_FORMATTED_BUFFER_SIZE
  id: gfortran_005fformatted_005fbuffer_005fsize
  summary: The GFORTRAN_FORMATTED_BUFFER_SIZE environment variable specifies buffer size in bytes to be used for formatted output
  description: "Next: [`GFORTRAN_UNFORMATTED_BUFFER_SIZE`—Set buffer size for unformatted I/O](gfortran_005funformatted_005fbuffer_005fsize), Previous: [`GFORTRAN_ERROR_BACKTRACE`—Show backtrace on run-time errors](gfortran_005ferror_005fbacktrace), Up: [Runtime: Influencing runtime behavior with environment variables](runtime) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 3.12 GFORTRAN_FORMATTED_BUFFER_SIZE—Set buffer size for formatted I/O [¶](#GFORTRAN_005fFORMATTED_005fBUFFER_005fSIZE---Set-buffer-size-for-formatted-I_002fO)\n\nThe `GFORTRAN_FORMATTED_BUFFER_SIZE` environment variable specifies buffer size in bytes to be used for formatted output. The default value is 8192.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fFORMATTED_005fBUFFER_005fSIZE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fFORMATTED_005fBUFFER_005fSIZE.html)"
- name: 3.13. GFORTRAN_UNFORMATTED_BUFFER_SIZE
  id: gfortran_005funformatted_005fbuffer_005fsize
  summary: The GFORTRAN_UNFORMATTED_BUFFER_SIZE environment variable specifies buffer size in bytes to be used for unformatted output
  description: "Previous: [`GFORTRAN_FORMATTED_BUFFER_SIZE`—Set buffer size for formatted I/O](gfortran_005fformatted_005fbuffer_005fsize), Up: [Runtime: Influencing runtime behavior with environment variables](runtime) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 3.13 GFORTRAN_UNFORMATTED_BUFFER_SIZE—Set buffer size for unformatted I/O [¶](#GFORTRAN_005fUNFORMATTED_005fBUFFER_005fSIZE---Set-buffer-size-for-unformatted-I_002fO)\n\nThe `GFORTRAN_UNFORMATTED_BUFFER_SIZE` environment variable specifies buffer size in bytes to be used for unformatted output. The default value is 131072.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fUNFORMATTED_005fBUFFER_005fSIZE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GFORTRAN_005fUNFORMATTED_005fBUFFER_005fSIZE.html)"
- name: 4. Compiler Characteristics ¶
  id: compiler-characteristics
  summary: This chapter describes certain characteristics of the GNU Fortran compiler, that are not specified by the Fortran standard, but which might in some way or another become visible to the programmer
  description: "Next: [Extensions](extensions), Previous: [Runtime: Influencing runtime behavior with environment variables](runtime), Up: [Introduction](index) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 4 Compiler Characteristics [¶](#Compiler-Characteristics-1)\n\nThis chapter describes certain characteristics of the GNU Fortran compiler, that are not specified by the Fortran standard, but which might in some way or another become visible to the programmer.\n\n- [KIND Type Parameters](kind-type-parameters)\n- [Internal representation of LOGICAL variables](internal-representation-of-logical-variables)\n- [Evaluation of logical expressions](evaluation-of-logical-expressions)\n- [MAX and MIN intrinsics with REAL NaN arguments](max-and-min-intrinsics-with-real-nan-arguments)\n- [Thread-safety of the runtime library](thread-safety-of-the-runtime-library)\n- [Data consistency and durability](data-consistency-and-durability)\n- [Files opened without an explicit ACTION= specifier](files-opened-without-an-explicit-action_003d-specifier)\n- [File operations on symbolic links](file-operations-on-symbolic-links)\n- [File format of unformatted sequential files](file-format-of-unformatted-sequential-files)\n- [Asynchronous I/O](asynchronous-i_002fo)\n- [Behavior on integer overflow](behavior-on-integer-overflow)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Compiler-Characteristics.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Compiler-Characteristics.html)"
- name: 4.1. KIND Type Parameters ¶
  id: kind-type-parameters
  summary: The KIND value matches the storage size in bytes, except for COMPLEX where the storage size is twice as much (or both real and imaginary part are a real value of the given size)
  description: "Next: [Internal representation of LOGICAL variables](internal-representation-of-logical-variables), Up: [Compiler Characteristics](compiler-characteristics) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 4.1 KIND Type Parameters [¶](#KIND-Type-Parameters-1)\n\nThe `KIND` type parameters supported by GNU Fortran for the primitive data types are:\n\n`INTEGER`  \n1, 2, 4, 8\\*, 16\\*, default: 4\\*\\*\n\n`LOGICAL`  \n1, 2, 4, 8\\*, 16\\*, default: 4\\*\\*\n\n`REAL`  \n4, 8, 10\\*, 16\\*, default: 4\\*\\*\\*\n\n`COMPLEX`  \n4, 8, 10\\*, 16\\*, default: 4\\*\\*\\*\n\n`DOUBLE PRECISION`  \n4, 8, 10\\*, 16\\*, default: 8\\*\\*\\*\n\n`CHARACTER`  \n1, 4, default: 1\n\n\\* not available on all systems \\*\\* unless `-fdefault-integer-8` is used \\*\\*\\* unless `-fdefault-real-8` is used (see [Options controlling Fortran dialect](fortran-dialect-options))\n\nThe `KIND` value matches the storage size in bytes, except for `COMPLEX` where the storage size is twice as much (or both real and imaginary part are a real value of the given size). It is recommended to use the [`SELECTED_CHAR_KIND` — Choose character kind](selected_005fchar_005fkind), [`SELECTED_INT_KIND` — Choose integer kind](selected_005fint_005fkind) and [`SELECTED_REAL_KIND` — Choose real kind](selected_005freal_005fkind) intrinsics or the `INT8`, `INT16`, `INT32`, `INT64`, `REAL32`, `REAL64`, and `REAL128` parameters of the `ISO_FORTRAN_ENV` module instead of the concrete values. The available kind parameters can be found in the constant arrays `CHARACTER_KINDS`, `INTEGER_KINDS`, `LOGICAL_KINDS` and `REAL_KINDS` in the [`ISO_FORTRAN_ENV`](iso_005ffortran_005fenv) module. For C interoperability, the kind parameters of the [`ISO_C_BINDING`](iso_005fc_005fbinding) module should be used.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/KIND-Type-Parameters.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/KIND-Type-Parameters.html)"
- name: 4.2. Internal representation of LOGICAL variables ¶
  id: internal-representation-of-logical-variables
  summary: The Fortran standard does not specify how variables of LOGICAL type are represented, beyond requiring that LOGICAL variables of default kind have the same storage size as default INTEGER and REAL variables
  description: "Next: [Evaluation of logical expressions](evaluation-of-logical-expressions), Previous: [KIND Type Parameters](kind-type-parameters), Up: [Compiler Characteristics](compiler-characteristics) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 4.2 Internal representation of LOGICAL variables [¶](#Internal-representation-of-LOGICAL-variables-1)\n\nThe Fortran standard does not specify how variables of `LOGICAL` type are represented, beyond requiring that `LOGICAL` variables of default kind have the same storage size as default `INTEGER` and `REAL` variables. The GNU Fortran internal representation is as follows.\n\nA `LOGICAL(KIND=N)` variable is represented as an `INTEGER(KIND=N)` variable, however, with only two permissible values: `1` for `.TRUE.` and `0` for `.FALSE.`. Any other integer value results in undefined behavior.\n\nSee also [Argument passing conventions](argument-passing-conventions) and [Interoperability with C](interoperability-with-c).\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Internal-representation-of-LOGICAL-variables.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Internal-representation-of-LOGICAL-variables.html)"
- name: 4.3. Evaluation of logical expressions ¶
  id: evaluation-of-logical-expressions
  summary: The Fortran standard does not require the compiler to evaluate all parts of an expression, if they do not contribute to the final result
  description: "Next: [MAX and MIN intrinsics with REAL NaN arguments](max-and-min-intrinsics-with-real-nan-arguments), Previous: [Internal representation of LOGICAL variables](internal-representation-of-logical-variables), Up: [Compiler Characteristics](compiler-characteristics) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 4.3 Evaluation of logical expressions [¶](#Evaluation-of-logical-expressions-1)\n\nThe Fortran standard does not require the compiler to evaluate all parts of an expression, if they do not contribute to the final result. For logical expressions with `.AND.` or `.OR.` operators, in particular, GNU Fortran will optimize out function calls (even to impure functions) if the result of the expression can be established without them. However, since not all compilers do that, and such an optimization can potentially modify the program flow and subsequent results, GNU Fortran throws warnings for such situations with the `-Wfunction-elimination` flag.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Evaluation-of-logical-expressions.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Evaluation-of-logical-expressions.html)"
- name: 4.4. MAX and MIN intrinsics with REAL NaN arguments ¶
  id: max-and-min-intrinsics-with-real-nan-arguments
  summary: The Fortran standard does not specify what the result of the MAX and MIN intrinsics are if one of the arguments is a NaN
  description: "Next: [Thread-safety of the runtime library](thread-safety-of-the-runtime-library), Previous: [Evaluation of logical expressions](evaluation-of-logical-expressions), Up: [Compiler Characteristics](compiler-characteristics) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 4.4 MAX and MIN intrinsics with REAL NaN arguments [¶](#MAX-and-MIN-intrinsics-with-REAL-NaN-arguments-1)\n\nThe Fortran standard does not specify what the result of the `MAX` and `MIN` intrinsics are if one of the arguments is a `NaN`. Accordingly, the GNU Fortran compiler does not specify that either, as this allows for faster and more compact code to be generated. If the programmer wishes to take some specific action in case one of the arguments is a `NaN`, it is necessary to explicitly test the arguments before calling `MAX` or `MIN`, e.g. with the `IEEE_IS_NAN` function from the intrinsic module `IEEE_ARITHMETIC`.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MAX-and-MIN-intrinsics-with-REAL-NaN-arguments.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MAX-and-MIN-intrinsics-with-REAL-NaN-arguments.html)"
- name: 4.5. Thread-safety of the runtime library ¶
  id: thread-safety-of-the-runtime-library
  summary: GNU Fortran can be used in programs with multiple threads, e.g
  description: "Next: [Data consistency and durability](data-consistency-and-durability), Previous: [MAX and MIN intrinsics with REAL NaN arguments](max-and-min-intrinsics-with-real-nan-arguments), Up: [Compiler Characteristics](compiler-characteristics) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 4.5 Thread-safety of the runtime library [¶](#Thread-safety-of-the-runtime-library-1)\n\nGNU Fortran can be used in programs with multiple threads, e.g. by using OpenMP, by calling OS thread handling functions via the `ISO_C_BINDING` facility, or by GNU Fortran compiled library code being called from a multi-threaded program.\n\nThe GNU Fortran runtime library, (`libgfortran`), supports being called concurrently from multiple threads with the following exceptions.\n\nDuring library initialization, the C `getenv` function is used, which need not be thread-safe. Similarly, the `getenv` function is used to implement the `GET_ENVIRONMENT_VARIABLE` and `GETENV` intrinsics. It is the responsibility of the user to ensure that the environment is not being updated concurrently when any of these actions are taking place.\n\nThe `EXECUTE_COMMAND_LINE` and `SYSTEM` intrinsics are implemented with the `system` function, which need not be thread-safe. It is the responsibility of the user to ensure that `system` is not called concurrently.\n\nFor platforms not supporting thread-safe POSIX functions, further functionality might not be thread-safe. For details, please consult the documentation for your operating system.\n\nThe GNU Fortran runtime library uses various C library functions that depend on the locale, such as `strtod` and `snprintf`. In order to work correctly in locale-aware programs that set the locale using `setlocale`, the locale is reset to the default “C” locale while executing a formatted `READ` or `WRITE` statement. On targets supporting the POSIX 2008 per-thread locale functions (e.g. `newlocale`, `uselocale`, `freelocale`), these are used and thus the global locale set using `setlocale` or the per-thread locales in other threads are not affected. However, on targets lacking this functionality, the global LC_NUMERIC locale is set to “C” during the formatted I/O. Thus, on such targets it’s not safe to call `setlocale` concurrently from another thread while a Fortran formatted I/O operation is in progress. Also, other threads doing something dependent on the LC_NUMERIC locale might not work correctly if a formatted I/O operation is in progress in another thread.\n\nNext: [Data consistency and durability](data-consistency-and-durability), Previous: [MAX and MIN intrinsics with REAL NaN arguments](max-and-min-intrinsics-with-real-nan-arguments), Up: [Compiler Characteristics](compiler-characteristics) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Thread-safety-of-the-runtime-library.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Thread-safety-of-the-runtime-library.html)"
- name: 4.6. Data consistency and durability ¶
  id: data-consistency-and-durability
  summary: This section contains a brief overview of data and metadata consistency and durability issues when doing I/O
  description: "Next: [Files opened without an explicit ACTION= specifier](files-opened-without-an-explicit-action_003d-specifier), Previous: [Thread-safety of the runtime library](thread-safety-of-the-runtime-library), Up: [Compiler Characteristics](compiler-characteristics) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 4.6 Data consistency and durability [¶](#Data-consistency-and-durability-1)\n\nThis section contains a brief overview of data and metadata consistency and durability issues when doing I/O.\n\nWith respect to durability, GNU Fortran makes no effort to ensure that data is committed to stable storage. If this is required, the GNU Fortran programmer can use the intrinsic `FNUM` to retrieve the low level file descriptor corresponding to an open Fortran unit. Then, using e.g. the `ISO_C_BINDING` feature, one can call the underlying system call to flush dirty data to stable storage, such as `fsync` on POSIX, `_commit` on MingW, or `fcntl(fd, F_FULLSYNC, 0)` on Mac OS X. The following example shows how to call fsync:\n\n``` example-preformatted\n! Declare the interface for POSIX fsync function\ninterface\n  function fsync (fd) bind(c,name=\"fsync\")\n  use iso_c_binding, only: c_int\n    integer(c_int), value :: fd\n    integer(c_int) :: fsync\n  end function fsync\nend interface\n\n! Variable declaration\ninteger :: ret\n\n! Opening unit 10\nopen (10,file=\"foo\")\n\n! ...\n! Perform I/O on unit 10\n! ...\n\n! Flush and sync\nflush(10)\nret = fsync(fnum(10))\n\n! Handle possible error\nif (ret /= 0) stop \"Error calling FSYNC\"\n```\n\nWith respect to consistency, for regular files GNU Fortran uses buffered I/O in order to improve performance. This buffer is flushed automatically when full and in some other situations, e.g. when closing a unit. It can also be explicitly flushed with the `FLUSH` statement. Also, the buffering can be turned off with the `GFORTRAN_UNBUFFERED_ALL` and `GFORTRAN_UNBUFFERED_PRECONNECTED` environment variables. Special files, such as terminals and pipes, are always unbuffered. Sometimes, however, further things may need to be done in order to allow other processes to see data that GNU Fortran has written, as follows.\n\nThe Windows platform supports a relaxed metadata consistency model, where file metadata is written to the directory lazily. This means that, for instance, the `dir` command can show a stale size for a file. One can force a directory metadata update by closing the unit, or by calling `_commit` on the file descriptor. Note, though, that `_commit` will force all dirty data to stable storage, which is often a very slow operation.\n\nThe Network File System (NFS) implements a relaxed consistency model called open-to-close consistency. Closing a file forces dirty data and metadata to be flushed to the server, and opening a file forces the client to contact the server in order to revalidate cached data. `fsync` will also force a flush of dirty data and metadata to the server. Similar to `open` and `close`, acquiring and releasing `fcntl` file locks, if the server supports them, will also force cache validation and flushing dirty data and metadata.\n\nNext: [Files opened without an explicit ACTION= specifier](files-opened-without-an-explicit-action_003d-specifier), Previous: [Thread-safety of the runtime library](thread-safety-of-the-runtime-library), Up: [Compiler Characteristics](compiler-characteristics) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Data-consistency-and-durability.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Data-consistency-and-durability.html)"
- name: 4.7. Files opened without an explicit ACTION= specifier ¶
  id: files-opened-without-an-explicit-action_003d-specifier
  summary: The Fortran standard says that if an OPEN statement is executed without an explicit ACTION= specifier, the default value is processor dependent
  description: "Next: [File operations on symbolic links](file-operations-on-symbolic-links), Previous: [Data consistency and durability](data-consistency-and-durability), Up: [Compiler Characteristics](compiler-characteristics) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 4.7 Files opened without an explicit ACTION= specifier [¶](#Files-opened-without-an-explicit-ACTION_003d-specifier-1)\n\nThe Fortran standard says that if an `OPEN` statement is executed without an explicit `ACTION=` specifier, the default value is processor dependent. GNU Fortran behaves as follows:\n\n1.  Attempt to open the file with `ACTION='READWRITE'`\n2.  If that fails, try to open with `ACTION='READ'`\n3.  If that fails, try to open with `ACTION='WRITE'`\n4.  If that fails, generate an error\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Files-opened-without-an-explicit-ACTION_003d-specifier.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Files-opened-without-an-explicit-ACTION_003d-specifier.html)"
- name: 4.8. File operations on symbolic links ¶
  id: file-operations-on-symbolic-links
  summary: This section documents the behavior of GNU Fortran for file operations on symbolic links, on systems that support them
  description: "Next: [File format of unformatted sequential files](file-format-of-unformatted-sequential-files), Previous: [Files opened without an explicit ACTION= specifier](files-opened-without-an-explicit-action_003d-specifier), Up: [Compiler Characteristics](compiler-characteristics) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 4.8 File operations on symbolic links [¶](#File-operations-on-symbolic-links-1)\n\nThis section documents the behavior of GNU Fortran for file operations on symbolic links, on systems that support them.\n\n- Results of INQUIRE statements of the “inquire by file” form will relate to the target of the symbolic link. For example, `INQUIRE(FILE=\"foo\",EXIST=ex)` will set `ex` to `.true.` if `foo` is a symbolic link pointing to an existing file, and `.false.` if `foo` points to an non-existing file (“dangling” symbolic link).\n- Using the `OPEN` statement with a `STATUS=\"NEW\"` specifier on a symbolic link will result in an error condition, whether the symbolic link points to an existing target or is dangling.\n- If a symbolic link was connected, using the `CLOSE` statement with a `STATUS=\"DELETE\"` specifier will cause the symbolic link itself to be deleted, not its target.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/File-operations-on-symbolic-links.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/File-operations-on-symbolic-links.html)"
- name: 4.9. File format of unformatted sequential files ¶
  id: file-format-of-unformatted-sequential-files
  summary: Unformatted sequential files are stored as logical records using record markers
  description: "Next: [Asynchronous I/O](asynchronous-i_002fo), Previous: [File operations on symbolic links](file-operations-on-symbolic-links), Up: [Compiler Characteristics](compiler-characteristics) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 4.9 File format of unformatted sequential files [¶](#File-format-of-unformatted-sequential-files-1)\n\nUnformatted sequential files are stored as logical records using record markers. Each logical record consists of one of more subrecords.\n\nEach subrecord consists of a leading record marker, the data written by the user program, and a trailing record marker. The record markers are four-byte integers by default, and eight-byte integers if the `-fmax-subrecord-length=8` option (which exists for backwards compability only) is in effect.\n\nThe representation of the record markers is that of unformatted files given with the `-fconvert` option, the [`CONVERT` specifier](convert-specifier) in an open statement or the [`GFORTRAN_CONVERT_UNIT`—Set conversion for unformatted I/O](gfortran_005fconvert_005funit) environment variable.\n\nThe maximum number of bytes of user data in a subrecord is 2147483639 (2 GiB - 9) for a four-byte record marker. This limit can be lowered with the `-fmax-subrecord-length` option, although this is rarely useful. If the length of a logical record exceeds this limit, the data is distributed among several subrecords.\n\nThe absolute of the number stored in the record markers is the number of bytes of user data in the corresponding subrecord. If the leading record marker of a subrecord contains a negative number, another subrecord follows the current one. If the trailing record marker contains a negative number, then there is a preceding subrecord.\n\nIn the most simple case, with only one subrecord per logical record, both record markers contain the number of bytes of user data in the record.\n\nThe format for unformatted sequential data can be duplicated using unformatted stream, as shown in the example program for an unformatted record containing a single subrecord:\n\n``` example-preformatted\nprogram main\n  use iso_fortran_env, only: int32\n  implicit none\n  integer(int32) :: i\n  real, dimension(10) :: a, b\n  call random_number(a)\n  open (10,file='test.dat',form='unformatted',access='stream')\n  inquire (iolength=i) a\n  write (10) i, a, i\n  close (10)\n  open (10,file='test.dat',form='unformatted')\n  read (10) b\n  if (all (a == b)) print *,'success!'\nend program main\n```\n\nNext: [Asynchronous I/O](asynchronous-i_002fo), Previous: [File operations on symbolic links](file-operations-on-symbolic-links), Up: [Compiler Characteristics](compiler-characteristics) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/File-format-of-unformatted-sequential-files.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/File-format-of-unformatted-sequential-files.html)"
- name: 4.10. Asynchronous I/O ¶
  id: asynchronous-i_002fo
  summary: Asynchronous I/O is supported if the program is linked against the POSIX thread library
  description: "Next: [Behavior on integer overflow](behavior-on-integer-overflow), Previous: [File format of unformatted sequential files](file-format-of-unformatted-sequential-files), Up: [Compiler Characteristics](compiler-characteristics) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 4.10 Asynchronous I/O [¶](#Asynchronous-I_002fO-1)\n\nAsynchronous I/O is supported if the program is linked against the POSIX thread library. If that is not the case, all I/O is performed as synchronous. On systems which do not support pthread condition variables, such as AIX, I/O is also performed as synchronous.\n\nOn some systems, such as Darwin or Solaris, the POSIX thread library is always linked in, so asynchronous I/O is always performed. On other sytems, such as Linux, it is necessary to specify `-pthread`, `-lpthread` or `-fopenmp` during the linking step.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Asynchronous-I_002fO.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Asynchronous-I_002fO.html)"
- name: 4.11. Behavior on integer overflow ¶
  id: behavior-on-integer-overflow
  summary: Integer overflow is prohibited by the Fortran standard
  description: "Previous: [Asynchronous I/O](asynchronous-i_002fo), Up: [Compiler Characteristics](compiler-characteristics) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 4.11 Behavior on integer overflow [¶](#Behavior-on-integer-overflow-1)\n\nInteger overflow is prohibited by the Fortran standard. The behavior of gfortran on integer overflow is undefined by default. Traditional code, like linear congruential pseudo-random number generators in old programs that rely on specific, non-standard behavior may generate unexpected results. The `-fsanitize=undefined` option can be used to detect such code at runtime.\n\nIt is recommended to use the intrinsic subroutine `RANDOM_NUMBER` for random number generators or, if the old behavior is desired, to use the `-fwrapv` option. Note that this option can impact performance.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Behavior-on-integer-overflow.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Behavior-on-integer-overflow.html)"
- name: 5. Extensions ¶
  id: extensions
  summary: The two sections below detail the extensions to standard Fortran that are implemented in GNU Fortran, as well as some of the popular or historically important extensions that are not (or not yet) implemented
  description: "Next: [Mixed-Language Programming](mixed-language-programming), Previous: [Compiler Characteristics](compiler-characteristics), Up: [Introduction](index) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5 Extensions [¶](#Extensions-1)\n\nThe two sections below detail the extensions to standard Fortran that are implemented in GNU Fortran, as well as some of the popular or historically important extensions that are not (or not yet) implemented. For the latter case, we explain the alternatives available to GNU Fortran users, including replacement by standard-conforming code or GNU extensions.\n\n- [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran)\n- [Extensions not implemented in GNU Fortran](extensions-not-implemented-in-gnu-fortran)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Extensions.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Extensions.html)"
- name: 5.1. Extensions implemented in GNU Fortran ¶
  id: extensions-implemented-in-gnu-fortran
  summary: GNU Fortran implements a number of extensions over standard Fortran
  description: "Next: [Extensions not implemented in GNU Fortran](extensions-not-implemented-in-gnu-fortran), Up: [Extensions](extensions) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1 Extensions implemented in GNU Fortran [¶](#Extensions-implemented-in-GNU-Fortran-1)\n\nGNU Fortran implements a number of extensions over standard Fortran. This chapter contains information on their syntax and meaning. There are currently two categories of GNU Fortran extensions, those that provide functionality beyond that provided by any standard, and those that are supported by GNU Fortran purely for backward compatibility with legacy compilers. By default, `-std=gnu` allows the compiler to accept both types of extensions, but to warn about the use of the latter. Specifying either `-std=f95`, `-std=f2003`, `-std=f2008`, or `-std=f2018` disables both types of extensions, and `-std=legacy` allows both without warning. The special compile flag `-fdec` enables additional compatibility extensions along with those enabled by `-std=legacy`.\n\n- [Old-style kind specifications](old-style-kind-specifications)\n- [Old-style variable initialization](old-style-variable-initialization)\n- [Extensions to namelist](extensions-to-namelist)\n- [`X` format descriptor without count field](x-format-descriptor-without-count-field)\n- [Commas in `FORMAT` specifications](commas-in-format-specifications)\n- [Missing period in `FORMAT` specifications](missing-period-in-format-specifications)\n- [Default widths for `F`, `G` and `I` format descriptors](default-widths-for-f_002c-g-and-i-format-descriptors)\n- [I/O item lists](i_002fo-item-lists)\n- [`Q` exponent-letter](q-exponent-letter)\n- [BOZ literal constants](boz-literal-constants)\n- [Real array indices](real-array-indices)\n- [Unary operators](unary-operators)\n- [Implicitly convert `LOGICAL` and `INTEGER` values](implicitly-convert-logical-and-integer-values)\n- [Hollerith constants support](hollerith-constants-support)\n- [Character conversion](character-conversion)\n- [Cray pointers](cray-pointers)\n- [`CONVERT` specifier](convert-specifier)\n- [OpenMP](openmp)\n- [OpenACC](openacc)\n- [Argument list functions `%VAL`, `%REF` and `%LOC`](argument-list-functions)\n- [Read/Write after EOF marker](read_002fwrite-after-eof-marker)\n- [`STRUCTURE` and `RECORD`](structure-and-record)\n- [`UNION` and `MAP`](union-and-map)\n- [Type variants for integer intrinsics](type-variants-for-integer-intrinsics)\n- [`AUTOMATIC` and `STATIC` attributes](automatic-and-static-attributes)\n- [Extended math intrinsics](extended-math-intrinsics)\n- [Form feed as whitespace](form-feed-as-whitespace)\n- [TYPE as an alias for PRINT](type-as-an-alias-for-print)\n- [%LOC as an rvalue](_0025loc-as-an-rvalue)\n- [.XOR. operator](_002exor_002e-operator)\n- [Bitwise logical operators](bitwise-logical-operators)\n- [Extended I/O specifiers](extended-i_002fo-specifiers)\n- [Legacy PARAMETER statements](legacy-parameter-statements)\n- [Default exponents](default-exponents)\n\nNext: [Extensions not implemented in GNU Fortran](extensions-not-implemented-in-gnu-fortran), Up: [Extensions](extensions) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Extensions-implemented-in-GNU-Fortran.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Extensions-implemented-in-GNU-Fortran.html)"
- name: 5.1.1. Old-style kind specifications ¶
  id: old-style-kind-specifications
  summary: GNU Fortran allows old-style kind specifications in declarations
  description: "Next: [Old-style variable initialization](old-style-variable-initialization), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.1 Old-style kind specifications [¶](#Old-style-kind-specifications-1)\n\nGNU Fortran allows old-style kind specifications in declarations. These look like:\n\n``` example-preformatted\nTYPESPEC*size x,y,z\n```\n\nwhere `TYPESPEC` is a basic type (`INTEGER`, `REAL`, etc.), and where `size` is a byte count corresponding to the storage size of a valid kind for that type. (For `COMPLEX` variables, `size` is the total size of the real and imaginary parts.) The statement then declares `x`, `y` and `z` to be of type `TYPESPEC` with the appropriate kind. This is equivalent to the standard-conforming declaration\n\n``` example-preformatted\nTYPESPEC(k) x,y,z\n```\n\nwhere `k` is the kind parameter suitable for the intended precision. As kind parameters are implementation-dependent, use the `KIND`, `SELECTED_INT_KIND` and `SELECTED_REAL_KIND` intrinsics to retrieve the correct value, for instance `REAL*8 x` can be replaced by:\n\n``` example-preformatted\nINTEGER, PARAMETER :: dbl = KIND(1.0d0)\nREAL(KIND=dbl) :: x\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Old-style-kind-specifications.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Old-style-kind-specifications.html)"
- name: 5.1.2. Old-style variable initialization ¶
  id: old-style-variable-initialization
  summary: The syntax for the initializers is as for the DATA statement, but unlike in a DATA statement, an initializer only applies to the variable immediately preceding the initialization
  description: "Next: [Extensions to namelist](extensions-to-namelist), Previous: [Old-style kind specifications](old-style-kind-specifications), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.2 Old-style variable initialization [¶](#Old-style-variable-initialization-1)\n\nGNU Fortran allows old-style initialization of variables of the form:\n\n``` example-preformatted\nINTEGER i/1/,j/2/\nREAL x(2,2) /3*0.,1./\n```\n\nThe syntax for the initializers is as for the `DATA` statement, but unlike in a `DATA` statement, an initializer only applies to the variable immediately preceding the initialization. In other words, something like `INTEGER I,J/2,3/` is not valid. This style of initialization is only allowed in declarations without double colons (`::`); the double colons were introduced in Fortran 90, which also introduced a standard syntax for initializing variables in type declarations.\n\nExamples of standard-conforming code equivalent to the above example are:\n\n``` example-preformatted\n! Fortran 90\n      INTEGER :: i = 1, j = 2\n      REAL :: x(2,2) = RESHAPE((/0.,0.,0.,1./),SHAPE(x))\n! Fortran 77\n      INTEGER i, j\n      REAL x(2,2)\n      DATA i/1/, j/2/, x/3*0.,1./\n```\n\nNote that variables which are explicitly initialized in declarations or in `DATA` statements automatically acquire the `SAVE` attribute.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Old-style-variable-initialization.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Old-style-variable-initialization.html)"
- name: 5.1.3. Extensions to namelist ¶
  id: extensions-to-namelist
  summary: GNU Fortran fully supports the Fortran 95 standard for namelist I/O including array qualifiers, substrings and fully qualified derived types
  description: "Next: [`X` format descriptor without count field](x-format-descriptor-without-count-field), Previous: [Old-style variable initialization](old-style-variable-initialization), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.3 Extensions to namelist [¶](#Extensions-to-namelist-1)\n\nGNU Fortran fully supports the Fortran 95 standard for namelist I/O including array qualifiers, substrings and fully qualified derived types. The output from a namelist write is compatible with namelist read. The output has all names in upper case and indentation to column 1 after the namelist name. Two extensions are permitted:\n\nOld-style use of ‘`$`’ instead of ‘`&`’\n\n``` example-preformatted\n$MYNML\n X(:)%Y(2) = 1.0 2.0 3.0\n CH(1:4) = \"abcd\"\n$END\n```\n\nIt should be noted that the default terminator is ‘`/`’ rather than ‘`&END`’.\n\nQuerying of the namelist when inputting from stdin. After at least one space, entering ‘`?`’ sends to stdout the namelist name and the names of the variables in the namelist:\n\n``` example-preformatted\n?\n\n&mynml\n x\n x%y\n ch\n&end\n```\n\nEntering ‘`=?`’ outputs the namelist to stdout, as if `WRITE(*,NML = mynml)` had been called:\n\n``` example-preformatted\n=?\n\n&MYNML\n X(1)%Y=  0.000000    ,  1.000000    ,  0.000000    ,\n X(2)%Y=  0.000000    ,  2.000000    ,  0.000000    ,\n X(3)%Y=  0.000000    ,  3.000000    ,  0.000000    ,\n CH=abcd,  /\n```\n\nTo aid this dialog, when input is from stdin, errors send their messages to stderr and execution continues, even if `IOSTAT` is set.\n\n`PRINT` namelist is permitted. This causes an error if `-std=f95` is used.\n\n``` example-preformatted\nPROGRAM test_print\n  REAL, dimension (4)  ::  x = (/1.0, 2.0, 3.0, 4.0/)\n  NAMELIST /mynml/ x\n  PRINT mynml\nEND PROGRAM test_print\n```\n\nExpanded namelist reads are permitted. This causes an error if `-std=f95` is used. In the following example, the first element of the array will be given the value 0.00 and the two succeeding elements will be given the values 1.00 and 2.00.\n\n``` example-preformatted\n&MYNML\n  X(1,1) = 0.00 , 1.00 , 2.00\n/\n```\n\nWhen writing a namelist, if no `DELIM=` is specified, by default a double quote is used to delimit character strings. If -std=F95, F2003, or F2008, etc, the delim status is set to ’none’. Defaulting to quotes ensures that namelists with character strings can be subsequently read back in accurately.\n\nNext: [`X` format descriptor without count field](x-format-descriptor-without-count-field), Previous: [Old-style variable initialization](old-style-variable-initialization), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Extensions-to-namelist.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Extensions-to-namelist.html)"
- name: 5.1.4. X format descriptor without count field ¶
  id: x-format-descriptor-without-count-field
  summary: To support legacy codes, GNU Fortran permits the count field of the X edit descriptor in FORMAT statements to be omitted
  description: "Next: [Commas in `FORMAT` specifications](commas-in-format-specifications), Previous: [Extensions to namelist](extensions-to-namelist), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.4 X format descriptor without count field [¶](#X-format-descriptor-without-count-field-1)\n\nTo support legacy codes, GNU Fortran permits the count field of the `X` edit descriptor in `FORMAT` statements to be omitted. When omitted, the count is implicitly assumed to be one.\n\n``` example-preformatted\nPRINT 10, 2, 3\n10     FORMAT (I1, X, I1)\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/X-format-descriptor-without-count-field.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/X-format-descriptor-without-count-field.html)"
- name: 5.1.5. Commas in FORMAT specifications ¶
  id: commas-in-format-specifications
  summary: To support legacy codes, GNU Fortran allows the comma separator to be omitted immediately before and after character string edit descriptors in FORMAT statements
  description: "Next: [Missing period in `FORMAT` specifications](missing-period-in-format-specifications), Previous: [`X` format descriptor without count field](x-format-descriptor-without-count-field), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.5 Commas in FORMAT specifications [¶](#Commas-in-FORMAT-specifications-1)\n\nTo support legacy codes, GNU Fortran allows the comma separator to be omitted immediately before and after character string edit descriptors in `FORMAT` statements. A comma with no following format decriptor is permited if the `-fdec-blank-format-item` is given on the command line. This is considered non-conforming code and is discouraged.\n\n``` example-preformatted\nPRINT 10, 2, 3\n10     FORMAT ('FOO='I1' BAR='I2)\n       print 20, 5, 6\n20     FORMAT (I3, I3,)\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Commas-in-FORMAT-specifications.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Commas-in-FORMAT-specifications.html)"
- name: 5.1.6. Missing period in FORMAT specifications ¶
  id: missing-period-in-format-specifications
  summary: To support legacy codes, GNU Fortran allows missing periods in format specifications if and only if -std=legacy is given on the command line
  description: "Next: [Default widths for `F`, `G` and `I` format descriptors](default-widths-for-f_002c-g-and-i-format-descriptors), Previous: [Commas in `FORMAT` specifications](commas-in-format-specifications), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.6 Missing period in FORMAT specifications [¶](#Missing-period-in-FORMAT-specifications-1)\n\nTo support legacy codes, GNU Fortran allows missing periods in format specifications if and only if `-std=legacy` is given on the command line. This is considered non-conforming code and is discouraged.\n\n``` example-preformatted\nREAL :: value\n       READ(*,10) value\n10     FORMAT ('F4')\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Missing-period-in-FORMAT-specifications.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Missing-period-in-FORMAT-specifications.html)"
- name: 5.1.7. Default widths for F, G and I format descriptors ¶
  id: default-widths-for-f_002c-g-and-i-format-descriptors
  summary: To support legacy codes, GNU Fortran allows width to be omitted from format specifications if and only if -fdec-format-defaults is given on the command line
  description: "Next: [I/O item lists](i_002fo-item-lists), Previous: [Missing period in `FORMAT` specifications](missing-period-in-format-specifications), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.7 Default widths for F, G and I format descriptors [¶](#Default-widths-for-F_002c-G-and-I-format-descriptors-1)\n\nTo support legacy codes, GNU Fortran allows width to be omitted from format specifications if and only if `-fdec-format-defaults` is given on the command line. Default widths will be used. This is considered non-conforming code and is discouraged.\n\n``` example-preformatted\nREAL :: value1\n       INTEGER :: value2\n       WRITE(*,10) value1, value1, value2\n10     FORMAT ('F, G, I')\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Default-widths-for-F_002c-G-and-I-format-descriptors.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Default-widths-for-F_002c-G-and-I-format-descriptors.html)"
- name: 5.1.8. I/O item lists ¶
  id: i_002fo-item-lists
  summary: To support legacy codes, GNU Fortran allows the input item list of the READ statement, and the output item lists of the WRITE and PRINT statements, to start with a comma
  description: "Next: [`Q` exponent-letter](q-exponent-letter), Previous: [Default widths for `F`, `G` and `I` format descriptors](default-widths-for-f_002c-g-and-i-format-descriptors), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.8 I/O item lists [¶](#I_002fO-item-lists-1)\n\nTo support legacy codes, GNU Fortran allows the input item list of the `READ` statement, and the output item lists of the `WRITE` and `PRINT` statements, to start with a comma.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/I_002fO-item-lists.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/I_002fO-item-lists.html)"
- name: 5.1.9. Q exponent-letter ¶
  id: q-exponent-letter
  summary: GNU Fortran accepts real literal constants with an exponent-letter of Q, for example, 1.23Q45
  description: "Next: [BOZ literal constants](boz-literal-constants), Previous: [I/O item lists](i_002fo-item-lists), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.9 Q exponent-letter [¶](#Q-exponent-letter-1)\n\nGNU Fortran accepts real literal constants with an exponent-letter of `Q`, for example, `1.23Q45`. The constant is interpreted as a `REAL(16)` entity on targets that support this type. If the target does not support `REAL(16)` but has a `REAL(10)` type, then the real-literal-constant will be interpreted as a `REAL(10)` entity. In the absence of `REAL(16)` and `REAL(10)`, an error will occur.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Q-exponent-letter.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Q-exponent-letter.html)"
- name: 5.1.10. BOZ literal constants ¶
  id: boz-literal-constants
  summary: Besides decimal constants, Fortran also supports binary (b), octal (o) and hexadecimal (z) integer constants
  description: "Next: [Real array indices](real-array-indices), Previous: [`Q` exponent-letter](q-exponent-letter), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.10 BOZ literal constants [¶](#BOZ-literal-constants-1)\n\nBesides decimal constants, Fortran also supports binary (`b`), octal (`o`) and hexadecimal (`z`) integer constants. The syntax is: ‘`prefix quote digits quote`’, where the prefix is either `b`, `o` or `z`, quote is either `'` or `\"` and the digits are `0` or `1` for binary, between `0` and `7` for octal, and between `0` and `F` for hexadecimal. (Example: `b'01011101'`.)\n\nUp to Fortran 95, BOZ literal constants were only allowed to initialize integer variables in DATA statements. Since Fortran 2003 BOZ literal constants are also allowed as actual arguments to the `REAL`, `DBLE`, `INT` and `CMPLX` intrinsic functions. The BOZ literal constant is simply a string of bits, which is padded or truncated as needed, during conversion to a numeric type. The Fortran standard states that the treatment of the sign bit is processor dependent. Gfortran interprets the sign bit as a user would expect.\n\nAs a deprecated extension, GNU Fortran allows hexadecimal BOZ literal constants to be specified using the `X` prefix. That the BOZ literal constant can also be specified by adding a suffix to the string, for example, `Z'ABC'` and `'ABC'X` are equivalent. Additionally, as extension, BOZ literals are permitted in some contexts outside of `DATA` and the intrinsic functions listed in the Fortran standard. Use `-fallow-invalid-boz` to enable the extension.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BOZ-literal-constants.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BOZ-literal-constants.html)"
- name: 5.1.11. Real array indices ¶
  id: real-array-indices
  summary: As an extension, GNU Fortran allows the use of REAL expressions or variables as array indices
  description: "Next: [Unary operators](unary-operators), Previous: [BOZ literal constants](boz-literal-constants), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.11 Real array indices [¶](#Real-array-indices-1)\n\nAs an extension, GNU Fortran allows the use of `REAL` expressions or variables as array indices.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Real-array-indices.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Real-array-indices.html)"
- name: 5.1.12. Unary operators ¶
  id: unary-operators
  summary: As an extension, GNU Fortran allows unary plus and unary minus operators to appear as the second operand of binary arithmetic operators without the need for parenthesis
  description: "Next: [Implicitly convert `LOGICAL` and `INTEGER` values](implicitly-convert-logical-and-integer-values), Previous: [Real array indices](real-array-indices), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.12 Unary operators [¶](#Unary-operators-1)\n\nAs an extension, GNU Fortran allows unary plus and unary minus operators to appear as the second operand of binary arithmetic operators without the need for parenthesis.\n\n``` example-preformatted\nX = Y * -Z\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Unary-operators.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Unary-operators.html)"
- name: 5.1.13. Implicitly convert LOGICAL and INTEGER values ¶
  id: implicitly-convert-logical-and-integer-values
  summary: As an extension for backwards compatibility with other compilers, GNU Fortran allows the implicit conversion of LOGICAL values to INTEGER values and vice versa
  description: "Next: [Hollerith constants support](hollerith-constants-support), Previous: [Unary operators](unary-operators), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.13 Implicitly convert LOGICAL and INTEGER values [¶](#Implicitly-convert-LOGICAL-and-INTEGER-values-1)\n\nAs an extension for backwards compatibility with other compilers, GNU Fortran allows the implicit conversion of `LOGICAL` values to `INTEGER` values and vice versa. When converting from a `LOGICAL` to an `INTEGER`, `.FALSE.` is interpreted as zero, and `.TRUE.` is interpreted as one. When converting from `INTEGER` to `LOGICAL`, the value zero is interpreted as `.FALSE.` and any nonzero value is interpreted as `.TRUE.`.\n\n``` example-preformatted\nLOGICAL :: l\nl = 1\n```\n\n``` example-preformatted\nINTEGER :: i\ni = .TRUE.\n```\n\nHowever, there is no implicit conversion of `INTEGER` values in `if`-statements, nor of `LOGICAL` or `INTEGER` values in I/O operations.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Implicitly-convert-LOGICAL-and-INTEGER-values.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Implicitly-convert-LOGICAL-and-INTEGER-values.html)"
- name: 5.1.14. Hollerith constants support ¶
  id: hollerith-constants-support
  summary: GNU Fortran supports Hollerith constants in assignments, DATA statements, function and subroutine arguments
  description: "Next: [Character conversion](character-conversion), Previous: [Implicitly convert `LOGICAL` and `INTEGER` values](implicitly-convert-logical-and-integer-values), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.14 Hollerith constants support [¶](#Hollerith-constants-support-1)\n\nGNU Fortran supports Hollerith constants in assignments, `DATA` statements, function and subroutine arguments. A Hollerith constant is written as a string of characters preceded by an integer constant indicating the character count, and the letter `H` or `h`, and stored in bytewise fashion in a numeric (`INTEGER`, `REAL`, or `COMPLEX`), `LOGICAL` or `CHARACTER` variable. The constant will be padded with spaces or truncated to fit the size of the variable in which it is stored.\n\nExamples of valid uses of Hollerith constants:\n\n``` example-preformatted\ncomplex*16 x(2)\ndata x /16Habcdefghijklmnop, 16Hqrstuvwxyz012345/\nx(1) = 16HABCDEFGHIJKLMNOP\ncall foo (4h abc)\n```\n\nExamples of Hollerith constants:\n\n``` example-preformatted\ninteger*4 a\na = 0H         ! Invalid, at least one character is needed.\na = 4HAB12     ! Valid\na = 8H12345678 ! Valid, but the Hollerith constant will be truncated.\na = 3Hxyz      ! Valid, but the Hollerith constant will be padded.\n```\n\nIn general, Hollerith constants were used to provide a rudimentary facility for handling character strings in early Fortran compilers, prior to the introduction of `CHARACTER` variables in Fortran 77; in those cases, the standard-compliant equivalent is to convert the program to use proper character strings. On occasion, there may be a case where the intent is specifically to initialize a numeric variable with a given byte sequence. In these cases, the same result can be obtained by using the `TRANSFER` statement, as in this example.\n\n``` example-preformatted\ninteger(kind=4) :: a\na = transfer (\"abcd\", a)     ! equivalent to: a = 4Habcd\n```\n\nThe use of the `-fdec` option extends support of Hollerith constants to comparisons:\n\n``` example-preformatted\ninteger*4 a\na = 4hABCD\nif (a .ne. 4habcd) then\n  write(*,*) \"no match\"\nend if\n```\n\nSupported types are numeric (`INTEGER`, `REAL`, or `COMPLEX`), and `CHARACTER`.\n\nNext: [Character conversion](character-conversion), Previous: [Implicitly convert `LOGICAL` and `INTEGER` values](implicitly-convert-logical-and-integer-values), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Hollerith-constants-support.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Hollerith-constants-support.html)"
- name: 5.1.15. Character conversion ¶
  id: character-conversion
  summary: Allowing character literals to be used in a similar way to Hollerith constants is a non-standard extension
  description: "Next: [Cray pointers](cray-pointers), Previous: [Hollerith constants support](hollerith-constants-support), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.15 Character conversion [¶](#Character-conversion-1)\n\nAllowing character literals to be used in a similar way to Hollerith constants is a non-standard extension. This feature is enabled using -fdec-char-conversions and only applies to character literals of `kind=1`.\n\nCharacter literals can be used in `DATA` statements and assignments with numeric (`INTEGER`, `REAL`, or `COMPLEX`) or `LOGICAL` variables. Like Hollerith constants they are copied byte-wise fashion. The constant will be padded with spaces or truncated to fit the size of the variable in which it is stored.\n\nExamples:\n\n``` example-preformatted\ninteger*4 x\ndata x / 'abcd' /\n\nx = 'A'       ! Will be padded.\nx = 'ab1234'  ! Will be truncated.\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Character-conversion.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Character-conversion.html)"
- name: 5.1.16. Cray pointers ¶
  id: cray-pointers
  summary: Cray pointers are part of a non-standard extension that provides a C-like pointer in Fortran
  description: "Next: [`CONVERT` specifier](convert-specifier), Previous: [Character conversion](character-conversion), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.16 Cray pointers [¶](#Cray-pointers-1)\n\nCray pointers are part of a non-standard extension that provides a C-like pointer in Fortran. This is accomplished through a pair of variables: an integer \"pointer\" that holds a memory address, and a \"pointee\" that is used to dereference the pointer.\n\nPointer/pointee pairs are declared in statements of the form:\n\n``` example-preformatted\npointer ( <pointer> , <pointee> )\n```\n\nor,\n\n``` example-preformatted\npointer ( <pointer1> , <pointee1> ), ( <pointer2> , <pointee2> ), ...\n```\n\nThe pointer is an integer that is intended to hold a memory address. The pointee may be an array or scalar. If an assumed-size array is permitted within the scoping unit, a pointee can be an assumed-size array. That is, the last dimension may be left unspecified by using a `*` in place of a value. A pointee cannot be an assumed shape array. No space is allocated for the pointee.\n\nThe pointee may have its type declared before or after the pointer statement, and its array specification (if any) may be declared before, during, or after the pointer statement. The pointer may be declared as an integer prior to the pointer statement. However, some machines have default integer sizes that are different than the size of a pointer, and so the following code is not portable:\n\n``` example-preformatted\ninteger ipt\npointer (ipt, iarr)\n```\n\nIf a pointer is declared with a kind that is too small, the compiler will issue a warning; the resulting binary will probably not work correctly, because the memory addresses stored in the pointers may be truncated. It is safer to omit the first line of the above example; if explicit declaration of ipt’s type is omitted, then the compiler will ensure that ipt is an integer variable large enough to hold a pointer.\n\nPointer arithmetic is valid with Cray pointers, but it is not the same as C pointer arithmetic. Cray pointers are just ordinary integers, so the user is responsible for determining how many bytes to add to a pointer in order to increment it. Consider the following example:\n\n``` example-preformatted\nreal target(10)\nreal pointee(10)\npointer (ipt, pointee)\nipt = loc (target)\nipt = ipt + 1\n```\n\nThe last statement does not set `ipt` to the address of `target(1)`, as it would in C pointer arithmetic. Adding `1` to `ipt` just adds one byte to the address stored in `ipt`.\n\nAny expression involving the pointee will be translated to use the value stored in the pointer as the base address.\n\nTo get the address of elements, this extension provides an intrinsic function `LOC()`. The `LOC()` function is equivalent to the `&` operator in C, except the address is cast to an integer type:\n\n``` example-preformatted\nreal ar(10)\npointer(ipt, arpte(10))\nreal arpte\nipt = loc(ar)  ! Makes arpte is an alias for ar\narpte(1) = 1.0 ! Sets ar(1) to 1.0\n```\n\nThe pointer can also be set by a call to the `MALLOC` intrinsic (see [`MALLOC` — Allocate dynamic memory](malloc)).\n\nCray pointees often are used to alias an existing variable. For example:\n\n``` example-preformatted\ninteger target(10)\ninteger iarr(10)\npointer (ipt, iarr)\nipt = loc(target)\n```\n\nAs long as `ipt` remains unchanged, `iarr` is now an alias for `target`. The optimizer, however, will not detect this aliasing, so it is unsafe to use `iarr` and `target` simultaneously. Using a pointee in any way that violates the Fortran aliasing rules or assumptions is illegal. It is the user’s responsibility to avoid doing this; the compiler works under the assumption that no such aliasing occurs.\n\nCray pointers will work correctly when there is no aliasing (i.e., when they are used to access a dynamically allocated block of memory), and also in any routine where a pointee is used, but any variable with which it shares storage is not used. Code that violates these rules may not run as the user intends. This is not a bug in the optimizer; any code that violates the aliasing rules is illegal. (Note that this is not unique to GNU Fortran; any Fortran compiler that supports Cray pointers will “incorrectly” optimize code with illegal aliasing.)\n\nThere are a number of restrictions on the attributes that can be applied to Cray pointers and pointees. Pointees may not have the `ALLOCATABLE`, `INTENT`, `OPTIONAL`, `DUMMY`, `TARGET`, `INTRINSIC`, or `POINTER` attributes. Pointers may not have the `DIMENSION`, `POINTER`, `TARGET`, `ALLOCATABLE`, `EXTERNAL`, or `INTRINSIC` attributes, nor may they be function results. Pointees may not occur in more than one pointer statement. A pointee cannot be a pointer. Pointees cannot occur in equivalence, common, or data statements.\n\nA Cray pointer may also point to a function or a subroutine. For example, the following excerpt is valid:\n\n``` example-preformatted\nimplicit none\nexternal sub\npointer (subptr,subpte)\nexternal subpte\nsubptr = loc(sub)\ncall subpte()\n[...]\nsubroutine sub\n[...]\nend subroutine sub\n```\n\nA pointer may be modified during the course of a program, and this will change the location to which the pointee refers. However, when pointees are passed as arguments, they are treated as ordinary variables in the invoked function. Subsequent changes to the pointer will not change the base address of the array that was passed.\n\nNext: [`CONVERT` specifier](convert-specifier), Previous: [Character conversion](character-conversion), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Cray-pointers.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Cray-pointers.html)"
- name: 5.1.17. CONVERT specifier ¶
  id: convert-specifier
  summary: GNU Fortran allows the conversion of unformatted data between little- and big-endian representation to facilitate moving of data between different systems
  description: "Next: [OpenMP](openmp), Previous: [Cray pointers](cray-pointers), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.17 CONVERT specifier [¶](#CONVERT-specifier-1)\n\nGNU Fortran allows the conversion of unformatted data between little- and big-endian representation to facilitate moving of data between different systems. The conversion can be indicated with the `CONVERT` specifier on the `OPEN` statement. See [`GFORTRAN_CONVERT_UNIT`—Set conversion for unformatted I/O](gfortran_005fconvert_005funit), for an alternative way of specifying the data format via an environment variable.\n\nValid values for `CONVERT` on most systems are:\n\n- `CONVERT='NATIVE'` Use the native format. This is the default.\n- `CONVERT='SWAP'` Swap between little- and big-endian.\n- `CONVERT='LITTLE_ENDIAN'` Use the little-endian representation for unformatted files.\n- `CONVERT='BIG_ENDIAN'` Use the big-endian representation for unformatted files.\n\nOn POWER systems which support `-mabi=ieeelongdouble`, there are additional options, which can be combined with the others with commas. Those are\n\n- `CONVERT='R16_IEEE'` Use IEEE 128-bit format for `REAL(KIND=16)`.\n- `CONVERT='R16_IBM'` Use IBM `long double` format for real`REAL(KIND=16)`.\n\nUsing the option could look like this:\n\n``` example-preformatted\nopen(file='big.dat',form='unformatted',access='sequential', &\n     convert='big_endian')\n```\n\nThe value of the conversion can be queried by using `INQUIRE(CONVERT=ch)`. The values returned are `'BIG_ENDIAN'` and `'LITTLE_ENDIAN'`.\n\n`CONVERT` works between big- and little-endian for `INTEGER` values of all supported kinds and for `REAL` on IEEE systems of kinds 4 and 8. Conversion between different “extended double” types on different architectures such as m68k and x86_64, which GNU Fortran supports as `REAL(KIND=10)` and `REAL(KIND=16)`, will probably not work.\n\n*Note that the values specified via the GFORTRAN_CONVERT_UNIT environment variable will override the CONVERT specifier in the open statement*. This is to give control over data formats to users who do not have the source code of their program available.\n\nUsing anything but the native representation for unformatted data carries a significant speed overhead. If speed in this area matters to you, it is best if you use this only for data that needs to be portable.\n\nNext: [OpenMP](openmp), Previous: [Cray pointers](cray-pointers), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CONVERT-specifier.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CONVERT-specifier.html)"
- name: 5.1.18. OpenMP ¶
  id: openmp
  summary: OpenMP (Open Multi-Processing) is an application programming interface (API) that supports multi-platform shared memory multiprocessing programming in C/C++ and Fortran on many architectures, including Unix and Microsoft Windows platforms
  description: "Next: [OpenACC](openacc), Previous: [`CONVERT` specifier](convert-specifier), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.18 OpenMP [¶](#OpenMP-1)\n\nOpenMP (Open Multi-Processing) is an application programming interface (API) that supports multi-platform shared memory multiprocessing programming in C/C++ and Fortran on many architectures, including Unix and Microsoft Windows platforms. It consists of a set of compiler directives, library routines, and environment variables that influence run-time behavior.\n\nGNU Fortran strives to be compatible to the [OpenMP Application Program Interface v4.5](https://openmp.org/specifications/).\n\nTo enable the processing of the OpenMP directive `!$omp` in free-form source code; the `c$omp`, `*$omp` and `!$omp` directives in fixed form; the `!$` conditional compilation sentinels in free form; and the `c$`, `*$` and `!$` sentinels in fixed form, `gfortran` needs to be invoked with the `-fopenmp`. This also arranges for automatic linking of the GNU Offloading and Multi Processing Runtime Library [libgomp](https://gcc.gnu.org/onlinedocs/libgomp/index.html#Top) in GNU Offloading and Multi Processing Runtime Library.\n\nThe OpenMP Fortran runtime library routines are provided both in a form of a Fortran 90 module named `omp_lib` and in a form of a Fortran `include` file named `omp_lib.h`.\n\nAn example of a parallelized loop taken from Appendix A.1 of the OpenMP Application Program Interface v2.5:\n\n``` example-preformatted\nSUBROUTINE A1(N, A, B)\n  INTEGER I, N\n  REAL B(N), A(N)\n!$OMP PARALLEL DO !I is private by default\n  DO I=2,N\n    B(I) = (A(I) + A(I-1)) / 2.0\n  ENDDO\n!$OMP END PARALLEL DO\nEND SUBROUTINE A1\n```\n\nPlease note:\n\n- `-fopenmp` implies `-frecursive`, i.e., all local arrays will be allocated on the stack. When porting existing code to OpenMP, this may lead to surprising results, especially to segmentation faults if the stacksize is limited.\n- On glibc-based systems, OpenMP enabled applications cannot be statically linked due to limitations of the underlying pthreads-implementation. It might be possible to get a working solution if `-Wl,--whole-archive -lpthread -Wl,--no-whole-archive` is added to the command line. However, this is not supported by `gcc` and thus not recommended.\n\nNext: [OpenACC](openacc), Previous: [`CONVERT` specifier](convert-specifier), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/OpenMP.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/OpenMP.html)"
- name: 5.1.19. OpenACC ¶
  id: openacc
  summary: OpenACC is an application programming interface (API) that supports offloading of code to accelerator devices
  description: "Next: [Argument list functions `%VAL`, `%REF` and `%LOC`](argument-list-functions), Previous: [OpenMP](openmp), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.19 OpenACC [¶](#OpenACC-1)\n\nOpenACC is an application programming interface (API) that supports offloading of code to accelerator devices. It consists of a set of compiler directives, library routines, and environment variables that influence run-time behavior.\n\nGNU Fortran strives to be compatible to the [OpenACC Application Programming Interface v2.6](https://www.openacc.org/).\n\nTo enable the processing of the OpenACC directive `!$acc` in free-form source code; the `c$acc`, `*$acc` and `!$acc` directives in fixed form; the `!$` conditional compilation sentinels in free form; and the `c$`, `*$` and `!$` sentinels in fixed form, `gfortran` needs to be invoked with the `-fopenacc`. This also arranges for automatic linking of the GNU Offloading and Multi Processing Runtime Library [libgomp](https://gcc.gnu.org/onlinedocs/libgomp/index.html#Top) in GNU Offloading and Multi Processing Runtime Library.\n\nThe OpenACC Fortran runtime library routines are provided both in a form of a Fortran 90 module named `openacc` and in a form of a Fortran `include` file named `openacc_lib.h`.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/OpenACC.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/OpenACC.html)"
- name: 5.1.20. Argument list functions %VAL, %REF and %LOC ¶
  id: argument-list-functions
  summary: GNU Fortran supports argument list functions %VAL, %REF and %LOC statements, for backward compatibility with g77
  description: "Next: [Read/Write after EOF marker](read_002fwrite-after-eof-marker), Previous: [OpenACC](openacc), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.20 Argument list functions %VAL, %REF and %LOC [¶](#Argument-list-functions-_0025VAL_002c-_0025REF-and-_0025LOC)\n\nGNU Fortran supports argument list functions `%VAL`, `%REF` and `%LOC` statements, for backward compatibility with g77. It is recommended that these should be used only for code that is accessing facilities outside of GNU Fortran, such as operating system or windowing facilities. It is best to constrain such uses to isolated portions of a program–portions that deal specifically and exclusively with low-level, system-dependent facilities. Such portions might well provide a portable interface for use by the program as a whole, but are themselves not portable, and should be thoroughly tested each time they are rebuilt using a new compiler or version of a compiler.\n\n`%VAL` passes a scalar argument by value, `%REF` passes it by reference and `%LOC` passes its memory location. Since gfortran already passes scalar arguments by reference, `%REF` is in effect a do-nothing. `%LOC` has the same effect as a Fortran pointer.\n\nAn example of passing an argument by value to a C subroutine foo.:\n\n``` example-preformatted\nC\nC prototype      void foo_ (float x);\nC\n      external foo\n      real*4 x\n      x = 3.14159\n      call foo (%VAL (x))\n      end\n```\n\nFor details refer to the g77 manual [https://gcc.gnu.org/onlinedocs/gcc-3.4.6/g77/index.html#Top](https://gcc.gnu.org/onlinedocs/gcc-3.4.6/g77/index.html#Top).\n\nAlso, `c_by_val.f` and its partner `c_by_val.c` of the GNU Fortran testsuite are worth a look.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Argument-list-functions.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Argument-list-functions.html)"
- name: 5.1.21. Read/Write after EOF marker ¶
  id: read_002fwrite-after-eof-marker
  summary: Some legacy codes rely on allowing READ or WRITE after the EOF file marker in order to find the end of a file
  description: "Next: [`STRUCTURE` and `RECORD`](structure-and-record), Previous: [Argument list functions `%VAL`, `%REF` and `%LOC`](argument-list-functions), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.21 Read/Write after EOF marker [¶](#Read_002fWrite-after-EOF-marker-1)\n\nSome legacy codes rely on allowing `READ` or `WRITE` after the EOF file marker in order to find the end of a file. GNU Fortran normally rejects these codes with a run-time error message and suggests the user consider `BACKSPACE` or `REWIND` to properly position the file before the EOF marker. As an extension, the run-time error may be disabled using -std=legacy.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Read_002fWrite-after-EOF-marker.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Read_002fWrite-after-EOF-marker.html)"
- name: 5.1.22. STRUCTURE and RECORD ¶
  id: structure-and-record
  summary: Record structures are a pre-Fortran-90 vendor extension to create user-defined aggregate data types
  description: "Next: [`UNION` and `MAP`](union-and-map), Previous: [Read/Write after EOF marker](read_002fwrite-after-eof-marker), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.22 STRUCTURE and RECORD [¶](#STRUCTURE-and-RECORD-1)\n\nRecord structures are a pre-Fortran-90 vendor extension to create user-defined aggregate data types. Support for record structures in GNU Fortran can be enabled with the `-fdec-structure` compile flag. If you have a choice, you should instead use Fortran 90’s “derived types”, which have a different syntax.\n\nIn many cases, record structures can easily be converted to derived types. To convert, replace `STRUCTURE /``structure-name``/` by `TYPE` `type-name`. Additionally, replace `RECORD /``structure-name``/` by `TYPE(``type-name``)`. Finally, in the component access, replace the period (`.`) by the percent sign (`%`).\n\nHere is an example of code using the non portable record structure syntax:\n\n``` example-preformatted\n! Declaring a structure named ``item'' and containing three fields:\n! an integer ID, an description string and a floating-point price.\nSTRUCTURE /item/\n  INTEGER id\n  CHARACTER(LEN=200) description\n  REAL price\nEND STRUCTURE\n\n! Define two variables, an single record of type ``item''\n! named ``pear'', and an array of items named ``store_catalog''\nRECORD /item/ pear, store_catalog(100)\n\n! We can directly access the fields of both variables\npear.id = 92316\npear.description = \"juicy D'Anjou pear\"\npear.price = 0.15\nstore_catalog(7).id = 7831\nstore_catalog(7).description = \"milk bottle\"\nstore_catalog(7).price = 1.2\n\n! We can also manipulate the whole structure\nstore_catalog(12) = pear\nprint *, store_catalog(12)\n```\n\nThis code can easily be rewritten in the Fortran 90 syntax as following:\n\n``` example-preformatted\n! ``STRUCTURE /name/ ... END STRUCTURE'' becomes\n! ``TYPE name ... END TYPE''\nTYPE item\n  INTEGER id\n  CHARACTER(LEN=200) description\n  REAL price\nEND TYPE\n\n! ``RECORD /name/ variable'' becomes ``TYPE(name) variable''\nTYPE(item) pear, store_catalog(100)\n\n! Instead of using a dot (.) to access fields of a record, the\n! standard syntax uses a percent sign (%)\npear%id = 92316\npear%description = \"juicy D'Anjou pear\"\npear%price = 0.15\nstore_catalog(7)%id = 7831\nstore_catalog(7)%description = \"milk bottle\"\nstore_catalog(7)%price = 1.2\n\n! Assignments of a whole variable do not change\nstore_catalog(12) = pear\nprint *, store_catalog(12)\n```\n\nGNU Fortran implements STRUCTURES like derived types with the following rules and exceptions:\n\n- Structures act like derived types with the `SEQUENCE` attribute. Otherwise they may contain no specifiers.\n\n- Structures may contain a special field with the name `%FILL`. This will create an anonymous component which cannot be accessed but occupies space just as if a component of the same type was declared in its place, useful for alignment purposes. As an example, the following structure will consist of at least sixteen bytes:\n  ``` example-preformatted\n  structure /padded/\n    character(4) start\n    character(8) %FILL\n    character(4) end\n  end structure\n  ```\n\n- Structures may share names with other symbols. For example, the following is invalid for derived types, but valid for structures:\n  ``` example-preformatted\n  structure /header/\n    ! ...\n  end structure\n  record /header/ header\n  ```\n\n- Structure types may be declared nested within another parent structure. The syntax is:\n\n  ``` example-preformatted\n  structure /type-name/\n      ...\n      structure [/<type-name>/] <field-list>\n  ...\n  ```\n\n  The type name may be ommitted, in which case the structure type itself is anonymous, and other structures of the same type cannot be instantiated. The following shows some examples:\n\n  ``` example-preformatted\n  structure /appointment/\n    ! nested structure definition: app_time is an array of two 'time'\n    structure /time/ app_time (2)\n      integer(1) hour, minute\n    end structure\n    character(10) memo\n  end structure\n\n  ! The 'time' structure is still usable\n  record /time/ now\n  now = time(5, 30)\n\n  ...\n\n  structure /appointment/\n    ! anonymous nested structure definition\n    structure start, end\n      integer(1) hour, minute\n    end structure\n    character(10) memo\n  end structure\n  ```\n\n- Structures may contain `UNION` blocks. For more detail see the section on [`UNION` and `MAP`](union-and-map).\n\n- Structures support old-style initialization of components, like those described in [Old-style variable initialization](old-style-variable-initialization). For array initializers, an initializer may contain a repeat specification of the form `<literal-integer> * <constant-initializer>`. The value of the integer indicates the number of times to repeat the constant initializer when expanding the initializer list.\n\nNext: [`UNION` and `MAP`](union-and-map), Previous: [Read/Write after EOF marker](read_002fwrite-after-eof-marker), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/STRUCTURE-and-RECORD.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/STRUCTURE-and-RECORD.html)"
- name: 5.1.23. UNION and MAP ¶
  id: union-and-map
  summary: Unions are an old vendor extension which were commonly used with the non-standard STRUCTURE and RECORD extensions
  description: "Next: [Type variants for integer intrinsics](type-variants-for-integer-intrinsics), Previous: [`STRUCTURE` and `RECORD`](structure-and-record), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.23 UNION and MAP [¶](#UNION-and-MAP-1)\n\nUnions are an old vendor extension which were commonly used with the non-standard [`STRUCTURE` and `RECORD`](structure-and-record) extensions. Use of `UNION` and `MAP` is automatically enabled with `-fdec-structure`.\n\nA `UNION` declaration occurs within a structure; within the definition of each union is a number of `MAP` blocks. Each `MAP` shares storage with its sibling maps (in the same union), and the size of the union is the size of the largest map within it, just as with unions in C. The major difference is that component references do not indicate which union or map the component is in (the compiler gets to figure that out).\n\nHere is a small example:\n\n``` example-preformatted\nstructure /myunion/\nunion\n  map\n    character(2) w0, w1, w2\n  end map\n  map\n    character(6) long\n  end map\nend union\nend structure\n\nrecord /myunion/ rec\n! After this assignment...\nrec.long = 'hello!'\n\n! The following is true:\n! rec.w0 === 'he'\n! rec.w1 === 'll'\n! rec.w2 === 'o!'\n```\n\nThe two maps share memory, and the size of the union is ultimately six bytes:\n\n``` example-preformatted\n0    1    2    3    4   5   6     Byte offset\n-------------------------------\n|    |    |    |    |    |    |\n-------------------------------\n\n^    W0   ^    W1   ^    W2   ^\n \\-------/ \\-------/ \\-------/\n\n^             LONG            ^\n \\---------------------------/\n```\n\nFollowing is an example mirroring the layout of an Intel x86_64 register:\n\n``` example-preformatted\nstructure /reg/\n  union ! U0                ! rax\n    map\n      character(16) rx\n    end map\n    map\n      character(8) rh         ! rah\n      union ! U1\n        map\n          character(8) rl     ! ral\n        end map\n        map\n          character(8) ex     ! eax\n        end map\n        map\n          character(4) eh     ! eah\n          union ! U2\n            map\n              character(4) el ! eal\n            end map\n            map\n              character(4) x  ! ax\n            end map\n            map\n              character(2) h  ! ah\n              character(2) l  ! al\n            end map\n          end union\n        end map\n      end union\n    end map\n  end union\nend structure\nrecord /reg/ a\n\n! After this assignment...\na.rx     =     'AAAAAAAA.BBB.C.D'\n\n! The following is true:\na.rx === 'AAAAAAAA.BBB.C.D'\na.rh === 'AAAAAAAA'\na.rl ===         '.BBB.C.D'\na.ex ===         '.BBB.C.D'\na.eh ===         '.BBB'\na.el ===             '.C.D'\na.x  ===             '.C.D'\na.h  ===             '.C'\na.l  ===               '.D'\n```\n\nNext: [Type variants for integer intrinsics](type-variants-for-integer-intrinsics), Previous: [`STRUCTURE` and `RECORD`](structure-and-record), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/UNION-and-MAP.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/UNION-and-MAP.html)"
- name: 5.1.24. Type variants for integer intrinsics ¶
  id: type-variants-for-integer-intrinsics
  summary: Similar to the D/C prefixes to real functions to specify the input/output types, GNU Fortran offers B/I/J/K prefixes to integer functions for compatibility with DEC programs
  description: "Next: [`AUTOMATIC` and `STATIC` attributes](automatic-and-static-attributes), Previous: [`UNION` and `MAP`](union-and-map), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.24 Type variants for integer intrinsics [¶](#Type-variants-for-integer-intrinsics-1)\n\nSimilar to the D/C prefixes to real functions to specify the input/output types, GNU Fortran offers B/I/J/K prefixes to integer functions for compatibility with DEC programs. The types implied by each are:\n\n``` example-preformatted\nB - INTEGER(kind=1)\nI - INTEGER(kind=2)\nJ - INTEGER(kind=4)\nK - INTEGER(kind=8)\n```\n\nGNU Fortran supports these with the flag `-fdec-intrinsic-ints`. Intrinsics for which prefixed versions are available and in what form are noted in [Intrinsic Procedures](intrinsic-procedures). The complete list of supported intrinsics is here:\n\n| Intrinsic                                       | B        | I         | J         | K         |\n|-------------------------------------------------|----------|-----------|-----------|-----------|\n| [`ABS`` — Absolute value`](abs)                 | `BABS`   | `IIABS`   | `JIABS`   | `KIABS`   |\n| [`BTEST`` — Bit test function`](btest)          | `BBTEST` | `BITEST`  | `BJTEST`  | `BKTEST`  |\n| [`IAND`` — Bitwise logical and`](iand)          | `BIAND`  | `IIAND`   | `JIAND`   | `KIAND`   |\n| [`IBCLR`` — Clear bit`](ibclr)                  | `BBCLR`  | `IIBCLR`  | `JIBCLR`  | `KIBCLR`  |\n| [`IBITS`` — Bit extraction`](ibits)             | `BBITS`  | `IIBITS`  | `JIBITS`  | `KIBITS`  |\n| [`IBSET`` — Set bit`](ibset)                    | `BBSET`  | `IIBSET`  | `JIBSET`  | `KIBSET`  |\n| [`IEOR`` — Bitwise logical exclusive or`](ieor) | `BIEOR`  | `IIEOR`   | `JIEOR`   | `KIEOR`   |\n| [`IOR`` — Bitwise logical or`](ior)             | `BIOR`   | `IIOR`    | `JIOR`    | `KIOR`    |\n| [`ISHFT`` — Shift bits`](ishft)                 | `BSHFT`  | `IISHFT`  | `JISHFT`  | `KISHFT`  |\n| [`ISHFTC`` — Shift bits circularly`](ishftc)    | `BSHFTC` | `IISHFTC` | `JISHFTC` | `KISHFTC` |\n| [`MOD`` — Remainder function`](mod)             | `BMOD`   | `IMOD`    | `JMOD`    | `KMOD`    |\n| [`NOT`` — Logical negation`](not)               | `BNOT`   | `INOT`    | `JNOT`    | `KNOT`    |\n| [`REAL`` — Convert to real type`](real)         | `--`     | `FLOATI`  | `FLOATJ`  | `FLOATK`  |\n\nNext: [`AUTOMATIC` and `STATIC` attributes](automatic-and-static-attributes), Previous: [`UNION` and `MAP`](union-and-map), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Type-variants-for-integer-intrinsics.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Type-variants-for-integer-intrinsics.html)"
- name: 5.1.25. AUTOMATIC and STATIC attributes ¶
  id: automatic-and-static-attributes
  summary: With -fdec-static GNU Fortran supports the DEC extended attributes STATIC and AUTOMATIC to provide explicit specification of entity storage
  description: "Next: [Extended math intrinsics](extended-math-intrinsics), Previous: [Type variants for integer intrinsics](type-variants-for-integer-intrinsics), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.25 AUTOMATIC and STATIC attributes [¶](#AUTOMATIC-and-STATIC-attributes-1)\n\nWith `-fdec-static` GNU Fortran supports the DEC extended attributes `STATIC` and `AUTOMATIC` to provide explicit specification of entity storage. These follow the syntax of the Fortran standard `SAVE` attribute.\n\n`STATIC` is exactly equivalent to `SAVE`, and specifies that an entity should be allocated in static memory. As an example, `STATIC` local variables will retain their values across multiple calls to a function.\n\nEntities marked `AUTOMATIC` will be stack automatic whenever possible. `AUTOMATIC` is the default for local variables smaller than `-fmax-stack-var-size`, unless `-fno-automatic` is given. This attribute overrides `-fno-automatic`, `-fmax-stack-var-size`, and blanket `SAVE` statements.\n\nExamples:\n\n``` example-preformatted\nsubroutine f\n  integer, automatic :: i  ! automatic variable\n  integer x, y             ! static variables\n  save\n  ...\nendsubroutine\n```\n\n``` example-preformatted\nsubroutine f\n  integer a, b, c, x, y, z\n  static :: x\n  save y\n  automatic z, c\n  ! a, b, c, and z are automatic\n  ! x and y are static\nendsubroutine\n```\n\n``` example-preformatted\n! Compiled with -fno-automatic\nsubroutine f\n  integer a, b, c, d\n  automatic :: a\n  ! a is automatic; b, c, and d are static\nendsubroutine\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/AUTOMATIC-and-STATIC-attributes.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/AUTOMATIC-and-STATIC-attributes.html)"
- name: 5.1.26. Extended math intrinsics ¶
  id: extended-math-intrinsics
  summary: GNU Fortran supports an extended list of mathematical intrinsics with the compile flag -fdec-math for compatability with legacy code
  description: "Next: [Form feed as whitespace](form-feed-as-whitespace), Previous: [`AUTOMATIC` and `STATIC` attributes](automatic-and-static-attributes), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.26 Extended math intrinsics [¶](#Extended-math-intrinsics-1)\n\nGNU Fortran supports an extended list of mathematical intrinsics with the compile flag `-fdec-math` for compatability with legacy code. These intrinsics are described fully in [Intrinsic Procedures](intrinsic-procedures) where it is noted that they are extensions and should be avoided whenever possible.\n\nSpecifically, `-fdec-math` enables the [`COTAN` — Cotangent function](cotan) intrinsic, and trigonometric intrinsics which accept or produce values in degrees instead of radians. Here is a summary of the new intrinsics:\n\n| Radians                                   | Degrees                                               |\n|-------------------------------------------|-------------------------------------------------------|\n| [`ACOS`` — Arccosine function`](acos)     | [`ACOSD`` — Arccosine function, degrees`](acosd)\\*    |\n| [`ASIN`` — Arcsine function`](asin)       | [`ASIND`` — Arcsine function, degrees`](asind)\\*      |\n| [`ATAN`` — Arctangent function`](atan)    | [`ATAND`` — Arctangent function, degrees`](atand)\\*   |\n| [`ATAN2`` — Arctangent function`](atan2)  | [`ATAN2D`` — Arctangent function, degrees`](atan2d)\\* |\n| [`COS`` — Cosine function`](cos)          | [`COSD`` — Cosine function, degrees`](cosd)\\*         |\n| [`COTAN`` — Cotangent function`](cotan)\\* | [`COTAND`` — Cotangent function, degrees`](cotand)\\*  |\n| [`SIN`` — Sine function`](sin)            | [`SIND`` — Sine function, degrees`](sind)\\*           |\n| [`TAN`` — Tangent function`](tan)         | [`TAND`` — Tangent function, degrees`](tand)\\*        |\n\n\\* Enabled with `-fdec-math`.\n\nFor advanced users, it may be important to know the implementation of these functions. They are simply wrappers around the standard radian functions, which have more accurate builtin versions. These functions convert their arguments (or results) to degrees (or radians) by taking the value modulus 360 (or 2\\*pi) and then multiplying it by a constant radian-to-degree (or degree-to-radian) factor, as appropriate. The factor is computed at compile-time as 180/pi (or pi/180).\n\nNext: [Form feed as whitespace](form-feed-as-whitespace), Previous: [`AUTOMATIC` and `STATIC` attributes](automatic-and-static-attributes), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Extended-math-intrinsics.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Extended-math-intrinsics.html)"
- name: 5.1.27. Form feed as whitespace ¶
  id: form-feed-as-whitespace
  summary: Historically, legacy compilers allowed insertion of form feed characters (’\f’, ASCII 0xC) at the beginning of lines for formatted output to line printers, though the Fortran standard does not mention this
  description: "Next: [TYPE as an alias for PRINT](type-as-an-alias-for-print), Previous: [Extended math intrinsics](extended-math-intrinsics), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.27 Form feed as whitespace [¶](#Form-feed-as-whitespace-1)\n\nHistorically, legacy compilers allowed insertion of form feed characters (’\\f’, ASCII 0xC) at the beginning of lines for formatted output to line printers, though the Fortran standard does not mention this. GNU Fortran supports the interpretation of form feed characters in source as whitespace for compatibility.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Form-feed-as-whitespace.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Form-feed-as-whitespace.html)"
- name: 5.1.28. TYPE as an alias for PRINT ¶
  id: type-as-an-alias-for-print
  summary: For compatibility, GNU Fortran will interpret TYPE statements as PRINT statements with the flag -fdec
  description: "Next: [%LOC as an rvalue](_0025loc-as-an-rvalue), Previous: [Form feed as whitespace](form-feed-as-whitespace), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.28 TYPE as an alias for PRINT [¶](#TYPE-as-an-alias-for-PRINT-1)\n\nFor compatibility, GNU Fortran will interpret `TYPE` statements as `PRINT` statements with the flag `-fdec`. With this flag asserted, the following two examples are equivalent:\n\n``` example-preformatted\nTYPE *, 'hello world'\n```\n\n``` example-preformatted\nPRINT *, 'hello world'\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TYPE-as-an-alias-for-PRINT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TYPE-as-an-alias-for-PRINT.html)"
- name: 5.1.29. %LOC as an rvalue ¶
  id: _0025loc-as-an-rvalue
  summary: 'Next: .XOR'
  description: "Next: [.XOR. operator](_002exor_002e-operator), Previous: [TYPE as an alias for PRINT](type-as-an-alias-for-print), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.29 %LOC as an rvalue [¶](#g_t_0025LOC-as-an-rvalue-1)\n\nNormally `%LOC` is allowed only in parameter lists. However the intrinsic function `LOC` does the same thing, and is usable as the right-hand-side of assignments. For compatibility, GNU Fortran supports the use of `%LOC` as an alias for the builtin `LOC` with `-std=legacy`. With this feature enabled the following two examples are equivalent:\n\n``` example-preformatted\ninteger :: i, l\nl = %loc(i)\ncall sub(l)\n```\n\n``` example-preformatted\ninteger :: i\ncall sub(%loc(i))\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_0025LOC-as-an-rvalue.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_0025LOC-as-an-rvalue.html)"
- name: 5.1.30. .XOR. operator ¶
  id: _002exor_002e-operator
  summary: GNU Fortran supports .XOR
  description: "Next: [Bitwise logical operators](bitwise-logical-operators), Previous: [%LOC as an rvalue](_0025loc-as-an-rvalue), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.30 .XOR. operator [¶](#g_t_002eXOR_002e-operator-1)\n\nGNU Fortran supports `.XOR.` as a logical operator with `-std=legacy` for compatibility with legacy code. `.XOR.` is equivalent to `.NEQV.`. That is, the output is true if and only if the inputs differ.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_002eXOR_002e-operator.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_002eXOR_002e-operator.html)"
- name: 5.1.31. Bitwise logical operators ¶
  id: bitwise-logical-operators
  summary: 'Next: Extended I/O specifiers, Previous: .XOR'
  description: "Next: [Extended I/O specifiers](extended-i_002fo-specifiers), Previous: [.XOR. operator](_002exor_002e-operator), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.31 Bitwise logical operators [¶](#Bitwise-logical-operators-1)\n\nWith `-fdec`, GNU Fortran relaxes the type constraints on logical operators to allow integer operands, and performs the corresponding bitwise operation instead. This flag is for compatibility only, and should be avoided in new code. Consider:\n\n``` example-preformatted\nINTEGER :: i, j\ni = z'33'\nj = z'cc'\nprint *, i .AND. j\n```\n\nIn this example, compiled with `-fdec`, GNU Fortran will replace the `.AND.` operation with a call to the intrinsic [`IAND`` — Bitwise logical and`](iand) function, yielding the bitwise-and of `i` and `j`.\n\nNote that this conversion will occur if at least one operand is of integral type. As a result, a logical operand will be converted to an integer when the other operand is an integer in a logical operation. In this case, `.TRUE.` is converted to `1` and `.FALSE.` to `0`.\n\nHere is the mapping of logical operator to bitwise intrinsic used with `-fdec`:\n\n| Operator | Intrinsic                                                                              | Bitwise operation          |\n|----------|----------------------------------------------------------------------------------------|----------------------------|\n| `.NOT.`  | [`NOT`` — Logical negation`](not)                                                      | complement                 |\n| `.AND.`  | [`IAND`` — Bitwise logical and`](iand)                                                 | intersection               |\n| `.OR.`   | [`IOR`` — Bitwise logical or`](ior)                                                    | union                      |\n| `.NEQV.` | [`IEOR`` — Bitwise logical exclusive or`](ieor)                                        | exclusive or               |\n| `.EQV.`  | [`NOT`` — Logical negation`](not)`(`[`IEOR`` — Bitwise logical exclusive or`](ieor)`)` | complement of exclusive or |\n\nNext: [Extended I/O specifiers](extended-i_002fo-specifiers), Previous: [.XOR. operator](_002exor_002e-operator), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Bitwise-logical-operators.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Bitwise-logical-operators.html)"
- name: 5.1.32. Extended I/O specifiers ¶
  id: extended-i_002fo-specifiers
  summary: GNU Fortran supports the additional legacy I/O specifiers CARRIAGECONTROL, READONLY, and SHARE with the compile flag -fdec, for compatibility
  description: "Next: [Legacy PARAMETER statements](legacy-parameter-statements), Previous: [Bitwise logical operators](bitwise-logical-operators), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.32 Extended I/O specifiers [¶](#Extended-I_002fO-specifiers-1)\n\nGNU Fortran supports the additional legacy I/O specifiers `CARRIAGECONTROL`, `READONLY`, and `SHARE` with the compile flag `-fdec`, for compatibility.\n\n`CARRIAGECONTROL`  \nThe `CARRIAGECONTROL` specifier allows a user to control line termination settings between output records for an I/O unit. The specifier has no meaning for readonly files. When `CARRAIGECONTROL` is specified upon opening a unit for formatted writing, the exact `CARRIAGECONTROL` setting determines what characters to write between output records. The syntax is:\n\n``` example-preformatted\nOPEN(..., CARRIAGECONTROL=cc)\n```\n\nWhere *cc* is a character expression that evaluates to one of the following values:\n\n|             |                                                          |\n|-------------|----------------------------------------------------------|\n| `'LIST'`    | One line feed between records (default)                  |\n| `'FORTRAN'` | Legacy interpretation of the first character (see below) |\n| `'NONE'`    | No separator between records                             |\n\nWith `CARRIAGECONTROL='FORTRAN'`, when a record is written, the first character of the input record is not written, and instead determines the output record separator as follows:\n\n| Leading character | Meaning                   | Output separating character(s)     |\n|-------------------|---------------------------|------------------------------------|\n| `'+'`             | Overprinting              | Carriage return only               |\n| `'-'`             | New line                  | Line feed and carriage return      |\n| `'0'`             | Skip line                 | Two line feeds and carriage return |\n| `'1'`             | New page                  | Form feed and carriage return      |\n| `'$'`             | Prompting                 | Line feed (no carriage return)     |\n| `CHAR(0)`         | Overprinting (no advance) | None                               |\n\n`READONLY`  \nThe `READONLY` specifier may be given upon opening a unit, and is equivalent to specifying `ACTION='READ'`, except that the file may not be deleted on close (i.e. `CLOSE` with `STATUS=\"DELETE\"`). The syntax is:\n\n``` example-preformatted\nOPEN(..., READONLY)\n```\n\n`SHARE`  \nThe `SHARE` specifier allows system-level locking on a unit upon opening it for controlled access from multiple processes/threads. The `SHARE` specifier has several forms:\n\n``` example-preformatted\nOPEN(..., SHARE=sh)\nOPEN(..., SHARED)\nOPEN(..., NOSHARED)\n```\n\nWhere *sh* in the first form is a character expression that evaluates to a value as seen in the table below. The latter two forms are aliases for particular values of *sh*:\n\n| Explicit form      | Short form | Meaning                |\n|--------------------|------------|------------------------|\n| `SHARE='DENYRW'`   | `NOSHARED` | Exclusive (write) lock |\n| `SHARE='DENYNONE'` | `SHARED`   | Shared (read) lock     |\n\nIn general only one process may hold an exclusive (write) lock for a given file at a time, whereas many processes may hold shared (read) locks for the same file.\n\nThe behavior of locking may vary with your operating system. On POSIX systems, locking is implemented with `fcntl`. Consult your corresponding operating system’s manual pages for further details. Locking via `SHARE=` is not supported on other systems.\n\nNext: [Legacy PARAMETER statements](legacy-parameter-statements), Previous: [Bitwise logical operators](bitwise-logical-operators), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Extended-I_002fO-specifiers.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Extended-I_002fO-specifiers.html)"
- name: 5.1.33. Legacy PARAMETER statements ¶
  id: legacy-parameter-statements
  summary: For compatibility, GNU Fortran supports legacy PARAMETER statements without parentheses with -std=legacy
  description: "Next: [Default exponents](default-exponents), Previous: [Extended I/O specifiers](extended-i_002fo-specifiers), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.33 Legacy PARAMETER statements [¶](#Legacy-PARAMETER-statements-1)\n\nFor compatibility, GNU Fortran supports legacy PARAMETER statements without parentheses with `-std=legacy`. A warning is emitted if used with `-std=gnu`, and an error is acknowledged with a real Fortran standard flag (`-std=f95`, etc...). These statements take the following form:\n\n``` example-preformatted\nimplicit real (E)\nparameter e = 2.718282\nreal c\nparameter c = 3.0e8\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Legacy-PARAMETER-statements.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Legacy-PARAMETER-statements.html)"
- name: 5.1.34. Default exponents ¶
  id: default-exponents
  summary: For compatibility, GNU Fortran supports a default exponent of zero in real constants with -fdec
  description: "Previous: [Legacy PARAMETER statements](legacy-parameter-statements), Up: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.1.34 Default exponents [¶](#Default-exponents-1)\n\nFor compatibility, GNU Fortran supports a default exponent of zero in real constants with `-fdec`. For example, `9e` would be interpreted as `9e0`, rather than an error.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Default-exponents.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Default-exponents.html)"
- name: 5.2. Extensions not implemented in GNU Fortran ¶
  id: extensions-not-implemented-in-gnu-fortran
  summary: The long history of the Fortran language, its wide use and broad userbase, the large number of different compiler vendors and the lack of some features crucial to users in the first standards have lead to the existence of a number of important extensions to the language
  description: "Previous: [Extensions implemented in GNU Fortran](extensions-implemented-in-gnu-fortran), Up: [Extensions](extensions) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.2 Extensions not implemented in GNU Fortran [¶](#Extensions-not-implemented-in-GNU-Fortran-1)\n\nThe long history of the Fortran language, its wide use and broad userbase, the large number of different compiler vendors and the lack of some features crucial to users in the first standards have lead to the existence of a number of important extensions to the language. While some of the most useful or popular extensions are supported by the GNU Fortran compiler, not all existing extensions are supported. This section aims at listing these extensions and offering advice on how best make code that uses them running with the GNU Fortran compiler.\n\n- [`ENCODE` and `DECODE` statements](encode-and-decode-statements)\n- [Variable `FORMAT` expressions](variable-format-expressions)\n- [Alternate complex function syntax](alternate-complex-function-syntax)\n- [Volatile `COMMON` blocks](volatile-common-blocks)\n- [`OPEN( ... NAME=)`](open_0028-_002e_002e_002e-name_003d_0029)\n- [`Q` edit descriptor](q-edit-descriptor)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Extensions-not-implemented-in-GNU-Fortran.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Extensions-not-implemented-in-GNU-Fortran.html)"
- name: 5.2.1. ENCODE and DECODE statements ¶
  id: encode-and-decode-statements
  summary: GNU Fortran does not support the ENCODE and DECODE statements
  description: "Next: [Variable `FORMAT` expressions](variable-format-expressions), Up: [Extensions not implemented in GNU Fortran](extensions-not-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.2.1 ENCODE and DECODE statements [¶](#ENCODE-and-DECODE-statements-1)\n\nGNU Fortran does not support the `ENCODE` and `DECODE` statements. These statements are best replaced by `READ` and `WRITE` statements involving internal files (`CHARACTER` variables and arrays), which have been part of the Fortran standard since Fortran 77. For example, replace a code fragment like\n\n``` example-preformatted\nINTEGER*1 LINE(80)\n      REAL A, B, C\nc     ... Code that sets LINE\n      DECODE (80, 9000, LINE) A, B, C\n 9000 FORMAT (1X, 3(F10.5))\n```\n\nwith the following:\n\n``` example-preformatted\nCHARACTER(LEN=80) LINE\n      REAL A, B, C\nc     ... Code that sets LINE\n      READ (UNIT=LINE, FMT=9000) A, B, C\n 9000 FORMAT (1X, 3(F10.5))\n```\n\nSimilarly, replace a code fragment like\n\n``` example-preformatted\nINTEGER*1 LINE(80)\n      REAL A, B, C\nc     ... Code that sets A, B and C\n      ENCODE (80, 9000, LINE) A, B, C\n 9000 FORMAT (1X, 'OUTPUT IS ', 3(F10.5))\n```\n\nwith the following:\n\n``` example-preformatted\nCHARACTER(LEN=80) LINE\n      REAL A, B, C\nc     ... Code that sets A, B and C\n      WRITE (UNIT=LINE, FMT=9000) A, B, C\n 9000 FORMAT (1X, 'OUTPUT IS ', 3(F10.5))\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ENCODE-and-DECODE-statements.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ENCODE-and-DECODE-statements.html)"
- name: 5.2.2. Variable FORMAT expressions ¶
  id: variable-format-expressions
  summary: 'A variable FORMAT expression is format statement which includes angle brackets enclosing a Fortran expression: FORMAT(I<N>)'
  description: "Next: [Alternate complex function syntax](alternate-complex-function-syntax), Previous: [`ENCODE` and `DECODE` statements](encode-and-decode-statements), Up: [Extensions not implemented in GNU Fortran](extensions-not-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.2.2 Variable FORMAT expressions [¶](#Variable-FORMAT-expressions-1)\n\nA variable `FORMAT` expression is format statement which includes angle brackets enclosing a Fortran expression: `FORMAT(I<N>)`. GNU Fortran does not support this legacy extension. The effect of variable format expressions can be reproduced by using the more powerful (and standard) combination of internal output and string formats. For example, replace a code fragment like this:\n\n``` example-preformatted\nWRITE(6,20) INT1\n20   FORMAT(I<N+1>)\n```\n\nwith the following:\n\n``` example-preformatted\nc     Variable declaration\n      CHARACTER(LEN=20) FMT\nc\nc     Other code here...\nc\n      WRITE(FMT,'(\"(I\", I0, \")\")') N+1\n      WRITE(6,FMT) INT1\n```\n\nor with:\n\n``` example-preformatted\nc     Variable declaration\n      CHARACTER(LEN=20) FMT\nc\nc     Other code here...\nc\n      WRITE(FMT,*) N+1\n      WRITE(6,\"(I\" // ADJUSTL(FMT) // \")\") INT1\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Variable-FORMAT-expressions.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Variable-FORMAT-expressions.html)"
- name: 5.2.3. Alternate complex function syntax ¶
  id: alternate-complex-function-syntax
  summary: Some Fortran compilers, including g77, let the user declare complex functions with the syntax COMPLEX FUNCTION name*16(), as well as COMPLEX*16 FUNCTION name()
  description: "Next: [Volatile `COMMON` blocks](volatile-common-blocks), Previous: [Variable `FORMAT` expressions](variable-format-expressions), Up: [Extensions not implemented in GNU Fortran](extensions-not-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.2.3 Alternate complex function syntax [¶](#Alternate-complex-function-syntax-1)\n\nSome Fortran compilers, including `g77`, let the user declare complex functions with the syntax `COMPLEX FUNCTION name*16()`, as well as `COMPLEX*16 FUNCTION name()`. Both are non-standard, legacy extensions. `gfortran` accepts the latter form, which is more common, but not the former.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Alternate-complex-function-syntax.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Alternate-complex-function-syntax.html)"
- name: 5.2.4. Volatile COMMON blocks ¶
  id: volatile-common-blocks
  summary: Some Fortran compilers, including g77, let the user declare COMMON with the VOLATILE attribute
  description: "Next: [`OPEN( ... NAME=)`](open_0028-_002e_002e_002e-name_003d_0029), Previous: [Alternate complex function syntax](alternate-complex-function-syntax), Up: [Extensions not implemented in GNU Fortran](extensions-not-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.2.4 Volatile COMMON blocks [¶](#Volatile-COMMON-blocks-1)\n\nSome Fortran compilers, including `g77`, let the user declare `COMMON` with the `VOLATILE` attribute. This is invalid standard Fortran syntax and is not supported by `gfortran`. Note that `gfortran` accepts `VOLATILE` variables in `COMMON` blocks since revision 4.3.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Volatile-COMMON-blocks.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Volatile-COMMON-blocks.html)"
- name: 5.2.5. OPEN( ... NAME=) ¶
  id: open_0028-_002e_002e_002e-name_003d_0029
  summary: Some Fortran compilers, including g77, let the user declare OPEN( ... NAME=)
  description: "Next: [`Q` edit descriptor](q-edit-descriptor), Previous: [Volatile `COMMON` blocks](volatile-common-blocks), Up: [Extensions not implemented in GNU Fortran](extensions-not-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.2.5 OPEN( ... NAME=) [¶](#OPEN_0028-_002e_002e_002e-NAME_003d_0029-1)\n\nSome Fortran compilers, including `g77`, let the user declare `OPEN( ... NAME=)`. This is invalid standard Fortran syntax and is not supported by `gfortran`. `OPEN( ... NAME=)` should be replaced with `OPEN( ... FILE=)`.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/OPEN_0028-\\_002e_002e_002e-NAME_003d_0029.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/OPEN_0028-_002e_002e_002e-NAME_003d_0029.html)"
- name: 5.2.6. Q edit descriptor ¶
  id: q-edit-descriptor
  summary: Some Fortran compilers provide the Q edit descriptor, which transfers the number of characters left within an input record into an integer variable
  description: "Previous: [`OPEN( ... NAME=)`](open_0028-_002e_002e_002e-name_003d_0029), Up: [Extensions not implemented in GNU Fortran](extensions-not-implemented-in-gnu-fortran) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 5.2.6 Q edit descriptor [¶](#Q-edit-descriptor-1)\n\nSome Fortran compilers provide the `Q` edit descriptor, which transfers the number of characters left within an input record into an integer variable.\n\nA direct replacement of the `Q` edit descriptor is not available in `gfortran`. How to replicate its functionality using standard-conforming code depends on what the intent of the original code is.\n\nOptions to replace `Q` may be to read the whole line into a character variable and then counting the number of non-blank characters left using `LEN_TRIM`. Another method may be to use formatted stream, read the data up to the position where the `Q` descriptor occurred, use `INQUIRE` to get the file position, count the characters up to the next `NEW_LINE` and then start reading from the position marked previously.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Q-edit-descriptor.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Q-edit-descriptor.html)"
- name: 6. Mixed-Language Programming ¶
  id: mixed-language-programming
  summary: This chapter is about mixed-language interoperability, but also applies if you link Fortran code compiled by different compilers
  description: "Next: [Coarray Programming](coarray-programming), Previous: [Extensions](extensions), Up: [Introduction](index) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6 Mixed-Language Programming [¶](#Mixed-Language-Programming-1)\n\nThis chapter is about mixed-language interoperability, but also applies if you link Fortran code compiled by different compilers. In most cases, use of the C Binding features of the Fortran 2003 and later standards is sufficient.\n\nFor example, it is possible to mix Fortran code with C++ code as well as C, if you declare the interface functions as `extern \"C\"` on the C++ side and `BIND(C)` on the Fortran side, and follow the rules for interoperability with C. Note that you cannot manipulate C++ class objects in Fortran or vice versa except as opaque pointers.\n\nYou can use the `gfortran` command to link both Fortran and non-Fortran code into the same program, or you can use `gcc` or `g++` if you also add an explicit `-lgfortran` option to link with the Fortran library. If your main program is written in C or some other language instead of Fortran, see [Non-Fortran Main Program](non-fortran-main-program), below.\n\n- [Interoperability with C](interoperability-with-c)\n- [GNU Fortran Compiler Directives](gnu-fortran-compiler-directives)\n- [Non-Fortran Main Program](non-fortran-main-program)\n- [Naming and argument-passing conventions](naming-and-argument-passing-conventions)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Mixed-Language-Programming.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Mixed-Language-Programming.html)"
- name: 6.1. Interoperability with C ¶
  id: interoperability-with-c
  summary: Since Fortran 2003 (ISO/IEC 1539-1:2004(E)) there is a standardized way to generate procedure and derived-type declarations and global variables that are interoperable with C (ISO/IEC 9899:1999)
  description: "Next: [GNU Fortran Compiler Directives](gnu-fortran-compiler-directives), Up: [Mixed-Language Programming](mixed-language-programming) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.1 Interoperability with C [¶](#Interoperability-with-C-1)\n\nSince Fortran 2003 (ISO/IEC 1539-1:2004(E)) there is a standardized way to generate procedure and derived-type declarations and global variables that are interoperable with C (ISO/IEC 9899:1999). The `BIND(C)` attribute has been added to inform the compiler that a symbol shall be interoperable with C; also, some constraints are added. Note, however, that not all C features have a Fortran equivalent or vice versa. For instance, neither C’s unsigned integers nor C’s functions with variable number of arguments have an equivalent in Fortran.\n\nNote that array dimensions are reversely ordered in C and that arrays in C always start with index 0 while in Fortran they start by default with 1. Thus, an array declaration `A(n,m)` in Fortran matches `A[m][n]` in C and accessing the element `A(i,j)` matches `A[j-1][i-1]`. The element following `A(i,j)` (C: `A[j-1][i-1]`; assuming *i \\< n*) in memory is `A(i+1,j)` (C: `A[j-1][i]`).\n\n- [Intrinsic Types](intrinsic-types)\n- [Derived Types and struct](derived-types-and-struct)\n- [Interoperable Global Variables](interoperable-global-variables)\n- [Interoperable Subroutines and Functions](interoperable-subroutines-and-functions)\n- [Working with C Pointers](working-with-c-pointers)\n- [Further Interoperability of Fortran with C](further-interoperability-of-fortran-with-c)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Interoperability-with-C.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Interoperability-with-C.html)"
- name: 6.1.1. Intrinsic Types ¶
  id: intrinsic-types
  summary: In order to ensure that exactly the same variable type and kind is used in C and Fortran, you should use the named constants for kind parameters that are defined in the ISO_C_BINDING intrinsic module
  description: "Next: [Derived Types and struct](derived-types-and-struct), Up: [Interoperability with C](interoperability-with-c) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.1.1 Intrinsic Types [¶](#Intrinsic-Types-1)\n\nIn order to ensure that exactly the same variable type and kind is used in C and Fortran, you should use the named constants for kind parameters that are defined in the `ISO_C_BINDING` intrinsic module. That module contains named constants of character type representing the escaped special characters in C, such as newline. For a list of the constants, see [`ISO_C_BINDING`](iso_005fc_005fbinding).\n\nFor logical types, please note that the Fortran standard only guarantees interoperability between C99’s `_Bool` and Fortran’s `C_Bool`-kind logicals and C99 defines that `true` has the value 1 and `false` the value 0. Using any other integer value with GNU Fortran’s `LOGICAL` (with any kind parameter) gives an undefined result. (Passing other integer values than 0 and 1 to GCC’s `_Bool` is also undefined, unless the integer is explicitly or implicitly casted to `_Bool`.)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Intrinsic-Types.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Intrinsic-Types.html)"
- name: 6.1.2. Derived Types and struct ¶
  id: derived-types-and-struct
  summary: For compatibility of derived types with struct, use the BIND(C) attribute in the type declaration
  description: "Next: [Interoperable Global Variables](interoperable-global-variables), Previous: [Intrinsic Types](intrinsic-types), Up: [Interoperability with C](interoperability-with-c) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.1.2 Derived Types and struct [¶](#Derived-Types-and-struct-1)\n\nFor compatibility of derived types with `struct`, use the `BIND(C)` attribute in the type declaration. For instance, the following type declaration\n\n``` example-preformatted\nUSE ISO_C_BINDING\nTYPE, BIND(C) :: myType\n  INTEGER(C_INT) :: i1, i2\n  INTEGER(C_SIGNED_CHAR) :: i3\n  REAL(C_DOUBLE) :: d1\n  COMPLEX(C_FLOAT_COMPLEX) :: c1\n  CHARACTER(KIND=C_CHAR) :: str(5)\nEND TYPE\n```\n\nmatches the following `struct` declaration in C\n\n``` example-preformatted\nstruct {\n  int i1, i2;\n  /* Note: \"char\" might be signed or unsigned.  */\n  signed char i3;\n  double d1;\n  float _Complex c1;\n  char str[5];\n} myType;\n```\n\nDerived types with the C binding attribute shall not have the `sequence` attribute, type parameters, the `extends` attribute, nor type-bound procedures. Every component must be of interoperable type and kind and may not have the `pointer` or `allocatable` attribute. The names of the components are irrelevant for interoperability.\n\nAs there exist no direct Fortran equivalents, neither unions nor structs with bit field or variable-length array members are interoperable.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Derived-Types-and-struct.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Derived-Types-and-struct.html)"
- name: 6.1.3. Interoperable Global Variables ¶
  id: interoperable-global-variables
  summary: Variables can be made accessible from C using the C binding attribute, optionally together with specifying a binding name
  description: "Next: [Interoperable Subroutines and Functions](interoperable-subroutines-and-functions), Previous: [Derived Types and struct](derived-types-and-struct), Up: [Interoperability with C](interoperability-with-c) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.1.3 Interoperable Global Variables [¶](#Interoperable-Global-Variables-1)\n\nVariables can be made accessible from C using the C binding attribute, optionally together with specifying a binding name. Those variables have to be declared in the declaration part of a `MODULE`, be of interoperable type, and have neither the `pointer` nor the `allocatable` attribute.\n\n``` example-preformatted\nMODULE m\n  USE myType_module\n  USE ISO_C_BINDING\n  integer(C_INT), bind(C, name=\"_MyProject_flags\") :: global_flag\n  type(myType), bind(C) :: tp\nEND MODULE\n```\n\nHere, `_MyProject_flags` is the case-sensitive name of the variable as seen from C programs while `global_flag` is the case-insensitive name as seen from Fortran. If no binding name is specified, as for `tp`, the C binding name is the (lowercase) Fortran binding name. If a binding name is specified, only a single variable may be after the double colon. Note of warning: You cannot use a global variable to access `errno` of the C library as the C standard allows it to be a macro. Use the `IERRNO` intrinsic (GNU extension) instead.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Interoperable-Global-Variables.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Interoperable-Global-Variables.html)"
- name: 6.1.4. Interoperable Subroutines and Functions ¶
  id: interoperable-subroutines-and-functions
  summary: Subroutines and functions have to have the BIND(C) attribute to be compatible with C
  description: "Next: [Working with C Pointers](working-with-c-pointers), Previous: [Interoperable Global Variables](interoperable-global-variables), Up: [Interoperability with C](interoperability-with-c) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.1.4 Interoperable Subroutines and Functions [¶](#Interoperable-Subroutines-and-Functions-1)\n\nSubroutines and functions have to have the `BIND(C)` attribute to be compatible with C. The dummy argument declaration is relatively straightforward. However, one needs to be careful because C uses call-by-value by default while Fortran behaves usually similar to call-by-reference. Furthermore, strings and pointers are handled differently.\n\nTo pass a variable by value, use the `VALUE` attribute. Thus, the following C prototype\n\n``` example-preformatted\nint func(int i, int *j)\n```\n\nmatches the Fortran declaration\n\n``` example-preformatted\ninteger(c_int) function func(i,j)\n  use iso_c_binding, only: c_int\n  integer(c_int), VALUE :: i\n  integer(c_int) :: j\n```\n\nNote that pointer arguments also frequently need the `VALUE` attribute, see [Working with C Pointers](working-with-c-pointers).\n\nStrings are handled quite differently in C and Fortran. In C a string is a `NUL`-terminated array of characters while in Fortran each string has a length associated with it and is thus not terminated (by e.g. `NUL`). For example, if you want to use the following C function,\n\n``` example-preformatted\n#include <stdio.h>\nvoid print_C(char *string) /* equivalent: char string[]  */\n{\n   printf(\"%s\\n\", string);\n}\n```\n\nto print “Hello World” from Fortran, you can call it using\n\n``` example-preformatted\nuse iso_c_binding, only: C_CHAR, C_NULL_CHAR\ninterface\n  subroutine print_c(string) bind(C, name=\"print_C\")\n    use iso_c_binding, only: c_char\n    character(kind=c_char) :: string(*)\n  end subroutine print_c\nend interface\ncall print_c(C_CHAR_\"Hello World\"//C_NULL_CHAR)\n```\n\nAs the example shows, you need to ensure that the string is `NUL` terminated. Additionally, the dummy argument `string` of `print_C` is a length-one assumed-size array; using `character(len=*)` is not allowed. The example above uses `c_char_\"Hello World\"` to ensure the string literal has the right type; typically the default character kind and `c_char` are the same and thus `\"Hello World\"` is equivalent. However, the standard does not guarantee this.\n\nThe use of strings is now further illustrated using the C library function `strncpy`, whose prototype is\n\n``` example-preformatted\nchar *strncpy(char *restrict s1, const char *restrict s2, size_t n);\n```\n\nThe function `strncpy` copies at most `n` characters from string `s2` to `s1` and returns `s1`. In the following example, we ignore the return value:\n\n``` example-preformatted\nuse iso_c_binding\nimplicit none\ncharacter(len=30) :: str,str2\ninterface\n  ! Ignore the return value of strncpy -> subroutine\n  ! \"restrict\" is always assumed if we do not pass a pointer\n  subroutine strncpy(dest, src, n) bind(C)\n    import\n    character(kind=c_char),  intent(out) :: dest(*)\n    character(kind=c_char),  intent(in)  :: src(*)\n    integer(c_size_t), value, intent(in) :: n\n  end subroutine strncpy\nend interface\nstr = repeat('X',30) ! Initialize whole string with 'X'\ncall strncpy(str, c_char_\"Hello World\"//C_NULL_CHAR, &\n             len(c_char_\"Hello World\",kind=c_size_t))\nprint '(a)', str ! prints: \"Hello WorldXXXXXXXXXXXXXXXXXXX\"\nend\n```\n\nThe intrinsic procedures are described in [Intrinsic Procedures](intrinsic-procedures).\n\nNext: [Working with C Pointers](working-with-c-pointers), Previous: [Interoperable Global Variables](interoperable-global-variables), Up: [Interoperability with C](interoperability-with-c) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Interoperable-Subroutines-and-Functions.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Interoperable-Subroutines-and-Functions.html)"
- name: 6.1.5. Working with C Pointers ¶
  id: working-with-c-pointers
  summary: C pointers are represented in Fortran via the special opaque derived type type(c_ptr) (with private components)
  description: "Next: [Further Interoperability of Fortran with C](further-interoperability-of-fortran-with-c), Previous: [Interoperable Subroutines and Functions](interoperable-subroutines-and-functions), Up: [Interoperability with C](interoperability-with-c) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.1.5 Working with C Pointers [¶](#Working-with-C-Pointers-1)\n\nC pointers are represented in Fortran via the special opaque derived type `type(c_ptr)` (with private components). C pointers are distinct from Fortran objects with the `POINTER` attribute. Thus one needs to use intrinsic conversion procedures to convert from or to C pointers. For some applications, using an assumed type (`TYPE(*)`) can be an alternative to a C pointer, and you can also use library routines to access Fortran pointers from C. See [Further Interoperability of Fortran with C](further-interoperability-of-fortran-with-c).\n\nHere is an example of using C pointers in Fortran:\n\n``` example-preformatted\nuse iso_c_binding\ntype(c_ptr) :: cptr1, cptr2\ninteger, target :: array(7), scalar\ninteger, pointer :: pa(:), ps\ncptr1 = c_loc(array(1)) ! The programmer needs to ensure that the\n                        ! array is contiguous if required by the C\n                        ! procedure\ncptr2 = c_loc(scalar)\ncall c_f_pointer(cptr2, ps)\ncall c_f_pointer(cptr2, pa, shape=[7])\n```\n\nWhen converting C to Fortran arrays, the one-dimensional `SHAPE` argument has to be passed.\n\nIf a pointer is a dummy argument of an interoperable procedure, it usually has to be declared using the `VALUE` attribute. `void*` matches `TYPE(C_PTR), VALUE`, while `TYPE(C_PTR)` alone matches `void**`.\n\nProcedure pointers are handled analogously to pointers; the C type is `TYPE(C_FUNPTR)` and the intrinsic conversion procedures are `C_F_PROCPOINTER` and `C_FUNLOC`.\n\nLet us consider two examples of actually passing a procedure pointer from C to Fortran and vice versa. Note that these examples are also very similar to passing ordinary pointers between both languages. First, consider this code in C:\n\n``` example-preformatted\n/* Procedure implemented in Fortran.  */\nvoid get_values (void (*)(double));\n\n/* Call-back routine we want called from Fortran.  */\nvoid\nprint_it (double x)\n{\n  printf (\"Number is %f.\\n\", x);\n}\n\n/* Call Fortran routine and pass call-back to it.  */\nvoid\nfoobar ()\n{\n  get_values (&print_it);\n}\n```\n\nA matching implementation for `get_values` in Fortran, that correctly receives the procedure pointer from C and is able to call it, is given in the following `MODULE`:\n\n``` example-preformatted\nMODULE m\n  IMPLICIT NONE\n\n  ! Define interface of call-back routine.\n  ABSTRACT INTERFACE\n    SUBROUTINE callback (x)\n      USE, INTRINSIC :: ISO_C_BINDING\n      REAL(KIND=C_DOUBLE), INTENT(IN), VALUE :: x\n    END SUBROUTINE callback\n  END INTERFACE\n\nCONTAINS\n\n  ! Define C-bound procedure.\n  SUBROUTINE get_values (cproc) BIND(C)\n    USE, INTRINSIC :: ISO_C_BINDING\n    TYPE(C_FUNPTR), INTENT(IN), VALUE :: cproc\n\n    PROCEDURE(callback), POINTER :: proc\n\n    ! Convert C to Fortran procedure pointer.\n    CALL C_F_PROCPOINTER (cproc, proc)\n\n    ! Call it.\n    CALL proc (1.0_C_DOUBLE)\n    CALL proc (-42.0_C_DOUBLE)\n    CALL proc (18.12_C_DOUBLE)\n  END SUBROUTINE get_values\n\nEND MODULE m\n```\n\nNext, we want to call a C routine that expects a procedure pointer argument and pass it a Fortran procedure (which clearly must be interoperable!). Again, the C function may be:\n\n``` example-preformatted\nint\ncall_it (int (*func)(int), int arg)\n{\n  return func (arg);\n}\n```\n\nIt can be used as in the following Fortran code:\n\n``` example-preformatted\nMODULE m\n  USE, INTRINSIC :: ISO_C_BINDING\n  IMPLICIT NONE\n\n  ! Define interface of C function.\n  INTERFACE\n    INTEGER(KIND=C_INT) FUNCTION call_it (func, arg) BIND(C)\n      USE, INTRINSIC :: ISO_C_BINDING\n      TYPE(C_FUNPTR), INTENT(IN), VALUE :: func\n      INTEGER(KIND=C_INT), INTENT(IN), VALUE :: arg\n    END FUNCTION call_it\n  END INTERFACE\n\nCONTAINS\n\n  ! Define procedure passed to C function.\n  ! It must be interoperable!\n  INTEGER(KIND=C_INT) FUNCTION double_it (arg) BIND(C)\n    INTEGER(KIND=C_INT), INTENT(IN), VALUE :: arg\n    double_it = arg + arg\n  END FUNCTION double_it\n\n  ! Call C function.\n  SUBROUTINE foobar ()\n    TYPE(C_FUNPTR) :: cproc\n    INTEGER(KIND=C_INT) :: i\n\n    ! Get C procedure pointer.\n    cproc = C_FUNLOC (double_it)\n\n    ! Use it.\n    DO i = 1_C_INT, 10_C_INT\n      PRINT *, call_it (cproc, i)\n    END DO\n  END SUBROUTINE foobar\n\nEND MODULE m\n```\n\nNext: [Further Interoperability of Fortran with C](further-interoperability-of-fortran-with-c), Previous: [Interoperable Subroutines and Functions](interoperable-subroutines-and-functions), Up: [Interoperability with C](interoperability-with-c) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Working-with-C-Pointers.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Working-with-C-Pointers.html)"
- name: 6.1.6. Further Interoperability of Fortran with C ¶
  id: further-interoperability-of-fortran-with-c
  summary: GNU Fortran implements the Technical Specification ISO/IEC TS 29113:2012, which extends the interoperability support of Fortran 2003 and Fortran 2008 and is now part of the 2018 Fortran standard
  description: "Previous: [Working with C Pointers](working-with-c-pointers), Up: [Interoperability with C](interoperability-with-c) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.1.6 Further Interoperability of Fortran with C [¶](#Further-Interoperability-of-Fortran-with-C-1)\n\nGNU Fortran implements the Technical Specification ISO/IEC TS 29113:2012, which extends the interoperability support of Fortran 2003 and Fortran 2008 and is now part of the 2018 Fortran standard. Besides removing some restrictions and constraints, the Technical Specification adds assumed-type (`TYPE(*)`) and assumed-rank (`DIMENSION(..)`) variables and allows for interoperability of assumed-shape, assumed-rank, and deferred-shape arrays, as well as allocatables and pointers. Objects of these types are passed to `BIND(C)` functions as descriptors with a standard interface, declared in the header file `<ISO_Fortran_binding.h>`.\n\nNote: Currently, GNU Fortran does not use internally the array descriptor (dope vector) as specified in the Technical Specification, but uses an array descriptor with different fields in functions without the `BIND(C)` attribute. Arguments to functions marked `BIND(C)` are converted to the specified form. If you need to access GNU Fortran’s internal array descriptor, you can use the Chasm Language Interoperability Tools, [http://chasm-interop.sourceforge.net/](http://chasm-interop.sourceforge.net/).\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Further-Interoperability-of-Fortran-with-C.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Further-Interoperability-of-Fortran-with-C.html)"
- name: 6.2. GNU Fortran Compiler Directives ¶
  id: gnu-fortran-compiler-directives
  summary: © Free Software Foundation Licensed under the GNU Free Documentation License, Version 1.3
  description: "Next: [Non-Fortran Main Program](non-fortran-main-program), Previous: [Interoperability with C](interoperability-with-c), Up: [Mixed-Language Programming](mixed-language-programming) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.2 GNU Fortran Compiler Directives [¶](#GNU-Fortran-Compiler-Directives-1)\n\n- [ATTRIBUTES directive](attributes-directive)\n- [UNROLL directive](unroll-directive)\n- [BUILTIN directive](builtin-directive)\n- [IVDEP directive](ivdep-directive)\n- [VECTOR directive](vector-directive)\n- [NOVECTOR directive](novector-directive)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GNU-Fortran-Compiler-Directives.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GNU-Fortran-Compiler-Directives.html)"
- name: 6.2.1. ATTRIBUTES directive ¶
  id: attributes-directive
  summary: The Fortran standard describes how a conforming program shall behave; however, the exact implementation is not standardized
  description: "Next: [UNROLL directive](unroll-directive), Up: [GNU Fortran Compiler Directives](gnu-fortran-compiler-directives) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.2.1 ATTRIBUTES directive [¶](#ATTRIBUTES-directive-1)\n\nThe Fortran standard describes how a conforming program shall behave; however, the exact implementation is not standardized. In order to allow the user to choose specific implementation details, compiler directives can be used to set attributes of variables and procedures which are not part of the standard. Whether a given attribute is supported and its exact effects depend on both the operating system and on the processor; see [C Extensions](https://gcc.gnu.org/onlinedocs/gcc/index.html#Top) in Using the GNU Compiler Collection (GCC) for details.\n\nFor procedures and procedure pointers, the following attributes can be used to change the calling convention:\n\n- `CDECL` – standard C calling convention\n- `STDCALL` – convention where the called procedure pops the stack\n- `FASTCALL` – part of the arguments are passed via registers instead using the stack\n\nBesides changing the calling convention, the attributes also influence the decoration of the symbol name, e.g., by a leading underscore or by a trailing at-sign followed by the number of bytes on the stack. When assigning a procedure to a procedure pointer, both should use the same calling convention.\n\nOn some systems, procedures and global variables (module variables and `COMMON` blocks) need special handling to be accessible when they are in a shared library. The following attributes are available:\n\n- `DLLEXPORT` – provide a global pointer to a pointer in the DLL\n- `DLLIMPORT` – reference the function or variable using a global pointer\n\nFor dummy arguments, the `NO_ARG_CHECK` attribute can be used; in other compilers, it is also known as `IGNORE_TKR`. For dummy arguments with this attribute actual arguments of any type and kind (similar to `TYPE(*)`), scalars and arrays of any rank (no equivalent in Fortran standard) are accepted. As with `TYPE(*)`, the argument is unlimited polymorphic and no type information is available. Additionally, the argument may only be passed to dummy arguments with the `NO_ARG_CHECK` attribute and as argument to the `PRESENT` intrinsic function and to `C_LOC` of the `ISO_C_BINDING` module.\n\nVariables with `NO_ARG_CHECK` attribute shall be of assumed-type (`TYPE(*)`; recommended) or of type `INTEGER`, `LOGICAL`, `REAL` or `COMPLEX`. They shall not have the `ALLOCATE`, `CODIMENSION`, `INTENT(OUT)`, `POINTER` or `VALUE` attribute; furthermore, they shall be either scalar or of assumed-size (`dimension(*)`). As `TYPE(*)`, the `NO_ARG_CHECK` attribute requires an explicit interface.\n\n- `NO_ARG_CHECK` – disable the type, kind and rank checking\n- `DEPRECATED` – print a warning when using a such-tagged deprecated procedure, variable or parameter; the warning can be suppressed with `-Wno-deprecated-declarations`.\n- `NOINLINE` – prevent inlining given function.\n- `NORETURN` – add a hint that a given function cannot return.\n- `WEAK` – emit the declaration of an external symbol as a weak symbol rather than a global. This is primarily useful in defining library functions that can be overridden in user code, though it can also be used with non-function declarations. The overriding symbol must have the same type as the weak symbol.\n\nThe attributes are specified using the syntax\n\n`!GCC$ ATTRIBUTES` `attribute-list` `::` `variable-list`\n\nwhere in free-form source code only whitespace is allowed before `!GCC$` and in fixed-form source code `!GCC$`, `cGCC$` or `*GCC$` shall start in the first column.\n\nFor procedures, the compiler directives shall be placed into the body of the procedure; for variables and procedure pointers, they shall be in the same declaration part as the variable or procedure pointer.\n\nNext: [UNROLL directive](unroll-directive), Up: [GNU Fortran Compiler Directives](gnu-fortran-compiler-directives) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATTRIBUTES-directive.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATTRIBUTES-directive.html)"
- name: 6.2.2. UNROLL directive ¶
  id: unroll-directive
  summary: You can use this directive to control how many times a loop should be unrolled
  description: "Next: [BUILTIN directive](builtin-directive), Previous: [ATTRIBUTES directive](attributes-directive), Up: [GNU Fortran Compiler Directives](gnu-fortran-compiler-directives) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.2.2 UNROLL directive [¶](#UNROLL-directive-1)\n\nThe syntax of the directive is\n\n`!GCC$ unroll N`\n\nYou can use this directive to control how many times a loop should be unrolled. It must be placed immediately before a `DO` loop and applies only to the loop that follows. N is an integer constant specifying the unrolling factor. The values of 0 and 1 block any unrolling of the loop.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/UNROLL-directive.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/UNROLL-directive.html)"
- name: 6.2.3. BUILTIN directive ¶
  id: builtin-directive
  summary: You can use this directive to define which middle-end built-ins provide vector implementations
  description: "Next: [IVDEP directive](ivdep-directive), Previous: [UNROLL directive](unroll-directive), Up: [GNU Fortran Compiler Directives](gnu-fortran-compiler-directives) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.2.3 BUILTIN directive [¶](#BUILTIN-directive-1)\n\nThe syntax of the directive is\n\n`!GCC$ BUILTIN (B) attributes simd FLAGS IF('target')`\n\nYou can use this directive to define which middle-end built-ins provide vector implementations. `B` is name of the middle-end built-in. `FLAGS` are optional and must be either \"(inbranch)\" or \"(notinbranch)\". `IF` statement is optional and is used to filter multilib ABIs for the built-in that should be vectorized. Example usage:\n\n``` example-preformatted\n!GCC$ builtin (sinf) attributes simd (notinbranch) if('x86_64')\n```\n\nThe purpose of the directive is to provide an API among the GCC compiler and the GNU C Library which would define vector implementations of math routines.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BUILTIN-directive.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BUILTIN-directive.html)"
- name: 6.2.4. IVDEP directive ¶
  id: ivdep-directive
  summary: This directive tells the compiler to ignore vector dependencies in the following loop
  description: "Next: [VECTOR directive](vector-directive), Previous: [BUILTIN directive](builtin-directive), Up: [GNU Fortran Compiler Directives](gnu-fortran-compiler-directives) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.2.4 IVDEP directive [¶](#IVDEP-directive-1)\n\nThe syntax of the directive is\n\n`!GCC$ ivdep`\n\nThis directive tells the compiler to ignore vector dependencies in the following loop. It must be placed immediately before a `DO` loop and applies only to the loop that follows.\n\nSometimes the compiler may not have sufficient information to decide whether a particular loop is vectorizable due to potential dependencies between iterations. The purpose of the directive is to tell the compiler that vectorization is safe.\n\nThis directive is intended for annotation of existing code. For new code it is recommended to consider OpenMP SIMD directives as potential alternative.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IVDEP-directive.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IVDEP-directive.html)"
- name: 6.2.5. VECTOR directive ¶
  id: vector-directive
  summary: This directive tells the compiler to vectorize the following loop
  description: "Next: [NOVECTOR directive](novector-directive), Previous: [IVDEP directive](ivdep-directive), Up: [GNU Fortran Compiler Directives](gnu-fortran-compiler-directives) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.2.5 VECTOR directive [¶](#VECTOR-directive-1)\n\nThe syntax of the directive is\n\n`!GCC$ vector`\n\nThis directive tells the compiler to vectorize the following loop. It must be placed immediately before a `DO` loop and applies only to the loop that follows.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/VECTOR-directive.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/VECTOR-directive.html)"
- name: 6.2.6. NOVECTOR directive ¶
  id: novector-directive
  summary: This directive tells the compiler to not vectorize the following loop
  description: "Previous: [VECTOR directive](vector-directive), Up: [GNU Fortran Compiler Directives](gnu-fortran-compiler-directives) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.2.6 NOVECTOR directive [¶](#NOVECTOR-directive-1)\n\nThe syntax of the directive is\n\n`!GCC$ novector`\n\nThis directive tells the compiler to not vectorize the following loop. It must be placed immediately before a `DO` loop and applies only to the loop that follows.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/NOVECTOR-directive.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/NOVECTOR-directive.html)"
- name: 6.3. Non-Fortran Main Program ¶
  id: non-fortran-main-program
  summary: Even if you are doing mixed-language programming, it is very likely that you do not need to know or use the information in this section
  description: "Next: [Naming and argument-passing conventions](naming-and-argument-passing-conventions), Previous: [GNU Fortran Compiler Directives](gnu-fortran-compiler-directives), Up: [Mixed-Language Programming](mixed-language-programming) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.3 Non-Fortran Main Program [¶](#Non-Fortran-Main-Program-1)\n\nEven if you are doing mixed-language programming, it is very likely that you do not need to know or use the information in this section. Since it is about the internal structure of GNU Fortran, it may also change in GCC minor releases.\n\nWhen you compile a `PROGRAM` with GNU Fortran, a function with the name `main` (in the symbol table of the object file) is generated, which initializes the libgfortran library and then calls the actual program which uses the name `MAIN__`, for historic reasons. If you link GNU Fortran compiled procedures to, e.g., a C or C++ program or to a Fortran program compiled by a different compiler, the libgfortran library is not initialized and thus a few intrinsic procedures do not work properly, e.g. those for obtaining the command-line arguments.\n\nTherefore, if your `PROGRAM` is not compiled with GNU Fortran and the GNU Fortran compiled procedures require intrinsics relying on the library initialization, you need to initialize the library yourself. Using the default options, gfortran calls `_gfortran_set_args` and `_gfortran_set_options`. The initialization of the former is needed if the called procedures access the command line (and for backtracing); the latter sets some flags based on the standard chosen or to enable backtracing. In typical programs, it is not necessary to call any initialization function.\n\nIf your `PROGRAM` is compiled with GNU Fortran, you shall not call any of the following functions. The libgfortran initialization functions are shown in C syntax but using C bindings they are also accessible from Fortran.\n\n- [`_gfortran_set_args` — Save command-line arguments](_005fgfortran_005fset_005fargs)\n- [`_gfortran_set_options` — Set library option flags](_005fgfortran_005fset_005foptions)\n- [`_gfortran_set_convert` — Set endian conversion](_005fgfortran_005fset_005fconvert)\n- [`_gfortran_set_record_marker` — Set length of record markers](_005fgfortran_005fset_005frecord_005fmarker)\n- [`_gfortran_set_fpe` — Enable floating point exception traps](_005fgfortran_005fset_005ffpe)\n- [`_gfortran_set_max_subrecord_length` — Set subrecord length](_005fgfortran_005fset_005fmax_005fsubrecord_005flength)\n\nNext: [Naming and argument-passing conventions](naming-and-argument-passing-conventions), Previous: [GNU Fortran Compiler Directives](gnu-fortran-compiler-directives), Up: [Mixed-Language Programming](mixed-language-programming) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Non-Fortran-Main-Program.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Non-Fortran-Main-Program.html)"
- name: 6.3.1. _gfortran_set_args
  id: _005fgfortran_005fset_005fargs
  summary: 'Description: _gfortran_set_args saves the command-line arguments; this initialization is required if any of the command-line intrinsics is called'
  description: "Next: [`_gfortran_set_options` — Set library option flags](_005fgfortran_005fset_005foptions), Up: [Non-Fortran Main Program](non-fortran-main-program) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.3.1 \\_gfortran_set_args — Save command-line arguments [¶](#g_t_005fgfortran_005fset_005fargs-----Save-command-line-arguments)\n\nDescription:  \n`_gfortran_set_args` saves the command-line arguments; this initialization is required if any of the command-line intrinsics is called. Additionally, it shall be called if backtracing is enabled (see `_gfortran_set_options`).\n\nSyntax:  \n`void _gfortran_set_args (int argc, char *argv[])`\n\nArguments:  \n|        |                                                                                        |\n|--------|----------------------------------------------------------------------------------------|\n| `argc` | number of command line argument strings                                                |\n| `argv` | the command-line argument strings; argv\\[0\\] is the pathname of the executable itself. |\n\nExample:  \n``` example-preformatted\nint main (int argc, char *argv[])\n{\n  /* Initialize libgfortran.  */\n  _gfortran_set_args (argc, argv);\n  return 0;\n}\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fset_005fargs.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fset_005fargs.html)"
- name: 6.3.2. _gfortran_set_options
  id: _005fgfortran_005fset_005foptions
  summary: 'Description: _gfortran_set_options sets several flags related to the Fortran standard to be used, whether backtracing should be enabled and whether range checks should be performed'
  description: "Next: [`_gfortran_set_convert` — Set endian conversion](_005fgfortran_005fset_005fconvert), Previous: [`_gfortran_set_args` — Save command-line arguments](_005fgfortran_005fset_005fargs), Up: [Non-Fortran Main Program](non-fortran-main-program) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.3.2 \\_gfortran_set_options — Set library option flags [¶](#g_t_005fgfortran_005fset_005foptions-----Set-library-option-flags)\n\nDescription:  \n`_gfortran_set_options` sets several flags related to the Fortran standard to be used, whether backtracing should be enabled and whether range checks should be performed. The syntax allows for upward compatibility since the number of passed flags is specified; for non-passed flags, the default value is used. See also see [Options for code generation conventions](code-gen-options). Please note that not all flags are actually used.\n\nSyntax:  \n`void _gfortran_set_options (int num, int options[])`\n\nArguments:  \n|        |                          |\n|--------|--------------------------|\n| `num`  | number of options passed |\n| `argv` | The list of flag values  |\n\noption flag list:  \n|               ||\n|---------------||\n| `option`\\[0\\] | Allowed standard; can give run-time errors if e.g. an input-output edit descriptor is invalid in a given standard. Possible values are (bitwise or-ed) `GFC_STD_F77` (1), `GFC_STD_F95_OBS` (2), `GFC_STD_F95_DEL` (4), `GFC_STD_F95` (8), `GFC_STD_F2003` (16), `GFC_STD_GNU` (32), `GFC_STD_LEGACY` (64), `GFC_STD_F2008` (128), `GFC_STD_F2008_OBS` (256), `GFC_STD_F2008_TS` (512), `GFC_STD_F2018` (1024), `GFC_STD_F2018_OBS` (2048), and `GFC_STD=F2018_DEL` (4096). Default: `GFC_STD_F95_OBS | GFC_STD_F95_DEL | GFC_STD_F95 | GFC_STD_F2003 | GFC_STD_F2008 | GFC_STD_F2008_TS | GFC_STD_F2008_OBS | GFC_STD_F77 | GFC_STD_F2018 | GFC_STD_F2018_OBS | GFC_STD_F2018_DEL | GFC_STD_GNU | GFC_STD_LEGACY`. |\n| `option`\\[1\\] | Standard-warning flag; prints a warning to standard error. Default: `GFC_STD_F95_DEL | GFC_STD_LEGACY`|\n| `option`\\[2\\] | If non zero, enable pedantic checking. Default: off|\n| `option`\\[3\\] | Unused|\n| `option`\\[4\\] | If non zero, enable backtracing on run-time errors. Default: off. (Default in the compiler: on.) Note: Installs a signal handler and requires command-line initialization using `_gfortran_set_args`.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| `option`\\[5\\] | If non zero, supports signed zeros. Default: enabled|\n| `option`\\[6\\] | Enables run-time checking. Possible values are (bitwise or-ed): GFC_RTCHECK_BOUNDS (1), GFC_RTCHECK_ARRAY_TEMPS (2), GFC_RTCHECK_RECURSION (4), GFC_RTCHECK_DO (8), GFC_RTCHECK_POINTER (16), GFC_RTCHECK_MEM (32), GFC_RTCHECK_BITS (64). Default: disabled.                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| `option`\\[7\\] | Unused|\n| `option`\\[8\\] | Show a warning when invoking `STOP` and `ERROR STOP` if a floating-point exception occurred. Possible values are (bitwise or-ed) `GFC_FPE_INVALID` (1), `GFC_FPE_DENORMAL` (2), `GFC_FPE_ZERO` (4), `GFC_FPE_OVERFLOW` (8), `GFC_FPE_UNDERFLOW` (16), `GFC_FPE_INEXACT` (32). Default: None (0). (Default in the compiler: `GFC_FPE_INVALID | GFC_FPE_DENORMAL | GFC_FPE_ZERO | GFC_FPE_OVERFLOW | GFC_FPE_UNDERFLOW`.)                                                                                                                                                                                                                                                                                             |\n\nExample:  \n``` example-preformatted\n/* Use gfortran 4.9 default options.  */\nstatic int options[] = {68, 511, 0, 0, 1, 1, 0, 0, 31};\n_gfortran_set_options (9, &options);\n```\n\nNext: [`_gfortran_set_convert` — Set endian conversion](_005fgfortran_005fset_005fconvert), Previous: [`_gfortran_set_args` — Save command-line arguments](_005fgfortran_005fset_005fargs), Up: [Non-Fortran Main Program](non-fortran-main-program) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fset_005foptions.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fset_005foptions.html)"
- name: 6.3.3. _gfortran_set_convert
  id: _005fgfortran_005fset_005fconvert
  summary: 'Description: _gfortran_set_convert set the representation of data for unformatted files'
  description: "Next: [`_gfortran_set_record_marker` — Set length of record markers](_005fgfortran_005fset_005frecord_005fmarker), Previous: [`_gfortran_set_options` — Set library option flags](_005fgfortran_005fset_005foptions), Up: [Non-Fortran Main Program](non-fortran-main-program) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.3.3 \\_gfortran_set_convert — Set endian conversion [¶](#g_t_005fgfortran_005fset_005fconvert-----Set-endian-conversion)\n\nDescription:  \n`_gfortran_set_convert` set the representation of data for unformatted files.\n\nSyntax:  \n`void _gfortran_set_convert (int conv)`\n\nArguments:  \n|        |                                                                                                                                         |\n|--------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| `conv` | Endian conversion, possible values: GFC_CONVERT_NATIVE (0, default), GFC_CONVERT_SWAP (1), GFC_CONVERT_BIG (2), GFC_CONVERT_LITTLE (3). |\n\nExample:  \n``` example-preformatted\nint main (int argc, char *argv[])\n{\n  /* Initialize libgfortran.  */\n  _gfortran_set_args (argc, argv);\n  _gfortran_set_convert (1);\n  return 0;\n}\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fset_005fconvert.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fset_005fconvert.html)"
- name: 6.3.4. _gfortran_set_record_marker
  id: _005fgfortran_005fset_005frecord_005fmarker
  summary: 'Description: _gfortran_set_record_marker sets the length of record markers for unformatted files'
  description: "Next: [`_gfortran_set_fpe` — Enable floating point exception traps](_005fgfortran_005fset_005ffpe), Previous: [`_gfortran_set_convert` — Set endian conversion](_005fgfortran_005fset_005fconvert), Up: [Non-Fortran Main Program](non-fortran-main-program) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.3.4 \\_gfortran_set_record_marker — Set length of record markers [¶](#g_t_005fgfortran_005fset_005frecord_005fmarker-----Set-length-of-record-markers)\n\nDescription:  \n`_gfortran_set_record_marker` sets the length of record markers for unformatted files.\n\nSyntax:  \n`void _gfortran_set_record_marker (int val)`\n\nArguments:  \n|       |                                                                      |\n|-------|----------------------------------------------------------------------|\n| `val` | Length of the record marker; valid values are 4 and 8. Default is 4. |\n\nExample:  \n``` example-preformatted\nint main (int argc, char *argv[])\n{\n  /* Initialize libgfortran.  */\n  _gfortran_set_args (argc, argv);\n  _gfortran_set_record_marker (8);\n  return 0;\n}\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fset_005frecord_005fmarker.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fset_005frecord_005fmarker.html)"
- name: 6.3.5. _gfortran_set_fpe
  id: _005fgfortran_005fset_005ffpe
  summary: 'Description: _gfortran_set_fpe enables floating point exception traps for the specified exceptions'
  description: "Next: [`_gfortran_set_max_subrecord_length` — Set subrecord length](_005fgfortran_005fset_005fmax_005fsubrecord_005flength), Previous: [`_gfortran_set_record_marker` — Set length of record markers](_005fgfortran_005fset_005frecord_005fmarker), Up: [Non-Fortran Main Program](non-fortran-main-program) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.3.5 \\_gfortran_set_fpe — Enable floating point exception traps [¶](#g_t_005fgfortran_005fset_005ffpe-----Enable-floating-point-exception-traps)\n\nDescription:  \n`_gfortran_set_fpe` enables floating point exception traps for the specified exceptions. On most systems, this will result in a SIGFPE signal being sent and the program being aborted.\n\nSyntax:  \n`void _gfortran_set_fpe (int val)`\n\nArguments:  \n|               |                                                                                                                                                                                                                                      |\n|---------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `option`\\[0\\] | IEEE exceptions. Possible values are (bitwise or-ed) zero (0, default) no trapping, `GFC_FPE_INVALID` (1), `GFC_FPE_DENORMAL` (2), `GFC_FPE_ZERO` (4), `GFC_FPE_OVERFLOW` (8), `GFC_FPE_UNDERFLOW` (16), and `GFC_FPE_INEXACT` (32). |\n\nExample:  \n``` example-preformatted\nint main (int argc, char *argv[])\n{\n  /* Initialize libgfortran.  */\n  _gfortran_set_args (argc, argv);\n  /* FPE for invalid operations such as SQRT(-1.0).  */\n  _gfortran_set_fpe (1);\n  return 0;\n}\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fset_005ffpe.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fset_005ffpe.html)"
- name: 6.3.6. _gfortran_set_max_subrecord_length
  id: _005fgfortran_005fset_005fmax_005fsubrecord_005flength
  summary: 'Description: _gfortran_set_max_subrecord_length set the maximum length for a subrecord'
  description: "Previous: [`_gfortran_set_fpe` — Enable floating point exception traps](_005fgfortran_005fset_005ffpe), Up: [Non-Fortran Main Program](non-fortran-main-program) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.3.6 \\_gfortran_set_max_subrecord_length — Set subrecord length [¶](#g_t_005fgfortran_005fset_005fmax_005fsubrecord_005flength-----Set-subrecord-length)\n\nDescription:  \n`_gfortran_set_max_subrecord_length` set the maximum length for a subrecord. This option only makes sense for testing and debugging of unformatted I/O.\n\nSyntax:  \n`void _gfortran_set_max_subrecord_length (int val)`\n\nArguments:  \n|       |                                                                                                           |\n|-------|-----------------------------------------------------------------------------------------------------------|\n| `val` | the maximum length for a subrecord; the maximum permitted value is 2147483639, which is also the default. |\n\nExample:  \n``` example-preformatted\nint main (int argc, char *argv[])\n{\n  /* Initialize libgfortran.  */\n  _gfortran_set_args (argc, argv);\n  _gfortran_set_max_subrecord_length (8);\n  return 0;\n}\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fset_005fmax_005fsubrecord_005flength.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fset_005fmax_005fsubrecord_005flength.html)"
- name: 6.4. Naming and argument-passing conventions ¶
  id: naming-and-argument-passing-conventions
  summary: This section gives an overview about the naming convention of procedures and global variables and about the argument passing conventions used by GNU Fortran
  description: "Previous: [Non-Fortran Main Program](non-fortran-main-program), Up: [Mixed-Language Programming](mixed-language-programming) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.4 Naming and argument-passing conventions [¶](#Naming-and-argument-passing-conventions-1)\n\nThis section gives an overview about the naming convention of procedures and global variables and about the argument passing conventions used by GNU Fortran. If a C binding has been specified, the naming convention and some of the argument-passing conventions change. If possible, mixed-language and mixed-compiler projects should use the better defined C binding for interoperability. See see [Interoperability with C](interoperability-with-c).\n\n- [Naming conventions](naming-conventions)\n- [Argument passing conventions](argument-passing-conventions)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Naming-and-argument-passing-conventions.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Naming-and-argument-passing-conventions.html)"
- name: 6.4.1. Naming conventions ¶
  id: naming-conventions
  summary: According the Fortran standard, valid Fortran names consist of a letter between A to Z, a to z, digits 0, 1 to 9 and underscores (_) with the restriction that names may only start with a letter
  description: "Next: [Argument passing conventions](argument-passing-conventions), Up: [Naming and argument-passing conventions](naming-and-argument-passing-conventions) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.4.1 Naming conventions [¶](#Naming-conventions-1)\n\nAccording the Fortran standard, valid Fortran names consist of a letter between `A` to `Z`, `a` to `z`, digits `0`, `1` to `9` and underscores (`_`) with the restriction that names may only start with a letter. As vendor extension, the dollar sign (`$`) is additionally permitted with the option `-fdollar-ok`, but not as first character and only if the target system supports it.\n\nBy default, the procedure name is the lower-cased Fortran name with an appended underscore (`_`); using `-fno-underscoring` no underscore is appended while `-fsecond-underscore` appends two underscores. Depending on the target system and the calling convention, the procedure might be additionally dressed; for instance, on 32bit Windows with `stdcall`, an at-sign `@` followed by an integer number is appended. For the changing the calling convention, see see [GNU Fortran Compiler Directives](gnu-fortran-compiler-directives).\n\nFor common blocks, the same convention is used, i.e. by default an underscore is appended to the lower-cased Fortran name. Blank commons have the name `__BLNK__`.\n\nFor procedures and variables declared in the specification space of a module, the name is formed by `__`, followed by the lower-cased module name, `_MOD_`, and the lower-cased Fortran name. Note that no underscore is appended.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Naming-conventions.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Naming-conventions.html)"
- name: 6.4.2. Argument passing conventions ¶
  id: argument-passing-conventions
  summary: Subroutines do not return a value (matching C99’s void) while functions either return a value as specified in the platform ABI or the result variable is passed as hidden argument to the function and no result is returned
  description: "Previous: [Naming conventions](naming-conventions), Up: [Naming and argument-passing conventions](naming-and-argument-passing-conventions) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 6.4.2 Argument passing conventions [¶](#Argument-passing-conventions-1)\n\nSubroutines do not return a value (matching C99’s `void`) while functions either return a value as specified in the platform ABI or the result variable is passed as hidden argument to the function and no result is returned. A hidden result variable is used when the result variable is an array or of type `CHARACTER`.\n\nArguments are passed according to the platform ABI. In particular, complex arguments might not be compatible to a struct with two real components for the real and imaginary part. The argument passing matches the one of C99’s `_Complex`. Functions with scalar complex result variables return their value and do not use a by-reference argument. Note that with the `-ff2c` option, the argument passing is modified and no longer completely matches the platform ABI. Some other Fortran compilers use `f2c` semantic by default; this might cause problems with interoperablility.\n\nGNU Fortran passes most arguments by reference, i.e. by passing a pointer to the data. Note that the compiler might use a temporary variable into which the actual argument has been copied, if required semantically (copy-in/copy-out).\n\nFor arguments with `ALLOCATABLE` and `POINTER` attribute (including procedure pointers), a pointer to the pointer is passed such that the pointer address can be modified in the procedure.\n\nFor dummy arguments with the `VALUE` attribute: Scalar arguments of the type `INTEGER`, `LOGICAL`, `REAL` and `COMPLEX` are passed by value according to the platform ABI. (As vendor extension and not recommended, using `%VAL()` in the call to a procedure has the same effect.) For `TYPE(C_PTR)` and procedure pointers, the pointer itself is passed such that it can be modified without affecting the caller.\n\nFor Boolean (`LOGICAL`) arguments, please note that GCC expects only the integer value 0 and 1. If a GNU Fortran `LOGICAL` variable contains another integer value, the result is undefined. As some other Fortran compilers use *-1* for `.TRUE.`, extra care has to be taken – such as passing the value as `INTEGER`. (The same value restriction also applies to other front ends of GCC, e.g. to GCC’s C99 compiler for `_Bool` or GCC’s Ada compiler for `Boolean`.)\n\nFor arguments of `CHARACTER` type, the character length is passed as a hidden argument at the end of the argument list. For deferred-length strings, the value is passed by reference, otherwise by value. The character length has the C type `size_t` (or `INTEGER(kind=C_SIZE_T)` in Fortran). Note that this is different to older versions of the GNU Fortran compiler, where the type of the hidden character length argument was a C `int`. In order to retain compatibility with older versions, one can e.g. for the following Fortran procedure\n\n``` example-preformatted\nsubroutine fstrlen (s, a)\n   character(len=*) :: s\n   integer :: a\n   print*, len(s)\nend subroutine fstrlen\n```\n\ndefine the corresponding C prototype as follows:\n\n``` example-preformatted\n#if __GNUC__ > 7\ntypedef size_t fortran_charlen_t;\n#else\ntypedef int fortran_charlen_t;\n#endif\n\nvoid fstrlen_ (char*, int*, fortran_charlen_t);\n```\n\nIn order to avoid such compiler-specific details, for new code it is instead recommended to use the ISO_C_BINDING feature.\n\nNote with C binding, `CHARACTER(len=1)` result variables are returned according to the platform ABI and no hidden length argument is used for dummy arguments; with `VALUE`, those variables are passed by value.\n\nFor `OPTIONAL` dummy arguments, an absent argument is denoted by a NULL pointer, except for scalar dummy arguments of intrinsic type which have the `VALUE` attribute. For those, a hidden Boolean argument (`logical(kind=C_bool),value`) is used to indicate whether the argument is present.\n\nArguments which are assumed-shape, assumed-rank or deferred-rank arrays or, with `-fcoarray=lib`, allocatable scalar coarrays use an array descriptor. All other arrays pass the address of the first element of the array. With `-fcoarray=lib`, the token and the offset belonging to nonallocatable coarrays dummy arguments are passed as hidden argument along the character length hidden arguments. The token is an opaque pointer identifying the coarray and the offset is a passed-by-value integer of kind `C_PTRDIFF_T`, denoting the byte offset between the base address of the coarray and the passed scalar or first element of the passed array.\n\nThe arguments are passed in the following order\n\n- Result variable, when the function result is passed by reference\n- Character length of the function result, if it is a of type `CHARACTER` and no C binding is used\n- The arguments in the order in which they appear in the Fortran declaration\n- The present status for optional arguments with value attribute, which are internally passed by value\n- The character length and/or coarray token and offset for the first argument which is a `CHARACTER` or a nonallocatable coarray dummy argument, followed by the hidden arguments of the next dummy argument of such a type\n\nPrevious: [Naming conventions](naming-conventions), Up: [Naming and argument-passing conventions](naming-and-argument-passing-conventions) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Argument-passing-conventions.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Argument-passing-conventions.html)"
- name: 7. Coarray Programming ¶
  id: coarray-programming
  summary: © Free Software Foundation Licensed under the GNU Free Documentation License, Version 1.3
  description: "Next: [Intrinsic Procedures](intrinsic-procedures), Previous: [Mixed-Language Programming](mixed-language-programming), Up: [Introduction](index) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7 Coarray Programming [¶](#Coarray-Programming-1)\n\n- [Type and enum ABI Documentation](type-and-enum-abi-documentation)\n- [Function ABI Documentation](function-abi-documentation)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Coarray-Programming.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Coarray-Programming.html)"
- name: 7.1. Type and enum ABI Documentation ¶
  id: type-and-enum-abi-documentation
  summary: © Free Software Foundation Licensed under the GNU Free Documentation License, Version 1.3
  description: "Next: [Function ABI Documentation](function-abi-documentation), Up: [Coarray Programming](coarray-programming) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.1 Type and enum ABI Documentation [¶](#Type-and-enum-ABI-Documentation-1)\n\n- [`caf_token_t`](caf_005ftoken_005ft)\n- [`caf_register_t`](caf_005fregister_005ft)\n- [`caf_deregister_t`](caf_005fderegister_005ft)\n- [`caf_reference_t`](caf_005freference_005ft)\n- [`caf_team_t`](caf_005fteam_005ft)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Type-and-enum-ABI-Documentation.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Type-and-enum-ABI-Documentation.html)"
- name: 7.1.1. caf_token_t ¶
  id: caf_005ftoken_005ft
  summary: Typedef of type void * on the compiler side
  description: "Next: [`caf_register_t`](caf_005fregister_005ft), Up: [Type and enum ABI Documentation](type-and-enum-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.1.1 caf_token_t [¶](#caf_005ftoken_005ft-1)\n\nTypedef of type `void *` on the compiler side. Can be any data type on the library side.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/caf_005ftoken_005ft.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/caf_005ftoken_005ft.html)"
- name: 7.1.2. caf_register_t ¶
  id: caf_005fregister_005ft
  summary: Indicates which kind of coarray variable should be registered
  description: "Next: [`caf_deregister_t`](caf_005fderegister_005ft), Previous: [`caf_token_t`](caf_005ftoken_005ft), Up: [Type and enum ABI Documentation](type-and-enum-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.1.2 caf_register_t [¶](#caf_005fregister_005ft-1)\n\nIndicates which kind of coarray variable should be registered.\n\n``` verbatim\ntypedef enum caf_register_t {\n  CAF_REGTYPE_COARRAY_STATIC,\n  CAF_REGTYPE_COARRAY_ALLOC,\n  CAF_REGTYPE_LOCK_STATIC,\n  CAF_REGTYPE_LOCK_ALLOC,\n  CAF_REGTYPE_CRITICAL,\n  CAF_REGTYPE_EVENT_STATIC,\n  CAF_REGTYPE_EVENT_ALLOC,\n  CAF_REGTYPE_COARRAY_ALLOC_REGISTER_ONLY,\n  CAF_REGTYPE_COARRAY_ALLOC_ALLOCATE_ONLY\n}\ncaf_register_t;\n```\n\nThe values `CAF_REGTYPE_COARRAY_ALLOC_REGISTER_ONLY` and `CAF_REGTYPE_COARRAY_ALLOC_ALLOCATE_ONLY` are for allocatable components in derived type coarrays only. The first one sets up the token without allocating memory for allocatable component. The latter one only allocates the memory for an allocatable component in a derived type coarray. The token needs to be setup previously by the REGISTER_ONLY. This allows to have allocatable components un-allocated on some images. The status whether an allocatable component is allocated on a remote image can be queried by `_caf_is_present` which used internally by the `ALLOCATED` intrinsic.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/caf_005fregister_005ft.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/caf_005fregister_005ft.html)"
- name: 7.1.3. caf_deregister_t ¶
  id: caf_005fderegister_005ft
  summary: Allows to specifiy the type of deregistration of a coarray object
  description: "Next: [`caf_reference_t`](caf_005freference_005ft), Previous: [`caf_register_t`](caf_005fregister_005ft), Up: [Type and enum ABI Documentation](type-and-enum-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.1.3 caf_deregister_t [¶](#caf_005fderegister_005ft-1)\n\n``` verbatim\ntypedef enum caf_deregister_t {\n  CAF_DEREGTYPE_COARRAY_DEREGISTER,\n  CAF_DEREGTYPE_COARRAY_DEALLOCATE_ONLY\n}\ncaf_deregister_t;\n```\n\nAllows to specifiy the type of deregistration of a coarray object. The `CAF_DEREGTYPE_COARRAY_DEALLOCATE_ONLY` flag is only allowed for allocatable components in derived type coarrays.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/caf_005fderegister_005ft.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/caf_005fderegister_005ft.html)"
- name: 7.1.4. caf_reference_t ¶
  id: caf_005freference_005ft
  summary: The structure used for implementing arbitrary reference chains
  description: "Next: [`caf_team_t`](caf_005fteam_005ft), Previous: [`caf_deregister_t`](caf_005fderegister_005ft), Up: [Type and enum ABI Documentation](type-and-enum-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.1.4 caf_reference_t [¶](#caf_005freference_005ft-1)\n\nThe structure used for implementing arbitrary reference chains. A `CAF_REFERENCE_T` allows to specify a component reference or any kind of array reference of any rank supported by gfortran. For array references all kinds as known by the compiler/Fortran standard are supported indicated by a `MODE`.\n\n``` verbatim\ntypedef enum caf_ref_type_t {\n  /* Reference a component of a derived type, either regular one or an\n     allocatable or pointer type.  For regular ones idx in caf_reference_t is\n     set to -1.  */\n  CAF_REF_COMPONENT,\n  /* Reference an allocatable array.  */\n  CAF_REF_ARRAY,\n  /* Reference a non-allocatable/non-pointer array.  I.e., the coarray object\n     has no array descriptor associated and the addressing is done\n     completely using the ref.  */\n  CAF_REF_STATIC_ARRAY\n} caf_ref_type_t;\n```\n\n``` verbatim\ntypedef enum caf_array_ref_t {\n  /* No array ref.  This terminates the array ref.  */\n  CAF_ARR_REF_NONE = 0,\n  /* Reference array elements given by a vector.  Only for this mode\n     caf_reference_t.u.a.dim[i].v is valid.  */\n  CAF_ARR_REF_VECTOR,\n  /* A full array ref (:).  */\n  CAF_ARR_REF_FULL,\n  /* Reference a range on elements given by start, end and stride.  */\n  CAF_ARR_REF_RANGE,\n  /* Only a single item is referenced given in the start member.  */\n  CAF_ARR_REF_SINGLE,\n  /* An array ref of the kind (i:), where i is an arbitrary valid index in the\n     array.  The index i is given in the start member.  */\n  CAF_ARR_REF_OPEN_END,\n  /* An array ref of the kind (:i), where the lower bound of the array ref\n     is given by the remote side.  The index i is given in the end member.  */\n  CAF_ARR_REF_OPEN_START\n} caf_array_ref_t;\n```\n\n``` verbatim\n/* References to remote components of a derived type.  */\ntypedef struct caf_reference_t {\n  /* A pointer to the next ref or NULL.  */\n  struct caf_reference_t *next;\n  /* The type of the reference.  */\n  /* caf_ref_type_t, replaced by int to allow specification in fortran FE.  */\n  int type;\n  /* The size of an item referenced in bytes.  I.e. in an array ref this is\n     the factor to advance the array pointer with to get to the next item.\n     For component refs this gives just the size of the element referenced.  */\n  size_t item_size;\n  union {\n    struct {\n      /* The offset (in bytes) of the component in the derived type.\n         Unused for allocatable or pointer components.  */\n      ptrdiff_t offset;\n      /* The offset (in bytes) to the caf_token associated with this\n         component.  NULL, when not allocatable/pointer ref.  */\n      ptrdiff_t caf_token_offset;\n    } c;\n    struct {\n      /* The mode of the array ref.  See CAF_ARR_REF_*.  */\n      /* caf_array_ref_t, replaced by unsigend char to allow specification in\n         fortran FE.  */\n     unsigned char mode[GFC_MAX_DIMENSIONS];\n      /* The type of a static array.  Unset for array's with descriptors.  */\n      int static_array_type;\n      /* Subscript refs (s) or vector refs (v).  */\n      union {\n        struct {\n          /* The start and end boundary of the ref and the stride.  */\n          index_type start, end, stride;\n        } s;\n        struct {\n          /* nvec entries of kind giving the elements to reference.  */\n          void *vector;\n          /* The number of entries in vector.  */\n          size_t nvec;\n          /* The integer kind used for the elements in vector.  */\n          int kind;\n        } v;\n      } dim[GFC_MAX_DIMENSIONS];\n    } a;\n  } u;\n} caf_reference_t;\n```\n\nThe references make up a single linked list of reference operations. The `NEXT` member links to the next reference or NULL to indicate the end of the chain. Component and array refs can be arbitrarily mixed as long as they comply to the Fortran standard.\n\n*NOTES* The member `STATIC_ARRAY_TYPE` is used only when the `TYPE` is `CAF_REF_STATIC_ARRAY`. The member gives the type of the data referenced. Because no array descriptor is available for a descriptor-less array and type conversion still needs to take place the type is transported here.\n\nAt the moment `CAF_ARR_REF_VECTOR` is not implemented in the front end for descriptor-less arrays. The library caf_single has untested support for it.\n\nNext: [`caf_team_t`](caf_005fteam_005ft), Previous: [`caf_deregister_t`](caf_005fderegister_005ft), Up: [Type and enum ABI Documentation](type-and-enum-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/caf_005freference_005ft.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/caf_005freference_005ft.html)"
- name: 7.1.5. caf_team_t ¶
  id: caf_005fteam_005ft
  summary: Opaque pointer to represent a team-handle
  description: "Previous: [`caf_reference_t`](caf_005freference_005ft), Up: [Type and enum ABI Documentation](type-and-enum-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.1.5 caf_team_t [¶](#caf_005fteam_005ft-1)\n\nOpaque pointer to represent a team-handle. This type is a stand-in for the future implementation of teams. It is about to change without further notice.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/caf_005fteam_005ft.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/caf_005fteam_005ft.html)"
- name: 7.2. Function ABI Documentation ¶
  id: function-abi-documentation
  summary: © Free Software Foundation Licensed under the GNU Free Documentation License, Version 1.3
  description: "Previous: [Type and enum ABI Documentation](type-and-enum-abi-documentation), Up: [Coarray Programming](coarray-programming) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2 Function ABI Documentation [¶](#Function-ABI-Documentation-1)\n\n- [`_gfortran_caf_init` — Initialiation function](_005fgfortran_005fcaf_005finit)\n- [`_gfortran_caf_finish` — Finalization function](_005fgfortran_005fcaf_005ffinish)\n- [`_gfortran_caf_this_image` — Querying the image number](_005fgfortran_005fcaf_005fthis_005fimage)\n- [`_gfortran_caf_num_images` — Querying the maximal number of images](_005fgfortran_005fcaf_005fnum_005fimages)\n- [`_gfortran_caf_image_status` — Query the status of an image](_005fgfortran_005fcaf_005fimage_005fstatus)\n- [`_gfortran_caf_failed_images` — Get an array of the indexes of the failed images](_005fgfortran_005fcaf_005ffailed_005fimages)\n- [`_gfortran_caf_stopped_images` — Get an array of the indexes of the stopped images](_005fgfortran_005fcaf_005fstopped_005fimages)\n- [`_gfortran_caf_register` — Registering coarrays](_005fgfortran_005fcaf_005fregister)\n- [`_gfortran_caf_deregister` — Deregistering coarrays](_005fgfortran_005fcaf_005fderegister)\n- [`_gfortran_caf_is_present` — Query whether an allocatable or pointer component in a derived type coarray is allocated](_005fgfortran_005fcaf_005fis_005fpresent)\n- [`_gfortran_caf_send` — Sending data from a local image to a remote image](_005fgfortran_005fcaf_005fsend)\n- [`_gfortran_caf_get` — Getting data from a remote image](_005fgfortran_005fcaf_005fget)\n- [`_gfortran_caf_sendget` — Sending data between remote images](_005fgfortran_005fcaf_005fsendget)\n- [`_gfortran_caf_send_by_ref` — Sending data from a local image to a remote image with enhanced referencing options](_005fgfortran_005fcaf_005fsend_005fby_005fref)\n- [`_gfortran_caf_get_by_ref` — Getting data from a remote image using enhanced references](_005fgfortran_005fcaf_005fget_005fby_005fref)\n- [`_gfortran_caf_sendget_by_ref` — Sending data between remote images using enhanced references on both sides](_005fgfortran_005fcaf_005fsendget_005fby_005fref)\n- [`_gfortran_caf_lock` — Locking a lock variable](_005fgfortran_005fcaf_005flock)\n- [`_gfortran_caf_lock` — Unlocking a lock variable](_005fgfortran_005fcaf_005funlock)\n- [`_gfortran_caf_event_post` — Post an event](_005fgfortran_005fcaf_005fevent_005fpost)\n- [`_gfortran_caf_event_wait` — Wait that an event occurred](_005fgfortran_005fcaf_005fevent_005fwait)\n- [`_gfortran_caf_event_query` — Query event count](_005fgfortran_005fcaf_005fevent_005fquery)\n- [`_gfortran_caf_sync_all` — All-image barrier](_005fgfortran_005fcaf_005fsync_005fall)\n- [`_gfortran_caf_sync_images` — Barrier for selected images](_005fgfortran_005fcaf_005fsync_005fimages)\n- [`_gfortran_caf_sync_memory` — Wait for completion of segment-memory operations](_005fgfortran_005fcaf_005fsync_005fmemory)\n- [`_gfortran_caf_error_stop` — Error termination with exit code](_005fgfortran_005fcaf_005ferror_005fstop)\n- [`_gfortran_caf_error_stop_str` — Error termination with string](_005fgfortran_005fcaf_005ferror_005fstop_005fstr)\n- [`_gfortran_caf_fail_image` — Mark the image failed and end its execution](_005fgfortran_005fcaf_005ffail_005fimage)\n- [`_gfortran_caf_atomic_define` — Atomic variable assignment](_005fgfortran_005fcaf_005fatomic_005fdefine)\n- [`_gfortran_caf_atomic_ref` — Atomic variable reference](_005fgfortran_005fcaf_005fatomic_005fref)\n- [`_gfortran_caf_atomic_cas` — Atomic compare and swap](_005fgfortran_005fcaf_005fatomic_005fcas)\n- [`_gfortran_caf_atomic_op` — Atomic operation](_005fgfortran_005fcaf_005fatomic_005fop)\n- [`_gfortran_caf_co_broadcast` — Sending data to all images](_005fgfortran_005fcaf_005fco_005fbroadcast)\n- [`_gfortran_caf_co_max` — Collective maximum reduction](_005fgfortran_005fcaf_005fco_005fmax)\n- [`_gfortran_caf_co_min` — Collective minimum reduction](_005fgfortran_005fcaf_005fco_005fmin)\n- [`_gfortran_caf_co_sum` — Collective summing reduction](_005fgfortran_005fcaf_005fco_005fsum)\n- [`_gfortran_caf_co_reduce` — Generic collective reduction](_005fgfortran_005fcaf_005fco_005freduce)\n\nPrevious: [Type and enum ABI Documentation](type-and-enum-abi-documentation), Up: [Coarray Programming](coarray-programming) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Function-ABI-Documentation.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Function-ABI-Documentation.html)"
- name: 7.2.1. _gfortran_caf_init
  id: _005fgfortran_005fcaf_005finit
  summary: 'Description: This function is called at startup of the program before the Fortran main program, if the latter has been compiled with -fcoarray=lib'
  description: "Next: [`_gfortran_caf_finish` — Finalization function](_005fgfortran_005fcaf_005ffinish), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.1 \\_gfortran_caf_init — Initialiation function [¶](#g_t_005fgfortran_005fcaf_005finit-----Initialiation-function)\n\nDescription:  \nThis function is called at startup of the program before the Fortran main program, if the latter has been compiled with `-fcoarray=lib`. It takes as arguments the command-line arguments of the program. It is permitted to pass two `NULL` pointers as argument; if non-`NULL`, the library is permitted to modify the arguments.\n\nSyntax:  \n`void _gfortran_caf_init (int *argc, char ***argv)`\n\nArguments:  \n|        |                                                                                                |\n|--------|------------------------------------------------------------------------------------------------|\n| `argc` | intent(inout) An integer pointer with the number of arguments passed to the program or `NULL`. |\n| `argv` | intent(inout) A pointer to an array of strings with the command-line arguments or `NULL`.      |\n\nNOTES  \nThe function is modelled after the initialization function of the Message Passing Interface (MPI) specification. Due to the way coarray registration works, it might not be the first call to the library. If the main program is not written in Fortran and only a library uses coarrays, it can happen that this function is never called. Therefore, it is recommended that the library does not rely on the passed arguments and whether the call has been done.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005finit.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005finit.html)"
- name: 7.2.2. _gfortran_caf_finish
  id: _005fgfortran_005fcaf_005ffinish
  summary: 'Description: This function is called at the end of the Fortran main program, if it has been compiled with the -fcoarray=lib option'
  description: "Next: [`_gfortran_caf_this_image` — Querying the image number](_005fgfortran_005fcaf_005fthis_005fimage), Previous: [`_gfortran_caf_init` — Initialiation function](_005fgfortran_005fcaf_005finit), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.2 \\_gfortran_caf_finish — Finalization function [¶](#g_t_005fgfortran_005fcaf_005ffinish-----Finalization-function)\n\nDescription:  \nThis function is called at the end of the Fortran main program, if it has been compiled with the `-fcoarray=lib` option.\n\nSyntax:  \n`void _gfortran_caf_finish (void)`\n\nNOTES  \nFor non-Fortran programs, it is recommended to call the function at the end of the main program. To ensure that the shutdown is also performed for programs where this function is not explicitly invoked, for instance non-Fortran programs or calls to the system’s exit() function, the library can use a destructor function. Note that programs can also be terminated using the STOP and ERROR STOP statements; those use different library calls.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005ffinish.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005ffinish.html)"
- name: 7.2.3. _gfortran_caf_this_image
  id: _005fgfortran_005fcaf_005fthis_005fimage
  summary: 'Description: This function returns the current image number, which is a positive number'
  description: "Next: [`_gfortran_caf_num_images` — Querying the maximal number of images](_005fgfortran_005fcaf_005fnum_005fimages), Previous: [`_gfortran_caf_finish` — Finalization function](_005fgfortran_005fcaf_005ffinish), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.3 \\_gfortran_caf_this_image — Querying the image number [¶](#g_t_005fgfortran_005fcaf_005fthis_005fimage-----Querying-the-image-number)\n\nDescription:  \nThis function returns the current image number, which is a positive number.\n\nSyntax:  \n`int _gfortran_caf_this_image (int distance)`\n\nArguments:  \n|            |                                                                                         |\n|------------|-----------------------------------------------------------------------------------------|\n| `distance` | As specified for the `this_image` intrinsic in TS18508. Shall be a non-negative number. |\n\nNOTES  \nIf the Fortran intrinsic `this_image` is invoked without an argument, which is the only permitted form in Fortran 2008, GCC passes `0` as first argument.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fthis_005fimage.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fthis_005fimage.html)"
- name: 7.2.4. _gfortran_caf_num_images
  id: _005fgfortran_005fcaf_005fnum_005fimages
  summary: 'Description: This function returns the number of images in the current team, if distance is 0 or the number of images in the parent team at the specified distance'
  description: "Next: [`_gfortran_caf_image_status` — Query the status of an image](_005fgfortran_005fcaf_005fimage_005fstatus), Previous: [`_gfortran_caf_this_image` — Querying the image number](_005fgfortran_005fcaf_005fthis_005fimage), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.4 \\_gfortran_caf_num_images — Querying the maximal number of images [¶](#g_t_005fgfortran_005fcaf_005fnum_005fimages-----Querying-the-maximal-number-of-images)\n\nDescription:  \nThis function returns the number of images in the current team, if `distance` is 0 or the number of images in the parent team at the specified distance. If failed is -1, the function returns the number of all images at the specified distance; if it is 0, the function returns the number of nonfailed images, and if it is 1, it returns the number of failed images.\n\nSyntax:  \n`int _gfortran_caf_num_images(int distance, int failed)`\n\nArguments:  \n|            |                                                                  |\n|------------|------------------------------------------------------------------|\n| `distance` | the distance from this image to the ancestor. Shall be positive. |\n| `failed`   | shall be -1, 0, or 1                                             |\n\nNOTES  \nThis function follows TS18508. If the num_image intrinsic has no arguments, then the compiler passes `distance=0` and `failed=-1` to the function.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fnum_005fimages.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fnum_005fimages.html)"
- name: 7.2.5. _gfortran_caf_image_status
  id: _005fgfortran_005fcaf_005fimage_005fstatus
  summary: 'Description: Get the status of the image given by the id image of the team given by team'
  description: "Next: [`_gfortran_caf_failed_images` — Get an array of the indexes of the failed images](_005fgfortran_005fcaf_005ffailed_005fimages), Previous: [`_gfortran_caf_num_images` — Querying the maximal number of images](_005fgfortran_005fcaf_005fnum_005fimages), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.5 \\_gfortran_caf_image_status — Query the status of an image [¶](#g_t_005fgfortran_005fcaf_005fimage_005fstatus-----Query-the-status-of-an-image)\n\nDescription:  \nGet the status of the image given by the id `image` of the team given by `team`. Valid results are zero, for image is ok, `STAT_STOPPED_IMAGE` from the ISO_FORTRAN_ENV module to indicate that the image has been stopped and `STAT_FAILED_IMAGE` also from ISO_FORTRAN_ENV to indicate that the image has executed a `FAIL IMAGE` statement.\n\nSyntax:  \n`int _gfortran_caf_image_status (int image, caf_team_t * team)`\n\nArguments:  \n|         |                                                             |\n|---------|-------------------------------------------------------------|\n| `image` | the positive scalar id of the image in the current TEAM.    |\n| `team`  | optional; team on the which the inquiry is to be performed. |\n\nNOTES  \nThis function follows TS18508. Because team-functionality is not yet implemented a null-pointer is passed for the `team` argument at the moment.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fimage_005fstatus.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fimage_005fstatus.html)"
- name: 7.2.6. _gfortran_caf_failed_images
  id: _005fgfortran_005fcaf_005ffailed_005fimages
  summary: 'Description: Get an array of image indexes in the current team that have failed'
  description: "Next: [`_gfortran_caf_stopped_images` — Get an array of the indexes of the stopped images](_005fgfortran_005fcaf_005fstopped_005fimages), Previous: [`_gfortran_caf_image_status` — Query the status of an image](_005fgfortran_005fcaf_005fimage_005fstatus), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.6 \\_gfortran_caf_failed_images — Get an array of the indexes of the failed images [¶](#g_t_005fgfortran_005fcaf_005ffailed_005fimages-----Get-an-array-of-the-indexes-of-the-failed-images)\n\nDescription:  \nGet an array of image indexes in the current `team` that have failed. The array is sorted ascendingly. When `team` is not provided the current team is to be used. When `kind` is provided then the resulting array is of that integer kind else it is of default integer kind. The returns an unallocated size zero array when no images have failed.\n\nSyntax:  \n`int _gfortran_caf_failed_images (caf_team_t * team, int * kind)`\n\nArguments:  \n|         |                                                             |\n|---------|-------------------------------------------------------------|\n| `team`  | optional; team on the which the inquiry is to be performed. |\n| `image` | optional; the kind of the resulting integer array.          |\n\nNOTES  \nThis function follows TS18508. Because team-functionality is not yet implemented a null-pointer is passed for the `team` argument at the moment.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005ffailed_005fimages.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005ffailed_005fimages.html)"
- name: 7.2.7. _gfortran_caf_stopped_images
  id: _005fgfortran_005fcaf_005fstopped_005fimages
  summary: 'Description: Get an array of image indexes in the current team that have stopped'
  description: "Next: [`_gfortran_caf_register` — Registering coarrays](_005fgfortran_005fcaf_005fregister), Previous: [`_gfortran_caf_failed_images` — Get an array of the indexes of the failed images](_005fgfortran_005fcaf_005ffailed_005fimages), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.7 \\_gfortran_caf_stopped_images — Get an array of the indexes of the stopped images [¶](#g_t_005fgfortran_005fcaf_005fstopped_005fimages-----Get-an-array-of-the-indexes-of-the-stopped-images)\n\nDescription:  \nGet an array of image indexes in the current `team` that have stopped. The array is sorted ascendingly. When `team` is not provided the current team is to be used. When `kind` is provided then the resulting array is of that integer kind else it is of default integer kind. The returns an unallocated size zero array when no images have failed.\n\nSyntax:  \n`int _gfortran_caf_stopped_images (caf_team_t * team, int * kind)`\n\nArguments:  \n|         |                                                             |\n|---------|-------------------------------------------------------------|\n| `team`  | optional; team on the which the inquiry is to be performed. |\n| `image` | optional; the kind of the resulting integer array.          |\n\nNOTES  \nThis function follows TS18508. Because team-functionality is not yet implemented a null-pointer is passed for the `team` argument at the moment.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fstopped_005fimages.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fstopped_005fimages.html)"
- name: 7.2.8. _gfortran_caf_register
  id: _005fgfortran_005fcaf_005fregister
  summary: 'Description: Registers memory for a coarray and creates a token to identify the coarray'
  description: "Next: [`_gfortran_caf_deregister` — Deregistering coarrays](_005fgfortran_005fcaf_005fderegister), Previous: [`_gfortran_caf_stopped_images` — Get an array of the indexes of the stopped images](_005fgfortran_005fcaf_005fstopped_005fimages), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.8 \\_gfortran_caf_register — Registering coarrays [¶](#g_t_005fgfortran_005fcaf_005fregister-----Registering-coarrays)\n\nDescription:  \nRegisters memory for a coarray and creates a token to identify the coarray. The routine is called for both coarrays with `SAVE` attribute and using an explicit `ALLOCATE` statement. If an error occurs and `STAT` is a `NULL` pointer, the function shall abort with printing an error message and starting the error termination. If no error occurs and `STAT` is present, it shall be set to zero. Otherwise, it shall be set to a positive value and, if not-`NULL`, `ERRMSG` shall be set to a string describing the failure. The routine shall register the memory provided in the `DATA`-component of the array descriptor `DESC`, when that component is non-`NULL`, else it shall allocate sufficient memory and provide a pointer to it in the `DATA`-component of `DESC`. The array descriptor has rank zero, when a scalar object is to be registered and the array descriptor may be invalid after the call to `_gfortran_caf_register`. When an array is to be allocated the descriptor persists.\n\nFor `CAF_REGTYPE_COARRAY_STATIC` and `CAF_REGTYPE_COARRAY_ALLOC`, the passed size is the byte size requested. For `CAF_REGTYPE_LOCK_STATIC`, `CAF_REGTYPE_LOCK_ALLOC` and `CAF_REGTYPE_CRITICAL` it is the array size or one for a scalar.\n\nWhen `CAF_REGTYPE_COARRAY_ALLOC_REGISTER_ONLY` is used, then only a token for an allocatable or pointer component is created. The `SIZE` parameter is not used then. On the contrary when `CAF_REGTYPE_COARRAY_ALLOC_ALLOCATE_ONLY` is specified, then the `token` needs to be registered by a previous call with regtype `CAF_REGTYPE_COARRAY_ALLOC_REGISTER_ONLY` and either the memory specified in the `DESC`’s data-ptr is registered or allocate when the data-ptr is `NULL`.\n\nSyntax:  \n`void caf_register (size_t size, caf_register_t type, caf_token_t *token, gfc_descriptor_t *desc, int *stat, char *errmsg, size_t errmsg_len)`\n\nArguments:  \n|              |                                                                                                                            |\n|--------------|----------------------------------------------------------------------------------------------------------------------------|\n| `size`       | For normal coarrays, the byte size of the coarray to be allocated; for lock types and event types, the number of elements. |\n| `type`       | one of the caf_register_t types.                                                                                           |\n| `token`      | intent(out) An opaque pointer identifying the coarray.                                                                     |\n| `desc`       | intent(inout) The (pseudo) array descriptor.                                                                               |\n| `stat`       | intent(out) For allocatable coarrays, stores the STAT=; may be `NULL`                                                      |\n| `errmsg`     | intent(out) When an error occurs, this will be set to an error message; may be `NULL`                                      |\n| `errmsg_len` | the buffer size of errmsg.                                                                                                 |\n\nNOTES  \nNonallocatable coarrays have to be registered prior use from remote images. In order to guarantee this, they have to be registered before the main program. This can be achieved by creating constructor functions. That is what GCC does such that also for nonallocatable coarrays the memory is allocated and no static memory is used. The token permits to identify the coarray; to the processor, the token is a nonaliasing pointer. The library can, for instance, store the base address of the coarray in the token, some handle or a more complicated struct. The library may also store the array descriptor `DESC` when its rank is non-zero.\n\nFor lock types, the value shall only be used for checking the allocation status. Note that for critical blocks, the locking is only required on one image; in the locking statement, the processor shall always pass an image index of one for critical-block lock variables (`CAF_REGTYPE_CRITICAL`). For lock types and critical-block variables, the initial value shall be unlocked (or, respectively, not in critical section) such as the value false; for event types, the initial state should be no event, e.g. zero.\n\nNext: [`_gfortran_caf_deregister` — Deregistering coarrays](_005fgfortran_005fcaf_005fderegister), Previous: [`_gfortran_caf_stopped_images` — Get an array of the indexes of the stopped images](_005fgfortran_005fcaf_005fstopped_005fimages), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fregister.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fregister.html)"
- name: 7.2.9. _gfortran_caf_deregister
  id: _005fgfortran_005fcaf_005fderegister
  summary: 'Description: Called to free or deregister the memory of a coarray; the processor calls this function for automatic and explicit deallocation'
  description: "Next: [`_gfortran_caf_is_present` — Query whether an allocatable or pointer component in a derived type coarray is allocated](_005fgfortran_005fcaf_005fis_005fpresent), Previous: [`_gfortran_caf_register` — Registering coarrays](_005fgfortran_005fcaf_005fregister), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.9 \\_gfortran_caf_deregister — Deregistering coarrays [¶](#g_t_005fgfortran_005fcaf_005fderegister-----Deregistering-coarrays)\n\nDescription:  \nCalled to free or deregister the memory of a coarray; the processor calls this function for automatic and explicit deallocation. In case of an error, this function shall fail with an error message, unless the `STAT` variable is not null. The library is only expected to free memory it allocated itself during a call to `_gfortran_caf_register`.\n\nSyntax:  \n`void caf_deregister (caf_token_t *token, caf_deregister_t type, int *stat, char *errmsg, size_t errmsg_len)`\n\nArguments:  \n|              |                                                                                                                                                                                                                                                |\n|--------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `token`      | the token to free.                                                                                                                                                                                                                             |\n| `type`       | the type of action to take for the coarray. A `CAF_DEREGTYPE_COARRAY_DEALLOCATE_ONLY` is allowed only for allocatable or pointer components of derived type coarrays. The action only deallocates the local memory without deleting the token. |\n| `stat`       | intent(out) Stores the STAT=; may be NULL                                                                                                                                                                                                      |\n| `errmsg`     | intent(out) When an error occurs, this will be set to an error message; may be NULL                                                                                                                                                            |\n| `errmsg_len` | the buffer size of errmsg.                                                                                                                                                                                                                     |\n\nNOTES  \nFor nonalloatable coarrays this function is never called. If a cleanup is required, it has to be handled via the finish, stop and error stop functions, and via destructors.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fderegister.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fderegister.html)"
- name: 7.2.10. _gfortran_caf_is_present
  id: _005fgfortran_005fcaf_005fis_005fpresent
  summary: 'Description: Used to query the coarray library whether an allocatable component in a derived type coarray is allocated on a remote image'
  description: "Next: [`_gfortran_caf_send` — Sending data from a local image to a remote image](_005fgfortran_005fcaf_005fsend), Previous: [`_gfortran_caf_deregister` — Deregistering coarrays](_005fgfortran_005fcaf_005fderegister), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.10 \\_gfortran_caf_is_present — Query whether an allocatable or pointer component in a derived type coarray is allocated [¶](#g_t_005fgfortran_005fcaf_005fis_005fpresent-----Query-whether-an-allocatable-or-pointer-component-in-a-derived-type-coarray-is-allocated)\n\nDescription:  \nUsed to query the coarray library whether an allocatable component in a derived type coarray is allocated on a remote image.\n\nSyntax:  \n`void _gfortran_caf_is_present (caf_token_t token, int image_index, gfc_reference_t *ref)`\n\nArguments:  \n|               |                                                                                                                                                                                       |\n|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `token`       | An opaque pointer identifying the coarray.                                                                                                                                            |\n| `image_index` | The ID of the remote image; must be a positive number.                                                                                                                                |\n| `ref`         | A chain of references to address the allocatable or pointer component in the derived type coarray. The object reference needs to be a scalar or a full array reference, respectively. |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fis_005fpresent.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fis_005fpresent.html)"
- name: 7.2.11. _gfortran_caf_send
  id: _005fgfortran_005fcaf_005fsend
  summary: 'Description: Called to send a scalar, an array section or a whole array from a local to a remote image identified by the image_index'
  description: "Next: [`_gfortran_caf_get` — Getting data from a remote image](_005fgfortran_005fcaf_005fget), Previous: [`_gfortran_caf_is_present` — Query whether an allocatable or pointer component in a derived type coarray is allocated](_005fgfortran_005fcaf_005fis_005fpresent), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.11 \\_gfortran_caf_send — Sending data from a local image to a remote image [¶](#g_t_005fgfortran_005fcaf_005fsend-----Sending-data-from-a-local-image-to-a-remote-image)\n\nDescription:  \nCalled to send a scalar, an array section or a whole array from a local to a remote image identified by the image_index.\n\nSyntax:  \n`void _gfortran_caf_send (caf_token_t token, size_t offset, int image_index, gfc_descriptor_t *dest, caf_vector_t *dst_vector, gfc_descriptor_t *src, int dst_kind, int src_kind, bool may_require_tmp, int *stat)`\n\nArguments:  \n|                   |                                                                                                                                                                                                                                                                                                                  |\n|-------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `token`           | intent(in) An opaque pointer identifying the coarray.                                                                                                                                                                                                                                                            |\n| `offset`          | intent(in) By which amount of bytes the actual data is shifted compared to the base address of the coarray.                                                                                                                                                                                                      |\n| `image_index`     | intent(in) The ID of the remote image; must be a positive number.                                                                                                                                                                                                                                                |\n| `dest`            | intent(in) Array descriptor for the remote image for the bounds and the size. The `base_addr` shall not be accessed.                                                                                                                                                                                             |\n| `dst_vector`      | intent(in) If not NULL, it contains the vector subscript of the destination array; the values are relative to the dimension triplet of the dest argument.                                                                                                                                                        |\n| `src`             | intent(in) Array descriptor of the local array to be transferred to the remote image                                                                                                                                                                                                                             |\n| `dst_kind`        | intent(in) Kind of the destination argument                                                                                                                                                                                                                                                                      |\n| `src_kind`        | intent(in) Kind of the source argument                                                                                                                                                                                                                                                                           |\n| `may_require_tmp` | intent(in) The variable is `false` when it is known at compile time that the `dest` and `src` either cannot overlap or overlap (fully or partially) such that walking `src` and `dest` in element wise element order (honoring the stride value) will not lead to wrong results. Otherwise, the value is `true`. |\n| `stat`            | intent(out) when non-NULL give the result of the operation, i.e., zero on success and non-zero on error. When NULL and an error occurs, then an error message is printed and the program is terminated.                                                                                                          |\n\nNOTES  \nIt is permitted to have `image_index` equal the current image; the memory of the send-to and the send-from might (partially) overlap in that case. The implementation has to take care that it handles this case, e.g. using `memmove` which handles (partially) overlapping memory. If `may_require_tmp` is true, the library might additionally create a temporary variable, unless additional checks show that this is not required (e.g. because walking backward is possible or because both arrays are contiguous and `memmove` takes care of overlap issues).\n\nNote that the assignment of a scalar to an array is permitted. In addition, the library has to handle numeric-type conversion and for strings, padding and different character kinds.\n\nNext: [`_gfortran_caf_get` — Getting data from a remote image](_005fgfortran_005fcaf_005fget), Previous: [`_gfortran_caf_is_present` — Query whether an allocatable or pointer component in a derived type coarray is allocated](_005fgfortran_005fcaf_005fis_005fpresent), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fsend.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fsend.html)"
- name: 7.2.12. _gfortran_caf_get
  id: _005fgfortran_005fcaf_005fget
  summary: 'Description: Called to get an array section or a whole array from a remote, image identified by the image_index'
  description: "Next: [`_gfortran_caf_sendget` — Sending data between remote images](_005fgfortran_005fcaf_005fsendget), Previous: [`_gfortran_caf_send` — Sending data from a local image to a remote image](_005fgfortran_005fcaf_005fsend), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.12 \\_gfortran_caf_get — Getting data from a remote image [¶](#g_t_005fgfortran_005fcaf_005fget-----Getting-data-from-a-remote-image)\n\nDescription:  \nCalled to get an array section or a whole array from a remote, image identified by the image_index.\n\nSyntax:  \n`void _gfortran_caf_get (caf_token_t token, size_t offset, int image_index, gfc_descriptor_t *src, caf_vector_t *src_vector, gfc_descriptor_t *dest, int src_kind, int dst_kind, bool may_require_tmp, int *stat)`\n\nArguments:  \n|                   |                                                                                                                                                                                                                                                                                                                  |\n|-------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `token`           | intent(in) An opaque pointer identifying the coarray.                                                                                                                                                                                                                                                            |\n| `offset`          | intent(in) By which amount of bytes the actual data is shifted compared to the base address of the coarray.                                                                                                                                                                                                      |\n| `image_index`     | intent(in) The ID of the remote image; must be a positive number.                                                                                                                                                                                                                                                |\n| `dest`            | intent(out) Array descriptor of the local array to store the data retrieved from the remote image                                                                                                                                                                                                                |\n| `src`             | intent(in) Array descriptor for the remote image for the bounds and the size. The `base_addr` shall not be accessed.                                                                                                                                                                                             |\n| `src_vector`      | intent(in) If not NULL, it contains the vector subscript of the source array; the values are relative to the dimension triplet of the `src` argument.                                                                                                                                                            |\n| `dst_kind`        | intent(in) Kind of the destination argument                                                                                                                                                                                                                                                                      |\n| `src_kind`        | intent(in) Kind of the source argument                                                                                                                                                                                                                                                                           |\n| `may_require_tmp` | intent(in) The variable is `false` when it is known at compile time that the `dest` and `src` either cannot overlap or overlap (fully or partially) such that walking `src` and `dest` in element wise element order (honoring the stride value) will not lead to wrong results. Otherwise, the value is `true`. |\n| `stat`            | intent(out) When non-NULL give the result of the operation, i.e., zero on success and non-zero on error. When NULL and an error occurs, then an error message is printed and the program is terminated.                                                                                                          |\n\nNOTES  \nIt is permitted to have `image_index` equal the current image; the memory of the send-to and the send-from might (partially) overlap in that case. The implementation has to take care that it handles this case, e.g. using `memmove` which handles (partially) overlapping memory. If `may_require_tmp` is true, the library might additionally create a temporary variable, unless additional checks show that this is not required (e.g. because walking backward is possible or because both arrays are contiguous and `memmove` takes care of overlap issues).\n\nNote that the library has to handle numeric-type conversion and for strings, padding and different character kinds.\n\nNext: [`_gfortran_caf_sendget` — Sending data between remote images](_005fgfortran_005fcaf_005fsendget), Previous: [`_gfortran_caf_send` — Sending data from a local image to a remote image](_005fgfortran_005fcaf_005fsend), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fget.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fget.html)"
- name: 7.2.13. _gfortran_caf_sendget
  id: _005fgfortran_005fcaf_005fsendget
  summary: 'Description: Called to send a scalar, an array section or a whole array from a remote image identified by the src_image_index to a remote image identified by the dst_image_index'
  description: "Next: [`_gfortran_caf_send_by_ref` — Sending data from a local image to a remote image with enhanced referencing options](_005fgfortran_005fcaf_005fsend_005fby_005fref), Previous: [`_gfortran_caf_get` — Getting data from a remote image](_005fgfortran_005fcaf_005fget), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.13 \\_gfortran_caf_sendget — Sending data between remote images [¶](#g_t_005fgfortran_005fcaf_005fsendget-----Sending-data-between-remote-images)\n\nDescription:  \nCalled to send a scalar, an array section or a whole array from a remote image identified by the `src_image_index` to a remote image identified by the `dst_image_index`.\n\nSyntax:  \n`void _gfortran_caf_sendget (caf_token_t dst_token, size_t dst_offset, int dst_image_index, gfc_descriptor_t *dest, caf_vector_t *dst_vector, caf_token_t src_token, size_t src_offset, int src_image_index, gfc_descriptor_t *src, caf_vector_t *src_vector, int dst_kind, int src_kind, bool may_require_tmp, int *stat)`\n\nArguments:  \n|                   |                                                                                                                                                                                                                                                                                                                  |\n|-------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `dst_token`       | intent(in) An opaque pointer identifying the destination coarray.                                                                                                                                                                                                                                                |\n| `dst_offset`      | intent(in) By which amount of bytes the actual data is shifted compared to the base address of the destination coarray.                                                                                                                                                                                          |\n| `dst_image_index` | intent(in) The ID of the destination remote image; must be a positive number.                                                                                                                                                                                                                                    |\n| `dest`            | intent(in) Array descriptor for the destination remote image for the bounds and the size. The `base_addr` shall not be accessed.                                                                                                                                                                                 |\n| `dst_vector`      | intent(int) If not NULL, it contains the vector subscript of the destination array; the values are relative to the dimension triplet of the `dest` argument.                                                                                                                                                     |\n| `src_token`       | intent(in) An opaque pointer identifying the source coarray.                                                                                                                                                                                                                                                     |\n| `src_offset`      | intent(in) By which amount of bytes the actual data is shifted compared to the base address of the source coarray.                                                                                                                                                                                               |\n| `src_image_index` | intent(in) The ID of the source remote image; must be a positive number.                                                                                                                                                                                                                                         |\n| `src`             | intent(in) Array descriptor of the local array to be transferred to the remote image.                                                                                                                                                                                                                            |\n| `src_vector`      | intent(in) Array descriptor of the local array to be transferred to the remote image                                                                                                                                                                                                                             |\n| `dst_kind`        | intent(in) Kind of the destination argument                                                                                                                                                                                                                                                                      |\n| `src_kind`        | intent(in) Kind of the source argument                                                                                                                                                                                                                                                                           |\n| `may_require_tmp` | intent(in) The variable is `false` when it is known at compile time that the `dest` and `src` either cannot overlap or overlap (fully or partially) such that walking `src` and `dest` in element wise element order (honoring the stride value) will not lead to wrong results. Otherwise, the value is `true`. |\n| `stat`            | intent(out) when non-NULL give the result of the operation, i.e., zero on success and non-zero on error. When NULL and an error occurs, then an error message is printed and the program is terminated.                                                                                                          |\n\nNOTES  \nIt is permitted to have the same image index for both `src_image_index` and `dst_image_index`; the memory of the send-to and the send-from might (partially) overlap in that case. The implementation has to take care that it handles this case, e.g. using `memmove` which handles (partially) overlapping memory. If `may_require_tmp` is true, the library might additionally create a temporary variable, unless additional checks show that this is not required (e.g. because walking backward is possible or because both arrays are contiguous and `memmove` takes care of overlap issues).\n\nNote that the assignment of a scalar to an array is permitted. In addition, the library has to handle numeric-type conversion and for strings, padding and different character kinds.\n\nNext: [`_gfortran_caf_send_by_ref` — Sending data from a local image to a remote image with enhanced referencing options](_005fgfortran_005fcaf_005fsend_005fby_005fref), Previous: [`_gfortran_caf_get` — Getting data from a remote image](_005fgfortran_005fcaf_005fget), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fsendget.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fsendget.html)"
- name: 7.2.14. _gfortran_caf_send_by_ref
  id: _005fgfortran_005fcaf_005fsend_005fby_005fref
  summary: 'Description: Called to send a scalar, an array section or a whole array from a local to a remote image identified by the image_index'
  description: "Next: [`_gfortran_caf_get_by_ref` — Getting data from a remote image using enhanced references](_005fgfortran_005fcaf_005fget_005fby_005fref), Previous: [`_gfortran_caf_sendget` — Sending data between remote images](_005fgfortran_005fcaf_005fsendget), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.14 \\_gfortran_caf_send_by_ref — Sending data from a local image to a remote image with enhanced referencing options [¶](#g_t_005fgfortran_005fcaf_005fsend_005fby_005fref-----Sending-data-from-a-local-image-to-a-remote-image-with-enhanced-referencing-options)\n\nDescription:  \nCalled to send a scalar, an array section or a whole array from a local to a remote image identified by the `image_index`.\n\nSyntax:  \n`void _gfortran_caf_send_by_ref (caf_token_t token, int image_index, gfc_descriptor_t *src, caf_reference_t *refs, int dst_kind, int src_kind, bool may_require_tmp, bool dst_reallocatable, int *stat, int dst_type)`\n\nArguments:  \n|                     |                                                                                                                                                                                                                                                                                                                  |\n|---------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `token`             | intent(in) An opaque pointer identifying the coarray.                                                                                                                                                                                                                                                            |\n| `image_index`       | intent(in) The ID of the remote image; must be a positive number.                                                                                                                                                                                                                                                |\n| `src`               | intent(in) Array descriptor of the local array to be transferred to the remote image                                                                                                                                                                                                                             |\n| `refs`              | intent(in) The references on the remote array to store the data given by src. Guaranteed to have at least one entry.                                                                                                                                                                                             |\n| `dst_kind`          | intent(in) Kind of the destination argument                                                                                                                                                                                                                                                                      |\n| `src_kind`          | intent(in) Kind of the source argument                                                                                                                                                                                                                                                                           |\n| `may_require_tmp`   | intent(in) The variable is `false` when it is known at compile time that the `dest` and `src` either cannot overlap or overlap (fully or partially) such that walking `src` and `dest` in element wise element order (honoring the stride value) will not lead to wrong results. Otherwise, the value is `true`. |\n| `dst_reallocatable` | intent(in) Set when the destination is of allocatable or pointer type and the refs will allow reallocation, i.e., the ref is a full array or component ref.                                                                                                                                                      |\n| `stat`              | intent(out) When non-`NULL` give the result of the operation, i.e., zero on success and non-zero on error. When `NULL` and an error occurs, then an error message is printed and the program is terminated.                                                                                                      |\n| `dst_type`          | intent(in) Give the type of the destination. When the destination is not an array, than the precise type, e.g. of a component in a derived type, is not known, but provided here.                                                                                                                                |\n\nNOTES  \nIt is permitted to have `image_index` equal the current image; the memory of the send-to and the send-from might (partially) overlap in that case. The implementation has to take care that it handles this case, e.g. using `memmove` which handles (partially) overlapping memory. If `may_require_tmp` is true, the library might additionally create a temporary variable, unless additional checks show that this is not required (e.g. because walking backward is possible or because both arrays are contiguous and `memmove` takes care of overlap issues).\n\nNote that the assignment of a scalar to an array is permitted. In addition, the library has to handle numeric-type conversion and for strings, padding and different character kinds.\n\nBecause of the more complicated references possible some operations may be unsupported by certain libraries. The library is expected to issue a precise error message why the operation is not permitted.\n\nNext: [`_gfortran_caf_get_by_ref` — Getting data from a remote image using enhanced references](_005fgfortran_005fcaf_005fget_005fby_005fref), Previous: [`_gfortran_caf_sendget` — Sending data between remote images](_005fgfortran_005fcaf_005fsendget), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fsend_005fby_005fref.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fsend_005fby_005fref.html)"
- name: 7.2.15. _gfortran_caf_get_by_ref
  id: _005fgfortran_005fcaf_005fget_005fby_005fref
  summary: 'Description: Called to get a scalar, an array section or a whole array from a remote image identified by the image_index'
  description: "Next: [`_gfortran_caf_sendget_by_ref` — Sending data between remote images using enhanced references on both sides](_005fgfortran_005fcaf_005fsendget_005fby_005fref), Previous: [`_gfortran_caf_send_by_ref` — Sending data from a local image to a remote image with enhanced referencing options](_005fgfortran_005fcaf_005fsend_005fby_005fref), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.15 \\_gfortran_caf_get_by_ref — Getting data from a remote image using enhanced references [¶](#g_t_005fgfortran_005fcaf_005fget_005fby_005fref-----Getting-data-from-a-remote-image-using-enhanced-references)\n\nDescription:  \nCalled to get a scalar, an array section or a whole array from a remote image identified by the `image_index`.\n\nSyntax:  \n`void _gfortran_caf_get_by_ref (caf_token_t token, int image_index, caf_reference_t *refs, gfc_descriptor_t *dst, int dst_kind, int src_kind, bool may_require_tmp, bool dst_reallocatable, int *stat, int src_type)`\n\nArguments:  \n|                     |                                                                                                                                                                                                                                                                                                                  |\n|---------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `token`             | intent(in) An opaque pointer identifying the coarray.                                                                                                                                                                                                                                                            |\n| `image_index`       | intent(in) The ID of the remote image; must be a positive number.                                                                                                                                                                                                                                                |\n| `refs`              | intent(in) The references to apply to the remote structure to get the data.                                                                                                                                                                                                                                      |\n| `dst`               | intent(in) Array descriptor of the local array to store the data transferred from the remote image. May be reallocated where needed and when `DST_REALLOCATABLE` allows it.                                                                                                                                      |\n| `dst_kind`          | intent(in) Kind of the destination argument                                                                                                                                                                                                                                                                      |\n| `src_kind`          | intent(in) Kind of the source argument                                                                                                                                                                                                                                                                           |\n| `may_require_tmp`   | intent(in) The variable is `false` when it is known at compile time that the `dest` and `src` either cannot overlap or overlap (fully or partially) such that walking `src` and `dest` in element wise element order (honoring the stride value) will not lead to wrong results. Otherwise, the value is `true`. |\n| `dst_reallocatable` | intent(in) Set when `DST` is of allocatable or pointer type and its refs allow reallocation, i.e., the full array or a component is referenced.                                                                                                                                                                  |\n| `stat`              | intent(out) When non-`NULL` give the result of the operation, i.e., zero on success and non-zero on error. When `NULL` and an error occurs, then an error message is printed and the program is terminated.                                                                                                      |\n| `src_type`          | intent(in) Give the type of the source. When the source is not an array, than the precise type, e.g. of a component in a derived type, is not known, but provided here.                                                                                                                                          |\n\nNOTES  \nIt is permitted to have `image_index` equal the current image; the memory of the send-to and the send-from might (partially) overlap in that case. The implementation has to take care that it handles this case, e.g. using `memmove` which handles (partially) overlapping memory. If `may_require_tmp` is true, the library might additionally create a temporary variable, unless additional checks show that this is not required (e.g. because walking backward is possible or because both arrays are contiguous and `memmove` takes care of overlap issues).\n\nNote that the library has to handle numeric-type conversion and for strings, padding and different character kinds.\n\nBecause of the more complicated references possible some operations may be unsupported by certain libraries. The library is expected to issue a precise error message why the operation is not permitted.\n\nNext: [`_gfortran_caf_sendget_by_ref` — Sending data between remote images using enhanced references on both sides](_005fgfortran_005fcaf_005fsendget_005fby_005fref), Previous: [`_gfortran_caf_send_by_ref` — Sending data from a local image to a remote image with enhanced referencing options](_005fgfortran_005fcaf_005fsend_005fby_005fref), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fget_005fby_005fref.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fget_005fby_005fref.html)"
- name: 7.2.16. _gfortran_caf_sendget_by_ref
  id: _005fgfortran_005fcaf_005fsendget_005fby_005fref
  summary: 'Description: Called to send a scalar, an array section or a whole array from a remote image identified by the src_image_index to a remote image identified by the dst_image_index'
  description: "Next: [`_gfortran_caf_lock` — Locking a lock variable](_005fgfortran_005fcaf_005flock), Previous: [`_gfortran_caf_get_by_ref` — Getting data from a remote image using enhanced references](_005fgfortran_005fcaf_005fget_005fby_005fref), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.16 \\_gfortran_caf_sendget_by_ref — Sending data between remote images using enhanced references on both sides [¶](#g_t_005fgfortran_005fcaf_005fsendget_005fby_005fref-----Sending-data-between-remote-images-using-enhanced-references-on-both-sides)\n\nDescription:  \nCalled to send a scalar, an array section or a whole array from a remote image identified by the `src_image_index` to a remote image identified by the `dst_image_index`.\n\nSyntax:  \n`void _gfortran_caf_sendget_by_ref (caf_token_t dst_token, int dst_image_index, caf_reference_t *dst_refs, caf_token_t src_token, int src_image_index, caf_reference_t *src_refs, int dst_kind, int src_kind, bool may_require_tmp, int *dst_stat, int *src_stat, int dst_type, int src_type)`\n\nArguments:  \n|                   |                                                                                                                                                                                                                                                                                                                  |\n|-------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `dst_token`       | intent(in) An opaque pointer identifying the destination coarray.                                                                                                                                                                                                                                                |\n| `dst_image_index` | intent(in) The ID of the destination remote image; must be a positive number.                                                                                                                                                                                                                                    |\n| `dst_refs`        | intent(in) The references on the remote array to store the data given by the source. Guaranteed to have at least one entry.                                                                                                                                                                                      |\n| `src_token`       | intent(in) An opaque pointer identifying the source coarray.                                                                                                                                                                                                                                                     |\n| `src_image_index` | intent(in) The ID of the source remote image; must be a positive number.                                                                                                                                                                                                                                         |\n| `src_refs`        | intent(in) The references to apply to the remote structure to get the data.                                                                                                                                                                                                                                      |\n| `dst_kind`        | intent(in) Kind of the destination argument                                                                                                                                                                                                                                                                      |\n| `src_kind`        | intent(in) Kind of the source argument                                                                                                                                                                                                                                                                           |\n| `may_require_tmp` | intent(in) The variable is `false` when it is known at compile time that the `dest` and `src` either cannot overlap or overlap (fully or partially) such that walking `src` and `dest` in element wise element order (honoring the stride value) will not lead to wrong results. Otherwise, the value is `true`. |\n| `dst_stat`        | intent(out) when non-`NULL` give the result of the send-operation, i.e., zero on success and non-zero on error. When `NULL` and an error occurs, then an error message is printed and the program is terminated.                                                                                                 |\n| `src_stat`        | intent(out) When non-`NULL` give the result of the get-operation, i.e., zero on success and non-zero on error. When `NULL` and an error occurs, then an error message is printed and the program is terminated.                                                                                                  |\n| `dst_type`        | intent(in) Give the type of the destination. When the destination is not an array, than the precise type, e.g. of a component in a derived type, is not known, but provided here.                                                                                                                                |\n| `src_type`        | intent(in) Give the type of the source. When the source is not an array, than the precise type, e.g. of a component in a derived type, is not known, but provided here.                                                                                                                                          |\n\nNOTES  \nIt is permitted to have the same image index for both `src_image_index` and `dst_image_index`; the memory of the send-to and the send-from might (partially) overlap in that case. The implementation has to take care that it handles this case, e.g. using `memmove` which handles (partially) overlapping memory. If `may_require_tmp` is true, the library might additionally create a temporary variable, unless additional checks show that this is not required (e.g. because walking backward is possible or because both arrays are contiguous and `memmove` takes care of overlap issues).\n\nNote that the assignment of a scalar to an array is permitted. In addition, the library has to handle numeric-type conversion and for strings, padding and different character kinds.\n\nBecause of the more complicated references possible some operations may be unsupported by certain libraries. The library is expected to issue a precise error message why the operation is not permitted.\n\nNext: [`_gfortran_caf_lock` — Locking a lock variable](_005fgfortran_005fcaf_005flock), Previous: [`_gfortran_caf_get_by_ref` — Getting data from a remote image using enhanced references](_005fgfortran_005fcaf_005fget_005fby_005fref), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fsendget_005fby_005fref.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fsendget_005fby_005fref.html)"
- name: 7.2.17. _gfortran_caf_lock
  id: _005fgfortran_005fcaf_005flock
  summary: 'Description: Acquire a lock on the given image on a scalar locking variable or for the given array element for an array-valued variable'
  description: "Next: [`_gfortran_caf_lock` — Unlocking a lock variable](_005fgfortran_005fcaf_005funlock), Previous: [`_gfortran_caf_sendget_by_ref` — Sending data between remote images using enhanced references on both sides](_005fgfortran_005fcaf_005fsendget_005fby_005fref), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.17 \\_gfortran_caf_lock — Locking a lock variable [¶](#g_t_005fgfortran_005fcaf_005flock-----Locking-a-lock-variable)\n\nDescription:  \nAcquire a lock on the given image on a scalar locking variable or for the given array element for an array-valued variable. If the `acquired_lock` is `NULL`, the function returns after having obtained the lock. If it is non-`NULL`, then `acquired_lock` is assigned the value true (one) when the lock could be obtained and false (zero) otherwise. Locking a lock variable which has already been locked by the same image is an error.\n\nSyntax:  \n`void _gfortran_caf_lock (caf_token_t token, size_t index, int image_index, int *acquired_lock, int *stat, char *errmsg, size_t errmsg_len)`\n\nArguments:  \n|                 |                                                                                      |\n|-----------------|--------------------------------------------------------------------------------------|\n| `token`         | intent(in) An opaque pointer identifying the coarray.                                |\n| `index`         | intent(in) Array index; first array index is 0. For scalars, it is always 0.         |\n| `image_index`   | intent(in) The ID of the remote image; must be a positive number.                    |\n| `acquired_lock` | intent(out) If not NULL, it returns whether lock could be obtained.                  |\n| `stat`          | intent(out) Stores the STAT=; may be NULL.                                           |\n| `errmsg`        | intent(out) When an error occurs, this will be set to an error message; may be NULL. |\n| `errmsg_len`    | intent(in) the buffer size of errmsg                                                 |\n\nNOTES  \nThis function is also called for critical blocks; for those, the array index is always zero and the image index is one. Libraries are permitted to use other images for critical-block locking variables.\n\nNext: [`_gfortran_caf_lock` — Unlocking a lock variable](_005fgfortran_005fcaf_005funlock), Previous: [`_gfortran_caf_sendget_by_ref` — Sending data between remote images using enhanced references on both sides](_005fgfortran_005fcaf_005fsendget_005fby_005fref), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005flock.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005flock.html)"
- name: 7.2.18. _gfortran_caf_lock
  id: _005fgfortran_005fcaf_005funlock
  summary: 'Description: Release a lock on the given image on a scalar locking variable or for the given array element for an array-valued variable'
  description: "Next: [`_gfortran_caf_event_post` — Post an event](_005fgfortran_005fcaf_005fevent_005fpost), Previous: [`_gfortran_caf_lock` — Locking a lock variable](_005fgfortran_005fcaf_005flock), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.18 \\_gfortran_caf_lock — Unlocking a lock variable [¶](#g_t_005fgfortran_005fcaf_005flock-----Unlocking-a-lock-variable)\n\nDescription:  \nRelease a lock on the given image on a scalar locking variable or for the given array element for an array-valued variable. Unlocking a lock variable which is unlocked or has been locked by a different image is an error.\n\nSyntax:  \n`void _gfortran_caf_unlock (caf_token_t token, size_t index, int image_index, int *stat, char *errmsg, size_t errmsg_len)`\n\nArguments:  \n|               |                                                                                      |\n|---------------|--------------------------------------------------------------------------------------|\n| `token`       | intent(in) An opaque pointer identifying the coarray.                                |\n| `index`       | intent(in) Array index; first array index is 0. For scalars, it is always 0.         |\n| `image_index` | intent(in) The ID of the remote image; must be a positive number.                    |\n| `stat`        | intent(out) For allocatable coarrays, stores the STAT=; may be NULL.                 |\n| `errmsg`      | intent(out) When an error occurs, this will be set to an error message; may be NULL. |\n| `errmsg_len`  | intent(in) the buffer size of errmsg                                                 |\n\nNOTES  \nThis function is also called for critical block; for those, the array index is always zero and the image index is one. Libraries are permitted to use other images for critical-block locking variables.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005funlock.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005funlock.html)"
- name: 7.2.19. _gfortran_caf_event_post
  id: _005fgfortran_005fcaf_005fevent_005fpost
  summary: 'Description: Increment the event count of the specified event variable'
  description: "Next: [`_gfortran_caf_event_wait` — Wait that an event occurred](_005fgfortran_005fcaf_005fevent_005fwait), Previous: [`_gfortran_caf_lock` — Unlocking a lock variable](_005fgfortran_005fcaf_005funlock), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.19 \\_gfortran_caf_event_post — Post an event [¶](#g_t_005fgfortran_005fcaf_005fevent_005fpost-----Post-an-event)\n\nDescription:  \nIncrement the event count of the specified event variable.\n\nSyntax:  \n`void _gfortran_caf_event_post (caf_token_t token, size_t index, int image_index, int *stat, char *errmsg, size_t errmsg_len)`\n\nArguments:  \n|               |                                                                                                                                 |\n|---------------|---------------------------------------------------------------------------------------------------------------------------------|\n| `token`       | intent(in) An opaque pointer identifying the coarray.                                                                           |\n| `index`       | intent(in) Array index; first array index is 0. For scalars, it is always 0.                                                    |\n| `image_index` | intent(in) The ID of the remote image; must be a positive number; zero indicates the current image, when accessed noncoindexed. |\n| `stat`        | intent(out) Stores the STAT=; may be NULL.                                                                                      |\n| `errmsg`      | intent(out) When an error occurs, this will be set to an error message; may be NULL.                                            |\n| `errmsg_len`  | intent(in) the buffer size of errmsg                                                                                            |\n\nNOTES  \nThis acts like an atomic add of one to the remote image’s event variable. The statement is an image-control statement but does not imply sync memory. Still, all preceeding push communications of this image to the specified remote image have to be completed before `event_wait` on the remote image returns.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fevent_005fpost.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fevent_005fpost.html)"
- name: 7.2.20. _gfortran_caf_event_wait
  id: _005fgfortran_005fcaf_005fevent_005fwait
  summary: 'Description: Wait until the event count has reached at least the specified until_count; if so, atomically decrement the event variable by this amount and return'
  description: "Next: [`_gfortran_caf_event_query` — Query event count](_005fgfortran_005fcaf_005fevent_005fquery), Previous: [`_gfortran_caf_event_post` — Post an event](_005fgfortran_005fcaf_005fevent_005fpost), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.20 \\_gfortran_caf_event_wait — Wait that an event occurred [¶](#g_t_005fgfortran_005fcaf_005fevent_005fwait-----Wait-that-an-event-occurred)\n\nDescription:  \nWait until the event count has reached at least the specified `until_count`; if so, atomically decrement the event variable by this amount and return.\n\nSyntax:  \n`void _gfortran_caf_event_wait (caf_token_t token, size_t index, int until_count, int *stat, char *errmsg, size_t errmsg_len)`\n\nArguments:  \n|               |                                                                                         |\n|---------------|-----------------------------------------------------------------------------------------|\n| `token`       | intent(in) An opaque pointer identifying the coarray.                                   |\n| `index`       | intent(in) Array index; first array index is 0. For scalars, it is always 0.            |\n| `until_count` | intent(in) The number of events which have to be available before the function returns. |\n| `stat`        | intent(out) Stores the STAT=; may be NULL.                                              |\n| `errmsg`      | intent(out) When an error occurs, this will be set to an error message; may be NULL.    |\n| `errmsg_len`  | intent(in) the buffer size of errmsg                                                    |\n\nNOTES  \nThis function only operates on a local coarray. It acts like a loop checking atomically the value of the event variable, breaking if the value is greater or equal the requested number of counts. Before the function returns, the event variable has to be decremented by the requested `until_count` value. A possible implementation would be a busy loop for a certain number of spins (possibly depending on the number of threads relative to the number of available cores) followed by another waiting strategy such as a sleeping wait (possibly with an increasing number of sleep time) or, if possible, a futex wait.\n\nThe statement is an image-control statement but does not imply sync memory. Still, all preceeding push communications of this image to the specified remote image have to be completed before `event_wait` on the remote image returns.\n\nNext: [`_gfortran_caf_event_query` — Query event count](_005fgfortran_005fcaf_005fevent_005fquery), Previous: [`_gfortran_caf_event_post` — Post an event](_005fgfortran_005fcaf_005fevent_005fpost), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fevent_005fwait.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fevent_005fwait.html)"
- name: 7.2.21. _gfortran_caf_event_query
  id: _005fgfortran_005fcaf_005fevent_005fquery
  summary: 'Description: Return the event count of the specified event variable'
  description: "Next: [`_gfortran_caf_sync_all` — All-image barrier](_005fgfortran_005fcaf_005fsync_005fall), Previous: [`_gfortran_caf_event_wait` — Wait that an event occurred](_005fgfortran_005fcaf_005fevent_005fwait), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.21 \\_gfortran_caf_event_query — Query event count [¶](#g_t_005fgfortran_005fcaf_005fevent_005fquery-----Query-event-count)\n\nDescription:  \nReturn the event count of the specified event variable.\n\nSyntax:  \n`void _gfortran_caf_event_query (caf_token_t token, size_t index, int image_index, int *count, int *stat)`\n\nArguments:  \n|               |                                                                                                                                |\n|---------------|--------------------------------------------------------------------------------------------------------------------------------|\n| `token`       | intent(in) An opaque pointer identifying the coarray.                                                                          |\n| `index`       | intent(in) Array index; first array index is 0. For scalars, it is always 0.                                                   |\n| `image_index` | intent(in) The ID of the remote image; must be a positive number; zero indicates the current image when accessed noncoindexed. |\n| `count`       | intent(out) The number of events currently posted to the event variable.                                                       |\n| `stat`        | intent(out) Stores the STAT=; may be NULL.                                                                                     |\n\nNOTES  \nThe typical use is to check the local event variable to only call `event_wait` when the data is available. However, a coindexed variable is permitted; there is no ordering or synchronization implied. It acts like an atomic fetch of the value of the event variable.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fevent_005fquery.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fevent_005fquery.html)"
- name: 7.2.22. _gfortran_caf_sync_all
  id: _005fgfortran_005fcaf_005fsync_005fall
  summary: 'Description: Synchronization of all images in the current team; the program only continues on a given image after this function has been called on all images of the current team'
  description: "Next: [`_gfortran_caf_sync_images` — Barrier for selected images](_005fgfortran_005fcaf_005fsync_005fimages), Previous: [`_gfortran_caf_event_query` — Query event count](_005fgfortran_005fcaf_005fevent_005fquery), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.22 \\_gfortran_caf_sync_all — All-image barrier [¶](#g_t_005fgfortran_005fcaf_005fsync_005fall-----All-image-barrier)\n\nDescription:  \nSynchronization of all images in the current team; the program only continues on a given image after this function has been called on all images of the current team. Additionally, it ensures that all pending data transfers of previous segment have completed.\n\nSyntax:  \n`void _gfortran_caf_sync_all (int *stat, char *errmsg, size_t errmsg_len)`\n\nArguments:  \n|              |                                                                                      |\n|--------------|--------------------------------------------------------------------------------------|\n| `stat`       | intent(out) Stores the status STAT= and may be NULL.                                 |\n| `errmsg`     | intent(out) When an error occurs, this will be set to an error message; may be NULL. |\n| `errmsg_len` | intent(in) the buffer size of errmsg                                                 |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fsync_005fall.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fsync_005fall.html)"
- name: 7.2.23. _gfortran_caf_sync_images
  id: _005fgfortran_005fcaf_005fsync_005fimages
  summary: 'Description: Synchronization between the specified images; the program only continues on a given image after this function has been called on all images specified for that image'
  description: "Next: [`_gfortran_caf_sync_memory` — Wait for completion of segment-memory operations](_005fgfortran_005fcaf_005fsync_005fmemory), Previous: [`_gfortran_caf_sync_all` — All-image barrier](_005fgfortran_005fcaf_005fsync_005fall), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.23 \\_gfortran_caf_sync_images — Barrier for selected images [¶](#g_t_005fgfortran_005fcaf_005fsync_005fimages-----Barrier-for-selected-images)\n\nDescription:  \nSynchronization between the specified images; the program only continues on a given image after this function has been called on all images specified for that image. Note that one image can wait for all other images in the current team (e.g. via `sync images(*)`) while those only wait for that specific image. Additionally, `sync images` ensures that all pending data transfers of previous segments have completed.\n\nSyntax:  \n`void _gfortran_caf_sync_images (int count, int images[], int *stat, char *errmsg, size_t errmsg_len)`\n\nArguments:  \n|              |                                                                                                                                                               |\n|--------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `count`      | intent(in) The number of images which are provided in the next argument. For a zero-sized array, the value is zero. For `sync images (*)`, the value is *-1*. |\n| `images`     | intent(in) An array with the images provided by the user. If `count` is zero, a NULL pointer is passed.                                                       |\n| `stat`       | intent(out) Stores the status STAT= and may be NULL.                                                                                                          |\n| `errmsg`     | intent(out) When an error occurs, this will be set to an error message; may be NULL.                                                                          |\n| `errmsg_len` | intent(in) the buffer size of errmsg                                                                                                                          |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fsync_005fimages.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fsync_005fimages.html)"
- name: 7.2.24. _gfortran_caf_sync_memory
  id: _005fgfortran_005fcaf_005fsync_005fmemory
  summary: 'Description: Acts as optimization barrier between different segments'
  description: "Next: [`_gfortran_caf_error_stop` — Error termination with exit code](_005fgfortran_005fcaf_005ferror_005fstop), Previous: [`_gfortran_caf_sync_images` — Barrier for selected images](_005fgfortran_005fcaf_005fsync_005fimages), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.24 \\_gfortran_caf_sync_memory — Wait for completion of segment-memory operations [¶](#g_t_005fgfortran_005fcaf_005fsync_005fmemory-----Wait-for-completion-of-segment-memory-operations)\n\nDescription:  \nActs as optimization barrier between different segments. It also ensures that all pending memory operations of this image have been completed.\n\nSyntax:  \n`void _gfortran_caf_sync_memory (int *stat, char *errmsg, size_t errmsg_len)`\n\nArguments:  \n|              |                                                                                      |\n|--------------|--------------------------------------------------------------------------------------|\n| `stat`       | intent(out) Stores the status STAT= and may be NULL.                                 |\n| `errmsg`     | intent(out) When an error occurs, this will be set to an error message; may be NULL. |\n| `errmsg_len` | intent(in) the buffer size of errmsg                                                 |\n\nNOTE A simple implementation could be  \n`__asm__ __volatile__ (\"\":::\"memory\")` to prevent code movements.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fsync_005fmemory.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fsync_005fmemory.html)"
- name: 7.2.25. _gfortran_caf_error_stop
  id: _005fgfortran_005fcaf_005ferror_005fstop
  summary: 'Description: Invoked for an ERROR STOP statement which has an integer argument'
  description: "Next: [`_gfortran_caf_error_stop_str` — Error termination with string](_005fgfortran_005fcaf_005ferror_005fstop_005fstr), Previous: [`_gfortran_caf_sync_memory` — Wait for completion of segment-memory operations](_005fgfortran_005fcaf_005fsync_005fmemory), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.25 \\_gfortran_caf_error_stop — Error termination with exit code [¶](#g_t_005fgfortran_005fcaf_005ferror_005fstop-----Error-termination-with-exit-code)\n\nDescription:  \nInvoked for an `ERROR STOP` statement which has an integer argument. The function should terminate the program with the specified exit code.\n\nSyntax:  \n`void _gfortran_caf_error_stop (int error)`\n\nArguments:  \n|         |                                        |\n|---------|----------------------------------------|\n| `error` | intent(in) The exit status to be used. |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005ferror_005fstop.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005ferror_005fstop.html)"
- name: 7.2.26. _gfortran_caf_error_stop_str
  id: _005fgfortran_005fcaf_005ferror_005fstop_005fstr
  summary: 'Description: Invoked for an ERROR STOP statement which has a string as argument'
  description: "Next: [`_gfortran_caf_fail_image` — Mark the image failed and end its execution](_005fgfortran_005fcaf_005ffail_005fimage), Previous: [`_gfortran_caf_error_stop` — Error termination with exit code](_005fgfortran_005fcaf_005ferror_005fstop), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.26 \\_gfortran_caf_error_stop_str — Error termination with string [¶](#g_t_005fgfortran_005fcaf_005ferror_005fstop_005fstr-----Error-termination-with-string)\n\nDescription:  \nInvoked for an `ERROR STOP` statement which has a string as argument. The function should terminate the program with a nonzero-exit code.\n\nSyntax:  \n`void _gfortran_caf_error_stop (const char *string, size_t len)`\n\nArguments:  \n|          |                                                    |\n|----------|----------------------------------------------------|\n| `string` | intent(in) the error message (not zero terminated) |\n| `len`    | intent(in) the length of the string                |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005ferror_005fstop_005fstr.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005ferror_005fstop_005fstr.html)"
- name: 7.2.27. _gfortran_caf_fail_image
  id: _005fgfortran_005fcaf_005ffail_005fimage
  summary: 'Description: Invoked for an FAIL IMAGE statement'
  description: "Next: [`_gfortran_caf_atomic_define` — Atomic variable assignment](_005fgfortran_005fcaf_005fatomic_005fdefine), Previous: [`_gfortran_caf_error_stop_str` — Error termination with string](_005fgfortran_005fcaf_005ferror_005fstop_005fstr), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.27 \\_gfortran_caf_fail_image — Mark the image failed and end its execution [¶](#g_t_005fgfortran_005fcaf_005ffail_005fimage-----Mark-the-image-failed-and-end-its-execution)\n\nDescription:  \nInvoked for an `FAIL IMAGE` statement. The function should terminate the current image.\n\nSyntax:  \n`void _gfortran_caf_fail_image ()`\n\nNOTES  \nThis function follows TS18508.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005ffail_005fimage.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005ffail_005fimage.html)"
- name: 7.2.28. _gfortran_caf_atomic_define
  id: _005fgfortran_005fcaf_005fatomic_005fdefine
  summary: 'Description: Assign atomically a value to an integer or logical variable'
  description: "Next: [`_gfortran_caf_atomic_ref` — Atomic variable reference](_005fgfortran_005fcaf_005fatomic_005fref), Previous: [`_gfortran_caf_fail_image` — Mark the image failed and end its execution](_005fgfortran_005fcaf_005ffail_005fimage), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.28 \\_gfortran_caf_atomic_define — Atomic variable assignment [¶](#g_t_005fgfortran_005fcaf_005fatomic_005fdefine-----Atomic-variable-assignment)\n\nDescription:  \nAssign atomically a value to an integer or logical variable.\n\nSyntax:  \n`void _gfortran_caf_atomic_define (caf_token_t token, size_t offset, int image_index, void *value, int *stat, int type, int kind)`\n\nArguments:  \n|               |                                                                                                                            |\n|---------------|----------------------------------------------------------------------------------------------------------------------------|\n| `token`       | intent(in) An opaque pointer identifying the coarray.                                                                      |\n| `offset`      | intent(in) By which amount of bytes the actual data is shifted compared to the base address of the coarray.                |\n| `image_index` | intent(in) The ID of the remote image; must be a positive number; zero indicates the current image when used noncoindexed. |\n| `value`       | intent(in) the value to be assigned, passed by reference                                                                   |\n| `stat`        | intent(out) Stores the status STAT= and may be NULL.                                                                       |\n| `type`        | intent(in) The data type, i.e. `BT_INTEGER` (1) or `BT_LOGICAL` (2).                                                       |\n| `kind`        | intent(in) The kind value (only 4; always `int`)                                                                           |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fatomic_005fdefine.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fatomic_005fdefine.html)"
- name: 7.2.29. _gfortran_caf_atomic_ref
  id: _005fgfortran_005fcaf_005fatomic_005fref
  summary: 'Description: Reference atomically a value of a kind-4 integer or logical variable'
  description: "Next: [`_gfortran_caf_atomic_cas` — Atomic compare and swap](_005fgfortran_005fcaf_005fatomic_005fcas), Previous: [`_gfortran_caf_atomic_define` — Atomic variable assignment](_005fgfortran_005fcaf_005fatomic_005fdefine), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.29 \\_gfortran_caf_atomic_ref — Atomic variable reference [¶](#g_t_005fgfortran_005fcaf_005fatomic_005fref-----Atomic-variable-reference)\n\nDescription:  \nReference atomically a value of a kind-4 integer or logical variable.\n\nSyntax:  \n`void _gfortran_caf_atomic_ref (caf_token_t token, size_t offset, int image_index, void *value, int *stat, int type, int kind)`\n\nArguments:  \n|               |                                                                                                                            |\n|---------------|----------------------------------------------------------------------------------------------------------------------------|\n| `token`       | intent(in) An opaque pointer identifying the coarray.                                                                      |\n| `offset`      | intent(in) By which amount of bytes the actual data is shifted compared to the base address of the coarray.                |\n| `image_index` | intent(in) The ID of the remote image; must be a positive number; zero indicates the current image when used noncoindexed. |\n| `value`       | intent(out) The variable assigned the atomically referenced variable.                                                      |\n| `stat`        | intent(out) Stores the status STAT= and may be NULL.                                                                       |\n| `type`        | the data type, i.e. `BT_INTEGER` (1) or `BT_LOGICAL` (2).                                                                  |\n| `kind`        | The kind value (only 4; always `int`)                                                                                      |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fatomic_005fref.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fatomic_005fref.html)"
- name: 7.2.30. _gfortran_caf_atomic_cas
  id: _005fgfortran_005fcaf_005fatomic_005fcas
  summary: 'Description: Atomic compare and swap of a kind-4 integer or logical variable'
  description: "Next: [`_gfortran_caf_atomic_op` — Atomic operation](_005fgfortran_005fcaf_005fatomic_005fop), Previous: [`_gfortran_caf_atomic_ref` — Atomic variable reference](_005fgfortran_005fcaf_005fatomic_005fref), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.30 \\_gfortran_caf_atomic_cas — Atomic compare and swap [¶](#g_t_005fgfortran_005fcaf_005fatomic_005fcas-----Atomic-compare-and-swap)\n\nDescription:  \nAtomic compare and swap of a kind-4 integer or logical variable. Assigns atomically the specified value to the atomic variable, if the latter has the value specified by the passed condition value.\n\nSyntax:  \n`void _gfortran_caf_atomic_cas (caf_token_t token, size_t offset, int image_index, void *old, void *compare, void *new_val, int *stat, int type, int kind)`\n\nArguments:  \n|               |                                                                                                                                          |\n|---------------|------------------------------------------------------------------------------------------------------------------------------------------|\n| `token`       | intent(in) An opaque pointer identifying the coarray.                                                                                    |\n| `offset`      | intent(in) By which amount of bytes the actual data is shifted compared to the base address of the coarray.                              |\n| `image_index` | intent(in) The ID of the remote image; must be a positive number; zero indicates the current image when used noncoindexed.               |\n| `old`         | intent(out) The value which the atomic variable had just before the cas operation.                                                       |\n| `compare`     | intent(in) The value used for comparision.                                                                                               |\n| `new_val`     | intent(in) The new value for the atomic variable, assigned to the atomic variable, if `compare` equals the value of the atomic variable. |\n| `stat`        | intent(out) Stores the status STAT= and may be NULL.                                                                                     |\n| `type`        | intent(in) the data type, i.e. `BT_INTEGER` (1) or `BT_LOGICAL` (2).                                                                     |\n| `kind`        | intent(in) The kind value (only 4; always `int`)                                                                                         |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fatomic_005fcas.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fatomic_005fcas.html)"
- name: 7.2.31. _gfortran_caf_atomic_op
  id: _005fgfortran_005fcaf_005fatomic_005fop
  summary: 'Description: Apply an operation atomically to an atomic integer or logical variable'
  description: "Next: [`_gfortran_caf_co_broadcast` — Sending data to all images](_005fgfortran_005fcaf_005fco_005fbroadcast), Previous: [`_gfortran_caf_atomic_cas` — Atomic compare and swap](_005fgfortran_005fcaf_005fatomic_005fcas), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.31 \\_gfortran_caf_atomic_op — Atomic operation [¶](#g_t_005fgfortran_005fcaf_005fatomic_005fop-----Atomic-operation)\n\nDescription:  \nApply an operation atomically to an atomic integer or logical variable. After the operation, `old` contains the value just before the operation, which, respectively, adds (GFC_CAF_ATOMIC_ADD) atomically the `value` to the atomic integer variable or does a bitwise AND, OR or exclusive OR between the atomic variable and `value`; the result is then stored in the atomic variable.\n\nSyntax:  \n`void _gfortran_caf_atomic_op (int op, caf_token_t token, size_t offset, int image_index, void *value, void *old, int *stat, int type, int kind)`\n\nArguments:  \n|               |                                                                                                                                                                  |\n|---------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `op`          | intent(in) the operation to be performed; possible values `GFC_CAF_ATOMIC_ADD` (1), `GFC_CAF_ATOMIC_AND` (2), `GFC_CAF_ATOMIC_OR` (3), `GFC_CAF_ATOMIC_XOR` (4). |\n| `token`       | intent(in) An opaque pointer identifying the coarray.                                                                                                            |\n| `offset`      | intent(in) By which amount of bytes the actual data is shifted compared to the base address of the coarray.                                                      |\n| `image_index` | intent(in) The ID of the remote image; must be a positive number; zero indicates the current image when used noncoindexed.                                       |\n| `old`         | intent(out) The value which the atomic variable had just before the atomic operation.                                                                            |\n| `val`         | intent(in) The new value for the atomic variable, assigned to the atomic variable, if `compare` equals the value of the atomic variable.                         |\n| `stat`        | intent(out) Stores the status STAT= and may be NULL.                                                                                                             |\n| `type`        | intent(in) the data type, i.e. `BT_INTEGER` (1) or `BT_LOGICAL` (2)                                                                                              |\n| `kind`        | intent(in) the kind value (only 4; always `int`)                                                                                                                 |\n\nNext: [`_gfortran_caf_co_broadcast` — Sending data to all images](_005fgfortran_005fcaf_005fco_005fbroadcast), Previous: [`_gfortran_caf_atomic_cas` — Atomic compare and swap](_005fgfortran_005fcaf_005fatomic_005fcas), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fatomic_005fop.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fatomic_005fop.html)"
- name: 7.2.32. _gfortran_caf_co_broadcast
  id: _005fgfortran_005fcaf_005fco_005fbroadcast
  summary: 'Description: Distribute a value from a given image to all other images in the team'
  description: "Next: [`_gfortran_caf_co_max` — Collective maximum reduction](_005fgfortran_005fcaf_005fco_005fmax), Previous: [`_gfortran_caf_atomic_op` — Atomic operation](_005fgfortran_005fcaf_005fatomic_005fop), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.32 \\_gfortran_caf_co_broadcast — Sending data to all images [¶](#g_t_005fgfortran_005fcaf_005fco_005fbroadcast-----Sending-data-to-all-images)\n\nDescription:  \nDistribute a value from a given image to all other images in the team. Has to be called collectively.\n\nSyntax:  \n`void _gfortran_caf_co_broadcast (gfc_descriptor_t *a, int source_image, int *stat, char *errmsg, size_t errmsg_len)`\n\nArguments:  \n|                |                                                                                                                         |\n|----------------|-------------------------------------------------------------------------------------------------------------------------|\n| `a`            | intent(inout) An array descriptor with the data to be broadcasted (on `source_image`) or to be received (other images). |\n| `source_image` | intent(in) The ID of the image from which the data should be broadcasted.                                               |\n| `stat`         | intent(out) Stores the status STAT= and may be NULL.                                                                    |\n| `errmsg`       | intent(out) When an error occurs, this will be set to an error message; may be NULL.                                    |\n| `errmsg_len`   | intent(in) the buffer size of errmsg.                                                                                   |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fco_005fbroadcast.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fco_005fbroadcast.html)"
- name: 7.2.33. _gfortran_caf_co_max
  id: _005fgfortran_005fcaf_005fco_005fmax
  summary: 'Description: Calculates for each array element of the variable a the maximum value for that element in the current team; if result_image has the value 0, the result shall be stored on all images, otherwise, only on the specified image'
  description: "Next: [`_gfortran_caf_co_min` — Collective minimum reduction](_005fgfortran_005fcaf_005fco_005fmin), Previous: [`_gfortran_caf_co_broadcast` — Sending data to all images](_005fgfortran_005fcaf_005fco_005fbroadcast), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.33 \\_gfortran_caf_co_max — Collective maximum reduction [¶](#g_t_005fgfortran_005fcaf_005fco_005fmax-----Collective-maximum-reduction)\n\nDescription:  \nCalculates for each array element of the variable `a` the maximum value for that element in the current team; if `result_image` has the value 0, the result shall be stored on all images, otherwise, only on the specified image. This function operates on numeric values and character strings.\n\nSyntax:  \n`void _gfortran_caf_co_max (gfc_descriptor_t *a, int result_image, int *stat, char *errmsg, int a_len, size_t errmsg_len)`\n\nArguments:  \n|                |                                                                                                                                    |\n|----------------|------------------------------------------------------------------------------------------------------------------------------------|\n| `a`            | intent(inout) An array descriptor for the data to be processed. On the destination image(s) the result overwrites the old content. |\n| `result_image` | intent(in) The ID of the image to which the reduced value should be copied to; if zero, it has to be copied to all images.         |\n| `stat`         | intent(out) Stores the status STAT= and may be NULL.                                                                               |\n| `errmsg`       | intent(out) When an error occurs, this will be set to an error message; may be NULL.                                               |\n| `a_len`        | intent(in) the string length of argument `a`                                                                                       |\n| `errmsg_len`   | intent(in) the buffer size of errmsg                                                                                               |\n\nNOTES  \nIf `result_image` is nonzero, the data in the array descriptor `a` on all images except of the specified one become undefined; hence, the library may make use of this.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fco_005fmax.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fco_005fmax.html)"
- name: 7.2.34. _gfortran_caf_co_min
  id: _005fgfortran_005fcaf_005fco_005fmin
  summary: 'Description: Calculates for each array element of the variable a the minimum value for that element in the current team; if result_image has the value 0, the result shall be stored on all images, otherwise, only on the specified image'
  description: "Next: [`_gfortran_caf_co_sum` — Collective summing reduction](_005fgfortran_005fcaf_005fco_005fsum), Previous: [`_gfortran_caf_co_max` — Collective maximum reduction](_005fgfortran_005fcaf_005fco_005fmax), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.34 \\_gfortran_caf_co_min — Collective minimum reduction [¶](#g_t_005fgfortran_005fcaf_005fco_005fmin-----Collective-minimum-reduction)\n\nDescription:  \nCalculates for each array element of the variable `a` the minimum value for that element in the current team; if `result_image` has the value 0, the result shall be stored on all images, otherwise, only on the specified image. This function operates on numeric values and character strings.\n\nSyntax:  \n`void _gfortran_caf_co_min (gfc_descriptor_t *a, int result_image, int *stat, char *errmsg, int a_len, size_t errmsg_len)`\n\nArguments:  \n|                |                                                                                                                                    |\n|----------------|------------------------------------------------------------------------------------------------------------------------------------|\n| `a`            | intent(inout) An array descriptor for the data to be processed. On the destination image(s) the result overwrites the old content. |\n| `result_image` | intent(in) The ID of the image to which the reduced value should be copied to; if zero, it has to be copied to all images.         |\n| `stat`         | intent(out) Stores the status STAT= and may be NULL.                                                                               |\n| `errmsg`       | intent(out) When an error occurs, this will be set to an error message; may be NULL.                                               |\n| `a_len`        | intent(in) the string length of argument `a`                                                                                       |\n| `errmsg_len`   | intent(in) the buffer size of errmsg                                                                                               |\n\nNOTES  \nIf `result_image` is nonzero, the data in the array descriptor `a` on all images except of the specified one become undefined; hence, the library may make use of this.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fco_005fmin.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fco_005fmin.html)"
- name: 7.2.35. _gfortran_caf_co_sum
  id: _005fgfortran_005fcaf_005fco_005fsum
  summary: 'Description: Calculates for each array element of the variable a the sum of all values for that element in the current team; if result_image has the value 0, the result shall be stored on all images, otherwise, only on the specified image'
  description: "Next: [`_gfortran_caf_co_reduce` — Generic collective reduction](_005fgfortran_005fcaf_005fco_005freduce), Previous: [`_gfortran_caf_co_min` — Collective minimum reduction](_005fgfortran_005fcaf_005fco_005fmin), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.35 \\_gfortran_caf_co_sum — Collective summing reduction [¶](#g_t_005fgfortran_005fcaf_005fco_005fsum-----Collective-summing-reduction)\n\nDescription:  \nCalculates for each array element of the variable `a` the sum of all values for that element in the current team; if `result_image` has the value 0, the result shall be stored on all images, otherwise, only on the specified image. This function operates on numeric values only.\n\nSyntax:  \n`void _gfortran_caf_co_sum (gfc_descriptor_t *a, int result_image, int *stat, char *errmsg, size_t errmsg_len)`\n\nArguments:  \n|                |                                                                                                                                     |\n|----------------|-------------------------------------------------------------------------------------------------------------------------------------|\n| `a`            | intent(inout) An array descriptor with the data to be processed. On the destination image(s) the result overwrites the old content. |\n| `result_image` | intent(in) The ID of the image to which the reduced value should be copied to; if zero, it has to be copied to all images.          |\n| `stat`         | intent(out) Stores the status STAT= and may be NULL.                                                                                |\n| `errmsg`       | intent(out) When an error occurs, this will be set to an error message; may be NULL.                                                |\n| `errmsg_len`   | intent(in) the buffer size of errmsg                                                                                                |\n\nNOTES  \nIf `result_image` is nonzero, the data in the array descriptor `a` on all images except of the specified one become undefined; hence, the library may make use of this.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fco_005fsum.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fco_005fsum.html)"
- name: 7.2.36. _gfortran_caf_co_reduce
  id: _005fgfortran_005fcaf_005fco_005freduce
  summary: 'Description: Calculates for each array element of the variable a the reduction value for that element in the current team; if result_image has the value 0, the result shall be stored on all images, otherwise, only on the specified image'
  description: "Previous: [`_gfortran_caf_co_sum` — Collective summing reduction](_005fgfortran_005fcaf_005fco_005fsum), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 7.2.36 \\_gfortran_caf_co_reduce — Generic collective reduction [¶](#g_t_005fgfortran_005fcaf_005fco_005freduce-----Generic-collective-reduction)\n\nDescription:  \nCalculates for each array element of the variable `a` the reduction value for that element in the current team; if `result_image` has the value 0, the result shall be stored on all images, otherwise, only on the specified image. The `opr` is a pure function doing a mathematically commutative and associative operation.\n\nThe `opr_flags` denote the following; the values are bitwise ored. `GFC_CAF_BYREF` (1) if the result should be returned by reference; `GFC_CAF_HIDDENLEN` (2) whether the result and argument string lengths shall be specified as hidden arguments; `GFC_CAF_ARG_VALUE` (4) whether the arguments shall be passed by value, `GFC_CAF_ARG_DESC` (8) whether the arguments shall be passed by descriptor.\n\nSyntax:  \n`void _gfortran_caf_co_reduce (gfc_descriptor_t *a, void * (*opr) (void *, void *), int opr_flags, int result_image, int *stat, char *errmsg, int a_len, size_t errmsg_len)`\n\nArguments:  \n|                |                                                                                                                                     |\n|----------------|-------------------------------------------------------------------------------------------------------------------------------------|\n| `a`            | intent(inout) An array descriptor with the data to be processed. On the destination image(s) the result overwrites the old content. |\n| `opr`          | intent(in) Function pointer to the reduction function                                                                               |\n| `opr_flags`    | intent(in) Flags regarding the reduction function                                                                                   |\n| `result_image` | intent(in) The ID of the image to which the reduced value should be copied to; if zero, it has to be copied to all images.          |\n| `stat`         | intent(out) Stores the status STAT= and may be NULL.                                                                                |\n| `errmsg`       | intent(out) When an error occurs, this will be set to an error message; may be NULL.                                                |\n| `a_len`        | intent(in) the string length of argument `a`                                                                                        |\n| `errmsg_len`   | intent(in) the buffer size of errmsg                                                                                                |\n\nNOTES  \nIf `result_image` is nonzero, the data in the array descriptor `a` on all images except of the specified one become undefined; hence, the library may make use of this.\n\nFor character arguments, the result is passed as first argument, followed by the result string length, next come the two string arguments, followed by the two hidden string length arguments. With C binding, there are no hidden arguments and by-reference passing and either only a single character is passed or an array descriptor.\n\nPrevious: [`_gfortran_caf_co_sum` — Collective summing reduction](_005fgfortran_005fcaf_005fco_005fsum), Up: [Function ABI Documentation](function-abi-documentation) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/\\_005fgfortran_005fcaf_005fco_005freduce.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/_005fgfortran_005fcaf_005fco_005freduce.html)"
- name: 8. Intrinsic Procedures ¶
  id: intrinsic-procedures
  summary: © Free Software Foundation Licensed under the GNU Free Documentation License, Version 1.3
  description: "Next: [Intrinsic Modules](intrinsic-modules), Previous: [Coarray Programming](coarray-programming), Up: [Introduction](index) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8 Intrinsic Procedures [¶](#Intrinsic-Procedures-1)\n\n- [Introduction to intrinsic procedures](introduction-to-intrinsics)\n- [`ABORT` — Abort the program](abort)\n- [`ABS` — Absolute value](abs)\n- [`ACCESS` — Checks file access modes](access)\n- [`ACHAR` — Character in ASCII collating sequence](achar)\n- [`ACOS` — Arccosine function](acos)\n- [`ACOSD` — Arccosine function, degrees](acosd)\n- [`ACOSH` — Inverse hyperbolic cosine function](acosh)\n- [`ADJUSTL` — Left adjust a string](adjustl)\n- [`ADJUSTR` — Right adjust a string](adjustr)\n- [`AIMAG` — Imaginary part of complex number](aimag)\n- [`AINT` — Truncate to a whole number](aint)\n- [`ALARM` — Execute a routine after a given delay](alarm)\n- [`ALL` — All values in `MASK` along `DIM` are true](all)\n- [`ALLOCATED` — Status of an allocatable entity](allocated)\n- [`AND` — Bitwise logical AND](and)\n- [`ANINT` — Nearest whole number](anint)\n- [`ANY` — Any value in `MASK` along `DIM` is true](any)\n- [`ASIN` — Arcsine function](asin)\n- [`ASIND` — Arcsine function, degrees](asind)\n- [`ASINH` — Inverse hyperbolic sine function](asinh)\n- [`ASSOCIATED` — Status of a pointer or pointer/target pair](associated)\n- [`ATAN` — Arctangent function](atan)\n- [`ATAND` — Arctangent function, degrees](atand)\n- [`ATAN2` — Arctangent function](atan2)\n- [`ATAN2D` — Arctangent function, degrees](atan2d)\n- [`ATANH` — Inverse hyperbolic tangent function](atanh)\n- [`ATOMIC_ADD` — Atomic ADD operation](atomic_005fadd)\n- [`ATOMIC_AND` — Atomic bitwise AND operation](atomic_005fand)\n- [`ATOMIC_CAS` — Atomic compare and swap](atomic_005fcas)\n- [`ATOMIC_DEFINE` — Setting a variable atomically](atomic_005fdefine)\n- [`ATOMIC_FETCH_ADD` — Atomic ADD operation with prior fetch](atomic_005ffetch_005fadd)\n- [`ATOMIC_FETCH_AND` — Atomic bitwise AND operation with prior fetch](atomic_005ffetch_005fand)\n- [`ATOMIC_FETCH_OR` — Atomic bitwise OR operation with prior fetch](atomic_005ffetch_005for)\n- [`ATOMIC_FETCH_XOR` — Atomic bitwise XOR operation with prior fetch](atomic_005ffetch_005fxor)\n- [`ATOMIC_OR` — Atomic bitwise OR operation](atomic_005for)\n- [`ATOMIC_REF` — Obtaining the value of a variable atomically](atomic_005fref)\n- [`ATOMIC_XOR` — Atomic bitwise OR operation](atomic_005fxor)\n- [`BACKTRACE` — Show a backtrace](backtrace)\n- [`BESSEL_J0` — Bessel function of the first kind of order 0](bessel_005fj0)\n- [`BESSEL_J1` — Bessel function of the first kind of order 1](bessel_005fj1)\n- [`BESSEL_JN` — Bessel function of the first kind](bessel_005fjn)\n- [`BESSEL_Y0` — Bessel function of the second kind of order 0](bessel_005fy0)\n- [`BESSEL_Y1` — Bessel function of the second kind of order 1](bessel_005fy1)\n- [`BESSEL_YN` — Bessel function of the second kind](bessel_005fyn)\n- [`BGE` — Bitwise greater than or equal to](bge)\n- [`BGT` — Bitwise greater than](bgt)\n- [`BIT_SIZE` — Bit size inquiry function](bit_005fsize)\n- [`BLE` — Bitwise less than or equal to](ble)\n- [`BLT` — Bitwise less than](blt)\n- [`BTEST` — Bit test function](btest)\n- [`C_ASSOCIATED` — Status of a C pointer](c_005fassociated)\n- [`C_F_POINTER` — Convert C into Fortran pointer](c_005ff_005fpointer)\n- [`C_F_PROCPOINTER` — Convert C into Fortran procedure pointer](c_005ff_005fprocpointer)\n- [`C_FUNLOC` — Obtain the C address of a procedure](c_005ffunloc)\n- [`C_LOC` — Obtain the C address of an object](c_005floc)\n- [`C_SIZEOF` — Size in bytes of an expression](c_005fsizeof)\n- [`CEILING` — Integer ceiling function](ceiling)\n- [`CHAR` — Character conversion function](char)\n- [`CHDIR` — Change working directory](chdir)\n- [`CHMOD` — Change access permissions of files](chmod)\n- [`CMPLX` — Complex conversion function](cmplx)\n- [`CO_BROADCAST` — Copy a value to all images the current set of images](co_005fbroadcast)\n- [`CO_MAX` — Maximal value on the current set of images](co_005fmax)\n- [`CO_MIN` — Minimal value on the current set of images](co_005fmin)\n- [`CO_REDUCE` — Reduction of values on the current set of images](co_005freduce)\n- [`CO_SUM` — Sum of values on the current set of images](co_005fsum)\n- [`COMMAND_ARGUMENT_COUNT` — Get number of command line arguments](command_005fargument_005fcount)\n- [`COMPILER_OPTIONS` — Options passed to the compiler](compiler_005foptions)\n- [`COMPILER_VERSION` — Compiler version string](compiler_005fversion)\n- [`COMPLEX` — Complex conversion function](complex)\n- [`CONJG` — Complex conjugate function](conjg)\n- [`COS` — Cosine function](cos)\n- [`COSD` — Cosine function, degrees](cosd)\n- [`COSH` — Hyperbolic cosine function](cosh)\n- [`COTAN` — Cotangent function](cotan)\n- [`COTAND` — Cotangent function, degrees](cotand)\n- [`COUNT` — Count function](count)\n- [`CPU_TIME` — CPU elapsed time in seconds](cpu_005ftime)\n- [`CSHIFT` — Circular shift elements of an array](cshift)\n- [`CTIME` — Convert a time into a string](ctime)\n- [`DATE_AND_TIME` — Date and time subroutine](date_005fand_005ftime)\n- [`DBLE` — Double conversion function](dble)\n- [`DCMPLX` — Double complex conversion function](dcmplx)\n- [`DIGITS` — Significant binary digits function](digits)\n- [`DIM` — Positive difference](dim)\n- [`DOT_PRODUCT` — Dot product function](dot_005fproduct)\n- [`DPROD` — Double product function](dprod)\n- [`DREAL` — Double real part function](dreal)\n- [`DSHIFTL` — Combined left shift](dshiftl)\n- [`DSHIFTR` — Combined right shift](dshiftr)\n- [`DTIME` — Execution time subroutine (or function)](dtime)\n- [`EOSHIFT` — End-off shift elements of an array](eoshift)\n- [`EPSILON` — Epsilon function](epsilon)\n- [`ERF` — Error function](erf)\n- [`ERFC` — Error function](erfc)\n- [`ERFC_SCALED` — Error function](erfc_005fscaled)\n- [`ETIME` — Execution time subroutine (or function)](etime)\n- [`EVENT_QUERY` — Query whether a coarray event has occurred](event_005fquery)\n- [`EXECUTE_COMMAND_LINE` — Execute a shell command](execute_005fcommand_005fline)\n- [`EXIT` — Exit the program with status.](exit)\n- [`EXP` — Exponential function](exp)\n- [`EXPONENT` — Exponent function](exponent)\n- [`EXTENDS_TYPE_OF` — Query dynamic type for extension](extends_005ftype_005fof)\n- [`FDATE` — Get the current time as a string](fdate)\n- [`FGET` — Read a single character in stream mode from stdin](fget)\n- [`FGETC` — Read a single character in stream mode](fgetc)\n- [`FINDLOC` — Search an array for a value](findloc)\n- [`FLOOR` — Integer floor function](floor)\n- [`FLUSH` — Flush I/O unit(s)](flush)\n- [`FNUM` — File number function](fnum)\n- [`FPUT` — Write a single character in stream mode to stdout](fput)\n- [`FPUTC` — Write a single character in stream mode](fputc)\n- [`FRACTION` — Fractional part of the model representation](fraction)\n- [`FREE` — Frees memory](free)\n- [`FSEEK` — Low level file positioning subroutine](fseek)\n- [`FSTAT` — Get file status](fstat)\n- [`FTELL` — Current stream position](ftell)\n- [`GAMMA` — Gamma function](gamma)\n- [`GERROR` — Get last system error message](gerror)\n- [`GETARG` — Get command line arguments](getarg)\n- [`GET_COMMAND` — Get the entire command line](get_005fcommand)\n- [`GET_COMMAND_ARGUMENT` — Get command line arguments](get_005fcommand_005fargument)\n- [`GETCWD` — Get current working directory](getcwd)\n- [`GETENV` — Get an environmental variable](getenv)\n- [`GET_ENVIRONMENT_VARIABLE` — Get an environmental variable](get_005fenvironment_005fvariable)\n- [`GETGID` — Group ID function](getgid)\n- [`GETLOG` — Get login name](getlog)\n- [`GETPID` — Process ID function](getpid)\n- [`GETUID` — User ID function](getuid)\n- [`GMTIME` — Convert time to GMT info](gmtime)\n- [`HOSTNM` — Get system host name](hostnm)\n- [`HUGE` — Largest number of a kind](huge)\n- [`HYPOT` — Euclidean distance function](hypot)\n- [`IACHAR` — Code in ASCII collating sequence](iachar)\n- [`IALL` — Bitwise AND of array elements](iall)\n- [`IAND` — Bitwise logical and](iand)\n- [`IANY` — Bitwise OR of array elements](iany)\n- [`IARGC` — Get the number of command line arguments](iargc)\n- [`IBCLR` — Clear bit](ibclr)\n- [`IBITS` — Bit extraction](ibits)\n- [`IBSET` — Set bit](ibset)\n- [`ICHAR` — Character-to-integer conversion function](ichar)\n- [`IDATE` — Get current local time subroutine (day/month/year)](idate)\n- [`IEOR` — Bitwise logical exclusive or](ieor)\n- [`IERRNO` — Get the last system error number](ierrno)\n- [`IMAGE_INDEX` — Function that converts a cosubscript to an image index](image_005findex)\n- [`INDEX` — Position of a substring within a string](index-intrinsic)\n- [`INT` — Convert to integer type](int)\n- [`INT2` — Convert to 16-bit integer type](int2)\n- [`INT8` — Convert to 64-bit integer type](int8)\n- [`IOR` — Bitwise logical or](ior)\n- [`IPARITY` — Bitwise XOR of array elements](iparity)\n- [`IRAND` — Integer pseudo-random number](irand)\n- [`IS_CONTIGUOUS` — Test whether an array is contiguous](is_005fcontiguous)\n- [`IS_IOSTAT_END` — Test for end-of-file value](is_005fiostat_005fend)\n- [`IS_IOSTAT_EOR` — Test for end-of-record value](is_005fiostat_005feor)\n- [`ISATTY` — Whether a unit is a terminal device](isatty)\n- [`ISHFT` — Shift bits](ishft)\n- [`ISHFTC` — Shift bits circularly](ishftc)\n- [`ISNAN` — Test for a NaN](isnan)\n- [`ITIME` — Get current local time subroutine (hour/minutes/seconds)](itime)\n- [`KILL` — Send a signal to a process](kill)\n- [`KIND` — Kind of an entity](kind)\n- [`LBOUND` — Lower dimension bounds of an array](lbound)\n- [`LCOBOUND` — Lower codimension bounds of an array](lcobound)\n- [`LEADZ` — Number of leading zero bits of an integer](leadz)\n- [`LEN` — Length of a character entity](len)\n- [`LEN_TRIM` — Length of a character entity without trailing blank characters](len_005ftrim)\n- [`LGE` — Lexical greater than or equal](lge)\n- [`LGT` — Lexical greater than](lgt)\n- [`LINK` — Create a hard link](link)\n- [`LLE` — Lexical less than or equal](lle)\n- [`LLT` — Lexical less than](llt)\n- [`LNBLNK` — Index of the last non-blank character in a string](lnblnk)\n- [`LOC` — Returns the address of a variable](loc)\n- [`LOG` — Natural logarithm function](log)\n- [`LOG10` — Base 10 logarithm function](log10)\n- [`LOG_GAMMA` — Logarithm of the Gamma function](log_005fgamma)\n- [`LOGICAL` — Convert to logical type](logical)\n- [`LSHIFT` — Left shift bits](lshift)\n- [`LSTAT` — Get file status](lstat)\n- [`LTIME` — Convert time to local time info](ltime)\n- [`MALLOC` — Allocate dynamic memory](malloc)\n- [`MASKL` — Left justified mask](maskl)\n- [`MASKR` — Right justified mask](maskr)\n- [`MATMUL` — matrix multiplication](matmul)\n- [`MAX` — Maximum value of an argument list](max)\n- [`MAXEXPONENT` — Maximum exponent of a real kind](maxexponent)\n- [`MAXLOC` — Location of the maximum value within an array](maxloc)\n- [`MAXVAL` — Maximum value of an array](maxval)\n- [`MCLOCK` — Time function](mclock)\n- [`MCLOCK8` — Time function (64-bit)](mclock8)\n- [`MERGE` — Merge variables](merge)\n- [`MERGE_BITS` — Merge of bits under mask](merge_005fbits)\n- [`MIN` — Minimum value of an argument list](min)\n- [`MINEXPONENT` — Minimum exponent of a real kind](minexponent)\n- [`MINLOC` — Location of the minimum value within an array](minloc)\n- [`MINVAL` — Minimum value of an array](minval)\n- [`MOD` — Remainder function](mod)\n- [`MODULO` — Modulo function](modulo)\n- [`MOVE_ALLOC` — Move allocation from one object to another](move_005falloc)\n- [`MVBITS` — Move bits from one integer to another](mvbits)\n- [`NEAREST` — Nearest representable number](nearest)\n- [`NEW_LINE` — New line character](new_005fline)\n- [`NINT` — Nearest whole number](nint)\n- [`NORM2` — Euclidean vector norms](norm2)\n- [`NOT` — Logical negation](not)\n- [`NULL` — Function that returns an disassociated pointer](null)\n- [`NUM_IMAGES` — Function that returns the number of images](num_005fimages)\n- [`OR` — Bitwise logical OR](or)\n- [`PACK` — Pack an array into an array of rank one](pack)\n- [`PARITY` — Reduction with exclusive OR](parity)\n- [`PERROR` — Print system error message](perror)\n- [`POPCNT` — Number of bits set](popcnt)\n- [`POPPAR` — Parity of the number of bits set](poppar)\n- [`PRECISION` — Decimal precision of a real kind](precision)\n- [`PRESENT` — Determine whether an optional dummy argument is specified](present)\n- [`PRODUCT` — Product of array elements](product)\n- [`RADIX` — Base of a model number](radix)\n- [`RAN` — Real pseudo-random number](ran)\n- [`RAND` — Real pseudo-random number](rand)\n- [`RANDOM_INIT` — Initialize a pseudo-random number generator](random_005finit)\n- [`RANDOM_NUMBER` — Pseudo-random number](random_005fnumber)\n- [`RANDOM_SEED` — Initialize a pseudo-random number sequence](random_005fseed)\n- [`RANGE` — Decimal exponent range](range)\n- [`RANK` — Rank of a data object](rank)\n- [`REAL` — Convert to real type](real)\n- [`RENAME` — Rename a file](rename)\n- [`REPEAT` — Repeated string concatenation](repeat)\n- [`RESHAPE` — Function to reshape an array](reshape)\n- [`RRSPACING` — Reciprocal of the relative spacing](rrspacing)\n- [`RSHIFT` — Right shift bits](rshift)\n- [`SAME_TYPE_AS` — Query dynamic types for equality](same_005ftype_005fas)\n- [`SCALE` — Scale a real value](scale)\n- [`SCAN` — Scan a string for the presence of a set of characters](scan)\n- [`SECNDS` — Time function](secnds)\n- [`SECOND` — CPU time function](second)\n- [`SELECTED_CHAR_KIND` — Choose character kind](selected_005fchar_005fkind)\n- [`SELECTED_INT_KIND` — Choose integer kind](selected_005fint_005fkind)\n- [`SELECTED_REAL_KIND` — Choose real kind](selected_005freal_005fkind)\n- [`SET_EXPONENT` — Set the exponent of the model](set_005fexponent)\n- [`SHAPE` — Determine the shape of an array](shape)\n- [`SHIFTA` — Right shift with fill](shifta)\n- [`SHIFTL` — Left shift](shiftl)\n- [`SHIFTR` — Right shift](shiftr)\n- [`SIGN` — Sign copying function](sign)\n- [`SIGNAL` — Signal handling subroutine (or function)](signal)\n- [`SIN` — Sine function](sin)\n- [`SIND` — Sine function, degrees](sind)\n- [`SINH` — Hyperbolic sine function](sinh)\n- [`SIZE` — Determine the size of an array](size)\n- [`SIZEOF` — Size in bytes of an expression](sizeof)\n- [`SLEEP` — Sleep for the specified number of seconds](sleep)\n- [`SPACING` — Smallest distance between two numbers of a given type](spacing)\n- [`SPREAD` — Add a dimension to an array](spread)\n- [`SQRT` — Square-root function](sqrt)\n- [`SRAND` — Reinitialize the random number generator](srand)\n- [`STAT` — Get file status](stat)\n- [`STORAGE_SIZE` — Storage size in bits](storage_005fsize)\n- [`SUM` — Sum of array elements](sum)\n- [`SYMLNK` — Create a symbolic link](symlnk)\n- [`SYSTEM` — Execute a shell command](system)\n- [`SYSTEM_CLOCK` — Time function](system_005fclock)\n- [`TAN` — Tangent function](tan)\n- [`TAND` — Tangent function, degrees](tand)\n- [`TANH` — Hyperbolic tangent function](tanh)\n- [`THIS_IMAGE` — Function that returns the cosubscript index of this image](this_005fimage)\n- [`TIME` — Time function](time)\n- [`TIME8` — Time function (64-bit)](time8)\n- [`TINY` — Smallest positive number of a real kind](tiny)\n- [`TRAILZ` — Number of trailing zero bits of an integer](trailz)\n- [`TRANSFER` — Transfer bit patterns](transfer)\n- [`TRANSPOSE` — Transpose an array of rank two](transpose)\n- [`TRIM` — Remove trailing blank characters of a string](trim)\n- [`TTYNAM` — Get the name of a terminal device](ttynam)\n- [`UBOUND` — Upper dimension bounds of an array](ubound)\n- [`UCOBOUND` — Upper codimension bounds of an array](ucobound)\n- [`UMASK` — Set the file creation mask](umask)\n- [`UNLINK` — Remove a file from the file system](unlink)\n- [`UNPACK` — Unpack an array of rank one into an array](unpack)\n- [`VERIFY` — Scan a string for characters not a given set](verify)\n- [`XOR` — Bitwise logical exclusive OR](xor)\n\nNext: [Intrinsic Modules](intrinsic-modules), Previous: [Coarray Programming](coarray-programming), Up: [Introduction](index) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Intrinsic-Procedures.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Intrinsic-Procedures.html)"
- name: 8.1. Introduction to intrinsic procedures ¶
  id: introduction-to-intrinsics
  summary: The intrinsic procedures provided by GNU Fortran include procedures required by the Fortran 95 and later supported standards, and a set of intrinsic procedures for backwards compatibility with G77
  description: "Next: [`ABORT` — Abort the program](abort), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.1 Introduction to intrinsic procedures [¶](#Introduction-to-intrinsic-procedures)\n\nThe intrinsic procedures provided by GNU Fortran include procedures required by the Fortran 95 and later supported standards, and a set of intrinsic procedures for backwards compatibility with G77. Any conflict between a description here and a description in the Fortran standards is unintentional, and the standard(s) should be considered authoritative.\n\nThe enumeration of the `KIND` type parameter is processor defined in the Fortran 95 standard. GNU Fortran defines the default integer type and default real type by `INTEGER(KIND=4)` and `REAL(KIND=4)`, respectively. The standard mandates that both data types shall have another kind, which have more precision. On typical target architectures supported by `gfortran`, this kind type parameter is `KIND=8`. Hence, `REAL(KIND=8)` and `DOUBLE PRECISION` are equivalent. In the description of generic intrinsic procedures, the kind type parameter will be specified by `KIND=*`, and in the description of specific names for an intrinsic procedure the kind type parameter will be explicitly given (e.g., `REAL(KIND=4)` or `REAL(KIND=8)`). Finally, for brevity the optional `KIND=` syntax will be omitted.\n\nMany of the intrinsic procedures take one or more optional arguments. This document follows the convention used in the Fortran 95 standard, and denotes such arguments by square brackets.\n\nGNU Fortran offers the `-std=` command-line option, which can be used to restrict the set of intrinsic procedures to a given standard. By default, `gfortran` sets the `-std=gnu` option, and so all intrinsic procedures described here are accepted. There is one caveat. For a select group of intrinsic procedures, `g77` implemented both a function and a subroutine. Both classes have been implemented in `gfortran` for backwards compatibility with `g77`. It is noted here that these functions and subroutines cannot be intermixed in a given subprogram. In the descriptions that follow, the applicable standard for each intrinsic procedure is noted.\n\nNext: [`ABORT` — Abort the program](abort), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Introduction-to-Intrinsics.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Introduction-to-Intrinsics.html)"
- name: 8.2. ABORT
  id: abort
  summary: 'Description: ABORT causes immediate termination of the program'
  description: "Next: [`ABS` — Absolute value](abs), Previous: [Introduction to intrinsic procedures](introduction-to-intrinsics), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.2 ABORT — Abort the program [¶](#ABORT-----Abort-the-program)\n\nDescription:  \n`ABORT` causes immediate termination of the program. On operating systems that support a core dump, `ABORT` will produce a core dump. It will also print a backtrace, unless `-fno-backtrace` is given.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL ABORT`\n\nReturn value:  \nDoes not return.\n\nExample:  \n``` example-preformatted\nprogram test_abort\n  integer :: i = 1, j = 2\n  if (i /= j) call abort\nend program test_abort\n```\n\nSee also:  \n[`EXIT` — Exit the program with status.](exit), [`KILL` — Send a signal to a process](kill), [`BACKTRACE` — Show a backtrace](backtrace)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ABORT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ABORT.html)"
- name: 8.3. ABS
  id: abs
  summary: 'Description: ABS(A) computes the absolute value of A'
  description: "Next: [`ACCESS` — Checks file access modes](access), Previous: [`ABORT` — Abort the program](abort), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.3 ABS — Absolute value [¶](#ABS-----Absolute-value)\n\nDescription:  \n`ABS(A)` computes the absolute value of `A`.\n\nStandard:  \nFortran 77 and later, has overloads that are GNU extensions\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = ABS(A)`\n\nArguments:  \n|     |                                                                       |\n|-----|-----------------------------------------------------------------------|\n| `A` | The type of the argument shall be an `INTEGER`, `REAL`, or `COMPLEX`. |\n\nReturn value:  \nThe return value is of the same type and kind as the argument except the return value is `REAL` for a `COMPLEX` argument.\n\nExample:  \n``` example-preformatted\nprogram test_abs\n  integer :: i = -1\n  real :: x = -1.e0\n  complex :: z = (-1.e0,0.e0)\n  i = abs(i)\n  x = abs(x)\n  x = abs(z)\nend program test_abs\n```\n\nSpecific names:  \n| Name       | Argument       | Return type  | Standard             |\n|------------|----------------|--------------|----------------------|\n| `ABS(A)`   | `REAL(4) A`    | `REAL(4)`    | Fortran 77 and later |\n| `CABS(A)`  | `COMPLEX(4) A` | `REAL(4)`    | Fortran 77 and later |\n| `DABS(A)`  | `REAL(8) A`    | `REAL(8)`    | Fortran 77 and later |\n| `IABS(A)`  | `INTEGER(4) A` | `INTEGER(4)` | Fortran 77 and later |\n| `BABS(A)`  | `INTEGER(1) A` | `INTEGER(1)` | GNU extension        |\n| `IIABS(A)` | `INTEGER(2) A` | `INTEGER(2)` | GNU extension        |\n| `JIABS(A)` | `INTEGER(4) A` | `INTEGER(4)` | GNU extension        |\n| `KIABS(A)` | `INTEGER(8) A` | `INTEGER(8)` | GNU extension        |\n| `ZABS(A)`  | `COMPLEX(8) A` | `REAL(8)`    | GNU extension        |\n| `CDABS(A)` | `COMPLEX(8) A` | `REAL(8)`    | GNU extension        |\n\nNext: [`ACCESS` — Checks file access modes](access), Previous: [`ABORT` — Abort the program](abort), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ABS.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ABS.html)"
- name: 8.4. ACCESS
  id: access
  summary: 'Description: ACCESS(NAME, MODE) checks whether the file NAME exists, is readable, writable or executable'
  description: "Next: [`ACHAR` — Character in ASCII collating sequence](achar), Previous: [`ABS` — Absolute value](abs), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.4 ACCESS — Checks file access modes [¶](#ACCESS-----Checks-file-access-modes)\n\nDescription:  \n`ACCESS(NAME, MODE)` checks whether the file `NAME` exists, is readable, writable or executable. Except for the executable check, `ACCESS` can be replaced by Fortran 95’s `INQUIRE`.\n\nStandard:  \nGNU extension\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = ACCESS(NAME, MODE)`\n\nArguments:  \n|        |                                                                                                                                                                                                         |\n|--------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `NAME` | Scalar `CHARACTER` of default kind with the file name. Trailing blank are ignored unless the character `achar(0)` is present, then all characters up to and excluding `achar(0)` are used as file name. |\n| `MODE` | Scalar `CHARACTER` of default kind with the file access mode, may be any concatenation of `\"r\"` (readable), `\"w\"` (writable) and `\"x\"` (executable), or `\" \"` to check for existence.                   |\n\nReturn value:  \nReturns a scalar `INTEGER`, which is `0` if the file is accessible in the given mode; otherwise or if an invalid argument has been given for `MODE` the value `1` is returned.\n\nExample:  \n``` example-preformatted\nprogram access_test\n  implicit none\n  character(len=*), parameter :: file  = 'test.dat'\n  character(len=*), parameter :: file2 = 'test.dat  '//achar(0)\n  if(access(file,' ') == 0) print *, trim(file),' is exists'\n  if(access(file,'r') == 0) print *, trim(file),' is readable'\n  if(access(file,'w') == 0) print *, trim(file),' is writable'\n  if(access(file,'x') == 0) print *, trim(file),' is executable'\n  if(access(file2,'rwx') == 0) &\n    print *, trim(file2),' is readable, writable and executable'\nend program access_test\n```\n\nNext: [`ACHAR` — Character in ASCII collating sequence](achar), Previous: [`ABS` — Absolute value](abs), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ACCESS.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ACCESS.html)"
- name: 8.5. ACHAR
  id: achar
  summary: 'Description: ACHAR(I) returns the character located at position I in the ASCII collating sequence'
  description: "Next: [`ACOS` — Arccosine function](acos), Previous: [`ACCESS` — Checks file access modes](access), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.5 ACHAR — Character in ASCII collating sequence [¶](#ACHAR-----Character-in-ASCII-collating-sequence)\n\nDescription:  \n`ACHAR(I)` returns the character located at position `I` in the ASCII collating sequence.\n\nStandard:  \nFortran 77 and later, with `KIND` argument Fortran 2003 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = ACHAR(I [, KIND])`\n\nArguments:  \n|        |                                                                                                |\n|--------|------------------------------------------------------------------------------------------------|\n| `I`    | The type shall be `INTEGER`.                                                                   |\n| `KIND` | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result. |\n\nReturn value:  \nThe return value is of type `CHARACTER` with a length of one. If the `KIND` argument is present, the return value is of the specified kind and of the default kind otherwise.\n\nExample:  \n``` example-preformatted\nprogram test_achar\n  character c\n  c = achar(32)\nend program test_achar\n```\n\nNote:  \nSee [`ICHAR` — Character-to-integer conversion function](ichar) for a discussion of converting between numerical values and formatted string representations.\n\nSee also:  \n[`CHAR` — Character conversion function](char), [`IACHAR` — Code in ASCII collating sequence](iachar), [`ICHAR` — Character-to-integer conversion function](ichar)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ACHAR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ACHAR.html)"
- name: 8.6. ACOS
  id: acos
  summary: 'Description: ACOS(X) computes the arccosine of X (inverse of COS(X))'
  description: "Next: [`ACOSD` — Arccosine function, degrees](acosd), Previous: [`ACHAR` — Character in ASCII collating sequence](achar), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.6 ACOS — Arccosine function [¶](#ACOS-----Arccosine-function)\n\nDescription:  \n`ACOS(X)` computes the arccosine of `X` (inverse of `COS(X)`).\n\nStandard:  \nFortran 77 and later, for a complex argument Fortran 2008 or later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = ACOS(X)`\n\nArguments:  \n|     |                                                                                                                      |\n|-----|----------------------------------------------------------------------------------------------------------------------|\n| `X` | The type shall either be `REAL` with a magnitude that is less than or equal to one - or the type shall be `COMPLEX`. |\n\nReturn value:  \nThe return value is of the same type and kind as `X`. The real part of the result is in radians and lies in the range *0 \\leq \\Re \\acos(x) \\leq \\pi*.\n\nExample:  \n``` example-preformatted\nprogram test_acos\n  real(8) :: x = 0.866_8\n  x = acos(x)\nend program test_acos\n```\n\nSpecific names:  \n| Name       | Argument    | Return type | Standard             |\n|------------|-------------|-------------|----------------------|\n| `ACOS(X)`  | `REAL(4) X` | `REAL(4)`   | Fortran 77 and later |\n| `DACOS(X)` | `REAL(8) X` | `REAL(8)`   | Fortran 77 and later |\n\nSee also:  \nInverse function: [`COS` — Cosine function](cos) Degrees function: [`ACOSD` — Arccosine function, degrees](acosd)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ACOS.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ACOS.html)"
- name: 8.7. ACOSD
  id: acosd
  summary: 'Description: ACOSD(X) computes the arccosine of X in degrees (inverse of COSD(X))'
  description: "Next: [`ACOSH` — Inverse hyperbolic cosine function](acosh), Previous: [`ACOS` — Arccosine function](acos), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.7 ACOSD — Arccosine function, degrees [¶](#ACOSD-----Arccosine-function_002c-degrees)\n\nDescription:  \n`ACOSD(X)` computes the arccosine of `X` in degrees (inverse of `COSD(X)`).\n\nThis function is for compatibility only and should be avoided in favor of standard constructs wherever possible.\n\nStandard:  \nGNU extension, enabled with `-fdec-math`\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = ACOSD(X)`\n\nArguments:  \n|     |                                                                                                                      |\n|-----|----------------------------------------------------------------------------------------------------------------------|\n| `X` | The type shall either be `REAL` with a magnitude that is less than or equal to one - or the type shall be `COMPLEX`. |\n\nReturn value:  \nThe return value is of the same type and kind as `X`. The real part of the result is in degrees and lies in the range *0 \\leq \\Re \\acos(x) \\leq 180*.\n\nExample:  \n``` example-preformatted\nprogram test_acosd\n  real(8) :: x = 0.866_8\n  x = acosd(x)\nend program test_acosd\n```\n\nSpecific names:  \n| Name        | Argument    | Return type | Standard      |\n|-------------|-------------|-------------|---------------|\n| `ACOSD(X)`  | `REAL(4) X` | `REAL(4)`   | GNU extension |\n| `DACOSD(X)` | `REAL(8) X` | `REAL(8)`   | GNU extension |\n\nSee also:  \nInverse function: [`COSD` — Cosine function, degrees](cosd) Radians function: [`ACOS` — Arccosine function](acos)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ACOSD.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ACOSD.html)"
- name: 8.8. ACOSH
  id: acosh
  summary: 'Description: ACOSH(X) computes the inverse hyperbolic cosine of X'
  description: "Next: [`ADJUSTL` — Left adjust a string](adjustl), Previous: [`ACOSD` — Arccosine function, degrees](acosd), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.8 ACOSH — Inverse hyperbolic cosine function [¶](#ACOSH-----Inverse-hyperbolic-cosine-function)\n\nDescription:  \n`ACOSH(X)` computes the inverse hyperbolic cosine of `X`.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = ACOSH(X)`\n\nArguments:  \n|     |                                        |\n|-----|----------------------------------------|\n| `X` | The type shall be `REAL` or `COMPLEX`. |\n\nReturn value:  \nThe return value has the same type and kind as `X`. If `X` is complex, the imaginary part of the result is in radians and lies between *0 \\leq \\Im \\acosh(x) \\leq \\pi*.\n\nExample:  \n``` example-preformatted\nPROGRAM test_acosh\n  REAL(8), DIMENSION(3) :: x = (/ 1.0, 2.0, 3.0 /)\n  WRITE (*,*) ACOSH(x)\nEND PROGRAM\n```\n\nSpecific names:  \n| Name        | Argument    | Return type | Standard      |\n|-------------|-------------|-------------|---------------|\n| `DACOSH(X)` | `REAL(8) X` | `REAL(8)`   | GNU extension |\n\nSee also:  \nInverse function: [`COSH` — Hyperbolic cosine function](cosh)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ACOSH.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ACOSH.html)"
- name: 8.9. ADJUSTL
  id: adjustl
  summary: 'Description: ADJUSTL(STRING) will left adjust a string by removing leading spaces'
  description: "Next: [`ADJUSTR` — Right adjust a string](adjustr), Previous: [`ACOSH` — Inverse hyperbolic cosine function](acosh), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.9 ADJUSTL — Left adjust a string [¶](#ADJUSTL-----Left-adjust-a-string)\n\nDescription:  \n`ADJUSTL(STRING)` will left adjust a string by removing leading spaces. Spaces are inserted at the end of the string as needed.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = ADJUSTL(STRING)`\n\nArguments:  \n|          |                                |\n|----------|--------------------------------|\n| `STRING` | The type shall be `CHARACTER`. |\n\nReturn value:  \nThe return value is of type `CHARACTER` and of the same kind as `STRING` where leading spaces are removed and the same number of spaces are inserted on the end of `STRING`.\n\nExample:  \n``` example-preformatted\nprogram test_adjustl\n  character(len=20) :: str = '   gfortran'\n  str = adjustl(str)\n  print *, str\nend program test_adjustl\n```\n\nSee also:  \n[`ADJUSTR` — Right adjust a string](adjustr), [`TRIM` — Remove trailing blank characters of a string](trim)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ADJUSTL.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ADJUSTL.html)"
- name: 8.10. ADJUSTR
  id: adjustr
  summary: 'Description: ADJUSTR(STRING) will right adjust a string by removing trailing spaces'
  description: "Next: [`AIMAG` — Imaginary part of complex number](aimag), Previous: [`ADJUSTL` — Left adjust a string](adjustl), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.10 ADJUSTR — Right adjust a string [¶](#ADJUSTR-----Right-adjust-a-string)\n\nDescription:  \n`ADJUSTR(STRING)` will right adjust a string by removing trailing spaces. Spaces are inserted at the start of the string as needed.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = ADJUSTR(STRING)`\n\nArguments:  \n|       |                                |\n|-------|--------------------------------|\n| `STR` | The type shall be `CHARACTER`. |\n\nReturn value:  \nThe return value is of type `CHARACTER` and of the same kind as `STRING` where trailing spaces are removed and the same number of spaces are inserted at the start of `STRING`.\n\nExample:  \n``` example-preformatted\nprogram test_adjustr\n  character(len=20) :: str = 'gfortran'\n  str = adjustr(str)\n  print *, str\nend program test_adjustr\n```\n\nSee also:  \n[`ADJUSTL` — Left adjust a string](adjustl), [`TRIM` — Remove trailing blank characters of a string](trim)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ADJUSTR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ADJUSTR.html)"
- name: 8.11. AIMAG
  id: aimag
  summary: 'Description: AIMAG(Z) yields the imaginary part of complex argument Z'
  description: "Next: [`AINT` — Truncate to a whole number](aint), Previous: [`ADJUSTR` — Right adjust a string](adjustr), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.11 AIMAG — Imaginary part of complex number [¶](#AIMAG-----Imaginary-part-of-complex-number)\n\nDescription:  \n`AIMAG(Z)` yields the imaginary part of complex argument `Z`. The `IMAG(Z)` and `IMAGPART(Z)` intrinsic functions are provided for compatibility with `g77`, and their use in new code is strongly discouraged.\n\nStandard:  \nFortran 77 and later, has overloads that are GNU extensions\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = AIMAG(Z)`\n\nArguments:  \n|     |                                              |\n|-----|----------------------------------------------|\n| `Z` | The type of the argument shall be `COMPLEX`. |\n\nReturn value:  \nThe return value is of type `REAL` with the kind type parameter of the argument.\n\nExample:  \n``` example-preformatted\nprogram test_aimag\n  complex(4) z4\n  complex(8) z8\n  z4 = cmplx(1.e0_4, 0.e0_4)\n  z8 = cmplx(0.e0_8, 1.e0_8)\n  print *, aimag(z4), dimag(z8)\nend program test_aimag\n```\n\nSpecific names:  \n| Name          | Argument       | Return type | Standard             |\n|---------------|----------------|-------------|----------------------|\n| `AIMAG(Z)`    | `COMPLEX Z`    | `REAL`      | Fortran 77 and later |\n| `DIMAG(Z)`    | `COMPLEX(8) Z` | `REAL(8)`   | GNU extension        |\n| `IMAG(Z)`     | `COMPLEX Z`    | `REAL`      | GNU extension        |\n| `IMAGPART(Z)` | `COMPLEX Z`    | `REAL`      | GNU extension        |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/AIMAG.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/AIMAG.html)"
- name: 8.12. AINT
  id: aint
  summary: 'Description: AINT(A [, KIND]) truncates its argument to a whole number'
  description: "Next: [`ALARM` — Execute a routine after a given delay](alarm), Previous: [`AIMAG` — Imaginary part of complex number](aimag), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.12 AINT — Truncate to a whole number [¶](#AINT-----Truncate-to-a-whole-number)\n\nDescription:  \n`AINT(A [, KIND])` truncates its argument to a whole number.\n\nStandard:  \nFortran 77 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = AINT(A [, KIND])`\n\nArguments:  \n|        |                                                                                                |\n|--------|------------------------------------------------------------------------------------------------|\n| `A`    | The type of the argument shall be `REAL`.                                                      |\n| `KIND` | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result. |\n\nReturn value:  \nThe return value is of type `REAL` with the kind type parameter of the argument if the optional `KIND` is absent; otherwise, the kind type parameter will be given by `KIND`. If the magnitude of `X` is less than one, `AINT(X)` returns zero. If the magnitude is equal to or greater than one then it returns the largest whole number that does not exceed its magnitude. The sign is the same as the sign of `X`.\n\nExample:  \n``` example-preformatted\nprogram test_aint\n  real(4) x4\n  real(8) x8\n  x4 = 1.234E0_4\n  x8 = 4.321_8\n  print *, aint(x4), dint(x8)\n  x8 = aint(x4,8)\nend program test_aint\n```\n\nSpecific names:  \n| Name      | Argument    | Return type | Standard             |\n|-----------|-------------|-------------|----------------------|\n| `AINT(A)` | `REAL(4) A` | `REAL(4)`   | Fortran 77 and later |\n| `DINT(A)` | `REAL(8) A` | `REAL(8)`   | Fortran 77 and later |\n\nNext: [`ALARM` — Execute a routine after a given delay](alarm), Previous: [`AIMAG` — Imaginary part of complex number](aimag), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/AINT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/AINT.html)"
- name: 8.13. ALARM
  id: alarm
  summary: 'Description: ALARM(SECONDS, HANDLER [, STATUS]) causes external subroutine HANDLER to be executed after a delay of SECONDS by using alarm(2) to set up a signal and signal(2) to catch it'
  description: "Next: [`ALL` — All values in `MASK` along `DIM` are true](all), Previous: [`AINT` — Truncate to a whole number](aint), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.13 ALARM — Execute a routine after a given delay [¶](#ALARM-----Execute-a-routine-after-a-given-delay)\n\nDescription:  \n`ALARM(SECONDS, HANDLER [, STATUS])` causes external subroutine `HANDLER` to be executed after a delay of `SECONDS` by using `alarm(2)` to set up a signal and `signal(2)` to catch it. If `STATUS` is supplied, it will be returned with the number of seconds remaining until any previously scheduled alarm was due to be delivered, or zero if there was no previously scheduled alarm.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL ALARM(SECONDS, HANDLER [, STATUS])`\n\nArguments:  \n|           |                                                                                                                                                                                                                               |\n|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `SECONDS` | The type of the argument shall be a scalar `INTEGER`. It is `INTENT(IN)`.                                                                                                                                                     |\n| `HANDLER` | Signal handler (`INTEGER FUNCTION` or `SUBROUTINE`) or dummy/global `INTEGER` scalar. The scalar values may be either `SIG_IGN=1` to ignore the alarm generated or `SIG_DFL=0` to set the default action. It is `INTENT(IN)`. |\n| `STATUS`  | (Optional) `STATUS` shall be a scalar variable of the default `INTEGER` kind. It is `INTENT(OUT)`.                                                                                                                            |\n\nExample:  \n``` example-preformatted\nprogram test_alarm\n  external handler_print\n  integer i\n  call alarm (3, handler_print, i)\n  print *, i\n  call sleep(10)\nend program test_alarm\n```\n\nThis will cause the external routine `handler_print` to be called after 3 seconds.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ALARM.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ALARM.html)"
- name: 8.14. ALL
  id: all
  summary: 'Description: ALL(MASK [, DIM]) determines if all the values are true in MASK in the array along dimension DIM'
  description: "Next: [`ALLOCATED` — Status of an allocatable entity](allocated), Previous: [`ALARM` — Execute a routine after a given delay](alarm), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.14 ALL — All values in `MASK` along `DIM` are true [¶](#ALL-----All-values-in-MASK-along-DIM-are-true)\n\nDescription:  \n`ALL(MASK [, DIM])` determines if all the values are true in `MASK` in the array along dimension `DIM`.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n`RESULT = ALL(MASK [, DIM])`\n\nArguments:  \n|        |                                                                                                       |\n|--------|-------------------------------------------------------------------------------------------------------|\n| `MASK` | The type of the argument shall be `LOGICAL` and it shall not be scalar.                               |\n| `DIM`  | (Optional) `DIM` shall be a scalar integer with a value that lies between one and the rank of `MASK`. |\n\nReturn value:  \n`ALL(MASK)` returns a scalar value of type `LOGICAL` where the kind type parameter is the same as the kind type parameter of `MASK`. If `DIM` is present, then `ALL(MASK, DIM)` returns an array with the rank of `MASK` minus 1. The shape is determined from the shape of `MASK` where the `DIM` dimension is elided.\n\n\\(A\\)  \n`ALL(MASK)` is true if all elements of `MASK` are true. It also is true if `MASK` has zero size; otherwise, it is false.\n\n\\(B\\)  \nIf the rank of `MASK` is one, then `ALL(MASK,DIM)` is equivalent to `ALL(MASK)`. If the rank is greater than one, then `ALL(MASK,DIM)` is determined by applying `ALL` to the array sections.\n\nExample:  \n``` example-preformatted\nprogram test_all\n  logical l\n  l = all((/.true., .true., .true./))\n  print *, l\n  call section\n  contains\n    subroutine section\n      integer a(2,3), b(2,3)\n      a = 1\n      b = 1\n      b(2,2) = 2\n      print *, all(a .eq. b, 1)\n      print *, all(a .eq. b, 2)\n    end subroutine section\nend program test_all\n```\n\nNext: [`ALLOCATED` — Status of an allocatable entity](allocated), Previous: [`ALARM` — Execute a routine after a given delay](alarm), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ALL.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ALL.html)"
- name: 8.15. ALLOCATED
  id: allocated
  summary: 'Description: ALLOCATED(ARRAY) and ALLOCATED(SCALAR) check the allocation status of ARRAY and SCALAR, respectively'
  description: "Next: [`AND` — Bitwise logical AND](and), Previous: [`ALL` — All values in `MASK` along `DIM` are true](all), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.15 ALLOCATED — Status of an allocatable entity [¶](#ALLOCATED-----Status-of-an-allocatable-entity)\n\nDescription:  \n`ALLOCATED(ARRAY)` and `ALLOCATED(SCALAR)` check the allocation status of `ARRAY` and `SCALAR`, respectively.\n\nStandard:  \nFortran 90 and later. Note, the `SCALAR=` keyword and allocatable scalar entities are available in Fortran 2003 and later.\n\nClass:  \nInquiry function\n\nSyntax:  \n|                              |\n|------------------------------|\n| `RESULT = ALLOCATED(ARRAY)`  |\n| `RESULT = ALLOCATED(SCALAR)` |\n\nArguments:  \n|          |                                                |\n|----------|------------------------------------------------|\n| `ARRAY`  | The argument shall be an `ALLOCATABLE` array.  |\n| `SCALAR` | The argument shall be an `ALLOCATABLE` scalar. |\n\nReturn value:  \nThe return value is a scalar `LOGICAL` with the default logical kind type parameter. If the argument is allocated, then the result is `.TRUE.`; otherwise, it returns `.FALSE.`\n\nExample:  \n``` example-preformatted\nprogram test_allocated\n  integer :: i = 4\n  real(4), allocatable :: x(:)\n  if (.not. allocated(x)) allocate(x(i))\nend program test_allocated\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ALLOCATED.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ALLOCATED.html)"
- name: 8.16. AND
  id: and
  summary: 'Description: Bitwise logical AND'
  description: "Next: [`ANINT` — Nearest whole number](anint), Previous: [`ALLOCATED` — Status of an allocatable entity](allocated), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.16 AND — Bitwise logical AND [¶](#AND-----Bitwise-logical-AND)\n\nDescription:  \nBitwise logical `AND`.\n\nThis intrinsic routine is provided for backwards compatibility with GNU Fortran 77. For integer arguments, programmers should consider the use of the [`IAND` — Bitwise logical and](iand) intrinsic defined by the Fortran standard.\n\nStandard:  \nGNU extension\n\nClass:  \nFunction\n\nSyntax:  \n`RESULT = AND(I, J)`\n\nArguments:  \n|     |                                                                                                                                                                                                                                   |\n|-----|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `I` | The type shall be either a scalar `INTEGER` type or a scalar `LOGICAL` type or a boz-literal-constant.                                                                                                                            |\n| `J` | The type shall be the same as the type of `I` or a boz-literal-constant. `I` and `J` shall not both be boz-literal-constants. If either `I` or `J` is a boz-literal-constant, then the other argument must be a scalar `INTEGER`. |\n\nReturn value:  \nThe return type is either a scalar `INTEGER` or a scalar `LOGICAL`. If the kind type parameters differ, then the smaller kind type is implicitly converted to larger kind, and the return has the larger kind. A boz-literal-constant is converted to an `INTEGER` with the kind type parameter of the other argument as-if a call to [`INT` — Convert to integer type](int) occurred.\n\nExample:  \n``` example-preformatted\nPROGRAM test_and\n  LOGICAL :: T = .TRUE., F = .FALSE.\n  INTEGER :: a, b\n  DATA a / Z'F' /, b / Z'3' /\n\n  WRITE (*,*) AND(T, T), AND(T, F), AND(F, T), AND(F, F)\n  WRITE (*,*) AND(a, b)\nEND PROGRAM\n```\n\nSee also:  \nFortran 95 elemental function: [`IAND` — Bitwise logical and](iand)\n\nNext: [`ANINT` — Nearest whole number](anint), Previous: [`ALLOCATED` — Status of an allocatable entity](allocated), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/AND.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/AND.html)"
- name: 8.17. ANINT
  id: anint
  summary: 'Description: ANINT(A [, KIND]) rounds its argument to the nearest whole number'
  description: "Next: [`ANY` — Any value in `MASK` along `DIM` is true](any), Previous: [`AND` — Bitwise logical AND](and), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.17 ANINT — Nearest whole number [¶](#ANINT-----Nearest-whole-number)\n\nDescription:  \n`ANINT(A [, KIND])` rounds its argument to the nearest whole number.\n\nStandard:  \nFortran 77 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = ANINT(A [, KIND])`\n\nArguments:  \n|        |                                                                                                |\n|--------|------------------------------------------------------------------------------------------------|\n| `A`    | The type of the argument shall be `REAL`.                                                      |\n| `KIND` | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result. |\n\nReturn value:  \nThe return value is of type real with the kind type parameter of the argument if the optional `KIND` is absent; otherwise, the kind type parameter will be given by `KIND`. If `A` is greater than zero, `ANINT(A)` returns `AINT(X+0.5)`. If `A` is less than or equal to zero then it returns `AINT(X-0.5)`.\n\nExample:  \n``` example-preformatted\nprogram test_anint\n  real(4) x4\n  real(8) x8\n  x4 = 1.234E0_4\n  x8 = 4.321_8\n  print *, anint(x4), dnint(x8)\n  x8 = anint(x4,8)\nend program test_anint\n```\n\nSpecific names:  \n| Name       | Argument    | Return type | Standard             |\n|------------|-------------|-------------|----------------------|\n| `ANINT(A)` | `REAL(4) A` | `REAL(4)`   | Fortran 77 and later |\n| `DNINT(A)` | `REAL(8) A` | `REAL(8)`   | Fortran 77 and later |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ANINT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ANINT.html)"
- name: 8.18. ANY
  id: any
  summary: 'Arguments: | | | |--------|-------------------------------------------------------------------------------------------------------| | MASK | The type of the argument shall be LOGICAL and it shall not be scalar'
  description: "Next: [`ASIN` — Arcsine function](asin), Previous: [`ANINT` — Nearest whole number](anint), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.18 ANY — Any value in `MASK` along `DIM` is true [¶](#ANY-----Any-value-in-MASK-along-DIM-is-true)\n\nDescription:  \n`ANY(MASK [, DIM])` determines if any of the values in the logical array `MASK` along dimension `DIM` are `.TRUE.`.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n`RESULT = ANY(MASK [, DIM])`\n\nArguments:  \n|        |                                                                                                       |\n|--------|-------------------------------------------------------------------------------------------------------|\n| `MASK` | The type of the argument shall be `LOGICAL` and it shall not be scalar.                               |\n| `DIM`  | (Optional) `DIM` shall be a scalar integer with a value that lies between one and the rank of `MASK`. |\n\nReturn value:  \n`ANY(MASK)` returns a scalar value of type `LOGICAL` where the kind type parameter is the same as the kind type parameter of `MASK`. If `DIM` is present, then `ANY(MASK, DIM)` returns an array with the rank of `MASK` minus 1. The shape is determined from the shape of `MASK` where the `DIM` dimension is elided.\n\n\\(A\\)  \n`ANY(MASK)` is true if any element of `MASK` is true; otherwise, it is false. It also is false if `MASK` has zero size.\n\n\\(B\\)  \nIf the rank of `MASK` is one, then `ANY(MASK,DIM)` is equivalent to `ANY(MASK)`. If the rank is greater than one, then `ANY(MASK,DIM)` is determined by applying `ANY` to the array sections.\n\nExample:  \n``` example-preformatted\nprogram test_any\n  logical l\n  l = any((/.true., .true., .true./))\n  print *, l\n  call section\n  contains\n    subroutine section\n      integer a(2,3), b(2,3)\n      a = 1\n      b = 1\n      b(2,2) = 2\n      print *, any(a .eq. b, 1)\n      print *, any(a .eq. b, 2)\n    end subroutine section\nend program test_any\n```\n\nNext: [`ASIN` — Arcsine function](asin), Previous: [`ANINT` — Nearest whole number](anint), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ANY.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ANY.html)"
- name: 8.19. ASIN
  id: asin
  summary: 'Description: ASIN(X) computes the arcsine of its X (inverse of SIN(X))'
  description: "Next: [`ASIND` — Arcsine function, degrees](asind), Previous: [`ANY` — Any value in `MASK` along `DIM` is true](any), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.19 ASIN — Arcsine function [¶](#ASIN-----Arcsine-function)\n\nDescription:  \n`ASIN(X)` computes the arcsine of its `X` (inverse of `SIN(X)`).\n\nStandard:  \nFortran 77 and later, for a complex argument Fortran 2008 or later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = ASIN(X)`\n\nArguments:  \n|     |                                                                                                      |\n|-----|------------------------------------------------------------------------------------------------------|\n| `X` | The type shall be either `REAL` and a magnitude that is less than or equal to one - or be `COMPLEX`. |\n\nReturn value:  \nThe return value is of the same type and kind as `X`. The real part of the result is in radians and lies in the range *-\\pi/2 \\leq \\Re \\asin(x) \\leq \\pi/2*.\n\nExample:  \n``` example-preformatted\nprogram test_asin\n  real(8) :: x = 0.866_8\n  x = asin(x)\nend program test_asin\n```\n\nSpecific names:  \n| Name       | Argument    | Return type | Standard             |\n|------------|-------------|-------------|----------------------|\n| `ASIN(X)`  | `REAL(4) X` | `REAL(4)`   | Fortran 77 and later |\n| `DASIN(X)` | `REAL(8) X` | `REAL(8)`   | Fortran 77 and later |\n\nSee also:  \nInverse function: [`SIN` — Sine function](sin) Degrees function: [`ASIND` — Arcsine function, degrees](asind)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ASIN.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ASIN.html)"
- name: 8.20. ASIND
  id: asind
  summary: 'Description: ASIND(X) computes the arcsine of its X in degrees (inverse of SIND(X))'
  description: "Next: [`ASINH` — Inverse hyperbolic sine function](asinh), Previous: [`ASIN` — Arcsine function](asin), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.20 ASIND — Arcsine function, degrees [¶](#ASIND-----Arcsine-function_002c-degrees)\n\nDescription:  \n`ASIND(X)` computes the arcsine of its `X` in degrees (inverse of `SIND(X)`).\n\nThis function is for compatibility only and should be avoided in favor of standard constructs wherever possible.\n\nStandard:  \nGNU extension, enabled with `-fdec-math`.\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = ASIND(X)`\n\nArguments:  \n|     |                                                                                                      |\n|-----|------------------------------------------------------------------------------------------------------|\n| `X` | The type shall be either `REAL` and a magnitude that is less than or equal to one - or be `COMPLEX`. |\n\nReturn value:  \nThe return value is of the same type and kind as `X`. The real part of the result is in degrees and lies in the range *-90 \\leq \\Re \\asin(x) \\leq 90*.\n\nExample:  \n``` example-preformatted\nprogram test_asind\n  real(8) :: x = 0.866_8\n  x = asind(x)\nend program test_asind\n```\n\nSpecific names:  \n| Name        | Argument    | Return type | Standard      |\n|-------------|-------------|-------------|---------------|\n| `ASIND(X)`  | `REAL(4) X` | `REAL(4)`   | GNU extension |\n| `DASIND(X)` | `REAL(8) X` | `REAL(8)`   | GNU extension |\n\nSee also:  \nInverse function: [`SIND` — Sine function, degrees](sind) Radians function: [`ASIN` — Arcsine function](asin)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ASIND.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ASIND.html)"
- name: 8.21. ASINH
  id: asinh
  summary: 'Description: ASINH(X) computes the inverse hyperbolic sine of X'
  description: "Next: [`ASSOCIATED` — Status of a pointer or pointer/target pair](associated), Previous: [`ASIND` — Arcsine function, degrees](asind), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.21 ASINH — Inverse hyperbolic sine function [¶](#ASINH-----Inverse-hyperbolic-sine-function)\n\nDescription:  \n`ASINH(X)` computes the inverse hyperbolic sine of `X`.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = ASINH(X)`\n\nArguments:  \n|     |                                        |\n|-----|----------------------------------------|\n| `X` | The type shall be `REAL` or `COMPLEX`. |\n\nReturn value:  \nThe return value is of the same type and kind as `X`. If `X` is complex, the imaginary part of the result is in radians and lies between *-\\pi/2 \\leq \\Im \\asinh(x) \\leq \\pi/2*.\n\nExample:  \n``` example-preformatted\nPROGRAM test_asinh\n  REAL(8), DIMENSION(3) :: x = (/ -1.0, 0.0, 1.0 /)\n  WRITE (*,*) ASINH(x)\nEND PROGRAM\n```\n\nSpecific names:  \n| Name        | Argument    | Return type | Standard       |\n|-------------|-------------|-------------|----------------|\n| `DASINH(X)` | `REAL(8) X` | `REAL(8)`   | GNU extension. |\n\nSee also:  \nInverse function: [`SINH` — Hyperbolic sine function](sinh)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ASINH.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ASINH.html)"
- name: 8.22. ASSOCIATED
  id: associated
  summary: 'Description: ASSOCIATED(POINTER [, TARGET]) determines the status of the pointer POINTER or if POINTER is associated with the target TARGET'
  description: "Next: [`ATAN` — Arctangent function](atan), Previous: [`ASINH` — Inverse hyperbolic sine function](asinh), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.22 ASSOCIATED — Status of a pointer or pointer/target pair [¶](#ASSOCIATED-----Status-of-a-pointer-or-pointer_002ftarget-pair)\n\nDescription:  \n`ASSOCIATED(POINTER [, TARGET])` determines the status of the pointer `POINTER` or if `POINTER` is associated with the target `TARGET`.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = ASSOCIATED(POINTER [, TARGET])`\n\nArguments:  \n|           |                                                                                                                                   |\n|-----------|-----------------------------------------------------------------------------------------------------------------------------------|\n| `POINTER` | `POINTER` shall have the `POINTER` attribute and it can be of any type.                                                           |\n| `TARGET`  | (Optional) `TARGET` shall be a pointer or a target. It must have the same type, kind type parameter, and array rank as `POINTER`. |\n\nThe association status of neither `POINTER` nor `TARGET` shall be undefined.\n\nReturn value:  \n`ASSOCIATED(POINTER)` returns a scalar value of type `LOGICAL(4)`. There are several cases:\n\n\\(A\\) When the optional `TARGET` is not present then  \n`ASSOCIATED(POINTER)` is true if `POINTER` is associated with a target; otherwise, it returns false.\n\n\\(B\\) If `TARGET` is present and a scalar target, the result is true if  \n`TARGET` is not a zero-sized storage sequence and the target associated with `POINTER` occupies the same storage units. If `POINTER` is disassociated, the result is false.\n\n\\(C\\) If `TARGET` is present and an array target, the result is true if  \n`TARGET` and `POINTER` have the same shape, are not zero-sized arrays, are arrays whose elements are not zero-sized storage sequences, and `TARGET` and `POINTER` occupy the same storage units in array element order. As in case(B), the result is false, if `POINTER` is disassociated.\n\n\\(D\\) If `TARGET` is present and an scalar pointer, the result is true  \nif `TARGET` is associated with `POINTER`, the target associated with `TARGET` are not zero-sized storage sequences and occupy the same storage units. The result is false, if either `TARGET` or `POINTER` is disassociated.\n\n\\(E\\) If `TARGET` is present and an array pointer, the result is true if  \ntarget associated with `POINTER` and the target associated with `TARGET` have the same shape, are not zero-sized arrays, are arrays whose elements are not zero-sized storage sequences, and `TARGET` and `POINTER` occupy the same storage units in array element order. The result is false, if either `TARGET` or `POINTER` is disassociated.\n\nExample:  \n``` example-preformatted\nprogram test_associated\n   implicit none\n   real, target  :: tgt(2) = (/1., 2./)\n   real, pointer :: ptr(:)\n   ptr => tgt\n   if (associated(ptr)     .eqv. .false.) call abort\n   if (associated(ptr,tgt) .eqv. .false.) call abort\nend program test_associated\n```\n\nSee also:  \n[`NULL` — Function that returns an disassociated pointer](null)\n\nNext: [`ATAN` — Arctangent function](atan), Previous: [`ASINH` — Inverse hyperbolic sine function](asinh), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ASSOCIATED.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ASSOCIATED.html)"
- name: 8.23. ATAN
  id: atan
  summary: 'Description: ATAN(X) computes the arctangent of X'
  description: "Next: [`ATAND` — Arctangent function, degrees](atand), Previous: [`ASSOCIATED` — Status of a pointer or pointer/target pair](associated), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.23 ATAN — Arctangent function [¶](#ATAN-----Arctangent-function)\n\nDescription:  \n`ATAN(X)` computes the arctangent of `X`.\n\nStandard:  \nFortran 77 and later, for a complex argument and for two arguments Fortran 2008 or later\n\nClass:  \nElemental function\n\nSyntax:  \n|                       |\n|-----------------------|\n| `RESULT = ATAN(X)`    |\n| `RESULT = ATAN(Y, X)` |\n\nArguments:  \n|     |                                                                              |\n|-----|------------------------------------------------------------------------------|\n| `X` | The type shall be `REAL` or `COMPLEX`; if `Y` is present, `X` shall be REAL. |\n| `Y` | The type and kind type parameter shall be the same as `X`.                   |\n\nReturn value:  \nThe return value is of the same type and kind as `X`. If `Y` is present, the result is identical to `ATAN2(Y,X)`. Otherwise, it the arcus tangent of `X`, where the real part of the result is in radians and lies in the range *-\\pi/2 \\leq \\Re \\atan(x) \\leq \\pi/2*.\n\nExample:  \n``` example-preformatted\nprogram test_atan\n  real(8) :: x = 2.866_8\n  x = atan(x)\nend program test_atan\n```\n\nSpecific names:  \n| Name       | Argument    | Return type | Standard             |\n|------------|-------------|-------------|----------------------|\n| `ATAN(X)`  | `REAL(4) X` | `REAL(4)`   | Fortran 77 and later |\n| `DATAN(X)` | `REAL(8) X` | `REAL(8)`   | Fortran 77 and later |\n\nSee also:  \nInverse function: [`TAN` — Tangent function](tan) Degrees function: [`ATAND` — Arctangent function, degrees](atand)\n\nNext: [`ATAND` — Arctangent function, degrees](atand), Previous: [`ASSOCIATED` — Status of a pointer or pointer/target pair](associated), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATAN.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATAN.html)"
- name: 8.24. ATAND
  id: atand
  summary: 'Description: ATAND(X) computes the arctangent of X in degrees (inverse of TAND — Tangent function, degrees)'
  description: "Next: [`ATAN2` — Arctangent function](atan2), Previous: [`ATAN` — Arctangent function](atan), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.24 ATAND — Arctangent function, degrees [¶](#ATAND-----Arctangent-function_002c-degrees)\n\nDescription:  \n`ATAND(X)` computes the arctangent of `X` in degrees (inverse of [`TAND` — Tangent function, degrees](tand)).\n\nThis function is for compatibility only and should be avoided in favor of standard constructs wherever possible.\n\nStandard:  \nGNU extension, enabled with `-fdec-math`.\n\nClass:  \nElemental function\n\nSyntax:  \n|                        |\n|------------------------|\n| `RESULT = ATAND(X)`    |\n| `RESULT = ATAND(Y, X)` |\n\nArguments:  \n|     |                                                                              |\n|-----|------------------------------------------------------------------------------|\n| `X` | The type shall be `REAL` or `COMPLEX`; if `Y` is present, `X` shall be REAL. |\n| `Y` | The type and kind type parameter shall be the same as `X`.                   |\n\nReturn value:  \nThe return value is of the same type and kind as `X`. If `Y` is present, the result is identical to `ATAND2(Y,X)`. Otherwise, it is the arcus tangent of `X`, where the real part of the result is in degrees and lies in the range *-90 \\leq \\Re \\atand(x) \\leq 90*.\n\nExample:  \n``` example-preformatted\nprogram test_atand\n  real(8) :: x = 2.866_8\n  x = atand(x)\nend program test_atand\n```\n\nSpecific names:  \n| Name        | Argument    | Return type | Standard      |\n|-------------|-------------|-------------|---------------|\n| `ATAND(X)`  | `REAL(4) X` | `REAL(4)`   | GNU extension |\n| `DATAND(X)` | `REAL(8) X` | `REAL(8)`   | GNU extension |\n\nSee also:  \nInverse function: [`TAND` — Tangent function, degrees](tand) Radians function: [`ATAN` — Arctangent function](atan)\n\nNext: [`ATAN2` — Arctangent function](atan2), Previous: [`ATAN` — Arctangent function](atan), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATAND.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATAND.html)"
- name: 8.25. ATAN2
  id: atan2
  summary: 'Description: ATAN2(Y, X) computes the principal value of the argument function of the complex number X + i Y'
  description: "Next: [`ATAN2D` — Arctangent function, degrees](atan2d), Previous: [`ATAND` — Arctangent function, degrees](atand), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.25 ATAN2 — Arctangent function [¶](#ATAN2-----Arctangent-function)\n\nDescription:  \n`ATAN2(Y, X)` computes the principal value of the argument function of the complex number *X + i Y*. This function can be used to transform from Cartesian into polar coordinates and allows to determine the angle in the correct quadrant.\n\nStandard:  \nFortran 77 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = ATAN2(Y, X)`\n\nArguments:  \n|     |                                                                                                      |\n|-----|------------------------------------------------------------------------------------------------------|\n| `Y` | The type shall be `REAL`.                                                                            |\n| `X` | The type and kind type parameter shall be the same as `Y`. If `Y` is zero, then `X` must be nonzero. |\n\nReturn value:  \nThe return value has the same type and kind type parameter as `Y`. It is the principal value of the complex number *X + i Y*. If `X` is nonzero, then it lies in the range *-\\pi \\le \\atan (x) \\leq \\pi*. The sign is positive if `Y` is positive. If `Y` is zero, then the return value is zero if `X` is strictly positive, *\\pi* if `X` is negative and `Y` is positive zero (or the processor does not handle signed zeros), and *-\\pi* if `X` is negative and `Y` is negative zero. Finally, if `X` is zero, then the magnitude of the result is *\\pi/2*.\n\nExample:  \n``` example-preformatted\nprogram test_atan2\n  real(4) :: x = 1.e0_4, y = 0.5e0_4\n  x = atan2(y,x)\nend program test_atan2\n```\n\nSpecific names:  \n| Name           | Argument       | Return type | Standard             |\n|----------------|----------------|-------------|----------------------|\n| `ATAN2(X, Y)`  | `REAL(4) X, Y` | `REAL(4)`   | Fortran 77 and later |\n| `DATAN2(X, Y)` | `REAL(8) X, Y` | `REAL(8)`   | Fortran 77 and later |\n\nSee also:  \nAlias: [`ATAN` — Arctangent function](atan) Degrees function: [`ATAN2D` — Arctangent function, degrees](atan2d)\n\nNext: [`ATAN2D` — Arctangent function, degrees](atan2d), Previous: [`ATAND` — Arctangent function, degrees](atand), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATAN2.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATAN2.html)"
- name: 8.26. ATAN2D
  id: atan2d
  summary: 'Description: ATAN2D(Y, X) computes the principal value of the argument function of the complex number X + i Y in degrees'
  description: "Next: [`ATANH` — Inverse hyperbolic tangent function](atanh), Previous: [`ATAN2` — Arctangent function](atan2), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.26 ATAN2D — Arctangent function, degrees [¶](#ATAN2D-----Arctangent-function_002c-degrees)\n\nDescription:  \n`ATAN2D(Y, X)` computes the principal value of the argument function of the complex number *X + i Y* in degrees. This function can be used to transform from Cartesian into polar coordinates and allows to determine the angle in the correct quadrant.\n\nThis function is for compatibility only and should be avoided in favor of standard constructs wherever possible.\n\nStandard:  \nGNU extension, enabled with `-fdec-math`.\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = ATAN2D(Y, X)`\n\nArguments:  \n|     |                                                                                                      |\n|-----|------------------------------------------------------------------------------------------------------|\n| `Y` | The type shall be `REAL`.                                                                            |\n| `X` | The type and kind type parameter shall be the same as `Y`. If `Y` is zero, then `X` must be nonzero. |\n\nReturn value:  \nThe return value has the same type and kind type parameter as `Y`. It is the principal value of the complex number *X + i Y*. If `X` is nonzero, then it lies in the range *-180 \\le \\atan (x) \\leq 180*. The sign is positive if `Y` is positive. If `Y` is zero, then the return value is zero if `X` is strictly positive, *180* if `X` is negative and `Y` is positive zero (or the processor does not handle signed zeros), and *-180* if `X` is negative and `Y` is negative zero. Finally, if `X` is zero, then the magnitude of the result is *90*.\n\nExample:  \n``` example-preformatted\nprogram test_atan2d\n  real(4) :: x = 1.e0_4, y = 0.5e0_4\n  x = atan2d(y,x)\nend program test_atan2d\n```\n\nSpecific names:  \n| Name            | Argument       | Return type | Standard      |\n|-----------------|----------------|-------------|---------------|\n| `ATAN2D(X, Y)`  | `REAL(4) X, Y` | `REAL(4)`   | GNU extension |\n| `DATAN2D(X, Y)` | `REAL(8) X, Y` | `REAL(8)`   | GNU extension |\n\nSee also:  \nAlias: [`ATAND` — Arctangent function, degrees](atand) Radians function: [`ATAN2` — Arctangent function](atan2)\n\nNext: [`ATANH` — Inverse hyperbolic tangent function](atanh), Previous: [`ATAN2` — Arctangent function](atan2), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATAN2D.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATAN2D.html)"
- name: 8.27. ATANH
  id: atanh
  summary: 'Description: ATANH(X) computes the inverse hyperbolic tangent of X'
  description: "Next: [`ATOMIC_ADD` — Atomic ADD operation](atomic_005fadd), Previous: [`ATAN2D` — Arctangent function, degrees](atan2d), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.27 ATANH — Inverse hyperbolic tangent function [¶](#ATANH-----Inverse-hyperbolic-tangent-function)\n\nDescription:  \n`ATANH(X)` computes the inverse hyperbolic tangent of `X`.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = ATANH(X)`\n\nArguments:  \n|     |                                        |\n|-----|----------------------------------------|\n| `X` | The type shall be `REAL` or `COMPLEX`. |\n\nReturn value:  \nThe return value has same type and kind as `X`. If `X` is complex, the imaginary part of the result is in radians and lies between *-\\pi/2 \\leq \\Im \\atanh(x) \\leq \\pi/2*.\n\nExample:  \n``` example-preformatted\nPROGRAM test_atanh\n  REAL, DIMENSION(3) :: x = (/ -1.0, 0.0, 1.0 /)\n  WRITE (*,*) ATANH(x)\nEND PROGRAM\n```\n\nSpecific names:  \n| Name        | Argument    | Return type | Standard      |\n|-------------|-------------|-------------|---------------|\n| `DATANH(X)` | `REAL(8) X` | `REAL(8)`   | GNU extension |\n\nSee also:  \nInverse function: [`TANH` — Hyperbolic tangent function](tanh)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATANH.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATANH.html)"
- name: 8.28. ATOMIC_ADD
  id: atomic_005fadd
  summary: 'Description: ATOMIC_ADD(ATOM, VALUE) atomically adds the value of VALUE to the variable ATOM'
  description: "Next: [`ATOMIC_AND` — Atomic bitwise AND operation](atomic_005fand), Previous: [`ATANH` — Inverse hyperbolic tangent function](atanh), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.28 ATOMIC_ADD — Atomic ADD operation [¶](#ATOMIC_005fADD-----Atomic-ADD-operation)\n\nDescription:  \n`ATOMIC_ADD(ATOM, VALUE)` atomically adds the value of `VALUE` to the variable `ATOM`. When `STAT` is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed `ATOM`, if the remote image has stopped, it is assigned the value of `ISO_FORTRAN_ENV`’s `STAT_STOPPED_IMAGE` and if the remote image has failed, the value `STAT_FAILED_IMAGE`.\n\nStandard:  \nTS 18508 or later\n\nClass:  \nAtomic subroutine\n\nSyntax:  \n`CALL ATOMIC_ADD (ATOM, VALUE [, STAT])`\n\nArguments:  \n|         |                                                                                                            |\n|---------|------------------------------------------------------------------------------------------------------------|\n| `ATOM`  | Scalar coarray or coindexed variable of integer type with `ATOMIC_INT_KIND` kind.                          |\n| `VALUE` | Scalar of the same type as `ATOM`. If the kind is different, the value is converted to the kind of `ATOM`. |\n| `STAT`  | (optional) Scalar default-kind integer variable.                                                           |\n\nExample:  \n``` example-preformatted\nprogram atomic\n  use iso_fortran_env\n  integer(atomic_int_kind) :: atom[*]\n  call atomic_add (atom[1], this_image())\nend program atomic\n```\n\nSee also:  \n[`ATOMIC_DEFINE` — Setting a variable atomically](atomic_005fdefine), [`ATOMIC_FETCH_ADD` — Atomic ADD operation with prior fetch](atomic_005ffetch_005fadd), [`ISO_FORTRAN_ENV`](iso_005ffortran_005fenv), [`ATOMIC_AND` — Atomic bitwise AND operation](atomic_005fand), [`ATOMIC_OR` — Atomic bitwise OR operation](atomic_005for), [`ATOMIC_XOR` — Atomic bitwise OR operation](atomic_005fxor)\n\nNext: [`ATOMIC_AND` — Atomic bitwise AND operation](atomic_005fand), Previous: [`ATANH` — Inverse hyperbolic tangent function](atanh), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATOMIC_005fADD.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATOMIC_005fADD.html)"
- name: 8.29. ATOMIC_AND
  id: atomic_005fand
  summary: 'Description: ATOMIC_AND(ATOM, VALUE) atomically defines ATOM with the bitwise AND between the values of ATOM and VALUE'
  description: "Next: [`ATOMIC_CAS` — Atomic compare and swap](atomic_005fcas), Previous: [`ATOMIC_ADD` — Atomic ADD operation](atomic_005fadd), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.29 ATOMIC_AND — Atomic bitwise AND operation [¶](#ATOMIC_005fAND-----Atomic-bitwise-AND-operation)\n\nDescription:  \n`ATOMIC_AND(ATOM, VALUE)` atomically defines `ATOM` with the bitwise AND between the values of `ATOM` and `VALUE`. When `STAT` is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed `ATOM`, if the remote image has stopped, it is assigned the value of `ISO_FORTRAN_ENV`’s `STAT_STOPPED_IMAGE` and if the remote image has failed, the value `STAT_FAILED_IMAGE`.\n\nStandard:  \nTS 18508 or later\n\nClass:  \nAtomic subroutine\n\nSyntax:  \n`CALL ATOMIC_AND (ATOM, VALUE [, STAT])`\n\nArguments:  \n|         |                                                                                                            |\n|---------|------------------------------------------------------------------------------------------------------------|\n| `ATOM`  | Scalar coarray or coindexed variable of integer type with `ATOMIC_INT_KIND` kind.                          |\n| `VALUE` | Scalar of the same type as `ATOM`. If the kind is different, the value is converted to the kind of `ATOM`. |\n| `STAT`  | (optional) Scalar default-kind integer variable.                                                           |\n\nExample:  \n``` example-preformatted\nprogram atomic\n  use iso_fortran_env\n  integer(atomic_int_kind) :: atom[*]\n  call atomic_and (atom[1], int(b'10100011101'))\nend program atomic\n```\n\nSee also:  \n[`ATOMIC_DEFINE` — Setting a variable atomically](atomic_005fdefine), [`ATOMIC_FETCH_AND` — Atomic bitwise AND operation with prior fetch](atomic_005ffetch_005fand), [`ISO_FORTRAN_ENV`](iso_005ffortran_005fenv), [`ATOMIC_ADD` — Atomic ADD operation](atomic_005fadd), [`ATOMIC_OR` — Atomic bitwise OR operation](atomic_005for), [`ATOMIC_XOR` — Atomic bitwise OR operation](atomic_005fxor)\n\nNext: [`ATOMIC_CAS` — Atomic compare and swap](atomic_005fcas), Previous: [`ATOMIC_ADD` — Atomic ADD operation](atomic_005fadd), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATOMIC_005fAND.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATOMIC_005fAND.html)"
- name: 8.30. ATOMIC_CAS
  id: atomic_005fcas
  summary: 'Description: ATOMIC_CAS compares the variable ATOM with the value of COMPARE; if the value is the same, ATOM is set to the value of NEW'
  description: "Next: [`ATOMIC_DEFINE` — Setting a variable atomically](atomic_005fdefine), Previous: [`ATOMIC_AND` — Atomic bitwise AND operation](atomic_005fand), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.30 ATOMIC_CAS — Atomic compare and swap [¶](#ATOMIC_005fCAS-----Atomic-compare-and-swap)\n\nDescription:  \n`ATOMIC_CAS` compares the variable `ATOM` with the value of `COMPARE`; if the value is the same, `ATOM` is set to the value of `NEW`. Additionally, `OLD` is set to the value of `ATOM` that was used for the comparison. When `STAT` is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed `ATOM`, if the remote image has stopped, it is assigned the value of `ISO_FORTRAN_ENV`’s `STAT_STOPPED_IMAGE` and if the remote image has failed, the value `STAT_FAILED_IMAGE`.\n\nStandard:  \nTS 18508 or later\n\nClass:  \nAtomic subroutine\n\nSyntax:  \n`CALL ATOMIC_CAS (ATOM, OLD, COMPARE, NEW [, STAT])`\n\nArguments:  \n|           |                                                                                                                                          |\n|-----------|------------------------------------------------------------------------------------------------------------------------------------------|\n| `ATOM`    | Scalar coarray or coindexed variable of either integer type with `ATOMIC_INT_KIND` kind or logical type with `ATOMIC_LOGICAL_KIND` kind. |\n| `OLD`     | Scalar of the same type and kind as `ATOM`.                                                                                              |\n| `COMPARE` | Scalar variable of the same type and kind as `ATOM`.                                                                                     |\n| `NEW`     | Scalar variable of the same type as `ATOM`. If kind is different, the value is converted to the kind of `ATOM`.                          |\n| `STAT`    | (optional) Scalar default-kind integer variable.                                                                                         |\n\nExample:  \n``` example-preformatted\nprogram atomic\n  use iso_fortran_env\n  logical(atomic_logical_kind) :: atom[*], prev\n  call atomic_cas (atom[1], prev, .false., .true.))\nend program atomic\n```\n\nSee also:  \n[`ATOMIC_DEFINE` — Setting a variable atomically](atomic_005fdefine), [`ATOMIC_REF` — Obtaining the value of a variable atomically](atomic_005fref), [`ISO_FORTRAN_ENV`](iso_005ffortran_005fenv)\n\nNext: [`ATOMIC_DEFINE` — Setting a variable atomically](atomic_005fdefine), Previous: [`ATOMIC_AND` — Atomic bitwise AND operation](atomic_005fand), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATOMIC_005fCAS.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATOMIC_005fCAS.html)"
- name: 8.31. ATOMIC_DEFINE
  id: atomic_005fdefine
  summary: 'Description: ATOMIC_DEFINE(ATOM, VALUE) defines the variable ATOM with the value VALUE atomically'
  description: "Next: [`ATOMIC_FETCH_ADD` — Atomic ADD operation with prior fetch](atomic_005ffetch_005fadd), Previous: [`ATOMIC_CAS` — Atomic compare and swap](atomic_005fcas), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.31 ATOMIC_DEFINE — Setting a variable atomically [¶](#ATOMIC_005fDEFINE-----Setting-a-variable-atomically)\n\nDescription:  \n`ATOMIC_DEFINE(ATOM, VALUE)` defines the variable `ATOM` with the value `VALUE` atomically. When `STAT` is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed `ATOM`, if the remote image has stopped, it is assigned the value of `ISO_FORTRAN_ENV`’s `STAT_STOPPED_IMAGE` and if the remote image has failed, the value `STAT_FAILED_IMAGE`.\n\nStandard:  \nFortran 2008 and later; with `STAT`, TS 18508 or later\n\nClass:  \nAtomic subroutine\n\nSyntax:  \n`CALL ATOMIC_DEFINE (ATOM, VALUE [, STAT])`\n\nArguments:  \n|         |                                                                                                                                          |\n|---------|------------------------------------------------------------------------------------------------------------------------------------------|\n| `ATOM`  | Scalar coarray or coindexed variable of either integer type with `ATOMIC_INT_KIND` kind or logical type with `ATOMIC_LOGICAL_KIND` kind. |\n| `VALUE` | Scalar of the same type as `ATOM`. If the kind is different, the value is converted to the kind of `ATOM`.                               |\n| `STAT`  | (optional) Scalar default-kind integer variable.                                                                                         |\n\nExample:  \n``` example-preformatted\nprogram atomic\n  use iso_fortran_env\n  integer(atomic_int_kind) :: atom[*]\n  call atomic_define (atom[1], this_image())\nend program atomic\n```\n\nSee also:  \n[`ATOMIC_REF` — Obtaining the value of a variable atomically](atomic_005fref), [`ATOMIC_CAS` — Atomic compare and swap](atomic_005fcas), [`ISO_FORTRAN_ENV`](iso_005ffortran_005fenv), [`ATOMIC_ADD` — Atomic ADD operation](atomic_005fadd), [`ATOMIC_AND` — Atomic bitwise AND operation](atomic_005fand), [`ATOMIC_OR` — Atomic bitwise OR operation](atomic_005for), [`ATOMIC_XOR` — Atomic bitwise OR operation](atomic_005fxor)\n\nNext: [`ATOMIC_FETCH_ADD` — Atomic ADD operation with prior fetch](atomic_005ffetch_005fadd), Previous: [`ATOMIC_CAS` — Atomic compare and swap](atomic_005fcas), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATOMIC_005fDEFINE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATOMIC_005fDEFINE.html)"
- name: 8.32. ATOMIC_FETCH_ADD
  id: atomic_005ffetch_005fadd
  summary: 'Description: ATOMIC_FETCH_ADD(ATOM, VALUE, OLD) atomically stores the value of ATOM in OLD and adds the value of VALUE to the variable ATOM'
  description: "Next: [`ATOMIC_FETCH_AND` — Atomic bitwise AND operation with prior fetch](atomic_005ffetch_005fand), Previous: [`ATOMIC_DEFINE` — Setting a variable atomically](atomic_005fdefine), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.32 ATOMIC_FETCH_ADD — Atomic ADD operation with prior fetch [¶](#ATOMIC_005fFETCH_005fADD-----Atomic-ADD-operation-with-prior-fetch)\n\nDescription:  \n`ATOMIC_FETCH_ADD(ATOM, VALUE, OLD)` atomically stores the value of `ATOM` in `OLD` and adds the value of `VALUE` to the variable `ATOM`. When `STAT` is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed `ATOM`, if the remote image has stopped, it is assigned the value of `ISO_FORTRAN_ENV`’s `STAT_STOPPED_IMAGE` and if the remote image has failed, the value `STAT_FAILED_IMAGE`.\n\nStandard:  \nTS 18508 or later\n\nClass:  \nAtomic subroutine\n\nSyntax:  \n`CALL ATOMIC_FETCH_ADD (ATOM, VALUE, old [, STAT])`\n\nArguments:  \n|         |                                                                                                               |\n|---------|---------------------------------------------------------------------------------------------------------------|\n| `ATOM`  | Scalar coarray or coindexed variable of integer type with `ATOMIC_INT_KIND` kind. `ATOMIC_LOGICAL_KIND` kind. |\n| `VALUE` | Scalar of the same type as `ATOM`. If the kind is different, the value is converted to the kind of `ATOM`.    |\n| `OLD`   | Scalar of the same type and kind as `ATOM`.                                                                   |\n| `STAT`  | (optional) Scalar default-kind integer variable.                                                              |\n\nExample:  \n``` example-preformatted\nprogram atomic\n  use iso_fortran_env\n  integer(atomic_int_kind) :: atom[*], old\n  call atomic_add (atom[1], this_image(), old)\nend program atomic\n```\n\nSee also:  \n[`ATOMIC_DEFINE` — Setting a variable atomically](atomic_005fdefine), [`ATOMIC_ADD` — Atomic ADD operation](atomic_005fadd), [`ISO_FORTRAN_ENV`](iso_005ffortran_005fenv), [`ATOMIC_FETCH_AND` — Atomic bitwise AND operation with prior fetch](atomic_005ffetch_005fand), [`ATOMIC_FETCH_OR` — Atomic bitwise OR operation with prior fetch](atomic_005ffetch_005for), [`ATOMIC_FETCH_XOR` — Atomic bitwise XOR operation with prior fetch](atomic_005ffetch_005fxor)\n\nNext: [`ATOMIC_FETCH_AND` — Atomic bitwise AND operation with prior fetch](atomic_005ffetch_005fand), Previous: [`ATOMIC_DEFINE` — Setting a variable atomically](atomic_005fdefine), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATOMIC_005fFETCH_005fADD.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATOMIC_005fFETCH_005fADD.html)"
- name: 8.33. ATOMIC_FETCH_AND
  id: atomic_005ffetch_005fand
  summary: 'Description: ATOMIC_AND(ATOM, VALUE) atomically stores the value of ATOM in OLD and defines ATOM with the bitwise AND between the values of ATOM and VALUE'
  description: "Next: [`ATOMIC_FETCH_OR` — Atomic bitwise OR operation with prior fetch](atomic_005ffetch_005for), Previous: [`ATOMIC_FETCH_ADD` — Atomic ADD operation with prior fetch](atomic_005ffetch_005fadd), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.33 ATOMIC_FETCH_AND — Atomic bitwise AND operation with prior fetch [¶](#ATOMIC_005fFETCH_005fAND-----Atomic-bitwise-AND-operation-with-prior-fetch)\n\nDescription:  \n`ATOMIC_AND(ATOM, VALUE)` atomically stores the value of `ATOM` in `OLD` and defines `ATOM` with the bitwise AND between the values of `ATOM` and `VALUE`. When `STAT` is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed `ATOM`, if the remote image has stopped, it is assigned the value of `ISO_FORTRAN_ENV`’s `STAT_STOPPED_IMAGE` and if the remote image has failed, the value `STAT_FAILED_IMAGE`.\n\nStandard:  \nTS 18508 or later\n\nClass:  \nAtomic subroutine\n\nSyntax:  \n`CALL ATOMIC_FETCH_AND (ATOM, VALUE, OLD [, STAT])`\n\nArguments:  \n|         |                                                                                                            |\n|---------|------------------------------------------------------------------------------------------------------------|\n| `ATOM`  | Scalar coarray or coindexed variable of integer type with `ATOMIC_INT_KIND` kind.                          |\n| `VALUE` | Scalar of the same type as `ATOM`. If the kind is different, the value is converted to the kind of `ATOM`. |\n| `OLD`   | Scalar of the same type and kind as `ATOM`.                                                                |\n| `STAT`  | (optional) Scalar default-kind integer variable.                                                           |\n\nExample:  \n``` example-preformatted\nprogram atomic\n  use iso_fortran_env\n  integer(atomic_int_kind) :: atom[*], old\n  call atomic_fetch_and (atom[1], int(b'10100011101'), old)\nend program atomic\n```\n\nSee also:  \n[`ATOMIC_DEFINE` — Setting a variable atomically](atomic_005fdefine), [`ATOMIC_AND` — Atomic bitwise AND operation](atomic_005fand), [`ISO_FORTRAN_ENV`](iso_005ffortran_005fenv), [`ATOMIC_FETCH_ADD` — Atomic ADD operation with prior fetch](atomic_005ffetch_005fadd), [`ATOMIC_FETCH_OR` — Atomic bitwise OR operation with prior fetch](atomic_005ffetch_005for), [`ATOMIC_FETCH_XOR` — Atomic bitwise XOR operation with prior fetch](atomic_005ffetch_005fxor)\n\nNext: [`ATOMIC_FETCH_OR` — Atomic bitwise OR operation with prior fetch](atomic_005ffetch_005for), Previous: [`ATOMIC_FETCH_ADD` — Atomic ADD operation with prior fetch](atomic_005ffetch_005fadd), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATOMIC_005fFETCH_005fAND.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATOMIC_005fFETCH_005fAND.html)"
- name: 8.34. ATOMIC_FETCH_OR
  id: atomic_005ffetch_005for
  summary: 'Description: ATOMIC_OR(ATOM, VALUE) atomically stores the value of ATOM in OLD and defines ATOM with the bitwise OR between the values of ATOM and VALUE'
  description: "Next: [`ATOMIC_FETCH_XOR` — Atomic bitwise XOR operation with prior fetch](atomic_005ffetch_005fxor), Previous: [`ATOMIC_FETCH_AND` — Atomic bitwise AND operation with prior fetch](atomic_005ffetch_005fand), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.34 ATOMIC_FETCH_OR — Atomic bitwise OR operation with prior fetch [¶](#ATOMIC_005fFETCH_005fOR-----Atomic-bitwise-OR-operation-with-prior-fetch)\n\nDescription:  \n`ATOMIC_OR(ATOM, VALUE)` atomically stores the value of `ATOM` in `OLD` and defines `ATOM` with the bitwise OR between the values of `ATOM` and `VALUE`. When `STAT` is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed `ATOM`, if the remote image has stopped, it is assigned the value of `ISO_FORTRAN_ENV`’s `STAT_STOPPED_IMAGE` and if the remote image has failed, the value `STAT_FAILED_IMAGE`.\n\nStandard:  \nTS 18508 or later\n\nClass:  \nAtomic subroutine\n\nSyntax:  \n`CALL ATOMIC_FETCH_OR (ATOM, VALUE, OLD [, STAT])`\n\nArguments:  \n|         |                                                                                                            |\n|---------|------------------------------------------------------------------------------------------------------------|\n| `ATOM`  | Scalar coarray or coindexed variable of integer type with `ATOMIC_INT_KIND` kind.                          |\n| `VALUE` | Scalar of the same type as `ATOM`. If the kind is different, the value is converted to the kind of `ATOM`. |\n| `OLD`   | Scalar of the same type and kind as `ATOM`.                                                                |\n| `STAT`  | (optional) Scalar default-kind integer variable.                                                           |\n\nExample:  \n``` example-preformatted\nprogram atomic\n  use iso_fortran_env\n  integer(atomic_int_kind) :: atom[*], old\n  call atomic_fetch_or (atom[1], int(b'10100011101'), old)\nend program atomic\n```\n\nSee also:  \n[`ATOMIC_DEFINE` — Setting a variable atomically](atomic_005fdefine), [`ATOMIC_OR` — Atomic bitwise OR operation](atomic_005for), [`ISO_FORTRAN_ENV`](iso_005ffortran_005fenv), [`ATOMIC_FETCH_ADD` — Atomic ADD operation with prior fetch](atomic_005ffetch_005fadd), [`ATOMIC_FETCH_AND` — Atomic bitwise AND operation with prior fetch](atomic_005ffetch_005fand), [`ATOMIC_FETCH_XOR` — Atomic bitwise XOR operation with prior fetch](atomic_005ffetch_005fxor)\n\nNext: [`ATOMIC_FETCH_XOR` — Atomic bitwise XOR operation with prior fetch](atomic_005ffetch_005fxor), Previous: [`ATOMIC_FETCH_AND` — Atomic bitwise AND operation with prior fetch](atomic_005ffetch_005fand), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATOMIC_005fFETCH_005fOR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATOMIC_005fFETCH_005fOR.html)"
- name: 8.35. ATOMIC_FETCH_XOR
  id: atomic_005ffetch_005fxor
  summary: 'Description: ATOMIC_XOR(ATOM, VALUE) atomically stores the value of ATOM in OLD and defines ATOM with the bitwise XOR between the values of ATOM and VALUE'
  description: "Next: [`ATOMIC_OR` — Atomic bitwise OR operation](atomic_005for), Previous: [`ATOMIC_FETCH_OR` — Atomic bitwise OR operation with prior fetch](atomic_005ffetch_005for), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.35 ATOMIC_FETCH_XOR — Atomic bitwise XOR operation with prior fetch [¶](#ATOMIC_005fFETCH_005fXOR-----Atomic-bitwise-XOR-operation-with-prior-fetch)\n\nDescription:  \n`ATOMIC_XOR(ATOM, VALUE)` atomically stores the value of `ATOM` in `OLD` and defines `ATOM` with the bitwise XOR between the values of `ATOM` and `VALUE`. When `STAT` is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed `ATOM`, if the remote image has stopped, it is assigned the value of `ISO_FORTRAN_ENV`’s `STAT_STOPPED_IMAGE` and if the remote image has failed, the value `STAT_FAILED_IMAGE`.\n\nStandard:  \nTS 18508 or later\n\nClass:  \nAtomic subroutine\n\nSyntax:  \n`CALL ATOMIC_FETCH_XOR (ATOM, VALUE, OLD [, STAT])`\n\nArguments:  \n|         |                                                                                                            |\n|---------|------------------------------------------------------------------------------------------------------------|\n| `ATOM`  | Scalar coarray or coindexed variable of integer type with `ATOMIC_INT_KIND` kind.                          |\n| `VALUE` | Scalar of the same type as `ATOM`. If the kind is different, the value is converted to the kind of `ATOM`. |\n| `OLD`   | Scalar of the same type and kind as `ATOM`.                                                                |\n| `STAT`  | (optional) Scalar default-kind integer variable.                                                           |\n\nExample:  \n``` example-preformatted\nprogram atomic\n  use iso_fortran_env\n  integer(atomic_int_kind) :: atom[*], old\n  call atomic_fetch_xor (atom[1], int(b'10100011101'), old)\nend program atomic\n```\n\nSee also:  \n[`ATOMIC_DEFINE` — Setting a variable atomically](atomic_005fdefine), [`ATOMIC_XOR` — Atomic bitwise OR operation](atomic_005fxor), [`ISO_FORTRAN_ENV`](iso_005ffortran_005fenv), [`ATOMIC_FETCH_ADD` — Atomic ADD operation with prior fetch](atomic_005ffetch_005fadd), [`ATOMIC_FETCH_AND` — Atomic bitwise AND operation with prior fetch](atomic_005ffetch_005fand), [`ATOMIC_FETCH_OR` — Atomic bitwise OR operation with prior fetch](atomic_005ffetch_005for)\n\nNext: [`ATOMIC_OR` — Atomic bitwise OR operation](atomic_005for), Previous: [`ATOMIC_FETCH_OR` — Atomic bitwise OR operation with prior fetch](atomic_005ffetch_005for), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATOMIC_005fFETCH_005fXOR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATOMIC_005fFETCH_005fXOR.html)"
- name: 8.36. ATOMIC_OR
  id: atomic_005for
  summary: 'Description: ATOMIC_OR(ATOM, VALUE) atomically defines ATOM with the bitwise AND between the values of ATOM and VALUE'
  description: "Next: [`ATOMIC_REF` — Obtaining the value of a variable atomically](atomic_005fref), Previous: [`ATOMIC_FETCH_XOR` — Atomic bitwise XOR operation with prior fetch](atomic_005ffetch_005fxor), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.36 ATOMIC_OR — Atomic bitwise OR operation [¶](#ATOMIC_005fOR-----Atomic-bitwise-OR-operation)\n\nDescription:  \n`ATOMIC_OR(ATOM, VALUE)` atomically defines `ATOM` with the bitwise AND between the values of `ATOM` and `VALUE`. When `STAT` is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed `ATOM`, if the remote image has stopped, it is assigned the value of `ISO_FORTRAN_ENV`’s `STAT_STOPPED_IMAGE` and if the remote image has failed, the value `STAT_FAILED_IMAGE`.\n\nStandard:  \nTS 18508 or later\n\nClass:  \nAtomic subroutine\n\nSyntax:  \n`CALL ATOMIC_OR (ATOM, VALUE [, STAT])`\n\nArguments:  \n|         |                                                                                                            |\n|---------|------------------------------------------------------------------------------------------------------------|\n| `ATOM`  | Scalar coarray or coindexed variable of integer type with `ATOMIC_INT_KIND` kind.                          |\n| `VALUE` | Scalar of the same type as `ATOM`. If the kind is different, the value is converted to the kind of `ATOM`. |\n| `STAT`  | (optional) Scalar default-kind integer variable.                                                           |\n\nExample:  \n``` example-preformatted\nprogram atomic\n  use iso_fortran_env\n  integer(atomic_int_kind) :: atom[*]\n  call atomic_or (atom[1], int(b'10100011101'))\nend program atomic\n```\n\nSee also:  \n[`ATOMIC_DEFINE` — Setting a variable atomically](atomic_005fdefine), [`ATOMIC_FETCH_OR` — Atomic bitwise OR operation with prior fetch](atomic_005ffetch_005for), [`ISO_FORTRAN_ENV`](iso_005ffortran_005fenv), [`ATOMIC_ADD` — Atomic ADD operation](atomic_005fadd), [`ATOMIC_OR` — Atomic bitwise OR operation](#ATOMIC_005fOR), [`ATOMIC_XOR` — Atomic bitwise OR operation](atomic_005fxor)\n\nNext: [`ATOMIC_REF` — Obtaining the value of a variable atomically](atomic_005fref), Previous: [`ATOMIC_FETCH_XOR` — Atomic bitwise XOR operation with prior fetch](atomic_005ffetch_005fxor), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATOMIC_005fOR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATOMIC_005fOR.html)"
- name: 8.37. ATOMIC_REF
  id: atomic_005fref
  summary: 'Description: ATOMIC_DEFINE(ATOM, VALUE) atomically assigns the value of the variable ATOM to VALUE'
  description: "Next: [`ATOMIC_XOR` — Atomic bitwise OR operation](atomic_005fxor), Previous: [`ATOMIC_OR` — Atomic bitwise OR operation](atomic_005for), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.37 ATOMIC_REF — Obtaining the value of a variable atomically [¶](#ATOMIC_005fREF-----Obtaining-the-value-of-a-variable-atomically)\n\nDescription:  \n`ATOMIC_DEFINE(ATOM, VALUE)` atomically assigns the value of the variable `ATOM` to `VALUE`. When `STAT` is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed `ATOM`, if the remote image has stopped, it is assigned the value of `ISO_FORTRAN_ENV`’s `STAT_STOPPED_IMAGE` and if the remote image has failed, the value `STAT_FAILED_IMAGE`.\n\nStandard:  \nFortran 2008 and later; with `STAT`, TS 18508 or later\n\nClass:  \nAtomic subroutine\n\nSyntax:  \n`CALL ATOMIC_REF(VALUE, ATOM [, STAT])`\n\nArguments:  \n|         |                                                                                                                                          |\n|---------|------------------------------------------------------------------------------------------------------------------------------------------|\n| `VALUE` | Scalar of the same type as `ATOM`. If the kind is different, the value is converted to the kind of `ATOM`.                               |\n| `ATOM`  | Scalar coarray or coindexed variable of either integer type with `ATOMIC_INT_KIND` kind or logical type with `ATOMIC_LOGICAL_KIND` kind. |\n| `STAT`  | (optional) Scalar default-kind integer variable.                                                                                         |\n\nExample:  \n``` example-preformatted\nprogram atomic\n  use iso_fortran_env\n  logical(atomic_logical_kind) :: atom[*]\n  logical :: val\n  call atomic_ref (atom, .false.)\n  ! ...\n  call atomic_ref (atom, val)\n  if (val) then\n    print *, \"Obtained\"\n  end if\nend program atomic\n```\n\nSee also:  \n[`ATOMIC_DEFINE` — Setting a variable atomically](atomic_005fdefine), [`ATOMIC_CAS` — Atomic compare and swap](atomic_005fcas), [`ISO_FORTRAN_ENV`](iso_005ffortran_005fenv), [`ATOMIC_FETCH_ADD` — Atomic ADD operation with prior fetch](atomic_005ffetch_005fadd), [`ATOMIC_FETCH_AND` — Atomic bitwise AND operation with prior fetch](atomic_005ffetch_005fand), [`ATOMIC_FETCH_OR` — Atomic bitwise OR operation with prior fetch](atomic_005ffetch_005for), [`ATOMIC_FETCH_XOR` — Atomic bitwise XOR operation with prior fetch](atomic_005ffetch_005fxor)\n\nNext: [`ATOMIC_XOR` — Atomic bitwise OR operation](atomic_005fxor), Previous: [`ATOMIC_OR` — Atomic bitwise OR operation](atomic_005for), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATOMIC_005fREF.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATOMIC_005fREF.html)"
- name: 8.38. ATOMIC_XOR
  id: atomic_005fxor
  summary: 'Description: ATOMIC_AND(ATOM, VALUE) atomically defines ATOM with the bitwise XOR between the values of ATOM and VALUE'
  description: "Next: [`BACKTRACE` — Show a backtrace](backtrace), Previous: [`ATOMIC_REF` — Obtaining the value of a variable atomically](atomic_005fref), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.38 ATOMIC_XOR — Atomic bitwise OR operation [¶](#ATOMIC_005fXOR-----Atomic-bitwise-OR-operation)\n\nDescription:  \n`ATOMIC_AND(ATOM, VALUE)` atomically defines `ATOM` with the bitwise XOR between the values of `ATOM` and `VALUE`. When `STAT` is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed `ATOM`, if the remote image has stopped, it is assigned the value of `ISO_FORTRAN_ENV`’s `STAT_STOPPED_IMAGE` and if the remote image has failed, the value `STAT_FAILED_IMAGE`.\n\nStandard:  \nTS 18508 or later\n\nClass:  \nAtomic subroutine\n\nSyntax:  \n`CALL ATOMIC_XOR (ATOM, VALUE [, STAT])`\n\nArguments:  \n|         |                                                                                                            |\n|---------|------------------------------------------------------------------------------------------------------------|\n| `ATOM`  | Scalar coarray or coindexed variable of integer type with `ATOMIC_INT_KIND` kind.                          |\n| `VALUE` | Scalar of the same type as `ATOM`. If the kind is different, the value is converted to the kind of `ATOM`. |\n| `STAT`  | (optional) Scalar default-kind integer variable.                                                           |\n\nExample:  \n``` example-preformatted\nprogram atomic\n  use iso_fortran_env\n  integer(atomic_int_kind) :: atom[*]\n  call atomic_xor (atom[1], int(b'10100011101'))\nend program atomic\n```\n\nSee also:  \n[`ATOMIC_DEFINE` — Setting a variable atomically](atomic_005fdefine), [`ATOMIC_FETCH_XOR` — Atomic bitwise XOR operation with prior fetch](atomic_005ffetch_005fxor), [`ISO_FORTRAN_ENV`](iso_005ffortran_005fenv), [`ATOMIC_ADD` — Atomic ADD operation](atomic_005fadd), [`ATOMIC_OR` — Atomic bitwise OR operation](atomic_005for), [`ATOMIC_XOR` — Atomic bitwise OR operation](#ATOMIC_005fXOR)\n\nNext: [`BACKTRACE` — Show a backtrace](backtrace), Previous: [`ATOMIC_REF` — Obtaining the value of a variable atomically](atomic_005fref), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATOMIC_005fXOR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ATOMIC_005fXOR.html)"
- name: 8.39. BACKTRACE
  id: backtrace
  summary: 'Description: BACKTRACE shows a backtrace at an arbitrary place in user code'
  description: "Next: [`BESSEL_J0` — Bessel function of the first kind of order 0](bessel_005fj0), Previous: [`ATOMIC_XOR` — Atomic bitwise OR operation](atomic_005fxor), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.39 BACKTRACE — Show a backtrace [¶](#BACKTRACE-----Show-a-backtrace)\n\nDescription:  \n`BACKTRACE` shows a backtrace at an arbitrary place in user code. Program execution continues normally afterwards. The backtrace information is printed to the unit corresponding to `ERROR_UNIT` in `ISO_FORTRAN_ENV`.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL BACKTRACE`\n\nArguments:  \nNone\n\nSee also:  \n[`ABORT` — Abort the program](abort)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BACKTRACE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BACKTRACE.html)"
- name: 8.40. BESSEL_J0
  id: bessel_005fj0
  summary: 'Description: BESSEL_J0(X) computes the Bessel function of the first kind of order 0 of X'
  description: "Next: [`BESSEL_J1` — Bessel function of the first kind of order 1](bessel_005fj1), Previous: [`BACKTRACE` — Show a backtrace](backtrace), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.40 BESSEL_J0 — Bessel function of the first kind of order 0 [¶](#BESSEL_005fJ0-----Bessel-function-of-the-first-kind-of-order-0)\n\nDescription:  \n`BESSEL_J0(X)` computes the Bessel function of the first kind of order 0 of `X`. This function is available under the name `BESJ0` as a GNU extension.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = BESSEL_J0(X)`\n\nArguments:  \n|     |                           |\n|-----|---------------------------|\n| `X` | The type shall be `REAL`. |\n\nReturn value:  \nThe return value is of type `REAL` and lies in the range *- 0.4027... \\leq Bessel (0,x) \\leq 1*. It has the same kind as `X`.\n\nExample:  \n``` example-preformatted\nprogram test_besj0\n  real(8) :: x = 0.0_8\n  x = bessel_j0(x)\nend program test_besj0\n```\n\nSpecific names:  \n| Name        | Argument    | Return type | Standard      |\n|-------------|-------------|-------------|---------------|\n| `DBESJ0(X)` | `REAL(8) X` | `REAL(8)`   | GNU extension |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BESSEL_005fJ0.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BESSEL_005fJ0.html)"
- name: 8.41. BESSEL_J1
  id: bessel_005fj1
  summary: 'Description: BESSEL_J1(X) computes the Bessel function of the first kind of order 1 of X'
  description: "Next: [`BESSEL_JN` — Bessel function of the first kind](bessel_005fjn), Previous: [`BESSEL_J0` — Bessel function of the first kind of order 0](bessel_005fj0), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.41 BESSEL_J1 — Bessel function of the first kind of order 1 [¶](#BESSEL_005fJ1-----Bessel-function-of-the-first-kind-of-order-1)\n\nDescription:  \n`BESSEL_J1(X)` computes the Bessel function of the first kind of order 1 of `X`. This function is available under the name `BESJ1` as a GNU extension.\n\nStandard:  \nFortran 2008\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = BESSEL_J1(X)`\n\nArguments:  \n|     |                           |\n|-----|---------------------------|\n| `X` | The type shall be `REAL`. |\n\nReturn value:  \nThe return value is of type `REAL` and lies in the range *- 0.5818... \\leq Bessel (0,x) \\leq 0.5818* . It has the same kind as `X`.\n\nExample:  \n``` example-preformatted\nprogram test_besj1\n  real(8) :: x = 1.0_8\n  x = bessel_j1(x)\nend program test_besj1\n```\n\nSpecific names:  \n| Name        | Argument    | Return type | Standard      |\n|-------------|-------------|-------------|---------------|\n| `DBESJ1(X)` | `REAL(8) X` | `REAL(8)`   | GNU extension |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BESSEL_005fJ1.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BESSEL_005fJ1.html)"
- name: 8.42. BESSEL_JN
  id: bessel_005fjn
  summary: 'Description: BESSEL_JN(N, X) computes the Bessel function of the first kind of order N of X'
  description: "Next: [`BESSEL_Y0` — Bessel function of the second kind of order 0](bessel_005fy0), Previous: [`BESSEL_J1` — Bessel function of the first kind of order 1](bessel_005fj1), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.42 BESSEL_JN — Bessel function of the first kind [¶](#BESSEL_005fJN-----Bessel-function-of-the-first-kind)\n\nDescription:  \n`BESSEL_JN(N, X)` computes the Bessel function of the first kind of order `N` of `X`. This function is available under the name `BESJN` as a GNU extension. If `N` and `X` are arrays, their ranks and shapes shall conform.\n\n`BESSEL_JN(N1, N2, X)` returns an array with the Bessel functions of the first kind of the orders `N1` to `N2`.\n\nStandard:  \nFortran 2008 and later, negative `N` is allowed as GNU extension\n\nClass:  \nElemental function, except for the transformational function `BESSEL_JN(N1, N2, X)`\n\nSyntax:  \n|                                 |\n|---------------------------------|\n| `RESULT = BESSEL_JN(N, X)`      |\n| `RESULT = BESSEL_JN(N1, N2, X)` |\n\nArguments:  \n|      |                                                                                              |\n|------|----------------------------------------------------------------------------------------------|\n| `N`  | Shall be a scalar or an array of type `INTEGER`.                                             |\n| `N1` | Shall be a non-negative scalar of type `INTEGER`.                                            |\n| `N2` | Shall be a non-negative scalar of type `INTEGER`.                                            |\n| `X`  | Shall be a scalar or an array of type `REAL`; for `BESSEL_JN(N1, N2, X)` it shall be scalar. |\n\nReturn value:  \nThe return value is a scalar of type `REAL`. It has the same kind as `X`.\n\nNote:  \nThe transformational function uses a recurrence algorithm which might, for some values of `X`, lead to different results than calls to the elemental function.\n\nExample:  \n``` example-preformatted\nprogram test_besjn\n  real(8) :: x = 1.0_8\n  x = bessel_jn(5,x)\nend program test_besjn\n```\n\nSpecific names:  \n| Name           | Argument    | Return type | Standard      |\n|----------------|-------------|-------------|---------------|\n| `DBESJN(N, X)` | `INTEGER N` | `REAL(8)`   | GNU extension |\n|                | `REAL(8) X` |             |               |\n\nNext: [`BESSEL_Y0` — Bessel function of the second kind of order 0](bessel_005fy0), Previous: [`BESSEL_J1` — Bessel function of the first kind of order 1](bessel_005fj1), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BESSEL_005fJN.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BESSEL_005fJN.html)"
- name: 8.43. BESSEL_Y0
  id: bessel_005fy0
  summary: 'Description: BESSEL_Y0(X) computes the Bessel function of the second kind of order 0 of X'
  description: "Next: [`BESSEL_Y1` — Bessel function of the second kind of order 1](bessel_005fy1), Previous: [`BESSEL_JN` — Bessel function of the first kind](bessel_005fjn), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.43 BESSEL_Y0 — Bessel function of the second kind of order 0 [¶](#BESSEL_005fY0-----Bessel-function-of-the-second-kind-of-order-0)\n\nDescription:  \n`BESSEL_Y0(X)` computes the Bessel function of the second kind of order 0 of `X`. This function is available under the name `BESY0` as a GNU extension.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = BESSEL_Y0(X)`\n\nArguments:  \n|     |                           |\n|-----|---------------------------|\n| `X` | The type shall be `REAL`. |\n\nReturn value:  \nThe return value is of type `REAL`. It has the same kind as `X`.\n\nExample:  \n``` example-preformatted\nprogram test_besy0\n  real(8) :: x = 0.0_8\n  x = bessel_y0(x)\nend program test_besy0\n```\n\nSpecific names:  \n| Name        | Argument    | Return type | Standard      |\n|-------------|-------------|-------------|---------------|\n| `DBESY0(X)` | `REAL(8) X` | `REAL(8)`   | GNU extension |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BESSEL_005fY0.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BESSEL_005fY0.html)"
- name: 8.44. BESSEL_Y1
  id: bessel_005fy1
  summary: 'Description: BESSEL_Y1(X) computes the Bessel function of the second kind of order 1 of X'
  description: "Next: [`BESSEL_YN` — Bessel function of the second kind](bessel_005fyn), Previous: [`BESSEL_Y0` — Bessel function of the second kind of order 0](bessel_005fy0), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.44 BESSEL_Y1 — Bessel function of the second kind of order 1 [¶](#BESSEL_005fY1-----Bessel-function-of-the-second-kind-of-order-1)\n\nDescription:  \n`BESSEL_Y1(X)` computes the Bessel function of the second kind of order 1 of `X`. This function is available under the name `BESY1` as a GNU extension.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = BESSEL_Y1(X)`\n\nArguments:  \n|     |                           |\n|-----|---------------------------|\n| `X` | The type shall be `REAL`. |\n\nReturn value:  \nThe return value is of type `REAL`. It has the same kind as `X`.\n\nExample:  \n``` example-preformatted\nprogram test_besy1\n  real(8) :: x = 1.0_8\n  x = bessel_y1(x)\nend program test_besy1\n```\n\nSpecific names:  \n| Name        | Argument    | Return type | Standard      |\n|-------------|-------------|-------------|---------------|\n| `DBESY1(X)` | `REAL(8) X` | `REAL(8)`   | GNU extension |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BESSEL_005fY1.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BESSEL_005fY1.html)"
- name: 8.45. BESSEL_YN
  id: bessel_005fyn
  summary: 'Description: BESSEL_YN(N, X) computes the Bessel function of the second kind of order N of X'
  description: "Next: [`BGE` — Bitwise greater than or equal to](bge), Previous: [`BESSEL_Y1` — Bessel function of the second kind of order 1](bessel_005fy1), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.45 BESSEL_YN — Bessel function of the second kind [¶](#BESSEL_005fYN-----Bessel-function-of-the-second-kind)\n\nDescription:  \n`BESSEL_YN(N, X)` computes the Bessel function of the second kind of order `N` of `X`. This function is available under the name `BESYN` as a GNU extension. If `N` and `X` are arrays, their ranks and shapes shall conform.\n\n`BESSEL_YN(N1, N2, X)` returns an array with the Bessel functions of the first kind of the orders `N1` to `N2`.\n\nStandard:  \nFortran 2008 and later, negative `N` is allowed as GNU extension\n\nClass:  \nElemental function, except for the transformational function `BESSEL_YN(N1, N2, X)`\n\nSyntax:  \n|                                 |\n|---------------------------------|\n| `RESULT = BESSEL_YN(N, X)`      |\n| `RESULT = BESSEL_YN(N1, N2, X)` |\n\nArguments:  \n|      |                                                                                              |\n|------|----------------------------------------------------------------------------------------------|\n| `N`  | Shall be a scalar or an array of type `INTEGER` .                                            |\n| `N1` | Shall be a non-negative scalar of type `INTEGER`.                                            |\n| `N2` | Shall be a non-negative scalar of type `INTEGER`.                                            |\n| `X`  | Shall be a scalar or an array of type `REAL`; for `BESSEL_YN(N1, N2, X)` it shall be scalar. |\n\nReturn value:  \nThe return value is a scalar of type `REAL`. It has the same kind as `X`.\n\nNote:  \nThe transformational function uses a recurrence algorithm which might, for some values of `X`, lead to different results than calls to the elemental function.\n\nExample:  \n``` example-preformatted\nprogram test_besyn\n  real(8) :: x = 1.0_8\n  x = bessel_yn(5,x)\nend program test_besyn\n```\n\nSpecific names:  \n| Name          | Argument    | Return type | Standard      |\n|---------------|-------------|-------------|---------------|\n| `DBESYN(N,X)` | `INTEGER N` | `REAL(8)`   | GNU extension |\n|               | `REAL(8) X` |             |               |\n\nNext: [`BGE` — Bitwise greater than or equal to](bge), Previous: [`BESSEL_Y1` — Bessel function of the second kind of order 1](bessel_005fy1), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BESSEL_005fYN.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BESSEL_005fYN.html)"
- name: 8.46. BGE
  id: bge
  summary: 'Description: Determines whether an integral is a bitwise greater than or equal to another'
  description: "Next: [`BGT` — Bitwise greater than](bgt), Previous: [`BESSEL_YN` — Bessel function of the second kind](bessel_005fyn), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.46 BGE — Bitwise greater than or equal to [¶](#BGE-----Bitwise-greater-than-or-equal-to)\n\nDescription:  \nDetermines whether an integral is a bitwise greater than or equal to another.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = BGE(I, J)`\n\nArguments:  \n|     |                                                          |\n|-----|----------------------------------------------------------|\n| `I` | Shall be of `INTEGER` type.                              |\n| `J` | Shall be of `INTEGER` type, and of the same kind as `I`. |\n\nReturn value:  \nThe return value is of type `LOGICAL` and of the default kind.\n\nSee also:  \n[`BGT` — Bitwise greater than](bgt), [`BLE` — Bitwise less than or equal to](ble), [`BLT` — Bitwise less than](blt)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BGE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BGE.html)"
- name: 8.47. BGT
  id: bgt
  summary: 'Description: Determines whether an integral is a bitwise greater than another'
  description: "Next: [`BIT_SIZE` — Bit size inquiry function](bit_005fsize), Previous: [`BGE` — Bitwise greater than or equal to](bge), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.47 BGT — Bitwise greater than [¶](#BGT-----Bitwise-greater-than)\n\nDescription:  \nDetermines whether an integral is a bitwise greater than another.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = BGT(I, J)`\n\nArguments:  \n|     |                                                          |\n|-----|----------------------------------------------------------|\n| `I` | Shall be of `INTEGER` type.                              |\n| `J` | Shall be of `INTEGER` type, and of the same kind as `I`. |\n\nReturn value:  \nThe return value is of type `LOGICAL` and of the default kind.\n\nSee also:  \n[`BGE` — Bitwise greater than or equal to](bge), [`BLE` — Bitwise less than or equal to](ble), [`BLT` — Bitwise less than](blt)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BGT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BGT.html)"
- name: 8.48. BIT_SIZE
  id: bit_005fsize
  summary: 'Description: BIT_SIZE(I) returns the number of bits (integer precision plus sign bit) represented by the type of I'
  description: "Next: [`BLE` — Bitwise less than or equal to](ble), Previous: [`BGT` — Bitwise greater than](bgt), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.48 BIT_SIZE — Bit size inquiry function [¶](#BIT_005fSIZE-----Bit-size-inquiry-function)\n\nDescription:  \n`BIT_SIZE(I)` returns the number of bits (integer precision plus sign bit) represented by the type of `I`. The result of `BIT_SIZE(I)` is independent of the actual value of `I`.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = BIT_SIZE(I)`\n\nArguments:  \n|     |                              |\n|-----|------------------------------|\n| `I` | The type shall be `INTEGER`. |\n\nReturn value:  \nThe return value is of type `INTEGER`\n\nExample:  \n``` example-preformatted\nprogram test_bit_size\n    integer :: i = 123\n    integer :: size\n    size = bit_size(i)\n    print *, size\nend program test_bit_size\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BIT_005fSIZE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BIT_005fSIZE.html)"
- name: 8.49. BLE
  id: ble
  summary: 'Description: Determines whether an integral is a bitwise less than or equal to another'
  description: "Next: [`BLT` — Bitwise less than](blt), Previous: [`BIT_SIZE` — Bit size inquiry function](bit_005fsize), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.49 BLE — Bitwise less than or equal to [¶](#BLE-----Bitwise-less-than-or-equal-to)\n\nDescription:  \nDetermines whether an integral is a bitwise less than or equal to another.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = BLE(I, J)`\n\nArguments:  \n|     |                                                          |\n|-----|----------------------------------------------------------|\n| `I` | Shall be of `INTEGER` type.                              |\n| `J` | Shall be of `INTEGER` type, and of the same kind as `I`. |\n\nReturn value:  \nThe return value is of type `LOGICAL` and of the default kind.\n\nSee also:  \n[`BGT` — Bitwise greater than](bgt), [`BGE` — Bitwise greater than or equal to](bge), [`BLT` — Bitwise less than](blt)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BLE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BLE.html)"
- name: 8.50. BLT
  id: blt
  summary: 'Description: Determines whether an integral is a bitwise less than another'
  description: "Next: [`BTEST` — Bit test function](btest), Previous: [`BLE` — Bitwise less than or equal to](ble), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.50 BLT — Bitwise less than [¶](#BLT-----Bitwise-less-than)\n\nDescription:  \nDetermines whether an integral is a bitwise less than another.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = BLT(I, J)`\n\nArguments:  \n|     |                                                          |\n|-----|----------------------------------------------------------|\n| `I` | Shall be of `INTEGER` type.                              |\n| `J` | Shall be of `INTEGER` type, and of the same kind as `I`. |\n\nReturn value:  \nThe return value is of type `LOGICAL` and of the default kind.\n\nSee also:  \n[`BGE` — Bitwise greater than or equal to](bge), [`BGT` — Bitwise greater than](bgt), [`BLE` — Bitwise less than or equal to](ble)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BLT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BLT.html)"
- name: 8.51. BTEST
  id: btest
  summary: 'Description: BTEST(I,POS) returns logical .TRUE'
  description: "Next: [`C_ASSOCIATED` — Status of a C pointer](c_005fassociated), Previous: [`BLT` — Bitwise less than](blt), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.51 BTEST — Bit test function [¶](#BTEST-----Bit-test-function)\n\nDescription:  \n`BTEST(I,POS)` returns logical `.TRUE.` if the bit at `POS` in `I` is set. The counting of the bits starts at 0.\n\nStandard:  \nFortran 90 and later, has overloads that are GNU extensions\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = BTEST(I, POS)`\n\nArguments:  \n|       |                              |\n|-------|------------------------------|\n| `I`   | The type shall be `INTEGER`. |\n| `POS` | The type shall be `INTEGER`. |\n\nReturn value:  \nThe return value is of type `LOGICAL`\n\nExample:  \n``` example-preformatted\nprogram test_btest\n    integer :: i = 32768 + 1024 + 64\n    integer :: pos\n    logical :: bool\n    do pos=0,16\n        bool = btest(i, pos) \n        print *, pos, bool\n    end do\nend program test_btest\n```\n\nSpecific names:  \n| Name            | Argument           | Return type  | Standard             |\n|-----------------|--------------------|--------------|----------------------|\n| `BTEST(I,POS)`  | `INTEGER I,POS`    | `LOGICAL`    | Fortran 95 and later |\n| `BBTEST(I,POS)` | `INTEGER(1) I,POS` | `LOGICAL(1)` | GNU extension        |\n| `BITEST(I,POS)` | `INTEGER(2) I,POS` | `LOGICAL(2)` | GNU extension        |\n| `BJTEST(I,POS)` | `INTEGER(4) I,POS` | `LOGICAL(4)` | GNU extension        |\n| `BKTEST(I,POS)` | `INTEGER(8) I,POS` | `LOGICAL(8)` | GNU extension        |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BTEST.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/BTEST.html)"
- name: 8.52. C_ASSOCIATED
  id: c_005fassociated
  summary: 'Description: C_ASSOCIATED(c_ptr_1[, c_ptr_2]) determines the status of the C pointer c_ptr_1 or if c_ptr_1 is associated with the target c_ptr_2'
  description: "Next: [`C_F_POINTER` — Convert C into Fortran pointer](c_005ff_005fpointer), Previous: [`BTEST` — Bit test function](btest), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.52 C_ASSOCIATED — Status of a C pointer [¶](#C_005fASSOCIATED-----Status-of-a-C-pointer)\n\nDescription:  \n`C_ASSOCIATED(c_ptr_1[, c_ptr_2])` determines the status of the C pointer `c_ptr_1` or if `c_ptr_1` is associated with the target `c_ptr_2`.\n\nStandard:  \nFortran 2003 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = C_ASSOCIATED(c_ptr_1[, c_ptr_2])`\n\nArguments:  \n|           |                                                  |\n|-----------|--------------------------------------------------|\n| `c_ptr_1` | Scalar of the type `C_PTR` or `C_FUNPTR`.        |\n| `c_ptr_2` | (Optional) Scalar of the same type as `c_ptr_1`. |\n\nReturn value:  \nThe return value is of type `LOGICAL`; it is `.false.` if either `c_ptr_1` is a C NULL pointer or if `c_ptr1` and `c_ptr_2` point to different addresses.\n\nExample:  \n``` example-preformatted\nsubroutine association_test(a,b)\n  use iso_c_binding, only: c_associated, c_loc, c_ptr\n  implicit none\n  real, pointer :: a\n  type(c_ptr) :: b\n  if(c_associated(b, c_loc(a))) &\n     stop 'b and a do not point to same target'\nend subroutine association_test\n```\n\nSee also:  \n[`C_LOC` — Obtain the C address of an object](c_005floc), [`C_FUNLOC` — Obtain the C address of a procedure](c_005ffunloc)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/C_005fASSOCIATED.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/C_005fASSOCIATED.html)"
- name: 8.53. C_F_POINTER
  id: c_005ff_005fpointer
  summary: 'Description: C_F_POINTER(CPTR, FPTR[, SHAPE]) assigns the target of the C pointer CPTR to the Fortran pointer FPTR and specifies its shape'
  description: "Next: [`C_F_PROCPOINTER` — Convert C into Fortran procedure pointer](c_005ff_005fprocpointer), Previous: [`C_ASSOCIATED` — Status of a C pointer](c_005fassociated), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.53 C_F_POINTER — Convert C into Fortran pointer [¶](#C_005fF_005fPOINTER-----Convert-C-into-Fortran-pointer)\n\nDescription:  \n`C_F_POINTER(CPTR, FPTR[, SHAPE])` assigns the target of the C pointer `CPTR` to the Fortran pointer `FPTR` and specifies its shape.\n\nStandard:  \nFortran 2003 and later\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL C_F_POINTER(CPTR, FPTR[, SHAPE])`\n\nArguments:  \n|         |                                                                                                                                                                     |\n|---------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `CPTR`  | scalar of the type `C_PTR`. It is `INTENT(IN)`.                                                                                                                     |\n| `FPTR`  | pointer interoperable with `cptr`. It is `INTENT(OUT)`.                                                                                                             |\n| `SHAPE` | (Optional) Rank-one array of type `INTEGER` with `INTENT(IN)`. It shall be present if and only if `fptr` is an array. The size must be equal to the rank of `fptr`. |\n\nExample:  \n``` example-preformatted\nprogram main\n  use iso_c_binding\n  implicit none\n  interface\n    subroutine my_routine(p) bind(c,name='myC_func')\n      import :: c_ptr\n      type(c_ptr), intent(out) :: p\n    end subroutine\n  end interface\n  type(c_ptr) :: cptr\n  real,pointer :: a(:)\n  call my_routine(cptr)\n  call c_f_pointer(cptr, a, [12])\nend program main\n```\n\nSee also:  \n[`C_LOC` — Obtain the C address of an object](c_005floc), [`C_F_PROCPOINTER` — Convert C into Fortran procedure pointer](c_005ff_005fprocpointer)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/C_005fF_005fPOINTER.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/C_005fF_005fPOINTER.html)"
- name: 8.54. C_F_PROCPOINTER
  id: c_005ff_005fprocpointer
  summary: 'Description: C_F_PROCPOINTER(CPTR, FPTR) Assign the target of the C function pointer CPTR to the Fortran procedure pointer FPTR'
  description: "Next: [`C_FUNLOC` — Obtain the C address of a procedure](c_005ffunloc), Previous: [`C_F_POINTER` — Convert C into Fortran pointer](c_005ff_005fpointer), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.54 C_F_PROCPOINTER — Convert C into Fortran procedure pointer [¶](#C_005fF_005fPROCPOINTER-----Convert-C-into-Fortran-procedure-pointer)\n\nDescription:  \n`C_F_PROCPOINTER(CPTR, FPTR)` Assign the target of the C function pointer `CPTR` to the Fortran procedure pointer `FPTR`.\n\nStandard:  \nFortran 2003 and later\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL C_F_PROCPOINTER(cptr, fptr)`\n\nArguments:  \n|        |                                                                   |\n|--------|-------------------------------------------------------------------|\n| `CPTR` | scalar of the type `C_FUNPTR`. It is `INTENT(IN)`.                |\n| `FPTR` | procedure pointer interoperable with `cptr`. It is `INTENT(OUT)`. |\n\nExample:  \n``` example-preformatted\nprogram main\n  use iso_c_binding\n  implicit none\n  abstract interface\n    function func(a)\n      import :: c_float\n      real(c_float), intent(in) :: a\n      real(c_float) :: func\n    end function\n  end interface\n  interface\n     function getIterFunc() bind(c,name=\"getIterFunc\")\n       import :: c_funptr\n       type(c_funptr) :: getIterFunc\n     end function\n  end interface\n  type(c_funptr) :: cfunptr\n  procedure(func), pointer :: myFunc\n  cfunptr = getIterFunc()\n  call c_f_procpointer(cfunptr, myFunc)\nend program main\n```\n\nSee also:  \n[`C_LOC` — Obtain the C address of an object](c_005floc), [`C_F_POINTER` — Convert C into Fortran pointer](c_005ff_005fpointer)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/C_005fF_005fPROCPOINTER.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/C_005fF_005fPROCPOINTER.html)"
- name: 8.55. C_FUNLOC
  id: c_005ffunloc
  summary: 'Description: C_FUNLOC(x) determines the C address of the argument'
  description: "Next: [`C_LOC` — Obtain the C address of an object](c_005floc), Previous: [`C_F_PROCPOINTER` — Convert C into Fortran procedure pointer](c_005ff_005fprocpointer), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.55 C_FUNLOC — Obtain the C address of a procedure [¶](#C_005fFUNLOC-----Obtain-the-C-address-of-a-procedure)\n\nDescription:  \n`C_FUNLOC(x)` determines the C address of the argument.\n\nStandard:  \nFortran 2003 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = C_FUNLOC(x)`\n\nArguments:  \n|     |                                                     |\n|-----|-----------------------------------------------------|\n| `x` | Interoperable function or pointer to such function. |\n\nReturn value:  \nThe return value is of type `C_FUNPTR` and contains the C address of the argument.\n\nExample:  \n``` example-preformatted\nmodule x\n  use iso_c_binding\n  implicit none\ncontains\n  subroutine sub(a) bind(c)\n    real(c_float) :: a\n    a = sqrt(a)+5.0\n  end subroutine sub\nend module x\nprogram main\n  use iso_c_binding\n  use x\n  implicit none\n  interface\n    subroutine my_routine(p) bind(c,name='myC_func')\n      import :: c_funptr\n      type(c_funptr), intent(in) :: p\n    end subroutine\n  end interface\n  call my_routine(c_funloc(sub))\nend program main\n```\n\nSee also:  \n[`C_ASSOCIATED` — Status of a C pointer](c_005fassociated), [`C_LOC` — Obtain the C address of an object](c_005floc), [`C_F_POINTER` — Convert C into Fortran pointer](c_005ff_005fpointer), [`C_F_PROCPOINTER` — Convert C into Fortran procedure pointer](c_005ff_005fprocpointer)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/C_005fFUNLOC.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/C_005fFUNLOC.html)"
- name: 8.56. C_LOC
  id: c_005floc
  summary: 'Description: C_LOC(X) determines the C address of the argument'
  description: "Next: [`C_SIZEOF` — Size in bytes of an expression](c_005fsizeof), Previous: [`C_FUNLOC` — Obtain the C address of a procedure](c_005ffunloc), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.56 C_LOC — Obtain the C address of an object [¶](#C_005fLOC-----Obtain-the-C-address-of-an-object)\n\nDescription:  \n`C_LOC(X)` determines the C address of the argument.\n\nStandard:  \nFortran 2003 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = C_LOC(X)`\n\nArguments:  \n|     |                                                                                                                                                                                                                                                |\n|-----|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `X` | Shall have either the POINTER or TARGET attribute. It shall not be a coindexed object. It shall either be a variable with interoperable type and kind type parameters, or be a scalar, nonpolymorphic variable with no length type parameters. |\n\nReturn value:  \nThe return value is of type `C_PTR` and contains the C address of the argument.\n\nExample:  \n``` example-preformatted\nsubroutine association_test(a,b)\n  use iso_c_binding, only: c_associated, c_loc, c_ptr\n  implicit none\n  real, pointer :: a\n  type(c_ptr) :: b\n  if(c_associated(b, c_loc(a))) &\n     stop 'b and a do not point to same target'\nend subroutine association_test\n```\n\nSee also:  \n[`C_ASSOCIATED` — Status of a C pointer](c_005fassociated), [`C_FUNLOC` — Obtain the C address of a procedure](c_005ffunloc), [`C_F_POINTER` — Convert C into Fortran pointer](c_005ff_005fpointer), [`C_F_PROCPOINTER` — Convert C into Fortran procedure pointer](c_005ff_005fprocpointer)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/C_005fLOC.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/C_005fLOC.html)"
- name: 8.57. C_SIZEOF
  id: c_005fsizeof
  summary: 'Description: C_SIZEOF(X) calculates the number of bytes of storage the expression X occupies'
  description: "Next: [`CEILING` — Integer ceiling function](ceiling), Previous: [`C_LOC` — Obtain the C address of an object](c_005floc), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.57 C_SIZEOF — Size in bytes of an expression [¶](#C_005fSIZEOF-----Size-in-bytes-of-an-expression)\n\nDescription:  \n`C_SIZEOF(X)` calculates the number of bytes of storage the expression `X` occupies.\n\nStandard:  \nFortran 2008\n\nClass:  \nInquiry function of the module `ISO_C_BINDING`\n\nSyntax:  \n`N = C_SIZEOF(X)`\n\nArguments:  \n|     |                                                     |\n|-----|-----------------------------------------------------|\n| `X` | The argument shall be an interoperable data entity. |\n\nReturn value:  \nThe return value is of type integer and of the system-dependent kind `C_SIZE_T` (from the `ISO_C_BINDING` module). Its value is the number of bytes occupied by the argument. If the argument has the `POINTER` attribute, the number of bytes of the storage area pointed to is returned. If the argument is of a derived type with `POINTER` or `ALLOCATABLE` components, the return value does not account for the sizes of the data pointed to by these components.\n\nExample:  \n``` example-preformatted\nuse iso_c_binding\ninteger(c_int) :: i\nreal(c_float) :: r, s(5)\nprint *, (c_sizeof(s)/c_sizeof(r) == 5)\nend\n```\n\nThe example will print `T` unless you are using a platform where default `REAL` variables are unusually padded.\n\nSee also:  \n[`SIZEOF` — Size in bytes of an expression](sizeof), [`STORAGE_SIZE` — Storage size in bits](storage_005fsize)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/C_005fSIZEOF.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/C_005fSIZEOF.html)"
- name: 8.58. CEILING
  id: ceiling
  summary: 'Description: CEILING(A) returns the least integer greater than or equal to A'
  description: "Next: [`CHAR` — Character conversion function](char), Previous: [`C_SIZEOF` — Size in bytes of an expression](c_005fsizeof), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.58 CEILING — Integer ceiling function [¶](#CEILING-----Integer-ceiling-function)\n\nDescription:  \n`CEILING(A)` returns the least integer greater than or equal to `A`.\n\nStandard:  \nFortran 95 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = CEILING(A [, KIND])`\n\nArguments:  \n|        |                                                                                                |\n|--------|------------------------------------------------------------------------------------------------|\n| `A`    | The type shall be `REAL`.                                                                      |\n| `KIND` | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result. |\n\nReturn value:  \nThe return value is of type `INTEGER(KIND)` if `KIND` is present and a default-kind `INTEGER` otherwise.\n\nExample:  \n``` example-preformatted\nprogram test_ceiling\n    real :: x = 63.29\n    real :: y = -63.59\n    print *, ceiling(x) ! returns 64\n    print *, ceiling(y) ! returns -63\nend program test_ceiling\n```\n\nSee also:  \n[`FLOOR` — Integer floor function](floor), [`NINT` — Nearest whole number](nint)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CEILING.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CEILING.html)"
- name: 8.59. CHAR
  id: char
  summary: 'Description: CHAR(I [, KIND]) returns the character represented by the integer I'
  description: "Next: [`CHDIR` — Change working directory](chdir), Previous: [`CEILING` — Integer ceiling function](ceiling), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.59 CHAR — Character conversion function [¶](#CHAR-----Character-conversion-function)\n\nDescription:  \n`CHAR(I [, KIND])` returns the character represented by the integer `I`.\n\nStandard:  \nFortran 77 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = CHAR(I [, KIND])`\n\nArguments:  \n|        |                                                                                                |\n|--------|------------------------------------------------------------------------------------------------|\n| `I`    | The type shall be `INTEGER`.                                                                   |\n| `KIND` | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result. |\n\nReturn value:  \nThe return value is of type `CHARACTER(1)`\n\nExample:  \n``` example-preformatted\nprogram test_char\n    integer :: i = 74\n    character(1) :: c\n    c = char(i)\n    print *, i, c ! returns 'J'\nend program test_char\n```\n\nSpecific names:  \n| Name      | Argument    | Return type        | Standard             |\n|-----------|-------------|--------------------|----------------------|\n| `CHAR(I)` | `INTEGER I` | `CHARACTER(LEN=1)` | Fortran 77 and later |\n\nNote:  \nSee [`ICHAR` — Character-to-integer conversion function](ichar) for a discussion of converting between numerical values and formatted string representations.\n\nSee also:  \n[`ACHAR` — Character in ASCII collating sequence](achar), [`IACHAR` — Code in ASCII collating sequence](iachar), [`ICHAR` — Character-to-integer conversion function](ichar)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CHAR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CHAR.html)"
- name: 8.60. CHDIR
  id: chdir
  summary: 'Description: Change current working directory to a specified path'
  description: "Next: [`CHMOD` — Change access permissions of files](chmod), Previous: [`CHAR` — Character conversion function](char), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.60 CHDIR — Change working directory [¶](#CHDIR-----Change-working-directory)\n\nDescription:  \nChange current working directory to a specified path.\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                               |\n|-------------------------------|\n| `CALL CHDIR(NAME [, STATUS])` |\n| `STATUS = CHDIR(NAME)`        |\n\nArguments:  \n|          |                                                                                                                                     |\n|----------|-------------------------------------------------------------------------------------------------------------------------------------|\n| `NAME`   | The type shall be `CHARACTER` of default kind and shall specify a valid path within the file system.                                |\n| `STATUS` | (Optional) `INTEGER` status flag of the default kind. Returns 0 on success, and a system specific and nonzero error code otherwise. |\n\nExample:  \n``` example-preformatted\nPROGRAM test_chdir\n  CHARACTER(len=255) :: path\n  CALL getcwd(path)\n  WRITE(*,*) TRIM(path)\n  CALL chdir(\"/tmp\")\n  CALL getcwd(path)\n  WRITE(*,*) TRIM(path)\nEND PROGRAM\n```\n\nSee also:  \n[`GETCWD` — Get current working directory](getcwd)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CHDIR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CHDIR.html)"
- name: 8.61. CHMOD
  id: chmod
  summary: 'Description: CHMOD changes the permissions of a file'
  description: "Next: [`CMPLX` — Complex conversion function](cmplx), Previous: [`CHDIR` — Change working directory](chdir), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.61 CHMOD — Change access permissions of files [¶](#CHMOD-----Change-access-permissions-of-files)\n\nDescription:  \n`CHMOD` changes the permissions of a file.\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                                    |\n|------------------------------------|\n| `CALL CHMOD(NAME, MODE[, STATUS])` |\n| `STATUS = CHMOD(NAME, MODE)`       |\n\nArguments:  \n|          |                                                                                                                                                                                                                                             |\n|----------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `NAME`   | Scalar `CHARACTER` of default kind with the file name. Trailing blanks are ignored unless the character `achar(0)` is present, then all characters up to and excluding `achar(0)` are used as the file name.                                |\n| `MODE`   | Scalar `CHARACTER` of default kind giving the file permission. `MODE` uses the same syntax as the `chmod` utility as defined by the POSIX standard. The argument shall either be a string of a nonnegative octal number or a symbolic mode. |\n| `STATUS` | (optional) scalar `INTEGER`, which is `0` on success and nonzero otherwise.                                                                                                                                                                 |\n\nReturn value:  \nIn either syntax, `STATUS` is set to `0` on success and nonzero otherwise.\n\nExample:  \n`CHMOD` as subroutine\n\n``` example-preformatted\nprogram chmod_test\n  implicit none\n  integer :: status\n  call chmod('test.dat','u+x',status)\n  print *, 'Status: ', status\nend program chmod_test\n```\n\n`CHMOD` as function:\n\n``` example-preformatted\nprogram chmod_test\n  implicit none\n  integer :: status\n  status = chmod('test.dat','u+x')\n  print *, 'Status: ', status\nend program chmod_test\n```\n\nNext: [`CMPLX` — Complex conversion function](cmplx), Previous: [`CHDIR` — Change working directory](chdir), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CHMOD.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CHMOD.html)"
- name: 8.62. CMPLX
  id: cmplx
  summary: 'Description: CMPLX(X [, Y [, KIND]]) returns a complex number where X is converted to the real component'
  description: "Next: [`CO_BROADCAST` — Copy a value to all images the current set of images](co_005fbroadcast), Previous: [`CHMOD` — Change access permissions of files](chmod), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.62 CMPLX — Complex conversion function [¶](#CMPLX-----Complex-conversion-function)\n\nDescription:  \n`CMPLX(X [, Y [, KIND]])` returns a complex number where `X` is converted to the real component. If `Y` is present it is converted to the imaginary component. If `Y` is not present then the imaginary component is set to 0.0. If `X` is complex then `Y` must not be present.\n\nStandard:  \nFortran 77 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = CMPLX(X [, Y [, KIND]])`\n\nArguments:  \n|        |                                                                                                |\n|--------|------------------------------------------------------------------------------------------------|\n| `X`    | The type may be `INTEGER`, `REAL`, or `COMPLEX`.                                               |\n| `Y`    | (Optional; only allowed if `X` is not `COMPLEX`.) May be `INTEGER` or `REAL`.                  |\n| `KIND` | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result. |\n\nReturn value:  \nThe return value is of `COMPLEX` type, with a kind equal to `KIND` if it is specified. If `KIND` is not specified, the result is of the default `COMPLEX` kind, regardless of the kinds of `X` and `Y`.\n\nExample:  \n``` example-preformatted\nprogram test_cmplx\n    integer :: i = 42\n    real :: x = 3.14\n    complex :: z\n    z = cmplx(i, x)\n    print *, z, cmplx(x)\nend program test_cmplx\n```\n\nSee also:  \n[`COMPLEX` — Complex conversion function](complex)\n\nNext: [`CO_BROADCAST` — Copy a value to all images the current set of images](co_005fbroadcast), Previous: [`CHMOD` — Change access permissions of files](chmod), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CMPLX.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CMPLX.html)"
- name: 8.63. CO_BROADCAST
  id: co_005fbroadcast
  summary: 'Description: CO_BROADCAST copies the value of argument A on the image with image index SOURCE_IMAGE to all images in the current team'
  description: "Next: [`CO_MAX` — Maximal value on the current set of images](co_005fmax), Previous: [`CMPLX` — Complex conversion function](cmplx), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.63 CO_BROADCAST — Copy a value to all images the current set of images [¶](#CO_005fBROADCAST-----Copy-a-value-to-all-images-the-current-set-of-images)\n\nDescription:  \n`CO_BROADCAST` copies the value of argument `A` on the image with image index `SOURCE_IMAGE` to all images in the current team. `A` becomes defined as if by intrinsic assignment. If the execution was successful and `STAT` is present, it is assigned the value zero. If the execution failed, `STAT` gets assigned a nonzero value and, if present, `ERRMSG` gets assigned a value describing the occurred error.\n\nStandard:  \nTechnical Specification (TS) 18508 or later\n\nClass:  \nCollective subroutine\n\nSyntax:  \n`CALL CO_BROADCAST(A, SOURCE_IMAGE [, STAT, ERRMSG])`\n\nArguments:  \n|                |                                                                                                                                                                                |\n|----------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `A`            | INTENT(INOUT) argument; shall have the same dynamic type and type parameters on all images of the current team. If it is an array, it shall have the same shape on all images. |\n| `SOURCE_IMAGE` | a scalar integer expression. It shall have the same value on all images and refer to an image of the current team.                                                             |\n| `STAT`         | (optional) a scalar integer variable                                                                                                                                           |\n| `ERRMSG`       | (optional) a scalar character variable                                                                                                                                         |\n\nExample:  \n``` example-preformatted\nprogram test\n  integer :: val(3)\n  if (this_image() == 1) then\n    val = [1, 5, 3]\n  end if\n  call co_broadcast (val, source_image=1)\n  print *, this_image, \":\", val\nend program test\n```\n\nSee also:  \n[`CO_MAX` — Maximal value on the current set of images](co_005fmax), [`CO_MIN` — Minimal value on the current set of images](co_005fmin), [`CO_SUM` — Sum of values on the current set of images](co_005fsum), [`CO_REDUCE` — Reduction of values on the current set of images](co_005freduce)\n\nNext: [`CO_MAX` — Maximal value on the current set of images](co_005fmax), Previous: [`CMPLX` — Complex conversion function](cmplx), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CO_005fBROADCAST.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CO_005fBROADCAST.html)"
- name: 8.64. CO_MAX
  id: co_005fmax
  summary: 'Description: CO_MAX determines element-wise the maximal value of A on all images of the current team'
  description: "Next: [`CO_MIN` — Minimal value on the current set of images](co_005fmin), Previous: [`CO_BROADCAST` — Copy a value to all images the current set of images](co_005fbroadcast), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.64 CO_MAX — Maximal value on the current set of images [¶](#CO_005fMAX-----Maximal-value-on-the-current-set-of-images)\n\nDescription:  \n`CO_MAX` determines element-wise the maximal value of `A` on all images of the current team. If `RESULT_IMAGE` is present, the maximum values are returned in `A` on the specified image only and the value of `A` on the other images become undefined. If `RESULT_IMAGE` is not present, the value is returned on all images. If the execution was successful and `STAT` is present, it is assigned the value zero. If the execution failed, `STAT` gets assigned a nonzero value and, if present, `ERRMSG` gets assigned a value describing the occurred error.\n\nStandard:  \nTechnical Specification (TS) 18508 or later\n\nClass:  \nCollective subroutine\n\nSyntax:  \n`CALL CO_MAX(A [, RESULT_IMAGE, STAT, ERRMSG])`\n\nArguments:  \n|                |                                                                                                                                           |\n|----------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| `A`            | shall be an integer, real or character variable, which has the same type and type parameters on all images of the team.                   |\n| `RESULT_IMAGE` | (optional) a scalar integer expression; if present, it shall have the same value on all images and refer to an image of the current team. |\n| `STAT`         | (optional) a scalar integer variable                                                                                                      |\n| `ERRMSG`       | (optional) a scalar character variable                                                                                                    |\n\nExample:  \n``` example-preformatted\nprogram test\n  integer :: val\n  val = this_image ()\n  call co_max (val, result_image=1)\n  if (this_image() == 1) then\n    write(*,*) \"Maximal value\", val  ! prints num_images()\n  end if\nend program test\n```\n\nSee also:  \n[`CO_MIN` — Minimal value on the current set of images](co_005fmin), [`CO_SUM` — Sum of values on the current set of images](co_005fsum), [`CO_REDUCE` — Reduction of values on the current set of images](co_005freduce), [`CO_BROADCAST` — Copy a value to all images the current set of images](co_005fbroadcast)\n\nNext: [`CO_MIN` — Minimal value on the current set of images](co_005fmin), Previous: [`CO_BROADCAST` — Copy a value to all images the current set of images](co_005fbroadcast), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CO_005fMAX.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CO_005fMAX.html)"
- name: 8.65. CO_MIN
  id: co_005fmin
  summary: 'Description: CO_MIN determines element-wise the minimal value of A on all images of the current team'
  description: "Next: [`CO_REDUCE` — Reduction of values on the current set of images](co_005freduce), Previous: [`CO_MAX` — Maximal value on the current set of images](co_005fmax), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.65 CO_MIN — Minimal value on the current set of images [¶](#CO_005fMIN-----Minimal-value-on-the-current-set-of-images)\n\nDescription:  \n`CO_MIN` determines element-wise the minimal value of `A` on all images of the current team. If `RESULT_IMAGE` is present, the minimal values are returned in `A` on the specified image only and the value of `A` on the other images become undefined. If `RESULT_IMAGE` is not present, the value is returned on all images. If the execution was successful and `STAT` is present, it is assigned the value zero. If the execution failed, `STAT` gets assigned a nonzero value and, if present, `ERRMSG` gets assigned a value describing the occurred error.\n\nStandard:  \nTechnical Specification (TS) 18508 or later\n\nClass:  \nCollective subroutine\n\nSyntax:  \n`CALL CO_MIN(A [, RESULT_IMAGE, STAT, ERRMSG])`\n\nArguments:  \n|                |                                                                                                                                           |\n|----------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| `A`            | shall be an integer, real or character variable, which has the same type and type parameters on all images of the team.                   |\n| `RESULT_IMAGE` | (optional) a scalar integer expression; if present, it shall have the same value on all images and refer to an image of the current team. |\n| `STAT`         | (optional) a scalar integer variable                                                                                                      |\n| `ERRMSG`       | (optional) a scalar character variable                                                                                                    |\n\nExample:  \n``` example-preformatted\nprogram test\n  integer :: val\n  val = this_image ()\n  call co_min (val, result_image=1)\n  if (this_image() == 1) then\n    write(*,*) \"Minimal value\", val  ! prints 1\n  end if\nend program test\n```\n\nSee also:  \n[`CO_MAX` — Maximal value on the current set of images](co_005fmax), [`CO_SUM` — Sum of values on the current set of images](co_005fsum), [`CO_REDUCE` — Reduction of values on the current set of images](co_005freduce), [`CO_BROADCAST` — Copy a value to all images the current set of images](co_005fbroadcast)\n\nNext: [`CO_REDUCE` — Reduction of values on the current set of images](co_005freduce), Previous: [`CO_MAX` — Maximal value on the current set of images](co_005fmax), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CO_005fMIN.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CO_005fMIN.html)"
- name: 8.66. CO_REDUCE
  id: co_005freduce
  summary: 'Description: CO_REDUCE determines element-wise the reduction of the value of A on all images of the current team'
  description: "Next: [`CO_SUM` — Sum of values on the current set of images](co_005fsum), Previous: [`CO_MIN` — Minimal value on the current set of images](co_005fmin), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.66 CO_REDUCE — Reduction of values on the current set of images [¶](#CO_005fREDUCE-----Reduction-of-values-on-the-current-set-of-images)\n\nDescription:  \n`CO_REDUCE` determines element-wise the reduction of the value of `A` on all images of the current team. The pure function passed as `OPERATION` is used to pairwise reduce the values of `A` by passing either the value of `A` of different images or the result values of such a reduction as argument. If `A` is an array, the deduction is done element wise. If `RESULT_IMAGE` is present, the result values are returned in `A` on the specified image only and the value of `A` on the other images become undefined. If `RESULT_IMAGE` is not present, the value is returned on all images. If the execution was successful and `STAT` is present, it is assigned the value zero. If the execution failed, `STAT` gets assigned a nonzero value and, if present, `ERRMSG` gets assigned a value describing the occurred error.\n\nStandard:  \nTechnical Specification (TS) 18508 or later\n\nClass:  \nCollective subroutine\n\nSyntax:  \n`CALL CO_REDUCE(A, OPERATION, [, RESULT_IMAGE, STAT, ERRMSG])`\n\nArguments:  \n|                |                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n|----------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `A`            | is an `INTENT(INOUT)` argument and shall be nonpolymorphic. If it is allocatable, it shall be allocated; if it is a pointer, it shall be associated. `A` shall have the same type and type parameters on all images of the team; if it is an array, it shall have the same shape on all images.                                                                                                                                                               |\n| `OPERATION`    | pure function with two scalar nonallocatable arguments, which shall be nonpolymorphic and have the same type and type parameters as `A`. The function shall return a nonallocatable scalar of the same type and type parameters as `A`. The function shall be the same on all images and with regards to the arguments mathematically commutative and associative. Note that `OPERATION` may not be an elemental function, unless it is an intrisic function. |\n| `RESULT_IMAGE` | (optional) a scalar integer expression; if present, it shall have the same value on all images and refer to an image of the current team.                                                                                                                                                                                                                                                                                                                     |\n| `STAT`         | (optional) a scalar integer variable                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| `ERRMSG`       | (optional) a scalar character variable                                                                                                                                                                                                                                                                                                                                                                                                                        |\n\nExample:  \n``` example-preformatted\nprogram test\n  integer :: val\n  val = this_image ()\n  call co_reduce (val, result_image=1, operation=myprod)\n  if (this_image() == 1) then\n    write(*,*) \"Product value\", val  ! prints num_images() factorial\n  end if\ncontains\n  pure function myprod(a, b)\n    integer, value :: a, b\n    integer :: myprod\n    myprod = a * b\n  end function myprod\nend program test\n```\n\nNote:  \nWhile the rules permit in principle an intrinsic function, none of the intrinsics in the standard fulfill the criteria of having a specific function, which takes two arguments of the same type and returning that type as result.\n\nSee also:  \n[`CO_MIN` — Minimal value on the current set of images](co_005fmin), [`CO_MAX` — Maximal value on the current set of images](co_005fmax), [`CO_SUM` — Sum of values on the current set of images](co_005fsum), [`CO_BROADCAST` — Copy a value to all images the current set of images](co_005fbroadcast)\n\nNext: [`CO_SUM` — Sum of values on the current set of images](co_005fsum), Previous: [`CO_MIN` — Minimal value on the current set of images](co_005fmin), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CO_005fREDUCE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CO_005fREDUCE.html)"
- name: 8.67. CO_SUM
  id: co_005fsum
  summary: 'Description: CO_SUM sums up the values of each element of A on all images of the current team'
  description: "Next: [`COMMAND_ARGUMENT_COUNT` — Get number of command line arguments](command_005fargument_005fcount), Previous: [`CO_REDUCE` — Reduction of values on the current set of images](co_005freduce), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.67 CO_SUM — Sum of values on the current set of images [¶](#CO_005fSUM-----Sum-of-values-on-the-current-set-of-images)\n\nDescription:  \n`CO_SUM` sums up the values of each element of `A` on all images of the current team. If `RESULT_IMAGE` is present, the summed-up values are returned in `A` on the specified image only and the value of `A` on the other images become undefined. If `RESULT_IMAGE` is not present, the value is returned on all images. If the execution was successful and `STAT` is present, it is assigned the value zero. If the execution failed, `STAT` gets assigned a nonzero value and, if present, `ERRMSG` gets assigned a value describing the occurred error.\n\nStandard:  \nTechnical Specification (TS) 18508 or later\n\nClass:  \nCollective subroutine\n\nSyntax:  \n`CALL CO_SUM(A [, RESULT_IMAGE, STAT, ERRMSG])`\n\nArguments:  \n|                |                                                                                                                                           |\n|----------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| `A`            | shall be an integer, real or complex variable, which has the same type and type parameters on all images of the team.                     |\n| `RESULT_IMAGE` | (optional) a scalar integer expression; if present, it shall have the same value on all images and refer to an image of the current team. |\n| `STAT`         | (optional) a scalar integer variable                                                                                                      |\n| `ERRMSG`       | (optional) a scalar character variable                                                                                                    |\n\nExample:  \n``` example-preformatted\nprogram test\n  integer :: val\n  val = this_image ()\n  call co_sum (val, result_image=1)\n  if (this_image() == 1) then\n    write(*,*) \"The sum is \", val ! prints (n**2 + n)/2,\n                                  ! with n = num_images()\n  end if\nend program test\n```\n\nSee also:  \n[`CO_MAX` — Maximal value on the current set of images](co_005fmax), [`CO_MIN` — Minimal value on the current set of images](co_005fmin), [`CO_REDUCE` — Reduction of values on the current set of images](co_005freduce), [`CO_BROADCAST` — Copy a value to all images the current set of images](co_005fbroadcast)\n\nNext: [`COMMAND_ARGUMENT_COUNT` — Get number of command line arguments](command_005fargument_005fcount), Previous: [`CO_REDUCE` — Reduction of values on the current set of images](co_005freduce), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CO_005fSUM.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CO_005fSUM.html)"
- name: 8.68. COMMAND_ARGUMENT_COUNT
  id: command_005fargument_005fcount
  summary: 'Description: COMMAND_ARGUMENT_COUNT returns the number of arguments passed on the command line when the containing program was invoked'
  description: "Next: [`COMPILER_OPTIONS` — Options passed to the compiler](compiler_005foptions), Previous: [`CO_SUM` — Sum of values on the current set of images](co_005fsum), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.68 COMMAND_ARGUMENT_COUNT — Get number of command line arguments [¶](#COMMAND_005fARGUMENT_005fCOUNT-----Get-number-of-command-line-arguments)\n\nDescription:  \n`COMMAND_ARGUMENT_COUNT` returns the number of arguments passed on the command line when the containing program was invoked.\n\nStandard:  \nFortran 2003 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = COMMAND_ARGUMENT_COUNT()`\n\nArguments:  \n|      |\n|------|\n| None |\n\nReturn value:  \nThe return value is an `INTEGER` of default kind.\n\nExample:  \n``` example-preformatted\nprogram test_command_argument_count\n    integer :: count\n    count = command_argument_count()\n    print *, count\nend program test_command_argument_count\n```\n\nSee also:  \n[`GET_COMMAND` — Get the entire command line](get_005fcommand), [`GET_COMMAND_ARGUMENT` — Get command line arguments](get_005fcommand_005fargument)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/COMMAND_005fARGUMENT_005fCOUNT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/COMMAND_005fARGUMENT_005fCOUNT.html)"
- name: 8.69. COMPILER_OPTIONS
  id: compiler_005foptions
  summary: 'Description: COMPILER_OPTIONS returns a string with the options used for compiling'
  description: "Next: [`COMPILER_VERSION` — Compiler version string](compiler_005fversion), Previous: [`COMMAND_ARGUMENT_COUNT` — Get number of command line arguments](command_005fargument_005fcount), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.69 COMPILER_OPTIONS — Options passed to the compiler [¶](#COMPILER_005fOPTIONS-----Options-passed-to-the-compiler)\n\nDescription:  \n`COMPILER_OPTIONS` returns a string with the options used for compiling.\n\nStandard:  \nFortran 2008\n\nClass:  \nInquiry function of the module `ISO_FORTRAN_ENV`\n\nSyntax:  \n`STR = COMPILER_OPTIONS()`\n\nArguments:  \nNone\n\nReturn value:  \nThe return value is a default-kind string with system-dependent length. It contains the compiler flags used to compile the file, which called the `COMPILER_OPTIONS` intrinsic.\n\nExample:  \n``` example-preformatted\nuse iso_fortran_env\nprint '(4a)', 'This file was compiled by ', &\n              compiler_version(), ' using the options ', &\n              compiler_options()\nend\n```\n\nSee also:  \n[`COMPILER_VERSION` — Compiler version string](compiler_005fversion), [`ISO_FORTRAN_ENV`](iso_005ffortran_005fenv)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/COMPILER_005fOPTIONS.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/COMPILER_005fOPTIONS.html)"
- name: 8.70. COMPILER_VERSION
  id: compiler_005fversion
  summary: 'Description: COMPILER_VERSION returns a string with the name and the version of the compiler'
  description: "Next: [`COMPLEX` — Complex conversion function](complex), Previous: [`COMPILER_OPTIONS` — Options passed to the compiler](compiler_005foptions), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.70 COMPILER_VERSION — Compiler version string [¶](#COMPILER_005fVERSION-----Compiler-version-string)\n\nDescription:  \n`COMPILER_VERSION` returns a string with the name and the version of the compiler.\n\nStandard:  \nFortran 2008\n\nClass:  \nInquiry function of the module `ISO_FORTRAN_ENV`\n\nSyntax:  \n`STR = COMPILER_VERSION()`\n\nArguments:  \nNone\n\nReturn value:  \nThe return value is a default-kind string with system-dependent length. It contains the name of the compiler and its version number.\n\nExample:  \n``` example-preformatted\nuse iso_fortran_env\nprint '(4a)', 'This file was compiled by ', &\n              compiler_version(), ' using the options ', &\n              compiler_options()\nend\n```\n\nSee also:  \n[`COMPILER_OPTIONS` — Options passed to the compiler](compiler_005foptions), [`ISO_FORTRAN_ENV`](iso_005ffortran_005fenv)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/COMPILER_005fVERSION.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/COMPILER_005fVERSION.html)"
- name: 8.71. COMPLEX
  id: complex
  summary: 'Description: COMPLEX(X, Y) returns a complex number where X is converted to the real component and Y is converted to the imaginary component'
  description: "Next: [`CONJG` — Complex conjugate function](conjg), Previous: [`COMPILER_VERSION` — Compiler version string](compiler_005fversion), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.71 COMPLEX — Complex conversion function [¶](#COMPLEX-----Complex-conversion-function)\n\nDescription:  \n`COMPLEX(X, Y)` returns a complex number where `X` is converted to the real component and `Y` is converted to the imaginary component.\n\nStandard:  \nGNU extension\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = COMPLEX(X, Y)`\n\nArguments:  \n|     |                                      |\n|-----|--------------------------------------|\n| `X` | The type may be `INTEGER` or `REAL`. |\n| `Y` | The type may be `INTEGER` or `REAL`. |\n\nReturn value:  \nIf `X` and `Y` are both of `INTEGER` type, then the return value is of default `COMPLEX` type.\n\nIf `X` and `Y` are of `REAL` type, or one is of `REAL` type and one is of `INTEGER` type, then the return value is of `COMPLEX` type with a kind equal to that of the `REAL` argument with the highest precision.\n\nExample:  \n``` example-preformatted\nprogram test_complex\n    integer :: i = 42\n    real :: x = 3.14\n    print *, complex(i, x)\nend program test_complex\n```\n\nSee also:  \n[`CMPLX` — Complex conversion function](cmplx)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/COMPLEX.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/COMPLEX.html)"
- name: 8.72. CONJG
  id: conjg
  summary: 'Description: CONJG(Z) returns the conjugate of Z'
  description: "Next: [`COS` — Cosine function](cos), Previous: [`COMPLEX` — Complex conversion function](complex), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.72 CONJG — Complex conjugate function [¶](#CONJG-----Complex-conjugate-function)\n\nDescription:  \n`CONJG(Z)` returns the conjugate of `Z`. If `Z` is `(x, y)` then the result is `(x, -y)`\n\nStandard:  \nFortran 77 and later, has an overload that is a GNU extension\n\nClass:  \nElemental function\n\nSyntax:  \n`Z = CONJG(Z)`\n\nArguments:  \n|     |                              |\n|-----|------------------------------|\n| `Z` | The type shall be `COMPLEX`. |\n\nReturn value:  \nThe return value is of type `COMPLEX`.\n\nExample:  \n``` example-preformatted\nprogram test_conjg\n    complex :: z = (2.0, 3.0)\n    complex(8) :: dz = (2.71_8, -3.14_8)\n    z= conjg(z)\n    print *, z\n    dz = dconjg(dz)\n    print *, dz\nend program test_conjg\n```\n\nSpecific names:  \n| Name        | Argument       | Return type  | Standard      |\n|-------------|----------------|--------------|---------------|\n| `DCONJG(Z)` | `COMPLEX(8) Z` | `COMPLEX(8)` | GNU extension |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CONJG.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CONJG.html)"
- name: 8.73. COS
  id: cos
  summary: 'Description: COS(X) computes the cosine of X'
  description: "Next: [`COSD` — Cosine function, degrees](cosd), Previous: [`CONJG` — Complex conjugate function](conjg), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.73 COS — Cosine function [¶](#COS-----Cosine-function)\n\nDescription:  \n`COS(X)` computes the cosine of `X`.\n\nStandard:  \nFortran 77 and later, has overloads that are GNU extensions\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = COS(X)`\n\nArguments:  \n|     |                                        |\n|-----|----------------------------------------|\n| `X` | The type shall be `REAL` or `COMPLEX`. |\n\nReturn value:  \nThe return value is of the same type and kind as `X`. The real part of the result is in radians. If `X` is of the type `REAL`, the return value lies in the range *-1 \\leq \\cos (x) \\leq 1*.\n\nExample:  \n``` example-preformatted\nprogram test_cos\n  real :: x = 0.0\n  x = cos(x)\nend program test_cos\n```\n\nSpecific names:  \n| Name       | Argument       | Return type  | Standard             |\n|------------|----------------|--------------|----------------------|\n| `COS(X)`   | `REAL(4) X`    | `REAL(4)`    | Fortran 77 and later |\n| `DCOS(X)`  | `REAL(8) X`    | `REAL(8)`    | Fortran 77 and later |\n| `CCOS(X)`  | `COMPLEX(4) X` | `COMPLEX(4)` | Fortran 77 and later |\n| `ZCOS(X)`  | `COMPLEX(8) X` | `COMPLEX(8)` | GNU extension        |\n| `CDCOS(X)` | `COMPLEX(8) X` | `COMPLEX(8)` | GNU extension        |\n\nSee also:  \nInverse function: [`ACOS` — Arccosine function](acos) Degrees function: [`COSD` — Cosine function, degrees](cosd)\n\nNext: [`COSD` — Cosine function, degrees](cosd), Previous: [`CONJG` — Complex conjugate function](conjg), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/COS.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/COS.html)"
- name: 8.74. COSD
  id: cosd
  summary: 'Description: COSD(X) computes the cosine of X in degrees'
  description: "Next: [`COSH` — Hyperbolic cosine function](cosh), Previous: [`COS` — Cosine function](cos), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.74 COSD — Cosine function, degrees [¶](#COSD-----Cosine-function_002c-degrees)\n\nDescription:  \n`COSD(X)` computes the cosine of `X` in degrees.\n\nThis function is for compatibility only and should be avoided in favor of standard constructs wherever possible.\n\nStandard:  \nGNU extension, enabled with `-fdec-math`.\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = COSD(X)`\n\nArguments:  \n|     |                                        |\n|-----|----------------------------------------|\n| `X` | The type shall be `REAL` or `COMPLEX`. |\n\nReturn value:  \nThe return value is of the same type and kind as `X`. The real part of the result is in degrees. If `X` is of the type `REAL`, the return value lies in the range *-1 \\leq \\cosd (x) \\leq 1*.\n\nExample:  \n``` example-preformatted\nprogram test_cosd\n  real :: x = 0.0\n  x = cosd(x)\nend program test_cosd\n```\n\nSpecific names:  \n| Name        | Argument       | Return type  | Standard      |\n|-------------|----------------|--------------|---------------|\n| `COSD(X)`   | `REAL(4) X`    | `REAL(4)`    | GNU extension |\n| `DCOSD(X)`  | `REAL(8) X`    | `REAL(8)`    | GNU extension |\n| `CCOSD(X)`  | `COMPLEX(4) X` | `COMPLEX(4)` | GNU extension |\n| `ZCOSD(X)`  | `COMPLEX(8) X` | `COMPLEX(8)` | GNU extension |\n| `CDCOSD(X)` | `COMPLEX(8) X` | `COMPLEX(8)` | GNU extension |\n\nSee also:  \nInverse function: [`ACOSD` — Arccosine function, degrees](acosd) Radians function: [`COS` — Cosine function](cos)\n\nNext: [`COSH` — Hyperbolic cosine function](cosh), Previous: [`COS` — Cosine function](cos), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/COSD.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/COSD.html)"
- name: 8.75. COSH
  id: cosh
  summary: 'Description: COSH(X) computes the hyperbolic cosine of X'
  description: "Next: [`COTAN` — Cotangent function](cotan), Previous: [`COSD` — Cosine function, degrees](cosd), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.75 COSH — Hyperbolic cosine function [¶](#COSH-----Hyperbolic-cosine-function)\n\nDescription:  \n`COSH(X)` computes the hyperbolic cosine of `X`.\n\nStandard:  \nFortran 77 and later, for a complex argument Fortran 2008 or later\n\nClass:  \nElemental function\n\nSyntax:  \n`X = COSH(X)`\n\nArguments:  \n|     |                                        |\n|-----|----------------------------------------|\n| `X` | The type shall be `REAL` or `COMPLEX`. |\n\nReturn value:  \nThe return value has same type and kind as `X`. If `X` is complex, the imaginary part of the result is in radians. If `X` is `REAL`, the return value has a lower bound of one, *\\cosh (x) \\geq 1*.\n\nExample:  \n``` example-preformatted\nprogram test_cosh\n  real(8) :: x = 1.0_8\n  x = cosh(x)\nend program test_cosh\n```\n\nSpecific names:  \n| Name       | Argument    | Return type | Standard             |\n|------------|-------------|-------------|----------------------|\n| `COSH(X)`  | `REAL(4) X` | `REAL(4)`   | Fortran 77 and later |\n| `DCOSH(X)` | `REAL(8) X` | `REAL(8)`   | Fortran 77 and later |\n\nSee also:  \nInverse function: [`ACOSH` — Inverse hyperbolic cosine function](acosh)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/COSH.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/COSH.html)"
- name: 8.76. COTAN
  id: cotan
  summary: 'Description: COTAN(X) computes the cotangent of X'
  description: "Next: [`COTAND` — Cotangent function, degrees](cotand), Previous: [`COSH` — Hyperbolic cosine function](cosh), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.76 COTAN — Cotangent function [¶](#COTAN-----Cotangent-function)\n\nDescription:  \n`COTAN(X)` computes the cotangent of `X`. Equivalent to `COS(x)` divided by `SIN(x)`, or `1 / TAN(x)`.\n\nThis function is for compatibility only and should be avoided in favor of standard constructs wherever possible.\n\nStandard:  \nGNU extension, enabled with `-fdec-math`.\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = COTAN(X)`\n\nArguments:  \n|     |                                        |\n|-----|----------------------------------------|\n| `X` | The type shall be `REAL` or `COMPLEX`. |\n\nReturn value:  \nThe return value has same type and kind as `X`, and its value is in radians.\n\nExample:  \n``` example-preformatted\nprogram test_cotan\n  real(8) :: x = 0.165_8\n  x = cotan(x)\nend program test_cotan\n```\n\nSpecific names:  \n| Name        | Argument    | Return type | Standard      |\n|-------------|-------------|-------------|---------------|\n| `COTAN(X)`  | `REAL(4) X` | `REAL(4)`   | GNU extension |\n| `DCOTAN(X)` | `REAL(8) X` | `REAL(8)`   | GNU extension |\n\nSee also:  \nConverse function: [`TAN` — Tangent function](tan) Degrees function: [`COTAND` — Cotangent function, degrees](cotand)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/COTAN.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/COTAN.html)"
- name: 8.77. COTAND
  id: cotand
  summary: 'Description: COTAND(X) computes the cotangent of X in degrees'
  description: "Next: [`COUNT` — Count function](count), Previous: [`COTAN` — Cotangent function](cotan), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.77 COTAND — Cotangent function, degrees [¶](#COTAND-----Cotangent-function_002c-degrees)\n\nDescription:  \n`COTAND(X)` computes the cotangent of `X` in degrees. Equivalent to `COSD(x)` divided by `SIND(x)`, or `1 / TAND(x)`.\n\nStandard:  \nGNU extension, enabled with `-fdec-math`.\n\nThis function is for compatibility only and should be avoided in favor of standard constructs wherever possible.\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = COTAND(X)`\n\nArguments:  \n|     |                                        |\n|-----|----------------------------------------|\n| `X` | The type shall be `REAL` or `COMPLEX`. |\n\nReturn value:  \nThe return value has same type and kind as `X`, and its value is in degrees.\n\nExample:  \n``` example-preformatted\nprogram test_cotand\n  real(8) :: x = 0.165_8\n  x = cotand(x)\nend program test_cotand\n```\n\nSpecific names:  \n| Name         | Argument    | Return type | Standard      |\n|--------------|-------------|-------------|---------------|\n| `COTAND(X)`  | `REAL(4) X` | `REAL(4)`   | GNU extension |\n| `DCOTAND(X)` | `REAL(8) X` | `REAL(8)`   | GNU extension |\n\nSee also:  \nConverse function: [`TAND` — Tangent function, degrees](tand) Radians function: [`COTAN` — Cotangent function](cotan)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/COTAND.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/COTAND.html)"
- name: 8.78. COUNT
  id: count
  summary: 'Description: Counts the number of .TRUE'
  description: "Next: [`CPU_TIME` — CPU elapsed time in seconds](cpu_005ftime), Previous: [`COTAND` — Cotangent function, degrees](cotand), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.78 COUNT — Count function [¶](#COUNT-----Count-function)\n\nDescription:  \nCounts the number of `.TRUE.` elements in a logical `MASK`, or, if the `DIM` argument is supplied, counts the number of elements along each row of the array in the `DIM` direction. If the array has zero size, or all of the elements of `MASK` are `.FALSE.`, then the result is `0`.\n\nStandard:  \nFortran 90 and later, with `KIND` argument Fortran 2003 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n`RESULT = COUNT(MASK [, DIM, KIND])`\n\nArguments:  \n|        |                                                                                                |\n|--------|------------------------------------------------------------------------------------------------|\n| `MASK` | The type shall be `LOGICAL`.                                                                   |\n| `DIM`  | (Optional) The type shall be `INTEGER`.                                                        |\n| `KIND` | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of kind `KIND`. If `KIND` is absent, the return value is of default integer kind. If `DIM` is present, the result is an array with a rank one less than the rank of `ARRAY`, and a size corresponding to the shape of `ARRAY` with the `DIM` dimension removed.\n\nExample:  \n``` example-preformatted\nprogram test_count\n    integer, dimension(2,3) :: a, b\n    logical, dimension(2,3) :: mask\n    a = reshape( (/ 1, 2, 3, 4, 5, 6 /), (/ 2, 3 /))\n    b = reshape( (/ 0, 7, 3, 4, 5, 8 /), (/ 2, 3 /))\n    print '(3i3)', a(1,:)\n    print '(3i3)', a(2,:)\n    print *\n    print '(3i3)', b(1,:)\n    print '(3i3)', b(2,:)\n    print *\n    mask = a.ne.b\n    print '(3l3)', mask(1,:)\n    print '(3l3)', mask(2,:)\n    print *\n    print '(3i3)', count(mask)\n    print *\n    print '(3i3)', count(mask, 1)\n    print *\n    print '(3i3)', count(mask, 2)\nend program test_count\n```\n\nNext: [`CPU_TIME` — CPU elapsed time in seconds](cpu_005ftime), Previous: [`COTAND` — Cotangent function, degrees](cotand), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/COUNT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/COUNT.html)"
- name: 8.79. CPU_TIME
  id: cpu_005ftime
  summary: 'Description: Returns a REAL value representing the elapsed CPU time in seconds'
  description: "Next: [`CSHIFT` — Circular shift elements of an array](cshift), Previous: [`COUNT` — Count function](count), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.79 CPU_TIME — CPU elapsed time in seconds [¶](#CPU_005fTIME-----CPU-elapsed-time-in-seconds)\n\nDescription:  \nReturns a `REAL` value representing the elapsed CPU time in seconds. This is useful for testing segments of code to determine execution time.\n\nIf a time source is available, time will be reported with microsecond resolution. If no time source is available, `TIME` is set to `-1.0`.\n\nNote that `TIME` may contain a, system dependent, arbitrary offset and may not start with `0.0`. For `CPU_TIME`, the absolute value is meaningless, only differences between subsequent calls to this subroutine, as shown in the example below, should be used.\n\nStandard:  \nFortran 95 and later\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL CPU_TIME(TIME)`\n\nArguments:  \n|        |                                              |\n|--------|----------------------------------------------|\n| `TIME` | The type shall be `REAL` with `INTENT(OUT)`. |\n\nReturn value:  \nNone\n\nExample:  \n``` example-preformatted\nprogram test_cpu_time\n    real :: start, finish\n    call cpu_time(start)\n        ! put code to test here\n    call cpu_time(finish)\n    print '(\"Time = \",f6.3,\" seconds.\")',finish-start\nend program test_cpu_time\n```\n\nSee also:  \n[`SYSTEM_CLOCK` — Time function](system_005fclock), [`DATE_AND_TIME` — Date and time subroutine](date_005fand_005ftime)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CPU_005fTIME.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CPU_005fTIME.html)"
- name: 8.80. CSHIFT
  id: cshift
  summary: 'Description: CSHIFT(ARRAY, SHIFT [, DIM]) performs a circular shift on elements of ARRAY along the dimension of DIM'
  description: "Next: [`CTIME` — Convert a time into a string](ctime), Previous: [`CPU_TIME` — CPU elapsed time in seconds](cpu_005ftime), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.80 CSHIFT — Circular shift elements of an array [¶](#CSHIFT-----Circular-shift-elements-of-an-array)\n\nDescription:  \n`CSHIFT(ARRAY, SHIFT [, DIM])` performs a circular shift on elements of `ARRAY` along the dimension of `DIM`. If `DIM` is omitted it is taken to be `1`. `DIM` is a scalar of type `INTEGER` in the range of *1 \\leq DIM \\leq n)* where *n* is the rank of `ARRAY`. If the rank of `ARRAY` is one, then all elements of `ARRAY` are shifted by `SHIFT` places. If rank is greater than one, then all complete rank one sections of `ARRAY` along the given dimension are shifted. Elements shifted out one end of each rank one section are shifted back in the other end.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n`RESULT = CSHIFT(ARRAY, SHIFT [, DIM])`\n\nArguments:  \n|         |                                |\n|---------|--------------------------------|\n| `ARRAY` | Shall be an array of any type. |\n| `SHIFT` | The type shall be `INTEGER`.   |\n| `DIM`   | The type shall be `INTEGER`.   |\n\nReturn value:  \nReturns an array of same type and rank as the `ARRAY` argument.\n\nExample:  \n``` example-preformatted\nprogram test_cshift\n    integer, dimension(3,3) :: a\n    a = reshape( (/ 1, 2, 3, 4, 5, 6, 7, 8, 9 /), (/ 3, 3 /))\n    print '(3i3)', a(1,:)\n    print '(3i3)', a(2,:)\n    print '(3i3)', a(3,:)    \n    a = cshift(a, SHIFT=(/1, 2, -1/), DIM=2)\n    print *\n    print '(3i3)', a(1,:)\n    print '(3i3)', a(2,:)\n    print '(3i3)', a(3,:)\nend program test_cshift\n```\n\nNext: [`CTIME` — Convert a time into a string](ctime), Previous: [`CPU_TIME` — CPU elapsed time in seconds](cpu_005ftime), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CSHIFT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CSHIFT.html)"
- name: 8.81. CTIME
  id: ctime
  summary: 'Description: CTIME converts a system time value, such as returned by TIME8 — Time function (64-bit), to a string'
  description: "Next: [`DATE_AND_TIME` — Date and time subroutine](date_005fand_005ftime), Previous: [`CSHIFT` — Circular shift elements of an array](cshift), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.81 CTIME — Convert a time into a string [¶](#CTIME-----Convert-a-time-into-a-string)\n\nDescription:  \n`CTIME` converts a system time value, such as returned by [`TIME8` — Time function (64-bit)](time8), to a string. The output will be of the form ‘`Sat Aug 19 18:13:14 1995`’.\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                             |\n|-----------------------------|\n| `CALL CTIME(TIME, RESULT)`. |\n| `RESULT = CTIME(TIME)`.     |\n\nArguments:  \n|          |                                                                                                                                                                                                                               |\n|----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `TIME`   | The type shall be of type `INTEGER`.                                                                                                                                                                                          |\n| `RESULT` | The type shall be of type `CHARACTER` and of default kind. It is an `INTENT(OUT)` argument. If the length of this variable is too short for the time and date string to fit completely, it will be blank on procedure return. |\n\nReturn value:  \nThe converted date and time as a string.\n\nExample:  \n``` example-preformatted\nprogram test_ctime\n    integer(8) :: i\n    character(len=30) :: date\n    i = time8()\n\n    ! Do something, main part of the program\n    \n    call ctime(i,date)\n    print *, 'Program was started on ', date\nend program test_ctime\n```\n\nSee Also:  \n[`DATE_AND_TIME` — Date and time subroutine](date_005fand_005ftime), [`GMTIME` — Convert time to GMT info](gmtime), [`LTIME` — Convert time to local time info](ltime), [`TIME` — Time function](time), [`TIME8` — Time function (64-bit)](time8)\n\nNext: [`DATE_AND_TIME` — Date and time subroutine](date_005fand_005ftime), Previous: [`CSHIFT` — Circular shift elements of an array](cshift), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CTIME.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/CTIME.html)"
- name: 8.82. DATE_AND_TIME
  id: date_005fand_005ftime
  summary: 'Description: DATE_AND_TIME(DATE, TIME, ZONE, VALUES) gets the corresponding date and time information from the real-time system clock'
  description: "Next: [`DBLE` — Double conversion function](dble), Previous: [`CTIME` — Convert a time into a string](ctime), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.82 DATE_AND_TIME — Date and time subroutine [¶](#DATE_005fAND_005fTIME-----Date-and-time-subroutine)\n\nDescription:  \n`DATE_AND_TIME(DATE, TIME, ZONE, VALUES)` gets the corresponding date and time information from the real-time system clock. `DATE` is `INTENT(OUT)` and has form ccyymmdd. `TIME` is `INTENT(OUT)` and has form hhmmss.sss. `ZONE` is `INTENT(OUT)` and has form (+-)hhmm, representing the difference with respect to Coordinated Universal Time (UTC). Unavailable time and date parameters return blanks.\n\n`VALUES` is `INTENT(OUT)` and provides the following:\n\n|             |                                     |\n|-------------|-------------------------------------|\n| `VALUE(1)`: | The year                            |\n| `VALUE(2)`: | The month                           |\n| `VALUE(3)`: | The day of the month                |\n| `VALUE(4)`: | Time difference with UTC in minutes |\n| `VALUE(5)`: | The hour of the day                 |\n| `VALUE(6)`: | The minutes of the hour             |\n| `VALUE(7)`: | The seconds of the minute           |\n| `VALUE(8)`: | The milliseconds of the second      |\n\nStandard:  \nFortran 90 and later\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL DATE_AND_TIME([DATE, TIME, ZONE, VALUES])`\n\nArguments:  \n|          |                                                                                  |\n|----------|----------------------------------------------------------------------------------|\n| `DATE`   | (Optional) The type shall be `CHARACTER(LEN=8)` or larger, and of default kind.  |\n| `TIME`   | (Optional) The type shall be `CHARACTER(LEN=10)` or larger, and of default kind. |\n| `ZONE`   | (Optional) The type shall be `CHARACTER(LEN=5)` or larger, and of default kind.  |\n| `VALUES` | (Optional) The type shall be `INTEGER(8)`.                                       |\n\nReturn value:  \nNone\n\nExample:  \n``` example-preformatted\nprogram test_time_and_date\n    character(8)  :: date\n    character(10) :: time\n    character(5)  :: zone\n    integer,dimension(8) :: values\n    ! using keyword arguments\n    call date_and_time(date,time,zone,values)\n    call date_and_time(DATE=date,ZONE=zone)\n    call date_and_time(TIME=time)\n    call date_and_time(VALUES=values)\n    print '(a,2x,a,2x,a)', date, time, zone\n    print '(8i5)', values\nend program test_time_and_date\n```\n\nSee also:  \n[`CPU_TIME` — CPU elapsed time in seconds](cpu_005ftime), [`SYSTEM_CLOCK` — Time function](system_005fclock)\n\nNext: [`DBLE` — Double conversion function](dble), Previous: [`CTIME` — Convert a time into a string](ctime), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/DATE_005fAND_005fTIME.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/DATE_005fAND_005fTIME.html)"
- name: 8.83. DBLE
  id: dble
  summary: 'Description: DBLE(A) Converts A to double precision real type'
  description: "Next: [`DCMPLX` — Double complex conversion function](dcmplx), Previous: [`DATE_AND_TIME` — Date and time subroutine](date_005fand_005ftime), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.83 DBLE — Double conversion function [¶](#DBLE-----Double-conversion-function)\n\nDescription:  \n`DBLE(A)` Converts `A` to double precision real type.\n\nStandard:  \nFortran 77 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = DBLE(A)`\n\nArguments:  \n|     |                                                    |\n|-----|----------------------------------------------------|\n| `A` | The type shall be `INTEGER`, `REAL`, or `COMPLEX`. |\n\nReturn value:  \nThe return value is of type double precision real.\n\nExample:  \n``` example-preformatted\nprogram test_dble\n    real    :: x = 2.18\n    integer :: i = 5\n    complex :: z = (2.3,1.14)\n    print *, dble(x), dble(i), dble(z)\nend program test_dble\n```\n\nSee also:  \n[`REAL` — Convert to real type](real)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/DBLE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/DBLE.html)"
- name: 8.84. DCMPLX
  id: dcmplx
  summary: 'Description: DCMPLX(X [,Y]) returns a double complex number where X is converted to the real component'
  description: "Next: [`DIGITS` — Significant binary digits function](digits), Previous: [`DBLE` — Double conversion function](dble), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.84 DCMPLX — Double complex conversion function [¶](#DCMPLX-----Double-complex-conversion-function)\n\nDescription:  \n`DCMPLX(X [,Y])` returns a double complex number where `X` is converted to the real component. If `Y` is present it is converted to the imaginary component. If `Y` is not present then the imaginary component is set to 0.0. If `X` is complex then `Y` must not be present.\n\nStandard:  \nGNU extension\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = DCMPLX(X [, Y])`\n\nArguments:  \n|     |                                                                 |\n|-----|-----------------------------------------------------------------|\n| `X` | The type may be `INTEGER`, `REAL`, or `COMPLEX`.                |\n| `Y` | (Optional if `X` is not `COMPLEX`.) May be `INTEGER` or `REAL`. |\n\nReturn value:  \nThe return value is of type `COMPLEX(8)`\n\nExample:  \n``` example-preformatted\nprogram test_dcmplx\n    integer :: i = 42\n    real :: x = 3.14\n    complex :: z\n    z = cmplx(i, x)\n    print *, dcmplx(i)\n    print *, dcmplx(x)\n    print *, dcmplx(z)\n    print *, dcmplx(x,i)\nend program test_dcmplx\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/DCMPLX.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/DCMPLX.html)"
- name: 8.85. DIGITS
  id: digits
  summary: 'Description: DIGITS(X) returns the number of significant binary digits of the internal model representation of X'
  description: "Next: [`DIM` — Positive difference](dim), Previous: [`DCMPLX` — Double complex conversion function](dcmplx), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.85 DIGITS — Significant binary digits function [¶](#DIGITS-----Significant-binary-digits-function)\n\nDescription:  \n`DIGITS(X)` returns the number of significant binary digits of the internal model representation of `X`. For example, on a system using a 32-bit floating point representation, a default real number would likely return 24.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = DIGITS(X)`\n\nArguments:  \n|     |                                      |\n|-----|--------------------------------------|\n| `X` | The type may be `INTEGER` or `REAL`. |\n\nReturn value:  \nThe return value is of type `INTEGER`.\n\nExample:  \n``` example-preformatted\nprogram test_digits\n    integer :: i = 12345\n    real :: x = 3.143\n    real(8) :: y = 2.33\n    print *, digits(i)\n    print *, digits(x)\n    print *, digits(y)\nend program test_digits\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/DIGITS.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/DIGITS.html)"
- name: 8.86. DIM
  id: dim
  summary: 'Description: DIM(X,Y) returns the difference X-Y if the result is positive; otherwise returns zero'
  description: "Next: [`DOT_PRODUCT` — Dot product function](dot_005fproduct), Previous: [`DIGITS` — Significant binary digits function](digits), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.86 DIM — Positive difference [¶](#DIM-----Positive-difference)\n\nDescription:  \n`DIM(X,Y)` returns the difference `X-Y` if the result is positive; otherwise returns zero.\n\nStandard:  \nFortran 77 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = DIM(X, Y)`\n\nArguments:  \n|     |                                                                                                                    |\n|-----|--------------------------------------------------------------------------------------------------------------------|\n| `X` | The type shall be `INTEGER` or `REAL`                                                                              |\n| `Y` | The type shall be the same type and kind as `X`. (As a GNU extension, arguments of different kinds are permitted.) |\n\nReturn value:  \nThe return value is of type `INTEGER` or `REAL`. (As a GNU extension, kind is the largest kind of the actual arguments.)\n\nExample:  \n``` example-preformatted\nprogram test_dim\n    integer :: i\n    real(8) :: x\n    i = dim(4, 15)\n    x = dim(4.345_8, 2.111_8)\n    print *, i\n    print *, x\nend program test_dim\n```\n\nSpecific names:  \n| Name        | Argument          | Return type  | Standard             |\n|-------------|-------------------|--------------|----------------------|\n| `DIM(X,Y)`  | `REAL(4) X, Y`    | `REAL(4)`    | Fortran 77 and later |\n| `IDIM(X,Y)` | `INTEGER(4) X, Y` | `INTEGER(4)` | Fortran 77 and later |\n| `DDIM(X,Y)` | `REAL(8) X, Y`    | `REAL(8)`    | Fortran 77 and later |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/DIM.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/DIM.html)"
- name: 8.87. DOT_PRODUCT
  id: dot_005fproduct
  summary: 'Description: DOT_PRODUCT(VECTOR_A, VECTOR_B) computes the dot product multiplication of two vectors VECTOR_A and VECTOR_B'
  description: "Next: [`DPROD` — Double product function](dprod), Previous: [`DIM` — Positive difference](dim), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.87 DOT_PRODUCT — Dot product function [¶](#DOT_005fPRODUCT-----Dot-product-function)\n\nDescription:  \n`DOT_PRODUCT(VECTOR_A, VECTOR_B)` computes the dot product multiplication of two vectors `VECTOR_A` and `VECTOR_B`. The two vectors may be either numeric or logical and must be arrays of rank one and of equal size. If the vectors are `INTEGER` or `REAL`, the result is `SUM(VECTOR_A*VECTOR_B)`. If the vectors are `COMPLEX`, the result is `SUM(CONJG(VECTOR_A)*VECTOR_B)`. If the vectors are `LOGICAL`, the result is `ANY(VECTOR_A .AND. VECTOR_B)`.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n`RESULT = DOT_PRODUCT(VECTOR_A, VECTOR_B)`\n\nArguments:  \n|            |                                                                                                                                                   |\n|------------|---------------------------------------------------------------------------------------------------------------------------------------------------|\n| `VECTOR_A` | The type shall be numeric or `LOGICAL`, rank 1.                                                                                                   |\n| `VECTOR_B` | The type shall be numeric if `VECTOR_A` is of numeric type or `LOGICAL` if `VECTOR_A` is of type `LOGICAL`. `VECTOR_B` shall be a rank-one array. |\n\nReturn value:  \nIf the arguments are numeric, the return value is a scalar of numeric type, `INTEGER`, `REAL`, or `COMPLEX`. If the arguments are `LOGICAL`, the return value is `.TRUE.` or `.FALSE.`.\n\nExample:  \n``` example-preformatted\nprogram test_dot_prod\n    integer, dimension(3) :: a, b\n    a = (/ 1, 2, 3 /)\n    b = (/ 4, 5, 6 /)\n    print '(3i3)', a\n    print *\n    print '(3i3)', b\n    print *\n    print *, dot_product(a,b)\nend program test_dot_prod\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/DOT_005fPRODUCT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/DOT_005fPRODUCT.html)"
- name: 8.88. DPROD
  id: dprod
  summary: 'Description: DPROD(X,Y) returns the product X*Y'
  description: "Next: [`DREAL` — Double real part function](dreal), Previous: [`DOT_PRODUCT` — Dot product function](dot_005fproduct), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.88 DPROD — Double product function [¶](#DPROD-----Double-product-function)\n\nDescription:  \n`DPROD(X,Y)` returns the product `X*Y`.\n\nStandard:  \nFortran 77 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = DPROD(X, Y)`\n\nArguments:  \n|     |                           |\n|-----|---------------------------|\n| `X` | The type shall be `REAL`. |\n| `Y` | The type shall be `REAL`. |\n\nReturn value:  \nThe return value is of type `REAL(8)`.\n\nExample:  \n``` example-preformatted\nprogram test_dprod\n    real :: x = 5.2\n    real :: y = 2.3\n    real(8) :: d\n    d = dprod(x,y)\n    print *, d\nend program test_dprod\n```\n\nSpecific names:  \n| Name         | Argument       | Return type | Standard             |\n|--------------|----------------|-------------|----------------------|\n| `DPROD(X,Y)` | `REAL(4) X, Y` | `REAL(8)`   | Fortran 77 and later |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/DPROD.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/DPROD.html)"
- name: 8.89. DREAL
  id: dreal
  summary: 'Description: DREAL(Z) returns the real part of complex variable Z'
  description: "Next: [`DSHIFTL` — Combined left shift](dshiftl), Previous: [`DPROD` — Double product function](dprod), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.89 DREAL — Double real part function [¶](#DREAL-----Double-real-part-function)\n\nDescription:  \n`DREAL(Z)` returns the real part of complex variable `Z`.\n\nStandard:  \nGNU extension\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = DREAL(A)`\n\nArguments:  \n|     |                                 |\n|-----|---------------------------------|\n| `A` | The type shall be `COMPLEX(8)`. |\n\nReturn value:  \nThe return value is of type `REAL(8)`.\n\nExample:  \n``` example-preformatted\nprogram test_dreal\n    complex(8) :: z = (1.3_8,7.2_8)\n    print *, dreal(z)\nend program test_dreal\n```\n\nSee also:  \n[`AIMAG` — Imaginary part of complex number](aimag)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/DREAL.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/DREAL.html)"
- name: 8.90. DSHIFTL
  id: dshiftl
  summary: 'Description: DSHIFTL(I, J, SHIFT) combines bits of I and J'
  description: "Next: [`DSHIFTR` — Combined right shift](dshiftr), Previous: [`DREAL` — Double real part function](dreal), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.90 DSHIFTL — Combined left shift [¶](#DSHIFTL-----Combined-left-shift)\n\nDescription:  \n`DSHIFTL(I, J, SHIFT)` combines bits of `I` and `J`. The rightmost `SHIFT` bits of the result are the leftmost `SHIFT` bits of `J`, and the remaining bits are the rightmost bits of `I`.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = DSHIFTL(I, J, SHIFT)`\n\nArguments:  \n|         |                                                                                                                                                                                                                |\n|---------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `I`     | Shall be of type `INTEGER` or a BOZ constant.                                                                                                                                                                  |\n| `J`     | Shall be of type `INTEGER` or a BOZ constant. If both `I` and `J` have integer type, then they shall have the same kind type parameter. `I` and `J` shall not both be BOZ constants.                           |\n| `SHIFT` | Shall be of type `INTEGER`. It shall be nonnegative. If `I` is not a BOZ constant, then `SHIFT` shall be less than or equal to `BIT_SIZE(I)`; otherwise, `SHIFT` shall be less than or equal to `BIT_SIZE(J)`. |\n\nReturn value:  \nIf either `I` or `J` is a BOZ constant, it is first converted as if by the intrinsic function `INT` to an integer type with the kind type parameter of the other.\n\nSee also:  \n[`DSHIFTR` — Combined right shift](dshiftr)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/DSHIFTL.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/DSHIFTL.html)"
- name: 8.91. DSHIFTR
  id: dshiftr
  summary: 'Description: DSHIFTR(I, J, SHIFT) combines bits of I and J'
  description: "Next: [`DTIME` — Execution time subroutine (or function)](dtime), Previous: [`DSHIFTL` — Combined left shift](dshiftl), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.91 DSHIFTR — Combined right shift [¶](#DSHIFTR-----Combined-right-shift)\n\nDescription:  \n`DSHIFTR(I, J, SHIFT)` combines bits of `I` and `J`. The leftmost `SHIFT` bits of the result are the rightmost `SHIFT` bits of `I`, and the remaining bits are the leftmost bits of `J`.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = DSHIFTR(I, J, SHIFT)`\n\nArguments:  \n|         |                                                                                                                                                                                                                |\n|---------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `I`     | Shall be of type `INTEGER` or a BOZ constant.                                                                                                                                                                  |\n| `J`     | Shall be of type `INTEGER` or a BOZ constant. If both `I` and `J` have integer type, then they shall have the same kind type parameter. `I` and `J` shall not both be BOZ constants.                           |\n| `SHIFT` | Shall be of type `INTEGER`. It shall be nonnegative. If `I` is not a BOZ constant, then `SHIFT` shall be less than or equal to `BIT_SIZE(I)`; otherwise, `SHIFT` shall be less than or equal to `BIT_SIZE(J)`. |\n\nReturn value:  \nIf either `I` or `J` is a BOZ constant, it is first converted as if by the intrinsic function `INT` to an integer type with the kind type parameter of the other.\n\nSee also:  \n[`DSHIFTL` — Combined left shift](dshiftl)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/DSHIFTR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/DSHIFTR.html)"
- name: 8.92. DTIME
  id: dtime
  summary: 'Description: DTIME(VALUES, TIME) initially returns the number of seconds of runtime since the start of the process’s execution in TIME'
  description: "Next: [`EOSHIFT` — End-off shift elements of an array](eoshift), Previous: [`DSHIFTR` — Combined right shift](dshiftr), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.92 DTIME — Execution time subroutine (or function) [¶](#DTIME-----Execution-time-subroutine-_0028or-function_0029)\n\nDescription:  \n`DTIME(VALUES, TIME)` initially returns the number of seconds of runtime since the start of the process’s execution in `TIME`. `VALUES` returns the user and system components of this time in `VALUES(1)` and `VALUES(2)` respectively. `TIME` is equal to `VALUES(1) + VALUES(2)`.\n\nSubsequent invocations of `DTIME` return values accumulated since the previous invocation.\n\nOn some systems, the underlying timings are represented using types with sufficiently small limits that overflows (wrap around) are possible, such as 32-bit types. Therefore, the values returned by this intrinsic might be, or become, negative, or numerically less than previous values, during a single run of the compiled program.\n\nPlease note, that this implementation is thread safe if used within OpenMP directives, i.e., its state will be consistent while called from multiple threads. However, if `DTIME` is called from multiple threads, the result is still the time since the last invocation. This may not give the intended results. If possible, use `CPU_TIME` instead.\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\n`VALUES` and `TIME` are `INTENT(OUT)` and provide the following:\n\n|              |                                  |\n|--------------|----------------------------------|\n| `VALUES(1)`: | User time in seconds.            |\n| `VALUES(2)`: | System time in seconds.          |\n| `TIME`:      | Run time since start in seconds. |\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                                            |\n|--------------------------------------------|\n| `CALL DTIME(VALUES, TIME)`.                |\n| `TIME = DTIME(VALUES)`, (not recommended). |\n\nArguments:  \n|          |                                            |\n|----------|--------------------------------------------|\n| `VALUES` | The type shall be `REAL(4), DIMENSION(2)`. |\n| `TIME`   | The type shall be `REAL(4)`.               |\n\nReturn value:  \nElapsed time in seconds since the last invocation or since the start of program execution if not called before.\n\nExample:  \n``` example-preformatted\nprogram test_dtime\n    integer(8) :: i, j\n    real, dimension(2) :: tarray\n    real :: result\n    call dtime(tarray, result)\n    print *, result\n    print *, tarray(1)\n    print *, tarray(2)   \n    do i=1,100000000    ! Just a delay\n        j = i * i - i\n    end do\n    call dtime(tarray, result)\n    print *, result\n    print *, tarray(1)\n    print *, tarray(2)\nend program test_dtime\n```\n\nSee also:  \n[`CPU_TIME` — CPU elapsed time in seconds](cpu_005ftime)\n\nNext: [`EOSHIFT` — End-off shift elements of an array](eoshift), Previous: [`DSHIFTR` — Combined right shift](dshiftr), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/DTIME.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/DTIME.html)"
- name: 8.93. EOSHIFT
  id: eoshift
  summary: 'Description: EOSHIFT(ARRAY, SHIFT[, BOUNDARY, DIM]) performs an end-off shift on elements of ARRAY along the dimension of DIM'
  description: "Next: [`EPSILON` — Epsilon function](epsilon), Previous: [`DTIME` — Execution time subroutine (or function)](dtime), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.93 EOSHIFT — End-off shift elements of an array [¶](#EOSHIFT-----End-off-shift-elements-of-an-array)\n\nDescription:  \n`EOSHIFT(ARRAY, SHIFT[, BOUNDARY, DIM])` performs an end-off shift on elements of `ARRAY` along the dimension of `DIM`. If `DIM` is omitted it is taken to be `1`. `DIM` is a scalar of type `INTEGER` in the range of *1 \\leq DIM \\leq n)* where *n* is the rank of `ARRAY`. If the rank of `ARRAY` is one, then all elements of `ARRAY` are shifted by `SHIFT` places. If rank is greater than one, then all complete rank one sections of `ARRAY` along the given dimension are shifted. Elements shifted out one end of each rank one section are dropped. If `BOUNDARY` is present then the corresponding value of from `BOUNDARY` is copied back in the other end. If `BOUNDARY` is not present then the following are copied in depending on the type of `ARRAY`.\n\n|                  |                                    |\n|------------------|------------------------------------|\n| *Array Type*     | *Boundary Value*                   |\n| Numeric          | 0 of the type and kind of `ARRAY`. |\n| Logical          | `.FALSE.`.                         |\n| Character(`len`) | `len` blanks.                      |\n\nStandard:  \nFortran 90 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n`RESULT = EOSHIFT(ARRAY, SHIFT [, BOUNDARY, DIM])`\n\nArguments:  \n|            |                              |\n|------------|------------------------------|\n| `ARRAY`    | May be any type, not scalar. |\n| `SHIFT`    | The type shall be `INTEGER`. |\n| `BOUNDARY` | Same type as `ARRAY`.        |\n| `DIM`      | The type shall be `INTEGER`. |\n\nReturn value:  \nReturns an array of same type and rank as the `ARRAY` argument.\n\nExample:  \n``` example-preformatted\nprogram test_eoshift\n    integer, dimension(3,3) :: a\n    a = reshape( (/ 1, 2, 3, 4, 5, 6, 7, 8, 9 /), (/ 3, 3 /))\n    print '(3i3)', a(1,:)\n    print '(3i3)', a(2,:)\n    print '(3i3)', a(3,:)    \n    a = EOSHIFT(a, SHIFT=(/1, 2, 1/), BOUNDARY=-5, DIM=2)\n    print *\n    print '(3i3)', a(1,:)\n    print '(3i3)', a(2,:)\n    print '(3i3)', a(3,:)\nend program test_eoshift\n```\n\nNext: [`EPSILON` — Epsilon function](epsilon), Previous: [`DTIME` — Execution time subroutine (or function)](dtime), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/EOSHIFT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/EOSHIFT.html)"
- name: 8.94. EPSILON
  id: epsilon
  summary: 'Description: EPSILON(X) returns the smallest number E of the same kind as X such that 1 + E > 1'
  description: "Next: [`ERF` — Error function](erf), Previous: [`EOSHIFT` — End-off shift elements of an array](eoshift), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.94 EPSILON — Epsilon function [¶](#EPSILON-----Epsilon-function)\n\nDescription:  \n`EPSILON(X)` returns the smallest number `E` of the same kind as `X` such that *1 + E \\> 1*.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = EPSILON(X)`\n\nArguments:  \n|     |                           |\n|-----|---------------------------|\n| `X` | The type shall be `REAL`. |\n\nReturn value:  \nThe return value is of same type as the argument.\n\nExample:  \n``` example-preformatted\nprogram test_epsilon\n    real :: x = 3.143\n    real(8) :: y = 2.33\n    print *, EPSILON(x)\n    print *, EPSILON(y)\nend program test_epsilon\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/EPSILON.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/EPSILON.html)"
- name: 8.95. ERF
  id: erf
  summary: 'Description: ERF(X) computes the error function of X'
  description: "Next: [`ERFC` — Error function](erfc), Previous: [`EPSILON` — Epsilon function](epsilon), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.95 ERF — Error function [¶](#ERF-----Error-function)\n\nDescription:  \n`ERF(X)` computes the error function of `X`.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = ERF(X)`\n\nArguments:  \n|     |                           |\n|-----|---------------------------|\n| `X` | The type shall be `REAL`. |\n\nReturn value:  \nThe return value is of type `REAL`, of the same kind as `X` and lies in the range *-1 \\leq erf (x) \\leq 1* .\n\nExample:  \n``` example-preformatted\nprogram test_erf\n  real(8) :: x = 0.17_8\n  x = erf(x)\nend program test_erf\n```\n\nSpecific names:  \n| Name      | Argument    | Return type | Standard      |\n|-----------|-------------|-------------|---------------|\n| `DERF(X)` | `REAL(8) X` | `REAL(8)`   | GNU extension |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ERF.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ERF.html)"
- name: 8.96. ERFC
  id: erfc
  summary: 'Description: ERFC(X) computes the complementary error function of X'
  description: "Next: [`ERFC_SCALED` — Error function](erfc_005fscaled), Previous: [`ERF` — Error function](erf), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.96 ERFC — Error function [¶](#ERFC-----Error-function)\n\nDescription:  \n`ERFC(X)` computes the complementary error function of `X`.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = ERFC(X)`\n\nArguments:  \n|     |                           |\n|-----|---------------------------|\n| `X` | The type shall be `REAL`. |\n\nReturn value:  \nThe return value is of type `REAL` and of the same kind as `X`. It lies in the range *0 \\leq erfc (x) \\leq 2* .\n\nExample:  \n``` example-preformatted\nprogram test_erfc\n  real(8) :: x = 0.17_8\n  x = erfc(x)\nend program test_erfc\n```\n\nSpecific names:  \n| Name       | Argument    | Return type | Standard      |\n|------------|-------------|-------------|---------------|\n| `DERFC(X)` | `REAL(8) X` | `REAL(8)`   | GNU extension |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ERFC.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ERFC.html)"
- name: 8.97. ERFC_SCALED
  id: erfc_005fscaled
  summary: 'Description: ERFC_SCALED(X) computes the exponentially-scaled complementary error function of X'
  description: "Next: [`ETIME` — Execution time subroutine (or function)](etime), Previous: [`ERFC` — Error function](erfc), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.97 ERFC_SCALED — Error function [¶](#ERFC_005fSCALED-----Error-function)\n\nDescription:  \n`ERFC_SCALED(X)` computes the exponentially-scaled complementary error function of `X`.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = ERFC_SCALED(X)`\n\nArguments:  \n|     |                           |\n|-----|---------------------------|\n| `X` | The type shall be `REAL`. |\n\nReturn value:  \nThe return value is of type `REAL` and of the same kind as `X`.\n\nExample:  \n``` example-preformatted\nprogram test_erfc_scaled\n  real(8) :: x = 0.17_8\n  x = erfc_scaled(x)\nend program test_erfc_scaled\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ERFC_005fSCALED.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ERFC_005fSCALED.html)"
- name: 8.98. ETIME
  id: etime
  summary: 'Description: ETIME(VALUES, TIME) returns the number of seconds of runtime since the start of the process’s execution in TIME'
  description: "Next: [`EVENT_QUERY` — Query whether a coarray event has occurred](event_005fquery), Previous: [`ERFC_SCALED` — Error function](erfc_005fscaled), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.98 ETIME — Execution time subroutine (or function) [¶](#ETIME-----Execution-time-subroutine-_0028or-function_0029)\n\nDescription:  \n`ETIME(VALUES, TIME)` returns the number of seconds of runtime since the start of the process’s execution in `TIME`. `VALUES` returns the user and system components of this time in `VALUES(1)` and `VALUES(2)` respectively. `TIME` is equal to `VALUES(1) + VALUES(2)`.\n\nOn some systems, the underlying timings are represented using types with sufficiently small limits that overflows (wrap around) are possible, such as 32-bit types. Therefore, the values returned by this intrinsic might be, or become, negative, or numerically less than previous values, during a single run of the compiled program.\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\n`VALUES` and `TIME` are `INTENT(OUT)` and provide the following:\n\n|              |                                  |\n|--------------|----------------------------------|\n| `VALUES(1)`: | User time in seconds.            |\n| `VALUES(2)`: | System time in seconds.          |\n| `TIME`:      | Run time since start in seconds. |\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                                            |\n|--------------------------------------------|\n| `CALL ETIME(VALUES, TIME)`.                |\n| `TIME = ETIME(VALUES)`, (not recommended). |\n\nArguments:  \n|          |                                            |\n|----------|--------------------------------------------|\n| `VALUES` | The type shall be `REAL(4), DIMENSION(2)`. |\n| `TIME`   | The type shall be `REAL(4)`.               |\n\nReturn value:  \nElapsed time in seconds since the start of program execution.\n\nExample:  \n``` example-preformatted\nprogram test_etime\n    integer(8) :: i, j\n    real, dimension(2) :: tarray\n    real :: result\n    call ETIME(tarray, result)\n    print *, result\n    print *, tarray(1)\n    print *, tarray(2)   \n    do i=1,100000000    ! Just a delay\n        j = i * i - i\n    end do\n    call ETIME(tarray, result)\n    print *, result\n    print *, tarray(1)\n    print *, tarray(2)\nend program test_etime\n```\n\nSee also:  \n[`CPU_TIME` — CPU elapsed time in seconds](cpu_005ftime)\n\nNext: [`EVENT_QUERY` — Query whether a coarray event has occurred](event_005fquery), Previous: [`ERFC_SCALED` — Error function](erfc_005fscaled), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ETIME.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ETIME.html)"
- name: 8.99. EVENT_QUERY
  id: event_005fquery
  summary: 'Description: EVENT_QUERY assignes the number of events to COUNT which have been posted to the EVENT variable and not yet been removed by calling EVENT WAIT'
  description: "Next: [`EXECUTE_COMMAND_LINE` — Execute a shell command](execute_005fcommand_005fline), Previous: [`ETIME` — Execution time subroutine (or function)](etime), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.99 EVENT_QUERY — Query whether a coarray event has occurred [¶](#EVENT_005fQUERY-----Query-whether-a-coarray-event-has-occurred)\n\nDescription:  \n`EVENT_QUERY` assignes the number of events to `COUNT` which have been posted to the `EVENT` variable and not yet been removed by calling `EVENT WAIT`. When `STAT` is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value and `COUNT` is assigned the value *-1*.\n\nStandard:  \nTS 18508 or later\n\nClass:  \nsubroutine\n\nSyntax:  \n`CALL EVENT_QUERY (EVENT, COUNT [, STAT])`\n\nArguments:  \n|         |                                                                                                 |\n|---------|-------------------------------------------------------------------------------------------------|\n| `EVENT` | (intent(IN)) Scalar of type `EVENT_TYPE`, defined in `ISO_FORTRAN_ENV`; shall not be coindexed. |\n| `COUNT` | (intent(out))Scalar integer with at least the precision of default integer.                     |\n| `STAT`  | (optional) Scalar default-kind integer variable.                                                |\n\nExample:  \n``` example-preformatted\nprogram atomic\n  use iso_fortran_env\n  implicit none\n  type(event_type) :: event_value_has_been_set[*]\n  integer :: cnt\n  if (this_image() == 1) then\n    call event_query (event_value_has_been_set, cnt)\n    if (cnt > 0) write(*,*) \"Value has been set\"\n  elseif (this_image() == 2) then\n    event post (event_value_has_been_set[1])\n  end if\nend program atomic\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/EVENT_005fQUERY.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/EVENT_005fQUERY.html)"
- name: 8.100. EXECUTE_COMMAND_LINE
  id: execute_005fcommand_005fline
  summary: 'Description: EXECUTE_COMMAND_LINE runs a shell command, synchronously or asynchronously'
  description: "Next: [`EXIT` — Exit the program with status.](exit), Previous: [`EVENT_QUERY` — Query whether a coarray event has occurred](event_005fquery), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.100 EXECUTE_COMMAND_LINE — Execute a shell command [¶](#EXECUTE_005fCOMMAND_005fLINE-----Execute-a-shell-command)\n\nDescription:  \n`EXECUTE_COMMAND_LINE` runs a shell command, synchronously or asynchronously.\n\nThe `COMMAND` argument is passed to the shell and executed (The shell is `sh` on Unix systems, and `cmd.exe` on Windows.). If `WAIT` is present and has the value false, the execution of the command is asynchronous if the system supports it; otherwise, the command is executed synchronously using the C library’s `system` call.\n\nThe three last arguments allow the user to get status information. After synchronous execution, `EXITSTAT` contains the integer exit code of the command, as returned by `system`. `CMDSTAT` is set to zero if the command line was executed (whatever its exit status was). `CMDMSG` is assigned an error message if an error has occurred.\n\nNote that the `system` function need not be thread-safe. It is the responsibility of the user to ensure that `system` is not called concurrently.\n\nFor asynchronous execution on supported targets, the POSIX `posix_spawn` or `fork` functions are used. Also, a signal handler for the `SIGCHLD` signal is installed.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL EXECUTE_COMMAND_LINE(COMMAND [, WAIT, EXITSTAT, CMDSTAT, CMDMSG ])`\n\nArguments:  \n|            |                                                                |\n|------------|----------------------------------------------------------------|\n| `COMMAND`  | Shall be a default `CHARACTER` scalar.                         |\n| `WAIT`     | (Optional) Shall be a default `LOGICAL` scalar.                |\n| `EXITSTAT` | (Optional) Shall be an `INTEGER` of the default kind.          |\n| `CMDSTAT`  | (Optional) Shall be an `INTEGER` of the default kind.          |\n| `CMDMSG`   | (Optional) Shall be an `CHARACTER` scalar of the default kind. |\n\nExample:  \n``` example-preformatted\nprogram test_exec\n  integer :: i\n\n  call execute_command_line (\"external_prog.exe\", exitstat=i)\n  print *, \"Exit status of external_prog.exe was \", i\n\n  call execute_command_line (\"reindex_files.exe\", wait=.false.)\n  print *, \"Now reindexing files in the background\"\n\nend program test_exec\n```\n\nNote:  \nBecause this intrinsic is implemented in terms of the `system` function call, its behavior with respect to signaling is processor dependent. In particular, on POSIX-compliant systems, the SIGINT and SIGQUIT signals will be ignored, and the SIGCHLD will be blocked. As such, if the parent process is terminated, the child process might not be terminated alongside.\n\nSee also:  \n[`SYSTEM` — Execute a shell command](system)\n\nNext: [`EXIT` — Exit the program with status.](exit), Previous: [`EVENT_QUERY` — Query whether a coarray event has occurred](event_005fquery), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/EXECUTE_005fCOMMAND_005fLINE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/EXECUTE_005fCOMMAND_005fLINE.html)"
- name: 8.101. EXIT
  id: exit
  summary: 'Description: EXIT causes immediate termination of the program with status'
  description: "Next: [`EXP` — Exponential function](exp), Previous: [`EXECUTE_COMMAND_LINE` — Execute a shell command](execute_005fcommand_005fline), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.101 EXIT — Exit the program with status. [¶](#EXIT-----Exit-the-program-with-status_002e)\n\nDescription:  \n`EXIT` causes immediate termination of the program with status. If status is omitted it returns the canonical *success* for the system. All Fortran I/O units are closed.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL EXIT([STATUS])`\n\nArguments:  \n|          |                                            |\n|----------|--------------------------------------------|\n| `STATUS` | Shall be an `INTEGER` of the default kind. |\n\nReturn value:  \n`STATUS` is passed to the parent process on exit.\n\nExample:  \n``` example-preformatted\nprogram test_exit\n  integer :: STATUS = 0\n  print *, 'This program is going to exit.'\n  call EXIT(STATUS)\nend program test_exit\n```\n\nSee also:  \n[`ABORT` — Abort the program](abort), [`KILL` — Send a signal to a process](kill)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/EXIT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/EXIT.html)"
- name: 8.102. EXP
  id: exp
  summary: 'Description: EXP(X) computes the base e exponential of X'
  description: "Next: [`EXPONENT` — Exponent function](exponent), Previous: [`EXIT` — Exit the program with status.](exit), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.102 EXP — Exponential function [¶](#EXP-----Exponential-function)\n\nDescription:  \n`EXP(X)` computes the base *e* exponential of `X`.\n\nStandard:  \nFortran 77 and later, has overloads that are GNU extensions\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = EXP(X)`\n\nArguments:  \n|     |                                        |\n|-----|----------------------------------------|\n| `X` | The type shall be `REAL` or `COMPLEX`. |\n\nReturn value:  \nThe return value has same type and kind as `X`.\n\nExample:  \n``` example-preformatted\nprogram test_exp\n  real :: x = 1.0\n  x = exp(x)\nend program test_exp\n```\n\nSpecific names:  \n| Name       | Argument       | Return type  | Standard             |\n|------------|----------------|--------------|----------------------|\n| `EXP(X)`   | `REAL(4) X`    | `REAL(4)`    | Fortran 77 and later |\n| `DEXP(X)`  | `REAL(8) X`    | `REAL(8)`    | Fortran 77 and later |\n| `CEXP(X)`  | `COMPLEX(4) X` | `COMPLEX(4)` | Fortran 77 and later |\n| `ZEXP(X)`  | `COMPLEX(8) X` | `COMPLEX(8)` | GNU extension        |\n| `CDEXP(X)` | `COMPLEX(8) X` | `COMPLEX(8)` | GNU extension        |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/EXP.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/EXP.html)"
- name: 8.103. EXPONENT
  id: exponent
  summary: 'Description: EXPONENT(X) returns the value of the exponent part of X'
  description: "Next: [`EXTENDS_TYPE_OF` — Query dynamic type for extension](extends_005ftype_005fof), Previous: [`EXP` — Exponential function](exp), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.103 EXPONENT — Exponent function [¶](#EXPONENT-----Exponent-function)\n\nDescription:  \n`EXPONENT(X)` returns the value of the exponent part of `X`. If `X` is zero the value returned is zero.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = EXPONENT(X)`\n\nArguments:  \n|     |                           |\n|-----|---------------------------|\n| `X` | The type shall be `REAL`. |\n\nReturn value:  \nThe return value is of type default `INTEGER`.\n\nExample:  \n``` example-preformatted\nprogram test_exponent\n  real :: x = 1.0\n  integer :: i\n  i = exponent(x)\n  print *, i\n  print *, exponent(0.0)\nend program test_exponent\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/EXPONENT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/EXPONENT.html)"
- name: 8.104. EXTENDS_TYPE_OF
  id: extends_005ftype_005fof
  summary: 'Description: Query dynamic type for extension'
  description: "Next: [`FDATE` — Get the current time as a string](fdate), Previous: [`EXPONENT` — Exponent function](exponent), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.104 EXTENDS_TYPE_OF — Query dynamic type for extension [¶](#EXTENDS_005fTYPE_005fOF-----Query-dynamic-type-for-extension)\n\nDescription:  \nQuery dynamic type for extension.\n\nStandard:  \nFortran 2003 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = EXTENDS_TYPE_OF(A, MOLD)`\n\nArguments:  \n|        |                                                                          |\n|--------|--------------------------------------------------------------------------|\n| `A`    | Shall be an object of extensible declared type or unlimited polymorphic. |\n| `MOLD` | Shall be an object of extensible declared type or unlimited polymorphic. |\n\nReturn value:  \nThe return value is a scalar of type default logical. It is true if and only if the dynamic type of A is an extension type of the dynamic type of MOLD.\n\nSee also:  \n[`SAME_TYPE_AS` — Query dynamic types for equality](same_005ftype_005fas)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/EXTENDS_005fTYPE_005fOF.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/EXTENDS_005fTYPE_005fOF.html)"
- name: 8.105. FDATE
  id: fdate
  summary: 'Description: FDATE(DATE) returns the current date (using the same format as CTIME — Convert a time into a string) in DATE'
  description: "Next: [`FGET` — Read a single character in stream mode from stdin](fget), Previous: [`EXTENDS_TYPE_OF` — Query dynamic type for extension](extends_005ftype_005fof), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.105 FDATE — Get the current time as a string [¶](#FDATE-----Get-the-current-time-as-a-string)\n\nDescription:  \n`FDATE(DATE)` returns the current date (using the same format as [`CTIME` — Convert a time into a string](ctime)) in `DATE`. It is equivalent to `CALL CTIME(DATE, TIME())`.\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                     |\n|---------------------|\n| `CALL FDATE(DATE)`. |\n| `DATE = FDATE()`.   |\n\nArguments:  \n|        |                                                                                                                                                                                                                               |\n|--------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `DATE` | The type shall be of type `CHARACTER` of the default kind. It is an `INTENT(OUT)` argument. If the length of this variable is too short for the date and time string to fit completely, it will be blank on procedure return. |\n\nReturn value:  \nThe current date and time as a string.\n\nExample:  \n``` example-preformatted\nprogram test_fdate\n    integer(8) :: i, j\n    character(len=30) :: date\n    call fdate(date)\n    print *, 'Program started on ', date\n    do i = 1, 100000000 ! Just a delay\n        j = i * i - i\n    end do\n    call fdate(date)\n    print *, 'Program ended on ', date\nend program test_fdate\n```\n\nSee also:  \n[`DATE_AND_TIME` — Date and time subroutine](date_005fand_005ftime), [`CTIME` — Convert a time into a string](ctime)\n\nNext: [`FGET` — Read a single character in stream mode from stdin](fget), Previous: [`EXTENDS_TYPE_OF` — Query dynamic type for extension](extends_005ftype_005fof), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FDATE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FDATE.html)"
- name: 8.106. FGET
  id: fget
  summary: 'Description: Read a single character in stream mode from stdin by bypassing normal formatted output'
  description: "Next: [`FGETC` — Read a single character in stream mode](fgetc), Previous: [`FDATE` — Get the current time as a string](fdate), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.106 FGET — Read a single character in stream mode from stdin [¶](#FGET-----Read-a-single-character-in-stream-mode-from-stdin)\n\nDescription:  \nRead a single character in stream mode from stdin by bypassing normal formatted output. Stream I/O should not be mixed with normal record-oriented (formatted or unformatted) I/O on the same unit; the results are unpredictable.\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\nNote that the `FGET` intrinsic is provided for backwards compatibility with `g77`. GNU Fortran provides the Fortran 2003 Stream facility. Programmers should consider the use of new stream IO feature in new code for future portability. See also [Fortran 2003 status](fortran-2003-status).\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                           |\n|---------------------------|\n| `CALL FGET(C [, STATUS])` |\n| `STATUS = FGET(C)`        |\n\nArguments:  \n|          |                                                                                                                                         |\n|----------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| `C`      | The type shall be `CHARACTER` and of default kind.                                                                                      |\n| `STATUS` | (Optional) status flag of type `INTEGER`. Returns 0 on success, -1 on end-of-file, and a system specific positive error code otherwise. |\n\nExample:  \n``` example-preformatted\nPROGRAM test_fget\n  INTEGER, PARAMETER :: strlen = 100\n  INTEGER :: status, i = 1\n  CHARACTER(len=strlen) :: str = \"\"\n\n  WRITE (*,*) 'Enter text:'\n  DO\n    CALL fget(str(i:i), status)\n    if (status /= 0 .OR. i > strlen) exit\n    i = i + 1\n  END DO\n  WRITE (*,*) TRIM(str)\nEND PROGRAM\n```\n\nSee also:  \n[`FGETC` — Read a single character in stream mode](fgetc), [`FPUT` — Write a single character in stream mode to stdout](fput), [`FPUTC` — Write a single character in stream mode](fputc)\n\nNext: [`FGETC` — Read a single character in stream mode](fgetc), Previous: [`FDATE` — Get the current time as a string](fdate), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FGET.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FGET.html)"
- name: 8.107. FGETC
  id: fgetc
  summary: 'Description: Read a single character in stream mode by bypassing normal formatted output'
  description: "Next: [`FINDLOC` — Search an array for a value](findloc), Previous: [`FGET` — Read a single character in stream mode from stdin](fget), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.107 FGETC — Read a single character in stream mode [¶](#FGETC-----Read-a-single-character-in-stream-mode)\n\nDescription:  \nRead a single character in stream mode by bypassing normal formatted output. Stream I/O should not be mixed with normal record-oriented (formatted or unformatted) I/O on the same unit; the results are unpredictable.\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\nNote that the `FGET` intrinsic is provided for backwards compatibility with `g77`. GNU Fortran provides the Fortran 2003 Stream facility. Programmers should consider the use of new stream IO feature in new code for future portability. See also [Fortran 2003 status](fortran-2003-status).\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                                  |\n|----------------------------------|\n| `CALL FGETC(UNIT, C [, STATUS])` |\n| `STATUS = FGETC(UNIT, C)`        |\n\nArguments:  \n|          |                                                                                                                                        |\n|----------|----------------------------------------------------------------------------------------------------------------------------------------|\n| `UNIT`   | The type shall be `INTEGER`.                                                                                                           |\n| `C`      | The type shall be `CHARACTER` and of default kind.                                                                                     |\n| `STATUS` | (Optional) status flag of type `INTEGER`. Returns 0 on success, -1 on end-of-file and a system specific positive error code otherwise. |\n\nExample:  \n``` example-preformatted\nPROGRAM test_fgetc\n  INTEGER :: fd = 42, status\n  CHARACTER :: c\n\n  OPEN(UNIT=fd, FILE=\"/etc/passwd\", ACTION=\"READ\", STATUS = \"OLD\")\n  DO\n    CALL fgetc(fd, c, status)\n    IF (status /= 0) EXIT\n    call fput(c)\n  END DO\n  CLOSE(UNIT=fd)\nEND PROGRAM\n```\n\nSee also:  \n[`FGET` — Read a single character in stream mode from stdin](fget), [`FPUT` — Write a single character in stream mode to stdout](fput), [`FPUTC` — Write a single character in stream mode](fputc)\n\nNext: [`FINDLOC` — Search an array for a value](findloc), Previous: [`FGET` — Read a single character in stream mode from stdin](fget), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FGETC.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FGETC.html)"
- name: 8.108. FINDLOC
  id: findloc
  summary: 'Description: Determines the location of the element in the array with the value given in the VALUE argument, or, if the DIM argument is supplied, determines the locations of the elements equal to the VALUE argument element along each row of the array in the DIM direction'
  description: "Next: [`FLOOR` — Integer floor function](floor), Previous: [`FGETC` — Read a single character in stream mode](fgetc), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.108 FINDLOC — Search an array for a value [¶](#FINDLOC-----Search-an-array-for-a-value)\n\nDescription:  \nDetermines the location of the element in the array with the value given in the `VALUE` argument, or, if the `DIM` argument is supplied, determines the locations of the elements equal to the `VALUE` argument element along each row of the array in the `DIM` direction. If `MASK` is present, only the elements for which `MASK` is `.TRUE.` are considered. If more than one element in the array has the value `VALUE`, the location returned is that of the first such element in array element order if the `BACK` is not present or if it is `.FALSE.`. If `BACK` is true, the location returned is that of the last such element. If the array has zero size, or all of the elements of `MASK` are `.FALSE.`, then the result is an array of zeroes. Similarly, if `DIM` is supplied and all of the elements of `MASK` along a given row are zero, the result value for that row is zero.\n\nStandard:  \nFortran 2008 and later.\n\nClass:  \nTransformational function\n\nSyntax:  \n|                                                                |\n|----------------------------------------------------------------|\n| `RESULT = FINDLOC(ARRAY, VALUE, DIM [, MASK] [,KIND] [,BACK])` |\n| `RESULT = FINDLOC(ARRAY, VALUE, [, MASK] [,KIND] [,BACK])`     |\n\nArguments:  \n|         |                                                                                                                                                        |\n|---------|--------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `ARRAY` | Shall be an array of intrinsic type.                                                                                                                   |\n| `VALUE` | A scalar of intrinsic type which is in type conformance with `ARRAY`.                                                                                  |\n| `DIM`   | (Optional) Shall be a scalar of type `INTEGER`, with a value between one and the rank of `ARRAY`, inclusive. It may not be an optional dummy argument. |\n| `MASK`  | (Optional) Shall be of type `LOGICAL`, and conformable with `ARRAY`.                                                                                   |\n| `KIND`  | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result.                                                         |\n| `BACK`  | (Optional) A scalar of type `LOGICAL`.                                                                                                                 |\n\nReturn value:  \nIf `DIM` is absent, the result is a rank-one array with a length equal to the rank of `ARRAY`. If `DIM` is present, the result is an array with a rank one less than the rank of `ARRAY`, and a size corresponding to the size of `ARRAY` with the `DIM` dimension removed. If `DIM` is present and `ARRAY` has a rank of one, the result is a scalar. If the optional argument `KIND` is present, the result is an integer of kind `KIND`, otherwise it is of default kind.\n\nSee also:  \n[`MAXLOC` — Location of the maximum value within an array](maxloc), [`MINLOC` — Location of the minimum value within an array](minloc)\n\nNext: [`FLOOR` — Integer floor function](floor), Previous: [`FGETC` — Read a single character in stream mode](fgetc), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FINDLOC.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FINDLOC.html)"
- name: 8.109. FLOOR
  id: floor
  summary: 'Description: FLOOR(A) returns the greatest integer less than or equal to A'
  description: "Next: [`FLUSH` — Flush I/O unit(s)](flush), Previous: [`FINDLOC` — Search an array for a value](findloc), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.109 FLOOR — Integer floor function [¶](#FLOOR-----Integer-floor-function)\n\nDescription:  \n`FLOOR(A)` returns the greatest integer less than or equal to `A`.\n\nStandard:  \nFortran 95 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = FLOOR(A [, KIND])`\n\nArguments:  \n|        |                                                                                                |\n|--------|------------------------------------------------------------------------------------------------|\n| `A`    | The type shall be `REAL`.                                                                      |\n| `KIND` | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result. |\n\nReturn value:  \nThe return value is of type `INTEGER(KIND)` if `KIND` is present and of default-kind `INTEGER` otherwise.\n\nExample:  \n``` example-preformatted\nprogram test_floor\n    real :: x = 63.29\n    real :: y = -63.59\n    print *, floor(x) ! returns 63\n    print *, floor(y) ! returns -64\nend program test_floor\n```\n\nSee also:  \n[`CEILING` — Integer ceiling function](ceiling), [`NINT` — Nearest whole number](nint)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FLOOR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FLOOR.html)"
- name: 8.110. FLUSH
  id: flush
  summary: 'Description: Flushes Fortran unit(s) currently open for output'
  description: "Next: [`FNUM` — File number function](fnum), Previous: [`FLOOR` — Integer floor function](floor), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.110 FLUSH — Flush I/O unit(s) [¶](#FLUSH-----Flush-I_002fO-unit_0028s_0029)\n\nDescription:  \nFlushes Fortran unit(s) currently open for output. Without the optional argument, all units are flushed, otherwise just the unit specified.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL FLUSH(UNIT)`\n\nArguments:  \n|        |                                         |\n|--------|-----------------------------------------|\n| `UNIT` | (Optional) The type shall be `INTEGER`. |\n\nNote:  \nBeginning with the Fortran 2003 standard, there is a `FLUSH` statement that should be preferred over the `FLUSH` intrinsic.\n\nThe `FLUSH` intrinsic and the Fortran 2003 `FLUSH` statement have identical effect: they flush the runtime library’s I/O buffer so that the data becomes visible to other processes. This does not guarantee that the data is committed to disk.\n\nOn POSIX systems, you can request that all data is transferred to the storage device by calling the `fsync` function, with the POSIX file descriptor of the I/O unit as argument (retrieved with GNU intrinsic `FNUM`). The following example shows how:\n\n``` example-preformatted\n! Declare the interface for POSIX fsync function\ninterface\n  function fsync (fd) bind(c,name=\"fsync\")\n  use iso_c_binding, only: c_int\n    integer(c_int), value :: fd\n    integer(c_int) :: fsync\n  end function fsync\nend interface\n\n! Variable declaration\ninteger :: ret\n\n! Opening unit 10\nopen (10,file=\"foo\")\n\n! ...\n! Perform I/O on unit 10\n! ...\n\n! Flush and sync\nflush(10)\nret = fsync(fnum(10))\n\n! Handle possible error\nif (ret /= 0) stop \"Error calling FSYNC\"\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FLUSH.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FLUSH.html)"
- name: 8.111. FNUM
  id: fnum
  summary: 'Description: FNUM(UNIT) returns the POSIX file descriptor number corresponding to the open Fortran I/O unit UNIT'
  description: "Next: [`FPUT` — Write a single character in stream mode to stdout](fput), Previous: [`FLUSH` — Flush I/O unit(s)](flush), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.111 FNUM — File number function [¶](#FNUM-----File-number-function)\n\nDescription:  \n`FNUM(UNIT)` returns the POSIX file descriptor number corresponding to the open Fortran I/O unit `UNIT`.\n\nStandard:  \nGNU extension\n\nClass:  \nFunction\n\nSyntax:  \n`RESULT = FNUM(UNIT)`\n\nArguments:  \n|        |                              |\n|--------|------------------------------|\n| `UNIT` | The type shall be `INTEGER`. |\n\nReturn value:  \nThe return value is of type `INTEGER`\n\nExample:  \n``` example-preformatted\nprogram test_fnum\n  integer :: i\n  open (unit=10, status = \"scratch\")\n  i = fnum(10)\n  print *, i\n  close (10)\nend program test_fnum\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FNUM.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FNUM.html)"
- name: 8.112. FPUT
  id: fput
  summary: 'Description: Write a single character in stream mode to stdout by bypassing normal formatted output'
  description: "Next: [`FPUTC` — Write a single character in stream mode](fputc), Previous: [`FNUM` — File number function](fnum), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.112 FPUT — Write a single character in stream mode to stdout [¶](#FPUT-----Write-a-single-character-in-stream-mode-to-stdout)\n\nDescription:  \nWrite a single character in stream mode to stdout by bypassing normal formatted output. Stream I/O should not be mixed with normal record-oriented (formatted or unformatted) I/O on the same unit; the results are unpredictable.\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\nNote that the `FGET` intrinsic is provided for backwards compatibility with `g77`. GNU Fortran provides the Fortran 2003 Stream facility. Programmers should consider the use of new stream IO feature in new code for future portability. See also [Fortran 2003 status](fortran-2003-status).\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                           |\n|---------------------------|\n| `CALL FPUT(C [, STATUS])` |\n| `STATUS = FPUT(C)`        |\n\nArguments:  \n|          |                                                                                                                                        |\n|----------|----------------------------------------------------------------------------------------------------------------------------------------|\n| `C`      | The type shall be `CHARACTER` and of default kind.                                                                                     |\n| `STATUS` | (Optional) status flag of type `INTEGER`. Returns 0 on success, -1 on end-of-file and a system specific positive error code otherwise. |\n\nExample:  \n``` example-preformatted\nPROGRAM test_fput\n  CHARACTER(len=10) :: str = \"gfortran\"\n  INTEGER :: i\n  DO i = 1, len_trim(str)\n    CALL fput(str(i:i))\n  END DO\nEND PROGRAM\n```\n\nSee also:  \n[`FPUTC` — Write a single character in stream mode](fputc), [`FGET` — Read a single character in stream mode from stdin](fget), [`FGETC` — Read a single character in stream mode](fgetc)\n\nNext: [`FPUTC` — Write a single character in stream mode](fputc), Previous: [`FNUM` — File number function](fnum), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FPUT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FPUT.html)"
- name: 8.113. FPUTC
  id: fputc
  summary: 'Description: Write a single character in stream mode by bypassing normal formatted output'
  description: "Next: [`FRACTION` — Fractional part of the model representation](fraction), Previous: [`FPUT` — Write a single character in stream mode to stdout](fput), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.113 FPUTC — Write a single character in stream mode [¶](#FPUTC-----Write-a-single-character-in-stream-mode)\n\nDescription:  \nWrite a single character in stream mode by bypassing normal formatted output. Stream I/O should not be mixed with normal record-oriented (formatted or unformatted) I/O on the same unit; the results are unpredictable.\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\nNote that the `FGET` intrinsic is provided for backwards compatibility with `g77`. GNU Fortran provides the Fortran 2003 Stream facility. Programmers should consider the use of new stream IO feature in new code for future portability. See also [Fortran 2003 status](fortran-2003-status).\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                                  |\n|----------------------------------|\n| `CALL FPUTC(UNIT, C [, STATUS])` |\n| `STATUS = FPUTC(UNIT, C)`        |\n\nArguments:  \n|          |                                                                                                                                        |\n|----------|----------------------------------------------------------------------------------------------------------------------------------------|\n| `UNIT`   | The type shall be `INTEGER`.                                                                                                           |\n| `C`      | The type shall be `CHARACTER` and of default kind.                                                                                     |\n| `STATUS` | (Optional) status flag of type `INTEGER`. Returns 0 on success, -1 on end-of-file and a system specific positive error code otherwise. |\n\nExample:  \n``` example-preformatted\nPROGRAM test_fputc\n  CHARACTER(len=10) :: str = \"gfortran\"\n  INTEGER :: fd = 42, i\n\n  OPEN(UNIT = fd, FILE = \"out\", ACTION = \"WRITE\", STATUS=\"NEW\")\n  DO i = 1, len_trim(str)\n    CALL fputc(fd, str(i:i))\n  END DO\n  CLOSE(fd)\nEND PROGRAM\n```\n\nSee also:  \n[`FPUT` — Write a single character in stream mode to stdout](fput), [`FGET` — Read a single character in stream mode from stdin](fget), [`FGETC` — Read a single character in stream mode](fgetc)\n\nNext: [`FRACTION` — Fractional part of the model representation](fraction), Previous: [`FPUT` — Write a single character in stream mode to stdout](fput), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FPUTC.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FPUTC.html)"
- name: 8.114. FRACTION
  id: fraction
  summary: 'Description: FRACTION(X) returns the fractional part of the model representation of X'
  description: "Next: [`FREE` — Frees memory](free), Previous: [`FPUTC` — Write a single character in stream mode](fputc), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.114 FRACTION — Fractional part of the model representation [¶](#FRACTION-----Fractional-part-of-the-model-representation)\n\nDescription:  \n`FRACTION(X)` returns the fractional part of the model representation of `X`.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`Y = FRACTION(X)`\n\nArguments:  \n|     |                                             |\n|-----|---------------------------------------------|\n| `X` | The type of the argument shall be a `REAL`. |\n\nReturn value:  \nThe return value is of the same type and kind as the argument. The fractional part of the model representation of `X` is returned; it is `X * RADIX(X)**(-EXPONENT(X))`.\n\nExample:  \n``` example-preformatted\nprogram test_fraction\n  real :: x\n  x = 178.1387e-4\n  print *, fraction(x), x * radix(x)**(-exponent(x))\nend program test_fraction\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FRACTION.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FRACTION.html)"
- name: 8.115. FREE
  id: free
  summary: 'Description: Frees memory previously allocated by MALLOC'
  description: "Next: [`FSEEK` — Low level file positioning subroutine](fseek), Previous: [`FRACTION` — Fractional part of the model representation](fraction), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.115 FREE — Frees memory [¶](#FREE-----Frees-memory)\n\nDescription:  \nFrees memory previously allocated by `MALLOC`. The `FREE` intrinsic is an extension intended to be used with Cray pointers, and is provided in GNU Fortran to allow user to compile legacy code. For new code using Fortran 95 pointers, the memory de-allocation intrinsic is `DEALLOCATE`.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL FREE(PTR)`\n\nArguments:  \n|       |                                                                                                    |\n|-------|----------------------------------------------------------------------------------------------------|\n| `PTR` | The type shall be `INTEGER`. It represents the location of the memory that should be de-allocated. |\n\nReturn value:  \nNone\n\nExample:  \nSee `MALLOC` for an example.\n\nSee also:  \n[`MALLOC` — Allocate dynamic memory](malloc)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FREE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FREE.html)"
- name: 8.116. FSEEK
  id: fseek
  summary: 'Description: Moves UNIT to the specified OFFSET'
  description: "Next: [`FSTAT` — Get file status](fstat), Previous: [`FREE` — Frees memory](free), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.116 FSEEK — Low level file positioning subroutine [¶](#FSEEK-----Low-level-file-positioning-subroutine)\n\nDescription:  \nMoves `UNIT` to the specified `OFFSET`. If `WHENCE` is set to 0, the `OFFSET` is taken as an absolute value `SEEK_SET`, if set to 1, `OFFSET` is taken to be relative to the current position `SEEK_CUR`, and if set to 2 relative to the end of the file `SEEK_END`. On error, `STATUS` is set to a nonzero value. If `STATUS` the seek fails silently.\n\nThis intrinsic routine is not fully backwards compatible with `g77`. In `g77`, the `FSEEK` takes a statement label instead of a `STATUS` variable. If FSEEK is used in old code, change\n\n``` example-preformatted\nCALL FSEEK(UNIT, OFFSET, WHENCE, *label)\n```\n\nto\n\n``` example-preformatted\nINTEGER :: status\nCALL FSEEK(UNIT, OFFSET, WHENCE, status)\nIF (status /= 0) GOTO label\n```\n\nPlease note that GNU Fortran provides the Fortran 2003 Stream facility. Programmers should consider the use of new stream IO feature in new code for future portability. See also [Fortran 2003 status](fortran-2003-status).\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL FSEEK(UNIT, OFFSET, WHENCE[, STATUS])`\n\nArguments:  \n|          |                                                                           |\n|----------|---------------------------------------------------------------------------|\n| `UNIT`   | Shall be a scalar of type `INTEGER`.                                      |\n| `OFFSET` | Shall be a scalar of type `INTEGER`.                                      |\n| `WHENCE` | Shall be a scalar of type `INTEGER`. Its value shall be either 0, 1 or 2. |\n| `STATUS` | (Optional) shall be a scalar of type `INTEGER(4)`.                        |\n\nExample:  \n``` example-preformatted\nPROGRAM test_fseek\n  INTEGER, PARAMETER :: SEEK_SET = 0, SEEK_CUR = 1, SEEK_END = 2\n  INTEGER :: fd, offset, ierr\n\n  ierr   = 0\n  offset = 5\n  fd     = 10\n\n  OPEN(UNIT=fd, FILE=\"fseek.test\")\n  CALL FSEEK(fd, offset, SEEK_SET, ierr)  ! move to OFFSET\n  print *, FTELL(fd), ierr\n\n  CALL FSEEK(fd, 0, SEEK_END, ierr)       ! move to end\n  print *, FTELL(fd), ierr\n\n  CALL FSEEK(fd, 0, SEEK_SET, ierr)       ! move to beginning\n  print *, FTELL(fd), ierr\n\n  CLOSE(UNIT=fd)\nEND PROGRAM\n```\n\nSee also:  \n[`FTELL` — Current stream position](ftell)\n\nNext: [`FSTAT` — Get file status](fstat), Previous: [`FREE` — Frees memory](free), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FSEEK.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FSEEK.html)"
- name: 8.117. FSTAT
  id: fstat
  summary: 'Description: FSTAT is identical to STAT — Get file status, except that information about an already opened file is obtained'
  description: "Next: [`FTELL` — Current stream position](ftell), Previous: [`FSEEK` — Low level file positioning subroutine](fseek), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.117 FSTAT — Get file status [¶](#FSTAT-----Get-file-status)\n\nDescription:  \n`FSTAT` is identical to [`STAT` — Get file status](stat), except that information about an already opened file is obtained.\n\nThe elements in `VALUES` are the same as described by [`STAT` — Get file status](stat).\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                                       |\n|---------------------------------------|\n| `CALL FSTAT(UNIT, VALUES [, STATUS])` |\n| `STATUS = FSTAT(UNIT, VALUES)`        |\n\nArguments:  \n|          |                                                                                                               |\n|----------|---------------------------------------------------------------------------------------------------------------|\n| `UNIT`   | An open I/O unit number of type `INTEGER`.                                                                    |\n| `VALUES` | The type shall be `INTEGER(4), DIMENSION(13)`.                                                                |\n| `STATUS` | (Optional) status flag of type `INTEGER(4)`. Returns 0 on success and a system specific error code otherwise. |\n\nExample:  \nSee [`STAT` — Get file status](stat) for an example.\n\nSee also:  \nTo stat a link: [`LSTAT` — Get file status](lstat) To stat a file: [`STAT` — Get file status](stat)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FSTAT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FSTAT.html)"
- name: 8.118. FTELL
  id: ftell
  summary: 'Description: Retrieves the current position within an open file'
  description: "Next: [`GAMMA` — Gamma function](gamma), Previous: [`FSTAT` — Get file status](fstat), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.118 FTELL — Current stream position [¶](#FTELL-----Current-stream-position)\n\nDescription:  \nRetrieves the current position within an open file.\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                            |\n|----------------------------|\n| `CALL FTELL(UNIT, OFFSET)` |\n| `OFFSET = FTELL(UNIT)`     |\n\nArguments:  \n|          |                          |\n|----------|--------------------------|\n| `OFFSET` | Shall of type `INTEGER`. |\n| `UNIT`   | Shall of type `INTEGER`. |\n\nReturn value:  \nIn either syntax, `OFFSET` is set to the current offset of unit number `UNIT`, or to *-1* if the unit is not currently open.\n\nExample:  \n``` example-preformatted\nPROGRAM test_ftell\n  INTEGER :: i\n  OPEN(10, FILE=\"temp.dat\")\n  CALL ftell(10,i)\n  WRITE(*,*) i\nEND PROGRAM\n```\n\nSee also:  \n[`FSEEK` — Low level file positioning subroutine](fseek)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FTELL.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/FTELL.html)"
- name: 8.119. GAMMA
  id: gamma
  summary: 'Description: GAMMA(X) computes Gamma (\Gamma) of X'
  description: "Next: [`GERROR` — Get last system error message](gerror), Previous: [`FTELL` — Current stream position](ftell), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.119 GAMMA — Gamma function [¶](#GAMMA-----Gamma-function)\n\nDescription:  \n`GAMMA(X)` computes Gamma (*\\Gamma*) of `X`. For positive, integer values of `X` the Gamma function simplifies to the factorial function *\\Gamma(x)=(x-1)!*.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`X = GAMMA(X)`\n\nArguments:  \n|     |                                                                  |\n|-----|------------------------------------------------------------------|\n| `X` | Shall be of type `REAL` and neither zero nor a negative integer. |\n\nReturn value:  \nThe return value is of type `REAL` of the same kind as `X`.\n\nExample:  \n``` example-preformatted\nprogram test_gamma\n  real :: x = 1.0\n  x = gamma(x) ! returns 1.0\nend program test_gamma\n```\n\nSpecific names:  \n| Name        | Argument    | Return type | Standard      |\n|-------------|-------------|-------------|---------------|\n| `DGAMMA(X)` | `REAL(8) X` | `REAL(8)`   | GNU extension |\n\nSee also:  \nLogarithm of the Gamma function: [`LOG_GAMMA` — Logarithm of the Gamma function](log_005fgamma)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GAMMA.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GAMMA.html)"
- name: 8.120. GERROR
  id: gerror
  summary: 'Description: Returns the system error message corresponding to the last system error'
  description: "Next: [`GETARG` — Get command line arguments](getarg), Previous: [`GAMMA` — Gamma function](gamma), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.120 GERROR — Get last system error message [¶](#GERROR-----Get-last-system-error-message)\n\nDescription:  \nReturns the system error message corresponding to the last system error. This resembles the functionality of `strerror(3)` in C.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL GERROR(RESULT)`\n\nArguments:  \n|          |                                                   |\n|----------|---------------------------------------------------|\n| `RESULT` | Shall be of type `CHARACTER` and of default kind. |\n\nExample:  \n``` example-preformatted\nPROGRAM test_gerror\n  CHARACTER(len=100) :: msg\n  CALL gerror(msg)\n  WRITE(*,*) msg\nEND PROGRAM\n```\n\nSee also:  \n[`IERRNO` — Get the last system error number](ierrno), [`PERROR` — Print system error message](perror)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GERROR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GERROR.html)"
- name: 8.121. GETARG
  id: getarg
  summary: 'Description: Retrieve the POS-th argument that was passed on the command line when the containing program was invoked'
  description: "Next: [`GET_COMMAND` — Get the entire command line](get_005fcommand), Previous: [`GERROR` — Get last system error message](gerror), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.121 GETARG — Get command line arguments [¶](#GETARG-----Get-command-line-arguments)\n\nDescription:  \nRetrieve the `POS`-th argument that was passed on the command line when the containing program was invoked.\n\nThis intrinsic routine is provided for backwards compatibility with GNU Fortran 77. In new code, programmers should consider the use of the [`GET_COMMAND_ARGUMENT` — Get command line arguments](get_005fcommand_005fargument) intrinsic defined by the Fortran 2003 standard.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL GETARG(POS, VALUE)`\n\nArguments:  \n|         |                                                                                        |\n|---------|----------------------------------------------------------------------------------------|\n| `POS`   | Shall be of type `INTEGER` and not wider than the default integer kind; *`POS` \\geq 0* |\n| `VALUE` | Shall be of type `CHARACTER` and of default kind.                                      |\n\nReturn value:  \nAfter `GETARG` returns, the `VALUE` argument holds the `POS`th command line argument. If `VALUE` cannot hold the argument, it is truncated to fit the length of `VALUE`. If there are less than `POS` arguments specified at the command line, `VALUE` will be filled with blanks. If *`POS` = 0*, `VALUE` is set to the name of the program (on systems that support this feature).\n\nExample:  \n``` example-preformatted\nPROGRAM test_getarg\n  INTEGER :: i\n  CHARACTER(len=32) :: arg\n\n  DO i = 1, iargc()\n    CALL getarg(i, arg)\n    WRITE (*,*) arg\n  END DO\nEND PROGRAM\n```\n\nSee also:  \nGNU Fortran 77 compatibility function: [`IARGC` — Get the number of command line arguments](iargc) Fortran 2003 functions and subroutines: [`GET_COMMAND` — Get the entire command line](get_005fcommand), [`GET_COMMAND_ARGUMENT` — Get command line arguments](get_005fcommand_005fargument), [`COMMAND_ARGUMENT_COUNT` — Get number of command line arguments](command_005fargument_005fcount)\n\nNext: [`GET_COMMAND` — Get the entire command line](get_005fcommand), Previous: [`GERROR` — Get last system error message](gerror), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GETARG.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GETARG.html)"
- name: 8.122. GET_COMMAND
  id: get_005fcommand
  summary: 'Description: Retrieve the entire command line that was used to invoke the program'
  description: "Next: [`GET_COMMAND_ARGUMENT` — Get command line arguments](get_005fcommand_005fargument), Previous: [`GETARG` — Get command line arguments](getarg), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.122 GET_COMMAND — Get the entire command line [¶](#GET_005fCOMMAND-----Get-the-entire-command-line)\n\nDescription:  \nRetrieve the entire command line that was used to invoke the program.\n\nStandard:  \nFortran 2003 and later\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL GET_COMMAND([COMMAND, LENGTH, STATUS])`\n\nArguments:  \n|           |                                                              |\n|-----------|--------------------------------------------------------------|\n| `COMMAND` | (Optional) shall be of type `CHARACTER` and of default kind. |\n| `LENGTH`  | (Optional) Shall be of type `INTEGER` and of default kind.   |\n| `STATUS`  | (Optional) Shall be of type `INTEGER` and of default kind.   |\n\nReturn value:  \nIf `COMMAND` is present, stores the entire command line that was used to invoke the program in `COMMAND`. If `LENGTH` is present, it is assigned the length of the command line. If `STATUS` is present, it is assigned 0 upon success of the command, -1 if `COMMAND` is too short to store the command line, or a positive value in case of an error.\n\nExample:  \n``` example-preformatted\nPROGRAM test_get_command\n  CHARACTER(len=255) :: cmd\n  CALL get_command(cmd)\n  WRITE (*,*) TRIM(cmd)\nEND PROGRAM\n```\n\nSee also:  \n[`GET_COMMAND_ARGUMENT` — Get command line arguments](get_005fcommand_005fargument), [`COMMAND_ARGUMENT_COUNT` — Get number of command line arguments](command_005fargument_005fcount)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GET_005fCOMMAND.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GET_005fCOMMAND.html)"
- name: 8.123. GET_COMMAND_ARGUMENT
  id: get_005fcommand_005fargument
  summary: 'Description: Retrieve the NUMBER-th argument that was passed on the command line when the containing program was invoked'
  description: "Next: [`GETCWD` — Get current working directory](getcwd), Previous: [`GET_COMMAND` — Get the entire command line](get_005fcommand), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.123 GET_COMMAND_ARGUMENT — Get command line arguments [¶](#GET_005fCOMMAND_005fARGUMENT-----Get-command-line-arguments)\n\nDescription:  \nRetrieve the `NUMBER`-th argument that was passed on the command line when the containing program was invoked.\n\nStandard:  \nFortran 2003 and later\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL GET_COMMAND_ARGUMENT(NUMBER [, VALUE, LENGTH, STATUS])`\n\nArguments:  \n|          |                                                                            |\n|----------|----------------------------------------------------------------------------|\n| `NUMBER` | Shall be a scalar of type `INTEGER` and of default kind, *`NUMBER` \\geq 0* |\n| `VALUE`  | (Optional) Shall be a scalar of type `CHARACTER` and of default kind.      |\n| `LENGTH` | (Optional) Shall be a scalar of type `INTEGER` and of default kind.        |\n| `STATUS` | (Optional) Shall be a scalar of type `INTEGER` and of default kind.        |\n\nReturn value:  \nAfter `GET_COMMAND_ARGUMENT` returns, the `VALUE` argument holds the `NUMBER`-th command line argument. If `VALUE` cannot hold the argument, it is truncated to fit the length of `VALUE`. If there are less than `NUMBER` arguments specified at the command line, `VALUE` will be filled with blanks. If *`NUMBER` = 0*, `VALUE` is set to the name of the program (on systems that support this feature). The `LENGTH` argument contains the length of the `NUMBER`-th command line argument. If the argument retrieval fails, `STATUS` is a positive number; if `VALUE` contains a truncated command line argument, `STATUS` is -1; and otherwise the `STATUS` is zero.\n\nExample:  \n``` example-preformatted\nPROGRAM test_get_command_argument\n  INTEGER :: i\n  CHARACTER(len=32) :: arg\n\n  i = 0\n  DO\n    CALL get_command_argument(i, arg)\n    IF (LEN_TRIM(arg) == 0) EXIT\n\n    WRITE (*,*) TRIM(arg)\n    i = i+1\n  END DO\nEND PROGRAM\n```\n\nSee also:  \n[`GET_COMMAND` — Get the entire command line](get_005fcommand), [`COMMAND_ARGUMENT_COUNT` — Get number of command line arguments](command_005fargument_005fcount)\n\nNext: [`GETCWD` — Get current working directory](getcwd), Previous: [`GET_COMMAND` — Get the entire command line](get_005fcommand), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GET_005fCOMMAND_005fARGUMENT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GET_005fCOMMAND_005fARGUMENT.html)"
- name: 8.124. GETCWD
  id: getcwd
  summary: 'Description: Get current working directory'
  description: "Next: [`GETENV` — Get an environmental variable](getenv), Previous: [`GET_COMMAND_ARGUMENT` — Get command line arguments](get_005fcommand_005fargument), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.124 GETCWD — Get current working directory [¶](#GETCWD-----Get-current-working-directory)\n\nDescription:  \nGet current working directory.\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                             |\n|-----------------------------|\n| `CALL GETCWD(C [, STATUS])` |\n| `STATUS = GETCWD(C)`        |\n\nArguments:  \n|          |                                                                                                   |\n|----------|---------------------------------------------------------------------------------------------------|\n| `C`      | The type shall be `CHARACTER` and of default kind.                                                |\n| `STATUS` | (Optional) status flag. Returns 0 on success, a system specific and nonzero error code otherwise. |\n\nExample:  \n``` example-preformatted\nPROGRAM test_getcwd\n  CHARACTER(len=255) :: cwd\n  CALL getcwd(cwd)\n  WRITE(*,*) TRIM(cwd)\nEND PROGRAM\n```\n\nSee also:  \n[`CHDIR` — Change working directory](chdir)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GETCWD.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GETCWD.html)"
- name: 8.125. GETENV
  id: getenv
  summary: 'Description: Get the VALUE of the environmental variable NAME'
  description: "Next: [`GET_ENVIRONMENT_VARIABLE` — Get an environmental variable](get_005fenvironment_005fvariable), Previous: [`GETCWD` — Get current working directory](getcwd), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.125 GETENV — Get an environmental variable [¶](#GETENV-----Get-an-environmental-variable)\n\nDescription:  \nGet the `VALUE` of the environmental variable `NAME`.\n\nThis intrinsic routine is provided for backwards compatibility with GNU Fortran 77. In new code, programmers should consider the use of the [`GET_ENVIRONMENT_VARIABLE` — Get an environmental variable](get_005fenvironment_005fvariable) intrinsic defined by the Fortran 2003 standard.\n\nNote that `GETENV` need not be thread-safe. It is the responsibility of the user to ensure that the environment is not being updated concurrently with a call to the `GETENV` intrinsic.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL GETENV(NAME, VALUE)`\n\nArguments:  \n|         |                                                   |\n|---------|---------------------------------------------------|\n| `NAME`  | Shall be of type `CHARACTER` and of default kind. |\n| `VALUE` | Shall be of type `CHARACTER` and of default kind. |\n\nReturn value:  \nStores the value of `NAME` in `VALUE`. If `VALUE` is not large enough to hold the data, it is truncated. If `NAME` is not set, `VALUE` will be filled with blanks.\n\nExample:  \n``` example-preformatted\nPROGRAM test_getenv\n  CHARACTER(len=255) :: homedir\n  CALL getenv(\"HOME\", homedir)\n  WRITE (*,*) TRIM(homedir)\nEND PROGRAM\n```\n\nSee also:  \n[`GET_ENVIRONMENT_VARIABLE` — Get an environmental variable](get_005fenvironment_005fvariable)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GETENV.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GETENV.html)"
- name: 8.126. GET_ENVIRONMENT_VARIABLE
  id: get_005fenvironment_005fvariable
  summary: 'Description: Get the VALUE of the environmental variable NAME'
  description: "Next: [`GETGID` — Group ID function](getgid), Previous: [`GETENV` — Get an environmental variable](getenv), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.126 GET_ENVIRONMENT_VARIABLE — Get an environmental variable [¶](#GET_005fENVIRONMENT_005fVARIABLE-----Get-an-environmental-variable)\n\nDescription:  \nGet the `VALUE` of the environmental variable `NAME`.\n\nNote that `GET_ENVIRONMENT_VARIABLE` need not be thread-safe. It is the responsibility of the user to ensure that the environment is not being updated concurrently with a call to the `GET_ENVIRONMENT_VARIABLE` intrinsic.\n\nStandard:  \nFortran 2003 and later\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL GET_ENVIRONMENT_VARIABLE(NAME[, VALUE, LENGTH, STATUS, TRIM_NAME)`\n\nArguments:  \n|             |                                                                       |\n|-------------|-----------------------------------------------------------------------|\n| `NAME`      | Shall be a scalar of type `CHARACTER` and of default kind.            |\n| `VALUE`     | (Optional) Shall be a scalar of type `CHARACTER` and of default kind. |\n| `LENGTH`    | (Optional) Shall be a scalar of type `INTEGER` and of default kind.   |\n| `STATUS`    | (Optional) Shall be a scalar of type `INTEGER` and of default kind.   |\n| `TRIM_NAME` | (Optional) Shall be a scalar of type `LOGICAL` and of default kind.   |\n\nReturn value:  \nStores the value of `NAME` in `VALUE`. If `VALUE` is not large enough to hold the data, it is truncated. If `NAME` is not set, `VALUE` will be filled with blanks. Argument `LENGTH` contains the length needed for storing the environment variable `NAME` or zero if it is not present. `STATUS` is -1 if `VALUE` is present but too short for the environment variable; it is 1 if the environment variable does not exist and 2 if the processor does not support environment variables; in all other cases `STATUS` is zero. If `TRIM_NAME` is present with the value `.FALSE.`, the trailing blanks in `NAME` are significant; otherwise they are not part of the environment variable name.\n\nExample:  \n``` example-preformatted\nPROGRAM test_getenv\n  CHARACTER(len=255) :: homedir\n  CALL get_environment_variable(\"HOME\", homedir)\n  WRITE (*,*) TRIM(homedir)\nEND PROGRAM\n```\n\nNext: [`GETGID` — Group ID function](getgid), Previous: [`GETENV` — Get an environmental variable](getenv), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GET_005fENVIRONMENT_005fVARIABLE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GET_005fENVIRONMENT_005fVARIABLE.html)"
- name: 8.127. GETGID
  id: getgid
  summary: 'Description: Returns the numerical group ID of the current process'
  description: "Next: [`GETLOG` — Get login name](getlog), Previous: [`GET_ENVIRONMENT_VARIABLE` — Get an environmental variable](get_005fenvironment_005fvariable), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.127 GETGID — Group ID function [¶](#GETGID-----Group-ID-function)\n\nDescription:  \nReturns the numerical group ID of the current process.\n\nStandard:  \nGNU extension\n\nClass:  \nFunction\n\nSyntax:  \n`RESULT = GETGID()`\n\nReturn value:  \nThe return value of `GETGID` is an `INTEGER` of the default kind.\n\nExample:  \nSee `GETPID` for an example.\n\nSee also:  \n[`GETPID` — Process ID function](getpid), [`GETUID` — User ID function](getuid)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GETGID.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GETGID.html)"
- name: 8.128. GETLOG
  id: getlog
  summary: 'Description: Gets the username under which the program is running'
  description: "Next: [`GETPID` — Process ID function](getpid), Previous: [`GETGID` — Group ID function](getgid), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.128 GETLOG — Get login name [¶](#GETLOG-----Get-login-name)\n\nDescription:  \nGets the username under which the program is running.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL GETLOG(C)`\n\nArguments:  \n|     |                                                   |\n|-----|---------------------------------------------------|\n| `C` | Shall be of type `CHARACTER` and of default kind. |\n\nReturn value:  \nStores the current user name in `C`. (On systems where POSIX functions `geteuid` and `getpwuid` are not available, and the `getlogin` function is not implemented either, this will return a blank string.)\n\nExample:  \n``` example-preformatted\nPROGRAM TEST_GETLOG\n  CHARACTER(32) :: login\n  CALL GETLOG(login)\n  WRITE(*,*) login\nEND PROGRAM\n```\n\nSee also:  \n[`GETUID` — User ID function](getuid)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GETLOG.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GETLOG.html)"
- name: 8.129. GETPID
  id: getpid
  summary: 'Description: Returns the numerical process identifier of the current process'
  description: "Next: [`GETUID` — User ID function](getuid), Previous: [`GETLOG` — Get login name](getlog), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.129 GETPID — Process ID function [¶](#GETPID-----Process-ID-function)\n\nDescription:  \nReturns the numerical process identifier of the current process.\n\nStandard:  \nGNU extension\n\nClass:  \nFunction\n\nSyntax:  \n`RESULT = GETPID()`\n\nReturn value:  \nThe return value of `GETPID` is an `INTEGER` of the default kind.\n\nExample:  \n``` example-preformatted\nprogram info\n  print *, \"The current process ID is \", getpid()\n  print *, \"Your numerical user ID is \", getuid()\n  print *, \"Your numerical group ID is \", getgid()\nend program info\n```\n\nSee also:  \n[`GETGID` — Group ID function](getgid), [`GETUID` — User ID function](getuid)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GETPID.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GETPID.html)"
- name: 8.130. GETUID
  id: getuid
  summary: 'Description: Returns the numerical user ID of the current process'
  description: "Next: [`GMTIME` — Convert time to GMT info](gmtime), Previous: [`GETPID` — Process ID function](getpid), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.130 GETUID — User ID function [¶](#GETUID-----User-ID-function)\n\nDescription:  \nReturns the numerical user ID of the current process.\n\nStandard:  \nGNU extension\n\nClass:  \nFunction\n\nSyntax:  \n`RESULT = GETUID()`\n\nReturn value:  \nThe return value of `GETUID` is an `INTEGER` of the default kind.\n\nExample:  \nSee `GETPID` for an example.\n\nSee also:  \n[`GETPID` — Process ID function](getpid), [`GETLOG` — Get login name](getlog)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GETUID.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GETUID.html)"
- name: 8.131. GMTIME
  id: gmtime
  summary: 'Description: Given a system time value TIME (as provided by the TIME — Time function intrinsic), fills VALUES with values extracted from it appropriate to the UTC time zone (Universal Coordinated Time, also known in some countries as GMT, Greenwich Mean Time), using gmtime(3)'
  description: "Next: [`HOSTNM` — Get system host name](hostnm), Previous: [`GETUID` — User ID function](getuid), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.131 GMTIME — Convert time to GMT info [¶](#GMTIME-----Convert-time-to-GMT-info)\n\nDescription:  \nGiven a system time value `TIME` (as provided by the [`TIME` — Time function](time) intrinsic), fills `VALUES` with values extracted from it appropriate to the UTC time zone (Universal Coordinated Time, also known in some countries as GMT, Greenwich Mean Time), using `gmtime(3)`.\n\nThis intrinsic routine is provided for backwards compatibility with GNU Fortran 77. In new code, programmers should consider the use of the [`DATE_AND_TIME` — Date and time subroutine](date_005fand_005ftime) intrinsic defined by the Fortran 95 standard.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL GMTIME(TIME, VALUES)`\n\nArguments:  \n|          |                                                                                   |\n|----------|-----------------------------------------------------------------------------------|\n| `TIME`   | An `INTEGER` scalar expression corresponding to a system time, with `INTENT(IN)`. |\n| `VALUES` | A default `INTEGER` array with 9 elements, with `INTENT(OUT)`.                    |\n\nReturn value:  \nThe elements of `VALUES` are assigned as follows:\n\n1.  Seconds after the minute, range 0–59 or 0–61 to allow for leap seconds\n2.  Minutes after the hour, range 0–59\n3.  Hours past midnight, range 0–23\n4.  Day of month, range 1–31\n5.  Number of months since January, range 0–11\n6.  Years since 1900\n7.  Number of days since Sunday, range 0–6\n8.  Days since January 1, range 0–365\n9.  Daylight savings indicator: positive if daylight savings is in effect, zero if not, and negative if the information is not available.\n\nSee also:  \n[`DATE_AND_TIME` — Date and time subroutine](date_005fand_005ftime), [`CTIME` — Convert a time into a string](ctime), [`LTIME` — Convert time to local time info](ltime), [`TIME` — Time function](time), [`TIME8` — Time function (64-bit)](time8)\n\nNext: [`HOSTNM` — Get system host name](hostnm), Previous: [`GETUID` — User ID function](getuid), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GMTIME.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/GMTIME.html)"
- name: 8.132. HOSTNM
  id: hostnm
  summary: 'Description: Retrieves the host name of the system on which the program is running'
  description: "Next: [`HUGE` — Largest number of a kind](huge), Previous: [`GMTIME` — Convert time to GMT info](gmtime), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.132 HOSTNM — Get system host name [¶](#HOSTNM-----Get-system-host-name)\n\nDescription:  \nRetrieves the host name of the system on which the program is running.\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                             |\n|-----------------------------|\n| `CALL HOSTNM(C [, STATUS])` |\n| `STATUS = HOSTNM(NAME)`     |\n\nArguments:  \n|          |                                                                                                            |\n|----------|------------------------------------------------------------------------------------------------------------|\n| `C`      | Shall of type `CHARACTER` and of default kind.                                                             |\n| `STATUS` | (Optional) status flag of type `INTEGER`. Returns 0 on success, or a system specific error code otherwise. |\n\nReturn value:  \nIn either syntax, `NAME` is set to the current hostname if it can be obtained, or to a blank string otherwise.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/HOSTNM.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/HOSTNM.html)"
- name: 8.133. HUGE
  id: huge
  summary: 'Description: HUGE(X) returns the largest number that is not an infinity in the model of the type of X'
  description: "Next: [`HYPOT` — Euclidean distance function](hypot), Previous: [`HOSTNM` — Get system host name](hostnm), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.133 HUGE — Largest number of a kind [¶](#HUGE-----Largest-number-of-a-kind)\n\nDescription:  \n`HUGE(X)` returns the largest number that is not an infinity in the model of the type of `X`.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = HUGE(X)`\n\nArguments:  \n|     |                                       |\n|-----|---------------------------------------|\n| `X` | Shall be of type `REAL` or `INTEGER`. |\n\nReturn value:  \nThe return value is of the same type and kind as `X`\n\nExample:  \n``` example-preformatted\nprogram test_huge_tiny\n  print *, huge(0), huge(0.0), huge(0.0d0)\n  print *, tiny(0.0), tiny(0.0d0)\nend program test_huge_tiny\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/HUGE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/HUGE.html)"
- name: 8.134. HYPOT
  id: hypot
  summary: 'Description: HYPOT(X,Y) is the Euclidean distance function'
  description: "Next: [`IACHAR` — Code in ASCII collating sequence](iachar), Previous: [`HUGE` — Largest number of a kind](huge), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.134 HYPOT — Euclidean distance function [¶](#HYPOT-----Euclidean-distance-function)\n\nDescription:  \n`HYPOT(X,Y)` is the Euclidean distance function. It is equal to *\\sqrt{X^2 + Y^2}*, without undue underflow or overflow.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = HYPOT(X, Y)`\n\nArguments:  \n|     |                                                            |\n|-----|------------------------------------------------------------|\n| `X` | The type shall be `REAL`.                                  |\n| `Y` | The type and kind type parameter shall be the same as `X`. |\n\nReturn value:  \nThe return value has the same type and kind type parameter as `X`.\n\nExample:  \n``` example-preformatted\nprogram test_hypot\n  real(4) :: x = 1.e0_4, y = 0.5e0_4\n  x = hypot(x,y)\nend program test_hypot\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/HYPOT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/HYPOT.html)"
- name: 8.135. IACHAR
  id: iachar
  summary: 'Description: IACHAR(C) returns the code for the ASCII character in the first character position of C'
  description: "Next: [`IALL` — Bitwise AND of array elements](iall), Previous: [`HYPOT` — Euclidean distance function](hypot), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.135 IACHAR — Code in ASCII collating sequence [¶](#IACHAR-----Code-in-ASCII-collating-sequence)\n\nDescription:  \n`IACHAR(C)` returns the code for the ASCII character in the first character position of `C`.\n\nStandard:  \nFortran 95 and later, with `KIND` argument Fortran 2003 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = IACHAR(C [, KIND])`\n\nArguments:  \n|        |                                                                                                |\n|--------|------------------------------------------------------------------------------------------------|\n| `C`    | Shall be a scalar `CHARACTER`, with `INTENT(IN)`                                               |\n| `KIND` | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of kind `KIND`. If `KIND` is absent, the return value is of default integer kind.\n\nExample:  \n``` example-preformatted\nprogram test_iachar\n  integer i\n  i = iachar(' ')\nend program test_iachar\n```\n\nNote:  \nSee [`ICHAR` — Character-to-integer conversion function](ichar) for a discussion of converting between numerical values and formatted string representations.\n\nSee also:  \n[`ACHAR` — Character in ASCII collating sequence](achar), [`CHAR` — Character conversion function](char), [`ICHAR` — Character-to-integer conversion function](ichar)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IACHAR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IACHAR.html)"
- name: 8.136. IALL
  id: iall
  summary: 'Description: Reduces with bitwise AND the elements of ARRAY along dimension DIM if the corresponding element in MASK is TRUE'
  description: "Next: [`IAND` — Bitwise logical and](iand), Previous: [`IACHAR` — Code in ASCII collating sequence](iachar), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.136 IALL — Bitwise AND of array elements [¶](#IALL-----Bitwise-AND-of-array-elements)\n\nDescription:  \nReduces with bitwise AND the elements of `ARRAY` along dimension `DIM` if the corresponding element in `MASK` is `TRUE`.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n|                                     |\n|-------------------------------------|\n| `RESULT = IALL(ARRAY[, MASK])`      |\n| `RESULT = IALL(ARRAY, DIM[, MASK])` |\n\nArguments:  \n|         |                                                                                                                           |\n|---------|---------------------------------------------------------------------------------------------------------------------------|\n| `ARRAY` | Shall be an array of type `INTEGER`                                                                                       |\n| `DIM`   | (Optional) shall be a scalar of type `INTEGER` with a value in the range from 1 to n, where n equals the rank of `ARRAY`. |\n| `MASK`  | (Optional) shall be of type `LOGICAL` and either be a scalar or an array of the same shape as `ARRAY`.                    |\n\nReturn value:  \nThe result is of the same type as `ARRAY`.\n\nIf `DIM` is absent, a scalar with the bitwise ALL of all elements in `ARRAY` is returned. Otherwise, an array of rank n-1, where n equals the rank of `ARRAY`, and a shape similar to that of `ARRAY` with dimension `DIM` dropped is returned.\n\nExample:  \n``` example-preformatted\nPROGRAM test_iall\n  INTEGER(1) :: a(2)\n\n  a(1) = b'00100100'\n  a(2) = b'01101010'\n\n  ! prints 00100000\n  PRINT '(b8.8)', IALL(a)\nEND PROGRAM\n```\n\nSee also:  \n[`IANY` — Bitwise OR of array elements](iany), [`IPARITY` — Bitwise XOR of array elements](iparity), [`IAND` — Bitwise logical and](iand)\n\nNext: [`IAND` — Bitwise logical and](iand), Previous: [`IACHAR` — Code in ASCII collating sequence](iachar), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IALL.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IALL.html)"
- name: 8.137. IAND
  id: iand
  summary: 'Description: Bitwise logical AND'
  description: "Next: [`IANY` — Bitwise OR of array elements](iany), Previous: [`IALL` — Bitwise AND of array elements](iall), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.137 IAND — Bitwise logical and [¶](#IAND-----Bitwise-logical-and)\n\nDescription:  \nBitwise logical `AND`.\n\nStandard:  \nFortran 90 and later, with boz-literal-constant Fortran 2008 and later, has overloads that are GNU extensions\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = IAND(I, J)`\n\nArguments:  \n|     |                                                                                                                                                      |\n|-----|------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `I` | The type shall be `INTEGER` or a boz-literal-constant.                                                                                               |\n| `J` | The type shall be `INTEGER` with the same kind type parameter as `I` or a boz-literal-constant. `I` and `J` shall not both be boz-literal-constants. |\n\nReturn value:  \nThe return type is `INTEGER` with the kind type parameter of the arguments. A boz-literal-constant is converted to an `INTEGER` with the kind type parameter of the other argument as-if a call to [`INT` — Convert to integer type](int) occurred.\n\nExample:  \n``` example-preformatted\nPROGRAM test_iand\n  INTEGER :: a, b\n  DATA a / Z'F' /, b / Z'3' /\n  WRITE (*,*) IAND(a, b)\nEND PROGRAM\n```\n\nSpecific names:  \n| Name       | Argument       | Return type  | Standard             |\n|------------|----------------|--------------|----------------------|\n| `IAND(A)`  | `INTEGER A`    | `INTEGER`    | Fortran 90 and later |\n| `BIAND(A)` | `INTEGER(1) A` | `INTEGER(1)` | GNU extension        |\n| `IIAND(A)` | `INTEGER(2) A` | `INTEGER(2)` | GNU extension        |\n| `JIAND(A)` | `INTEGER(4) A` | `INTEGER(4)` | GNU extension        |\n| `KIAND(A)` | `INTEGER(8) A` | `INTEGER(8)` | GNU extension        |\n\nSee also:  \n[`IOR` — Bitwise logical or](ior), [`IEOR` — Bitwise logical exclusive or](ieor), [`IBITS` — Bit extraction](ibits), [`IBSET` — Set bit](ibset), [`IBCLR` — Clear bit](ibclr), [`NOT` — Logical negation](not)\n\nNext: [`IANY` — Bitwise OR of array elements](iany), Previous: [`IALL` — Bitwise AND of array elements](iall), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IAND.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IAND.html)"
- name: 8.138. IANY
  id: iany
  summary: 'Description: Reduces with bitwise OR (inclusive or) the elements of ARRAY along dimension DIM if the corresponding element in MASK is TRUE'
  description: "Next: [`IARGC` — Get the number of command line arguments](iargc), Previous: [`IAND` — Bitwise logical and](iand), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.138 IANY — Bitwise OR of array elements [¶](#IANY-----Bitwise-OR-of-array-elements)\n\nDescription:  \nReduces with bitwise OR (inclusive or) the elements of `ARRAY` along dimension `DIM` if the corresponding element in `MASK` is `TRUE`.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n|                                     |\n|-------------------------------------|\n| `RESULT = IANY(ARRAY[, MASK])`      |\n| `RESULT = IANY(ARRAY, DIM[, MASK])` |\n\nArguments:  \n|         |                                                                                                                           |\n|---------|---------------------------------------------------------------------------------------------------------------------------|\n| `ARRAY` | Shall be an array of type `INTEGER`                                                                                       |\n| `DIM`   | (Optional) shall be a scalar of type `INTEGER` with a value in the range from 1 to n, where n equals the rank of `ARRAY`. |\n| `MASK`  | (Optional) shall be of type `LOGICAL` and either be a scalar or an array of the same shape as `ARRAY`.                    |\n\nReturn value:  \nThe result is of the same type as `ARRAY`.\n\nIf `DIM` is absent, a scalar with the bitwise OR of all elements in `ARRAY` is returned. Otherwise, an array of rank n-1, where n equals the rank of `ARRAY`, and a shape similar to that of `ARRAY` with dimension `DIM` dropped is returned.\n\nExample:  \n``` example-preformatted\nPROGRAM test_iany\n  INTEGER(1) :: a(2)\n\n  a(1) = b'00100100'\n  a(2) = b'01101010'\n\n  ! prints 01101110\n  PRINT '(b8.8)', IANY(a)\nEND PROGRAM\n```\n\nSee also:  \n[`IPARITY` — Bitwise XOR of array elements](iparity), [`IALL` — Bitwise AND of array elements](iall), [`IOR` — Bitwise logical or](ior)\n\nNext: [`IARGC` — Get the number of command line arguments](iargc), Previous: [`IAND` — Bitwise logical and](iand), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IANY.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IANY.html)"
- name: 8.139. IARGC
  id: iargc
  summary: 'Description: IARGC returns the number of arguments passed on the command line when the containing program was invoked'
  description: "Next: [`IBCLR` — Clear bit](ibclr), Previous: [`IANY` — Bitwise OR of array elements](iany), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.139 IARGC — Get the number of command line arguments [¶](#IARGC-----Get-the-number-of-command-line-arguments)\n\nDescription:  \n`IARGC` returns the number of arguments passed on the command line when the containing program was invoked.\n\nThis intrinsic routine is provided for backwards compatibility with GNU Fortran 77. In new code, programmers should consider the use of the [`COMMAND_ARGUMENT_COUNT` — Get number of command line arguments](command_005fargument_005fcount) intrinsic defined by the Fortran 2003 standard.\n\nStandard:  \nGNU extension\n\nClass:  \nFunction\n\nSyntax:  \n`RESULT = IARGC()`\n\nArguments:  \nNone\n\nReturn value:  \nThe number of command line arguments, type `INTEGER(4)`.\n\nExample:  \nSee [`GETARG` — Get command line arguments](getarg)\n\nSee also:  \nGNU Fortran 77 compatibility subroutine: [`GETARG` — Get command line arguments](getarg) Fortran 2003 functions and subroutines: [`GET_COMMAND` — Get the entire command line](get_005fcommand), [`GET_COMMAND_ARGUMENT` — Get command line arguments](get_005fcommand_005fargument), [`COMMAND_ARGUMENT_COUNT` — Get number of command line arguments](command_005fargument_005fcount)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IARGC.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IARGC.html)"
- name: 8.140. IBCLR
  id: ibclr
  summary: 'Description: IBCLR returns the value of I with the bit at position POS set to zero'
  description: "Next: [`IBITS` — Bit extraction](ibits), Previous: [`IARGC` — Get the number of command line arguments](iargc), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.140 IBCLR — Clear bit [¶](#IBCLR-----Clear-bit)\n\nDescription:  \n`IBCLR` returns the value of `I` with the bit at position `POS` set to zero.\n\nStandard:  \nFortran 90 and later, has overloads that are GNU extensions\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = IBCLR(I, POS)`\n\nArguments:  \n|       |                              |\n|-------|------------------------------|\n| `I`   | The type shall be `INTEGER`. |\n| `POS` | The type shall be `INTEGER`. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of the same kind as `I`.\n\nSpecific names:  \n| Name        | Argument       | Return type  | Standard             |\n|-------------|----------------|--------------|----------------------|\n| `IBCLR(A)`  | `INTEGER A`    | `INTEGER`    | Fortran 90 and later |\n| `BBCLR(A)`  | `INTEGER(1) A` | `INTEGER(1)` | GNU extension        |\n| `IIBCLR(A)` | `INTEGER(2) A` | `INTEGER(2)` | GNU extension        |\n| `JIBCLR(A)` | `INTEGER(4) A` | `INTEGER(4)` | GNU extension        |\n| `KIBCLR(A)` | `INTEGER(8) A` | `INTEGER(8)` | GNU extension        |\n\nSee also:  \n[`IBITS` — Bit extraction](ibits), [`IBSET` — Set bit](ibset), [`IAND` — Bitwise logical and](iand), [`IOR` — Bitwise logical or](ior), [`IEOR` — Bitwise logical exclusive or](ieor), [`MVBITS` — Move bits from one integer to another](mvbits)\n\nNext: [`IBITS` — Bit extraction](ibits), Previous: [`IARGC` — Get the number of command line arguments](iargc), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IBCLR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IBCLR.html)"
- name: 8.141. IBITS
  id: ibits
  summary: 'Description: IBITS extracts a field of length LEN from I, starting from bit position POS and extending left for LEN bits'
  description: "Next: [`IBSET` — Set bit](ibset), Previous: [`IBCLR` — Clear bit](ibclr), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.141 IBITS — Bit extraction [¶](#IBITS-----Bit-extraction)\n\nDescription:  \n`IBITS` extracts a field of length `LEN` from `I`, starting from bit position `POS` and extending left for `LEN` bits. The result is right-justified and the remaining bits are zeroed. The value of `POS+LEN` must be less than or equal to the value `BIT_SIZE(I)`.\n\nStandard:  \nFortran 90 and later, has overloads that are GNU extensions\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = IBITS(I, POS, LEN)`\n\nArguments:  \n|       |                              |\n|-------|------------------------------|\n| `I`   | The type shall be `INTEGER`. |\n| `POS` | The type shall be `INTEGER`. |\n| `LEN` | The type shall be `INTEGER`. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of the same kind as `I`.\n\nSpecific names:  \n| Name        | Argument       | Return type  | Standard             |\n|-------------|----------------|--------------|----------------------|\n| `IBITS(A)`  | `INTEGER A`    | `INTEGER`    | Fortran 90 and later |\n| `BBITS(A)`  | `INTEGER(1) A` | `INTEGER(1)` | GNU extension        |\n| `IIBITS(A)` | `INTEGER(2) A` | `INTEGER(2)` | GNU extension        |\n| `JIBITS(A)` | `INTEGER(4) A` | `INTEGER(4)` | GNU extension        |\n| `KIBITS(A)` | `INTEGER(8) A` | `INTEGER(8)` | GNU extension        |\n\nSee also:  \n[`BIT_SIZE` — Bit size inquiry function](bit_005fsize), [`IBCLR` — Clear bit](ibclr), [`IBSET` — Set bit](ibset), [`IAND` — Bitwise logical and](iand), [`IOR` — Bitwise logical or](ior), [`IEOR` — Bitwise logical exclusive or](ieor)\n\nNext: [`IBSET` — Set bit](ibset), Previous: [`IBCLR` — Clear bit](ibclr), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IBITS.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IBITS.html)"
- name: 8.142. IBSET
  id: ibset
  summary: 'Description: IBSET returns the value of I with the bit at position POS set to one'
  description: "Next: [`ICHAR` — Character-to-integer conversion function](ichar), Previous: [`IBITS` — Bit extraction](ibits), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.142 IBSET — Set bit [¶](#IBSET-----Set-bit)\n\nDescription:  \n`IBSET` returns the value of `I` with the bit at position `POS` set to one.\n\nStandard:  \nFortran 90 and later, has overloads that are GNU extensions\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = IBSET(I, POS)`\n\nArguments:  \n|       |                              |\n|-------|------------------------------|\n| `I`   | The type shall be `INTEGER`. |\n| `POS` | The type shall be `INTEGER`. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of the same kind as `I`.\n\nSpecific names:  \n| Name        | Argument       | Return type  | Standard             |\n|-------------|----------------|--------------|----------------------|\n| `IBSET(A)`  | `INTEGER A`    | `INTEGER`    | Fortran 90 and later |\n| `BBSET(A)`  | `INTEGER(1) A` | `INTEGER(1)` | GNU extension        |\n| `IIBSET(A)` | `INTEGER(2) A` | `INTEGER(2)` | GNU extension        |\n| `JIBSET(A)` | `INTEGER(4) A` | `INTEGER(4)` | GNU extension        |\n| `KIBSET(A)` | `INTEGER(8) A` | `INTEGER(8)` | GNU extension        |\n\nSee also:  \n[`IBCLR` — Clear bit](ibclr), [`IBITS` — Bit extraction](ibits), [`IAND` — Bitwise logical and](iand), [`IOR` — Bitwise logical or](ior), [`IEOR` — Bitwise logical exclusive or](ieor), [`MVBITS` — Move bits from one integer to another](mvbits)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IBSET.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IBSET.html)"
- name: 8.143. ICHAR
  id: ichar
  summary: 'Description: ICHAR(C) returns the code for the character in the first character position of C in the system’s native character set'
  description: "Next: [`IDATE` — Get current local time subroutine (day/month/year)](idate), Previous: [`IBSET` — Set bit](ibset), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.143 ICHAR — Character-to-integer conversion function [¶](#ICHAR-----Character-to-integer-conversion-function)\n\nDescription:  \n`ICHAR(C)` returns the code for the character in the first character position of `C` in the system’s native character set. The correspondence between characters and their codes is not necessarily the same across different GNU Fortran implementations.\n\nStandard:  \nFortran 77 and later, with `KIND` argument Fortran 2003 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = ICHAR(C [, KIND])`\n\nArguments:  \n|        |                                                                                                |\n|--------|------------------------------------------------------------------------------------------------|\n| `C`    | Shall be a scalar `CHARACTER`, with `INTENT(IN)`                                               |\n| `KIND` | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of kind `KIND`. If `KIND` is absent, the return value is of default integer kind.\n\nExample:  \n``` example-preformatted\nprogram test_ichar\n  integer i\n  i = ichar(' ')\nend program test_ichar\n```\n\nSpecific names:  \n| Name       | Argument      | Return type  | Standard             |\n|------------|---------------|--------------|----------------------|\n| `ICHAR(C)` | `CHARACTER C` | `INTEGER(4)` | Fortran 77 and later |\n\nNote:  \nNo intrinsic exists to convert between a numeric value and a formatted character string representation – for instance, given the `CHARACTER` value `'154'`, obtaining an `INTEGER` or `REAL` value with the value 154, or vice versa. Instead, this functionality is provided by internal-file I/O, as in the following example:\n\n``` example-preformatted\nprogram read_val\n  integer value\n  character(len=10) string, string2\n  string = '154'\n  \n  ! Convert a string to a numeric value\n  read (string,'(I10)') value\n  print *, value\n  \n  ! Convert a value to a formatted string\n  write (string2,'(I10)') value\n  print *, string2\nend program read_val\n```\n\nSee also:  \n[`ACHAR` — Character in ASCII collating sequence](achar), [`CHAR` — Character conversion function](char), [`IACHAR` — Code in ASCII collating sequence](iachar)\n\nNext: [`IDATE` — Get current local time subroutine (day/month/year)](idate), Previous: [`IBSET` — Set bit](ibset), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ICHAR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ICHAR.html)"
- name: 8.144. IDATE
  id: idate
  summary: 'Description: IDATE(VALUES) Fills VALUES with the numerical values at the current local time'
  description: "Next: [`IEOR` — Bitwise logical exclusive or](ieor), Previous: [`ICHAR` — Character-to-integer conversion function](ichar), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.144 IDATE — Get current local time subroutine (day/month/year) [¶](#IDATE-----Get-current-local-time-subroutine-_0028day_002fmonth_002fyear_0029)\n\nDescription:  \n`IDATE(VALUES)` Fills `VALUES` with the numerical values at the current local time. The day (in the range 1-31), month (in the range 1-12), and year appear in elements 1, 2, and 3 of `VALUES`, respectively. The year has four significant digits.\n\nThis intrinsic routine is provided for backwards compatibility with GNU Fortran 77. In new code, programmers should consider the use of the [`DATE_AND_TIME` — Date and time subroutine](date_005fand_005ftime) intrinsic defined by the Fortran 95 standard.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL IDATE(VALUES)`\n\nArguments:  \n|          |                                                                                           |\n|----------|-------------------------------------------------------------------------------------------|\n| `VALUES` | The type shall be `INTEGER, DIMENSION(3)` and the kind shall be the default integer kind. |\n\nReturn value:  \nDoes not return anything.\n\nExample:  \n``` example-preformatted\nprogram test_idate\n  integer, dimension(3) :: tarray\n  call idate(tarray)\n  print *, tarray(1)\n  print *, tarray(2)\n  print *, tarray(3)\nend program test_idate\n```\n\nSee also:  \n[`DATE_AND_TIME` — Date and time subroutine](date_005fand_005ftime)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IDATE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IDATE.html)"
- name: 8.145. IEOR
  id: ieor
  summary: 'Description: IEOR returns the bitwise Boolean exclusive-OR of I and J'
  description: "Next: [`IERRNO` — Get the last system error number](ierrno), Previous: [`IDATE` — Get current local time subroutine (day/month/year)](idate), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.145 IEOR — Bitwise logical exclusive or [¶](#IEOR-----Bitwise-logical-exclusive-or)\n\nDescription:  \n`IEOR` returns the bitwise Boolean exclusive-OR of `I` and `J`.\n\nStandard:  \nFortran 90 and later, with boz-literal-constant Fortran 2008 and later, has overloads that are GNU extensions\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = IEOR(I, J)`\n\nArguments:  \n|     |                                                                                                                                                      |\n|-----|------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `I` | The type shall be `INTEGER` or a boz-literal-constant.                                                                                               |\n| `J` | The type shall be `INTEGER` with the same kind type parameter as `I` or a boz-literal-constant. `I` and `J` shall not both be boz-literal-constants. |\n\nReturn value:  \nThe return type is `INTEGER` with the kind type parameter of the arguments. A boz-literal-constant is converted to an `INTEGER` with the kind type parameter of the other argument as-if a call to [`INT` — Convert to integer type](int) occurred.\n\nSpecific names:  \n| Name       | Argument       | Return type  | Standard             |\n|------------|----------------|--------------|----------------------|\n| `IEOR(A)`  | `INTEGER A`    | `INTEGER`    | Fortran 90 and later |\n| `BIEOR(A)` | `INTEGER(1) A` | `INTEGER(1)` | GNU extension        |\n| `IIEOR(A)` | `INTEGER(2) A` | `INTEGER(2)` | GNU extension        |\n| `JIEOR(A)` | `INTEGER(4) A` | `INTEGER(4)` | GNU extension        |\n| `KIEOR(A)` | `INTEGER(8) A` | `INTEGER(8)` | GNU extension        |\n\nSee also:  \n[`IOR` — Bitwise logical or](ior), [`IAND` — Bitwise logical and](iand), [`IBITS` — Bit extraction](ibits), [`IBSET` — Set bit](ibset), [`IBCLR` — Clear bit](ibclr), [`NOT` — Logical negation](not)\n\nNext: [`IERRNO` — Get the last system error number](ierrno), Previous: [`IDATE` — Get current local time subroutine (day/month/year)](idate), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IEOR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IEOR.html)"
- name: 8.146. IERRNO
  id: ierrno
  summary: 'Description: Returns the last system error number, as given by the C errno variable'
  description: "Next: [`IMAGE_INDEX` — Function that converts a cosubscript to an image index](image_005findex), Previous: [`IEOR` — Bitwise logical exclusive or](ieor), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.146 IERRNO — Get the last system error number [¶](#IERRNO-----Get-the-last-system-error-number)\n\nDescription:  \nReturns the last system error number, as given by the C `errno` variable.\n\nStandard:  \nGNU extension\n\nClass:  \nFunction\n\nSyntax:  \n`RESULT = IERRNO()`\n\nArguments:  \nNone\n\nReturn value:  \nThe return value is of type `INTEGER` and of the default integer kind.\n\nSee also:  \n[`PERROR` — Print system error message](perror)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IERRNO.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IERRNO.html)"
- name: 8.147. IMAGE_INDEX
  id: image_005findex
  summary: 'Description: Returns the image index belonging to a cosubscript'
  description: "Next: [`INDEX` — Position of a substring within a string](index-intrinsic), Previous: [`IERRNO` — Get the last system error number](ierrno), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.147 IMAGE_INDEX — Function that converts a cosubscript to an image index [¶](#IMAGE_005fINDEX-----Function-that-converts-a-cosubscript-to-an-image-index)\n\nDescription:  \nReturns the image index belonging to a cosubscript.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nInquiry function.\n\nSyntax:  \n`RESULT = IMAGE_INDEX(COARRAY, SUB)`\n\nArguments:  \n|           |                                                                          |\n|-----------|--------------------------------------------------------------------------|\n| `COARRAY` | Coarray of any type.                                                     |\n| `SUB`     | default integer rank-1 array of a size equal to the corank of `COARRAY`. |\n\nReturn value:  \nScalar default integer with the value of the image index which corresponds to the cosubscripts. For invalid cosubscripts the result is zero.\n\nExample:  \n``` example-preformatted\nINTEGER :: array[2,-1:4,8,*]\n! Writes  28 (or 0 if there are fewer than 28 images)\nWRITE (*,*) IMAGE_INDEX (array, [2,0,3,1])\n```\n\nSee also:  \n[`THIS_IMAGE` — Function that returns the cosubscript index of this image](this_005fimage), [`NUM_IMAGES` — Function that returns the number of images](num_005fimages)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IMAGE_005fINDEX.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IMAGE_005fINDEX.html)"
- name: 8.148. INDEX
  id: index-intrinsic
  summary: 'Description: Returns the position of the start of the first occurrence of string SUBSTRING as a substring in STRING, counting from one'
  description: "Next: [`INT` — Convert to integer type](int), Previous: [`IMAGE_INDEX` — Function that converts a cosubscript to an image index](image_005findex), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.148 INDEX — Position of a substring within a string [¶](#INDEX-----Position-of-a-substring-within-a-string)\n\nDescription:  \nReturns the position of the start of the first occurrence of string `SUBSTRING` as a substring in `STRING`, counting from one. If `SUBSTRING` is not present in `STRING`, zero is returned. If the `BACK` argument is present and true, the return value is the start of the last occurrence rather than the first.\n\nStandard:  \nFortran 77 and later, with `KIND` argument Fortran 2003 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = INDEX(STRING, SUBSTRING [, BACK [, KIND]])`\n\nArguments:  \n|             |                                                                                                |\n|-------------|------------------------------------------------------------------------------------------------|\n| `STRING`    | Shall be a scalar `CHARACTER`, with `INTENT(IN)`                                               |\n| `SUBSTRING` | Shall be a scalar `CHARACTER`, with `INTENT(IN)`                                               |\n| `BACK`      | (Optional) Shall be a scalar `LOGICAL`, with `INTENT(IN)`                                      |\n| `KIND`      | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of kind `KIND`. If `KIND` is absent, the return value is of default integer kind.\n\nSpecific names:  \n| Name                      | Argument    | Return type  | Standard             |\n|---------------------------|-------------|--------------|----------------------|\n| `INDEX(STRING,SUBSTRING)` | `CHARACTER` | `INTEGER(4)` | Fortran 77 and later |\n\nSee also:  \n[`SCAN` — Scan a string for the presence of a set of characters](scan), [`VERIFY` — Scan a string for characters not a given set](verify)\n\nNext: [`INT` — Convert to integer type](int), Previous: [`IMAGE_INDEX` — Function that converts a cosubscript to an image index](image_005findex), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/INDEX-intrinsic.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/INDEX-intrinsic.html)"
- name: 8.149. INT
  id: int
  summary: 'Standard: Fortran 77 and later, with boz-literal-constant Fortran 2008 and later'
  description: "Next: [`INT2` — Convert to 16-bit integer type](int2), Previous: [`INDEX` — Position of a substring within a string](index-intrinsic), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.149 INT — Convert to integer type [¶](#INT-----Convert-to-integer-type)\n\nDescription:  \nConvert to integer type\n\nStandard:  \nFortran 77 and later, with boz-literal-constant Fortran 2008 and later.\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = INT(A [, KIND))`\n\nArguments:  \n|        |                                                                                                |\n|--------|------------------------------------------------------------------------------------------------|\n| `A`    | Shall be of type `INTEGER`, `REAL`, or `COMPLEX` or a boz-literal-constant.                    |\n| `KIND` | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result. |\n\nReturn value:  \nThese functions return a `INTEGER` variable or array under the following rules:\n\n\\(A\\)  \nIf `A` is of type `INTEGER`, `INT(A) = A`\n\n\\(B\\)  \nIf `A` is of type `REAL` and *\\|A\\| \\< 1*, `INT(A)` equals `0`. If *\\|A\\| \\geq 1*, then `INT(A)` is the integer whose magnitude is the largest integer that does not exceed the magnitude of `A` and whose sign is the same as the sign of `A`.\n\n\\(C\\)  \nIf `A` is of type `COMPLEX`, rule B is applied to the real part of `A`.\n\nExample:  \n``` example-preformatted\nprogram test_int\n  integer :: i = 42\n  complex :: z = (-3.7, 1.0)\n  print *, int(i)\n  print *, int(z), int(z,8)\nend program\n```\n\nSpecific names:  \n| Name       | Argument    | Return type | Standard             |\n|------------|-------------|-------------|----------------------|\n| `INT(A)`   | `REAL(4) A` | `INTEGER`   | Fortran 77 and later |\n| `IFIX(A)`  | `REAL(4) A` | `INTEGER`   | Fortran 77 and later |\n| `IDINT(A)` | `REAL(8) A` | `INTEGER`   | Fortran 77 and later |\n\nNext: [`INT2` — Convert to 16-bit integer type](int2), Previous: [`INDEX` — Position of a substring within a string](index-intrinsic), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/INT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/INT.html)"
- name: 8.150. INT2
  id: int2
  summary: 'Description: Convert to a KIND=2 integer type'
  description: "Next: [`INT8` — Convert to 64-bit integer type](int8), Previous: [`INT` — Convert to integer type](int), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.150 INT2 — Convert to 16-bit integer type [¶](#INT2-----Convert-to-16-bit-integer-type)\n\nDescription:  \nConvert to a `KIND=2` integer type. This is equivalent to the standard `INT` intrinsic with an optional argument of `KIND=2`, and is only included for backwards compatibility.\n\nStandard:  \nGNU extension\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = INT2(A)`\n\nArguments:  \n|     |                                                   |\n|-----|---------------------------------------------------|\n| `A` | Shall be of type `INTEGER`, `REAL`, or `COMPLEX`. |\n\nReturn value:  \nThe return value is a `INTEGER(2)` variable.\n\nSee also:  \n[`INT` — Convert to integer type](int), [`INT8` — Convert to 64-bit integer type](int8)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/INT2.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/INT2.html)"
- name: 8.151. INT8
  id: int8
  summary: 'Description: Convert to a KIND=8 integer type'
  description: "Next: [`IOR` — Bitwise logical or](ior), Previous: [`INT2` — Convert to 16-bit integer type](int2), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.151 INT8 — Convert to 64-bit integer type [¶](#INT8-----Convert-to-64-bit-integer-type)\n\nDescription:  \nConvert to a `KIND=8` integer type. This is equivalent to the standard `INT` intrinsic with an optional argument of `KIND=8`, and is only included for backwards compatibility.\n\nStandard:  \nGNU extension\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = INT8(A)`\n\nArguments:  \n|     |                                                   |\n|-----|---------------------------------------------------|\n| `A` | Shall be of type `INTEGER`, `REAL`, or `COMPLEX`. |\n\nReturn value:  \nThe return value is a `INTEGER(8)` variable.\n\nSee also:  \n[`INT` — Convert to integer type](int), [`INT2` — Convert to 16-bit integer type](int2)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/INT8.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/INT8.html)"
- name: 8.152. IOR
  id: ior
  summary: 'Description: IOR returns the bitwise Boolean inclusive-OR of I and J'
  description: "Next: [`IPARITY` — Bitwise XOR of array elements](iparity), Previous: [`INT8` — Convert to 64-bit integer type](int8), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.152 IOR — Bitwise logical or [¶](#IOR-----Bitwise-logical-or)\n\nDescription:  \n`IOR` returns the bitwise Boolean inclusive-OR of `I` and `J`.\n\nStandard:  \nFortran 90 and later, with boz-literal-constant Fortran 2008 and later, has overloads that are GNU extensions\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = IOR(I, J)`\n\nArguments:  \n|     |                                                                                                                                                      |\n|-----|------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `I` | The type shall be `INTEGER` or a boz-literal-constant.                                                                                               |\n| `J` | The type shall be `INTEGER` with the same kind type parameter as `I` or a boz-literal-constant. `I` and `J` shall not both be boz-literal-constants. |\n\nReturn value:  \nThe return type is `INTEGER` with the kind type parameter of the arguments. A boz-literal-constant is converted to an `INTEGER` with the kind type parameter of the other argument as-if a call to [`INT` — Convert to integer type](int) occurred.\n\nSpecific names:  \n| Name      | Argument       | Return type  | Standard             |\n|-----------|----------------|--------------|----------------------|\n| `IOR(A)`  | `INTEGER A`    | `INTEGER`    | Fortran 90 and later |\n| `BIOR(A)` | `INTEGER(1) A` | `INTEGER(1)` | GNU extension        |\n| `IIOR(A)` | `INTEGER(2) A` | `INTEGER(2)` | GNU extension        |\n| `JIOR(A)` | `INTEGER(4) A` | `INTEGER(4)` | GNU extension        |\n| `KIOR(A)` | `INTEGER(8) A` | `INTEGER(8)` | GNU extension        |\n\nSee also:  \n[`IEOR` — Bitwise logical exclusive or](ieor), [`IAND` — Bitwise logical and](iand), [`IBITS` — Bit extraction](ibits), [`IBSET` — Set bit](ibset), [`IBCLR` — Clear bit](ibclr), [`NOT` — Logical negation](not)\n\nNext: [`IPARITY` — Bitwise XOR of array elements](iparity), Previous: [`INT8` — Convert to 64-bit integer type](int8), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IOR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IOR.html)"
- name: 8.153. IPARITY
  id: iparity
  summary: 'Description: Reduces with bitwise XOR (exclusive or) the elements of ARRAY along dimension DIM if the corresponding element in MASK is TRUE'
  description: "Next: [`IRAND` — Integer pseudo-random number](irand), Previous: [`IOR` — Bitwise logical or](ior), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.153 IPARITY — Bitwise XOR of array elements [¶](#IPARITY-----Bitwise-XOR-of-array-elements)\n\nDescription:  \nReduces with bitwise XOR (exclusive or) the elements of `ARRAY` along dimension `DIM` if the corresponding element in `MASK` is `TRUE`.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n|                                        |\n|----------------------------------------|\n| `RESULT = IPARITY(ARRAY[, MASK])`      |\n| `RESULT = IPARITY(ARRAY, DIM[, MASK])` |\n\nArguments:  \n|         |                                                                                                                           |\n|---------|---------------------------------------------------------------------------------------------------------------------------|\n| `ARRAY` | Shall be an array of type `INTEGER`                                                                                       |\n| `DIM`   | (Optional) shall be a scalar of type `INTEGER` with a value in the range from 1 to n, where n equals the rank of `ARRAY`. |\n| `MASK`  | (Optional) shall be of type `LOGICAL` and either be a scalar or an array of the same shape as `ARRAY`.                    |\n\nReturn value:  \nThe result is of the same type as `ARRAY`.\n\nIf `DIM` is absent, a scalar with the bitwise XOR of all elements in `ARRAY` is returned. Otherwise, an array of rank n-1, where n equals the rank of `ARRAY`, and a shape similar to that of `ARRAY` with dimension `DIM` dropped is returned.\n\nExample:  \n``` example-preformatted\nPROGRAM test_iparity\n  INTEGER(1) :: a(2)\n\n  a(1) = int(b'00100100', 1)\n  a(2) = int(b'01101010', 1)\n\n  ! prints 01001110\n  PRINT '(b8.8)', IPARITY(a)\nEND PROGRAM\n```\n\nSee also:  \n[`IANY` — Bitwise OR of array elements](iany), [`IALL` — Bitwise AND of array elements](iall), [`IEOR` — Bitwise logical exclusive or](ieor), [`PARITY` — Reduction with exclusive OR](parity)\n\nNext: [`IRAND` — Integer pseudo-random number](irand), Previous: [`IOR` — Bitwise logical or](ior), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IPARITY.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IPARITY.html)"
- name: 8.154. IRAND
  id: irand
  summary: 'Description: IRAND(FLAG) returns a pseudo-random number from a uniform distribution between 0 and a system-dependent limit (which is in most cases 2147483647)'
  description: "Next: [`IS_CONTIGUOUS` — Test whether an array is contiguous](is_005fcontiguous), Previous: [`IPARITY` — Bitwise XOR of array elements](iparity), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.154 IRAND — Integer pseudo-random number [¶](#IRAND-----Integer-pseudo-random-number)\n\nDescription:  \n`IRAND(FLAG)` returns a pseudo-random number from a uniform distribution between 0 and a system-dependent limit (which is in most cases 2147483647). If `FLAG` is 0, the next number in the current sequence is returned; if `FLAG` is 1, the generator is restarted by `CALL SRAND(0)`; if `FLAG` has any other value, it is used as a new seed with `SRAND`.\n\nThis intrinsic routine is provided for backwards compatibility with GNU Fortran 77. It implements a simple modulo generator as provided by `g77`. For new code, one should consider the use of [`RANDOM_NUMBER` — Pseudo-random number](random_005fnumber) as it implements a superior algorithm.\n\nStandard:  \nGNU extension\n\nClass:  \nFunction\n\nSyntax:  \n`RESULT = IRAND(I)`\n\nArguments:  \n|     |                                        |\n|-----|----------------------------------------|\n| `I` | Shall be a scalar `INTEGER` of kind 4. |\n\nReturn value:  \nThe return value is of `INTEGER(kind=4)` type.\n\nExample:  \n``` example-preformatted\nprogram test_irand\n  integer,parameter :: seed = 86456\n  \n  call srand(seed)\n  print *, irand(), irand(), irand(), irand()\n  print *, irand(seed), irand(), irand(), irand()\nend program test_irand\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IRAND.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IRAND.html)"
- name: 8.155. IS_CONTIGUOUS
  id: is_005fcontiguous
  summary: 'Description: IS_CONTIGUOUS tests whether an array is contiguous'
  description: "Next: [`IS_IOSTAT_END` — Test for end-of-file value](is_005fiostat_005fend), Previous: [`IRAND` — Integer pseudo-random number](irand), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.155 IS_CONTIGUOUS — Test whether an array is contiguous [¶](#IS_005fCONTIGUOUS-----Test-whether-an-array-is-contiguous)\n\nDescription:  \n`IS_CONTIGUOUS` tests whether an array is contiguous.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = IS_CONTIGUOUS(ARRAY)`\n\nArguments:  \n|         |                                |\n|---------|--------------------------------|\n| `ARRAY` | Shall be an array of any type. |\n\nReturn value:  \nReturns a `LOGICAL` of the default kind, which `.TRUE.` if `ARRAY` is contiguous and false otherwise.\n\nExample:  \n``` example-preformatted\nprogram test\n  integer :: a(10)\n  a = [1,2,3,4,5,6,7,8,9,10]\n  call sub (a)      ! every element, is contiguous\n  call sub (a(::2)) ! every other element, is noncontiguous\ncontains\n  subroutine sub (x)\n    integer :: x(:)\n    if (is_contiguous (x)) then\n      write (*,*) 'X is contiguous'\n    else\n      write (*,*) 'X is not contiguous'\n    end if\n  end subroutine sub\nend program test\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IS_005fCONTIGUOUS.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IS_005fCONTIGUOUS.html)"
- name: 8.156. IS_IOSTAT_END
  id: is_005fiostat_005fend
  summary: 'Description: IS_IOSTAT_END tests whether an variable has the value of the I/O status “end of file”. The function is equivalent to comparing the variable with the IOSTAT_END parameter of the intrinsic module ISO_FORTRAN_ENV'
  description: "Next: [`IS_IOSTAT_EOR` — Test for end-of-record value](is_005fiostat_005feor), Previous: [`IS_CONTIGUOUS` — Test whether an array is contiguous](is_005fcontiguous), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.156 IS_IOSTAT_END — Test for end-of-file value [¶](#IS_005fIOSTAT_005fEND-----Test-for-end-of-file-value)\n\nDescription:  \n`IS_IOSTAT_END` tests whether an variable has the value of the I/O status “end of file”. The function is equivalent to comparing the variable with the `IOSTAT_END` parameter of the intrinsic module `ISO_FORTRAN_ENV`.\n\nStandard:  \nFortran 2003 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = IS_IOSTAT_END(I)`\n\nArguments:  \n|     |                                 |\n|-----|---------------------------------|\n| `I` | Shall be of the type `INTEGER`. |\n\nReturn value:  \nReturns a `LOGICAL` of the default kind, which `.TRUE.` if `I` has the value which indicates an end of file condition for `IOSTAT=` specifiers, and is `.FALSE.` otherwise.\n\nExample:  \n``` example-preformatted\nPROGRAM iostat\n  IMPLICIT NONE\n  INTEGER :: stat, i\n  OPEN(88, FILE='test.dat')\n  READ(88, *, IOSTAT=stat) i\n  IF(IS_IOSTAT_END(stat)) STOP 'END OF FILE'\nEND PROGRAM\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IS_005fIOSTAT_005fEND.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IS_005fIOSTAT_005fEND.html)"
- name: 8.157. IS_IOSTAT_EOR
  id: is_005fiostat_005feor
  summary: 'Description: IS_IOSTAT_EOR tests whether an variable has the value of the I/O status “end of record”. The function is equivalent to comparing the variable with the IOSTAT_EOR parameter of the intrinsic module ISO_FORTRAN_ENV'
  description: "Next: [`ISATTY` — Whether a unit is a terminal device](isatty), Previous: [`IS_IOSTAT_END` — Test for end-of-file value](is_005fiostat_005fend), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.157 IS_IOSTAT_EOR — Test for end-of-record value [¶](#IS_005fIOSTAT_005fEOR-----Test-for-end-of-record-value)\n\nDescription:  \n`IS_IOSTAT_EOR` tests whether an variable has the value of the I/O status “end of record”. The function is equivalent to comparing the variable with the `IOSTAT_EOR` parameter of the intrinsic module `ISO_FORTRAN_ENV`.\n\nStandard:  \nFortran 2003 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = IS_IOSTAT_EOR(I)`\n\nArguments:  \n|     |                                 |\n|-----|---------------------------------|\n| `I` | Shall be of the type `INTEGER`. |\n\nReturn value:  \nReturns a `LOGICAL` of the default kind, which `.TRUE.` if `I` has the value which indicates an end of file condition for `IOSTAT=` specifiers, and is `.FALSE.` otherwise.\n\nExample:  \n``` example-preformatted\nPROGRAM iostat\n  IMPLICIT NONE\n  INTEGER :: stat, i(50)\n  OPEN(88, FILE='test.dat', FORM='UNFORMATTED')\n  READ(88, IOSTAT=stat) i\n  IF(IS_IOSTAT_EOR(stat)) STOP 'END OF RECORD'\nEND PROGRAM\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IS_005fIOSTAT_005fEOR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IS_005fIOSTAT_005fEOR.html)"
- name: 8.158. ISATTY
  id: isatty
  summary: 'Description: Determine whether a unit is connected to a terminal device'
  description: "Next: [`ISHFT` — Shift bits](ishft), Previous: [`IS_IOSTAT_EOR` — Test for end-of-record value](is_005fiostat_005feor), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.158 ISATTY — Whether a unit is a terminal device [¶](#ISATTY-----Whether-a-unit-is-a-terminal-device)\n\nDescription:  \nDetermine whether a unit is connected to a terminal device.\n\nStandard:  \nGNU extension\n\nClass:  \nFunction\n\nSyntax:  \n`RESULT = ISATTY(UNIT)`\n\nArguments:  \n|        |                              |\n|--------|------------------------------|\n| `UNIT` | Shall be a scalar `INTEGER`. |\n\nReturn value:  \nReturns `.TRUE.` if the `UNIT` is connected to a terminal device, `.FALSE.` otherwise.\n\nExample:  \n``` example-preformatted\nPROGRAM test_isatty\n  INTEGER(kind=1) :: unit\n  DO unit = 1, 10\n    write(*,*) isatty(unit=unit)\n  END DO\nEND PROGRAM\n```\n\nSee also:  \n[`TTYNAM` — Get the name of a terminal device](ttynam)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ISATTY.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ISATTY.html)"
- name: 8.159. ISHFT
  id: ishft
  summary: 'Description: ISHFT returns a value corresponding to I with all of the bits shifted SHIFT places'
  description: "Next: [`ISHFTC` — Shift bits circularly](ishftc), Previous: [`ISATTY` — Whether a unit is a terminal device](isatty), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.159 ISHFT — Shift bits [¶](#ISHFT-----Shift-bits)\n\nDescription:  \n`ISHFT` returns a value corresponding to `I` with all of the bits shifted `SHIFT` places. A value of `SHIFT` greater than zero corresponds to a left shift, a value of zero corresponds to no shift, and a value less than zero corresponds to a right shift. If the absolute value of `SHIFT` is greater than `BIT_SIZE(I)`, the value is undefined. Bits shifted out from the left end or right end are lost; zeros are shifted in from the opposite end.\n\nStandard:  \nFortran 90 and later, has overloads that are GNU extensions\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = ISHFT(I, SHIFT)`\n\nArguments:  \n|         |                              |\n|---------|------------------------------|\n| `I`     | The type shall be `INTEGER`. |\n| `SHIFT` | The type shall be `INTEGER`. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of the same kind as `I`.\n\nSpecific names:  \n| Name        | Argument       | Return type  | Standard             |\n|-------------|----------------|--------------|----------------------|\n| `ISHFT(A)`  | `INTEGER A`    | `INTEGER`    | Fortran 90 and later |\n| `BSHFT(A)`  | `INTEGER(1) A` | `INTEGER(1)` | GNU extension        |\n| `IISHFT(A)` | `INTEGER(2) A` | `INTEGER(2)` | GNU extension        |\n| `JISHFT(A)` | `INTEGER(4) A` | `INTEGER(4)` | GNU extension        |\n| `KISHFT(A)` | `INTEGER(8) A` | `INTEGER(8)` | GNU extension        |\n\nSee also:  \n[`ISHFTC` — Shift bits circularly](ishftc)\n\nNext: [`ISHFTC` — Shift bits circularly](ishftc), Previous: [`ISATTY` — Whether a unit is a terminal device](isatty), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ISHFT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ISHFT.html)"
- name: 8.160. ISHFTC
  id: ishftc
  summary: 'Description: ISHFTC returns a value corresponding to I with the rightmost SIZE bits shifted circularly SHIFT places; that is, bits shifted out one end are shifted into the opposite end'
  description: "Next: [`ISNAN` — Test for a NaN](isnan), Previous: [`ISHFT` — Shift bits](ishft), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.160 ISHFTC — Shift bits circularly [¶](#ISHFTC-----Shift-bits-circularly)\n\nDescription:  \n`ISHFTC` returns a value corresponding to `I` with the rightmost `SIZE` bits shifted circularly `SHIFT` places; that is, bits shifted out one end are shifted into the opposite end. A value of `SHIFT` greater than zero corresponds to a left shift, a value of zero corresponds to no shift, and a value less than zero corresponds to a right shift. The absolute value of `SHIFT` must be less than `SIZE`. If the `SIZE` argument is omitted, it is taken to be equivalent to `BIT_SIZE(I)`.\n\nStandard:  \nFortran 90 and later, has overloads that are GNU extensions\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = ISHFTC(I, SHIFT [, SIZE])`\n\nArguments:  \n|         |                                                                                                                      |\n|---------|----------------------------------------------------------------------------------------------------------------------|\n| `I`     | The type shall be `INTEGER`.                                                                                         |\n| `SHIFT` | The type shall be `INTEGER`.                                                                                         |\n| `SIZE`  | (Optional) The type shall be `INTEGER`; the value must be greater than zero and less than or equal to `BIT_SIZE(I)`. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of the same kind as `I`.\n\nSpecific names:  \n| Name         | Argument       | Return type  | Standard             |\n|--------------|----------------|--------------|----------------------|\n| `ISHFTC(A)`  | `INTEGER A`    | `INTEGER`    | Fortran 90 and later |\n| `BSHFTC(A)`  | `INTEGER(1) A` | `INTEGER(1)` | GNU extension        |\n| `IISHFTC(A)` | `INTEGER(2) A` | `INTEGER(2)` | GNU extension        |\n| `JISHFTC(A)` | `INTEGER(4) A` | `INTEGER(4)` | GNU extension        |\n| `KISHFTC(A)` | `INTEGER(8) A` | `INTEGER(8)` | GNU extension        |\n\nSee also:  \n[`ISHFT` — Shift bits](ishft)\n\nNext: [`ISNAN` — Test for a NaN](isnan), Previous: [`ISHFT` — Shift bits](ishft), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ISHFTC.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ISHFTC.html)"
- name: 8.161. ISNAN
  id: isnan
  summary: 'Description: ISNAN tests whether a floating-point value is an IEEE Not-a-Number (NaN)'
  description: "Next: [`ITIME` — Get current local time subroutine (hour/minutes/seconds)](itime), Previous: [`ISHFTC` — Shift bits circularly](ishftc), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.161 ISNAN — Test for a NaN [¶](#ISNAN-----Test-for-a-NaN)\n\nDescription:  \n`ISNAN` tests whether a floating-point value is an IEEE Not-a-Number (NaN).\n\nStandard:  \nGNU extension\n\nClass:  \nElemental function\n\nSyntax:  \n`ISNAN(X)`\n\nArguments:  \n|     |                              |\n|-----|------------------------------|\n| `X` | Variable of the type `REAL`. |\n\nReturn value:  \nReturns a default-kind `LOGICAL`. The returned value is `TRUE` if `X` is a NaN and `FALSE` otherwise.\n\nExample:  \n``` example-preformatted\nprogram test_nan\n  implicit none\n  real :: x\n  x = -1.0\n  x = sqrt(x)\n  if (isnan(x)) stop '\"x\" is a NaN'\nend program test_nan\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ISNAN.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ISNAN.html)"
- name: 8.162. ITIME
  id: itime
  summary: 'Description: ITIME(VALUES) Fills VALUES with the numerical values at the current local time'
  description: "Next: [`KILL` — Send a signal to a process](kill), Previous: [`ISNAN` — Test for a NaN](isnan), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.162 ITIME — Get current local time subroutine (hour/minutes/seconds) [¶](#ITIME-----Get-current-local-time-subroutine-_0028hour_002fminutes_002fseconds_0029)\n\nDescription:  \n`ITIME(VALUES)` Fills `VALUES` with the numerical values at the current local time. The hour (in the range 1-24), minute (in the range 1-60), and seconds (in the range 1-60) appear in elements 1, 2, and 3 of `VALUES`, respectively.\n\nThis intrinsic routine is provided for backwards compatibility with GNU Fortran 77. In new code, programmers should consider the use of the [`DATE_AND_TIME` — Date and time subroutine](date_005fand_005ftime) intrinsic defined by the Fortran 95 standard.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL ITIME(VALUES)`\n\nArguments:  \n|          |                                                                                           |\n|----------|-------------------------------------------------------------------------------------------|\n| `VALUES` | The type shall be `INTEGER, DIMENSION(3)` and the kind shall be the default integer kind. |\n\nReturn value:  \nDoes not return anything.\n\nExample:  \n``` example-preformatted\nprogram test_itime\n  integer, dimension(3) :: tarray\n  call itime(tarray)\n  print *, tarray(1)\n  print *, tarray(2)\n  print *, tarray(3)\nend program test_itime\n```\n\nSee also:  \n[`DATE_AND_TIME` — Date and time subroutine](date_005fand_005ftime)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ITIME.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ITIME.html)"
- name: 8.163. KILL
  id: kill
  summary: 'Description: Sends the signal specified by SIG to the process PID'
  description: "Next: [`KIND` — Kind of an entity](kind), Previous: [`ITIME` — Get current local time subroutine (hour/minutes/seconds)](itime), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.163 KILL — Send a signal to a process [¶](#KILL-----Send-a-signal-to-a-process)\n\nDescription:  \nSends the signal specified by `SIG` to the process `PID`. See `kill(2)`.\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\nStandard:  \nGNU extension\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                                  |\n|----------------------------------|\n| `CALL KILL(PID, SIG [, STATUS])` |\n| `STATUS = KILL(PID, SIG)`        |\n\nArguments:  \n|          |                                                                                                                                  |\n|----------|----------------------------------------------------------------------------------------------------------------------------------|\n| `PID`    | Shall be a scalar `INTEGER` with `INTENT(IN)`.                                                                                   |\n| `SIG`    | Shall be a scalar `INTEGER` with `INTENT(IN)`.                                                                                   |\n| `STATUS` | \\[Subroutine\\](Optional) Shall be a scalar `INTEGER`. Returns 0 on success; otherwise a system-specific error code is returned.  |\n| `STATUS` | \\[Function\\] The kind type parameter is that of `pid`. Returns 0 on success; otherwise a system-specific error code is returned. |\n\nSee also:  \n[`ABORT` — Abort the program](abort), [`EXIT` — Exit the program with status.](exit)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/KILL.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/KILL.html)"
- name: 8.164. KIND
  id: kind
  summary: 'Description: KIND(X) returns the kind value of the entity X'
  description: "Next: [`LBOUND` — Lower dimension bounds of an array](lbound), Previous: [`KILL` — Send a signal to a process](kill), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.164 KIND — Kind of an entity [¶](#KIND-----Kind-of-an-entity)\n\nDescription:  \n`KIND(X)` returns the kind value of the entity `X`.\n\nStandard:  \nFortran 95 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`K = KIND(X)`\n\nArguments:  \n|     |                                                                                                            |\n|-----|------------------------------------------------------------------------------------------------------------|\n| `X` | Shall be of type `LOGICAL`, `INTEGER`, `REAL`, `COMPLEX` or `CHARACTER`. It may be scalar or array valued. |\n\nReturn value:  \nThe return value is a scalar of type `INTEGER` and of the default integer kind.\n\nExample:  \n``` example-preformatted\nprogram test_kind\n  integer,parameter :: kc = kind(' ')\n  integer,parameter :: kl = kind(.true.)\n\n  print *, \"The default character kind is \", kc\n  print *, \"The default logical kind is \", kl\nend program test_kind\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/KIND.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/KIND.html)"
- name: 8.165. LBOUND
  id: lbound
  summary: 'Description: Returns the lower bounds of an array, or a single lower bound along the DIM dimension'
  description: "Next: [`LCOBOUND` — Lower codimension bounds of an array](lcobound), Previous: [`KIND` — Kind of an entity](kind), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.165 LBOUND — Lower dimension bounds of an array [¶](#LBOUND-----Lower-dimension-bounds-of-an-array)\n\nDescription:  \nReturns the lower bounds of an array, or a single lower bound along the `DIM` dimension.\n\nStandard:  \nFortran 90 and later, with `KIND` argument Fortran 2003 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = LBOUND(ARRAY [, DIM [, KIND]])`\n\nArguments:  \n|         |                                                                                                |\n|---------|------------------------------------------------------------------------------------------------|\n| `ARRAY` | Shall be an array, of any type.                                                                |\n| `DIM`   | (Optional) Shall be a scalar `INTEGER`.                                                        |\n| `KIND`  | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of kind `KIND`. If `KIND` is absent, the return value is of default integer kind. If `DIM` is absent, the result is an array of the lower bounds of `ARRAY`. If `DIM` is present, the result is a scalar corresponding to the lower bound of the array along that dimension. If `ARRAY` is an expression rather than a whole array or array structure component, or if it has a zero extent along the relevant dimension, the lower bound is taken to be 1.\n\nSee also:  \n[`UBOUND` — Upper dimension bounds of an array](ubound), [`LCOBOUND` — Lower codimension bounds of an array](lcobound)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LBOUND.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LBOUND.html)"
- name: 8.166. LCOBOUND
  id: lcobound
  summary: 'Description: Returns the lower bounds of a coarray, or a single lower cobound along the DIM codimension'
  description: "Next: [`LEADZ` — Number of leading zero bits of an integer](leadz), Previous: [`LBOUND` — Lower dimension bounds of an array](lbound), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.166 LCOBOUND — Lower codimension bounds of an array [¶](#LCOBOUND-----Lower-codimension-bounds-of-an-array)\n\nDescription:  \nReturns the lower bounds of a coarray, or a single lower cobound along the `DIM` codimension.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = LCOBOUND(COARRAY [, DIM [, KIND]])`\n\nArguments:  \n|         |                                                                                                |\n|---------|------------------------------------------------------------------------------------------------|\n| `ARRAY` | Shall be an coarray, of any type.                                                              |\n| `DIM`   | (Optional) Shall be a scalar `INTEGER`.                                                        |\n| `KIND`  | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of kind `KIND`. If `KIND` is absent, the return value is of default integer kind. If `DIM` is absent, the result is an array of the lower cobounds of `COARRAY`. If `DIM` is present, the result is a scalar corresponding to the lower cobound of the array along that codimension.\n\nSee also:  \n[`UCOBOUND` — Upper codimension bounds of an array](ucobound), [`LBOUND` — Lower dimension bounds of an array](lbound)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LCOBOUND.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LCOBOUND.html)"
- name: 8.167. LEADZ
  id: leadz
  summary: 'Description: LEADZ returns the number of leading zero bits of an integer'
  description: "Next: [`LEN` — Length of a character entity](len), Previous: [`LCOBOUND` — Lower codimension bounds of an array](lcobound), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.167 LEADZ — Number of leading zero bits of an integer [¶](#LEADZ-----Number-of-leading-zero-bits-of-an-integer)\n\nDescription:  \n`LEADZ` returns the number of leading zero bits of an integer.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = LEADZ(I)`\n\nArguments:  \n|     |                             |\n|-----|-----------------------------|\n| `I` | Shall be of type `INTEGER`. |\n\nReturn value:  \nThe type of the return value is the default `INTEGER`. If all the bits of `I` are zero, the result value is `BIT_SIZE(I)`.\n\nExample:  \n``` example-preformatted\nPROGRAM test_leadz\n  WRITE (*,*) BIT_SIZE(1)  ! prints 32\n  WRITE (*,*) LEADZ(1)     ! prints 31\nEND PROGRAM\n```\n\nSee also:  \n[`BIT_SIZE` — Bit size inquiry function](bit_005fsize), [`TRAILZ` — Number of trailing zero bits of an integer](trailz), [`POPCNT` — Number of bits set](popcnt), [`POPPAR` — Parity of the number of bits set](poppar)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LEADZ.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LEADZ.html)"
- name: 8.168. LEN
  id: len
  summary: 'Description: Returns the length of a character string'
  description: "Next: [`LEN_TRIM` — Length of a character entity without trailing blank characters](len_005ftrim), Previous: [`LEADZ` — Number of leading zero bits of an integer](leadz), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.168 LEN — Length of a character entity [¶](#LEN-----Length-of-a-character-entity)\n\nDescription:  \nReturns the length of a character string. If `STRING` is an array, the length of an element of `STRING` is returned. Note that `STRING` need not be defined when this intrinsic is invoked, since only the length, not the content, of `STRING` is needed.\n\nStandard:  \nFortran 77 and later, with `KIND` argument Fortran 2003 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`L = LEN(STRING [, KIND])`\n\nArguments:  \n|          |                                                                                                |\n|----------|------------------------------------------------------------------------------------------------|\n| `STRING` | Shall be a scalar or array of type `CHARACTER`, with `INTENT(IN)`                              |\n| `KIND`   | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of kind `KIND`. If `KIND` is absent, the return value is of default integer kind.\n\nSpecific names:  \n| Name          | Argument    | Return type | Standard             |\n|---------------|-------------|-------------|----------------------|\n| `LEN(STRING)` | `CHARACTER` | `INTEGER`   | Fortran 77 and later |\n\nSee also:  \n[`LEN_TRIM` — Length of a character entity without trailing blank characters](len_005ftrim), [`ADJUSTL` — Left adjust a string](adjustl), [`ADJUSTR` — Right adjust a string](adjustr)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LEN.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LEN.html)"
- name: 8.169. LEN_TRIM
  id: len_005ftrim
  summary: 'Description: Returns the length of a character string, ignoring any trailing blanks'
  description: "Next: [`LGE` — Lexical greater than or equal](lge), Previous: [`LEN` — Length of a character entity](len), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.169 LEN_TRIM — Length of a character entity without trailing blank characters [¶](#LEN_005fTRIM-----Length-of-a-character-entity-without-trailing-blank-characters)\n\nDescription:  \nReturns the length of a character string, ignoring any trailing blanks.\n\nStandard:  \nFortran 90 and later, with `KIND` argument Fortran 2003 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = LEN_TRIM(STRING [, KIND])`\n\nArguments:  \n|          |                                                                                                |\n|----------|------------------------------------------------------------------------------------------------|\n| `STRING` | Shall be a scalar of type `CHARACTER`, with `INTENT(IN)`                                       |\n| `KIND`   | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of kind `KIND`. If `KIND` is absent, the return value is of default integer kind.\n\nSee also:  \n[`LEN` — Length of a character entity](len), [`ADJUSTL` — Left adjust a string](adjustl), [`ADJUSTR` — Right adjust a string](adjustr)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LEN_005fTRIM.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LEN_005fTRIM.html)"
- name: 8.170. LGE
  id: lge
  summary: 'Description: Determines whether one string is lexically greater than or equal to another string, where the two strings are interpreted as containing ASCII character codes'
  description: "Next: [`LGT` — Lexical greater than](lgt), Previous: [`LEN_TRIM` — Length of a character entity without trailing blank characters](len_005ftrim), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.170 LGE — Lexical greater than or equal [¶](#LGE-----Lexical-greater-than-or-equal)\n\nDescription:  \nDetermines whether one string is lexically greater than or equal to another string, where the two strings are interpreted as containing ASCII character codes. If the String A and String B are not the same length, the shorter is compared as if spaces were appended to it to form a value that has the same length as the longer.\n\nIn general, the lexical comparison intrinsics `LGE`, `LGT`, `LLE`, and `LLT` differ from the corresponding intrinsic operators `.GE.`, `.GT.`, `.LE.`, and `.LT.`, in that the latter use the processor’s character ordering (which is not ASCII on some targets), whereas the former always use the ASCII ordering.\n\nStandard:  \nFortran 77 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = LGE(STRING_A, STRING_B)`\n\nArguments:  \n|            |                                       |\n|------------|---------------------------------------|\n| `STRING_A` | Shall be of default `CHARACTER` type. |\n| `STRING_B` | Shall be of default `CHARACTER` type. |\n\nReturn value:  \nReturns `.TRUE.` if `STRING_A >= STRING_B`, and `.FALSE.` otherwise, based on the ASCII ordering.\n\nSpecific names:  \n| Name                     | Argument    | Return type | Standard             |\n|--------------------------|-------------|-------------|----------------------|\n| `LGE(STRING_A,STRING_B)` | `CHARACTER` | `LOGICAL`   | Fortran 77 and later |\n\nSee also:  \n[`LGT` — Lexical greater than](lgt), [`LLE` — Lexical less than or equal](lle), [`LLT` — Lexical less than](llt)\n\nNext: [`LGT` — Lexical greater than](lgt), Previous: [`LEN_TRIM` — Length of a character entity without trailing blank characters](len_005ftrim), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LGE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LGE.html)"
- name: 8.171. LGT
  id: lgt
  summary: 'Description: Determines whether one string is lexically greater than another string, where the two strings are interpreted as containing ASCII character codes'
  description: "Next: [`LINK` — Create a hard link](link), Previous: [`LGE` — Lexical greater than or equal](lge), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.171 LGT — Lexical greater than [¶](#LGT-----Lexical-greater-than)\n\nDescription:  \nDetermines whether one string is lexically greater than another string, where the two strings are interpreted as containing ASCII character codes. If the String A and String B are not the same length, the shorter is compared as if spaces were appended to it to form a value that has the same length as the longer.\n\nIn general, the lexical comparison intrinsics `LGE`, `LGT`, `LLE`, and `LLT` differ from the corresponding intrinsic operators `.GE.`, `.GT.`, `.LE.`, and `.LT.`, in that the latter use the processor’s character ordering (which is not ASCII on some targets), whereas the former always use the ASCII ordering.\n\nStandard:  \nFortran 77 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = LGT(STRING_A, STRING_B)`\n\nArguments:  \n|            |                                       |\n|------------|---------------------------------------|\n| `STRING_A` | Shall be of default `CHARACTER` type. |\n| `STRING_B` | Shall be of default `CHARACTER` type. |\n\nReturn value:  \nReturns `.TRUE.` if `STRING_A > STRING_B`, and `.FALSE.` otherwise, based on the ASCII ordering.\n\nSpecific names:  \n| Name                     | Argument    | Return type | Standard             |\n|--------------------------|-------------|-------------|----------------------|\n| `LGT(STRING_A,STRING_B)` | `CHARACTER` | `LOGICAL`   | Fortran 77 and later |\n\nSee also:  \n[`LGE` — Lexical greater than or equal](lge), [`LLE` — Lexical less than or equal](lle), [`LLT` — Lexical less than](llt)\n\nNext: [`LINK` — Create a hard link](link), Previous: [`LGE` — Lexical greater than or equal](lge), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LGT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LGT.html)"
- name: 8.172. LINK
  id: link
  summary: 'Description: Makes a (hard) link from file PATH1 to PATH2'
  description: "Next: [`LLE` — Lexical less than or equal](lle), Previous: [`LGT` — Lexical greater than](lgt), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.172 LINK — Create a hard link [¶](#LINK-----Create-a-hard-link)\n\nDescription:  \nMakes a (hard) link from file `PATH1` to `PATH2`. A null character (`CHAR(0)`) can be used to mark the end of the names in `PATH1` and `PATH2`; otherwise, trailing blanks in the file names are ignored. If the `STATUS` argument is supplied, it contains 0 on success or a nonzero error code upon return; see `link(2)`.\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                                      |\n|--------------------------------------|\n| `CALL LINK(PATH1, PATH2 [, STATUS])` |\n| `STATUS = LINK(PATH1, PATH2)`        |\n\nArguments:  \n|          |                                                |\n|----------|------------------------------------------------|\n| `PATH1`  | Shall be of default `CHARACTER` type.          |\n| `PATH2`  | Shall be of default `CHARACTER` type.          |\n| `STATUS` | (Optional) Shall be of default `INTEGER` type. |\n\nSee also:  \n[`SYMLNK` — Create a symbolic link](symlnk), [`UNLINK` — Remove a file from the file system](unlink)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LINK.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LINK.html)"
- name: 8.173. LLE
  id: lle
  summary: 'Description: Determines whether one string is lexically less than or equal to another string, where the two strings are interpreted as containing ASCII character codes'
  description: "Next: [`LLT` — Lexical less than](llt), Previous: [`LINK` — Create a hard link](link), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.173 LLE — Lexical less than or equal [¶](#LLE-----Lexical-less-than-or-equal)\n\nDescription:  \nDetermines whether one string is lexically less than or equal to another string, where the two strings are interpreted as containing ASCII character codes. If the String A and String B are not the same length, the shorter is compared as if spaces were appended to it to form a value that has the same length as the longer.\n\nIn general, the lexical comparison intrinsics `LGE`, `LGT`, `LLE`, and `LLT` differ from the corresponding intrinsic operators `.GE.`, `.GT.`, `.LE.`, and `.LT.`, in that the latter use the processor’s character ordering (which is not ASCII on some targets), whereas the former always use the ASCII ordering.\n\nStandard:  \nFortran 77 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = LLE(STRING_A, STRING_B)`\n\nArguments:  \n|            |                                       |\n|------------|---------------------------------------|\n| `STRING_A` | Shall be of default `CHARACTER` type. |\n| `STRING_B` | Shall be of default `CHARACTER` type. |\n\nReturn value:  \nReturns `.TRUE.` if `STRING_A <= STRING_B`, and `.FALSE.` otherwise, based on the ASCII ordering.\n\nSpecific names:  \n| Name                     | Argument    | Return type | Standard             |\n|--------------------------|-------------|-------------|----------------------|\n| `LLE(STRING_A,STRING_B)` | `CHARACTER` | `LOGICAL`   | Fortran 77 and later |\n\nSee also:  \n[`LGE` — Lexical greater than or equal](lge), [`LGT` — Lexical greater than](lgt), [`LLT` — Lexical less than](llt)\n\nNext: [`LLT` — Lexical less than](llt), Previous: [`LINK` — Create a hard link](link), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LLE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LLE.html)"
- name: 8.174. LLT
  id: llt
  summary: 'Description: Determines whether one string is lexically less than another string, where the two strings are interpreted as containing ASCII character codes'
  description: "Next: [`LNBLNK` — Index of the last non-blank character in a string](lnblnk), Previous: [`LLE` — Lexical less than or equal](lle), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.174 LLT — Lexical less than [¶](#LLT-----Lexical-less-than)\n\nDescription:  \nDetermines whether one string is lexically less than another string, where the two strings are interpreted as containing ASCII character codes. If the String A and String B are not the same length, the shorter is compared as if spaces were appended to it to form a value that has the same length as the longer.\n\nIn general, the lexical comparison intrinsics `LGE`, `LGT`, `LLE`, and `LLT` differ from the corresponding intrinsic operators `.GE.`, `.GT.`, `.LE.`, and `.LT.`, in that the latter use the processor’s character ordering (which is not ASCII on some targets), whereas the former always use the ASCII ordering.\n\nStandard:  \nFortran 77 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = LLT(STRING_A, STRING_B)`\n\nArguments:  \n|            |                                       |\n|------------|---------------------------------------|\n| `STRING_A` | Shall be of default `CHARACTER` type. |\n| `STRING_B` | Shall be of default `CHARACTER` type. |\n\nReturn value:  \nReturns `.TRUE.` if `STRING_A < STRING_B`, and `.FALSE.` otherwise, based on the ASCII ordering.\n\nSpecific names:  \n| Name                     | Argument    | Return type | Standard             |\n|--------------------------|-------------|-------------|----------------------|\n| `LLT(STRING_A,STRING_B)` | `CHARACTER` | `LOGICAL`   | Fortran 77 and later |\n\nSee also:  \n[`LGE` — Lexical greater than or equal](lge), [`LGT` — Lexical greater than](lgt), [`LLE` — Lexical less than or equal](lle)\n\nNext: [`LNBLNK` — Index of the last non-blank character in a string](lnblnk), Previous: [`LLE` — Lexical less than or equal](lle), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LLT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LLT.html)"
- name: 8.175. LNBLNK
  id: lnblnk
  summary: 'Description: Returns the length of a character string, ignoring any trailing blanks'
  description: "Next: [`LOC` — Returns the address of a variable](loc), Previous: [`LLT` — Lexical less than](llt), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.175 LNBLNK — Index of the last non-blank character in a string [¶](#LNBLNK-----Index-of-the-last-non-blank-character-in-a-string)\n\nDescription:  \nReturns the length of a character string, ignoring any trailing blanks. This is identical to the standard `LEN_TRIM` intrinsic, and is only included for backwards compatibility.\n\nStandard:  \nGNU extension\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = LNBLNK(STRING)`\n\nArguments:  \n|          |                                                          |\n|----------|----------------------------------------------------------|\n| `STRING` | Shall be a scalar of type `CHARACTER`, with `INTENT(IN)` |\n\nReturn value:  \nThe return value is of `INTEGER(kind=4)` type.\n\nSee also:  \n[`INDEX` — Position of a substring within a string](index-intrinsic), [`LEN_TRIM` — Length of a character entity without trailing blank characters](len_005ftrim)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LNBLNK.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LNBLNK.html)"
- name: 8.176. LOC
  id: loc
  summary: 'Description: LOC(X) returns the address of X as an integer'
  description: "Next: [`LOG` — Natural logarithm function](log), Previous: [`LNBLNK` — Index of the last non-blank character in a string](lnblnk), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.176 LOC — Returns the address of a variable [¶](#LOC-----Returns-the-address-of-a-variable)\n\nDescription:  \n`LOC(X)` returns the address of `X` as an integer.\n\nStandard:  \nGNU extension\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = LOC(X)`\n\nArguments:  \n|     |                       |\n|-----|-----------------------|\n| `X` | Variable of any type. |\n\nReturn value:  \nThe return value is of type `INTEGER`, with a `KIND` corresponding to the size (in bytes) of a memory address on the target machine.\n\nExample:  \n``` example-preformatted\nprogram test_loc\n  integer :: i\n  real :: r\n  i = loc(r)\n  print *, i\nend program test_loc\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LOC.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LOC.html)"
- name: 8.177. LOG
  id: log
  summary: 'Description: LOG(X) computes the natural logarithm of X, i.e'
  description: "Next: [`LOG10` — Base 10 logarithm function](log10), Previous: [`LOC` — Returns the address of a variable](loc), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.177 LOG — Natural logarithm function [¶](#LOG-----Natural-logarithm-function)\n\nDescription:  \n`LOG(X)` computes the natural logarithm of `X`, i.e. the logarithm to the base *e*.\n\nStandard:  \nFortran 77 and later, has GNU extensions\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = LOG(X)`\n\nArguments:  \n|     |                                        |\n|-----|----------------------------------------|\n| `X` | The type shall be `REAL` or `COMPLEX`. |\n\nReturn value:  \nThe return value is of type `REAL` or `COMPLEX`. The kind type parameter is the same as `X`. If `X` is `COMPLEX`, the imaginary part *\\omega* is in the range *-\\pi \\< \\omega \\leq \\pi*.\n\nExample:  \n``` example-preformatted\nprogram test_log\n  real(8) :: x = 2.7182818284590451_8\n  complex :: z = (1.0, 2.0)\n  x = log(x)    ! will yield (approximately) 1\n  z = log(z)\nend program test_log\n```\n\nSpecific names:  \n| Name       | Argument       | Return type  | Standard            |\n|------------|----------------|--------------|---------------------|\n| `ALOG(X)`  | `REAL(4) X`    | `REAL(4)`    | Fortran 77 or later |\n| `DLOG(X)`  | `REAL(8) X`    | `REAL(8)`    | Fortran 77 or later |\n| `CLOG(X)`  | `COMPLEX(4) X` | `COMPLEX(4)` | Fortran 77 or later |\n| `ZLOG(X)`  | `COMPLEX(8) X` | `COMPLEX(8)` | GNU extension       |\n| `CDLOG(X)` | `COMPLEX(8) X` | `COMPLEX(8)` | GNU extension       |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LOG.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LOG.html)"
- name: 8.178. LOG10
  id: log10
  summary: 'Description: LOG10(X) computes the base 10 logarithm of X'
  description: "Next: [`LOG_GAMMA` — Logarithm of the Gamma function](log_005fgamma), Previous: [`LOG` — Natural logarithm function](log), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.178 LOG10 — Base 10 logarithm function [¶](#LOG10-----Base-10-logarithm-function)\n\nDescription:  \n`LOG10(X)` computes the base 10 logarithm of `X`.\n\nStandard:  \nFortran 77 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = LOG10(X)`\n\nArguments:  \n|     |                           |\n|-----|---------------------------|\n| `X` | The type shall be `REAL`. |\n\nReturn value:  \nThe return value is of type `REAL` or `COMPLEX`. The kind type parameter is the same as `X`.\n\nExample:  \n``` example-preformatted\nprogram test_log10\n  real(8) :: x = 10.0_8\n  x = log10(x)\nend program test_log10\n```\n\nSpecific names:  \n| Name        | Argument    | Return type | Standard             |\n|-------------|-------------|-------------|----------------------|\n| `ALOG10(X)` | `REAL(4) X` | `REAL(4)`   | Fortran 77 and later |\n| `DLOG10(X)` | `REAL(8) X` | `REAL(8)`   | Fortran 77 and later |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LOG10.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LOG10.html)"
- name: 8.179. LOG_GAMMA
  id: log_005fgamma
  summary: 'Description: LOG_GAMMA(X) computes the natural logarithm of the absolute value of the Gamma (\Gamma) function'
  description: "Next: [`LOGICAL` — Convert to logical type](logical), Previous: [`LOG10` — Base 10 logarithm function](log10), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.179 LOG_GAMMA — Logarithm of the Gamma function [¶](#LOG_005fGAMMA-----Logarithm-of-the-Gamma-function)\n\nDescription:  \n`LOG_GAMMA(X)` computes the natural logarithm of the absolute value of the Gamma (*\\Gamma*) function.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`X = LOG_GAMMA(X)`\n\nArguments:  \n|     |                                                                  |\n|-----|------------------------------------------------------------------|\n| `X` | Shall be of type `REAL` and neither zero nor a negative integer. |\n\nReturn value:  \nThe return value is of type `REAL` of the same kind as `X`.\n\nExample:  \n``` example-preformatted\nprogram test_log_gamma\n  real :: x = 1.0\n  x = lgamma(x) ! returns 0.0\nend program test_log_gamma\n```\n\nSpecific names:  \n| Name        | Argument    | Return type | Standard      |\n|-------------|-------------|-------------|---------------|\n| `LGAMMA(X)` | `REAL(4) X` | `REAL(4)`   | GNU extension |\n| `ALGAMA(X)` | `REAL(4) X` | `REAL(4)`   | GNU extension |\n| `DLGAMA(X)` | `REAL(8) X` | `REAL(8)`   | GNU extension |\n\nSee also:  \nGamma function: [`GAMMA` — Gamma function](gamma)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LOG_005fGAMMA.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LOG_005fGAMMA.html)"
- name: 8.180. LOGICAL
  id: logical
  summary: 'Description: Converts one kind of LOGICAL variable to another'
  description: "Next: [`LSHIFT` — Left shift bits](lshift), Previous: [`LOG_GAMMA` — Logarithm of the Gamma function](log_005fgamma), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.180 LOGICAL — Convert to logical type [¶](#LOGICAL-----Convert-to-logical-type)\n\nDescription:  \nConverts one kind of `LOGICAL` variable to another.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = LOGICAL(L [, KIND])`\n\nArguments:  \n|        |                                                                                                |\n|--------|------------------------------------------------------------------------------------------------|\n| `L`    | The type shall be `LOGICAL`.                                                                   |\n| `KIND` | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result. |\n\nReturn value:  \nThe return value is a `LOGICAL` value equal to `L`, with a kind corresponding to `KIND`, or of the default logical kind if `KIND` is not given.\n\nSee also:  \n[`INT` — Convert to integer type](int), [`REAL` — Convert to real type](real), [`CMPLX` — Complex conversion function](cmplx)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LOGICAL.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LOGICAL.html)"
- name: 8.181. LSHIFT
  id: lshift
  summary: 'Description: LSHIFT returns a value corresponding to I with all of the bits shifted left by SHIFT places'
  description: "Next: [`LSTAT` — Get file status](lstat), Previous: [`LOGICAL` — Convert to logical type](logical), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.181 LSHIFT — Left shift bits [¶](#LSHIFT-----Left-shift-bits)\n\nDescription:  \n`LSHIFT` returns a value corresponding to `I` with all of the bits shifted left by `SHIFT` places. `SHIFT` shall be nonnegative and less than or equal to `BIT_SIZE(I)`, otherwise the result value is undefined. Bits shifted out from the left end are lost; zeros are shifted in from the opposite end.\n\nThis function has been superseded by the `ISHFT` intrinsic, which is standard in Fortran 95 and later, and the `SHIFTL` intrinsic, which is standard in Fortran 2008 and later.\n\nStandard:  \nGNU extension\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = LSHIFT(I, SHIFT)`\n\nArguments:  \n|         |                              |\n|---------|------------------------------|\n| `I`     | The type shall be `INTEGER`. |\n| `SHIFT` | The type shall be `INTEGER`. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of the same kind as `I`.\n\nSee also:  \n[`ISHFT` — Shift bits](ishft), [`ISHFTC` — Shift bits circularly](ishftc), [`RSHIFT` — Right shift bits](rshift), [`SHIFTA` — Right shift with fill](shifta), [`SHIFTL` — Left shift](shiftl), [`SHIFTR` — Right shift](shiftr)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LSHIFT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LSHIFT.html)"
- name: 8.182. LSTAT
  id: lstat
  summary: 'Description: LSTAT is identical to STAT — Get file status, except that if path is a symbolic link, then the link itself is statted, not the file that it refers to'
  description: "Next: [`LTIME` — Convert time to local time info](ltime), Previous: [`LSHIFT` — Left shift bits](lshift), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.182 LSTAT — Get file status [¶](#LSTAT-----Get-file-status)\n\nDescription:  \n`LSTAT` is identical to [`STAT` — Get file status](stat), except that if path is a symbolic link, then the link itself is statted, not the file that it refers to.\n\nThe elements in `VALUES` are the same as described by [`STAT` — Get file status](stat).\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                                       |\n|---------------------------------------|\n| `CALL LSTAT(NAME, VALUES [, STATUS])` |\n| `STATUS = LSTAT(NAME, VALUES)`        |\n\nArguments:  \n|          |                                                                                                               |\n|----------|---------------------------------------------------------------------------------------------------------------|\n| `NAME`   | The type shall be `CHARACTER` of the default kind, a valid path within the file system.                       |\n| `VALUES` | The type shall be `INTEGER(4), DIMENSION(13)`.                                                                |\n| `STATUS` | (Optional) status flag of type `INTEGER(4)`. Returns 0 on success and a system specific error code otherwise. |\n\nExample:  \nSee [`STAT` — Get file status](stat) for an example.\n\nSee also:  \nTo stat an open file: [`FSTAT` — Get file status](fstat) To stat a file: [`STAT` — Get file status](stat)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LSTAT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LSTAT.html)"
- name: 8.183. LTIME
  id: ltime
  summary: 'Description: Given a system time value TIME (as provided by the TIME — Time function intrinsic), fills VALUES with values extracted from it appropriate to the local time zone using localtime(3)'
  description: "Next: [`MALLOC` — Allocate dynamic memory](malloc), Previous: [`LSTAT` — Get file status](lstat), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.183 LTIME — Convert time to local time info [¶](#LTIME-----Convert-time-to-local-time-info)\n\nDescription:  \nGiven a system time value `TIME` (as provided by the [`TIME` — Time function](time) intrinsic), fills `VALUES` with values extracted from it appropriate to the local time zone using `localtime(3)`.\n\nThis intrinsic routine is provided for backwards compatibility with GNU Fortran 77. In new code, programmers should consider the use of the [`DATE_AND_TIME` — Date and time subroutine](date_005fand_005ftime) intrinsic defined by the Fortran 95 standard.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL LTIME(TIME, VALUES)`\n\nArguments:  \n|          |                                                                                   |\n|----------|-----------------------------------------------------------------------------------|\n| `TIME`   | An `INTEGER` scalar expression corresponding to a system time, with `INTENT(IN)`. |\n| `VALUES` | A default `INTEGER` array with 9 elements, with `INTENT(OUT)`.                    |\n\nReturn value:  \nThe elements of `VALUES` are assigned as follows:\n\n1.  Seconds after the minute, range 0–59 or 0–61 to allow for leap seconds\n2.  Minutes after the hour, range 0–59\n3.  Hours past midnight, range 0–23\n4.  Day of month, range 1–31\n5.  Number of months since January, range 0–11\n6.  Years since 1900\n7.  Number of days since Sunday, range 0–6\n8.  Days since January 1, range 0–365\n9.  Daylight savings indicator: positive if daylight savings is in effect, zero if not, and negative if the information is not available.\n\nSee also:  \n[`DATE_AND_TIME` — Date and time subroutine](date_005fand_005ftime), [`CTIME` — Convert a time into a string](ctime), [`GMTIME` — Convert time to GMT info](gmtime), [`TIME` — Time function](time), [`TIME8` — Time function (64-bit)](time8)\n\nNext: [`MALLOC` — Allocate dynamic memory](malloc), Previous: [`LSTAT` — Get file status](lstat), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LTIME.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/LTIME.html)"
- name: 8.184. MALLOC
  id: malloc
  summary: 'Description: MALLOC(SIZE) allocates SIZE bytes of dynamic memory and returns the address of the allocated memory'
  description: "Next: [`MASKL` — Left justified mask](maskl), Previous: [`LTIME` — Convert time to local time info](ltime), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.184 MALLOC — Allocate dynamic memory [¶](#MALLOC-----Allocate-dynamic-memory)\n\nDescription:  \n`MALLOC(SIZE)` allocates `SIZE` bytes of dynamic memory and returns the address of the allocated memory. The `MALLOC` intrinsic is an extension intended to be used with Cray pointers, and is provided in GNU Fortran to allow the user to compile legacy code. For new code using Fortran 95 pointers, the memory allocation intrinsic is `ALLOCATE`.\n\nStandard:  \nGNU extension\n\nClass:  \nFunction\n\nSyntax:  \n`PTR = MALLOC(SIZE)`\n\nArguments:  \n|        |                              |\n|--------|------------------------------|\n| `SIZE` | The type shall be `INTEGER`. |\n\nReturn value:  \nThe return value is of type `INTEGER(K)`, with `K` such that variables of type `INTEGER(K)` have the same size as C pointers (`sizeof(void *)`).\n\nExample:  \nThe following example demonstrates the use of `MALLOC` and `FREE` with Cray pointers.\n\n``` example-preformatted\nprogram test_malloc\n  implicit none\n  integer i\n  real*8 x(*), z\n  pointer(ptr_x,x)\n\n  ptr_x = malloc(20*8)\n  do i = 1, 20\n    x(i) = sqrt(1.0d0 / i)\n  end do\n  z = 0\n  do i = 1, 20\n    z = z + x(i)\n    print *, z\n  end do\n  call free(ptr_x)\nend program test_malloc\n```\n\nSee also:  \n[`FREE` — Frees memory](free)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MALLOC.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MALLOC.html)"
- name: 8.185. MASKL
  id: maskl
  summary: 'Description: MASKL(I[, KIND]) has its leftmost I bits set to 1, and the remaining bits set to 0'
  description: "Next: [`MASKR` — Right justified mask](maskr), Previous: [`MALLOC` — Allocate dynamic memory](malloc), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.185 MASKL — Left justified mask [¶](#MASKL-----Left-justified-mask)\n\nDescription:  \n`MASKL(I[, KIND])` has its leftmost `I` bits set to 1, and the remaining bits set to 0.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = MASKL(I[, KIND])`\n\nArguments:  \n|        |                                                          |\n|--------|----------------------------------------------------------|\n| `I`    | Shall be of type `INTEGER`.                              |\n| `KIND` | Shall be a scalar constant expression of type `INTEGER`. |\n\nReturn value:  \nThe return value is of type `INTEGER`. If `KIND` is present, it specifies the kind value of the return type; otherwise, it is of the default integer kind.\n\nSee also:  \n[`MASKR` — Right justified mask](maskr)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MASKL.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MASKL.html)"
- name: 8.186. MASKR
  id: maskr
  summary: 'Description: MASKL(I[, KIND]) has its rightmost I bits set to 1, and the remaining bits set to 0'
  description: "Next: [`MATMUL` — matrix multiplication](matmul), Previous: [`MASKL` — Left justified mask](maskl), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.186 MASKR — Right justified mask [¶](#MASKR-----Right-justified-mask)\n\nDescription:  \n`MASKL(I[, KIND])` has its rightmost `I` bits set to 1, and the remaining bits set to 0.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = MASKR(I[, KIND])`\n\nArguments:  \n|        |                                                          |\n|--------|----------------------------------------------------------|\n| `I`    | Shall be of type `INTEGER`.                              |\n| `KIND` | Shall be a scalar constant expression of type `INTEGER`. |\n\nReturn value:  \nThe return value is of type `INTEGER`. If `KIND` is present, it specifies the kind value of the return type; otherwise, it is of the default integer kind.\n\nSee also:  \n[`MASKL` — Left justified mask](maskl)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MASKR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MASKR.html)"
- name: 8.187. MATMUL
  id: matmul
  summary: 'Description: Performs a matrix multiplication on numeric or logical arguments'
  description: "Next: [`MAX` — Maximum value of an argument list](max), Previous: [`MASKR` — Right justified mask](maskr), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.187 MATMUL — matrix multiplication [¶](#MATMUL-----matrix-multiplication)\n\nDescription:  \nPerforms a matrix multiplication on numeric or logical arguments.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n`RESULT = MATMUL(MATRIX_A, MATRIX_B)`\n\nArguments:  \n|            |                                                                                                                                                                                                                                                                                                                                      |\n|------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `MATRIX_A` | An array of `INTEGER`, `REAL`, `COMPLEX`, or `LOGICAL` type, with a rank of one or two.                                                                                                                                                                                                                                              |\n| `MATRIX_B` | An array of `INTEGER`, `REAL`, or `COMPLEX` type if `MATRIX_A` is of a numeric type; otherwise, an array of `LOGICAL` type. The rank shall be one or two, and the first (or only) dimension of `MATRIX_B` shall be equal to the last (or only) dimension of `MATRIX_A`. `MATRIX_A` and `MATRIX_B` shall not both be rank one arrays. |\n\nReturn value:  \nThe matrix product of `MATRIX_A` and `MATRIX_B`. The type and kind of the result follow the usual type and kind promotion rules, as for the `*` or `.AND.` operators.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MATMUL.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MATMUL.html)"
- name: 8.188. MAX
  id: max
  summary: 'Description: Returns the argument with the largest (most positive) value'
  description: "Next: [`MAXEXPONENT` — Maximum exponent of a real kind](maxexponent), Previous: [`MATMUL` — matrix multiplication](matmul), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.188 MAX — Maximum value of an argument list [¶](#MAX-----Maximum-value-of-an-argument-list)\n\nDescription:  \nReturns the argument with the largest (most positive) value.\n\nStandard:  \nFortran 77 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = MAX(A1, A2 [, A3 [, ...]])`\n\nArguments:  \n|                 |                                                                                                                    |\n|-----------------|--------------------------------------------------------------------------------------------------------------------|\n| `A1`            | The type shall be `INTEGER` or `REAL`.                                                                             |\n| `A2`, `A3`, ... | An expression of the same type and kind as `A1`. (As a GNU extension, arguments of different kinds are permitted.) |\n\nReturn value:  \nThe return value corresponds to the maximum value among the arguments, and has the same type and kind as the first argument.\n\nSpecific names:  \n| Name        | Argument        | Return type    | Standard             |\n|-------------|-----------------|----------------|----------------------|\n| `MAX0(A1)`  | `INTEGER(4) A1` | `INTEGER(4)`   | Fortran 77 and later |\n| `AMAX0(A1)` | `INTEGER(4) A1` | `REAL(MAX(X))` | Fortran 77 and later |\n| `MAX1(A1)`  | `REAL A1`       | `INT(MAX(X))`  | Fortran 77 and later |\n| `AMAX1(A1)` | `REAL(4) A1`    | `REAL(4)`      | Fortran 77 and later |\n| `DMAX1(A1)` | `REAL(8) A1`    | `REAL(8)`      | Fortran 77 and later |\n\nSee also:  \n[`MAXLOC` — Location of the maximum value within an array](maxloc) [`MAXVAL` — Maximum value of an array](maxval), [`MIN` — Minimum value of an argument list](min)\n\nNext: [`MAXEXPONENT` — Maximum exponent of a real kind](maxexponent), Previous: [`MATMUL` — matrix multiplication](matmul), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MAX.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MAX.html)"
- name: 8.189. MAXEXPONENT
  id: maxexponent
  summary: 'Description: MAXEXPONENT(X) returns the maximum exponent in the model of the type of X'
  description: "Next: [`MAXLOC` — Location of the maximum value within an array](maxloc), Previous: [`MAX` — Maximum value of an argument list](max), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.189 MAXEXPONENT — Maximum exponent of a real kind [¶](#MAXEXPONENT-----Maximum-exponent-of-a-real-kind)\n\nDescription:  \n`MAXEXPONENT(X)` returns the maximum exponent in the model of the type of `X`.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = MAXEXPONENT(X)`\n\nArguments:  \n|     |                          |\n|-----|--------------------------|\n| `X` | Shall be of type `REAL`. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of the default integer kind.\n\nExample:  \n``` example-preformatted\nprogram exponents\n  real(kind=4) :: x\n  real(kind=8) :: y\n\n  print *, minexponent(x), maxexponent(x)\n  print *, minexponent(y), maxexponent(y)\nend program exponents\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MAXEXPONENT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MAXEXPONENT.html)"
- name: 8.190. MAXLOC
  id: maxloc
  summary: 'Description: Determines the location of the element in the array with the maximum value, or, if the DIM argument is supplied, determines the locations of the maximum element along each row of the array in the DIM direction'
  description: "Next: [`MAXVAL` — Maximum value of an array](maxval), Previous: [`MAXEXPONENT` — Maximum exponent of a real kind](maxexponent), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.190 MAXLOC — Location of the maximum value within an array [¶](#MAXLOC-----Location-of-the-maximum-value-within-an-array)\n\nDescription:  \nDetermines the location of the element in the array with the maximum value, or, if the `DIM` argument is supplied, determines the locations of the maximum element along each row of the array in the `DIM` direction. If `MASK` is present, only the elements for which `MASK` is `.TRUE.` are considered. If more than one element in the array has the maximum value, the location returned is that of the first such element in array element order if the `BACK` is not present, or is false; if `BACK` is true, the location returned is that of the last such element. If the array has zero size, or all of the elements of `MASK` are `.FALSE.`, then the result is an array of zeroes. Similarly, if `DIM` is supplied and all of the elements of `MASK` along a given row are zero, the result value for that row is zero.\n\nStandard:  \nFortran 95 and later; `ARRAY` of `CHARACTER` and the `KIND` argument are available in Fortran 2003 and later. The `BACK` argument is available in Fortran 2008 and later.\n\nClass:  \nTransformational function\n\nSyntax:  \n|                                                        |\n|--------------------------------------------------------|\n| `RESULT = MAXLOC(ARRAY, DIM [, MASK] [,KIND] [,BACK])` |\n| `RESULT = MAXLOC(ARRAY [, MASK] [,KIND] [,BACK])`      |\n\nArguments:  \n|         |                                                                                                                                                        |\n|---------|--------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `ARRAY` | Shall be an array of type `INTEGER` or `REAL`.                                                                                                         |\n| `DIM`   | (Optional) Shall be a scalar of type `INTEGER`, with a value between one and the rank of `ARRAY`, inclusive. It may not be an optional dummy argument. |\n| `MASK`  | Shall be of type `LOGICAL`, and conformable with `ARRAY`.                                                                                              |\n| `KIND`  | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result.                                                         |\n| `BACK`  | (Optional) A scalar of type `LOGICAL`.                                                                                                                 |\n\nReturn value:  \nIf `DIM` is absent, the result is a rank-one array with a length equal to the rank of `ARRAY`. If `DIM` is present, the result is an array with a rank one less than the rank of `ARRAY`, and a size corresponding to the size of `ARRAY` with the `DIM` dimension removed. If `DIM` is present and `ARRAY` has a rank of one, the result is a scalar. If the optional argument `KIND` is present, the result is an integer of kind `KIND`, otherwise it is of default kind.\n\nSee also:  \n[`FINDLOC` — Search an array for a value](findloc), [`MAX` — Maximum value of an argument list](max), [`MAXVAL` — Maximum value of an array](maxval)\n\nNext: [`MAXVAL` — Maximum value of an array](maxval), Previous: [`MAXEXPONENT` — Maximum exponent of a real kind](maxexponent), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MAXLOC.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MAXLOC.html)"
- name: 8.191. MAXVAL
  id: maxval
  summary: 'Description: Determines the maximum value of the elements in an array value, or, if the DIM argument is supplied, determines the maximum value along each row of the array in the DIM direction'
  description: "Next: [`MCLOCK` — Time function](mclock), Previous: [`MAXLOC` — Location of the maximum value within an array](maxloc), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.191 MAXVAL — Maximum value of an array [¶](#MAXVAL-----Maximum-value-of-an-array)\n\nDescription:  \nDetermines the maximum value of the elements in an array value, or, if the `DIM` argument is supplied, determines the maximum value along each row of the array in the `DIM` direction. If `MASK` is present, only the elements for which `MASK` is `.TRUE.` are considered. If the array has zero size, or all of the elements of `MASK` are `.FALSE.`, then the result is `-HUGE(ARRAY)` if `ARRAY` is numeric, or a string of nulls if `ARRAY` is of character type.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n|                                        |\n|----------------------------------------|\n| `RESULT = MAXVAL(ARRAY, DIM [, MASK])` |\n| `RESULT = MAXVAL(ARRAY [, MASK])`      |\n\nArguments:  \n|         |                                                                                                                                                        |\n|---------|--------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `ARRAY` | Shall be an array of type `INTEGER` or `REAL`.                                                                                                         |\n| `DIM`   | (Optional) Shall be a scalar of type `INTEGER`, with a value between one and the rank of `ARRAY`, inclusive. It may not be an optional dummy argument. |\n| `MASK`  | (Optional) Shall be of type `LOGICAL`, and conformable with `ARRAY`.                                                                                   |\n\nReturn value:  \nIf `DIM` is absent, or if `ARRAY` has a rank of one, the result is a scalar. If `DIM` is present, the result is an array with a rank one less than the rank of `ARRAY`, and a size corresponding to the size of `ARRAY` with the `DIM` dimension removed. In all cases, the result is of the same type and kind as `ARRAY`.\n\nSee also:  \n[`MAX` — Maximum value of an argument list](max), [`MAXLOC` — Location of the maximum value within an array](maxloc)\n\nNext: [`MCLOCK` — Time function](mclock), Previous: [`MAXLOC` — Location of the maximum value within an array](maxloc), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MAXVAL.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MAXVAL.html)"
- name: 8.192. MCLOCK
  id: mclock
  summary: 'Description: Returns the number of clock ticks since the start of the process, based on the function clock(3) in the C standard library'
  description: "Next: [`MCLOCK8` — Time function (64-bit)](mclock8), Previous: [`MAXVAL` — Maximum value of an array](maxval), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.192 MCLOCK — Time function [¶](#MCLOCK-----Time-function)\n\nDescription:  \nReturns the number of clock ticks since the start of the process, based on the function `clock(3)` in the C standard library.\n\nThis intrinsic is not fully portable, such as to systems with 32-bit `INTEGER` types but supporting times wider than 32 bits. Therefore, the values returned by this intrinsic might be, or become, negative, or numerically less than previous values, during a single run of the compiled program.\n\nStandard:  \nGNU extension\n\nClass:  \nFunction\n\nSyntax:  \n`RESULT = MCLOCK()`\n\nReturn value:  \nThe return value is a scalar of type `INTEGER(4)`, equal to the number of clock ticks since the start of the process, or `-1` if the system does not support `clock(3)`.\n\nSee also:  \n[`CTIME` — Convert a time into a string](ctime), [`GMTIME` — Convert time to GMT info](gmtime), [`LTIME` — Convert time to local time info](ltime), [`MCLOCK` — Time function](#MCLOCK), [`TIME` — Time function](time)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MCLOCK.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MCLOCK.html)"
- name: 8.193. MCLOCK8
  id: mclock8
  summary: 'Description: Returns the number of clock ticks since the start of the process, based on the function clock(3) in the C standard library'
  description: "Next: [`MERGE` — Merge variables](merge), Previous: [`MCLOCK` — Time function](mclock), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.193 MCLOCK8 — Time function (64-bit) [¶](#MCLOCK8-----Time-function-_002864-bit_0029)\n\nDescription:  \nReturns the number of clock ticks since the start of the process, based on the function `clock(3)` in the C standard library.\n\n*Warning:* this intrinsic does not increase the range of the timing values over that returned by `clock(3)`. On a system with a 32-bit `clock(3)`, `MCLOCK8` will return a 32-bit value, even though it is converted to a 64-bit `INTEGER(8)` value. That means overflows of the 32-bit value can still occur. Therefore, the values returned by this intrinsic might be or become negative or numerically less than previous values during a single run of the compiled program.\n\nStandard:  \nGNU extension\n\nClass:  \nFunction\n\nSyntax:  \n`RESULT = MCLOCK8()`\n\nReturn value:  \nThe return value is a scalar of type `INTEGER(8)`, equal to the number of clock ticks since the start of the process, or `-1` if the system does not support `clock(3)`.\n\nSee also:  \n[`CTIME` — Convert a time into a string](ctime), [`GMTIME` — Convert time to GMT info](gmtime), [`LTIME` — Convert time to local time info](ltime), [`MCLOCK` — Time function](mclock), [`TIME8` — Time function (64-bit)](time8)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MCLOCK8.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MCLOCK8.html)"
- name: 8.194. MERGE
  id: merge
  summary: 'Description: Select values from two arrays according to a logical mask'
  description: "Next: [`MERGE_BITS` — Merge of bits under mask](merge_005fbits), Previous: [`MCLOCK8` — Time function (64-bit)](mclock8), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.194 MERGE — Merge variables [¶](#MERGE-----Merge-variables)\n\nDescription:  \nSelect values from two arrays according to a logical mask. The result is equal to `TSOURCE` if `MASK` is `.TRUE.`, or equal to `FSOURCE` if it is `.FALSE.`.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = MERGE(TSOURCE, FSOURCE, MASK)`\n\nArguments:  \n|           |                                                             |\n|-----------|-------------------------------------------------------------|\n| `TSOURCE` | May be of any type.                                         |\n| `FSOURCE` | Shall be of the same type and type parameters as `TSOURCE`. |\n| `MASK`    | Shall be of type `LOGICAL`.                                 |\n\nReturn value:  \nThe result is of the same type and type parameters as `TSOURCE`.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MERGE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MERGE.html)"
- name: 8.195. MERGE_BITS
  id: merge_005fbits
  summary: 'Description: MERGE_BITS(I, J, MASK) merges the bits of I and J as determined by the mask'
  description: "Next: [`MIN` — Minimum value of an argument list](min), Previous: [`MERGE` — Merge variables](merge), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.195 MERGE_BITS — Merge of bits under mask [¶](#MERGE_005fBITS-----Merge-of-bits-under-mask)\n\nDescription:  \n`MERGE_BITS(I, J, MASK)` merges the bits of `I` and `J` as determined by the mask. The i-th bit of the result is equal to the i-th bit of `I` if the i-th bit of `MASK` is 1; it is equal to the i-th bit of `J` otherwise.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = MERGE_BITS(I, J, MASK)`\n\nArguments:  \n|        |                                                                                                                                                     |\n|--------|-----------------------------------------------------------------------------------------------------------------------------------------------------|\n| `I`    | Shall be of type `INTEGER` or a boz-literal-constant.                                                                                               |\n| `J`    | Shall be of type `INTEGER` with the same kind type parameter as `I` or a boz-literal-constant. `I` and `J` shall not both be boz-literal-constants. |\n| `MASK` | Shall be of type `INTEGER` or a boz-literal-constant and of the same kind as `I`.                                                                   |\n\nReturn value:  \nThe result is of the same type and kind as `I`.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MERGE_005fBITS.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MERGE_005fBITS.html)"
- name: 8.196. MIN
  id: min
  summary: 'Description: Returns the argument with the smallest (most negative) value'
  description: "Next: [`MINEXPONENT` — Minimum exponent of a real kind](minexponent), Previous: [`MERGE_BITS` — Merge of bits under mask](merge_005fbits), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.196 MIN — Minimum value of an argument list [¶](#MIN-----Minimum-value-of-an-argument-list)\n\nDescription:  \nReturns the argument with the smallest (most negative) value.\n\nStandard:  \nFortran 77 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = MIN(A1, A2 [, A3, ...])`\n\nArguments:  \n|                 |                                                                                                                    |\n|-----------------|--------------------------------------------------------------------------------------------------------------------|\n| `A1`            | The type shall be `INTEGER` or `REAL`.                                                                             |\n| `A2`, `A3`, ... | An expression of the same type and kind as `A1`. (As a GNU extension, arguments of different kinds are permitted.) |\n\nReturn value:  \nThe return value corresponds to the minimum value among the arguments, and has the same type and kind as the first argument.\n\nSpecific names:  \n| Name        | Argument        | Return type  | Standard             |\n|-------------|-----------------|--------------|----------------------|\n| `MIN0(A1)`  | `INTEGER(4) A1` | `INTEGER(4)` | Fortran 77 and later |\n| `AMIN0(A1)` | `INTEGER(4) A1` | `REAL(4)`    | Fortran 77 and later |\n| `MIN1(A1)`  | `REAL A1`       | `INTEGER(4)` | Fortran 77 and later |\n| `AMIN1(A1)` | `REAL(4) A1`    | `REAL(4)`    | Fortran 77 and later |\n| `DMIN1(A1)` | `REAL(8) A1`    | `REAL(8)`    | Fortran 77 and later |\n\nSee also:  \n[`MAX` — Maximum value of an argument list](max), [`MINLOC` — Location of the minimum value within an array](minloc), [`MINVAL` — Minimum value of an array](minval)\n\nNext: [`MINEXPONENT` — Minimum exponent of a real kind](minexponent), Previous: [`MERGE_BITS` — Merge of bits under mask](merge_005fbits), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MIN.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MIN.html)"
- name: 8.197. MINEXPONENT
  id: minexponent
  summary: 'Description: MINEXPONENT(X) returns the minimum exponent in the model of the type of X'
  description: "Next: [`MINLOC` — Location of the minimum value within an array](minloc), Previous: [`MIN` — Minimum value of an argument list](min), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.197 MINEXPONENT — Minimum exponent of a real kind [¶](#MINEXPONENT-----Minimum-exponent-of-a-real-kind)\n\nDescription:  \n`MINEXPONENT(X)` returns the minimum exponent in the model of the type of `X`.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = MINEXPONENT(X)`\n\nArguments:  \n|     |                          |\n|-----|--------------------------|\n| `X` | Shall be of type `REAL`. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of the default integer kind.\n\nExample:  \nSee `MAXEXPONENT` for an example.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MINEXPONENT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MINEXPONENT.html)"
- name: 8.198. MINLOC
  id: minloc
  summary: 'Description: Determines the location of the element in the array with the minimum value, or, if the DIM argument is supplied, determines the locations of the minimum element along each row of the array in the DIM direction'
  description: "Next: [`MINVAL` — Minimum value of an array](minval), Previous: [`MINEXPONENT` — Minimum exponent of a real kind](minexponent), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.198 MINLOC — Location of the minimum value within an array [¶](#MINLOC-----Location-of-the-minimum-value-within-an-array)\n\nDescription:  \nDetermines the location of the element in the array with the minimum value, or, if the `DIM` argument is supplied, determines the locations of the minimum element along each row of the array in the `DIM` direction. If `MASK` is present, only the elements for which `MASK` is `.TRUE.` are considered. If more than one element in the array has the minimum value, the location returned is that of the first such element in array element order if the `BACK` is not present, or is false; if `BACK` is true, the location returned is that of the last such element. If the array has zero size, or all of the elements of `MASK` are `.FALSE.`, then the result is an array of zeroes. Similarly, if `DIM` is supplied and all of the elements of `MASK` along a given row are zero, the result value for that row is zero.\n\nStandard:  \nFortran 90 and later; `ARRAY` of `CHARACTER` and the `KIND` argument are available in Fortran 2003 and later. The `BACK` argument is available in Fortran 2008 and later.\n\nClass:  \nTransformational function\n\nSyntax:  \n|                                                        |\n|--------------------------------------------------------|\n| `RESULT = MINLOC(ARRAY, DIM [, MASK] [,KIND] [,BACK])` |\n| `RESULT = MINLOC(ARRAY [, MASK], [,KIND] [,BACK])`     |\n\nArguments:  \n|         |                                                                                                                                                        |\n|---------|--------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `ARRAY` | Shall be an array of type `INTEGER`, `REAL` or `CHARACTER`.                                                                                            |\n| `DIM`   | (Optional) Shall be a scalar of type `INTEGER`, with a value between one and the rank of `ARRAY`, inclusive. It may not be an optional dummy argument. |\n| `MASK`  | Shall be of type `LOGICAL`, and conformable with `ARRAY`.                                                                                              |\n| `KIND`  | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result.                                                         |\n| `BACK`  | (Optional) A scalar of type `LOGICAL`.                                                                                                                 |\n\nReturn value:  \nIf `DIM` is absent, the result is a rank-one array with a length equal to the rank of `ARRAY`. If `DIM` is present, the result is an array with a rank one less than the rank of `ARRAY`, and a size corresponding to the size of `ARRAY` with the `DIM` dimension removed. If `DIM` is present and `ARRAY` has a rank of one, the result is a scalar. If the optional argument `KIND` is present, the result is an integer of kind `KIND`, otherwise it is of default kind.\n\nSee also:  \n[`FINDLOC` — Search an array for a value](findloc), [`MIN` — Minimum value of an argument list](min), [`MINVAL` — Minimum value of an array](minval)\n\nNext: [`MINVAL` — Minimum value of an array](minval), Previous: [`MINEXPONENT` — Minimum exponent of a real kind](minexponent), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MINLOC.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MINLOC.html)"
- name: 8.199. MINVAL
  id: minval
  summary: 'Description: Determines the minimum value of the elements in an array value, or, if the DIM argument is supplied, determines the minimum value along each row of the array in the DIM direction'
  description: "Next: [`MOD` — Remainder function](mod), Previous: [`MINLOC` — Location of the minimum value within an array](minloc), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.199 MINVAL — Minimum value of an array [¶](#MINVAL-----Minimum-value-of-an-array)\n\nDescription:  \nDetermines the minimum value of the elements in an array value, or, if the `DIM` argument is supplied, determines the minimum value along each row of the array in the `DIM` direction. If `MASK` is present, only the elements for which `MASK` is `.TRUE.` are considered. If the array has zero size, or all of the elements of `MASK` are `.FALSE.`, then the result is `HUGE(ARRAY)` if `ARRAY` is numeric, or a string of `CHAR(255)` characters if `ARRAY` is of character type.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n|                                        |\n|----------------------------------------|\n| `RESULT = MINVAL(ARRAY, DIM [, MASK])` |\n| `RESULT = MINVAL(ARRAY [, MASK])`      |\n\nArguments:  \n|         |                                                                                                                                                        |\n|---------|--------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `ARRAY` | Shall be an array of type `INTEGER` or `REAL`.                                                                                                         |\n| `DIM`   | (Optional) Shall be a scalar of type `INTEGER`, with a value between one and the rank of `ARRAY`, inclusive. It may not be an optional dummy argument. |\n| `MASK`  | Shall be of type `LOGICAL`, and conformable with `ARRAY`.                                                                                              |\n\nReturn value:  \nIf `DIM` is absent, or if `ARRAY` has a rank of one, the result is a scalar. If `DIM` is present, the result is an array with a rank one less than the rank of `ARRAY`, and a size corresponding to the size of `ARRAY` with the `DIM` dimension removed. In all cases, the result is of the same type and kind as `ARRAY`.\n\nSee also:  \n[`MIN` — Minimum value of an argument list](min), [`MINLOC` — Location of the minimum value within an array](minloc)\n\nNext: [`MOD` — Remainder function](mod), Previous: [`MINLOC` — Location of the minimum value within an array](minloc), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MINVAL.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MINVAL.html)"
- name: 8.200. MOD
  id: mod
  summary: 'Description: MOD(A,P) computes the remainder of the division of A by P'
  description: "Next: [`MODULO` — Modulo function](modulo), Previous: [`MINVAL` — Minimum value of an array](minval), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.200 MOD — Remainder function [¶](#MOD-----Remainder-function)\n\nDescription:  \n`MOD(A,P)` computes the remainder of the division of A by P.\n\nStandard:  \nFortran 77 and later, has overloads that are GNU extensions\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = MOD(A, P)`\n\nArguments:  \n|     |                                                                                                                                             |\n|-----|---------------------------------------------------------------------------------------------------------------------------------------------|\n| `A` | Shall be a scalar of type `INTEGER` or `REAL`.                                                                                              |\n| `P` | Shall be a scalar of the same type and kind as `A` and not equal to zero. (As a GNU extension, arguments of different kinds are permitted.) |\n\nReturn value:  \nThe return value is the result of `A - (INT(A/P) * P)`. The type and kind of the return value is the same as that of the arguments. The returned value has the same sign as A and a magnitude less than the magnitude of P. (As a GNU extension, kind is the largest kind of the actual arguments.)\n\nExample:  \n``` example-preformatted\nprogram test_mod\n  print *, mod(17,3)\n  print *, mod(17.5,5.5)\n  print *, mod(17.5d0,5.5)\n  print *, mod(17.5,5.5d0)\n\n  print *, mod(-17,3)\n  print *, mod(-17.5,5.5)\n  print *, mod(-17.5d0,5.5)\n  print *, mod(-17.5,5.5d0)\n\n  print *, mod(17,-3)\n  print *, mod(17.5,-5.5)\n  print *, mod(17.5d0,-5.5)\n  print *, mod(17.5,-5.5d0)\nend program test_mod\n```\n\nSpecific names:  \n| Name        | Arguments        | Return type  | Standard             |\n|-------------|------------------|--------------|----------------------|\n| `MOD(A,P)`  | `INTEGER A,P`    | `INTEGER`    | Fortran 77 and later |\n| `AMOD(A,P)` | `REAL(4) A,P`    | `REAL(4)`    | Fortran 77 and later |\n| `DMOD(A,P)` | `REAL(8) A,P`    | `REAL(8)`    | Fortran 77 and later |\n| `BMOD(A,P)` | `INTEGER(1) A,P` | `INTEGER(1)` | GNU extension        |\n| `IMOD(A,P)` | `INTEGER(2) A,P` | `INTEGER(2)` | GNU extension        |\n| `JMOD(A,P)` | `INTEGER(4) A,P` | `INTEGER(4)` | GNU extension        |\n| `KMOD(A,P)` | `INTEGER(8) A,P` | `INTEGER(8)` | GNU extension        |\n\nSee also:  \n[`MODULO` — Modulo function](modulo)\n\nNext: [`MODULO` — Modulo function](modulo), Previous: [`MINVAL` — Minimum value of an array](minval), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MOD.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MOD.html)"
- name: 8.201. MODULO
  id: modulo
  summary: 'Description: MODULO(A,P) computes the A modulo P'
  description: "Next: [`MOVE_ALLOC` — Move allocation from one object to another](move_005falloc), Previous: [`MOD` — Remainder function](mod), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.201 MODULO — Modulo function [¶](#MODULO-----Modulo-function)\n\nDescription:  \n`MODULO(A,P)` computes the `A` modulo `P`.\n\nStandard:  \nFortran 95 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = MODULO(A, P)`\n\nArguments:  \n|     |                                                                                                                                             |\n|-----|---------------------------------------------------------------------------------------------------------------------------------------------|\n| `A` | Shall be a scalar of type `INTEGER` or `REAL`.                                                                                              |\n| `P` | Shall be a scalar of the same type and kind as `A`. It shall not be zero. (As a GNU extension, arguments of different kinds are permitted.) |\n\nReturn value:  \nThe type and kind of the result are those of the arguments. (As a GNU extension, kind is the largest kind of the actual arguments.)\n\nIf `A` and `P` are of type `INTEGER`:  \n`MODULO(A,P)` has the value `R` such that `A=Q*P+R`, where `Q` is an integer and `R` is between 0 (inclusive) and `P` (exclusive).\n\nIf `A` and `P` are of type `REAL`:  \n`MODULO(A,P)` has the value of `A - FLOOR (A / P) * P`.\n\nThe returned value has the same sign as P and a magnitude less than the magnitude of P.\n\nExample:  \n``` example-preformatted\nprogram test_modulo\n  print *, modulo(17,3)\n  print *, modulo(17.5,5.5)\n\n  print *, modulo(-17,3)\n  print *, modulo(-17.5,5.5)\n\n  print *, modulo(17,-3)\n  print *, modulo(17.5,-5.5)\nend program\n```\n\nSee also:  \n[`MOD` — Remainder function](mod)\n\nNext: [`MOVE_ALLOC` — Move allocation from one object to another](move_005falloc), Previous: [`MOD` — Remainder function](mod), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MODULO.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MODULO.html)"
- name: 8.202. MOVE_ALLOC
  id: move_005falloc
  summary: 'Description: MOVE_ALLOC(FROM, TO) moves the allocation from FROM to TO'
  description: "Next: [`MVBITS` — Move bits from one integer to another](mvbits), Previous: [`MODULO` — Modulo function](modulo), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.202 MOVE_ALLOC — Move allocation from one object to another [¶](#MOVE_005fALLOC-----Move-allocation-from-one-object-to-another)\n\nDescription:  \n`MOVE_ALLOC(FROM, TO)` moves the allocation from `FROM` to `TO`. `FROM` will become deallocated in the process.\n\nStandard:  \nFortran 2003 and later\n\nClass:  \nPure subroutine\n\nSyntax:  \n`CALL MOVE_ALLOC(FROM, TO)`\n\nArguments:  \n|        |                                                                                   |\n|--------|-----------------------------------------------------------------------------------|\n| `FROM` | `ALLOCATABLE`, `INTENT(INOUT)`, may be of any type and kind.                      |\n| `TO`   | `ALLOCATABLE`, `INTENT(OUT)`, shall be of the same type, kind and rank as `FROM`. |\n\nReturn value:  \nNone\n\nExample:  \n``` example-preformatted\nprogram test_move_alloc\n    integer, allocatable :: a(:), b(:)\n\n    allocate(a(3))\n    a = [ 1, 2, 3 ]\n    call move_alloc(a, b)\n    print *, allocated(a), allocated(b)\n    print *, b\nend program test_move_alloc\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MOVE_005fALLOC.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MOVE_005fALLOC.html)"
- name: 8.203. MVBITS
  id: mvbits
  summary: 'Description: Moves LEN bits from positions FROMPOS through FROMPOS+LEN-1 of FROM to positions TOPOS through TOPOS+LEN-1 of TO'
  description: "Next: [`NEAREST` — Nearest representable number](nearest), Previous: [`MOVE_ALLOC` — Move allocation from one object to another](move_005falloc), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.203 MVBITS — Move bits from one integer to another [¶](#MVBITS-----Move-bits-from-one-integer-to-another)\n\nDescription:  \nMoves `LEN` bits from positions `FROMPOS` through `FROMPOS+LEN-1` of `FROM` to positions `TOPOS` through `TOPOS+LEN-1` of `TO`. The portion of argument `TO` not affected by the movement of bits is unchanged. The values of `FROMPOS+LEN-1` and `TOPOS+LEN-1` must be less than `BIT_SIZE(FROM)`.\n\nStandard:  \nFortran 90 and later, has overloads that are GNU extensions\n\nClass:  \nElemental subroutine\n\nSyntax:  \n`CALL MVBITS(FROM, FROMPOS, LEN, TO, TOPOS)`\n\nArguments:  \n|           |                                                          |\n|-----------|----------------------------------------------------------|\n| `FROM`    | The type shall be `INTEGER`.                             |\n| `FROMPOS` | The type shall be `INTEGER`.                             |\n| `LEN`     | The type shall be `INTEGER`.                             |\n| `TO`      | The type shall be `INTEGER`, of the same kind as `FROM`. |\n| `TOPOS`   | The type shall be `INTEGER`.                             |\n\nSpecific names:  \n| Name         | Argument       | Return type  | Standard             |\n|--------------|----------------|--------------|----------------------|\n| `MVBITS(A)`  | `INTEGER A`    | `INTEGER`    | Fortran 90 and later |\n| `BMVBITS(A)` | `INTEGER(1) A` | `INTEGER(1)` | GNU extension        |\n| `IMVBITS(A)` | `INTEGER(2) A` | `INTEGER(2)` | GNU extension        |\n| `JMVBITS(A)` | `INTEGER(4) A` | `INTEGER(4)` | GNU extension        |\n| `KMVBITS(A)` | `INTEGER(8) A` | `INTEGER(8)` | GNU extension        |\n\nSee also:  \n[`IBCLR` — Clear bit](ibclr), [`IBSET` — Set bit](ibset), [`IBITS` — Bit extraction](ibits), [`IAND` — Bitwise logical and](iand), [`IOR` — Bitwise logical or](ior), [`IEOR` — Bitwise logical exclusive or](ieor)\n\nNext: [`NEAREST` — Nearest representable number](nearest), Previous: [`MOVE_ALLOC` — Move allocation from one object to another](move_005falloc), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MVBITS.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/MVBITS.html)"
- name: 8.204. NEAREST
  id: nearest
  summary: 'Description: NEAREST(X, S) returns the processor-representable number nearest to X in the direction indicated by the sign of S'
  description: "Next: [`NEW_LINE` — New line character](new_005fline), Previous: [`MVBITS` — Move bits from one integer to another](mvbits), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.204 NEAREST — Nearest representable number [¶](#NEAREST-----Nearest-representable-number)\n\nDescription:  \n`NEAREST(X, S)` returns the processor-representable number nearest to `X` in the direction indicated by the sign of `S`.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = NEAREST(X, S)`\n\nArguments:  \n|     |                                                |\n|-----|------------------------------------------------|\n| `X` | Shall be of type `REAL`.                       |\n| `S` | Shall be of type `REAL` and not equal to zero. |\n\nReturn value:  \nThe return value is of the same type as `X`. If `S` is positive, `NEAREST` returns the processor-representable number greater than `X` and nearest to it. If `S` is negative, `NEAREST` returns the processor-representable number smaller than `X` and nearest to it.\n\nExample:  \n``` example-preformatted\nprogram test_nearest\n  real :: x, y\n  x = nearest(42.0, 1.0)\n  y = nearest(42.0, -1.0)\n  write (*,\"(3(G20.15))\") x, y, x - y\nend program test_nearest\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/NEAREST.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/NEAREST.html)"
- name: 8.205. NEW_LINE
  id: new_005fline
  summary: 'Description: NEW_LINE(C) returns the new-line character'
  description: "Next: [`NINT` — Nearest whole number](nint), Previous: [`NEAREST` — Nearest representable number](nearest), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.205 NEW_LINE — New line character [¶](#NEW_005fLINE-----New-line-character)\n\nDescription:  \n`NEW_LINE(C)` returns the new-line character.\n\nStandard:  \nFortran 2003 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = NEW_LINE(C)`\n\nArguments:  \n|     |                                                                  |\n|-----|------------------------------------------------------------------|\n| `C` | The argument shall be a scalar or array of the type `CHARACTER`. |\n\nReturn value:  \nReturns a `CHARACTER` scalar of length one with the new-line character of the same kind as parameter `C`.\n\nExample:  \n``` example-preformatted\nprogram newline\n  implicit none\n  write(*,'(A)') 'This is record 1.'//NEW_LINE('A')//'This is record 2.'\nend program newline\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/NEW_005fLINE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/NEW_005fLINE.html)"
- name: 8.206. NINT
  id: nint
  summary: 'Description: NINT(A) rounds its argument to the nearest whole number'
  description: "Next: [`NORM2` — Euclidean vector norms](norm2), Previous: [`NEW_LINE` — New line character](new_005fline), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.206 NINT — Nearest whole number [¶](#NINT-----Nearest-whole-number)\n\nDescription:  \n`NINT(A)` rounds its argument to the nearest whole number.\n\nStandard:  \nFortran 77 and later, with `KIND` argument Fortran 90 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = NINT(A [, KIND])`\n\nArguments:  \n|        |                                                                                                |\n|--------|------------------------------------------------------------------------------------------------|\n| `A`    | The type of the argument shall be `REAL`.                                                      |\n| `KIND` | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result. |\n\nReturn value:  \nReturns `A` with the fractional portion of its magnitude eliminated by rounding to the nearest whole number and with its sign preserved, converted to an `INTEGER` of the default kind.\n\nExample:  \n``` example-preformatted\nprogram test_nint\n  real(4) x4\n  real(8) x8\n  x4 = 1.234E0_4\n  x8 = 4.321_8\n  print *, nint(x4), idnint(x8)\nend program test_nint\n```\n\nSpecific names:  \n| Name        | Argument    | Return Type | Standard             |\n|-------------|-------------|-------------|----------------------|\n| `NINT(A)`   | `REAL(4) A` | `INTEGER`   | Fortran 77 and later |\n| `IDNINT(A)` | `REAL(8) A` | `INTEGER`   | Fortran 77 and later |\n\nSee also:  \n[`CEILING` — Integer ceiling function](ceiling), [`FLOOR` — Integer floor function](floor)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/NINT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/NINT.html)"
- name: 8.207. NORM2
  id: norm2
  summary: 'Description: Calculates the Euclidean vector norm (L_2 norm) of ARRAY along dimension DIM'
  description: "Next: [`NOT` — Logical negation](not), Previous: [`NINT` — Nearest whole number](nint), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.207 NORM2 — Euclidean vector norms [¶](#NORM2-----Euclidean-vector-norms)\n\nDescription:  \nCalculates the Euclidean vector norm (*L_2* norm) of `ARRAY` along dimension `DIM`.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n|                                |\n|--------------------------------|\n| `RESULT = NORM2(ARRAY[, DIM])` |\n\nArguments:  \n|         |                                                                                                                           |\n|---------|---------------------------------------------------------------------------------------------------------------------------|\n| `ARRAY` | Shall be an array of type `REAL`                                                                                          |\n| `DIM`   | (Optional) shall be a scalar of type `INTEGER` with a value in the range from 1 to n, where n equals the rank of `ARRAY`. |\n\nReturn value:  \nThe result is of the same type as `ARRAY`.\n\nIf `DIM` is absent, a scalar with the square root of the sum of all elements in `ARRAY` squared is returned. Otherwise, an array of rank *n-1*, where *n* equals the rank of `ARRAY`, and a shape similar to that of `ARRAY` with dimension `DIM` dropped is returned.\n\nExample:  \n``` example-preformatted\nPROGRAM test_sum\n  REAL :: x(5) = [ real :: 1, 2, 3, 4, 5 ]\n  print *, NORM2(x)  ! = sqrt(55.) ~ 7.416\nEND PROGRAM\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/NORM2.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/NORM2.html)"
- name: 8.208. NOT
  id: not
  summary: 'Description: NOT returns the bitwise Boolean inverse of I'
  description: "Next: [`NULL` — Function that returns an disassociated pointer](null), Previous: [`NORM2` — Euclidean vector norms](norm2), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.208 NOT — Logical negation [¶](#NOT-----Logical-negation)\n\nDescription:  \n`NOT` returns the bitwise Boolean inverse of `I`.\n\nStandard:  \nFortran 90 and later, has overloads that are GNU extensions\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = NOT(I)`\n\nArguments:  \n|     |                              |\n|-----|------------------------------|\n| `I` | The type shall be `INTEGER`. |\n\nReturn value:  \nThe return type is `INTEGER`, of the same kind as the argument.\n\nSpecific names:  \n| Name      | Argument       | Return type  | Standard             |\n|-----------|----------------|--------------|----------------------|\n| `NOT(A)`  | `INTEGER A`    | `INTEGER`    | Fortran 95 and later |\n| `BNOT(A)` | `INTEGER(1) A` | `INTEGER(1)` | GNU extension        |\n| `INOT(A)` | `INTEGER(2) A` | `INTEGER(2)` | GNU extension        |\n| `JNOT(A)` | `INTEGER(4) A` | `INTEGER(4)` | GNU extension        |\n| `KNOT(A)` | `INTEGER(8) A` | `INTEGER(8)` | GNU extension        |\n\nSee also:  \n[`IAND` — Bitwise logical and](iand), [`IEOR` — Bitwise logical exclusive or](ieor), [`IOR` — Bitwise logical or](ior), [`IBITS` — Bit extraction](ibits), [`IBSET` — Set bit](ibset), [`IBCLR` — Clear bit](ibclr)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/NOT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/NOT.html)"
- name: 8.209. NULL
  id: 'null'
  summary: 'Description: Returns a disassociated pointer'
  description: "Next: [`NUM_IMAGES` — Function that returns the number of images](num_005fimages), Previous: [`NOT` — Logical negation](not), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.209 NULL — Function that returns an disassociated pointer [¶](#NULL-----Function-that-returns-an-disassociated-pointer)\n\nDescription:  \nReturns a disassociated pointer.\n\nIf `MOLD` is present, a disassociated pointer of the same type is returned, otherwise the type is determined by context.\n\nIn Fortran 95, `MOLD` is optional. Please note that Fortran 2003 includes cases where it is required.\n\nStandard:  \nFortran 95 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n`PTR => NULL([MOLD])`\n\nArguments:  \n|        |                                                                          |\n|--------|--------------------------------------------------------------------------|\n| `MOLD` | (Optional) shall be a pointer of any association status and of any type. |\n\nReturn value:  \nA disassociated pointer.\n\nExample:  \n``` example-preformatted\nREAL, POINTER, DIMENSION(:) :: VEC => NULL ()\n```\n\nSee also:  \n[`ASSOCIATED` — Status of a pointer or pointer/target pair](associated)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/NULL.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/NULL.html)"
- name: 8.210. NUM_IMAGES
  id: num_005fimages
  summary: 'Description: Returns the number of images'
  description: "Next: [`OR` — Bitwise logical OR](or), Previous: [`NULL` — Function that returns an disassociated pointer](null), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.210 NUM_IMAGES — Function that returns the number of images [¶](#NUM_005fIMAGES-----Function-that-returns-the-number-of-images)\n\nDescription:  \nReturns the number of images.\n\nStandard:  \nFortran 2008 and later. With `DISTANCE` or `FAILED` argument, Technical Specification (TS) 18508 or later\n\nClass:  \nTransformational function\n\nSyntax:  \n`RESULT = NUM_IMAGES(DISTANCE, FAILED)`\n\nArguments:  \n|            |                                                   |\n|------------|---------------------------------------------------|\n| `DISTANCE` | (optional, intent(in)) Nonnegative scalar integer |\n| `FAILED`   | (optional, intent(in)) Scalar logical expression  |\n\nReturn value:  \nScalar default-kind integer. If `DISTANCE` is not present or has value 0, the number of images in the current team is returned. For values smaller or equal distance to the initial team, it returns the number of images index on the ancestor team which has a distance of `DISTANCE` from the invoking team. If `DISTANCE` is larger than the distance to the initial team, the number of images of the initial team is returned. If `FAILED` is not present the total number of images is returned; if it has the value `.TRUE.`, the number of failed images is returned, otherwise, the number of images which do have not the failed status.\n\nExample:  \n``` example-preformatted\nINTEGER :: value[*]\nINTEGER :: i\nvalue = THIS_IMAGE()\nSYNC ALL\nIF (THIS_IMAGE() == 1) THEN\n  DO i = 1, NUM_IMAGES()\n    WRITE(*,'(2(a,i0))') 'value[', i, '] is ', value[i]\n  END DO\nEND IF\n```\n\nSee also:  \n[`THIS_IMAGE` — Function that returns the cosubscript index of this image](this_005fimage), [`IMAGE_INDEX` — Function that converts a cosubscript to an image index](image_005findex)\n\nNext: [`OR` — Bitwise logical OR](or), Previous: [`NULL` — Function that returns an disassociated pointer](null), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/NUM_005fIMAGES.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/NUM_005fIMAGES.html)"
- name: 8.211. OR
  id: or
  summary: 'Description: Bitwise logical OR'
  description: "Next: [`PACK` — Pack an array into an array of rank one](pack), Previous: [`NUM_IMAGES` — Function that returns the number of images](num_005fimages), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.211 OR — Bitwise logical OR [¶](#OR-----Bitwise-logical-OR)\n\nDescription:  \nBitwise logical `OR`.\n\nThis intrinsic routine is provided for backwards compatibility with GNU Fortran 77. For integer arguments, programmers should consider the use of the [`IOR` — Bitwise logical or](ior) intrinsic defined by the Fortran standard.\n\nStandard:  \nGNU extension\n\nClass:  \nFunction\n\nSyntax:  \n`RESULT = OR(I, J)`\n\nArguments:  \n|     |                                                                                                                                                                                                                                    |\n|-----|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `I` | The type shall be either a scalar `INTEGER` type or a scalar `LOGICAL` type or a boz-literal-constant.                                                                                                                             |\n| `J` | The type shall be the same as the type of `I` or a boz-literal-constant. `I` and `J` shall not both be boz-literal-constants. If either `I` and `J` is a boz-literal-constant, then the other argument must be a scalar `INTEGER`. |\n\nReturn value:  \nThe return type is either a scalar `INTEGER` or a scalar `LOGICAL`. If the kind type parameters differ, then the smaller kind type is implicitly converted to larger kind, and the return has the larger kind. A boz-literal-constant is converted to an `INTEGER` with the kind type parameter of the other argument as-if a call to [`INT` — Convert to integer type](int) occurred.\n\nExample:  \n``` example-preformatted\nPROGRAM test_or\n  LOGICAL :: T = .TRUE., F = .FALSE.\n  INTEGER :: a, b\n  DATA a / Z'F' /, b / Z'3' /\n\n  WRITE (*,*) OR(T, T), OR(T, F), OR(F, T), OR(F, F)\n  WRITE (*,*) OR(a, b)\nEND PROGRAM\n```\n\nSee also:  \nFortran 95 elemental function: [`IOR` — Bitwise logical or](ior)\n\nNext: [`PACK` — Pack an array into an array of rank one](pack), Previous: [`NUM_IMAGES` — Function that returns the number of images](num_005fimages), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/OR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/OR.html)"
- name: 8.212. PACK
  id: pack
  summary: 'Description: Stores the elements of ARRAY in an array of rank one'
  description: "Next: [`PARITY` — Reduction with exclusive OR](parity), Previous: [`OR` — Bitwise logical OR](or), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.212 PACK — Pack an array into an array of rank one [¶](#PACK-----Pack-an-array-into-an-array-of-rank-one)\n\nDescription:  \nStores the elements of `ARRAY` in an array of rank one.\n\nThe beginning of the resulting array is made up of elements whose `MASK` equals `TRUE`. Afterwards, positions are filled with elements taken from `VECTOR`.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n`RESULT = PACK(ARRAY, MASK[,VECTOR])`\n\nArguments:  \n|          |                                                                                                                                                                                                                                                                                                                                |\n|----------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `ARRAY`  | Shall be an array of any type.                                                                                                                                                                                                                                                                                                 |\n| `MASK`   | Shall be an array of type `LOGICAL` and of the same size as `ARRAY`. Alternatively, it may be a `LOGICAL` scalar.                                                                                                                                                                                                              |\n| `VECTOR` | (Optional) shall be an array of the same type as `ARRAY` and of rank one. If present, the number of elements in `VECTOR` shall be equal to or greater than the number of true elements in `MASK`. If `MASK` is scalar, the number of elements in `VECTOR` shall be equal to or greater than the number of elements in `ARRAY`. |\n\nReturn value:  \nThe result is an array of rank one and the same type as that of `ARRAY`. If `VECTOR` is present, the result size is that of `VECTOR`, the number of `TRUE` values in `MASK` otherwise.\n\nExample:  \nGathering nonzero elements from an array:\n\n``` example-preformatted\nPROGRAM test_pack_1\n  INTEGER :: m(6)\n  m = (/ 1, 0, 0, 0, 5, 0 /)\n  WRITE(*, FMT=\"(6(I0, ' '))\") pack(m, m /= 0)  ! \"1 5\"\nEND PROGRAM\n```\n\nGathering nonzero elements from an array and appending elements from `VECTOR`:\n\n``` example-preformatted\nPROGRAM test_pack_2\n  INTEGER :: m(4)\n  m = (/ 1, 0, 0, 2 /)\n  ! The following results in \"1 2 3 4\"\n  WRITE(*, FMT=\"(4(I0, ' '))\") pack(m, m /= 0, (/ 0, 0, 3, 4 /))\nEND PROGRAM\n```\n\nSee also:  \n[`UNPACK` — Unpack an array of rank one into an array](unpack)\n\nNext: [`PARITY` — Reduction with exclusive OR](parity), Previous: [`OR` — Bitwise logical OR](or), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/PACK.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/PACK.html)"
- name: 8.213. PARITY
  id: parity
  summary: 'Description: Calculates the parity, i.e'
  description: "Next: [`PERROR` — Print system error message](perror), Previous: [`PACK` — Pack an array into an array of rank one](pack), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.213 PARITY — Reduction with exclusive OR [¶](#PARITY-----Reduction-with-exclusive-OR)\n\nDescription:  \nCalculates the parity, i.e. the reduction using `.XOR.`, of `MASK` along dimension `DIM`.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n|                                |\n|--------------------------------|\n| `RESULT = PARITY(MASK[, DIM])` |\n\nArguments:  \n|        |                                                                                                                          |\n|--------|--------------------------------------------------------------------------------------------------------------------------|\n| `MASK` | Shall be an array of type `LOGICAL`                                                                                      |\n| `DIM`  | (Optional) shall be a scalar of type `INTEGER` with a value in the range from 1 to n, where n equals the rank of `MASK`. |\n\nReturn value:  \nThe result is of the same type as `MASK`.\n\nIf `DIM` is absent, a scalar with the parity of all elements in `MASK` is returned, i.e. true if an odd number of elements is `.true.` and false otherwise. If `DIM` is present, an array of rank *n-1*, where *n* equals the rank of `ARRAY`, and a shape similar to that of `MASK` with dimension `DIM` dropped is returned.\n\nExample:  \n``` example-preformatted\nPROGRAM test_sum\n  LOGICAL :: x(2) = [ .true., .false. ]\n  print *, PARITY(x) ! prints \"T\" (true).\nEND PROGRAM\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/PARITY.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/PARITY.html)"
- name: 8.214. PERROR
  id: perror
  summary: 'Description: Prints (on the C stderr stream) a newline-terminated error message corresponding to the last system error'
  description: "Next: [`POPCNT` — Number of bits set](popcnt), Previous: [`PARITY` — Reduction with exclusive OR](parity), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.214 PERROR — Print system error message [¶](#PERROR-----Print-system-error-message)\n\nDescription:  \nPrints (on the C `stderr` stream) a newline-terminated error message corresponding to the last system error. This is prefixed by `STRING`, a colon and a space. See `perror(3)`.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL PERROR(STRING)`\n\nArguments:  \n|          |                                                       |\n|----------|-------------------------------------------------------|\n| `STRING` | A scalar of type `CHARACTER` and of the default kind. |\n\nSee also:  \n[`IERRNO` — Get the last system error number](ierrno)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/PERROR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/PERROR.html)"
- name: 8.215. POPCNT
  id: popcnt
  summary: 'Description: POPCNT(I) returns the number of bits set (’1’ bits) in the binary representation of I'
  description: "Next: [`POPPAR` — Parity of the number of bits set](poppar), Previous: [`PERROR` — Print system error message](perror), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.215 POPCNT — Number of bits set [¶](#POPCNT-----Number-of-bits-set)\n\nDescription:  \n`POPCNT(I)` returns the number of bits set (’1’ bits) in the binary representation of `I`.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = POPCNT(I)`\n\nArguments:  \n|     |                             |\n|-----|-----------------------------|\n| `I` | Shall be of type `INTEGER`. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of the default integer kind.\n\nExample:  \n``` example-preformatted\nprogram test_population\n  print *, popcnt(127),       poppar(127)\n  print *, popcnt(huge(0_4)), poppar(huge(0_4))\n  print *, popcnt(huge(0_8)), poppar(huge(0_8))\nend program test_population\n```\n\nSee also:  \n[`POPPAR` — Parity of the number of bits set](poppar), [`LEADZ` — Number of leading zero bits of an integer](leadz), [`TRAILZ` — Number of trailing zero bits of an integer](trailz)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/POPCNT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/POPCNT.html)"
- name: 8.216. POPPAR
  id: poppar
  summary: 'Description: POPPAR(I) returns parity of the integer I, i.e'
  description: "Next: [`PRECISION` — Decimal precision of a real kind](precision), Previous: [`POPCNT` — Number of bits set](popcnt), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.216 POPPAR — Parity of the number of bits set [¶](#POPPAR-----Parity-of-the-number-of-bits-set)\n\nDescription:  \n`POPPAR(I)` returns parity of the integer `I`, i.e. the parity of the number of bits set (’1’ bits) in the binary representation of `I`. It is equal to 0 if `I` has an even number of bits set, and 1 for an odd number of ’1’ bits.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = POPPAR(I)`\n\nArguments:  \n|     |                             |\n|-----|-----------------------------|\n| `I` | Shall be of type `INTEGER`. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of the default integer kind.\n\nExample:  \n``` example-preformatted\nprogram test_population\n  print *, popcnt(127),       poppar(127)\n  print *, popcnt(huge(0_4)), poppar(huge(0_4))\n  print *, popcnt(huge(0_8)), poppar(huge(0_8))\nend program test_population\n```\n\nSee also:  \n[`POPCNT` — Number of bits set](popcnt), [`LEADZ` — Number of leading zero bits of an integer](leadz), [`TRAILZ` — Number of trailing zero bits of an integer](trailz)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/POPPAR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/POPPAR.html)"
- name: 8.217. PRECISION
  id: precision
  summary: 'Description: PRECISION(X) returns the decimal precision in the model of the type of X'
  description: "Next: [`PRESENT` — Determine whether an optional dummy argument is specified](present), Previous: [`POPPAR` — Parity of the number of bits set](poppar), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.217 PRECISION — Decimal precision of a real kind [¶](#PRECISION-----Decimal-precision-of-a-real-kind)\n\nDescription:  \n`PRECISION(X)` returns the decimal precision in the model of the type of `X`.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = PRECISION(X)`\n\nArguments:  \n|     |                                                                   |\n|-----|-------------------------------------------------------------------|\n| `X` | Shall be of type `REAL` or `COMPLEX`. It may be scalar or valued. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of the default integer kind.\n\nExample:  \n``` example-preformatted\nprogram prec_and_range\n  real(kind=4) :: x(2)\n  complex(kind=8) :: y\n\n  print *, precision(x), range(x)\n  print *, precision(y), range(y)\nend program prec_and_range\n```\n\nSee also:  \n[`SELECTED_REAL_KIND` — Choose real kind](selected_005freal_005fkind), [`RANGE` — Decimal exponent range](range)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/PRECISION.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/PRECISION.html)"
- name: 8.218. PRESENT
  id: present
  summary: 'Description: Determines whether an optional dummy argument is present'
  description: "Next: [`PRODUCT` — Product of array elements](product), Previous: [`PRECISION` — Decimal precision of a real kind](precision), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.218 PRESENT — Determine whether an optional dummy argument is specified [¶](#PRESENT-----Determine-whether-an-optional-dummy-argument-is-specified)\n\nDescription:  \nDetermines whether an optional dummy argument is present.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = PRESENT(A)`\n\nArguments:  \n|     |                                                                                                                                                                                                |\n|-----|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `A` | May be of any type and may be a pointer, scalar or array value, or a dummy procedure. It shall be the name of an optional dummy argument accessible within the current subroutine or function. |\n\nReturn value:  \nReturns either `TRUE` if the optional argument `A` is present, or `FALSE` otherwise.\n\nExample:  \n``` example-preformatted\nPROGRAM test_present\n  WRITE(*,*) f(), f(42)      ! \"F T\"\nCONTAINS\n  LOGICAL FUNCTION f(x)\n    INTEGER, INTENT(IN), OPTIONAL :: x\n    f = PRESENT(x)\n  END FUNCTION\nEND PROGRAM\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/PRESENT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/PRESENT.html)"
- name: 8.219. PRODUCT
  id: product
  summary: 'Description: Multiplies the elements of ARRAY along dimension DIM if the corresponding element in MASK is TRUE'
  description: "Next: [`RADIX` — Base of a model number](radix), Previous: [`PRESENT` — Determine whether an optional dummy argument is specified](present), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.219 PRODUCT — Product of array elements [¶](#PRODUCT-----Product-of-array-elements)\n\nDescription:  \nMultiplies the elements of `ARRAY` along dimension `DIM` if the corresponding element in `MASK` is `TRUE`.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n|                                        |\n|----------------------------------------|\n| `RESULT = PRODUCT(ARRAY[, MASK])`      |\n| `RESULT = PRODUCT(ARRAY, DIM[, MASK])` |\n\nArguments:  \n|         |                                                                                                                           |\n|---------|---------------------------------------------------------------------------------------------------------------------------|\n| `ARRAY` | Shall be an array of type `INTEGER`, `REAL` or `COMPLEX`.                                                                 |\n| `DIM`   | (Optional) shall be a scalar of type `INTEGER` with a value in the range from 1 to n, where n equals the rank of `ARRAY`. |\n| `MASK`  | (Optional) shall be of type `LOGICAL` and either be a scalar or an array of the same shape as `ARRAY`.                    |\n\nReturn value:  \nThe result is of the same type as `ARRAY`.\n\nIf `DIM` is absent, a scalar with the product of all elements in `ARRAY` is returned. Otherwise, an array of rank n-1, where n equals the rank of `ARRAY`, and a shape similar to that of `ARRAY` with dimension `DIM` dropped is returned.\n\nExample:  \n``` example-preformatted\nPROGRAM test_product\n  INTEGER :: x(5) = (/ 1, 2, 3, 4 ,5 /)\n  print *, PRODUCT(x)                    ! all elements, product = 120\n  print *, PRODUCT(x, MASK=MOD(x, 2)==1) ! odd elements, product = 15\nEND PROGRAM\n```\n\nSee also:  \n[`SUM` — Sum of array elements](sum)\n\nNext: [`RADIX` — Base of a model number](radix), Previous: [`PRESENT` — Determine whether an optional dummy argument is specified](present), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/PRODUCT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/PRODUCT.html)"
- name: 8.220. RADIX
  id: radix
  summary: 'Description: RADIX(X) returns the base of the model representing the entity X'
  description: "Next: [`RAN` — Real pseudo-random number](ran), Previous: [`PRODUCT` — Product of array elements](product), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.220 RADIX — Base of a model number [¶](#RADIX-----Base-of-a-model-number)\n\nDescription:  \n`RADIX(X)` returns the base of the model representing the entity `X`.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = RADIX(X)`\n\nArguments:  \n|     |                                      |\n|-----|--------------------------------------|\n| `X` | Shall be of type `INTEGER` or `REAL` |\n\nReturn value:  \nThe return value is a scalar of type `INTEGER` and of the default integer kind.\n\nExample:  \n``` example-preformatted\nprogram test_radix\n  print *, \"The radix for the default integer kind is\", radix(0)\n  print *, \"The radix for the default real kind is\", radix(0.0)\nend program test_radix\n```\n\nSee also:  \n[`SELECTED_REAL_KIND` — Choose real kind](selected_005freal_005fkind)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RADIX.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RADIX.html)"
- name: 8.221. RAN
  id: ran
  summary: 'Description: For compatibility with HP FORTRAN 77/iX, the RAN intrinsic is provided as an alias for RAND'
  description: "Next: [`RAND` — Real pseudo-random number](rand), Previous: [`RADIX` — Base of a model number](radix), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.221 RAN — Real pseudo-random number [¶](#RAN-----Real-pseudo-random-number)\n\nDescription:  \nFor compatibility with HP FORTRAN 77/iX, the `RAN` intrinsic is provided as an alias for `RAND`. See [`RAND` — Real pseudo-random number](rand) for complete documentation.\n\nStandard:  \nGNU extension\n\nClass:  \nFunction\n\nSee also:  \n[`RAND` — Real pseudo-random number](rand), [`RANDOM_NUMBER` — Pseudo-random number](random_005fnumber)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RAN.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RAN.html)"
- name: 8.222. RAND
  id: rand
  summary: 'Description: RAND(FLAG) returns a pseudo-random number from a uniform distribution between 0 and 1'
  description: "Next: [`RANDOM_INIT` — Initialize a pseudo-random number generator](random_005finit), Previous: [`RAN` — Real pseudo-random number](ran), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.222 RAND — Real pseudo-random number [¶](#RAND-----Real-pseudo-random-number)\n\nDescription:  \n`RAND(FLAG)` returns a pseudo-random number from a uniform distribution between 0 and 1. If `FLAG` is 0, the next number in the current sequence is returned; if `FLAG` is 1, the generator is restarted by `CALL SRAND(0)`; if `FLAG` has any other value, it is used as a new seed with `SRAND`.\n\nThis intrinsic routine is provided for backwards compatibility with GNU Fortran 77. It implements a simple modulo generator as provided by `g77`. For new code, one should consider the use of [`RANDOM_NUMBER` — Pseudo-random number](random_005fnumber) as it implements a superior algorithm.\n\nStandard:  \nGNU extension\n\nClass:  \nFunction\n\nSyntax:  \n`RESULT = RAND(I)`\n\nArguments:  \n|     |                                        |\n|-----|----------------------------------------|\n| `I` | Shall be a scalar `INTEGER` of kind 4. |\n\nReturn value:  \nThe return value is of `REAL` type and the default kind.\n\nExample:  \n``` example-preformatted\nprogram test_rand\n  integer,parameter :: seed = 86456\n  \n  call srand(seed)\n  print *, rand(), rand(), rand(), rand()\n  print *, rand(seed), rand(), rand(), rand()\nend program test_rand\n```\n\nSee also:  \n[`SRAND` — Reinitialize the random number generator](srand), [`RANDOM_NUMBER` — Pseudo-random number](random_005fnumber)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RAND.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RAND.html)"
- name: 8.223. RANDOM_INIT
  id: random_005finit
  summary: 'Description: Initializes the state of the pseudorandom number generator used by RANDOM_NUMBER'
  description: "Next: [`RANDOM_NUMBER` — Pseudo-random number](random_005fnumber), Previous: [`RAND` — Real pseudo-random number](rand), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.223 RANDOM_INIT — Initialize a pseudo-random number generator [¶](#RANDOM_005fINIT-----Initialize-a-pseudo-random-number-generator)\n\nDescription:  \nInitializes the state of the pseudorandom number generator used by `RANDOM_NUMBER`.\n\nStandard:  \nFortran 2018\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL RANDOM_INIT(REPEATABLE, IMAGE_DISTINCT)`\n\nArguments:  \n|                  |                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n|------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `REPEATABLE`     | Shall be a scalar with a `LOGICAL` type, and it is `INTENT(IN)`. If it is `.true.`, the seed is set to a processor-dependent value that is the same each time `RANDOM_INIT` is called from the same image. The term “same image” means a single instance of program execution. The sequence of random numbers is different for repeated execution of the program. If it is `.false.`, the seed is set to a processor-dependent value. |\n| `IMAGE_DISTINCT` | Shall be a scalar with a `LOGICAL` type, and it is `INTENT(IN)`. If it is `.true.`, the seed is set to a processor-dependent value that is distinct from th seed set by a call to `RANDOM_INIT` in another image. If it is `.false.`, the seed is set to a value that does depend which image called `RANDOM_INIT`.                                                                                                                   |\n\nExample:  \n``` example-preformatted\nprogram test_random_seed\n  implicit none\n  real x(3), y(3)\n  call random_init(.true., .true.)\n  call random_number(x)\n  call random_init(.true., .true.)\n  call random_number(y)\n  ! x and y are the same sequence\n  if (any(x /= y)) call abort\nend program test_random_seed\n```\n\nSee also:  \n[`RANDOM_NUMBER` — Pseudo-random number](random_005fnumber), [`RANDOM_SEED` — Initialize a pseudo-random number sequence](random_005fseed)\n\nNext: [`RANDOM_NUMBER` — Pseudo-random number](random_005fnumber), Previous: [`RAND` — Real pseudo-random number](rand), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RANDOM_005fINIT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RANDOM_005fINIT.html)"
- name: 8.224. RANDOM_NUMBER
  id: random_005fnumber
  summary: 'Description: Returns a single pseudorandom number or an array of pseudorandom numbers from the uniform distribution over the range 0 \leq x < 1'
  description: "Next: [`RANDOM_SEED` — Initialize a pseudo-random number sequence](random_005fseed), Previous: [`RANDOM_INIT` — Initialize a pseudo-random number generator](random_005finit), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.224 RANDOM_NUMBER — Pseudo-random number [¶](#RANDOM_005fNUMBER-----Pseudo-random-number)\n\nDescription:  \nReturns a single pseudorandom number or an array of pseudorandom numbers from the uniform distribution over the range *0 \\leq x \\< 1*.\n\nThe runtime-library implements the xoshiro256\\*\\* pseudorandom number generator (PRNG). This generator has a period of *2^{256} - 1*, and when using multiple threads up to *2^{128}* threads can each generate *2^{128}* random numbers before any aliasing occurs.\n\nNote that in a multi-threaded program (e.g. using OpenMP directives), each thread will have its own random number state. For details of the seeding procedure, see the documentation for the `RANDOM_SEED` intrinsic.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL RANDOM_NUMBER(HARVEST)`\n\nArguments:  \n|           |                                               |\n|-----------|-----------------------------------------------|\n| `HARVEST` | Shall be a scalar or an array of type `REAL`. |\n\nExample:  \n``` example-preformatted\nprogram test_random_number\n  REAL :: r(5,5)\n  CALL RANDOM_NUMBER(r)\nend program\n```\n\nSee also:  \n[`RANDOM_SEED` — Initialize a pseudo-random number sequence](random_005fseed), [`RANDOM_INIT` — Initialize a pseudo-random number generator](random_005finit)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RANDOM_005fNUMBER.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RANDOM_005fNUMBER.html)"
- name: 8.225. RANDOM_SEED
  id: random_005fseed
  summary: 'Description: Restarts or queries the state of the pseudorandom number generator used by RANDOM_NUMBER'
  description: "Next: [`RANGE` — Decimal exponent range](range), Previous: [`RANDOM_NUMBER` — Pseudo-random number](random_005fnumber), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.225 RANDOM_SEED — Initialize a pseudo-random number sequence [¶](#RANDOM_005fSEED-----Initialize-a-pseudo-random-number-sequence)\n\nDescription:  \nRestarts or queries the state of the pseudorandom number generator used by `RANDOM_NUMBER`.\n\nIf `RANDOM_SEED` is called without arguments, it is seeded with random data retrieved from the operating system.\n\nAs an extension to the Fortran standard, the GFortran `RANDOM_NUMBER` supports multiple threads. Each thread in a multi-threaded program has its own seed. When `RANDOM_SEED` is called either without arguments or with the `PUT` argument, the given seed is copied into a master seed as well as the seed of the current thread. When a new thread uses `RANDOM_NUMBER` for the first time, the seed is copied from the master seed, and forwarded *N \\* 2^{128}* steps to guarantee that the random stream does not alias any other stream in the system, where `N` is the number of threads that have used `RANDOM_NUMBER` so far during the program execution.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL RANDOM_SEED([SIZE, PUT, GET])`\n\nArguments:  \n|        |                                                                                                                                                                                                |\n|--------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `SIZE` | (Optional) Shall be a scalar and of type default `INTEGER`, with `INTENT(OUT)`. It specifies the minimum size of the arrays used with the `PUT` and `GET` arguments.                           |\n| `PUT`  | (Optional) Shall be an array of type default `INTEGER` and rank one. It is `INTENT(IN)` and the size of the array must be larger than or equal to the number returned by the `SIZE` argument.  |\n| `GET`  | (Optional) Shall be an array of type default `INTEGER` and rank one. It is `INTENT(OUT)` and the size of the array must be larger than or equal to the number returned by the `SIZE` argument. |\n\nExample:  \n``` example-preformatted\nprogram test_random_seed\n  implicit none\n  integer, allocatable :: seed(:)\n  integer :: n\n\n  call random_seed(size = n)\n  allocate(seed(n))\n  call random_seed(get=seed)\n  write (*, *) seed\nend program test_random_seed\n```\n\nSee also:  \n[`RANDOM_NUMBER` — Pseudo-random number](random_005fnumber), [`RANDOM_INIT` — Initialize a pseudo-random number generator](random_005finit)\n\nNext: [`RANGE` — Decimal exponent range](range), Previous: [`RANDOM_NUMBER` — Pseudo-random number](random_005fnumber), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RANDOM_005fSEED.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RANDOM_005fSEED.html)"
- name: 8.226. RANGE
  id: range
  summary: 'Description: RANGE(X) returns the decimal exponent range in the model of the type of X'
  description: "Next: [`RANK` — Rank of a data object](rank), Previous: [`RANDOM_SEED` — Initialize a pseudo-random number sequence](random_005fseed), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.226 RANGE — Decimal exponent range [¶](#RANGE-----Decimal-exponent-range)\n\nDescription:  \n`RANGE(X)` returns the decimal exponent range in the model of the type of `X`.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = RANGE(X)`\n\nArguments:  \n|     |                                                  |\n|-----|--------------------------------------------------|\n| `X` | Shall be of type `INTEGER`, `REAL` or `COMPLEX`. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of the default integer kind.\n\nExample:  \nSee `PRECISION` for an example.\n\nSee also:  \n[`SELECTED_REAL_KIND` — Choose real kind](selected_005freal_005fkind), [`PRECISION` — Decimal precision of a real kind](precision)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RANGE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RANGE.html)"
- name: 8.227. RANK
  id: rank
  summary: 'Description: RANK(A) returns the rank of a scalar or array data object'
  description: "Next: [`REAL` — Convert to real type](real), Previous: [`RANGE` — Decimal exponent range](range), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.227 RANK — Rank of a data object [¶](#RANK-----Rank-of-a-data-object)\n\nDescription:  \n`RANK(A)` returns the rank of a scalar or array data object.\n\nStandard:  \nTechnical Specification (TS) 29113\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = RANK(A)`\n\nArguments:  \n|     |                    |\n|-----|--------------------|\n| `A` | can be of any type |\n\nReturn value:  \nThe return value is of type `INTEGER` and of the default integer kind. For arrays, their rank is returned; for scalars zero is returned.\n\nExample:  \n``` example-preformatted\nprogram test_rank\n  integer :: a\n  real, allocatable :: b(:,:)\n\n  print *, rank(a), rank(b) ! Prints:  0  2\nend program test_rank\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RANK.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RANK.html)"
- name: 8.228. REAL
  id: real
  summary: 'Description: REAL(A [, KIND]) converts its argument A to a real type'
  description: "Next: [`RENAME` — Rename a file](rename), Previous: [`RANK` — Rank of a data object](rank), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.228 REAL — Convert to real type [¶](#REAL-----Convert-to-real-type)\n\nDescription:  \n`REAL(A [, KIND])` converts its argument `A` to a real type. The `REALPART` function is provided for compatibility with `g77`, and its use is strongly discouraged.\n\nStandard:  \nFortran 77 and later, with `KIND` argument Fortran 90 and later, has GNU extensions\n\nClass:  \nElemental function\n\nSyntax:  \n|                             |\n|-----------------------------|\n| `RESULT = REAL(A [, KIND])` |\n| `RESULT = REALPART(Z)`      |\n\nArguments:  \n|        |                                                                                                |\n|--------|------------------------------------------------------------------------------------------------|\n| `A`    | Shall be `INTEGER`, `REAL`, or `COMPLEX`.                                                      |\n| `KIND` | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result. |\n\nReturn value:  \nThese functions return a `REAL` variable or array under the following rules:\n\n\\(A\\)  \n`REAL(A)` is converted to a default real type if `A` is an integer or real variable.\n\n\\(B\\)  \n`REAL(A)` is converted to a real type with the kind type parameter of `A` if `A` is a complex variable.\n\n\\(C\\)  \n`REAL(A, KIND)` is converted to a real type with kind type parameter `KIND` if `A` is a complex, integer, or real variable.\n\nExample:  \n``` example-preformatted\nprogram test_real\n  complex :: x = (1.0, 2.0)\n  print *, real(x), real(x,8), realpart(x)\nend program test_real\n```\n\nSpecific names:  \n| Name        | Argument     | Return type | Standard              |\n|-------------|--------------|-------------|-----------------------|\n| `FLOAT(A)`  | `INTEGER(4)` | `REAL(4)`   | Fortran 77 and later  |\n| `DFLOAT(A)` | `INTEGER(4)` | `REAL(8)`   | GNU extension         |\n| `FLOATI(A)` | `INTEGER(2)` | `REAL(4)`   | GNU extension (-fdec) |\n| `FLOATJ(A)` | `INTEGER(4)` | `REAL(4)`   | GNU extension (-fdec) |\n| `FLOATK(A)` | `INTEGER(8)` | `REAL(4)`   | GNU extension (-fdec) |\n| `SNGL(A)`   | `REAL(8)`    | `REAL(4)`   | Fortran 77 and later  |\n\nSee also:  \n[`DBLE` — Double conversion function](dble)\n\nNext: [`RENAME` — Rename a file](rename), Previous: [`RANK` — Rank of a data object](rank), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/REAL.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/REAL.html)"
- name: 8.229. RENAME
  id: rename
  summary: 'Description: Renames a file from file PATH1 to PATH2'
  description: "Next: [`REPEAT` — Repeated string concatenation](repeat), Previous: [`REAL` — Convert to real type](real), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.229 RENAME — Rename a file [¶](#RENAME-----Rename-a-file)\n\nDescription:  \nRenames a file from file `PATH1` to `PATH2`. A null character (`CHAR(0)`) can be used to mark the end of the names in `PATH1` and `PATH2`; otherwise, trailing blanks in the file names are ignored. If the `STATUS` argument is supplied, it contains 0 on success or a nonzero error code upon return; see `rename(2)`.\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                                        |\n|----------------------------------------|\n| `CALL RENAME(PATH1, PATH2 [, STATUS])` |\n| `STATUS = RENAME(PATH1, PATH2)`        |\n\nArguments:  \n|          |                                                |\n|----------|------------------------------------------------|\n| `PATH1`  | Shall be of default `CHARACTER` type.          |\n| `PATH2`  | Shall be of default `CHARACTER` type.          |\n| `STATUS` | (Optional) Shall be of default `INTEGER` type. |\n\nSee also:  \n[`LINK` — Create a hard link](link)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RENAME.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RENAME.html)"
- name: 8.230. REPEAT
  id: repeat
  summary: 'Description: Concatenates NCOPIES copies of a string'
  description: "Next: [`RESHAPE` — Function to reshape an array](reshape), Previous: [`RENAME` — Rename a file](rename), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.230 REPEAT — Repeated string concatenation [¶](#REPEAT-----Repeated-string-concatenation)\n\nDescription:  \nConcatenates `NCOPIES` copies of a string.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n`RESULT = REPEAT(STRING, NCOPIES)`\n\nArguments:  \n|           |                                          |\n|-----------|------------------------------------------|\n| `STRING`  | Shall be scalar and of type `CHARACTER`. |\n| `NCOPIES` | Shall be scalar and of type `INTEGER`.   |\n\nReturn value:  \nA new scalar of type `CHARACTER` built up from `NCOPIES` copies of `STRING`.\n\nExample:  \n``` example-preformatted\nprogram test_repeat\n  write(*,*) repeat(\"x\", 5)   ! \"xxxxx\"\nend program\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/REPEAT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/REPEAT.html)"
- name: 8.231. RESHAPE
  id: reshape
  summary: 'Description: Reshapes SOURCE to correspond to SHAPE'
  description: "Next: [`RRSPACING` — Reciprocal of the relative spacing](rrspacing), Previous: [`REPEAT` — Repeated string concatenation](repeat), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.231 RESHAPE — Function to reshape an array [¶](#RESHAPE-----Function-to-reshape-an-array)\n\nDescription:  \nReshapes `SOURCE` to correspond to `SHAPE`. If necessary, the new array may be padded with elements from `PAD` or permuted as defined by `ORDER`.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n`RESULT = RESHAPE(SOURCE, SHAPE[, PAD, ORDER])`\n\nArguments:  \n|          |                                                                                                                                                                                                                                             |\n|----------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `SOURCE` | Shall be an array of any type.                                                                                                                                                                                                              |\n| `SHAPE`  | Shall be of type `INTEGER` and an array of rank one. Its values must be positive or zero.                                                                                                                                                   |\n| `PAD`    | (Optional) shall be an array of the same type as `SOURCE`.                                                                                                                                                                                  |\n| `ORDER`  | (Optional) shall be of type `INTEGER` and an array of the same shape as `SHAPE`. Its values shall be a permutation of the numbers from 1 to n, where n is the size of `SHAPE`. If `ORDER` is absent, the natural ordering shall be assumed. |\n\nReturn value:  \nThe result is an array of shape `SHAPE` with the same type as `SOURCE`.\n\nExample:  \n``` example-preformatted\nPROGRAM test_reshape\n  INTEGER, DIMENSION(4) :: x\n  WRITE(*,*) SHAPE(x)                       ! prints \"4\"\n  WRITE(*,*) SHAPE(RESHAPE(x, (/2, 2/)))    ! prints \"2 2\"\nEND PROGRAM\n```\n\nSee also:  \n[`SHAPE` — Determine the shape of an array](shape)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RESHAPE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RESHAPE.html)"
- name: 8.232. RRSPACING
  id: rrspacing
  summary: 'Description: RRSPACING(X) returns the reciprocal of the relative spacing of model numbers near X'
  description: "Next: [`RSHIFT` — Right shift bits](rshift), Previous: [`RESHAPE` — Function to reshape an array](reshape), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.232 RRSPACING — Reciprocal of the relative spacing [¶](#RRSPACING-----Reciprocal-of-the-relative-spacing)\n\nDescription:  \n`RRSPACING(X)` returns the reciprocal of the relative spacing of model numbers near `X`.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = RRSPACING(X)`\n\nArguments:  \n|     |                          |\n|-----|--------------------------|\n| `X` | Shall be of type `REAL`. |\n\nReturn value:  \nThe return value is of the same type and kind as `X`. The value returned is equal to `ABS(FRACTION(X)) * FLOAT(RADIX(X))**DIGITS(X)`.\n\nSee also:  \n[`SPACING` — Smallest distance between two numbers of a given type](spacing)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RRSPACING.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RRSPACING.html)"
- name: 8.233. RSHIFT
  id: rshift
  summary: 'Description: RSHIFT returns a value corresponding to I with all of the bits shifted right by SHIFT places'
  description: "Next: [`SAME_TYPE_AS` — Query dynamic types for equality](same_005ftype_005fas), Previous: [`RRSPACING` — Reciprocal of the relative spacing](rrspacing), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.233 RSHIFT — Right shift bits [¶](#RSHIFT-----Right-shift-bits)\n\nDescription:  \n`RSHIFT` returns a value corresponding to `I` with all of the bits shifted right by `SHIFT` places. `SHIFT` shall be nonnegative and less than or equal to `BIT_SIZE(I)`, otherwise the result value is undefined. Bits shifted out from the right end are lost. The fill is arithmetic: the bits shifted in from the left end are equal to the leftmost bit, which in two’s complement representation is the sign bit.\n\nThis function has been superseded by the `SHIFTA` intrinsic, which is standard in Fortran 2008 and later.\n\nStandard:  \nGNU extension\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = RSHIFT(I, SHIFT)`\n\nArguments:  \n|         |                              |\n|---------|------------------------------|\n| `I`     | The type shall be `INTEGER`. |\n| `SHIFT` | The type shall be `INTEGER`. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of the same kind as `I`.\n\nSee also:  \n[`ISHFT` — Shift bits](ishft), [`ISHFTC` — Shift bits circularly](ishftc), [`LSHIFT` — Left shift bits](lshift), [`SHIFTA` — Right shift with fill](shifta), [`SHIFTR` — Right shift](shiftr), [`SHIFTL` — Left shift](shiftl)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RSHIFT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/RSHIFT.html)"
- name: 8.234. SAME_TYPE_AS
  id: same_005ftype_005fas
  summary: 'Description: Query dynamic types for equality'
  description: "Next: [`SCALE` — Scale a real value](scale), Previous: [`RSHIFT` — Right shift bits](rshift), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.234 SAME_TYPE_AS — Query dynamic types for equality [¶](#SAME_005fTYPE_005fAS-----Query-dynamic-types-for-equality)\n\nDescription:  \nQuery dynamic types for equality.\n\nStandard:  \nFortran 2003 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = SAME_TYPE_AS(A, B)`\n\nArguments:  \n|     |                                                                          |\n|-----|--------------------------------------------------------------------------|\n| `A` | Shall be an object of extensible declared type or unlimited polymorphic. |\n| `B` | Shall be an object of extensible declared type or unlimited polymorphic. |\n\nReturn value:  \nThe return value is a scalar of type default logical. It is true if and only if the dynamic type of A is the same as the dynamic type of B.\n\nSee also:  \n[`EXTENDS_TYPE_OF` — Query dynamic type for extension](extends_005ftype_005fof)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SAME_005fTYPE_005fAS.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SAME_005fTYPE_005fAS.html)"
- name: 8.235. SCALE
  id: scale
  summary: 'Description: SCALE(X,I) returns X * RADIX(X)**I'
  description: "Next: [`SCAN` — Scan a string for the presence of a set of characters](scan), Previous: [`SAME_TYPE_AS` — Query dynamic types for equality](same_005ftype_005fas), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.235 SCALE — Scale a real value [¶](#SCALE-----Scale-a-real-value)\n\nDescription:  \n`SCALE(X,I)` returns `X * RADIX(X)**I`.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = SCALE(X, I)`\n\nArguments:  \n|     |                                                |\n|-----|------------------------------------------------|\n| `X` | The type of the argument shall be a `REAL`.    |\n| `I` | The type of the argument shall be a `INTEGER`. |\n\nReturn value:  \nThe return value is of the same type and kind as `X`. Its value is `X * RADIX(X)**I`.\n\nExample:  \n``` example-preformatted\nprogram test_scale\n  real :: x = 178.1387e-4\n  integer :: i = 5\n  print *, scale(x,i), x*radix(x)**i\nend program test_scale\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SCALE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SCALE.html)"
- name: 8.236. SCAN
  id: scan
  summary: 'Description: Scans a STRING for any of the characters in a SET of characters'
  description: "Next: [`SECNDS` — Time function](secnds), Previous: [`SCALE` — Scale a real value](scale), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.236 SCAN — Scan a string for the presence of a set of characters [¶](#SCAN-----Scan-a-string-for-the-presence-of-a-set-of-characters)\n\nDescription:  \nScans a `STRING` for any of the characters in a `SET` of characters.\n\nIf `BACK` is either absent or equals `FALSE`, this function returns the position of the leftmost character of `STRING` that is in `SET`. If `BACK` equals `TRUE`, the rightmost position is returned. If no character of `SET` is found in `STRING`, the result is zero.\n\nStandard:  \nFortran 90 and later, with `KIND` argument Fortran 2003 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = SCAN(STRING, SET[, BACK [, KIND]])`\n\nArguments:  \n|          |                                                                                                |\n|----------|------------------------------------------------------------------------------------------------|\n| `STRING` | Shall be of type `CHARACTER`.                                                                  |\n| `SET`    | Shall be of type `CHARACTER`.                                                                  |\n| `BACK`   | (Optional) shall be of type `LOGICAL`.                                                         |\n| `KIND`   | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of kind `KIND`. If `KIND` is absent, the return value is of default integer kind.\n\nExample:  \n``` example-preformatted\nPROGRAM test_scan\n  WRITE(*,*) SCAN(\"FORTRAN\", \"AO\")          ! 2, found 'O'\n  WRITE(*,*) SCAN(\"FORTRAN\", \"AO\", .TRUE.)  ! 6, found 'A'\n  WRITE(*,*) SCAN(\"FORTRAN\", \"C++\")         ! 0, found none\nEND PROGRAM\n```\n\nSee also:  \n[`INDEX` — Position of a substring within a string](index-intrinsic), [`VERIFY` — Scan a string for characters not a given set](verify)\n\nNext: [`SECNDS` — Time function](secnds), Previous: [`SCALE` — Scale a real value](scale), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SCAN.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SCAN.html)"
- name: 8.237. SECNDS
  id: secnds
  summary: 'Description: SECNDS(X) gets the time in seconds from the real-time system clock'
  description: "Next: [`SECOND` — CPU time function](second), Previous: [`SCAN` — Scan a string for the presence of a set of characters](scan), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.237 SECNDS — Time function [¶](#SECNDS-----Time-function)\n\nDescription:  \n`SECNDS(X)` gets the time in seconds from the real-time system clock. `X` is a reference time, also in seconds. If this is zero, the time in seconds from midnight is returned. This function is non-standard and its use is discouraged.\n\nStandard:  \nGNU extension\n\nClass:  \nFunction\n\nSyntax:  \n`RESULT = SECNDS (X)`\n\nArguments:  \n|     |                             |\n|-----|-----------------------------|\n| `T` | Shall be of type `REAL(4)`. |\n| `X` | Shall be of type `REAL(4)`. |\n\nReturn value:  \nNone\n\nExample:  \n``` example-preformatted\nprogram test_secnds\n    integer :: i\n    real(4) :: t1, t2\n    print *, secnds (0.0)   ! seconds since midnight\n    t1 = secnds (0.0)       ! reference time\n    do i = 1, 10000000      ! do something\n    end do\n    t2 = secnds (t1)        ! elapsed time\n    print *, \"Something took \", t2, \" seconds.\"\nend program test_secnds\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SECNDS.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SECNDS.html)"
- name: 8.238. SECOND
  id: second
  summary: 'Description: Returns a REAL(4) value representing the elapsed CPU time in seconds'
  description: "Next: [`SELECTED_CHAR_KIND` — Choose character kind](selected_005fchar_005fkind), Previous: [`SECNDS` — Time function](secnds), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.238 SECOND — CPU time function [¶](#SECOND-----CPU-time-function)\n\nDescription:  \nReturns a `REAL(4)` value representing the elapsed CPU time in seconds. This provides the same functionality as the standard `CPU_TIME` intrinsic, and is only included for backwards compatibility.\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                     |\n|---------------------|\n| `CALL SECOND(TIME)` |\n| `TIME = SECOND()`   |\n\nArguments:  \n|        |                             |\n|--------|-----------------------------|\n| `TIME` | Shall be of type `REAL(4)`. |\n\nReturn value:  \nIn either syntax, `TIME` is set to the process’s current runtime in seconds.\n\nSee also:  \n[`CPU_TIME` — CPU elapsed time in seconds](cpu_005ftime)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SECOND.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SECOND.html)"
- name: 8.239. SELECTED_CHAR_KIND
  id: selected_005fchar_005fkind
  summary: 'Description: SELECTED_CHAR_KIND(NAME) returns the kind value for the character set named NAME, if a character set with such a name is supported, or -1 otherwise'
  description: "Next: [`SELECTED_INT_KIND` — Choose integer kind](selected_005fint_005fkind), Previous: [`SECOND` — CPU time function](second), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.239 SELECTED_CHAR_KIND — Choose character kind [¶](#SELECTED_005fCHAR_005fKIND-----Choose-character-kind)\n\nDescription:  \n`SELECTED_CHAR_KIND(NAME)` returns the kind value for the character set named `NAME`, if a character set with such a name is supported, or *-1* otherwise. Currently, supported character sets include “ASCII” and “DEFAULT”, which are equivalent, and “ISO_10646” (Universal Character Set, UCS-4) which is commonly known as Unicode.\n\nStandard:  \nFortran 2003 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n`RESULT = SELECTED_CHAR_KIND(NAME)`\n\nArguments:  \n|        |                                                      |\n|--------|------------------------------------------------------|\n| `NAME` | Shall be a scalar and of the default character type. |\n\nExample:  \n``` example-preformatted\nprogram character_kind\n  use iso_fortran_env\n  implicit none\n  integer, parameter :: ascii = selected_char_kind (\"ascii\")\n  integer, parameter :: ucs4  = selected_char_kind ('ISO_10646')\n\n  character(kind=ascii, len=26) :: alphabet\n  character(kind=ucs4,  len=30) :: hello_world\n\n  alphabet = ascii_\"abcdefghijklmnopqrstuvwxyz\"\n  hello_world = ucs4_'Hello World and Ni Hao -- ' &\n                // char (int (z'4F60'), ucs4)     &\n                // char (int (z'597D'), ucs4)\n\n  write (*,*) alphabet\n\n  open (output_unit, encoding='UTF-8')\n  write (*,*) trim (hello_world)\nend program character_kind\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SELECTED_005fCHAR_005fKIND.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SELECTED_005fCHAR_005fKIND.html)"
- name: 8.240. SELECTED_INT_KIND
  id: selected_005fint_005fkind
  summary: 'Description: SELECTED_INT_KIND(R) return the kind value of the smallest integer type that can represent all values ranging from -10^R (exclusive) to 10^R (exclusive)'
  description: "Next: [`SELECTED_REAL_KIND` — Choose real kind](selected_005freal_005fkind), Previous: [`SELECTED_CHAR_KIND` — Choose character kind](selected_005fchar_005fkind), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.240 SELECTED_INT_KIND — Choose integer kind [¶](#SELECTED_005fINT_005fKIND-----Choose-integer-kind)\n\nDescription:  \n`SELECTED_INT_KIND(R)` return the kind value of the smallest integer type that can represent all values ranging from *-10^R* (exclusive) to *10^R* (exclusive). If there is no integer kind that accommodates this range, `SELECTED_INT_KIND` returns *-1*.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n`RESULT = SELECTED_INT_KIND(R)`\n\nArguments:  \n|     |                                          |\n|-----|------------------------------------------|\n| `R` | Shall be a scalar and of type `INTEGER`. |\n\nExample:  \n``` example-preformatted\nprogram large_integers\n  integer,parameter :: k5 = selected_int_kind(5)\n  integer,parameter :: k15 = selected_int_kind(15)\n  integer(kind=k5) :: i5\n  integer(kind=k15) :: i15\n\n  print *, huge(i5), huge(i15)\n\n  ! The following inequalities are always true\n  print *, huge(i5) >= 10_k5**5-1\n  print *, huge(i15) >= 10_k15**15-1\nend program large_integers\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SELECTED_005fINT_005fKIND.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SELECTED_005fINT_005fKIND.html)"
- name: 8.241. SELECTED_REAL_KIND
  id: selected_005freal_005fkind
  summary: SELECTED_REAL_KIND(P,R) returns the kind value of a real data type with decimal precision of at least P digits, exponent range of at least R, and with a radix of RADIX
  description: "Next: [`SET_EXPONENT` — Set the exponent of the model](set_005fexponent), Previous: [`SELECTED_INT_KIND` — Choose integer kind](selected_005fint_005fkind), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.241 SELECTED_REAL_KIND — Choose real kind [¶](#SELECTED_005fREAL_005fKIND-----Choose-real-kind)\n\nDescription:\n\n`SELECTED_REAL_KIND(P,R)` returns the kind value of a real data type with decimal precision of at least `P` digits, exponent range of at least `R`, and with a radix of `RADIX`.\n\nStandard:\n\nFortran 90 and later, with `RADIX` Fortran 2008 or later\n\nClass:\n\nTransformational function\n\nSyntax:\n\n`RESULT = SELECTED_REAL_KIND([P, R, RADIX])`\n\nArguments:\n\n|         |                                                     |\n|---------|-----------------------------------------------------|\n| `P`     | (Optional) shall be a scalar and of type `INTEGER`. |\n| `R`     | (Optional) shall be a scalar and of type `INTEGER`. |\n| `RADIX` | (Optional) shall be a scalar and of type `INTEGER`. |\n\nBefore Fortran 2008, at least one of the arguments `R` or `P` shall be present; since Fortran 2008, they are assumed to be zero if absent.\n\nReturn value:\n\n`SELECTED_REAL_KIND` returns the value of the kind type parameter of a real data type with decimal precision of at least `P` digits, a decimal exponent range of at least `R`, and with the requested `RADIX`. If the `RADIX` parameter is absent, real kinds with any radix can be returned. If more than one real data type meet the criteria, the kind of the data type with the smallest decimal precision is returned. If no real data type matches the criteria, the result is\n\n-1 if the processor does not support a real data type with a\n\nprecision greater than or equal to `P`, but the `R` and `RADIX` requirements can be fulfilled\n\n-2 if the processor does not support a real type with an exponent\n\nrange greater than or equal to `R`, but `P` and `RADIX` are fulfillable\n\n-3 if `RADIX` but not `P` and `R` requirements\n\nare fulfillable\n\n-4 if `RADIX` and either `P` or `R` requirements\n\nare fulfillable\n\n-5 if there is no real type with the given `RADIX`\n\nExample:\n\n``` example-preformatted\nprogram real_kinds\n  integer,parameter :: p6 = selected_real_kind(6)\n  integer,parameter :: p10r100 = selected_real_kind(10,100)\n  integer,parameter :: r400 = selected_real_kind(r=400)\n  real(kind=p6) :: x\n  real(kind=p10r100) :: y\n  real(kind=r400) :: z\n\n  print *, precision(x), range(x)\n  print *, precision(y), range(y)\n  print *, precision(z), range(z)\nend program real_kinds\n```\n\nSee also:\n\n[`PRECISION` — Decimal precision of a real kind](precision), [`RANGE` — Decimal exponent range](range), [`RADIX` — Base of a model number](radix)\n\nNext: [`SET_EXPONENT` — Set the exponent of the model](set_005fexponent), Previous: [`SELECTED_INT_KIND` — Choose integer kind](selected_005fint_005fkind), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SELECTED_005fREAL_005fKIND.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SELECTED_005fREAL_005fKIND.html)"
- name: 8.242. SET_EXPONENT
  id: set_005fexponent
  summary: 'Description: SET_EXPONENT(X, I) returns the real number whose fractional part is that of X and whose exponent part is I'
  description: "Next: [`SHAPE` — Determine the shape of an array](shape), Previous: [`SELECTED_REAL_KIND` — Choose real kind](selected_005freal_005fkind), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.242 SET_EXPONENT — Set the exponent of the model [¶](#SET_005fEXPONENT-----Set-the-exponent-of-the-model)\n\nDescription:  \n`SET_EXPONENT(X, I)` returns the real number whose fractional part is that of `X` and whose exponent part is `I`.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = SET_EXPONENT(X, I)`\n\nArguments:  \n|     |                             |\n|-----|-----------------------------|\n| `X` | Shall be of type `REAL`.    |\n| `I` | Shall be of type `INTEGER`. |\n\nReturn value:  \nThe return value is of the same type and kind as `X`. The real number whose fractional part is that of `X` and whose exponent part if `I` is returned; it is `FRACTION(X) * RADIX(X)**I`.\n\nExample:  \n``` example-preformatted\nPROGRAM test_setexp\n  REAL :: x = 178.1387e-4\n  INTEGER :: i = 17\n  PRINT *, SET_EXPONENT(x, i), FRACTION(x) * RADIX(x)**i\nEND PROGRAM\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SET_005fEXPONENT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SET_005fEXPONENT.html)"
- name: 8.243. SHAPE
  id: shape
  summary: 'Description: Determines the shape of an array'
  description: "Next: [`SHIFTA` — Right shift with fill](shifta), Previous: [`SET_EXPONENT` — Set the exponent of the model](set_005fexponent), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.243 SHAPE — Determine the shape of an array [¶](#SHAPE-----Determine-the-shape-of-an-array)\n\nDescription:  \nDetermines the shape of an array.\n\nStandard:  \nFortran 90 and later, with `KIND` argument Fortran 2003 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = SHAPE(SOURCE [, KIND])`\n\nArguments:  \n|          |                                                                                                                                   |\n|----------|-----------------------------------------------------------------------------------------------------------------------------------|\n| `SOURCE` | Shall be an array or scalar of any type. If `SOURCE` is a pointer it must be associated and allocatable arrays must be allocated. |\n| `KIND`   | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result.                                    |\n\nReturn value:  \nAn `INTEGER` array of rank one with as many elements as `SOURCE` has dimensions. The elements of the resulting array correspond to the extend of `SOURCE` along the respective dimensions. If `SOURCE` is a scalar, the result is the rank one array of size zero. If `KIND` is absent, the return value has the default integer kind otherwise the specified kind.\n\nExample:  \n``` example-preformatted\nPROGRAM test_shape\n  INTEGER, DIMENSION(-1:1, -1:2) :: A\n  WRITE(*,*) SHAPE(A)             ! (/ 3, 4 /)\n  WRITE(*,*) SIZE(SHAPE(42))      ! (/ /)\nEND PROGRAM\n```\n\nSee also:  \n[`RESHAPE` — Function to reshape an array](reshape), [`SIZE` — Determine the size of an array](size)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SHAPE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SHAPE.html)"
- name: 8.244. SHIFTA
  id: shifta
  summary: 'Description: SHIFTA returns a value corresponding to I with all of the bits shifted right by SHIFT places'
  description: "Next: [`SHIFTL` — Left shift](shiftl), Previous: [`SHAPE` — Determine the shape of an array](shape), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.244 SHIFTA — Right shift with fill [¶](#SHIFTA-----Right-shift-with-fill)\n\nDescription:  \n`SHIFTA` returns a value corresponding to `I` with all of the bits shifted right by `SHIFT` places. `SHIFT` that be nonnegative and less than or equal to `BIT_SIZE(I)`, otherwise the result value is undefined. Bits shifted out from the right end are lost. The fill is arithmetic: the bits shifted in from the left end are equal to the leftmost bit, which in two’s complement representation is the sign bit.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = SHIFTA(I, SHIFT)`\n\nArguments:  \n|         |                              |\n|---------|------------------------------|\n| `I`     | The type shall be `INTEGER`. |\n| `SHIFT` | The type shall be `INTEGER`. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of the same kind as `I`.\n\nSee also:  \n[`SHIFTL` — Left shift](shiftl), [`SHIFTR` — Right shift](shiftr)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SHIFTA.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SHIFTA.html)"
- name: 8.245. SHIFTL
  id: shiftl
  summary: 'Description: SHIFTL returns a value corresponding to I with all of the bits shifted left by SHIFT places'
  description: "Next: [`SHIFTR` — Right shift](shiftr), Previous: [`SHIFTA` — Right shift with fill](shifta), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.245 SHIFTL — Left shift [¶](#SHIFTL-----Left-shift)\n\nDescription:  \n`SHIFTL` returns a value corresponding to `I` with all of the bits shifted left by `SHIFT` places. `SHIFT` shall be nonnegative and less than or equal to `BIT_SIZE(I)`, otherwise the result value is undefined. Bits shifted out from the left end are lost, and bits shifted in from the right end are set to 0.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = SHIFTL(I, SHIFT)`\n\nArguments:  \n|         |                              |\n|---------|------------------------------|\n| `I`     | The type shall be `INTEGER`. |\n| `SHIFT` | The type shall be `INTEGER`. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of the same kind as `I`.\n\nSee also:  \n[`SHIFTA` — Right shift with fill](shifta), [`SHIFTR` — Right shift](shiftr)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SHIFTL.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SHIFTL.html)"
- name: 8.246. SHIFTR
  id: shiftr
  summary: 'Description: SHIFTR returns a value corresponding to I with all of the bits shifted right by SHIFT places'
  description: "Next: [`SIGN` — Sign copying function](sign), Previous: [`SHIFTL` — Left shift](shiftl), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.246 SHIFTR — Right shift [¶](#SHIFTR-----Right-shift)\n\nDescription:  \n`SHIFTR` returns a value corresponding to `I` with all of the bits shifted right by `SHIFT` places. `SHIFT` shall be nonnegative and less than or equal to `BIT_SIZE(I)`, otherwise the result value is undefined. Bits shifted out from the right end are lost, and bits shifted in from the left end are set to 0.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = SHIFTR(I, SHIFT)`\n\nArguments:  \n|         |                              |\n|---------|------------------------------|\n| `I`     | The type shall be `INTEGER`. |\n| `SHIFT` | The type shall be `INTEGER`. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of the same kind as `I`.\n\nSee also:  \n[`SHIFTA` — Right shift with fill](shifta), [`SHIFTL` — Left shift](shiftl)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SHIFTR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SHIFTR.html)"
- name: 8.247. SIGN
  id: sign
  summary: 'Description: SIGN(A,B) returns the value of A with the sign of B'
  description: "Next: [`SIGNAL` — Signal handling subroutine (or function)](signal), Previous: [`SHIFTR` — Right shift](shiftr), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.247 SIGN — Sign copying function [¶](#SIGN-----Sign-copying-function)\n\nDescription:  \n`SIGN(A,B)` returns the value of `A` with the sign of `B`.\n\nStandard:  \nFortran 77 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = SIGN(A, B)`\n\nArguments:  \n|     |                                            |\n|-----|--------------------------------------------|\n| `A` | Shall be of type `INTEGER` or `REAL`       |\n| `B` | Shall be of the same type and kind as `A`. |\n\nReturn value:  \nThe kind of the return value is that of `A` and `B`. If *B \\ge 0* then the result is `ABS(A)`, else it is `-ABS(A)`.\n\nExample:  \n``` example-preformatted\nprogram test_sign\n  print *, sign(-12,1)\n  print *, sign(-12,0)\n  print *, sign(-12,-1)\n\n  print *, sign(-12.,1.)\n  print *, sign(-12.,0.)\n  print *, sign(-12.,-1.)\nend program test_sign\n```\n\nSpecific names:  \n| Name         | Arguments         | Return type  | Standard             |\n|--------------|-------------------|--------------|----------------------|\n| `SIGN(A,B)`  | `REAL(4) A, B`    | `REAL(4)`    | Fortran 77 and later |\n| `ISIGN(A,B)` | `INTEGER(4) A, B` | `INTEGER(4)` | Fortran 77 and later |\n| `DSIGN(A,B)` | `REAL(8) A, B`    | `REAL(8)`    | Fortran 77 and later |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SIGN.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SIGN.html)"
- name: 8.248. SIGNAL
  id: signal
  summary: 'Description: SIGNAL(NUMBER, HANDLER [, STATUS]) causes external subroutine HANDLER to be executed with a single integer argument when signal NUMBER occurs'
  description: "Next: [`SIN` — Sine function](sin), Previous: [`SIGN` — Sign copying function](sign), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.248 SIGNAL — Signal handling subroutine (or function) [¶](#SIGNAL-----Signal-handling-subroutine-_0028or-function_0029)\n\nDescription:  \n`SIGNAL(NUMBER, HANDLER [, STATUS])` causes external subroutine `HANDLER` to be executed with a single integer argument when signal `NUMBER` occurs. If `HANDLER` is an integer, it can be used to turn off handling of signal `NUMBER` or revert to its default action. See `signal(2)`.\n\nIf `SIGNAL` is called as a subroutine and the `STATUS` argument is supplied, it is set to the value returned by `signal(2)`.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                                           |\n|-------------------------------------------|\n| `CALL SIGNAL(NUMBER, HANDLER [, STATUS])` |\n| `STATUS = SIGNAL(NUMBER, HANDLER)`        |\n\nArguments:  \n|           |                                                                                                                      |\n|-----------|----------------------------------------------------------------------------------------------------------------------|\n| `NUMBER`  | Shall be a scalar integer, with `INTENT(IN)`                                                                         |\n| `HANDLER` | Signal handler (`INTEGER FUNCTION` or `SUBROUTINE`) or dummy/global `INTEGER` scalar. `INTEGER`. It is `INTENT(IN)`. |\n| `STATUS`  | (Optional) `STATUS` shall be a scalar integer. It has `INTENT(OUT)`.                                                 |\n\nReturn value:  \nThe `SIGNAL` function returns the value returned by `signal(2)`.\n\nExample:  \n``` example-preformatted\nprogram test_signal\n  intrinsic signal\n  external handler_print\n\n  call signal (12, handler_print)\n  call signal (10, 1)\n\n  call sleep (30)\nend program test_signal\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SIGNAL.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SIGNAL.html)"
- name: 8.249. SIN
  id: sin
  summary: 'Description: SIN(X) computes the sine of X'
  description: "Next: [`SIND` — Sine function, degrees](sind), Previous: [`SIGNAL` — Signal handling subroutine (or function)](signal), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.249 SIN — Sine function [¶](#SIN-----Sine-function)\n\nDescription:  \n`SIN(X)` computes the sine of `X`.\n\nStandard:  \nFortran 77 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = SIN(X)`\n\nArguments:  \n|     |                                        |\n|-----|----------------------------------------|\n| `X` | The type shall be `REAL` or `COMPLEX`. |\n\nReturn value:  \nThe return value has same type and kind as `X`.\n\nExample:  \n``` example-preformatted\nprogram test_sin\n  real :: x = 0.0\n  x = sin(x)\nend program test_sin\n```\n\nSpecific names:  \n| Name       | Argument       | Return type  | Standard             |\n|------------|----------------|--------------|----------------------|\n| `SIN(X)`   | `REAL(4) X`    | `REAL(4)`    | Fortran 77 and later |\n| `DSIN(X)`  | `REAL(8) X`    | `REAL(8)`    | Fortran 77 and later |\n| `CSIN(X)`  | `COMPLEX(4) X` | `COMPLEX(4)` | Fortran 77 and later |\n| `ZSIN(X)`  | `COMPLEX(8) X` | `COMPLEX(8)` | GNU extension        |\n| `CDSIN(X)` | `COMPLEX(8) X` | `COMPLEX(8)` | GNU extension        |\n\nSee also:  \nInverse function: [`ASIN` — Arcsine function](asin) Degrees function: [`SIND` — Sine function, degrees](sind)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SIN.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SIN.html)"
- name: 8.250. SIND
  id: sind
  summary: 'Description: SIND(X) computes the sine of X in degrees'
  description: "Next: [`SINH` — Hyperbolic sine function](sinh), Previous: [`SIN` — Sine function](sin), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.250 SIND — Sine function, degrees [¶](#SIND-----Sine-function_002c-degrees)\n\nDescription:  \n`SIND(X)` computes the sine of `X` in degrees.\n\nThis function is for compatibility only and should be avoided in favor of standard constructs wherever possible.\n\nStandard:  \nGNU extension, enabled with `-fdec-math`.\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = SIND(X)`\n\nArguments:  \n|     |                                        |\n|-----|----------------------------------------|\n| `X` | The type shall be `REAL` or `COMPLEX`. |\n\nReturn value:  \nThe return value has same type and kind as `X`, and its value is in degrees.\n\nExample:  \n``` example-preformatted\nprogram test_sind\n  real :: x = 0.0\n  x = sind(x)\nend program test_sind\n```\n\nSpecific names:  \n| Name        | Argument       | Return type  | Standard      |\n|-------------|----------------|--------------|---------------|\n| `SIND(X)`   | `REAL(4) X`    | `REAL(4)`    | GNU extension |\n| `DSIND(X)`  | `REAL(8) X`    | `REAL(8)`    | GNU extension |\n| `CSIND(X)`  | `COMPLEX(4) X` | `COMPLEX(4)` | GNU extension |\n| `ZSIND(X)`  | `COMPLEX(8) X` | `COMPLEX(8)` | GNU extension |\n| `CDSIND(X)` | `COMPLEX(8) X` | `COMPLEX(8)` | GNU extension |\n\nSee also:  \nInverse function: [`ASIND` — Arcsine function, degrees](asind) Radians function: [`SIN` — Sine function](sin)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SIND.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SIND.html)"
- name: 8.251. SINH
  id: sinh
  summary: 'Description: SINH(X) computes the hyperbolic sine of X'
  description: "Next: [`SIZE` — Determine the size of an array](size), Previous: [`SIND` — Sine function, degrees](sind), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.251 SINH — Hyperbolic sine function [¶](#SINH-----Hyperbolic-sine-function)\n\nDescription:  \n`SINH(X)` computes the hyperbolic sine of `X`.\n\nStandard:  \nFortran 90 and later, for a complex argument Fortran 2008 or later, has a GNU extension\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = SINH(X)`\n\nArguments:  \n|     |                                        |\n|-----|----------------------------------------|\n| `X` | The type shall be `REAL` or `COMPLEX`. |\n\nReturn value:  \nThe return value has same type and kind as `X`.\n\nExample:  \n``` example-preformatted\nprogram test_sinh\n  real(8) :: x = - 1.0_8\n  x = sinh(x)\nend program test_sinh\n```\n\nSpecific names:  \n| Name       | Argument    | Return type | Standard             |\n|------------|-------------|-------------|----------------------|\n| `DSINH(X)` | `REAL(8) X` | `REAL(8)`   | Fortran 90 and later |\n\nSee also:  \n[`ASINH` — Inverse hyperbolic sine function](asinh)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SINH.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SINH.html)"
- name: 8.252. SIZE
  id: size
  summary: 'Description: Determine the extent of ARRAY along a specified dimension DIM, or the total number of elements in ARRAY if DIM is absent'
  description: "Next: [`SIZEOF` — Size in bytes of an expression](sizeof), Previous: [`SINH` — Hyperbolic sine function](sinh), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.252 SIZE — Determine the size of an array [¶](#SIZE-----Determine-the-size-of-an-array)\n\nDescription:  \nDetermine the extent of `ARRAY` along a specified dimension `DIM`, or the total number of elements in `ARRAY` if `DIM` is absent.\n\nStandard:  \nFortran 90 and later, with `KIND` argument Fortran 2003 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = SIZE(ARRAY[, DIM [, KIND]])`\n\nArguments:  \n|         |                                                                                                                                     |\n|---------|-------------------------------------------------------------------------------------------------------------------------------------|\n| `ARRAY` | Shall be an array of any type. If `ARRAY` is a pointer it must be associated and allocatable arrays must be allocated.              |\n| `DIM`   | (Optional) shall be a scalar of type `INTEGER` and its value shall be in the range from 1 to n, where n equals the rank of `ARRAY`. |\n| `KIND`  | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result.                                      |\n\nReturn value:  \nThe return value is of type `INTEGER` and of kind `KIND`. If `KIND` is absent, the return value is of default integer kind.\n\nExample:  \n``` example-preformatted\nPROGRAM test_size\n  WRITE(*,*) SIZE((/ 1, 2 /))    ! 2\nEND PROGRAM\n```\n\nSee also:  \n[`SHAPE` — Determine the shape of an array](shape), [`RESHAPE` — Function to reshape an array](reshape)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SIZE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SIZE.html)"
- name: 8.253. SIZEOF
  id: sizeof
  summary: 'Description: SIZEOF(X) calculates the number of bytes of storage the expression X occupies'
  description: "Next: [`SLEEP` — Sleep for the specified number of seconds](sleep), Previous: [`SIZE` — Determine the size of an array](size), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.253 SIZEOF — Size in bytes of an expression [¶](#SIZEOF-----Size-in-bytes-of-an-expression)\n\nDescription:  \n`SIZEOF(X)` calculates the number of bytes of storage the expression `X` occupies.\n\nStandard:  \nGNU extension\n\nClass:  \nInquiry function\n\nSyntax:  \n`N = SIZEOF(X)`\n\nArguments:  \n|     |                                                   |\n|-----|---------------------------------------------------|\n| `X` | The argument shall be of any type, rank or shape. |\n\nReturn value:  \nThe return value is of type integer and of the system-dependent kind `C_SIZE_T` (from the `ISO_C_BINDING` module). Its value is the number of bytes occupied by the argument. If the argument has the `POINTER` attribute, the number of bytes of the storage area pointed to is returned. If the argument is of a derived type with `POINTER` or `ALLOCATABLE` components, the return value does not account for the sizes of the data pointed to by these components. If the argument is polymorphic, the size according to the dynamic type is returned. The argument may not be a procedure or procedure pointer. Note that the code assumes for arrays that those are contiguous; for contiguous arrays, it returns the storage or an array element multiplied by the size of the array.\n\nExample:  \n``` example-preformatted\ninteger :: i\nreal :: r, s(5)\nprint *, (sizeof(s)/sizeof(r) == 5)\nend\n```\n\nThe example will print `.TRUE.` unless you are using a platform where default `REAL` variables are unusually padded.\n\nSee also:  \n[`C_SIZEOF` — Size in bytes of an expression](c_005fsizeof), [`STORAGE_SIZE` — Storage size in bits](storage_005fsize)\n\nNext: [`SLEEP` — Sleep for the specified number of seconds](sleep), Previous: [`SIZE` — Determine the size of an array](size), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SIZEOF.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SIZEOF.html)"
- name: 8.254. SLEEP
  id: sleep
  summary: 'Description: Calling this subroutine causes the process to pause for SECONDS seconds'
  description: "Next: [`SPACING` — Smallest distance between two numbers of a given type](spacing), Previous: [`SIZEOF` — Size in bytes of an expression](sizeof), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.254 SLEEP — Sleep for the specified number of seconds [¶](#SLEEP-----Sleep-for-the-specified-number-of-seconds)\n\nDescription:  \nCalling this subroutine causes the process to pause for `SECONDS` seconds.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL SLEEP(SECONDS)`\n\nArguments:  \n|           |                                         |\n|-----------|-----------------------------------------|\n| `SECONDS` | The type shall be of default `INTEGER`. |\n\nExample:  \n``` example-preformatted\nprogram test_sleep\n  call sleep(5)\nend\n```\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SLEEP.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SLEEP.html)"
- name: 8.255. SPACING
  id: spacing
  summary: 'Description: Determines the distance between the argument X and the nearest adjacent number of the same type'
  description: "Next: [`SPREAD` — Add a dimension to an array](spread), Previous: [`SLEEP` — Sleep for the specified number of seconds](sleep), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.255 SPACING — Smallest distance between two numbers of a given type [¶](#SPACING-----Smallest-distance-between-two-numbers-of-a-given-type)\n\nDescription:  \nDetermines the distance between the argument `X` and the nearest adjacent number of the same type.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = SPACING(X)`\n\nArguments:  \n|     |                          |\n|-----|--------------------------|\n| `X` | Shall be of type `REAL`. |\n\nReturn value:  \nThe result is of the same type as the input argument `X`.\n\nExample:  \n``` example-preformatted\nPROGRAM test_spacing\n  INTEGER, PARAMETER :: SGL = SELECTED_REAL_KIND(p=6, r=37)\n  INTEGER, PARAMETER :: DBL = SELECTED_REAL_KIND(p=13, r=200)\n\n  WRITE(*,*) spacing(1.0_SGL)      ! \"1.1920929E-07\"          on i686\n  WRITE(*,*) spacing(1.0_DBL)      ! \"2.220446049250313E-016\" on i686\nEND PROGRAM\n```\n\nSee also:  \n[`RRSPACING` — Reciprocal of the relative spacing](rrspacing)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SPACING.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SPACING.html)"
- name: 8.256. SPREAD
  id: spread
  summary: 'Description: Replicates a SOURCE array NCOPIES times along a specified dimension DIM'
  description: "Next: [`SQRT` — Square-root function](sqrt), Previous: [`SPACING` — Smallest distance between two numbers of a given type](spacing), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.256 SPREAD — Add a dimension to an array [¶](#SPREAD-----Add-a-dimension-to-an-array)\n\nDescription:  \nReplicates a `SOURCE` array `NCOPIES` times along a specified dimension `DIM`.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n`RESULT = SPREAD(SOURCE, DIM, NCOPIES)`\n\nArguments:  \n|           |                                                                                                                   |\n|-----------|-------------------------------------------------------------------------------------------------------------------|\n| `SOURCE`  | Shall be a scalar or an array of any type and a rank less than seven.                                             |\n| `DIM`     | Shall be a scalar of type `INTEGER` with a value in the range from 1 to n+1, where n equals the rank of `SOURCE`. |\n| `NCOPIES` | Shall be a scalar of type `INTEGER`.                                                                              |\n\nReturn value:  \nThe result is an array of the same type as `SOURCE` and has rank n+1 where n equals the rank of `SOURCE`.\n\nExample:  \n``` example-preformatted\nPROGRAM test_spread\n  INTEGER :: a = 1, b(2) = (/ 1, 2 /)\n  WRITE(*,*) SPREAD(A, 1, 2)            ! \"1 1\"\n  WRITE(*,*) SPREAD(B, 1, 2)            ! \"1 1 2 2\"\nEND PROGRAM\n```\n\nSee also:  \n[`UNPACK` — Unpack an array of rank one into an array](unpack)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SPREAD.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SPREAD.html)"
- name: 8.257. SQRT
  id: sqrt
  summary: 'Description: SQRT(X) computes the square root of X'
  description: "Next: [`SRAND` — Reinitialize the random number generator](srand), Previous: [`SPREAD` — Add a dimension to an array](spread), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.257 SQRT — Square-root function [¶](#SQRT-----Square-root-function)\n\nDescription:  \n`SQRT(X)` computes the square root of `X`.\n\nStandard:  \nFortran 77 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = SQRT(X)`\n\nArguments:  \n|     |                                        |\n|-----|----------------------------------------|\n| `X` | The type shall be `REAL` or `COMPLEX`. |\n\nReturn value:  \nThe return value is of type `REAL` or `COMPLEX`. The kind type parameter is the same as `X`.\n\nExample:  \n``` example-preformatted\nprogram test_sqrt\n  real(8) :: x = 2.0_8\n  complex :: z = (1.0, 2.0)\n  x = sqrt(x)\n  z = sqrt(z)\nend program test_sqrt\n```\n\nSpecific names:  \n| Name        | Argument       | Return type  | Standard             |\n|-------------|----------------|--------------|----------------------|\n| `SQRT(X)`   | `REAL(4) X`    | `REAL(4)`    | Fortran 77 and later |\n| `DSQRT(X)`  | `REAL(8) X`    | `REAL(8)`    | Fortran 77 and later |\n| `CSQRT(X)`  | `COMPLEX(4) X` | `COMPLEX(4)` | Fortran 77 and later |\n| `ZSQRT(X)`  | `COMPLEX(8) X` | `COMPLEX(8)` | GNU extension        |\n| `CDSQRT(X)` | `COMPLEX(8) X` | `COMPLEX(8)` | GNU extension        |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SQRT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SQRT.html)"
- name: 8.258. SRAND
  id: srand
  summary: 'Description: SRAND reinitializes the pseudo-random number generator called by RAND and IRAND'
  description: "Next: [`STAT` — Get file status](stat), Previous: [`SQRT` — Square-root function](sqrt), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.258 SRAND — Reinitialize the random number generator [¶](#SRAND-----Reinitialize-the-random-number-generator)\n\nDescription:  \n`SRAND` reinitializes the pseudo-random number generator called by `RAND` and `IRAND`. The new seed used by the generator is specified by the required argument `SEED`.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL SRAND(SEED)`\n\nArguments:  \n|        |                                      |\n|--------|--------------------------------------|\n| `SEED` | Shall be a scalar `INTEGER(kind=4)`. |\n\nReturn value:  \nDoes not return anything.\n\nExample:  \nSee `RAND` and `IRAND` for examples.\n\nNotes:  \nThe Fortran standard specifies the intrinsic subroutines `RANDOM_SEED` to initialize the pseudo-random number generator and `RANDOM_NUMBER` to generate pseudo-random numbers. These subroutines should be used in new codes.\n\nPlease note that in GNU Fortran, these two sets of intrinsics (`RAND`, `IRAND` and `SRAND` on the one hand, `RANDOM_NUMBER` and `RANDOM_SEED` on the other hand) access two independent pseudo-random number generators.\n\nSee also:  \n[`RAND` — Real pseudo-random number](rand), [`RANDOM_SEED` — Initialize a pseudo-random number sequence](random_005fseed), [`RANDOM_NUMBER` — Pseudo-random number](random_005fnumber)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SRAND.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SRAND.html)"
- name: 8.259. STAT
  id: stat
  summary: 'Description: This function returns information about a file'
  description: "Next: [`STORAGE_SIZE` — Storage size in bits](storage_005fsize), Previous: [`SRAND` — Reinitialize the random number generator](srand), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.259 STAT — Get file status [¶](#STAT-----Get-file-status)\n\nDescription:  \nThis function returns information about a file. No permissions are required on the file itself, but execute (search) permission is required on all of the directories in path that lead to the file.\n\nThe elements that are obtained and stored in the array `VALUES`:\n\n|              |                                                                       |\n|--------------|-----------------------------------------------------------------------|\n| `VALUES(1)`  | Device ID                                                             |\n| `VALUES(2)`  | Inode number                                                          |\n| `VALUES(3)`  | File mode                                                             |\n| `VALUES(4)`  | Number of links                                                       |\n| `VALUES(5)`  | Owner’s uid                                                           |\n| `VALUES(6)`  | Owner’s gid                                                           |\n| `VALUES(7)`  | ID of device containing directory entry for file (0 if not available) |\n| `VALUES(8)`  | File size (bytes)                                                     |\n| `VALUES(9)`  | Last access time                                                      |\n| `VALUES(10)` | Last modification time                                                |\n| `VALUES(11)` | Last file status change time                                          |\n| `VALUES(12)` | Preferred I/O block size (-1 if not available)                        |\n| `VALUES(13)` | Number of blocks allocated (-1 if not available)                      |\n\nNot all these elements are relevant on all systems. If an element is not relevant, it is returned as 0.\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                                      |\n|--------------------------------------|\n| `CALL STAT(NAME, VALUES [, STATUS])` |\n| `STATUS = STAT(NAME, VALUES)`        |\n\nArguments:  \n|          |                                                                                                               |\n|----------|---------------------------------------------------------------------------------------------------------------|\n| `NAME`   | The type shall be `CHARACTER`, of the default kind and a valid path within the file system.                   |\n| `VALUES` | The type shall be `INTEGER(4), DIMENSION(13)`.                                                                |\n| `STATUS` | (Optional) status flag of type `INTEGER(4)`. Returns 0 on success and a system specific error code otherwise. |\n\nExample:  \n``` example-preformatted\nPROGRAM test_stat\n  INTEGER, DIMENSION(13) :: buff\n  INTEGER :: status\n\n  CALL STAT(\"/etc/passwd\", buff, status)\n\n  IF (status == 0) THEN\n    WRITE (*, FMT=\"('Device ID:',               T30, I19)\") buff(1)\n    WRITE (*, FMT=\"('Inode number:',            T30, I19)\") buff(2)\n    WRITE (*, FMT=\"('File mode (octal):',       T30, O19)\") buff(3)\n    WRITE (*, FMT=\"('Number of links:',         T30, I19)\") buff(4)\n    WRITE (*, FMT=\"('Owner''s uid:',            T30, I19)\") buff(5)\n    WRITE (*, FMT=\"('Owner''s gid:',            T30, I19)\") buff(6)\n    WRITE (*, FMT=\"('Device where located:',    T30, I19)\") buff(7)\n    WRITE (*, FMT=\"('File size:',               T30, I19)\") buff(8)\n    WRITE (*, FMT=\"('Last access time:',        T30, A19)\") CTIME(buff(9))\n    WRITE (*, FMT=\"('Last modification time',   T30, A19)\") CTIME(buff(10))\n    WRITE (*, FMT=\"('Last status change time:', T30, A19)\") CTIME(buff(11))\n    WRITE (*, FMT=\"('Preferred block size:',    T30, I19)\") buff(12)\n    WRITE (*, FMT=\"('No. of blocks allocated:', T30, I19)\") buff(13)\n  END IF\nEND PROGRAM\n```\n\nSee also:  \nTo stat an open file: [`FSTAT` — Get file status](fstat) To stat a link: [`LSTAT` — Get file status](lstat)\n\nNext: [`STORAGE_SIZE` — Storage size in bits](storage_005fsize), Previous: [`SRAND` — Reinitialize the random number generator](srand), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/STAT.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/STAT.html)"
- name: 8.260. STORAGE_SIZE
  id: storage_005fsize
  summary: 'Description: Returns the storage size of argument A in bits'
  description: "Next: [`SUM` — Sum of array elements](sum), Previous: [`STAT` — Get file status](stat), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.260 STORAGE_SIZE — Storage size in bits [¶](#STORAGE_005fSIZE-----Storage-size-in-bits)\n\nDescription:  \nReturns the storage size of argument `A` in bits.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = STORAGE_SIZE(A [, KIND])`\n\nArguments:  \n|        |                                                           |\n|--------|-----------------------------------------------------------|\n| `A`    | Shall be a scalar or array of any type.                   |\n| `KIND` | (Optional) shall be a scalar integer constant expression. |\n\nReturn Value:  \nThe result is a scalar integer with the kind type parameter specified by KIND (or default integer type if KIND is missing). The result value is the size expressed in bits for an element of an array that has the dynamic type and type parameters of A.\n\nSee also:  \n[`C_SIZEOF` — Size in bytes of an expression](c_005fsizeof), [`SIZEOF` — Size in bytes of an expression](sizeof)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/STORAGE_005fSIZE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/STORAGE_005fSIZE.html)"
- name: 8.261. SUM
  id: sum
  summary: 'Description: Adds the elements of ARRAY along dimension DIM if the corresponding element in MASK is TRUE'
  description: "Next: [`SYMLNK` — Create a symbolic link](symlnk), Previous: [`STORAGE_SIZE` — Storage size in bits](storage_005fsize), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.261 SUM — Sum of array elements [¶](#SUM-----Sum-of-array-elements)\n\nDescription:  \nAdds the elements of `ARRAY` along dimension `DIM` if the corresponding element in `MASK` is `TRUE`.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n|                                    |\n|------------------------------------|\n| `RESULT = SUM(ARRAY[, MASK])`      |\n| `RESULT = SUM(ARRAY, DIM[, MASK])` |\n\nArguments:  \n|         |                                                                                                                           |\n|---------|---------------------------------------------------------------------------------------------------------------------------|\n| `ARRAY` | Shall be an array of type `INTEGER`, `REAL` or `COMPLEX`.                                                                 |\n| `DIM`   | (Optional) shall be a scalar of type `INTEGER` with a value in the range from 1 to n, where n equals the rank of `ARRAY`. |\n| `MASK`  | (Optional) shall be of type `LOGICAL` and either be a scalar or an array of the same shape as `ARRAY`.                    |\n\nReturn value:  \nThe result is of the same type as `ARRAY`.\n\nIf `DIM` is absent, a scalar with the sum of all elements in `ARRAY` is returned. Otherwise, an array of rank n-1, where n equals the rank of `ARRAY`, and a shape similar to that of `ARRAY` with dimension `DIM` dropped is returned.\n\nExample:  \n``` example-preformatted\nPROGRAM test_sum\n  INTEGER :: x(5) = (/ 1, 2, 3, 4 ,5 /)\n  print *, SUM(x)                        ! all elements, sum = 15\n  print *, SUM(x, MASK=MOD(x, 2)==1)     ! odd elements, sum = 9\nEND PROGRAM\n```\n\nSee also:  \n[`PRODUCT` — Product of array elements](product)\n\nNext: [`SYMLNK` — Create a symbolic link](symlnk), Previous: [`STORAGE_SIZE` — Storage size in bits](storage_005fsize), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SUM.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SUM.html)"
- name: 8.262. SYMLNK
  id: symlnk
  summary: 'Description: Makes a symbolic link from file PATH1 to PATH2'
  description: "Next: [`SYSTEM` — Execute a shell command](system), Previous: [`SUM` — Sum of array elements](sum), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.262 SYMLNK — Create a symbolic link [¶](#SYMLNK-----Create-a-symbolic-link)\n\nDescription:  \nMakes a symbolic link from file `PATH1` to `PATH2`. A null character (`CHAR(0)`) can be used to mark the end of the names in `PATH1` and `PATH2`; otherwise, trailing blanks in the file names are ignored. If the `STATUS` argument is supplied, it contains 0 on success or a nonzero error code upon return; see `symlink(2)`. If the system does not supply `symlink(2)`, `ENOSYS` is returned.\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                                        |\n|----------------------------------------|\n| `CALL SYMLNK(PATH1, PATH2 [, STATUS])` |\n| `STATUS = SYMLNK(PATH1, PATH2)`        |\n\nArguments:  \n|          |                                                |\n|----------|------------------------------------------------|\n| `PATH1`  | Shall be of default `CHARACTER` type.          |\n| `PATH2`  | Shall be of default `CHARACTER` type.          |\n| `STATUS` | (Optional) Shall be of default `INTEGER` type. |\n\nSee also:  \n[`LINK` — Create a hard link](link), [`UNLINK` — Remove a file from the file system](unlink)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SYMLNK.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SYMLNK.html)"
- name: 8.263. SYSTEM
  id: system
  summary: 'Description: Passes the command COMMAND to a shell (see system(3))'
  description: "Next: [`SYSTEM_CLOCK` — Time function](system_005fclock), Previous: [`SYMLNK` — Create a symbolic link](symlnk), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.263 SYSTEM — Execute a shell command [¶](#SYSTEM-----Execute-a-shell-command)\n\nDescription:  \nPasses the command `COMMAND` to a shell (see `system(3)`). If argument `STATUS` is present, it contains the value returned by `system(3)`, which is presumably 0 if the shell command succeeded. Note that which shell is used to invoke the command is system-dependent and environment-dependent.\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\nNote that the `system` function need not be thread-safe. It is the responsibility of the user to ensure that `system` is not called concurrently.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                                   |\n|-----------------------------------|\n| `CALL SYSTEM(COMMAND [, STATUS])` |\n| `STATUS = SYSTEM(COMMAND)`        |\n\nArguments:  \n|           |                                                |\n|-----------|------------------------------------------------|\n| `COMMAND` | Shall be of default `CHARACTER` type.          |\n| `STATUS`  | (Optional) Shall be of default `INTEGER` type. |\n\nSee also:  \n[`EXECUTE_COMMAND_LINE` — Execute a shell command](execute_005fcommand_005fline), which is part of the Fortran 2008 standard and should considered in new code for future portability.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SYSTEM.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SYSTEM.html)"
- name: 8.264. SYSTEM_CLOCK
  id: system_005fclock
  summary: 'Description: Determines the COUNT of a processor clock since an unspecified time in the past modulo COUNT_MAX, COUNT_RATE determines the number of clock ticks per second'
  description: "Next: [`TAN` — Tangent function](tan), Previous: [`SYSTEM` — Execute a shell command](system), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.264 SYSTEM_CLOCK — Time function [¶](#SYSTEM_005fCLOCK-----Time-function)\n\nDescription:  \nDetermines the `COUNT` of a processor clock since an unspecified time in the past modulo `COUNT_MAX`, `COUNT_RATE` determines the number of clock ticks per second. If the platform supports a monotonic clock, that clock is used and can, depending on the platform clock implementation, provide up to nanosecond resolution. If a monotonic clock is not available, the implementation falls back to a realtime clock.\n\n`COUNT_RATE` is system dependent and can vary depending on the kind of the arguments. For `kind=4` arguments (and smaller integer kinds), `COUNT` represents milliseconds, while for `kind=8` arguments (and larger integer kinds), `COUNT` typically represents micro- or nanoseconds depending on resolution of the underlying platform clock. `COUNT_MAX` usually equals `HUGE(COUNT_MAX)`. Note that the millisecond resolution of the `kind=4` version implies that the `COUNT` will wrap around in roughly 25 days. In order to avoid issues with the wrap around and for more precise timing, please use the `kind=8` version.\n\nIf there is no clock, or querying the clock fails, `COUNT` is set to `-HUGE(COUNT)`, and `COUNT_RATE` and `COUNT_MAX` are set to zero.\n\nWhen running on a platform using the GNU C library (glibc) version 2.16 or older, or a derivative thereof, the high resolution monotonic clock is available only when linking with the `rt` library. This can be done explicitly by adding the `-lrt` flag when linking the application, but is also done implicitly when using OpenMP.\n\nOn the Windows platform, the version with `kind=4` arguments uses the `GetTickCount` function, whereas the `kind=8` version uses `QueryPerformanceCounter` and `QueryPerformanceCounterFrequency`. For more information, and potential caveats, please see the platform documentation.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nSubroutine\n\nSyntax:  \n`CALL SYSTEM_CLOCK([COUNT, COUNT_RATE, COUNT_MAX])`\n\nArguments:  \n|              |                                                                               |\n|--------------|-------------------------------------------------------------------------------|\n| `COUNT`      | (Optional) shall be a scalar of type `INTEGER` with `INTENT(OUT)`.            |\n| `COUNT_RATE` | (Optional) shall be a scalar of type `INTEGER` or `REAL`, with `INTENT(OUT)`. |\n| `COUNT_MAX`  | (Optional) shall be a scalar of type `INTEGER` with `INTENT(OUT)`.            |\n\nExample:  \n``` example-preformatted\nPROGRAM test_system_clock\n  INTEGER :: count, count_rate, count_max\n  CALL SYSTEM_CLOCK(count, count_rate, count_max)\n  WRITE(*,*) count, count_rate, count_max\nEND PROGRAM\n```\n\nSee also:  \n[`DATE_AND_TIME` — Date and time subroutine](date_005fand_005ftime), [`CPU_TIME` — CPU elapsed time in seconds](cpu_005ftime)\n\nNext: [`TAN` — Tangent function](tan), Previous: [`SYSTEM` — Execute a shell command](system), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SYSTEM_005fCLOCK.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/SYSTEM_005fCLOCK.html)"
- name: 8.265. TAN
  id: tan
  summary: 'Description: TAN(X) computes the tangent of X'
  description: "Next: [`TAND` — Tangent function, degrees](tand), Previous: [`SYSTEM_CLOCK` — Time function](system_005fclock), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.265 TAN — Tangent function [¶](#TAN-----Tangent-function)\n\nDescription:  \n`TAN(X)` computes the tangent of `X`.\n\nStandard:  \nFortran 77 and later, for a complex argument Fortran 2008 or later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = TAN(X)`\n\nArguments:  \n|     |                                        |\n|-----|----------------------------------------|\n| `X` | The type shall be `REAL` or `COMPLEX`. |\n\nReturn value:  \nThe return value has same type and kind as `X`, and its value is in radians.\n\nExample:  \n``` example-preformatted\nprogram test_tan\n  real(8) :: x = 0.165_8\n  x = tan(x)\nend program test_tan\n```\n\nSpecific names:  \n| Name      | Argument    | Return type | Standard             |\n|-----------|-------------|-------------|----------------------|\n| `TAN(X)`  | `REAL(4) X` | `REAL(4)`   | Fortran 77 and later |\n| `DTAN(X)` | `REAL(8) X` | `REAL(8)`   | Fortran 77 and later |\n\nSee also:  \nInverse function: [`ATAN` — Arctangent function](atan) Degrees function: [`TAND` — Tangent function, degrees](tand)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TAN.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TAN.html)"
- name: 8.266. TAND
  id: tand
  summary: 'Description: TAND(X) computes the tangent of X in degrees'
  description: "Next: [`TANH` — Hyperbolic tangent function](tanh), Previous: [`TAN` — Tangent function](tan), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.266 TAND — Tangent function, degrees [¶](#TAND-----Tangent-function_002c-degrees)\n\nDescription:  \n`TAND(X)` computes the tangent of `X` in degrees.\n\nThis function is for compatibility only and should be avoided in favor of standard constructs wherever possible.\n\nStandard:  \nGNU extension, enabled with `-fdec-math`.\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = TAND(X)`\n\nArguments:  \n|     |                                        |\n|-----|----------------------------------------|\n| `X` | The type shall be `REAL` or `COMPLEX`. |\n\nReturn value:  \nThe return value has same type and kind as `X`, and its value is in degrees.\n\nExample:  \n``` example-preformatted\nprogram test_tand\n  real(8) :: x = 0.165_8\n  x = tand(x)\nend program test_tand\n```\n\nSpecific names:  \n| Name       | Argument    | Return type | Standard      |\n|------------|-------------|-------------|---------------|\n| `TAND(X)`  | `REAL(4) X` | `REAL(4)`   | GNU extension |\n| `DTAND(X)` | `REAL(8) X` | `REAL(8)`   | GNU extension |\n\nSee also:  \nInverse function: [`ATAND` — Arctangent function, degrees](atand) Radians function: [`TAN` — Tangent function](tan)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TAND.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TAND.html)"
- name: 8.267. TANH
  id: tanh
  summary: 'Description: TANH(X) computes the hyperbolic tangent of X'
  description: "Next: [`THIS_IMAGE` — Function that returns the cosubscript index of this image](this_005fimage), Previous: [`TAND` — Tangent function, degrees](tand), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.267 TANH — Hyperbolic tangent function [¶](#TANH-----Hyperbolic-tangent-function)\n\nDescription:  \n`TANH(X)` computes the hyperbolic tangent of `X`.\n\nStandard:  \nFortran 77 and later, for a complex argument Fortran 2008 or later\n\nClass:  \nElemental function\n\nSyntax:  \n`X = TANH(X)`\n\nArguments:  \n|     |                                        |\n|-----|----------------------------------------|\n| `X` | The type shall be `REAL` or `COMPLEX`. |\n\nReturn value:  \nThe return value has same type and kind as `X`. If `X` is complex, the imaginary part of the result is in radians. If `X` is `REAL`, the return value lies in the range *- 1 \\leq tanh(x) \\leq 1* .\n\nExample:  \n``` example-preformatted\nprogram test_tanh\n  real(8) :: x = 2.1_8\n  x = tanh(x)\nend program test_tanh\n```\n\nSpecific names:  \n| Name       | Argument    | Return type | Standard             |\n|------------|-------------|-------------|----------------------|\n| `TANH(X)`  | `REAL(4) X` | `REAL(4)`   | Fortran 77 and later |\n| `DTANH(X)` | `REAL(8) X` | `REAL(8)`   | Fortran 77 and later |\n\nSee also:  \n[`ATANH` — Inverse hyperbolic tangent function](atanh)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TANH.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TANH.html)"
- name: 8.268. THIS_IMAGE
  id: this_005fimage
  summary: 'Description: Returns the cosubscript for this image'
  description: "Next: [`TIME` — Time function](time), Previous: [`TANH` — Hyperbolic tangent function](tanh), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.268 THIS_IMAGE — Function that returns the cosubscript index of this image [¶](#THIS_005fIMAGE-----Function-that-returns-the-cosubscript-index-of-this-image)\n\nDescription:  \nReturns the cosubscript for this image.\n\nStandard:  \nFortran 2008 and later. With `DISTANCE` argument, Technical Specification (TS) 18508 or later\n\nClass:  \nTransformational function\n\nSyntax:  \n|                                        |\n|----------------------------------------|\n| `RESULT = THIS_IMAGE()`                |\n| `RESULT = THIS_IMAGE(DISTANCE)`        |\n| `RESULT = THIS_IMAGE(COARRAY [, DIM])` |\n\nArguments:  \n|            |                                                                                                        |\n|------------|--------------------------------------------------------------------------------------------------------|\n| `DISTANCE` | (optional, intent(in)) Nonnegative scalar integer (not permitted together with `COARRAY`).             |\n| `COARRAY`  | Coarray of any type (optional; if `DIM` present, required).                                            |\n| `DIM`      | default integer scalar (optional). If present, `DIM` shall be between one and the corank of `COARRAY`. |\n\nReturn value:  \nDefault integer. If `COARRAY` is not present, it is scalar; if `DISTANCE` is not present or has value 0, its value is the image index on the invoking image for the current team, for values smaller or equal distance to the initial team, it returns the image index on the ancestor team which has a distance of `DISTANCE` from the invoking team. If `DISTANCE` is larger than the distance to the initial team, the image index of the initial team is returned. Otherwise when the `COARRAY` is present, if `DIM` is not present, a rank-1 array with corank elements is returned, containing the cosubscripts for `COARRAY` specifying the invoking image. If `DIM` is present, a scalar is returned, with the value of the `DIM` element of `THIS_IMAGE(COARRAY)`.\n\nExample:  \n``` example-preformatted\nINTEGER :: value[*]\nINTEGER :: i\nvalue = THIS_IMAGE()\nSYNC ALL\nIF (THIS_IMAGE() == 1) THEN\n  DO i = 1, NUM_IMAGES()\n    WRITE(*,'(2(a,i0))') 'value[', i, '] is ', value[i]\n  END DO\nEND IF\n\n! Check whether the current image is the initial image\nIF (THIS_IMAGE(HUGE(1)) /= THIS_IMAGE())\n  error stop \"something is rotten here\"\n```\n\nSee also:  \n[`NUM_IMAGES` — Function that returns the number of images](num_005fimages), [`IMAGE_INDEX` — Function that converts a cosubscript to an image index](image_005findex)\n\nNext: [`TIME` — Time function](time), Previous: [`TANH` — Hyperbolic tangent function](tanh), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/THIS_005fIMAGE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/THIS_005fIMAGE.html)"
- name: 8.269. TIME
  id: time
  summary: 'Description: Returns the current time encoded as an integer (in the manner of the function time(3) in the C standard library)'
  description: "Next: [`TIME8` — Time function (64-bit)](time8), Previous: [`THIS_IMAGE` — Function that returns the cosubscript index of this image](this_005fimage), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.269 TIME — Time function [¶](#TIME-----Time-function)\n\nDescription:  \nReturns the current time encoded as an integer (in the manner of the function `time(3)` in the C standard library). This value is suitable for passing to [`CTIME` — Convert a time into a string](ctime), [`GMTIME` — Convert time to GMT info](gmtime), and [`LTIME` — Convert time to local time info](ltime).\n\nThis intrinsic is not fully portable, such as to systems with 32-bit `INTEGER` types but supporting times wider than 32 bits. Therefore, the values returned by this intrinsic might be, or become, negative, or numerically less than previous values, during a single run of the compiled program.\n\nSee [`TIME8` — Time function (64-bit)](time8), for information on a similar intrinsic that might be portable to more GNU Fortran implementations, though to fewer Fortran compilers.\n\nStandard:  \nGNU extension\n\nClass:  \nFunction\n\nSyntax:  \n`RESULT = TIME()`\n\nReturn value:  \nThe return value is a scalar of type `INTEGER(4)`.\n\nSee also:  \n[`DATE_AND_TIME` — Date and time subroutine](date_005fand_005ftime), [`CTIME` — Convert a time into a string](ctime), [`GMTIME` — Convert time to GMT info](gmtime), [`LTIME` — Convert time to local time info](ltime), [`MCLOCK` — Time function](mclock), [`TIME8` — Time function (64-bit)](time8)\n\nNext: [`TIME8` — Time function (64-bit)](time8), Previous: [`THIS_IMAGE` — Function that returns the cosubscript index of this image](this_005fimage), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TIME.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TIME.html)"
- name: 8.270. TIME8
  id: time8
  summary: 'Description: Returns the current time encoded as an integer (in the manner of the function time(3) in the C standard library)'
  description: "Next: [`TINY` — Smallest positive number of a real kind](tiny), Previous: [`TIME` — Time function](time), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.270 TIME8 — Time function (64-bit) [¶](#TIME8-----Time-function-_002864-bit_0029)\n\nDescription:  \nReturns the current time encoded as an integer (in the manner of the function `time(3)` in the C standard library). This value is suitable for passing to [`CTIME` — Convert a time into a string](ctime), [`GMTIME` — Convert time to GMT info](gmtime), and [`LTIME` — Convert time to local time info](ltime).\n\n*Warning:* this intrinsic does not increase the range of the timing values over that returned by `time(3)`. On a system with a 32-bit `time(3)`, `TIME8` will return a 32-bit value, even though it is converted to a 64-bit `INTEGER(8)` value. That means overflows of the 32-bit value can still occur. Therefore, the values returned by this intrinsic might be or become negative or numerically less than previous values during a single run of the compiled program.\n\nStandard:  \nGNU extension\n\nClass:  \nFunction\n\nSyntax:  \n`RESULT = TIME8()`\n\nReturn value:  \nThe return value is a scalar of type `INTEGER(8)`.\n\nSee also:  \n[`DATE_AND_TIME` — Date and time subroutine](date_005fand_005ftime), [`CTIME` — Convert a time into a string](ctime), [`GMTIME` — Convert time to GMT info](gmtime), [`LTIME` — Convert time to local time info](ltime), [`MCLOCK8` — Time function (64-bit)](mclock8), [`TIME` — Time function](time)\n\nNext: [`TINY` — Smallest positive number of a real kind](tiny), Previous: [`TIME` — Time function](time), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TIME8.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TIME8.html)"
- name: 8.271. TINY
  id: tiny
  summary: 'Description: TINY(X) returns the smallest positive (non zero) number in the model of the type of X'
  description: "Next: [`TRAILZ` — Number of trailing zero bits of an integer](trailz), Previous: [`TIME8` — Time function (64-bit)](time8), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.271 TINY — Smallest positive number of a real kind [¶](#TINY-----Smallest-positive-number-of-a-real-kind)\n\nDescription:  \n`TINY(X)` returns the smallest positive (non zero) number in the model of the type of `X`.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = TINY(X)`\n\nArguments:  \n|     |                          |\n|-----|--------------------------|\n| `X` | Shall be of type `REAL`. |\n\nReturn value:  \nThe return value is of the same type and kind as `X`\n\nExample:  \nSee `HUGE` for an example.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TINY.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TINY.html)"
- name: 8.272. TRAILZ
  id: trailz
  summary: 'Description: TRAILZ returns the number of trailing zero bits of an integer'
  description: "Next: [`TRANSFER` — Transfer bit patterns](transfer), Previous: [`TINY` — Smallest positive number of a real kind](tiny), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.272 TRAILZ — Number of trailing zero bits of an integer [¶](#TRAILZ-----Number-of-trailing-zero-bits-of-an-integer)\n\nDescription:  \n`TRAILZ` returns the number of trailing zero bits of an integer.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = TRAILZ(I)`\n\nArguments:  \n|     |                             |\n|-----|-----------------------------|\n| `I` | Shall be of type `INTEGER`. |\n\nReturn value:  \nThe type of the return value is the default `INTEGER`. If all the bits of `I` are zero, the result value is `BIT_SIZE(I)`.\n\nExample:  \n``` example-preformatted\nPROGRAM test_trailz\n  WRITE (*,*) TRAILZ(8)  ! prints 3\nEND PROGRAM\n```\n\nSee also:  \n[`BIT_SIZE` — Bit size inquiry function](bit_005fsize), [`LEADZ` — Number of leading zero bits of an integer](leadz), [`POPPAR` — Parity of the number of bits set](poppar), [`POPCNT` — Number of bits set](popcnt)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TRAILZ.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TRAILZ.html)"
- name: 8.273. TRANSFER
  id: transfer
  summary: 'Description: Interprets the bitwise representation of SOURCE in memory as if it is the representation of a variable or array of the same type and type parameters as MOLD'
  description: "Next: [`TRANSPOSE` — Transpose an array of rank two](transpose), Previous: [`TRAILZ` — Number of trailing zero bits of an integer](trailz), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.273 TRANSFER — Transfer bit patterns [¶](#TRANSFER-----Transfer-bit-patterns)\n\nDescription:  \nInterprets the bitwise representation of `SOURCE` in memory as if it is the representation of a variable or array of the same type and type parameters as `MOLD`.\n\nThis is approximately equivalent to the C concept of *casting* one type to another.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n`RESULT = TRANSFER(SOURCE, MOLD[, SIZE])`\n\nArguments:  \n|          |                                                 |\n|----------|-------------------------------------------------|\n| `SOURCE` | Shall be a scalar or an array of any type.      |\n| `MOLD`   | Shall be a scalar or an array of any type.      |\n| `SIZE`   | (Optional) shall be a scalar of type `INTEGER`. |\n\nReturn value:  \nThe result has the same type as `MOLD`, with the bit level representation of `SOURCE`. If `SIZE` is present, the result is a one-dimensional array of length `SIZE`. If `SIZE` is absent but `MOLD` is an array (of any size or shape), the result is a one- dimensional array of the minimum length needed to contain the entirety of the bitwise representation of `SOURCE`. If `SIZE` is absent and `MOLD` is a scalar, the result is a scalar.\n\nIf the bitwise representation of the result is longer than that of `SOURCE`, then the leading bits of the result correspond to those of `SOURCE` and any trailing bits are filled arbitrarily.\n\nWhen the resulting bit representation does not correspond to a valid representation of a variable of the same type as `MOLD`, the results are undefined, and subsequent operations on the result cannot be guaranteed to produce sensible behavior. For example, it is possible to create `LOGICAL` variables for which `VAR` and `.NOT.``VAR` both appear to be true.\n\nExample:  \n``` example-preformatted\nPROGRAM test_transfer\n  integer :: x = 2143289344\n  print *, transfer(x, 1.0)    ! prints \"NaN\" on i686\nEND PROGRAM\n```\n\nNext: [`TRANSPOSE` — Transpose an array of rank two](transpose), Previous: [`TRAILZ` — Number of trailing zero bits of an integer](trailz), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TRANSFER.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TRANSFER.html)"
- name: 8.274. TRANSPOSE
  id: transpose
  summary: 'Description: Transpose an array of rank two'
  description: "Next: [`TRIM` — Remove trailing blank characters of a string](trim), Previous: [`TRANSFER` — Transfer bit patterns](transfer), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.274 TRANSPOSE — Transpose an array of rank two [¶](#TRANSPOSE-----Transpose-an-array-of-rank-two)\n\nDescription:  \nTranspose an array of rank two. Element (i, j) of the result has the value `MATRIX(j, i)`, for all i, j.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n`RESULT = TRANSPOSE(MATRIX)`\n\nArguments:  \n|          |                                                       |\n|----------|-------------------------------------------------------|\n| `MATRIX` | Shall be an array of any type and have a rank of two. |\n\nReturn value:  \nThe result has the same type as `MATRIX`, and has shape `(/ m, n /)` if `MATRIX` has shape `(/ n, m /)`.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TRANSPOSE.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TRANSPOSE.html)"
- name: 8.275. TRIM
  id: trim
  summary: 'Description: Removes trailing blank characters of a string'
  description: "Next: [`TTYNAM` — Get the name of a terminal device](ttynam), Previous: [`TRANSPOSE` — Transpose an array of rank two](transpose), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.275 TRIM — Remove trailing blank characters of a string [¶](#TRIM-----Remove-trailing-blank-characters-of-a-string)\n\nDescription:  \nRemoves trailing blank characters of a string.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n`RESULT = TRIM(STRING)`\n\nArguments:  \n|          |                                        |\n|----------|----------------------------------------|\n| `STRING` | Shall be a scalar of type `CHARACTER`. |\n\nReturn value:  \nA scalar of type `CHARACTER` which length is that of `STRING` less the number of trailing blanks.\n\nExample:  \n``` example-preformatted\nPROGRAM test_trim\n  CHARACTER(len=10), PARAMETER :: s = \"GFORTRAN  \"\n  WRITE(*,*) LEN(s), LEN(TRIM(s))  ! \"10 8\", with/without trailing blanks\nEND PROGRAM\n```\n\nSee also:  \n[`ADJUSTL` — Left adjust a string](adjustl), [`ADJUSTR` — Right adjust a string](adjustr)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TRIM.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TRIM.html)"
- name: 8.276. TTYNAM
  id: ttynam
  summary: 'Description: Get the name of a terminal device'
  description: "Next: [`UBOUND` — Upper dimension bounds of an array](ubound), Previous: [`TRIM` — Remove trailing blank characters of a string](trim), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.276 TTYNAM — Get the name of a terminal device [¶](#TTYNAM-----Get-the-name-of-a-terminal-device)\n\nDescription:  \nGet the name of a terminal device. For more information, see `ttyname(3)`.\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                           |\n|---------------------------|\n| `CALL TTYNAM(UNIT, NAME)` |\n| `NAME = TTYNAM(UNIT)`     |\n\nArguments:  \n|        |                               |\n|--------|-------------------------------|\n| `UNIT` | Shall be a scalar `INTEGER`.  |\n| `NAME` | Shall be of type `CHARACTER`. |\n\nExample:  \n``` example-preformatted\nPROGRAM test_ttynam\n  INTEGER :: unit\n  DO unit = 1, 10\n    IF (isatty(unit=unit)) write(*,*) ttynam(unit)\n  END DO\nEND PROGRAM\n```\n\nSee also:  \n[`ISATTY` — Whether a unit is a terminal device](isatty)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TTYNAM.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/TTYNAM.html)"
- name: 8.277. UBOUND
  id: ubound
  summary: 'Description: Returns the upper bounds of an array, or a single upper bound along the DIM dimension'
  description: "Next: [`UCOBOUND` — Upper codimension bounds of an array](ucobound), Previous: [`TTYNAM` — Get the name of a terminal device](ttynam), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.277 UBOUND — Upper dimension bounds of an array [¶](#UBOUND-----Upper-dimension-bounds-of-an-array)\n\nDescription:  \nReturns the upper bounds of an array, or a single upper bound along the `DIM` dimension.\n\nStandard:  \nFortran 90 and later, with `KIND` argument Fortran 2003 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = UBOUND(ARRAY [, DIM [, KIND]])`\n\nArguments:  \n|         |                                                                                                |\n|---------|------------------------------------------------------------------------------------------------|\n| `ARRAY` | Shall be an array, of any type.                                                                |\n| `DIM`   | (Optional) Shall be a scalar `INTEGER`.                                                        |\n| `KIND`  | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of kind `KIND`. If `KIND` is absent, the return value is of default integer kind. If `DIM` is absent, the result is an array of the upper bounds of `ARRAY`. If `DIM` is present, the result is a scalar corresponding to the upper bound of the array along that dimension. If `ARRAY` is an expression rather than a whole array or array structure component, or if it has a zero extent along the relevant dimension, the upper bound is taken to be the number of elements along the relevant dimension.\n\nSee also:  \n[`LBOUND` — Lower dimension bounds of an array](lbound), [`LCOBOUND` — Lower codimension bounds of an array](lcobound)\n\nNext: [`UCOBOUND` — Upper codimension bounds of an array](ucobound), Previous: [`TTYNAM` — Get the name of a terminal device](ttynam), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/UBOUND.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/UBOUND.html)"
- name: 8.278. UCOBOUND
  id: ucobound
  summary: 'Description: Returns the upper cobounds of a coarray, or a single upper cobound along the DIM codimension'
  description: "Next: [`UMASK` — Set the file creation mask](umask), Previous: [`UBOUND` — Upper dimension bounds of an array](ubound), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.278 UCOBOUND — Upper codimension bounds of an array [¶](#UCOBOUND-----Upper-codimension-bounds-of-an-array)\n\nDescription:  \nReturns the upper cobounds of a coarray, or a single upper cobound along the `DIM` codimension.\n\nStandard:  \nFortran 2008 and later\n\nClass:  \nInquiry function\n\nSyntax:  \n`RESULT = UCOBOUND(COARRAY [, DIM [, KIND]])`\n\nArguments:  \n|         |                                                                                                |\n|---------|------------------------------------------------------------------------------------------------|\n| `ARRAY` | Shall be an coarray, of any type.                                                              |\n| `DIM`   | (Optional) Shall be a scalar `INTEGER`.                                                        |\n| `KIND`  | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of kind `KIND`. If `KIND` is absent, the return value is of default integer kind. If `DIM` is absent, the result is an array of the lower cobounds of `COARRAY`. If `DIM` is present, the result is a scalar corresponding to the lower cobound of the array along that codimension.\n\nSee also:  \n[`LCOBOUND` — Lower codimension bounds of an array](lcobound), [`LBOUND` — Lower dimension bounds of an array](lbound)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/UCOBOUND.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/UCOBOUND.html)"
- name: 8.279. UMASK
  id: umask
  summary: 'Description: Sets the file creation mask to MASK'
  description: "Next: [`UNLINK` — Remove a file from the file system](unlink), Previous: [`UCOBOUND` — Upper codimension bounds of an array](ucobound), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.279 UMASK — Set the file creation mask [¶](#UMASK-----Set-the-file-creation-mask)\n\nDescription:  \nSets the file creation mask to `MASK`. If called as a function, it returns the old value. If called as a subroutine and argument `OLD` if it is supplied, it is set to the old value. See `umask(2)`.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                            |\n|----------------------------|\n| `CALL UMASK(MASK [, OLD])` |\n| `OLD = UMASK(MASK)`        |\n\nArguments:  \n|        |                                                 |\n|--------|-------------------------------------------------|\n| `MASK` | Shall be a scalar of type `INTEGER`.            |\n| `OLD`  | (Optional) Shall be a scalar of type `INTEGER`. |\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/UMASK.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/UMASK.html)"
- name: 8.280. UNLINK
  id: unlink
  summary: 'Description: Unlinks the file PATH'
  description: "Next: [`UNPACK` — Unpack an array of rank one into an array](unpack), Previous: [`UMASK` — Set the file creation mask](umask), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.280 UNLINK — Remove a file from the file system [¶](#UNLINK-----Remove-a-file-from-the-file-system)\n\nDescription:  \nUnlinks the file `PATH`. A null character (`CHAR(0)`) can be used to mark the end of the name in `PATH`; otherwise, trailing blanks in the file name are ignored. If the `STATUS` argument is supplied, it contains 0 on success or a nonzero error code upon return; see `unlink(2)`.\n\nThis intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.\n\nStandard:  \nGNU extension\n\nClass:  \nSubroutine, function\n\nSyntax:  \n|                                |\n|--------------------------------|\n| `CALL UNLINK(PATH [, STATUS])` |\n| `STATUS = UNLINK(PATH)`        |\n\nArguments:  \n|          |                                                |\n|----------|------------------------------------------------|\n| `PATH`   | Shall be of default `CHARACTER` type.          |\n| `STATUS` | (Optional) Shall be of default `INTEGER` type. |\n\nSee also:  \n[`LINK` — Create a hard link](link), [`SYMLNK` — Create a symbolic link](symlnk)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/UNLINK.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/UNLINK.html)"
- name: 8.281. UNPACK
  id: unpack
  summary: 'Description: Store the elements of VECTOR in an array of higher rank'
  description: "Next: [`VERIFY` — Scan a string for characters not a given set](verify), Previous: [`UNLINK` — Remove a file from the file system](unlink), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.281 UNPACK — Unpack an array of rank one into an array [¶](#UNPACK-----Unpack-an-array-of-rank-one-into-an-array)\n\nDescription:  \nStore the elements of `VECTOR` in an array of higher rank.\n\nStandard:  \nFortran 90 and later\n\nClass:  \nTransformational function\n\nSyntax:  \n`RESULT = UNPACK(VECTOR, MASK, FIELD)`\n\nArguments:  \n|          |                                                                                                                  |\n|----------|------------------------------------------------------------------------------------------------------------------|\n| `VECTOR` | Shall be an array of any type and rank one. It shall have at least as many elements as `MASK` has `TRUE` values. |\n| `MASK`   | Shall be an array of type `LOGICAL`.                                                                             |\n| `FIELD`  | Shall be of the same type as `VECTOR` and have the same shape as `MASK`.                                         |\n\nReturn value:  \nThe resulting array corresponds to `FIELD` with `TRUE` elements of `MASK` replaced by values from `VECTOR` in array element order.\n\nExample:  \n``` example-preformatted\nPROGRAM test_unpack\n  integer :: vector(2)  = (/1,1/)\n  logical :: mask(4)  = (/ .TRUE., .FALSE., .FALSE., .TRUE. /)\n  integer :: field(2,2) = 0, unity(2,2)\n\n  ! result: unity matrix\n  unity = unpack(vector, reshape(mask, (/2,2/)), field)\nEND PROGRAM\n```\n\nSee also:  \n[`PACK` — Pack an array into an array of rank one](pack), [`SPREAD` — Add a dimension to an array](spread)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/UNPACK.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/UNPACK.html)"
- name: 8.282. VERIFY
  id: verify
  summary: 'Description: Verifies that all the characters in STRING belong to the set of characters in SET'
  description: "Next: [`XOR` — Bitwise logical exclusive OR](xor), Previous: [`UNPACK` — Unpack an array of rank one into an array](unpack), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.282 VERIFY — Scan a string for characters not a given set [¶](#VERIFY-----Scan-a-string-for-characters-not-a-given-set)\n\nDescription:  \nVerifies that all the characters in `STRING` belong to the set of characters in `SET`.\n\nIf `BACK` is either absent or equals `FALSE`, this function returns the position of the leftmost character of `STRING` that is not in `SET`. If `BACK` equals `TRUE`, the rightmost position is returned. If all characters of `STRING` are found in `SET`, the result is zero.\n\nStandard:  \nFortran 90 and later, with `KIND` argument Fortran 2003 and later\n\nClass:  \nElemental function\n\nSyntax:  \n`RESULT = VERIFY(STRING, SET[, BACK [, KIND]])`\n\nArguments:  \n|          |                                                                                                |\n|----------|------------------------------------------------------------------------------------------------|\n| `STRING` | Shall be of type `CHARACTER`.                                                                  |\n| `SET`    | Shall be of type `CHARACTER`.                                                                  |\n| `BACK`   | (Optional) shall be of type `LOGICAL`.                                                         |\n| `KIND`   | (Optional) A scalar `INTEGER` constant expression indicating the kind parameter of the result. |\n\nReturn value:  \nThe return value is of type `INTEGER` and of kind `KIND`. If `KIND` is absent, the return value is of default integer kind.\n\nExample:  \n``` example-preformatted\nPROGRAM test_verify\n  WRITE(*,*) VERIFY(\"FORTRAN\", \"AO\")           ! 1, found 'F'\n  WRITE(*,*) VERIFY(\"FORTRAN\", \"FOO\")          ! 3, found 'R'\n  WRITE(*,*) VERIFY(\"FORTRAN\", \"C++\")          ! 1, found 'F'\n  WRITE(*,*) VERIFY(\"FORTRAN\", \"C++\", .TRUE.)  ! 7, found 'N'\n  WRITE(*,*) VERIFY(\"FORTRAN\", \"FORTRAN\")      ! 0' found none\nEND PROGRAM\n```\n\nSee also:  \n[`SCAN` — Scan a string for the presence of a set of characters](scan), [`INDEX` — Position of a substring within a string](index-intrinsic)\n\nNext: [`XOR` — Bitwise logical exclusive OR](xor), Previous: [`UNPACK` — Unpack an array of rank one into an array](unpack), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/VERIFY.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/VERIFY.html)"
- name: 8.283. XOR
  id: xor
  summary: 'Description: Bitwise logical exclusive or'
  description: "Previous: [`VERIFY` — Scan a string for characters not a given set](verify), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 8.283 XOR — Bitwise logical exclusive OR [¶](#XOR-----Bitwise-logical-exclusive-OR)\n\nDescription:  \nBitwise logical exclusive or.\n\nThis intrinsic routine is provided for backwards compatibility with GNU Fortran 77. For integer arguments, programmers should consider the use of the [`IEOR` — Bitwise logical exclusive or](ieor) intrinsic and for logical arguments the `.NEQV.` operator, which are both defined by the Fortran standard.\n\nStandard:  \nGNU extension\n\nClass:  \nFunction\n\nSyntax:  \n`RESULT = XOR(I, J)`\n\nArguments:  \n|     |                                                                                                                                                                                                                                    |\n|-----|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `I` | The type shall be either a scalar `INTEGER` type or a scalar `LOGICAL` type or a boz-literal-constant.                                                                                                                             |\n| `J` | The type shall be the same as the type of `I` or a boz-literal-constant. `I` and `J` shall not both be boz-literal-constants. If either `I` and `J` is a boz-literal-constant, then the other argument must be a scalar `INTEGER`. |\n\nReturn value:  \nThe return type is either a scalar `INTEGER` or a scalar `LOGICAL`. If the kind type parameters differ, then the smaller kind type is implicitly converted to larger kind, and the return has the larger kind. A boz-literal-constant is converted to an `INTEGER` with the kind type parameter of the other argument as-if a call to [`INT` — Convert to integer type](int) occurred.\n\nExample:  \n``` example-preformatted\nPROGRAM test_xor\n  LOGICAL :: T = .TRUE., F = .FALSE.\n  INTEGER :: a, b\n  DATA a / Z'F' /, b / Z'3' /\n\n  WRITE (*,*) XOR(T, T), XOR(T, F), XOR(F, T), XOR(F, F)\n  WRITE (*,*) XOR(a, b)\nEND PROGRAM\n```\n\nSee also:  \nFortran 95 elemental function: [`IEOR` — Bitwise logical exclusive or](ieor)\n\nPrevious: [`VERIFY` — Scan a string for characters not a given set](verify), Up: [Intrinsic Procedures](intrinsic-procedures) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/XOR.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/XOR.html)"
- name: 9. Intrinsic Modules ¶
  id: intrinsic-modules
  summary: © Free Software Foundation Licensed under the GNU Free Documentation License, Version 1.3
  description: "Next: [Contributing](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Contributing.html), Previous: [Intrinsic Procedures](intrinsic-procedures), Up: [Introduction](index) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 9 Intrinsic Modules [¶](#Intrinsic-Modules-1)\n\n- [`ISO_FORTRAN_ENV`](iso_005ffortran_005fenv)\n- [`ISO_C_BINDING`](iso_005fc_005fbinding)\n- [IEEE modules: `IEEE_EXCEPTIONS`, `IEEE_ARITHMETIC`, and `IEEE_FEATURES`](ieee-modules)\n- [OpenMP Modules `OMP_LIB` and `OMP_LIB_KINDS`](openmp-modules-omp_005flib-and-omp_005flib_005fkinds)\n- [OpenACC Module `OPENACC`](openacc-module-openacc)\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Intrinsic-Modules.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Intrinsic-Modules.html)"
- name: 9.1. ISO_FORTRAN_ENV ¶
  id: iso_005ffortran_005fenv
  summary: 'ATOMIC_INT_KIND: Default-kind integer constant to be used as kind parameter when defining integer variables used in atomic operations'
  description: "Next: [`ISO_C_BINDING`](iso_005fc_005fbinding), Up: [Intrinsic Modules](intrinsic-modules) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 9.1 ISO_FORTRAN_ENV [¶](#ISO_005fFORTRAN_005fENV-1)\n\nStandard:  \nFortran 2003 and later, except when otherwise noted\n\nThe `ISO_FORTRAN_ENV` module provides the following scalar default-integer named constants:\n\n`ATOMIC_INT_KIND`:  \nDefault-kind integer constant to be used as kind parameter when defining integer variables used in atomic operations. (Fortran 2008 or later.)\n\n`ATOMIC_LOGICAL_KIND`:  \nDefault-kind integer constant to be used as kind parameter when defining logical variables used in atomic operations. (Fortran 2008 or later.)\n\n`CHARACTER_KINDS`:  \nDefault-kind integer constant array of rank one containing the supported kind parameters of the `CHARACTER` type. (Fortran 2008 or later.)\n\n`CHARACTER_STORAGE_SIZE`:  \nSize in bits of the character storage unit.\n\n`ERROR_UNIT`:  \nIdentifies the preconnected unit used for error reporting.\n\n`FILE_STORAGE_SIZE`:  \nSize in bits of the file-storage unit.\n\n`INPUT_UNIT`:  \nIdentifies the preconnected unit identified by the asterisk (`*`) in `READ` statement.\n\n`INT8`, `INT16`, `INT32`, `INT64`:  \nKind type parameters to specify an INTEGER type with a storage size of 16, 32, and 64 bits. It is negative if a target platform does not support the particular kind. (Fortran 2008 or later.)\n\n`INTEGER_KINDS`:  \nDefault-kind integer constant array of rank one containing the supported kind parameters of the `INTEGER` type. (Fortran 2008 or later.)\n\n`IOSTAT_END`:  \nThe value assigned to the variable passed to the `IOSTAT=` specifier of an input/output statement if an end-of-file condition occurred.\n\n`IOSTAT_EOR`:  \nThe value assigned to the variable passed to the `IOSTAT=` specifier of an input/output statement if an end-of-record condition occurred.\n\n`IOSTAT_INQUIRE_INTERNAL_UNIT`:  \nScalar default-integer constant, used by `INQUIRE` for the `IOSTAT=` specifier to denote an that a unit number identifies an internal unit. (Fortran 2008 or later.)\n\n`NUMERIC_STORAGE_SIZE`:  \nThe size in bits of the numeric storage unit.\n\n`LOGICAL_KINDS`:  \nDefault-kind integer constant array of rank one containing the supported kind parameters of the `LOGICAL` type. (Fortran 2008 or later.)\n\n`OUTPUT_UNIT`:  \nIdentifies the preconnected unit identified by the asterisk (`*`) in `WRITE` statement.\n\n`REAL32`, `REAL64`, `REAL128`:  \nKind type parameters to specify a REAL type with a storage size of 32, 64, and 128 bits. It is negative if a target platform does not support the particular kind. (Fortran 2008 or later.)\n\n`REAL_KINDS`:  \nDefault-kind integer constant array of rank one containing the supported kind parameters of the `REAL` type. (Fortran 2008 or later.)\n\n`STAT_LOCKED`:  \nScalar default-integer constant used as STAT= return value by `LOCK` to denote that the lock variable is locked by the executing image. (Fortran 2008 or later.)\n\n`STAT_LOCKED_OTHER_IMAGE`:  \nScalar default-integer constant used as STAT= return value by `UNLOCK` to denote that the lock variable is locked by another image. (Fortran 2008 or later.)\n\n`STAT_STOPPED_IMAGE`:  \nPositive, scalar default-integer constant used as STAT= return value if the argument in the statement requires synchronisation with an image, which has initiated the termination of the execution. (Fortran 2008 or later.)\n\n`STAT_FAILED_IMAGE`:  \nPositive, scalar default-integer constant used as STAT= return value if the argument in the statement requires communication with an image, which has is in the failed state. (TS 18508 or later.)\n\n`STAT_UNLOCKED`:  \nScalar default-integer constant used as STAT= return value by `UNLOCK` to denote that the lock variable is unlocked. (Fortran 2008 or later.)\n\nThe module provides the following derived type:\n\n`LOCK_TYPE`:  \nDerived type with private components to be use with the `LOCK` and `UNLOCK` statement. A variable of its type has to be always declared as coarray and may not appear in a variable-definition context. (Fortran 2008 or later.)\n\nThe module also provides the following intrinsic procedures: [`COMPILER_OPTIONS` — Options passed to the compiler](compiler_005foptions) and [`COMPILER_VERSION` — Compiler version string](compiler_005fversion).\n\nNext: [`ISO_C_BINDING`](iso_005fc_005fbinding), Up: [Intrinsic Modules](intrinsic-modules) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ISO_005fFORTRAN_005fENV.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ISO_005fFORTRAN_005fENV.html)"
- name: 9.2. ISO_C_BINDING ¶
  id: iso_005fc_005fbinding
  summary: The following intrinsic procedures are provided by the module; their definition can be found in the section Intrinsic Procedures of this manual
  description: "Next: [IEEE modules: `IEEE_EXCEPTIONS`, `IEEE_ARITHMETIC`, and `IEEE_FEATURES`](ieee-modules), Previous: [`ISO_FORTRAN_ENV`](iso_005ffortran_005fenv), Up: [Intrinsic Modules](intrinsic-modules) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 9.2 ISO_C_BINDING [¶](#ISO_005fC_005fBINDING-1)\n\nStandard:  \nFortran 2003 and later, GNU extensions\n\nThe following intrinsic procedures are provided by the module; their definition can be found in the section Intrinsic Procedures of this manual.\n\n`C_ASSOCIATED`\n\n`C_F_POINTER`\n\n`C_F_PROCPOINTER`\n\n`C_FUNLOC`\n\n`C_LOC`\n\n`C_SIZEOF`\n\nThe `ISO_C_BINDING` module provides the following named constants of type default integer, which can be used as KIND type parameters.\n\nIn addition to the integer named constants required by the Fortran 2003 standard and `C_PTRDIFF_T` of TS 29113, GNU Fortran provides as an extension named constants for the 128-bit integer types supported by the C compiler: `C_INT128_T, C_INT_LEAST128_T, C_INT_FAST128_T`. Furthermore, if `_Float128` is supported in C, the named constants `C_FLOAT128` and `C_FLOAT128_COMPLEX` are defined.\n\n| Fortran Type | Named constant          | C type                        | Extension |\n|--------------|-------------------------|-------------------------------|-----------|\n| `INTEGER`    | `C_INT`                 | `int`                         |           |\n| `INTEGER`    | `C_SHORT`               | `short int`                   |           |\n| `INTEGER`    | `C_LONG`                | `long int`                    |           |\n| `INTEGER`    | `C_LONG_LONG`           | `long long int`               |           |\n| `INTEGER`    | `C_SIGNED_CHAR`         | `signed char`/`unsigned char` |           |\n| `INTEGER`    | `C_SIZE_T`              | `size_t`                      |           |\n| `INTEGER`    | `C_INT8_T`              | `int8_t`                      |           |\n| `INTEGER`    | `C_INT16_T`             | `int16_t`                     |           |\n| `INTEGER`    | `C_INT32_T`             | `int32_t`                     |           |\n| `INTEGER`    | `C_INT64_T`             | `int64_t`                     |           |\n| `INTEGER`    | `C_INT128_T`            | `int128_t`                    | Ext.      |\n| `INTEGER`    | `C_INT_LEAST8_T`        | `int_least8_t`                |           |\n| `INTEGER`    | `C_INT_LEAST16_T`       | `int_least16_t`               |           |\n| `INTEGER`    | `C_INT_LEAST32_T`       | `int_least32_t`               |           |\n| `INTEGER`    | `C_INT_LEAST64_T`       | `int_least64_t`               |           |\n| `INTEGER`    | `C_INT_LEAST128_T`      | `int_least128_t`              | Ext.      |\n| `INTEGER`    | `C_INT_FAST8_T`         | `int_fast8_t`                 |           |\n| `INTEGER`    | `C_INT_FAST16_T`        | `int_fast16_t`                |           |\n| `INTEGER`    | `C_INT_FAST32_T`        | `int_fast32_t`                |           |\n| `INTEGER`    | `C_INT_FAST64_T`        | `int_fast64_t`                |           |\n| `INTEGER`    | `C_INT_FAST128_T`       | `int_fast128_t`               | Ext.      |\n| `INTEGER`    | `C_INTMAX_T`            | `intmax_t`                    |           |\n| `INTEGER`    | `C_INTPTR_T`            | `intptr_t`                    |           |\n| `INTEGER`    | `C_PTRDIFF_T`           | `ptrdiff_t`                   | TS 29113  |\n| `REAL`       | `C_FLOAT`               | `float`                       |           |\n| `REAL`       | `C_DOUBLE`              | `double`                      |           |\n| `REAL`       | `C_LONG_DOUBLE`         | `long double`                 |           |\n| `REAL`       | `C_FLOAT128`            | `_Float128`                   | Ext.      |\n| `COMPLEX`    | `C_FLOAT_COMPLEX`       | `float _Complex`              |           |\n| `COMPLEX`    | `C_DOUBLE_COMPLEX`      | `double _Complex`             |           |\n| `COMPLEX`    | `C_LONG_DOUBLE_COMPLEX` | `long double _Complex`        |           |\n| `COMPLEX`    | `C_FLOAT128_COMPLEX`    | `_Float128 _Complex`          | Ext.      |\n| `LOGICAL`    | `C_BOOL`                | `_Bool`                       |           |\n| `CHARACTER`  | `C_CHAR`                | `char`                        |           |\n\nAdditionally, the following parameters of type `CHARACTER(KIND=C_CHAR)` are defined.\n\n| Name                | C definition    | Value  |\n|---------------------|-----------------|--------|\n| `C_NULL_CHAR`       | null character  | `'\\0'` |\n| `C_ALERT`           | alert           | `'\\a'` |\n| `C_BACKSPACE`       | backspace       | `'\\b'` |\n| `C_FORM_FEED`       | form feed       | `'\\f'` |\n| `C_NEW_LINE`        | new line        | `'\\n'` |\n| `C_CARRIAGE_RETURN` | carriage return | `'\\r'` |\n| `C_HORIZONTAL_TAB`  | horizontal tab  | `'\\t'` |\n| `C_VERTICAL_TAB`    | vertical tab    | `'\\v'` |\n\nMoreover, the following two named constants are defined:\n\n| Name            | Type       |\n|-----------------|------------|\n| `C_NULL_PTR`    | `C_PTR`    |\n| `C_NULL_FUNPTR` | `C_FUNPTR` |\n\nBoth are equivalent to the value `NULL` in C.\n\nNext: [IEEE modules: `IEEE_EXCEPTIONS`, `IEEE_ARITHMETIC`, and `IEEE_FEATURES`](ieee-modules), Previous: [`ISO_FORTRAN_ENV`](iso_005ffortran_005fenv), Up: [Intrinsic Modules](intrinsic-modules) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ISO_005fC_005fBINDING.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/ISO_005fC_005fBINDING.html)"
- name: '9.3. IEEE modules: IEEE_EXCEPTIONS, IEEE_ARITHMETIC, and IEEE_FEATURES ¶'
  id: ieee-modules
  summary: The IEEE_EXCEPTIONS, IEEE_ARITHMETIC, and IEEE_FEATURES intrinsic modules provide support for exceptions and IEEE arithmetic, as defined in Fortran 2003 and later standards, and the IEC 60559:1989 standard (Binary floating-point arithmetic for microprocessor systems)
  description: "Next: [OpenMP Modules `OMP_LIB` and `OMP_LIB_KINDS`](openmp-modules-omp_005flib-and-omp_005flib_005fkinds), Previous: [`ISO_C_BINDING`](iso_005fc_005fbinding), Up: [Intrinsic Modules](intrinsic-modules) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 9.3 IEEE modules: IEEE_EXCEPTIONS, IEEE_ARITHMETIC, and IEEE_FEATURES [¶](#IEEE-modules_003a-IEEE_005fEXCEPTIONS_002c-IEEE_005fARITHMETIC_002c-and-IEEE_005fFEATURES)\n\nStandard:  \nFortran 2003 and later\n\nThe `IEEE_EXCEPTIONS`, `IEEE_ARITHMETIC`, and `IEEE_FEATURES` intrinsic modules provide support for exceptions and IEEE arithmetic, as defined in Fortran 2003 and later standards, and the IEC 60559:1989 standard (*Binary floating-point arithmetic for microprocessor systems*). These modules are only provided on the following supported platforms:\n\n- i386 and x86_64 processors\n- platforms which use the GNU C Library (glibc)\n- platforms with support for SysV/386 routines for floating point interface (including Solaris and BSDs)\n- platforms with the AIX OS\n\nFor full compliance with the Fortran standards, code using the `IEEE_EXCEPTIONS` or `IEEE_ARITHMETIC` modules should be compiled with the following options: `-fno-unsafe-math-optimizations -frounding-math -fsignaling-nans`.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IEEE-modules.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/IEEE-modules.html)"
- name: 9.4. OpenMP Modules OMP_LIB and OMP_LIB_KINDS ¶
  id: openmp-modules-omp_005flib-and-omp_005flib_005fkinds
  summary: 'Standard: OpenMP Application Program Interface v4.5, OpenMP Application Program Interface v5.0 (partially supported) and OpenMP Application Program Interface v5.1 (partially supported)'
  description: "Next: [OpenACC Module `OPENACC`](openacc-module-openacc), Previous: [IEEE modules: `IEEE_EXCEPTIONS`, `IEEE_ARITHMETIC`, and `IEEE_FEATURES`](ieee-modules), Up: [Intrinsic Modules](intrinsic-modules) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 9.4 OpenMP Modules OMP_LIB and OMP_LIB_KINDS [¶](#OpenMP-Modules-OMP_005fLIB-and-OMP_005fLIB_005fKINDS-1)\n\nStandard:  \nOpenMP Application Program Interface v4.5, OpenMP Application Program Interface v5.0 (partially supported) and OpenMP Application Program Interface v5.1 (partially supported).\n\nThe OpenMP Fortran runtime library routines are provided both in a form of two Fortran modules, named `OMP_LIB` and `OMP_LIB_KINDS`, and in a form of a Fortran `include` file named `omp_lib.h`. The procedures provided by `OMP_LIB` can be found in the [Introduction](https://gcc.gnu.org/onlinedocs/libgomp/index.html#Top) in GNU Offloading and Multi Processing Runtime Library manual, the named constants defined in the modules are listed below.\n\nFor details refer to the actual [OpenMP Application Program Interface v4.5](https://www.openmp.org/wp-content/uploads/openmp-4.5.pdf) and [OpenMP Application Program Interface v5.0](https://www.openmp.org/wp-content/uploads/OpenMP-API-Specification-5.0.pdf).\n\n`OMP_LIB_KINDS` provides the following scalar default-integer named constants:\n\n`omp_allocator_handle_kind`\n\n`omp_alloctrait_key_kind`\n\n`omp_alloctrait_val_kind`\n\n`omp_depend_kind`\n\n`omp_lock_kind`\n\n`omp_lock_hint_kind`\n\n`omp_nest_lock_kind`\n\n`omp_pause_resource_kind`\n\n`omp_memspace_handle_kind`\n\n`omp_proc_bind_kind`\n\n`omp_sched_kind`\n\n`omp_sync_hint_kind`\n\n`OMP_LIB` provides the scalar default-integer named constant `openmp_version` with a value of the form `yyyymm`, where `yyyy` is the year and `mm` the month of the OpenMP version; for OpenMP v4.5 the value is `201511`.\n\nThe following derived type:\n\n`omp_alloctrait`\n\nThe following scalar integer named constants of the kind `omp_sched_kind`:\n\n`omp_sched_static`\n\n`omp_sched_dynamic`\n\n`omp_sched_guided`\n\n`omp_sched_auto`\n\nAnd the following scalar integer named constants of the kind `omp_proc_bind_kind`:\n\n`omp_proc_bind_false`\n\n`omp_proc_bind_true`\n\n`omp_proc_bind_primary`\n\n`omp_proc_bind_master`\n\n`omp_proc_bind_close`\n\n`omp_proc_bind_spread`\n\nThe following scalar integer named constants are of the kind `omp_lock_hint_kind`:\n\n`omp_lock_hint_none`\n\n`omp_lock_hint_uncontended`\n\n`omp_lock_hint_contended`\n\n`omp_lock_hint_nonspeculative`\n\n`omp_lock_hint_speculative`\n\n`omp_sync_hint_none`\n\n`omp_sync_hint_uncontended`\n\n`omp_sync_hint_contended`\n\n`omp_sync_hint_nonspeculative`\n\n`omp_sync_hint_speculative`\n\nAnd the following two scalar integer named constants are of the kind `omp_pause_resource_kind`:\n\n`omp_pause_soft`\n\n`omp_pause_hard`\n\nThe following scalar integer named constants are of the kind `omp_alloctrait_key_kind`:\n\n`omp_atk_sync_hint`\n\n`omp_atk_alignment`\n\n`omp_atk_access`\n\n`omp_atk_pool_size`\n\n`omp_atk_fallback`\n\n`omp_atk_fb_data`\n\n`omp_atk_pinned`\n\n`omp_atk_partition`\n\nThe following scalar integer named constants are of the kind `omp_alloctrait_val_kind`:\n\n`omp_alloctrait_key_kind`:\n\n`omp_atv_default`\n\n`omp_atv_false`\n\n`omp_atv_true`\n\n`omp_atv_contended`\n\n`omp_atv_uncontended`\n\n`omp_atv_serialized`\n\n`omp_atv_sequential`\n\n`omp_atv_private`\n\n`omp_atv_all`\n\n`omp_atv_thread`\n\n`omp_atv_pteam`\n\n`omp_atv_cgroup`\n\n`omp_atv_default_mem_fb`\n\n`omp_atv_null_fb`\n\n`omp_atv_abort_fb`\n\n`omp_atv_allocator_fb`\n\n`omp_atv_environment`\n\n`omp_atv_nearest`\n\n`omp_atv_blocked`\n\nThe following scalar integer named constants are of the kind `omp_allocator_handle_kind`:\n\n`omp_null_allocator`\n\n`omp_default_mem_alloc`\n\n`omp_large_cap_mem_alloc`\n\n`omp_const_mem_alloc`\n\n`omp_high_bw_mem_alloc`\n\n`omp_low_lat_mem_alloc`\n\n`omp_cgroup_mem_alloc`\n\n`omp_pteam_mem_alloc`\n\n`omp_thread_mem_alloc`\n\nThe following scalar integer named constants are of the kind `omp_memspace_handle_kind`:\n\n`omp_default_mem_space`\n\n`omp_large_cap_mem_space`\n\n`omp_const_mem_space`\n\n`omp_high_bw_mem_space`\n\n`omp_low_lat_mem_space`\n\nNext: [OpenACC Module `OPENACC`](openacc-module-openacc), Previous: [IEEE modules: `IEEE_EXCEPTIONS`, `IEEE_ARITHMETIC`, and `IEEE_FEATURES`](ieee-modules), Up: [Intrinsic Modules](intrinsic-modules) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/OpenMP-Modules-OMP_005fLIB-and-OMP_005fLIB_005fKINDS.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/OpenMP-Modules-OMP_005fLIB-and-OMP_005fLIB_005fKINDS.html)"
- name: 9.5. OpenACC Module OPENACC ¶
  id: openacc-module-openacc
  summary: The OpenACC Fortran runtime library routines are provided both in a form of a Fortran 90 module, named OPENACC, and in form of a Fortran include file named openacc_lib.h
  description: "Previous: [OpenMP Modules `OMP_LIB` and `OMP_LIB_KINDS`](openmp-modules-omp_005flib-and-omp_005flib_005fkinds), Up: [Intrinsic Modules](intrinsic-modules) \\[[Contents](index#SEC_Contents \"Table of contents\")\\]\\[[Index](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/Option-Index.html \"Index\")\\]\n\n# 9.5 OpenACC Module OPENACC [¶](#OpenACC-Module-OPENACC-1)\n\nStandard:  \nOpenACC Application Programming Interface v2.6\n\nThe OpenACC Fortran runtime library routines are provided both in a form of a Fortran 90 module, named `OPENACC`, and in form of a Fortran `include` file named `openacc_lib.h`. The procedures provided by `OPENACC` can be found in the [Introduction](https://gcc.gnu.org/onlinedocs/libgomp/index.html#Top) in GNU Offloading and Multi Processing Runtime Library manual, the named constants defined in the modules are listed below.\n\nFor details refer to the actual [OpenACC Application Programming Interface v2.6](https://www.openacc.org/).\n\n`OPENACC` provides the scalar default-integer named constant `openacc_version` with a value of the form `yyyymm`, where `yyyy` is the year and `mm` the month of the OpenACC version; for OpenACC v2.6 the value is `201711`.\n\n© Free Software Foundation  \nLicensed under the GNU Free Documentation License, Version 1.3.  \n[https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/OpenACC-Module-OPENACC.html](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gfortran/OpenACC-Module-OPENACC.html)"
