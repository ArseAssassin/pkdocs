---
name: Werkzeug
slug: werkzeug~3.0
text_format: markdown
generator: src:devdocs
version: '3.0'
copyright: |-
  © 2007 Pallets
  Licensed under the BSD 3-clause License.
  https://werkzeug.palletsprojects.com/en/3.0.x/index.html
homepage: https://palletsprojects.com/p/werkzeug/

---
- name: abort()
  id: exceptions/index#werkzeug.exceptions.abort
  summary: Raises an HTTPException for the given status code or WSGI application
  belongs_to: HTTP Exceptions
  description: |-
    `werkzeug.exceptions.abort(status, *args, **kwargs)`

    Raises an [`HTTPException`](#werkzeug.exceptions.HTTPException "werkzeug.exceptions.HTTPException") for the given status code or WSGI application.

    If a status code is given, it will be looked up in the list of exceptions and will raise that exception. If passed a WSGI application, it will wrap it in a proxy WSGI exception and raise that:

    ``` python
    abort(404)  # 404 Not Found
    abort(Response('Hello World'))
    ```

    Parameters:

    - **status** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* [Response](../wrappers/index#werkzeug.wrappers.Response "werkzeug.wrappers.Response")) –
    - **args** (*t.Any*) –
    - **kwargs** (*t.Any*) –

    Return type:

    t.NoReturn

    If you want to use this functionality with custom exceptions you can create an instance of the aborter class:
- name: Aborter
  id: exceptions/index#werkzeug.exceptions.Aborter
  summary: When passed a dict of code -> exception items it can be used as callable that raises exceptions
  belongs_to: HTTP Exceptions
  description: "`class werkzeug.exceptions.Aborter(mapping=None, extra=None)`\n\nWhen passed a dict of code -\\> exception items it can be used as callable that raises exceptions. If the first argument to the callable is an integer it will be looked up in the mapping, if it’s a WSGI application it will be raised in a proxy exception.\n\nThe rest of the arguments are forwarded to the exception constructor.\n\nParameters:\n\n- **mapping** ([dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.11)\")*\\[*[int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")*,* [type](https://docs.python.org/3/library/functions.html#type \"(in Python v3.11)\")*\\[*[HTTPException](#werkzeug.exceptions.HTTPException \"werkzeug.exceptions.HTTPException\")*\\]\\]* *\\|* *None*) –\n- **extra** ([dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.11)\")*\\[*[int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")*,* [type](https://docs.python.org/3/library/functions.html#type \"(in Python v3.11)\")*\\[*[HTTPException](#werkzeug.exceptions.HTTPException \"werkzeug.exceptions.HTTPException\")*\\]\\]* *\\|* *None*) –\n\n## Custom Errors\n\nAs you can see from the list above not all status codes are available as errors. Especially redirects and other non 200 status codes that do not represent errors are missing. For redirects you can use the `redirect()` function from the utilities.\n\nIf you want to add an error yourself you can subclass [`HTTPException`](#werkzeug.exceptions.HTTPException \"werkzeug.exceptions.HTTPException\"):\n\n``` python\nfrom werkzeug.exceptions import HTTPException\n\nclass PaymentRequired(HTTPException):\n    code = 402\n    description = '<p>Payment required.</p>'\n```\n\nThis is the minimal code you need for your own exception. If you want to add more logic to the errors you can override the `get_description()`, `get_body()`, `get_headers()` and [`get_response()`](#werkzeug.exceptions.HTTPException.get_response \"werkzeug.exceptions.HTTPException.get_response\") methods. In any case you should have a look at the sourcecode of the exceptions module.\n\nYou can override the default description in the constructor with the `description` parameter:\n\n``` python\nraise BadRequest(description='Request failed because X was not present')\n```\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/exceptions/](https://werkzeug.palletsprojects.com/en/3.0.x/exceptions/)"
- name: Accept
  id: datastructures/index#werkzeug.datastructures.Accept
  summary: An Accept object is just a list subclass for lists of (value, quality) tuples
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.Accept(values=())`

    An [`Accept`](#werkzeug.datastructures.Accept "werkzeug.datastructures.Accept") object is just a list subclass for lists of `(value, quality)` tuples. It is automatically sorted by specificity and quality.

    All [`Accept`](#werkzeug.datastructures.Accept "werkzeug.datastructures.Accept") objects work similar to a list but provide extra functionality for working with the data. Containment checks are normalized to the rules of that header:

    ``` python
    >>> a = CharsetAccept([('ISO-8859-1', 1), ('utf-8', 0.7)])
    >>> a.best
    'ISO-8859-1'
    >>> 'iso-8859-1' in a
    True
    >>> 'UTF8' in a
    True
    >>> 'utf7' in a
    False
    ```

    To get the quality for an item you can use normal item lookup:

    ``` python
    >>> print a['utf-8']
    0.7
    >>> a['utf7']
    0
    ```

    Changelog

    Changed in version 1.0.0: [`Accept`](#werkzeug.datastructures.Accept "werkzeug.datastructures.Accept") internal values are no longer ordered alphabetically for equal quality tags. Instead the initial order is preserved.

    Changed in version 0.5: [`Accept`](#werkzeug.datastructures.Accept "werkzeug.datastructures.Accept") objects are forced immutable now.

    `property best`

    The best match as value.
- name: Accept.best_match()
  id: datastructures/index#werkzeug.datastructures.Accept.best_match
  summary: Returns the best match from a list of possible matches based on the specificity and quality of the client
  belongs_to: Data Structures
  description: |-
    `best_match(matches, default=None)`

    Returns the best match from a list of possible matches based on the specificity and quality of the client. If two items have the same quality and specificity, the one is returned that comes first.

    Parameters:

    - **matches** – a list of matches to check for
    - **default** – the value that is returned if none match
- name: Accept.find()
  id: datastructures/index#werkzeug.datastructures.Accept.find
  summary: Get the position of an entry or return -1
  belongs_to: Data Structures
  description: |-
    `find(key)`

    Get the position of an entry or return -1.

    Parameters:

    **key** – The key to be looked up.
- name: Accept.index()
  id: datastructures/index#werkzeug.datastructures.Accept.index
  summary: Get the position of an entry or raise ValueError
  belongs_to: Data Structures
  description: |-
    `index(key)`

    Get the position of an entry or raise [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "(in Python v3.11)").

    Parameters:

    **key** – The key to be looked up.

    Changelog

    Changed in version 0.5: This used to raise [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "(in Python v3.11)"), which was inconsistent with the list API.
- name: Accept.quality()
  id: datastructures/index#werkzeug.datastructures.Accept.quality
  summary: Returns the quality of the key
  belongs_to: Data Structures
  description: |-
    `quality(key)`

    Returns the quality of the key.

    Changelog

    New in version 0.6: In previous versions you had to use the item-lookup syntax (eg: `obj[key]` instead of `obj.quality(key)`)
- name: Accept.to_header()
  id: datastructures/index#werkzeug.datastructures.Accept.to_header
  summary: Convert the header set into an HTTP header string
  belongs_to: Data Structures
  description: |-
    `to_header()`

    Convert the header set into an HTTP header string.
- name: Accept.values()
  id: datastructures/index#werkzeug.datastructures.Accept.values
  summary: Iterate over all values
  belongs_to: Data Structures
  description: |-
    `values()`

    Iterate over all values.
- name: AnyConverter
  id: routing/index#werkzeug.routing.AnyConverter
  summary: Matches one of the items provided
  belongs_to: URL Routing
  description: |-
    `class werkzeug.routing.AnyConverter(map, *items)`

    Matches one of the items provided. Items can either be Python identifiers or strings:

    ``` python
    Rule('/<any(about, help, imprint, class, "foo,bar"):page_name>')
    ```

    Parameters:

    - **map** ([Map](#werkzeug.routing.Map "werkzeug.routing.Map")) – the [`Map`](#werkzeug.routing.Map "werkzeug.routing.Map").
    - **items** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – this function accepts the possible items as positional arguments.

    Changelog

    Changed in version 2.2: Value is validated when building a URL.
- name: Apache httpd
  id: deployment/apache-httpd/index
  summary: Apache httpd is a fast, production level HTTP server
  description: "# Apache httpd\n\n[Apache httpd](https://httpd.apache.org/) is a fast, production level HTTP server. When serving your application with one of the WSGI servers listed in [Deploying to Production](../index), it is often good or necessary to put a dedicated HTTP server in front of it. This “reverse proxy” can handle incoming requests, TLS, and other security and performance concerns better than the WSGI server.\n\nhttpd can be installed using your system package manager, or a pre-built executable for Windows. Installing and running httpd itself is outside the scope of this doc. This page outlines the basics of configuring httpd to proxy your application. Be sure to read its documentation to understand what features are available.\n\n## Domain Name\n\nAcquiring and configuring a domain name is outside the scope of this doc. In general, you will buy a domain name from a registrar, pay for server space with a hosting provider, and then point your registrar at the hosting provider’s name servers.\n\nTo simulate this, you can also edit your `hosts` file, located at `/etc/hosts` on Linux. Add a line that associates a name with the local IP.\n\nModern Linux systems may be configured to treat any domain name that ends with `.localhost` like this without adding it to the `hosts` file.\n\n`/etc/hosts`\n\n``` python\n127.0.0.1 hello.localhost\n```\n\n## Configuration\n\nThe httpd configuration is located at `/etc/httpd/conf/httpd.conf` on Linux. It may be different depending on your operating system. Check the docs and look for `httpd.conf`.\n\nRemove or comment out any existing `DocumentRoot` directive. Add the config lines below. We’ll assume the WSGI server is listening locally at `http://127.0.0.1:8000`.\n\n`/etc/httpd/conf/httpd.conf`\n\n``` apache\nLoadModule proxy_module modules/mod_proxy.so\nLoadModule proxy_http_module modules/mod_proxy_http.so\nProxyPass / http://127.0.0.1:8000/\nRequestHeader set X-Forwarded-Proto http\nRequestHeader set X-Forwarded-Prefix /\n```\n\nThe `LoadModule` lines might already exist. If so, make sure they are uncommented instead of adding them manually.\n\nThen [Tell Werkzeug it is Behind a Proxy](../proxy_fix/index) so that your application uses the `X-Forwarded` headers. `X-Forwarded-For` and `X-Forwarded-Host` are automatically set by `ProxyPass`.\n\n## Static Files\n\nIf your application has static files such as JavaScript, CSS, and images, it will be more efficient to let Nginx serve them directly rather than going through the Python application.\n\nAssuming the static files are expected to be available under the `/static/` URL, and are stored at `/home/project/static/`, add the following to the config above.\n\n``` apache\nAlias /static/ /home/project/static/\n```\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/deployment/apache-httpd/](https://werkzeug.palletsprojects.com/en/3.0.x/deployment/apache-httpd/)"
- name: API Levels
  id: levels/index
  summary: Werkzeug is intended to be a utility rather than a framework
  description: "# API Levels\n\nWerkzeug is intended to be a utility rather than a framework. Because of that the user-friendly API is separated from the lower-level API so that Werkzeug can easily be used to extend another system.\n\nAll the functionality the `Request` and `Response` objects (aka the “wrappers”) provide is also available in small utility functions.\n\n## Example\n\nThis example implements a small `Hello World` application that greets the user with the name entered.\n\n``` python\nfrom markupsafe import escape\nfrom werkzeug.wrappers import Request, Response\n\n@Request.application\ndef hello_world(request):\n    result = ['<title>Greeter</title>']\n    if request.method == 'POST':\n        result.append(f\"<h1>Hello {escape(request.form['name'])}!</h1>\")\n    result.append('''\n        <form action=\"\" method=\"post\">\n            <p>Name: <input type=\"text\" name=\"name\" size=\"20\">\n            <input type=\"submit\" value=\"Greet me\">\n        </form>\n    ''')\n    return Response(''.join(result), mimetype='text/html')\n```\n\nAlternatively the same application could be used without request and response objects but by taking advantage of the parsing functions werkzeug provides:\n\n``` python\nfrom markupsafe import escape\nfrom werkzeug.formparser import parse_form_data\n\ndef hello_world(environ, start_response):\n    result = ['<title>Greeter</title>']\n    if environ['REQUEST_METHOD'] == 'POST':\n        form = parse_form_data(environ)[1]\n        result.append(f\"<h1>Hello {escape(form['name'])}!</h1>\")\n    result.append('''\n        <form action=\"\" method=\"post\">\n            <p>Name: <input type=\"text\" name=\"name\" size=\"20\">\n            <input type=\"submit\" value=\"Greet me\">\n        </form>\n    ''')\n    start_response('200 OK', [('Content-Type', 'text/html; charset=utf-8')])\n    return [''.join(result).encode('utf-8')]\n```\n\n## High or Low?\n\nUsually you want to use the high-level layer (the request and response objects). But there are situations where this might not be what you want.\n\nFor example you might be maintaining code for an application written in Django or another framework and you have to parse HTTP headers. You can utilize Werkzeug for that by accessing the lower-level HTTP header parsing functions.\n\nAnother situation where the low level parsing functions can be useful are custom WSGI frameworks, unit-testing or modernizing an old CGI/mod_python application to WSGI as well as WSGI middlewares where you want to keep the overhead low.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/levels/](https://werkzeug.palletsprojects.com/en/3.0.x/levels/)"
- name: append_slash_redirect()
  id: utils/index#werkzeug.utils.append_slash_redirect
  summary: Redirect to the current URL with a slash appended
  belongs_to: Utilities
  description: |-
    `werkzeug.utils.append_slash_redirect(environ, code=308)`

    Redirect to the current URL with a slash appended.

    If the current URL is `/user/42`, the redirect URL will be `42/`. When joined to the current URL during response processing or by the browser, this will produce `/user/42/`.

    The behavior is undefined if the path ends with a slash already. If called unconditionally on a URL, it may produce a redirect loop.

    Parameters:

    - **environ** (*WSGIEnvironment*) – Use the path and query from this WSGI environment to produce the redirect URL.
    - **code** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")) – the status code for the redirect.

    Return type:

    [Response](../wrappers/index#werkzeug.wrappers.Response "werkzeug.wrappers.Response")

    Changelog

    Changed in version 2.1: Produce a relative URL that only modifies the last segment. Relevant when the current path has multiple segments.

    Changed in version 2.1: The default status code is 308 instead of 301. This preserves the request method and body.
- name: Application Dispatcher
  id: middleware/dispatcher/index
  summary: This middleware creates a single WSGI application that dispatches to multiple other WSGI applications mounted at different URL paths
  description: "# Application Dispatcher\n\nThis middleware creates a single WSGI application that dispatches to multiple other WSGI applications mounted at different URL paths.\n\nA common example is writing a Single Page Application, where you have a backend API and a frontend written in JavaScript that does the routing in the browser rather than requesting different pages from the server. The frontend is a single HTML and JS file that should be served for any path besides “/api”.\n\nThis example dispatches to an API app under “/api”, an admin app under “/admin”, and an app that serves frontend files for all other requests:\n\n``` python\napp = DispatcherMiddleware(serve_frontend, {\n    '/api': api_app,\n    '/admin': admin_app,\n})\n```\n\nIn production, you might instead handle this at the HTTP server level, serving files or proxying to application servers based on location. The API and admin apps would each be deployed with a separate WSGI server, and the static files would be served directly by the HTTP server.\n\n`class werkzeug.middleware.dispatcher.DispatcherMiddleware(app, mounts=None)`  \nCombine multiple applications as a single WSGI application. Requests are dispatched to an application based on the path it is mounted under.\n\nParameters:  \n- **app** (*WSGIApplication*) – The WSGI application to dispatch to if the request doesn’t match a mounted path.\n- **mounts** ([dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* *WSGIApplication\\]* *\\|* *None*) – Maps path prefixes to applications for dispatching.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/middleware/dispatcher/](https://werkzeug.palletsprojects.com/en/3.0.x/middleware/dispatcher/)"
- name: Application Profiler
  id: middleware/profiler/index
  summary: This module provides a middleware that profiles each request with the cProfile module
  description: "# Application Profiler\n\nThis module provides a middleware that profiles each request with the [`cProfile`](https://docs.python.org/3/library/profile.html#module-cProfile \"(in Python v3.11)\") module. This can help identify bottlenecks in your code that may be slowing down your application.\n\n`class werkzeug.middleware.profiler.ProfilerMiddleware(app, stream=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>, sort_by=('time', 'calls'), restrictions=(), profile_dir=None, filename_format='{method}.{path}.{elapsed:.0f}ms.{time:.0f}.prof')`  \nWrap a WSGI application and profile the execution of each request. Responses are buffered so that timings are more exact.\n\nIf `stream` is given, [`pstats.Stats`](https://docs.python.org/3/library/profile.html#pstats.Stats \"(in Python v3.11)\") are written to it after each request. If `profile_dir` is given, [`cProfile`](https://docs.python.org/3/library/profile.html#module-cProfile \"(in Python v3.11)\") data files are saved to that directory, one file per request.\n\nThe filename can be customized by passing `filename_format`. If it is a string, it will be formatted using [`str.format()`](https://docs.python.org/3/library/stdtypes.html#str.format \"(in Python v3.11)\") with the following fields available:\n\n- `{method}` - The request method; GET, POST, etc.\n- `{path}` - The request path or ‘root’ should one not exist.\n- `{elapsed}` - The elapsed time of the request in milliseconds.\n- `{time}` - The time of the request.\n\nIf it is a callable, it will be called with the WSGI `environ` and be expected to return a filename string. The `environ` dictionary will also have the `\"werkzeug.profiler\"` key populated with a dictionary containing the following fields (more may be added in the future): - `{elapsed}` - The elapsed time of the request in milliseconds. - `{time}` - The time of the request.\n\nParameters:  \n- **app** (*WSGIApplication*) – The WSGI application to wrap.\n- **stream** (*t.IO\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]* *\\|* *None*) – Write stats to this stream. Disable with `None`.\n- **sort_by** (*t.Iterable\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]*) – A tuple of columns to sort stats by. See [`pstats.Stats.sort_stats()`](https://docs.python.org/3/library/profile.html#pstats.Stats.sort_stats \"(in Python v3.11)\").\n- **restrictions** (*t.Iterable\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* [float](https://docs.python.org/3/library/functions.html#float \"(in Python v3.11)\")*\\]*) – A tuple of restrictions to filter stats by. See [`pstats.Stats.print_stats()`](https://docs.python.org/3/library/profile.html#pstats.Stats.print_stats \"(in Python v3.11)\").\n- **profile_dir** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – Save profile data files to this directory.\n- **filename_format** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – Format string for profile data file names, or a callable returning a name. See explanation above.\n\n``` python\nfrom werkzeug.middleware.profiler import ProfilerMiddleware\napp = ProfilerMiddleware(app)\n```\n\nChanged in version 3.0: Added the `\"werkzeug.profiler\"` key to the `filename_format(environ)` parameter with the `elapsed` and `time` fields.\n\nChangelog\n\nChanged in version 0.15: Stats are written even if `profile_dir` is given, and can be disable by passing `stream=None`.\n\nNew in version 0.15: Added `filename_format`.\n\nNew in version 0.9: Added `restrictions` and `profile_dir`.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/middleware/profiler/](https://werkzeug.palletsprojects.com/en/3.0.x/middleware/profiler/)"
- name: Authorization
  id: datastructures/index#werkzeug.datastructures.Authorization
  summary: Represents the parts of an Authorization request header
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.Authorization(auth_type, data=None, token=None)`

    Represents the parts of an `Authorization` request header.

    [`Request.authorization`](../wrappers/index#werkzeug.wrappers.Request.authorization "werkzeug.wrappers.Request.authorization") returns an instance if the header is set.

    An instance can be used with the test [`Client`](../test/index#werkzeug.test.Client "werkzeug.test.Client") request methods’ `auth` parameter to send the header in test requests.

    Depending on the auth scheme, either [`parameters`](#werkzeug.datastructures.Authorization.parameters "werkzeug.datastructures.Authorization.parameters") or [`token`](#werkzeug.datastructures.Authorization.token "werkzeug.datastructures.Authorization.token") will be set. The `Basic` scheme’s token is decoded into the `username` and `password` parameters.

    For convenience, `auth["key"]` and `auth.key` both access the key in the [`parameters`](#werkzeug.datastructures.Authorization.parameters "werkzeug.datastructures.Authorization.parameters") dict, along with `auth.get("key")` and `"key" in auth`.

    Changelog

    Changed in version 2.3: The `token` parameter and attribute was added to support auth schemes that use a token instead of parameters, such as `Bearer`.

    Changed in version 2.3: The object is no longer a `dict`.

    Changed in version 0.5: The object is an immutable dict.

    Parameters:

    - **auth_type** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **data** ([dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None\]* *\|* *None*) –
    - **token** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
- name: Authorization.from_header()
  id: datastructures/index#werkzeug.datastructures.Authorization.from_header
  summary: Parse an Authorization header value and return an instance, or None if the value is empty
  belongs_to: Data Structures
  description: |-
    `classmethod from_header(value)`

    Parse an `Authorization` header value and return an instance, or `None` if the value is empty.

    Parameters:

    **value** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – The header value to parse.

    Return type:

    te.Self \| None

    Changelog

    New in version 2.3.
- name: Authorization.parameters
  id: datastructures/index#werkzeug.datastructures.Authorization.parameters
  summary: A dict of parameters parsed from the header
  belongs_to: Data Structures
  description: |-
    `parameters`

    A dict of parameters parsed from the header. Either this or [`token`](#werkzeug.datastructures.Authorization.token "werkzeug.datastructures.Authorization.token") will have a value for a given scheme.
- name: Authorization.to_header()
  id: datastructures/index#werkzeug.datastructures.Authorization.to_header
  summary: Produce an Authorization header value representing this data
  belongs_to: Data Structures
  description: |-
    `to_header()`

    Produce an `Authorization` header value representing this data.

    Changelog

    New in version 2.0.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
- name: Authorization.token
  id: datastructures/index#werkzeug.datastructures.Authorization.token
  summary: A token parsed from the header
  belongs_to: Data Structures
  description: |-
    `token`

    A token parsed from the header. Either this or [`parameters`](#werkzeug.datastructures.Authorization.parameters "werkzeug.datastructures.Authorization.parameters") will have a value for a given scheme.

    Changelog

    New in version 2.3.
- name: Authorization.type
  id: datastructures/index#werkzeug.datastructures.Authorization.type
  summary: The authorization scheme, like basic, digest, or bearer
  belongs_to: Data Structures
  description: |-
    `type`

    The authorization scheme, like `basic`, `digest`, or `bearer`.
- name: Basic HTTP Proxy
  id: middleware/http_proxy/index
  summary: class werkzeug.middleware.http_proxy.ProxyMiddleware(app, targets, chunk_size=16384, timeout=10) Proxy requests under a path to an external server, routing other requests to the app
  description: "# Basic HTTP Proxy\n\n`class werkzeug.middleware.http_proxy.ProxyMiddleware(app, targets, chunk_size=16384, timeout=10)`  \nProxy requests under a path to an external server, routing other requests to the app.\n\nThis middleware can only proxy HTTP requests, as HTTP is the only protocol handled by the WSGI server. Other protocols, such as WebSocket requests, cannot be proxied at this layer. This should only be used for development, in production a real proxy server should be used.\n\nThe middleware takes a dict mapping a path prefix to a dict describing the host to be proxied to:\n\n``` python\napp = ProxyMiddleware(app, {\n    \"/static/\": {\n        \"target\": \"http://127.0.0.1:5001/\",\n    }\n})\n```\n\nEach host has the following options:\n\n`target:`  \nThe target URL to dispatch to. This is required.\n\n`remove_prefix:`  \nWhether to remove the prefix from the URL before dispatching it to the target. The default is `False`.\n\n`host:`  \n`\"<auto>\" (default):`  \nThe host header is automatically rewritten to the URL of the target.\n\n`None:`  \nThe host header is unmodified from the client request.\n\nAny other value:  \nThe host header is overwritten with the value.\n\n`headers:`  \nA dictionary of headers to be sent with the request to the target. The default is `{}`.\n\n`ssl_context:`  \nA [`ssl.SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext \"(in Python v3.11)\") defining how to verify requests if the target is HTTPS. The default is `None`.\n\nIn the example above, everything under `\"/static/\"` is proxied to the server on port 5001. The host header is rewritten to the target, and the `\"/static/\"` prefix is removed from the URLs.\n\nParameters:  \n- **app** (*WSGIApplication*) – The WSGI application to wrap.\n- **targets** (*t.Mapping\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* [dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* *t.Any\\]\\]*) – Proxy target configurations. See description above.\n- **chunk_size** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – Size of chunks to read from input stream and write to target.\n- **timeout** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – Seconds before an operation to a target fails.\n\nChangelog\n\nNew in version 0.14.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/middleware/http_proxy/](https://werkzeug.palletsprojects.com/en/3.0.x/middleware/http_proxy/)"
- name: BSD-3-Clause License
  id: license/index
  summary: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED
  description: "# BSD-3-Clause License\n\nCopyright 2007 Pallets\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1.  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n2.  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n3.  Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/license/](https://werkzeug.palletsprojects.com/en/3.0.x/license/)"
- name: cached_property
  id: utils/index#werkzeug.utils.cached_property
  summary: A property() that is only evaluated once
  belongs_to: Utilities
  description: |-
    `class werkzeug.utils.cached_property(fget, name=None, doc=None)`

    A `property()` that is only evaluated once. Subsequent access returns the cached value. Setting the property sets the cached value. Deleting the property clears the cached value, accessing it again will evaluate it again.

    ``` python
    class Example:
        @cached_property
        def value(self):
            # calculate something important here
            return 42

    e = Example()
    e.value  # evaluates
    e.value  # uses cache
    e.value = 16  # sets cache
    del e.value  # clears cache
    ```

    If the class defines `__slots__`, it must add `_cache_{name}` as a slot. Alternatively, it can add `__dict__`, but that’s usually not desirable.

    Changelog

    Changed in version 2.1: Works with `__slots__`.

    Changed in version 2.0: `del obj.name` clears the cached value.

    Parameters:

    - **fget** (*t.Callable\[\[t.Any\],* *\_T\]*) –
    - **name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
    - **doc** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
- name: CharsetAccept
  id: datastructures/index#werkzeug.datastructures.CharsetAccept
  summary: Like Accept but with normalization for charsets
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.CharsetAccept(values=())`

    Like [`Accept`](#werkzeug.datastructures.Accept "werkzeug.datastructures.Accept") but with normalization for charsets.
- name: check_password_hash()
  id: utils/index#werkzeug.security.check_password_hash
  summary: Securely check that the given stored password hash, previously generated using generate_password_hash(), matches the given password
  belongs_to: Utilities
  description: |-
    `werkzeug.security.check_password_hash(pwhash, password)`

    Securely check that the given stored password hash, previously generated using [`generate_password_hash()`](#werkzeug.security.generate_password_hash "werkzeug.security.generate_password_hash"), matches the given password.

    Methods may be deprecated and removed if they are no longer considered secure. To migrate old hashes, you may generate a new hash when checking an old hash, or you may contact users with a link to reset their password.

    Parameters:

    - **pwhash** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The hashed password.
    - **password** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The plaintext password.

    Return type:

    [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")

    Changelog

    Changed in version 2.3: All plain hashes are deprecated and will not be supported in Werkzeug 3.0.
- name: Client
  id: test/index#werkzeug.test.Client
  summary: Simulate sending requests to a WSGI application without running a WSGI or HTTP server
  belongs_to: Testing WSGI Applications
  description: |-
    `class werkzeug.test.Client(application, response_wrapper=None, use_cookies=True, allow_subdomain_redirects=False)`

    Simulate sending requests to a WSGI application without running a WSGI or HTTP server.

    Parameters:

    - **application** (*WSGIApplication*) – The WSGI application to make requests to.
    - **response_wrapper** ([type](https://docs.python.org/3/library/functions.html#type "(in Python v3.11)")*\[*[Response](../wrappers/index#werkzeug.wrappers.Response "werkzeug.wrappers.Response")*\]* *\|* *None*) – A [`Response`](../wrappers/index#werkzeug.wrappers.Response "werkzeug.wrappers.Response") class to wrap response data with. Defaults to [`TestResponse`](#werkzeug.test.TestResponse "werkzeug.test.TestResponse"). If it’s not a subclass of `TestResponse`, one will be created.
    - **use_cookies** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Persist cookies from `Set-Cookie` response headers to the `Cookie` header in subsequent requests. Domain and path matching is supported, but other cookie parameters are ignored.
    - **allow_subdomain_redirects** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Allow requests to follow redirects to subdomains. Enable this if the application handles subdomains and redirects between them.

    Changelog

    Changed in version 2.3: Simplify cookie implementation, support domain and path matching.

    Changed in version 2.1: All data is available as properties on the returned response object. The response cannot be returned as a tuple.

    Changed in version 2.0: `response_wrapper` is always a subclass of :class:`TestResponse`.

    Changed in version 0.5: Added the `use_cookies` parameter.
- name: Client.delete()
  id: test/index#werkzeug.test.Client.delete
  summary: Call open() with method set to DELETE
  belongs_to: Testing WSGI Applications
  description: |-
    `delete(*args, **kw)`

    Call [`open()`](#werkzeug.test.Client.open "werkzeug.test.Client.open") with `method` set to `DELETE`.

    Parameters:

    - **args** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")) –
    - **kw** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")) –

    Return type:

    [TestResponse](#werkzeug.test.TestResponse "werkzeug.test.TestResponse")
- name: Client.delete_cookie()
  id: test/index#werkzeug.test.Client.delete_cookie
  summary: Delete a cookie if it exists
  belongs_to: Testing WSGI Applications
  description: |-
    `delete_cookie(key, *, domain='localhost', path='/')`

    Delete a cookie if it exists. Cookies are uniquely identified by `(domain, path, key)`.

    Parameters:

    - **key** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The decoded form of the key for the cookie.
    - **domain** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The domain the cookie was set for.
    - **path** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The path the cookie was set for.

    Return type:

    None

    Changed in version 3.0: The `server_name` parameter is removed. The first parameter is `key`. Use the `domain` parameter instead.

    Changed in version 3.0: The `secure`, `httponly` and `samesite` parameters are removed.

    Changelog

    Changed in version 2.3: The `domain` parameter defaults to `localhost`.
- name: Client.get()
  id: test/index#werkzeug.test.Client.get
  summary: Call open() with method set to GET
  belongs_to: Testing WSGI Applications
  description: |-
    `get(*args, **kw)`

    Call [`open()`](#werkzeug.test.Client.open "werkzeug.test.Client.open") with `method` set to `GET`.

    Parameters:

    - **args** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")) –
    - **kw** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")) –

    Return type:

    [TestResponse](#werkzeug.test.TestResponse "werkzeug.test.TestResponse")
- name: Client.get_cookie()
  id: test/index#werkzeug.test.Client.get_cookie
  summary: Return a Cookie if it exists
  belongs_to: Testing WSGI Applications
  description: |-
    `get_cookie(key, domain='localhost', path='/')`

    Return a [`Cookie`](#werkzeug.test.Cookie "werkzeug.test.Cookie") if it exists. Cookies are uniquely identified by `(domain, path, key)`.

    Parameters:

    - **key** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The decoded form of the key for the cookie.
    - **domain** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The domain the cookie was set for.
    - **path** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The path the cookie was set for.

    Return type:

    [Cookie](#werkzeug.test.Cookie "werkzeug.test.Cookie") \| None

    Changelog

    New in version 2.3.
- name: Client.head()
  id: test/index#werkzeug.test.Client.head
  summary: Call open() with method set to HEAD
  belongs_to: Testing WSGI Applications
  description: |-
    `head(*args, **kw)`

    Call [`open()`](#werkzeug.test.Client.open "werkzeug.test.Client.open") with `method` set to `HEAD`.

    Parameters:

    - **args** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")) –
    - **kw** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")) –

    Return type:

    [TestResponse](#werkzeug.test.TestResponse "werkzeug.test.TestResponse")
- name: Client.open()
  id: test/index#werkzeug.test.Client.open
  summary: Generate an environ dict from the given arguments, make a request to the application using it, and return the response
  belongs_to: Testing WSGI Applications
  description: |-
    `open(*args, buffered=False, follow_redirects=False, **kwargs)`

    Generate an environ dict from the given arguments, make a request to the application using it, and return the response.

    Parameters:

    - **args** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")) – Passed to [`EnvironBuilder`](#werkzeug.test.EnvironBuilder "werkzeug.test.EnvironBuilder") to create the environ for the request. If a single arg is passed, it can be an existing [`EnvironBuilder`](#werkzeug.test.EnvironBuilder "werkzeug.test.EnvironBuilder") or an environ dict.
    - **buffered** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Convert the iterator returned by the app into a list. If the iterator has a `close()` method, it is called automatically.
    - **follow_redirects** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Make additional requests to follow HTTP redirects until a non-redirect status is returned. [`TestResponse.history`](#werkzeug.test.TestResponse.history "werkzeug.test.TestResponse.history") lists the intermediate responses.
    - **kwargs** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")) –

    Return type:

    [TestResponse](#werkzeug.test.TestResponse "werkzeug.test.TestResponse")

    Changelog

    Changed in version 2.1: Removed the `as_tuple` parameter.

    Changed in version 2.0: The request input stream is closed when calling `response.close()`. Input streams for redirects are automatically closed.

    Changed in version 0.5: If a dict is provided as file in the dict for the `data` parameter the content type has to be called `content_type` instead of `mimetype`. This change was made for consistency with `werkzeug.FileWrapper`.

    Changed in version 0.5: Added the `follow_redirects` parameter.
- name: Client.options()
  id: test/index#werkzeug.test.Client.options
  summary: Call open() with method set to OPTIONS
  belongs_to: Testing WSGI Applications
  description: |-
    `options(*args, **kw)`

    Call [`open()`](#werkzeug.test.Client.open "werkzeug.test.Client.open") with `method` set to `OPTIONS`.

    Parameters:

    - **args** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")) –
    - **kw** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")) –

    Return type:

    [TestResponse](#werkzeug.test.TestResponse "werkzeug.test.TestResponse")
- name: Client.patch()
  id: test/index#werkzeug.test.Client.patch
  summary: Call open() with method set to PATCH
  belongs_to: Testing WSGI Applications
  description: |-
    `patch(*args, **kw)`

    Call [`open()`](#werkzeug.test.Client.open "werkzeug.test.Client.open") with `method` set to `PATCH`.

    Parameters:

    - **args** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")) –
    - **kw** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")) –

    Return type:

    [TestResponse](#werkzeug.test.TestResponse "werkzeug.test.TestResponse")
- name: Client.post()
  id: test/index#werkzeug.test.Client.post
  summary: Call open() with method set to POST
  belongs_to: Testing WSGI Applications
  description: |-
    `post(*args, **kw)`

    Call [`open()`](#werkzeug.test.Client.open "werkzeug.test.Client.open") with `method` set to `POST`.

    Parameters:

    - **args** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")) –
    - **kw** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")) –

    Return type:

    [TestResponse](#werkzeug.test.TestResponse "werkzeug.test.TestResponse")
- name: Client.put()
  id: test/index#werkzeug.test.Client.put
  summary: Call open() with method set to PUT
  belongs_to: Testing WSGI Applications
  description: |-
    `put(*args, **kw)`

    Call [`open()`](#werkzeug.test.Client.open "werkzeug.test.Client.open") with `method` set to `PUT`.

    Parameters:

    - **args** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")) –
    - **kw** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")) –

    Return type:

    [TestResponse](#werkzeug.test.TestResponse "werkzeug.test.TestResponse")
- name: Client.set_cookie()
  id: test/index#werkzeug.test.Client.set_cookie
  summary: Set a cookie to be sent in subsequent requests
  belongs_to: Testing WSGI Applications
  description: |-
    `set_cookie(key, value='', *, domain='localhost', origin_only=True, path='/', **kwargs)`

    Set a cookie to be sent in subsequent requests.

    This is a convenience to skip making a test request to a route that would set the cookie. To test the cookie, make a test request to a route that uses the cookie value.

    The client uses `domain`, `origin_only`, and `path` to determine which cookies to send with a request. It does not use other cookie parameters that browsers use, since they’re not applicable in tests.

    Parameters:

    - **key** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The key part of the cookie.
    - **value** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The value part of the cookie.
    - **domain** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – Send this cookie with requests that match this domain. If `origin_only` is true, it must be an exact match, otherwise it may be a suffix match.
    - **origin_only** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Whether the domain must be an exact match to the request.
    - **path** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – Send this cookie with requests that match this path either exactly or as a prefix.
    - **kwargs** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")) – Passed to [`dump_cookie()`](../http/index#werkzeug.http.dump_cookie "werkzeug.http.dump_cookie").

    Return type:

    None

    Changed in version 3.0: The parameter `server_name` is removed. The first parameter is `key`. Use the `domain` and `origin_only` parameters instead.

    Changelog

    Changed in version 2.3: The `origin_only` parameter was added.

    Changed in version 2.3: The `domain` parameter defaults to `localhost`.
- name: Client.trace()
  id: test/index#werkzeug.test.Client.trace
  summary: Call open() with method set to TRACE
  belongs_to: Testing WSGI Applications
  description: |-
    `trace(*args, **kw)`

    Call [`open()`](#werkzeug.test.Client.open "werkzeug.test.Client.open") with `method` set to `TRACE`.

    Parameters:

    - **args** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")) –
    - **kw** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")) –

    Return type:

    [TestResponse](#werkzeug.test.TestResponse "werkzeug.test.TestResponse")
- name: ClosingIterator
  id: wsgi/index#werkzeug.wsgi.ClosingIterator
  summary: The WSGI specification requires that all middlewares and gateways respect the close callback of the iterable returned by the application
  belongs_to: WSGI Helpers
  description: |-
    `class werkzeug.wsgi.ClosingIterator(iterable, callbacks=None)`

    The WSGI specification requires that all middlewares and gateways respect the `close` callback of the iterable returned by the application. Because it is useful to add another close action to a returned iterable and adding a custom iterable is a boring task this class can be used for that:

    ``` python
    return ClosingIterator(app(environ, start_response), [cleanup_session,
                                                          cleanup_locals])
    ```

    If there is just one close function it can be passed instead of the list.

    A closing iterator is not needed if the application uses response objects and finishes the processing if the response is started:

    ``` python
    try:
        return response(environ, start_response)
    finally:
        cleanup_session()
        cleanup_locals()
    ```

    Parameters:

    - **iterable** (*t.Iterable\[*[bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.11)")*\]*) –
    - **callbacks** (*None* *\|* *(t.Callable\[\[\],* *None\]* *\|* *t.Iterable\[t.Callable\[\[\],* *None\]\])*) –
- name: CombinedMultiDict
  id: datastructures/index#werkzeug.datastructures.CombinedMultiDict
  summary: This works for all read operations and will raise a TypeError for methods that usually change data which isn’t possible
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.CombinedMultiDict(dicts=None)`

    A read only [`MultiDict`](#werkzeug.datastructures.MultiDict "werkzeug.datastructures.MultiDict") that you can pass multiple [`MultiDict`](#werkzeug.datastructures.MultiDict "werkzeug.datastructures.MultiDict") instances as sequence and it will combine the return values of all wrapped dicts:

    ``` python
    >>> from werkzeug.datastructures import CombinedMultiDict, MultiDict
    >>> post = MultiDict([('foo', 'bar')])
    >>> get = MultiDict([('blub', 'blah')])
    >>> combined = CombinedMultiDict([get, post])
    >>> combined['foo']
    'bar'
    >>> combined['blub']
    'blah'
    ```

    This works for all read operations and will raise a `TypeError` for methods that usually change data which isn’t possible.

    From Werkzeug 0.3 onwards, the `KeyError` raised by this class is also a subclass of the `BadRequest` HTTP exception and will render a page for a `400 BAD REQUEST` if caught in a catch-all for HTTP exceptions.
- name: ContentRange
  id: datastructures/index#werkzeug.datastructures.ContentRange
  summary: Represents the content range header
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.ContentRange(units, start, stop, length=None, on_update=None)`

    Represents the content range header.

    Changelog

    New in version 0.7.

    `property length`

    The length of the range or `None`.
- name: ContentRange.set()
  id: datastructures/index#werkzeug.datastructures.ContentRange.set
  summary: Simple method to update the ranges
  belongs_to: Data Structures
  description: |-
    `set(start, stop, length=None, units='bytes')`

    Simple method to update the ranges.

    `property start`

    The start point of the range or `None`.

    `property stop`

    The stop point of the range (non-inclusive) or `None`. Can only be `None` if also start is `None`.

    `property units`

    The units to use, usually “bytes”
- name: ContentRange.unset()
  id: datastructures/index#werkzeug.datastructures.ContentRange.unset
  summary: Sets the units to None which indicates that the header should no longer be used
  belongs_to: Data Structures
  description: |-
    `unset()`

    Sets the units to `None` which indicates that the header should no longer be used.

    ## Others
- name: Context Locals
  id: local/index
  summary: You may find that you have some data during each request that you want to use across functions
  description: "# Context Locals\n\nYou may find that you have some data during each request that you want to use across functions. Instead of passing these as arguments between every function, you may want to access them as global data. However, using global variables in Python web applications is not thread safe; different workers might interfere with each others’ data.\n\nInstead of storing common data during a request using global variables, you must use context-local variables instead. A context local is defined/imported globally, but the data it contains is specific to the current thread, asyncio task, or greenlet. You won’t accidentally get or overwrite another worker’s data.\n\nThe current approach for storing per-context data in Python is the `contextvars` module. Context vars store data per thread, async task, or greenlet. This replaces the older [`threading.local`](https://docs.python.org/3/library/threading.html#threading.local \"(in Python v3.11)\") which only handled threads.\n\nWerkzeug provides wrappers around [`ContextVar`](https://docs.python.org/3/library/contextvars.html#contextvars.ContextVar \"(in Python v3.11)\") to make it easier to work with.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/local/](https://werkzeug.palletsprojects.com/en/3.0.x/local/)"
- name: Cookie
  id: test/index#werkzeug.test.Cookie
  summary: A cookie key, value, and parameters
  belongs_to: Testing WSGI Applications
  description: |-
    `class werkzeug.test.Cookie(key, value, decoded_key, decoded_value, expires, max_age, domain, origin_only, path, secure, http_only, same_site)`

    A cookie key, value, and parameters.

    The class itself is not a public API. Its attributes are documented for inspection with [`Client.get_cookie()`](#werkzeug.test.Client.get_cookie "werkzeug.test.Client.get_cookie") only.

    Changelog

    New in version 2.3.

    Parameters:

    - **key** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **value** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **decoded_key** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **decoded_value** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **expires** ([datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime "(in Python v3.11)") *\|* *None*) –
    - **max_age** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* *None*) –
    - **domain** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **origin_only** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) –
    - **path** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **secure** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)") *\|* *None*) –
    - **http_only** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)") *\|* *None*) –
    - **same_site** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
- name: Cookie.decoded_key
  id: test/index#werkzeug.test.Cookie.decoded_key
  summary: The cookie key, decoded as the application would set and see it
  belongs_to: Testing WSGI Applications
  description: |-
    `decoded_key: str`

    The cookie key, decoded as the application would set and see it.
- name: Cookie.decoded_value
  id: test/index#werkzeug.test.Cookie.decoded_value
  summary: The cookie value, decoded as the application would set and see it
  belongs_to: Testing WSGI Applications
  description: |-
    `decoded_value: str`

    The cookie value, decoded as the application would set and see it.
- name: Cookie.domain
  id: test/index#werkzeug.test.Cookie.domain
  summary: The domain that the cookie was set for, or the request domain if not set
  belongs_to: Testing WSGI Applications
  description: |-
    `domain: str`

    The domain that the cookie was set for, or the request domain if not set.
- name: Cookie.expires
  id: test/index#werkzeug.test.Cookie.expires
  summary: The time at which the cookie is no longer valid
  belongs_to: Testing WSGI Applications
  description: |-
    `expires: datetime | None`

    The time at which the cookie is no longer valid.
- name: Cookie.http_only
  id: test/index#werkzeug.test.Cookie.http_only
  summary: The HttpOnly parameter
  belongs_to: Testing WSGI Applications
  description: |-
    `http_only: bool | None`

    The `HttpOnly` parameter.
- name: Cookie.key
  id: test/index#werkzeug.test.Cookie.key
  summary: The cookie key, encoded as a client would see it
  belongs_to: Testing WSGI Applications
  description: |-
    `key: str`

    The cookie key, encoded as a client would see it.
- name: Cookie.max_age
  id: test/index#werkzeug.test.Cookie.max_age
  summary: The number of seconds from when the cookie was set at which it is no longer valid
  belongs_to: Testing WSGI Applications
  description: |-
    `max_age: int | None`

    The number of seconds from when the cookie was set at which it is no longer valid.
- name: Cookie.origin_only
  id: test/index#werkzeug.test.Cookie.origin_only
  summary: Whether the cookie will be sent for exact domain matches only
  belongs_to: Testing WSGI Applications
  description: |-
    `origin_only: bool`

    Whether the cookie will be sent for exact domain matches only. This is `True` if the `Domain` parameter was not present.
- name: Cookie.path
  id: test/index#werkzeug.test.Cookie.path
  summary: The path that the cookie was set for
  belongs_to: Testing WSGI Applications
  description: |-
    `path: str`

    The path that the cookie was set for.
- name: Cookie.same_site
  id: test/index#werkzeug.test.Cookie.same_site
  summary: The SameSite parameter
  belongs_to: Testing WSGI Applications
  description: |-
    `same_site: str | None`

    The `SameSite` parameter.
- name: Cookie.secure
  id: test/index#werkzeug.test.Cookie.secure
  summary: The Secure parameter
  belongs_to: Testing WSGI Applications
  description: |-
    `secure: bool | None`

    The `Secure` parameter.
- name: Cookie.value
  id: test/index#werkzeug.test.Cookie.value
  summary: The cookie key, encoded as a client would see it
  belongs_to: Testing WSGI Applications
  description: |-
    `value: str`

    The cookie key, encoded as a client would see it.
- name: create_environ()
  id: test/index#werkzeug.test.create_environ
  summary: Create a new WSGI environ dict based on the values passed
  belongs_to: Testing WSGI Applications
  description: |-
    `werkzeug.test.create_environ(*args, **kwargs)`

    Create a new WSGI environ dict based on the values passed. The first parameter should be the path of the request which defaults to ‘/’. The second one can either be an absolute path (in that case the host is localhost:80) or a full path to the request with scheme, netloc port and the path to the script.

    This accepts the same arguments as the [`EnvironBuilder`](#werkzeug.test.EnvironBuilder "werkzeug.test.EnvironBuilder") constructor.

    Changelog

    Changed in version 0.5: This function is now a thin wrapper over [`EnvironBuilder`](#werkzeug.test.EnvironBuilder "werkzeug.test.EnvironBuilder") which was added in 0.5. The `headers`, `environ_base`, `environ_overrides` and `charset` parameters were added.

    Parameters:

    - **args** (*t.Any*) –
    - **kwargs** (*t.Any*) –

    Return type:

    WSGIEnvironment
- name: Data Structures
  id: datastructures/index
  summary: Werkzeug provides some subclasses of common Python objects to extend them with additional features
  description: "# Data Structures\n\nWerkzeug provides some subclasses of common Python objects to extend them with additional features. Some of them are used to make them immutable, others are used to change some semantics to better work with HTTP.\n\n## General Purpose\n\nChangelog\n\nChanged in version 0.6: The general purpose classes are now pickleable in each protocol as long as the contained objects are pickleable. This means that the [`FileMultiDict`](#werkzeug.datastructures.FileMultiDict \"werkzeug.datastructures.FileMultiDict\") won’t be pickleable as soon as it contains a file.\n\n`class werkzeug.datastructures.TypeConversionDict`  \nWorks like a regular dict but the [`get()`](#werkzeug.datastructures.TypeConversionDict.get \"werkzeug.datastructures.TypeConversionDict.get\") method can perform type conversions. [`MultiDict`](#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\") and [`CombinedMultiDict`](#werkzeug.datastructures.CombinedMultiDict \"werkzeug.datastructures.CombinedMultiDict\") are subclasses of this class and provide the same feature.\n\nChangelog\n\nNew in version 0.5.\n\n`get(key, default=None, type=None)`  \nReturn the default value if the requested data doesn’t exist. If `type` is provided and is a callable it should convert the value, return it or raise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError \"(in Python v3.11)\") if that is not possible. In this case the function will return the default as if the value was not found:\n\n``` python\n>>> d = TypeConversionDict(foo='42', bar='blub')\n>>> d.get('foo', type=int)\n42\n>>> d.get('bar', -1, type=int)\n-1\n```\n\nParameters:  \n- **key** – The key to be looked up.\n- **default** – The default value to be returned if the key can’t be looked up. If not further specified `None` is returned.\n- **type** – A callable that is used to cast the value in the [`MultiDict`](#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\"). If a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError \"(in Python v3.11)\") is raised by this callable the default value is returned.\n\n`class werkzeug.datastructures.ImmutableTypeConversionDict`  \nWorks like a [`TypeConversionDict`](#werkzeug.datastructures.TypeConversionDict \"werkzeug.datastructures.TypeConversionDict\") but does not support modifications.\n\nChangelog\n\nNew in version 0.5.\n\n`copy()`  \nReturn a shallow mutable copy of this object. Keep in mind that the standard library’s [`copy()`](#werkzeug.datastructures.ImmutableTypeConversionDict.copy \"werkzeug.datastructures.ImmutableTypeConversionDict.copy\") function is a no-op for this class like for any other python immutable type (eg: [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")).\n\n`class werkzeug.datastructures.MultiDict(mapping=None)`\n\nA [`MultiDict`](#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\") is a dictionary subclass customized to deal with multiple values for the same key which is for example used by the parsing functions in the wrappers. This is necessary because some HTML form elements pass multiple values for the same key.\n\n[`MultiDict`](#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\") implements all standard dictionary methods. Internally, it saves all values for a key as a list, but the standard dict access methods will only return the first value for a key. If you want to gain access to the other values, too, you have to use the `list` methods as explained below.\n\nBasic Usage:\n\n``` python\n>>> d = MultiDict([('a', 'b'), ('a', 'c')])\n>>> d\nMultiDict([('a', 'b'), ('a', 'c')])\n>>> d['a']\n'b'\n>>> d.getlist('a')\n['b', 'c']\n>>> 'a' in d\nTrue\n```\n\nIt behaves like a normal dict thus all dict functions will only return the first value when multiple values for one key are found.\n\nFrom Werkzeug 0.3 onwards, the `KeyError` raised by this class is also a subclass of the `BadRequest` HTTP exception and will render a page for a `400 BAD REQUEST` if caught in a catch-all for HTTP exceptions.\n\nA [`MultiDict`](#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\") can be constructed from an iterable of `(key, value)` tuples, a dict, a [`MultiDict`](#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\") or from Werkzeug 0.2 onwards some keyword parameters.\n\nParameters:  \n**mapping** – the initial value for the [`MultiDict`](#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\"). Either a regular dict, an iterable of `(key, value)` tuples or `None`.\n\n&nbsp;\n\n`add(key, value)`  \nAdds a new value for the key.\n\nChangelog\n\nNew in version 0.6.\n\nParameters:  \n- **key** – the key for the value.\n- **value** – the value to add.\n\n`clear() → None. Remove all items from D.`\n\n`copy()`  \nReturn a shallow copy of this object.\n\n&nbsp;\n\n`deepcopy(memo=None)`  \nReturn a deep copy of this object.\n\n&nbsp;\n\n`fromkeys(value=None, /)`  \nCreate a new dictionary with keys from iterable and values set to value.\n\n&nbsp;\n\n`get(key, default=None, type=None)`  \nReturn the default value if the requested data doesn’t exist. If `type` is provided and is a callable it should convert the value, return it or raise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError \"(in Python v3.11)\") if that is not possible. In this case the function will return the default as if the value was not found:\n\n``` python\n>>> d = TypeConversionDict(foo='42', bar='blub')\n>>> d.get('foo', type=int)\n42\n>>> d.get('bar', -1, type=int)\n-1\n```\n\nParameters:  \n- **key** – The key to be looked up.\n- **default** – The default value to be returned if the key can’t be looked up. If not further specified `None` is returned.\n- **type** – A callable that is used to cast the value in the [`MultiDict`](#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\"). If a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError \"(in Python v3.11)\") is raised by this callable the default value is returned.\n\n&nbsp;\n\n`getlist(key, type=None)`  \nReturn the list of items for a given key. If that key is not in the `MultiDict`, the return value will be an empty list. Just like `get`, `getlist` accepts a `type` parameter. All items will be converted with the callable defined there.\n\nParameters:  \n- **key** – The key to be looked up.\n- **type** – A callable that is used to cast the value in the [`MultiDict`](#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\"). If a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError \"(in Python v3.11)\") is raised by this callable the value will be removed from the list.\n\nReturns:  \na [`list`](https://docs.python.org/3/library/stdtypes.html#list \"(in Python v3.11)\") of all the values for the key.\n\n&nbsp;\n\n`items(multi=False)`  \nReturn an iterator of `(key, value)` pairs.\n\nParameters:  \n**multi** – If set to `True` the iterator returned will have a pair for each value of each key. Otherwise it will only contain pairs for the first value of each key.\n\n`keys() → a set-like object providing a view on D's keys`\n\n`lists()`  \nReturn a iterator of `(key, values)` pairs, where values is the list of all values associated with the key.\n\n&nbsp;\n\n`listvalues()`  \nReturn an iterator of all values associated with a key. Zipping [`keys()`](#werkzeug.datastructures.MultiDict.keys \"werkzeug.datastructures.MultiDict.keys\") and this is the same as calling [`lists()`](#werkzeug.datastructures.MultiDict.lists \"werkzeug.datastructures.MultiDict.lists\"):\n\n``` python\n>>> d = MultiDict({\"foo\": [1, 2, 3]})\n>>> zip(d.keys(), d.listvalues()) == d.lists()\nTrue\n```\n\n&nbsp;\n\n`pop(key, default=no value)`  \nPop the first item for a list on the dict. Afterwards the key is removed from the dict, so additional values are discarded:\n\n``` python\n>>> d = MultiDict({\"foo\": [1, 2, 3]})\n>>> d.pop(\"foo\")\n1\n>>> \"foo\" in d\nFalse\n```\n\nParameters:  \n- **key** – the key to pop.\n- **default** – if provided the value to return if the key was not in the dictionary.\n\n&nbsp;\n\n`popitem()`  \nPop an item from the dict.\n\n&nbsp;\n\n`popitemlist()`  \nPop a `(key, list)` tuple from the dict.\n\n&nbsp;\n\n`poplist(key)`  \nPop the list for a key from the dict. If the key is not in the dict an empty list is returned.\n\nChangelog\n\nChanged in version 0.5: If the key does no longer exist a list is returned instead of raising an error.\n\n&nbsp;\n\n`setdefault(key, default=None)`  \nReturns the value for the key if it is in the dict, otherwise it returns `default` and sets that value for `key`.\n\nParameters:  \n- **key** – The key to be looked up.\n- **default** – The default value to be returned if the key is not in the dict. If not further specified it’s `None`.\n\n&nbsp;\n\n`setlist(key, new_list)`  \nRemove the old values for a key and add new ones. Note that the list you pass the values in will be shallow-copied before it is inserted in the dictionary.\n\n``` python\n>>> d = MultiDict()\n>>> d.setlist('foo', ['1', '2'])\n>>> d['foo']\n'1'\n>>> d.getlist('foo')\n['1', '2']\n```\n\nParameters:  \n- **key** – The key for which the values are set.\n- **new_list** – An iterable with the new values for the key. Old values are removed first.\n\n&nbsp;\n\n`setlistdefault(key, default_list=None)`  \nLike `setdefault` but sets multiple values. The list returned is not a copy, but the list that is actually used internally. This means that you can put new values into the dict by appending items to the list:\n\n``` python\n>>> d = MultiDict({\"foo\": 1})\n>>> d.setlistdefault(\"foo\").extend([2, 3])\n>>> d.getlist(\"foo\")\n[1, 2, 3]\n```\n\nParameters:  \n- **key** – The key to be looked up.\n- **default_list** – An iterable of default values. It is either copied (in case it was a list) or converted into a list before returned.\n\nReturns:  \na [`list`](https://docs.python.org/3/library/stdtypes.html#list \"(in Python v3.11)\")\n\n&nbsp;\n\n`to_dict(flat=True)`  \nReturn the contents as regular dict. If `flat` is `True` the returned dict will only have the first item present, if `flat` is `False` all values will be returned as lists.\n\nParameters:  \n**flat** – If set to `False` the dict returned will have lists with all the values in it. Otherwise it will only contain the first value for each key.\n\nReturns:  \na [`dict`](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.11)\")\n\n&nbsp;\n\n`update(mapping)`  \nupdate() extends rather than replaces existing key lists:\n\n``` python\n>>> a = MultiDict({'x': 1})\n>>> b = MultiDict({'x': 2, 'y': 3})\n>>> a.update(b)\n>>> a\nMultiDict([('y', 3), ('x', 1), ('x', 2)])\n```\n\nIf the value list for a key in `other_dict` is empty, no new values will be added to the dict and the key will not be created:\n\n``` python\n>>> x = {'empty_list': []}\n>>> y = MultiDict()\n>>> y.update(x)\n>>> y\nMultiDict([])\n```\n\n&nbsp;\n\n`values()`  \nReturns an iterator of the first value on every key’s value list.\n\n&nbsp;\n\n`class werkzeug.datastructures.OrderedMultiDict(mapping=None)`  \nWorks like a regular [`MultiDict`](#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\") but preserves the order of the fields. To convert the ordered multi dict into a list you can use the `items()` method and pass it `multi=True`.\n\nIn general an [`OrderedMultiDict`](#werkzeug.datastructures.OrderedMultiDict \"werkzeug.datastructures.OrderedMultiDict\") is an order of magnitude slower than a [`MultiDict`](#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\").\n\nnote\n\nDue to a limitation in Python you cannot convert an ordered multi dict into a regular dict by using `dict(multidict)`. Instead you have to use the `to_dict()` method, otherwise the internal bucket objects are exposed.\n\n&nbsp;\n\n`class werkzeug.datastructures.ImmutableMultiDict(mapping=None)`  \nAn immutable [`MultiDict`](#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\").\n\nChangelog\n\nNew in version 0.5.\n\n`copy()`  \nReturn a shallow mutable copy of this object. Keep in mind that the standard library’s [`copy()`](#werkzeug.datastructures.ImmutableMultiDict.copy \"werkzeug.datastructures.ImmutableMultiDict.copy\") function is a no-op for this class like for any other python immutable type (eg: [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")).\n\n&nbsp;\n\n`class werkzeug.datastructures.ImmutableOrderedMultiDict(mapping=None)`  \nAn immutable [`OrderedMultiDict`](#werkzeug.datastructures.OrderedMultiDict \"werkzeug.datastructures.OrderedMultiDict\").\n\nChangelog\n\nNew in version 0.6.\n\n`copy()`  \nReturn a shallow mutable copy of this object. Keep in mind that the standard library’s [`copy()`](#werkzeug.datastructures.ImmutableOrderedMultiDict.copy \"werkzeug.datastructures.ImmutableOrderedMultiDict.copy\") function is a no-op for this class like for any other python immutable type (eg: [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")).\n\n&nbsp;\n\n`class werkzeug.datastructures.CombinedMultiDict(dicts=None)`  \nA read only [`MultiDict`](#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\") that you can pass multiple [`MultiDict`](#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\") instances as sequence and it will combine the return values of all wrapped dicts:\n\n``` python\n>>> from werkzeug.datastructures import CombinedMultiDict, MultiDict\n>>> post = MultiDict([('foo', 'bar')])\n>>> get = MultiDict([('blub', 'blah')])\n>>> combined = CombinedMultiDict([get, post])\n>>> combined['foo']\n'bar'\n>>> combined['blub']\n'blah'\n```\n\nThis works for all read operations and will raise a `TypeError` for methods that usually change data which isn’t possible.\n\nFrom Werkzeug 0.3 onwards, the `KeyError` raised by this class is also a subclass of the `BadRequest` HTTP exception and will render a page for a `400 BAD REQUEST` if caught in a catch-all for HTTP exceptions.\n\n&nbsp;\n\n`class werkzeug.datastructures.ImmutableDict`  \nAn immutable [`dict`](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.11)\").\n\nChangelog\n\nNew in version 0.5.\n\n`copy()`  \nReturn a shallow mutable copy of this object. Keep in mind that the standard library’s [`copy()`](#werkzeug.datastructures.ImmutableDict.copy \"werkzeug.datastructures.ImmutableDict.copy\") function is a no-op for this class like for any other python immutable type (eg: [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")).\n\n`class werkzeug.datastructures.ImmutableList(iterable=(), /)`\n\nAn immutable [`list`](https://docs.python.org/3/library/stdtypes.html#list \"(in Python v3.11)\").\n\nChangelog\n\nNew in version 0.5.\n\nPrivate:\n\n`class werkzeug.datastructures.FileMultiDict(mapping=None)`  \nA special [`MultiDict`](#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\") that has convenience methods to add files to it. This is used for `EnvironBuilder` and generally useful for unittesting.\n\nChangelog\n\nNew in version 0.5.\n\n`add_file(name, file, filename=None, content_type=None)`  \nAdds a new file to the dict. `file` can be a file name or a `file`-like or a [`FileStorage`](#werkzeug.datastructures.FileStorage \"werkzeug.datastructures.FileStorage\") object.\n\nParameters:  \n- **name** – the name of the field.\n- **file** – a filename or `file`-like object\n- **filename** – an optional filename\n- **content_type** – an optional content type\n\n## HTTP Related\n\n`class werkzeug.datastructures.Headers([defaults])`  \nAn object that stores some headers. It has a dict-like interface, but is ordered, can store the same key multiple times, and iterating yields `(key, value)` pairs instead of only keys.\n\nThis data structure is useful if you want a nicer way to handle WSGI headers which are stored as tuples in a list.\n\nFrom Werkzeug 0.3 onwards, the [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError \"(in Python v3.11)\") raised by this class is also a subclass of the `BadRequest` HTTP exception and will render a page for a `400 BAD REQUEST` if caught in a catch-all for HTTP exceptions.\n\nHeaders is mostly compatible with the Python [`wsgiref.headers.Headers`](https://docs.python.org/3/library/wsgiref.html#wsgiref.headers.Headers \"(in Python v3.11)\") class, with the exception of `__getitem__`. [`wsgiref`](https://docs.python.org/3/library/wsgiref.html#module-wsgiref \"(in Python v3.11)\") will return `None` for `headers['missing']`, whereas [`Headers`](#werkzeug.datastructures.Headers \"werkzeug.datastructures.Headers\") will raise a [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError \"(in Python v3.11)\").\n\nTo create a new `Headers` object, pass it a list, dict, or other `Headers` object with default values. These values are validated the same way values added later are.\n\nParameters:  \n**defaults** – The list of default values for the [`Headers`](#werkzeug.datastructures.Headers \"werkzeug.datastructures.Headers\").\n\nChangelog\n\nChanged in version 2.1.0: Default values are validated the same as values added later.\n\nChanged in version 0.9: This data structure now stores unicode values similar to how the multi dicts do it. The main difference is that bytes can be set as well which will automatically be latin1 decoded.\n\nChanged in version 0.9: The `linked()` function was removed without replacement as it was an API that does not support the changes to the encoding model.\n\n`add(_key, _value, **kw)`  \nAdd a new header tuple to the list.\n\nKeyword arguments can specify additional parameters for the header value, with underscores converted to dashes:\n\n``` python\n>>> d = Headers()\n>>> d.add('Content-Type', 'text/plain')\n>>> d.add('Content-Disposition', 'attachment', filename='foo.png')\n```\n\nThe keyword argument dumping uses `dump_options_header()` behind the scenes.\n\nChangelog\n\nNew in version 0.4.1: keyword arguments were added for [`wsgiref`](https://docs.python.org/3/library/wsgiref.html#module-wsgiref \"(in Python v3.11)\") compatibility.\n\n`add_header(_key, _value, **_kw)`  \nAdd a new header tuple to the list.\n\nAn alias for [`add()`](#werkzeug.datastructures.Headers.add \"werkzeug.datastructures.Headers.add\") for compatibility with the [`wsgiref`](https://docs.python.org/3/library/wsgiref.html#module-wsgiref \"(in Python v3.11)\") [`add_header()`](https://docs.python.org/3/library/wsgiref.html#wsgiref.headers.Headers.add_header \"(in Python v3.11)\") method.\n\n`clear()`  \nClears all headers.\n\n`extend(*args, **kwargs)`  \nExtend headers in this object with items from another object containing header items as well as keyword arguments.\n\nTo replace existing keys instead of extending, use [`update()`](#werkzeug.datastructures.Headers.update \"werkzeug.datastructures.Headers.update\") instead.\n\nIf provided, the first argument can be another [`Headers`](#werkzeug.datastructures.Headers \"werkzeug.datastructures.Headers\") object, a [`MultiDict`](#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\"), [`dict`](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.11)\"), or iterable of pairs.\n\nChangelog\n\nChanged in version 1.0: Support [`MultiDict`](#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\"). Allow passing `kwargs`.\n\n`get(key, default=None, type=None)`  \nReturn the default value if the requested data doesn’t exist. If `type` is provided and is a callable it should convert the value, return it or raise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError \"(in Python v3.11)\") if that is not possible. In this case the function will return the default as if the value was not found:\n\n``` python\n>>> d = Headers([('Content-Length', '42')])\n>>> d.get('Content-Length', type=int)\n42\n```\n\nParameters:  \n- **key** – The key to be looked up.\n- **default** – The default value to be returned if the key can’t be looked up. If not further specified `None` is returned.\n- **type** – A callable that is used to cast the value in the [`Headers`](#werkzeug.datastructures.Headers \"werkzeug.datastructures.Headers\"). If a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError \"(in Python v3.11)\") is raised by this callable the default value is returned.\n\nChanged in version 3.0: The `as_bytes` parameter was removed.\n\nChangelog\n\nChanged in version 0.9: The `as_bytes` parameter was added.\n\n`get_all(name)`  \nReturn a list of all the values for the named field.\n\nThis method is compatible with the [`wsgiref`](https://docs.python.org/3/library/wsgiref.html#module-wsgiref \"(in Python v3.11)\") [`get_all()`](https://docs.python.org/3/library/wsgiref.html#wsgiref.headers.Headers.get_all \"(in Python v3.11)\") method.\n\n`getlist(key, type=None)`  \nReturn the list of items for a given key. If that key is not in the [`Headers`](#werkzeug.datastructures.Headers \"werkzeug.datastructures.Headers\"), the return value will be an empty list. Just like [`get()`](#werkzeug.datastructures.Headers.get \"werkzeug.datastructures.Headers.get\"), [`getlist()`](#werkzeug.datastructures.Headers.getlist \"werkzeug.datastructures.Headers.getlist\") accepts a `type` parameter. All items will be converted with the callable defined there.\n\nParameters:  \n- **key** – The key to be looked up.\n- **type** – A callable that is used to cast the value in the [`Headers`](#werkzeug.datastructures.Headers \"werkzeug.datastructures.Headers\"). If a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError \"(in Python v3.11)\") is raised by this callable the value will be removed from the list.\n\nReturns:  \na [`list`](https://docs.python.org/3/library/stdtypes.html#list \"(in Python v3.11)\") of all the values for the key.\n\nChanged in version 3.0: The `as_bytes` parameter was removed.\n\nChangelog\n\nChanged in version 0.9: The `as_bytes` parameter was added.\n\n`pop(key=None, default=no value)`  \nRemoves and returns a key or index.\n\nParameters:  \n**key** – The key to be popped. If this is an integer the item at that position is removed, if it’s a string the value for that key is. If the key is omitted or `None` the last item is removed.\n\nReturns:  \nan item.\n\n`popitem()`  \nRemoves a key or index and returns a (key, value) item.\n\n`remove(key)`  \nRemove a key.\n\nParameters:  \n**key** – The key to be removed.\n\n`set(_key, _value, **kw)`  \nRemove all header tuples for `key` and add a new one. The newly added key either appears at the end of the list if there was no entry or replaces the first one.\n\nKeyword arguments can specify additional parameters for the header value, with underscores converted to dashes. See [`add()`](#werkzeug.datastructures.Headers.add \"werkzeug.datastructures.Headers.add\") for more information.\n\nChangelog\n\nChanged in version 0.6.1: [`set()`](#werkzeug.datastructures.Headers.set \"werkzeug.datastructures.Headers.set\") now accepts the same arguments as [`add()`](#werkzeug.datastructures.Headers.add \"werkzeug.datastructures.Headers.add\").\n\nParameters:  \n- **key** – The key to be inserted.\n- **value** – The value to be inserted.\n\n`setdefault(key, default)`  \nReturn the first value for the key if it is in the headers, otherwise set the header to the value given by `default` and return that.\n\nParameters:  \n- **key** – The header key to get.\n- **default** – The value to set for the key if it is not in the headers.\n\n`setlist(key, values)`  \nRemove any existing values for a header and add new ones.\n\nParameters:  \n- **key** – The header key to set.\n- **values** – An iterable of values to set for the key.\n\nChangelog\n\nNew in version 1.0.\n\n`setlistdefault(key, default)`  \nReturn the list of values for the key if it is in the headers, otherwise set the header to the list of values given by `default` and return that.\n\nUnlike [`MultiDict.setlistdefault()`](#werkzeug.datastructures.MultiDict.setlistdefault \"werkzeug.datastructures.MultiDict.setlistdefault\"), modifying the returned list will not affect the headers.\n\nParameters:  \n- **key** – The header key to get.\n- **default** – An iterable of values to set for the key if it is not in the headers.\n\nChangelog\n\nNew in version 1.0.\n\n`to_wsgi_list()`  \nConvert the headers into a list suitable for WSGI.\n\nReturns:  \nlist\n\n`update(*args, **kwargs)`  \nReplace headers in this object with items from another headers object and keyword arguments.\n\nTo extend existing keys instead of replacing, use [`extend()`](#werkzeug.datastructures.Headers.extend \"werkzeug.datastructures.Headers.extend\") instead.\n\nIf provided, the first argument can be another [`Headers`](#werkzeug.datastructures.Headers \"werkzeug.datastructures.Headers\") object, a [`MultiDict`](#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\"), [`dict`](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.11)\"), or iterable of pairs.\n\nChangelog\n\nNew in version 1.0.\n\n&nbsp;\n\n`class werkzeug.datastructures.EnvironHeaders(environ)`  \nRead only version of the headers from a WSGI environment. This provides the same interface as `Headers` and is constructed from a WSGI environment. From Werkzeug 0.3 onwards, the `KeyError` raised by this class is also a subclass of the `BadRequest` HTTP exception and will render a page for a `400 BAD REQUEST` if caught in a catch-all for HTTP exceptions.\n\n&nbsp;\n\n`class werkzeug.datastructures.HeaderSet(headers=None, on_update=None)`  \nSimilar to the [`ETags`](#werkzeug.datastructures.ETags \"werkzeug.datastructures.ETags\") class this implements a set-like structure. Unlike [`ETags`](#werkzeug.datastructures.ETags \"werkzeug.datastructures.ETags\") this is case insensitive and used for vary, allow, and content-language headers.\n\nIf not constructed using the `parse_set_header()` function the instantiation works like this:\n\n``` python\n>>> hs = HeaderSet(['foo', 'bar', 'baz'])\n>>> hs\nHeaderSet(['foo', 'bar', 'baz'])\n```\n\n`add(header)`  \nAdd a new header to the set.\n\n`as_set(preserve_casing=False)`  \nReturn the set as real python set type. When calling this, all the items are converted to lowercase and the ordering is lost.\n\nParameters:  \n**preserve_casing** – if set to `True` the items in the set returned will have the original case like in the [`HeaderSet`](#werkzeug.datastructures.HeaderSet \"werkzeug.datastructures.HeaderSet\"), otherwise they will be lowercase.\n\n`clear()`  \nClear the set.\n\n`discard(header)`  \nLike [`remove()`](#werkzeug.datastructures.HeaderSet.remove \"werkzeug.datastructures.HeaderSet.remove\") but ignores errors.\n\nParameters:  \n**header** – the header to be discarded.\n\n`find(header)`  \nReturn the index of the header in the set or return -1 if not found.\n\nParameters:  \n**header** – the header to be looked up.\n\n`index(header)`  \nReturn the index of the header in the set or raise an [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError \"(in Python v3.11)\").\n\nParameters:  \n**header** – the header to be looked up.\n\n`remove(header)`  \nRemove a header from the set. This raises an [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError \"(in Python v3.11)\") if the header is not in the set.\n\nChangelog\n\nChanged in version 0.5: In older versions a [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError \"(in Python v3.11)\") was raised instead of a [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError \"(in Python v3.11)\") if the object was missing.\n\nParameters:  \n**header** – the header to be removed.\n\n`to_header()`  \nConvert the header set into an HTTP header string.\n\n`update(iterable)`  \nAdd all the headers from the iterable to the set.\n\nParameters:  \n**iterable** – updates the set with the items from the iterable.\n\n&nbsp;\n\n`class werkzeug.datastructures.Accept(values=())`  \nAn [`Accept`](#werkzeug.datastructures.Accept \"werkzeug.datastructures.Accept\") object is just a list subclass for lists of `(value, quality)` tuples. It is automatically sorted by specificity and quality.\n\nAll [`Accept`](#werkzeug.datastructures.Accept \"werkzeug.datastructures.Accept\") objects work similar to a list but provide extra functionality for working with the data. Containment checks are normalized to the rules of that header:\n\n``` python\n>>> a = CharsetAccept([('ISO-8859-1', 1), ('utf-8', 0.7)])\n>>> a.best\n'ISO-8859-1'\n>>> 'iso-8859-1' in a\nTrue\n>>> 'UTF8' in a\nTrue\n>>> 'utf7' in a\nFalse\n```\n\nTo get the quality for an item you can use normal item lookup:\n\n``` python\n>>> print a['utf-8']\n0.7\n>>> a['utf7']\n0\n```\n\nChangelog\n\nChanged in version 1.0.0: [`Accept`](#werkzeug.datastructures.Accept \"werkzeug.datastructures.Accept\") internal values are no longer ordered alphabetically for equal quality tags. Instead the initial order is preserved.\n\nChanged in version 0.5: [`Accept`](#werkzeug.datastructures.Accept \"werkzeug.datastructures.Accept\") objects are forced immutable now.\n\n`property best`  \nThe best match as value.\n\n`best_match(matches, default=None)`  \nReturns the best match from a list of possible matches based on the specificity and quality of the client. If two items have the same quality and specificity, the one is returned that comes first.\n\nParameters:  \n- **matches** – a list of matches to check for\n- **default** – the value that is returned if none match\n\n`find(key)`  \nGet the position of an entry or return -1.\n\nParameters:  \n**key** – The key to be looked up.\n\n`index(key)`  \nGet the position of an entry or raise [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError \"(in Python v3.11)\").\n\nParameters:  \n**key** – The key to be looked up.\n\nChangelog\n\nChanged in version 0.5: This used to raise [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError \"(in Python v3.11)\"), which was inconsistent with the list API.\n\n`quality(key)`  \nReturns the quality of the key.\n\nChangelog\n\nNew in version 0.6: In previous versions you had to use the item-lookup syntax (eg: `obj[key]` instead of `obj.quality(key)`)\n\n`to_header()`  \nConvert the header set into an HTTP header string.\n\n`values()`  \nIterate over all values.\n\n&nbsp;\n\n`class werkzeug.datastructures.MIMEAccept(values=())`  \nLike [`Accept`](#werkzeug.datastructures.Accept \"werkzeug.datastructures.Accept\") but with special methods and behavior for mimetypes.\n\n`property accept_html`  \nTrue if this object accepts HTML.\n\n`property accept_json`  \nTrue if this object accepts JSON.\n\n`property accept_xhtml`  \nTrue if this object accepts XHTML.\n\n&nbsp;\n\n`class werkzeug.datastructures.CharsetAccept(values=())`  \nLike [`Accept`](#werkzeug.datastructures.Accept \"werkzeug.datastructures.Accept\") but with normalization for charsets.\n\n&nbsp;\n\n`class werkzeug.datastructures.LanguageAccept(values=())`  \nLike [`Accept`](#werkzeug.datastructures.Accept \"werkzeug.datastructures.Accept\") but with normalization for language tags.\n\n&nbsp;\n\n`class werkzeug.datastructures.RequestCacheControl(values=(), on_update=None)`  \nA cache control for requests. This is immutable and gives access to all the request-relevant cache control headers.\n\nTo get a header of the [`RequestCacheControl`](#werkzeug.datastructures.RequestCacheControl \"werkzeug.datastructures.RequestCacheControl\") object again you can convert the object into a string or call the `to_header()` method. If you plan to subclass it and add your own items have a look at the sourcecode for that class.\n\nChangelog\n\nChanged in version 2.1.0: Setting int properties such as `max_age` will convert the value to an int.\n\nNew in version 0.5: In previous versions a `CacheControl` class existed that was used both for request and response.\n\n`no_cache`  \naccessor for ‘no-cache’\n\n`no_store`  \naccessor for ‘no-store’\n\n`max_age`  \naccessor for ‘max-age’\n\n`no_transform`  \naccessor for ‘no-transform’\n\n`property max_stale`  \naccessor for ‘max-stale’\n\n`property min_fresh`  \naccessor for ‘min-fresh’\n\n`property only_if_cached`  \naccessor for ‘only-if-cached’\n\n&nbsp;\n\n`class werkzeug.datastructures.ResponseCacheControl(values=(), on_update=None)`  \nA cache control for responses. Unlike [`RequestCacheControl`](#werkzeug.datastructures.RequestCacheControl \"werkzeug.datastructures.RequestCacheControl\") this is mutable and gives access to response-relevant cache control headers.\n\nTo get a header of the [`ResponseCacheControl`](#werkzeug.datastructures.ResponseCacheControl \"werkzeug.datastructures.ResponseCacheControl\") object again you can convert the object into a string or call the `to_header()` method. If you plan to subclass it and add your own items have a look at the sourcecode for that class.\n\nChangelog\n\nChanged in version 2.1.1: `s_maxage` converts the value to an int.\n\nChanged in version 2.1.0: Setting int properties such as `max_age` will convert the value to an int.\n\nNew in version 0.5: In previous versions a `CacheControl` class existed that was used both for request and response.\n\n`no_cache`  \naccessor for ‘no-cache’\n\n`no_store`  \naccessor for ‘no-store’\n\n`max_age`  \naccessor for ‘max-age’\n\n`no_transform`  \naccessor for ‘no-transform’\n\n`property immutable`  \naccessor for ‘immutable’\n\n`property must_revalidate`  \naccessor for ‘must-revalidate’\n\n`property private`  \naccessor for ‘private’\n\n`property proxy_revalidate`  \naccessor for ‘proxy-revalidate’\n\n`property public`  \naccessor for ‘public’\n\n`property s_maxage`  \naccessor for ‘s-maxage’\n\n&nbsp;\n\n`class werkzeug.datastructures.ETags(strong_etags=None, weak_etags=None, star_tag=False)`  \nA set that can be used to check if one etag is present in a collection of etags.\n\n`as_set(include_weak=False)`  \nConvert the `ETags` object into a python set. Per default all the weak etags are not part of this set.\n\n`contains(etag)`  \nCheck if an etag is part of the set ignoring weak tags. It is also possible to use the `in` operator.\n\n`contains_raw(etag)`  \nWhen passed a quoted tag it will check if this tag is part of the set. If the tag is weak it is checked against weak and strong tags, otherwise strong only.\n\n`contains_weak(etag)`  \nCheck if an etag is part of the set including weak and strong tags.\n\n`is_strong(etag)`  \nCheck if an etag is strong.\n\n`is_weak(etag)`  \nCheck if an etag is weak.\n\n`to_header()`  \nConvert the etags set into a HTTP header string.\n\n&nbsp;\n\n`class werkzeug.datastructures.Authorization(auth_type, data=None, token=None)`  \nRepresents the parts of an `Authorization` request header.\n\n[`Request.authorization`](../wrappers/index#werkzeug.wrappers.Request.authorization \"werkzeug.wrappers.Request.authorization\") returns an instance if the header is set.\n\nAn instance can be used with the test [`Client`](../test/index#werkzeug.test.Client \"werkzeug.test.Client\") request methods’ `auth` parameter to send the header in test requests.\n\nDepending on the auth scheme, either [`parameters`](#werkzeug.datastructures.Authorization.parameters \"werkzeug.datastructures.Authorization.parameters\") or [`token`](#werkzeug.datastructures.Authorization.token \"werkzeug.datastructures.Authorization.token\") will be set. The `Basic` scheme’s token is decoded into the `username` and `password` parameters.\n\nFor convenience, `auth[\"key\"]` and `auth.key` both access the key in the [`parameters`](#werkzeug.datastructures.Authorization.parameters \"werkzeug.datastructures.Authorization.parameters\") dict, along with `auth.get(\"key\")` and `\"key\" in auth`.\n\nChangelog\n\nChanged in version 2.3: The `token` parameter and attribute was added to support auth schemes that use a token instead of parameters, such as `Bearer`.\n\nChanged in version 2.3: The object is no longer a `dict`.\n\nChanged in version 0.5: The object is an immutable dict.\n\nParameters:  \n- **auth_type** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **data** ([dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None\\]* *\\|* *None*) –\n- **token** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n\n`classmethod from_header(value)`  \nParse an `Authorization` header value and return an instance, or `None` if the value is empty.\n\nParameters:  \n**value** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – The header value to parse.\n\nReturn type:  \nte.Self \\| None\n\nChangelog\n\nNew in version 2.3.\n\n`parameters`  \nA dict of parameters parsed from the header. Either this or [`token`](#werkzeug.datastructures.Authorization.token \"werkzeug.datastructures.Authorization.token\") will have a value for a given scheme.\n\n`to_header()`  \nProduce an `Authorization` header value representing this data.\n\nChangelog\n\nNew in version 2.0.\n\nReturn type:  \n[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\n\n`token`  \nA token parsed from the header. Either this or [`parameters`](#werkzeug.datastructures.Authorization.parameters \"werkzeug.datastructures.Authorization.parameters\") will have a value for a given scheme.\n\nChangelog\n\nNew in version 2.3.\n\n`type`  \nThe authorization scheme, like `basic`, `digest`, or `bearer`.\n\n&nbsp;\n\n`class werkzeug.datastructures.WWWAuthenticate(auth_type, values=None, token=None)`  \nRepresents the parts of a `WWW-Authenticate` response header.\n\nSet [`Response.www_authenticate`](../wrappers/index#werkzeug.wrappers.Response.www_authenticate \"werkzeug.wrappers.Response.www_authenticate\") to an instance of list of instances to set values for this header in the response. Modifying this instance will modify the header value.\n\nDepending on the auth scheme, either [`parameters`](#werkzeug.datastructures.WWWAuthenticate.parameters \"werkzeug.datastructures.WWWAuthenticate.parameters\") or [`token`](#werkzeug.datastructures.WWWAuthenticate.token \"werkzeug.datastructures.WWWAuthenticate.token\") should be set. The `Basic` scheme will encode `username` and `password` parameters to a token.\n\nFor convenience, `auth[\"key\"]` and `auth.key` both act on the [`parameters`](#werkzeug.datastructures.WWWAuthenticate.parameters \"werkzeug.datastructures.WWWAuthenticate.parameters\") dict, and can be used to get, set, or delete parameters. `auth.get(\"key\")` and `\"key\" in auth` are also provided.\n\nChangelog\n\nChanged in version 2.3: The `token` parameter and attribute was added to support auth schemes that use a token instead of parameters, such as `Bearer`.\n\nChanged in version 2.3: The object is no longer a `dict`.\n\nChanged in version 2.3: The `on_update` parameter was removed.\n\nParameters:  \n- **auth_type** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **values** ([dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None\\]* *\\|* *None*) –\n- **token** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n\n`classmethod from_header(value)`  \nParse a `WWW-Authenticate` header value and return an instance, or `None` if the value is empty.\n\nParameters:  \n**value** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – The header value to parse.\n\nReturn type:  \nte.Self \\| None\n\nChangelog\n\nNew in version 2.3.\n\n`property parameters: dict[str, str | None]`  \nA dict of parameters for the header. Only one of this or [`token`](#werkzeug.datastructures.WWWAuthenticate.token \"werkzeug.datastructures.WWWAuthenticate.token\") should have a value for a given scheme.\n\n`to_header()`  \nProduce a `WWW-Authenticate` header value representing this data.\n\nReturn type:  \n[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\n\n`property token: str | None`  \nA dict of parameters for the header. Only one of this or [`token`](#werkzeug.datastructures.WWWAuthenticate.token \"werkzeug.datastructures.WWWAuthenticate.token\") should have a value for a given scheme.\n\n`property type: str`  \nThe authorization scheme, like `basic`, `digest`, or `bearer`.\n\n&nbsp;\n\n`class werkzeug.datastructures.IfRange(etag=None, date=None)`  \nVery simple object that represents the `If-Range` header in parsed form. It will either have neither a etag or date or one of either but never both.\n\nChangelog\n\nNew in version 0.7.\n\n`date`  \nThe date in parsed format or `None`.\n\n`etag`  \nThe etag parsed and unquoted. Ranges always operate on strong etags so the weakness information is not necessary.\n\n`to_header()`  \nConverts the object back into an HTTP header.\n\n&nbsp;\n\n`class werkzeug.datastructures.Range(units, ranges)`  \nRepresents a `Range` header. All methods only support only bytes as the unit. Stores a list of ranges if given, but the methods only work if only one range is provided.\n\nRaises:  \n[**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError \"(in Python v3.11)\") – If the ranges provided are invalid.\n\nChangelog\n\nChanged in version 0.15: The ranges passed in are validated.\n\nNew in version 0.7.\n\n`make_content_range(length)`  \nCreates a [`ContentRange`](#werkzeug.datastructures.ContentRange \"werkzeug.datastructures.ContentRange\") object from the current range and given content length.\n\n`range_for_length(length)`  \nIf the range is for bytes, the length is not None and there is exactly one range and it is satisfiable it returns a `(start, stop)` tuple, otherwise `None`.\n\n`ranges`  \nA list of `(begin, end)` tuples for the range header provided. The ranges are non-inclusive.\n\n`to_content_range_header(length)`  \nConverts the object into `Content-Range` HTTP header, based on given length\n\n`to_header()`  \nConverts the object back into an HTTP header.\n\n`units`  \nThe units of this range. Usually “bytes”.\n\n&nbsp;\n\n`class werkzeug.datastructures.ContentRange(units, start, stop, length=None, on_update=None)`  \nRepresents the content range header.\n\nChangelog\n\nNew in version 0.7.\n\n`property length`  \nThe length of the range or `None`.\n\n`set(start, stop, length=None, units='bytes')`  \nSimple method to update the ranges.\n\n`property start`  \nThe start point of the range or `None`.\n\n`property stop`  \nThe stop point of the range (non-inclusive) or `None`. Can only be `None` if also start is `None`.\n\n`property units`  \nThe units to use, usually “bytes”\n\n`unset()`  \nSets the units to `None` which indicates that the header should no longer be used.\n\n## Others\n\n`class werkzeug.datastructures.FileStorage(stream=None, filename=None, name=None, content_type=None, content_length=None, headers=None)`  \nThe [`FileStorage`](#werkzeug.datastructures.FileStorage \"werkzeug.datastructures.FileStorage\") class is a thin wrapper over incoming files. It is used by the request object to represent uploaded files. All the attributes of the wrapper stream are proxied by the file storage so it’s possible to do `storage.read()` instead of the long form `storage.stream.read()`.\n\n`stream`  \nThe input stream for the uploaded file. This usually points to an open temporary file.\n\n`filename`  \nThe filename of the file on the client. Can be a `str`, or an instance of `os.PathLike`.\n\n`name`  \nThe name of the form field.\n\n`headers`  \nThe multipart headers as [`Headers`](#werkzeug.datastructures.Headers \"werkzeug.datastructures.Headers\") object. This usually contains irrelevant information but in combination with custom multipart requests the raw headers might be interesting.\n\nChangelog\n\nNew in version 0.6.\n\n`close()`  \nClose the underlying file if possible.\n\n`property content_length`  \nThe content-length sent in the header. Usually not available\n\n`property content_type`  \nThe content-type sent in the header. Usually not available\n\n`property mimetype`  \nLike [`content_type`](#werkzeug.datastructures.FileStorage.content_type \"werkzeug.datastructures.FileStorage.content_type\"), but without parameters (eg, without charset, type etc.) and always lowercase. For example if the content type is `text/HTML; charset=utf-8` the mimetype would be `'text/html'`.\n\nChangelog\n\nNew in version 0.7.\n\n`property mimetype_params`  \nThe mimetype parameters as dict. For example if the content type is `text/html; charset=utf-8` the params would be `{'charset': 'utf-8'}`.\n\nChangelog\n\nNew in version 0.7.\n\n`save(dst, buffer_size=16384)`  \nSave the file to a destination path or file object. If the destination is a file object you have to close it yourself after the call. The buffer size is the number of bytes held in memory during the copy process. It defaults to 16KB.\n\nFor secure file saving also have a look at `secure_filename()`.\n\nParameters:  \n- **dst** – a filename, [`os.PathLike`](https://docs.python.org/3/library/os.html#os.PathLike \"(in Python v3.11)\"), or open file object to write to.\n- **buffer_size** – Passed as the `length` parameter of [`shutil.copyfileobj()`](https://docs.python.org/3/library/shutil.html#shutil.copyfileobj \"(in Python v3.11)\").\n\nChangelog\n\nChanged in version 1.0: Supports [`pathlib`](https://docs.python.org/3/library/pathlib.html#module-pathlib \"(in Python v3.11)\").\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/datastructures/](https://werkzeug.palletsprojects.com/en/3.0.x/datastructures/)"
- name: Dealing with Request Data
  id: request_data/index
  summary: The most important rule about web development is “Do not trust the user”. This is especially true for incoming request data on the input stream
  description: "# Dealing with Request Data\n\nThe most important rule about web development is “Do not trust the user”. This is especially true for incoming request data on the input stream. With WSGI this is actually a bit harder than you would expect. Because of that Werkzeug wraps the request stream for you to save you from the most prominent problems with it.\n\n## Missing EOF Marker on Input Stream\n\nThe input stream has no end-of-file marker. If you would call the `read()` method on the `wsgi.input` stream you would cause your application to hang on conforming servers. This is actually intentional however painful. Werkzeug solves that problem by wrapping the input stream in a special `LimitedStream`. The input stream is exposed on the request objects as `stream`. This one is either an empty stream (if the form data was parsed) or a limited stream with the contents of the input stream.\n\n## When does Werkzeug Parse?\n\nWerkzeug parses the incoming data under the following situations:\n\n- you access either `form`, `files`, or `stream` and the request method was `POST` or `PUT`.\n- if you call `parse_form_data()`.\n\nThese calls are not interchangeable. If you invoke `parse_form_data()` you must not use the request object or at least not the attributes that trigger the parsing process.\n\nThis is also true if you read from the `wsgi.input` stream before the parsing.\n\n**General rule:** Leave the WSGI input stream alone. Especially in WSGI middlewares. Use either the parsing functions or the request object. Do not mix multiple WSGI utility libraries for form data parsing or anything else that works on the input stream.\n\n## How does it Parse?\n\nThe standard Werkzeug parsing behavior handles three cases:\n\n- input content type was `multipart/form-data`. In this situation the `stream` will be empty and `form` will contain the regular `POST` / `PUT` data, `files` will contain the uploaded files as `FileStorage` objects.\n- input content type was `application/x-www-form-urlencoded`. Then the `stream` will be empty and `form` will contain the regular `POST` / `PUT` data and `files` will be empty.\n- the input content type was neither of them, `stream` points to a `LimitedStream` with the input data for further processing.\n\nSpecial note on the `get_data` method: Calling this loads the full request data into memory. This is only safe to do if the `max_content_length` is set. Also you can *either* read the stream *or* call `get_data()`.\n\n## Limiting Request Data\n\nThe `Request` class provides a few attributes to control how much data is processed from the request body. This can help mitigate DoS attacks that craft the request in such a way that the server uses too many resources to handle it. Each of these limits will raise a [`RequestEntityTooLarge`](../exceptions/index#werkzeug.exceptions.RequestEntityTooLarge \"werkzeug.exceptions.RequestEntityTooLarge\") if they are exceeded.\n\n- `max_content_length` Stop reading request data after this number of bytes. It’s better to configure this in the WSGI server or HTTP server, rather than the WSGI application.\n- `max_form_memory_size` Stop reading request data if any form part is larger than this number of bytes. While file parts can be moved to disk, regular form field data is stored in memory only.\n- `max_form_parts` Stop reading request data if more than this number of parts are sent in multipart form data. This is useful to stop a very large number of very small parts, especially file parts. The default is 1000.\n\nUsing Werkzeug to set these limits is only one layer of protection. WSGI servers and HTTPS servers should set their own limits on size and timeouts. The operating system or container manager should set limits on memory and processing time for server processes.\n\nIf a 413 Content Too Large error is returned before the entire request is read, clients may show a “connection reset” failure instead of the 413 error. This is based on how the WSGI/HTTP server and client handle connections, it’s not something the WSGI application (Werkzeug) has control over.\n\n## How to extend Parsing?\n\nModern web applications transmit a lot more than multipart form data or url encoded data. To extend the capabilities, subclass `Request` or `Request` and add or extend methods.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/request_data/](https://werkzeug.palletsprojects.com/en/3.0.x/request_data/)"
- name: DebuggedApplication
  id: debug/index#werkzeug.debug.DebuggedApplication
  summary: The evalex argument allows evaluating expressions in any frame of a traceback
  belongs_to: Debugging Applications
  description: "`class werkzeug.debug.DebuggedApplication(app, evalex=False, request_key='werkzeug.request', console_path='/console', console_init_func=None, show_hidden_frames=False, pin_security=True, pin_logging=True)`\n\nEnables debugging support for a given application:\n\n``` python\nfrom werkzeug.debug import DebuggedApplication\nfrom myapp import app\napp = DebuggedApplication(app, evalex=True)\n```\n\nThe `evalex` argument allows evaluating expressions in any frame of a traceback. This works by preserving each frame with its local state. Some state, such as context globals, cannot be restored with the frame by default. When `evalex` is enabled, `environ[\"werkzeug.debug.preserve_context\"]` will be a callable that takes a context manager, and can be called multiple times. Each context manager will be entered before evaluating code in the frame, then exited again, so they can perform setup and cleanup for each call.\n\nParameters:\n\n- **app** (*WSGIApplication*) – the WSGI application to run debugged.\n- **evalex** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – enable exception evaluation feature (interactive debugging). This requires a non-forking server.\n- **request_key** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The key that points to the request object in this environment. This parameter is ignored in current versions.\n- **console_path** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – the URL for a general purpose console.\n- **console_init_func** (*t.Callable\\[\\[\\],* [dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* *t.Any\\]\\]* *\\|* *None*) – the function that is executed before starting the general purpose console. The return value is used as initial namespace.\n- **show_hidden_frames** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – by default hidden traceback frames are skipped. You can show them by setting this parameter to `True`.\n- **pin_security** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – can be used to disable the pin based security system.\n- **pin_logging** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – enables the logging of the pin system.\n\nChangelog\n\nChanged in version 2.2: Added the `werkzeug.debug.preserve_context` environ key.\n\n## Using the Debugger\n\nOnce enabled and an error happens during a request you will see a detailed traceback instead of a generic “internal server error”. The traceback is still output to the terminal as well.\n\nThe error message is displayed at the top. Clicking it jumps to the bottom of the traceback. Frames that represent user code, as opposed to built-ins or installed packages, are highlighted blue. Clicking a frame will show more lines for context, clicking again will hide them.\n\nIf you have the `evalex` feature enabled you can get a console for every frame in the traceback by hovering over a frame and clicking the console icon that appears at the right. Once clicked a console opens where you can execute Python code in:\n\nInside the interactive consoles you can execute any kind of Python code. Unlike regular Python consoles the output of the object reprs is colored and stripped to a reasonable size by default. If the output is longer than what the console decides to display a small plus sign is added to the repr and a click will expand the repr.\n\nTo display all variables that are defined in the current frame you can use the `dump()` function. You can call it without arguments to get a detailed list of all variables and their values, or with an object as argument to get a detailed list of all the attributes it has.\n\n## Debugger PIN\n\nStarting with Werkzeug 0.11 the debug console is protected by a PIN. This is a security helper to make it less likely for the debugger to be exploited if you forget to disable it when deploying to production. The PIN based authentication is enabled by default.\n\nThe first time a console is opened, a dialog will prompt for a PIN that is printed to the command line. The PIN is generated in a stable way that is specific to the project. An explicit PIN can be provided through the environment variable `WERKZEUG_DEBUG_PIN`. This can be set to a number and will become the PIN. This variable can also be set to the value `off` to disable the PIN check entirely.\n\nIf an incorrect PIN is entered too many times the server needs to be restarted.\n\n**This feature is not meant to entirely secure the debugger. It is intended to make it harder for an attacker to exploit the debugger. Never enable the debugger in production.**\n\n## Pasting Errors\n\nIf you click on the “Traceback (most recent call last)” header, the view switches to a traditional text-based traceback. You can copy and paste this in order to provide information when asking a question or reporting an issue.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/debug/](https://werkzeug.palletsprojects.com/en/3.0.x/debug/)"
- name: Debugging Applications
  id: debug/index
  summary: Depending on the WSGI gateway/server, exceptions are handled differently
  description: "# Debugging Applications\n\nDepending on the WSGI gateway/server, exceptions are handled differently. Most of the time, exceptions go to stderr or the error log, and a generic “500 Internal Server Error” message is displayed.\n\nSince this is not the best debugging environment, Werkzeug provides a WSGI middleware that renders nice tracebacks, optionally with an interactive debug console to execute code in any frame.\n\nDanger\n\nThe debugger allows the execution of arbitrary code which makes it a major security risk. **The debugger must never be used on production machines. We cannot stress this enough. Do not enable the debugger in production.**\n\nNote\n\nThe interactive debugger does not work in forking environments, such as a server that starts multiple processes. Most such environments are production servers, where the debugger should not be enabled anyway.\n\n## Enabling the Debugger\n\nEnable the debugger by wrapping the application with the [`DebuggedApplication`](#werkzeug.debug.DebuggedApplication \"werkzeug.debug.DebuggedApplication\") middleware. Alternatively, you can pass `use_debugger=True` to `run_simple()` and it will do that for you.\n\n`class werkzeug.debug.DebuggedApplication(app, evalex=False, request_key='werkzeug.request', console_path='/console', console_init_func=None, show_hidden_frames=False, pin_security=True, pin_logging=True)`  \nEnables debugging support for a given application:\n\n``` python\nfrom werkzeug.debug import DebuggedApplication\nfrom myapp import app\napp = DebuggedApplication(app, evalex=True)\n```\n\nThe `evalex` argument allows evaluating expressions in any frame of a traceback. This works by preserving each frame with its local state. Some state, such as context globals, cannot be restored with the frame by default. When `evalex` is enabled, `environ[\"werkzeug.debug.preserve_context\"]` will be a callable that takes a context manager, and can be called multiple times. Each context manager will be entered before evaluating code in the frame, then exited again, so they can perform setup and cleanup for each call.\n\nParameters:  \n- **app** (*WSGIApplication*) – the WSGI application to run debugged.\n- **evalex** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – enable exception evaluation feature (interactive debugging). This requires a non-forking server.\n- **request_key** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The key that points to the request object in this environment. This parameter is ignored in current versions.\n- **console_path** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – the URL for a general purpose console.\n- **console_init_func** (*t.Callable\\[\\[\\],* [dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* *t.Any\\]\\]* *\\|* *None*) – the function that is executed before starting the general purpose console. The return value is used as initial namespace.\n- **show_hidden_frames** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – by default hidden traceback frames are skipped. You can show them by setting this parameter to `True`.\n- **pin_security** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – can be used to disable the pin based security system.\n- **pin_logging** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – enables the logging of the pin system.\n\nChangelog\n\nChanged in version 2.2: Added the `werkzeug.debug.preserve_context` environ key.\n\n## Using the Debugger\n\nOnce enabled and an error happens during a request you will see a detailed traceback instead of a generic “internal server error”. The traceback is still output to the terminal as well.\n\nThe error message is displayed at the top. Clicking it jumps to the bottom of the traceback. Frames that represent user code, as opposed to built-ins or installed packages, are highlighted blue. Clicking a frame will show more lines for context, clicking again will hide them.\n\nIf you have the `evalex` feature enabled you can get a console for every frame in the traceback by hovering over a frame and clicking the console icon that appears at the right. Once clicked a console opens where you can execute Python code in:\n\nInside the interactive consoles you can execute any kind of Python code. Unlike regular Python consoles the output of the object reprs is colored and stripped to a reasonable size by default. If the output is longer than what the console decides to display a small plus sign is added to the repr and a click will expand the repr.\n\nTo display all variables that are defined in the current frame you can use the `dump()` function. You can call it without arguments to get a detailed list of all variables and their values, or with an object as argument to get a detailed list of all the attributes it has.\n\n## Debugger PIN\n\nStarting with Werkzeug 0.11 the debug console is protected by a PIN. This is a security helper to make it less likely for the debugger to be exploited if you forget to disable it when deploying to production. The PIN based authentication is enabled by default.\n\nThe first time a console is opened, a dialog will prompt for a PIN that is printed to the command line. The PIN is generated in a stable way that is specific to the project. An explicit PIN can be provided through the environment variable `WERKZEUG_DEBUG_PIN`. This can be set to a number and will become the PIN. This variable can also be set to the value `off` to disable the PIN check entirely.\n\nIf an incorrect PIN is entered too many times the server needs to be restarted.\n\n**This feature is not meant to entirely secure the debugger. It is intended to make it harder for an attacker to exploit the debugger. Never enable the debugger in production.**\n\n## Pasting Errors\n\nIf you click on the “Traceback (most recent call last)” header, the view switches to a traditional text-based traceback. You can copy and paste this in order to provide information when asking a question or reporting an issue.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/debug/](https://werkzeug.palletsprojects.com/en/3.0.x/debug/)"
- name: Deploying to Production
  id: deployment/index
  summary: After developing your application, you’ll want to make it available publicly to other users
  description: "# Deploying to Production\n\nAfter developing your application, you’ll want to make it available publicly to other users. When you’re developing locally, you’re probably using the built-in development server, debugger, and reloader. These should not be used in production. Instead, you should use a dedicated WSGI server or hosting platform, some of which will be described here.\n\n“Production” means “not development”, which applies whether you’re serving your application publicly to millions of users or privately / locally to a single user. **Do not use the development server when deploying to production. It is intended for use only during local development. It is not designed to be particularly secure, stable, or efficient.**\n\n## Self-Hosted Options\n\nWerkzeug is a WSGI *application*. A WSGI *server* is used to run the application, converting incoming HTTP requests to the standard WSGI environ, and converting outgoing WSGI responses to HTTP responses.\n\nThe primary goal of these docs is to familiarize you with the concepts involved in running a WSGI application using a production WSGI server and HTTP server. There are many WSGI servers and HTTP servers, with many configuration possibilities. The pages below discuss the most common servers, and show the basics of running each one. The next section discusses platforms that can manage this for you.\n\n- [Gunicorn](gunicorn/index)\n- [Waitress](waitress/index)\n- [mod_wsgi](mod_wsgi/index)\n- [uWSGI](uwsgi/index)\n- [gevent](gevent/index)\n- [eventlet](eventlet/index)\n\nWSGI servers have HTTP servers built-in. However, a dedicated HTTP server may be safer, more efficient, or more capable. Putting an HTTP server in front of the WSGI server is called a “reverse proxy.”\n\n- [Tell Werkzeug it is Behind a Proxy](proxy_fix/index)\n- [nginx](nginx/index)\n- [Apache httpd](apache-httpd/index)\n\nThis list is not exhaustive, and you should evaluate these and other servers based on your application’s needs. Different servers will have different capabilities, configuration, and support.\n\n## Hosting Platforms\n\nThere are many services available for hosting web applications without needing to maintain your own server, networking, domain, etc. Some services may have a free tier up to a certain time or bandwidth. Many of these services use one of the WSGI servers described above, or a similar interface.\n\nYou should evaluate services based on your application’s needs. Different services will have different capabilities, configuration, pricing, and support.\n\nYou’ll probably need to [Tell Werkzeug it is Behind a Proxy](proxy_fix/index) when using most hosting platforms.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/deployment/](https://werkzeug.palletsprojects.com/en/3.0.x/deployment/)"
- name: DispatcherMiddleware
  id: middleware/dispatcher/index#werkzeug.middleware.dispatcher.DispatcherMiddleware
  summary: Combine multiple applications as a single WSGI application
  belongs_to: Application Dispatcher
  description: "`class werkzeug.middleware.dispatcher.DispatcherMiddleware(app, mounts=None)`\n\nCombine multiple applications as a single WSGI application. Requests are dispatched to an application based on the path it is mounted under.\n\nParameters:\n\n- **app** (*WSGIApplication*) – The WSGI application to dispatch to if the request doesn’t match a mounted path.\n- **mounts** ([dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* *WSGIApplication\\]* *\\|* *None*) – Maps path prefixes to applications for dispatching.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/middleware/dispatcher/](https://werkzeug.palletsprojects.com/en/3.0.x/middleware/dispatcher/)"
- name: dump_cookie()
  id: http/index#werkzeug.http.dump_cookie
  summary: Create a Set-Cookie header without the Set-Cookie prefix
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.dump_cookie(key, value='', max_age=None, expires=None, path='/', domain=None, secure=False, httponly=False, sync_expires=True, max_size=4093, samesite=None)`

    Create a Set-Cookie header without the `Set-Cookie` prefix.

    The return value is usually restricted to ascii as the vast majority of values are properly escaped, but that is no guarantee. It’s tunneled through latin1 as required by [**PEP 3333**](https://peps.python.org/pep-3333/).

    The return value is not ASCII safe if the key contains unicode characters. This is technically against the specification but happens in the wild. It’s strongly recommended to not use non-ASCII values for the keys.

    Parameters:

    - **max_age** ([timedelta](https://docs.python.org/3/library/datetime.html#datetime.timedelta "(in Python v3.11)") *\|* [int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* *None*) – should be a number of seconds, or `None` (default) if the cookie should last only as long as the client’s browser session. Additionally `timedelta` objects are accepted, too.
    - **expires** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* [datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime "(in Python v3.11)") *\|* [int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* [float](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)") *\|* *None*) – should be a `datetime` object or unix timestamp.
    - **path** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – limits the cookie to a given path, per default it will span the whole domain.
    - **domain** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – Use this if you want to set a cross-domain cookie. For example, `domain="example.com"` will set a cookie that is readable by the domain `www.example.com`, `foo.example.com` etc. Otherwise, a cookie will only be readable by the domain that set it.
    - **secure** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – The cookie will only be available via HTTPS
    - **httponly** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – disallow JavaScript to access the cookie. This is an extension to the cookie standard and probably not supported by all browsers.
    - **charset** – the encoding for string values.
    - **sync_expires** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – automatically set expires if max_age is defined but expires not.
    - **max_size** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")) – Warn if the final header value exceeds this size. The default, 4093, should be safely [supported by most browsers](http://browsercookielimits.squawky.net/). Set to 0 to disable this check.
    - **samesite** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – Limits the scope of the cookie such that it will only be attached to requests if those requests are same-site.
    - **key** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **value** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")

    Changed in version 3.0: Passing bytes, and the `charset` parameter, were removed.

    Changelog

    Changed in version 2.3.3: The `path` parameter is `/` by default.

    Changed in version 2.3.1: The value allows more characters without quoting.

    Changed in version 2.3: `localhost` and other names without a dot are allowed for the domain. A leading dot is ignored.

    Changed in version 2.3: The `path` parameter is `None` by default.

    Changed in version 1.0.0: The string `'None'` is accepted for `samesite`.

    ## Conditional Response Helpers

    For conditional responses the following functions might be useful:
- name: dump_header()
  id: http/index#werkzeug.http.dump_header
  summary: This is the reverse of parse_list_header(), parse_dict_header(), and parse_set_header()
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.dump_header(iterable)`

    Produce a header value from a list of items or `key=value` pairs, separated by commas `,`.

    This is the reverse of [`parse_list_header()`](#werkzeug.http.parse_list_header "werkzeug.http.parse_list_header"), [`parse_dict_header()`](#werkzeug.http.parse_dict_header "werkzeug.http.parse_dict_header"), and [`parse_set_header()`](#werkzeug.http.parse_set_header "werkzeug.http.parse_set_header").

    If a value contains non-token characters, it will be quoted.

    If a value is `None`, the key is output alone.

    In some keys for some headers, a UTF-8 value can be encoded using a special `key*=UTF-8''value` form, where `value` is percent encoded. This function will not produce that format automatically, but if a given key ends with an asterisk `*`, the value is assumed to have that form and will not be quoted further.

    ``` python
    dump_header(["foo", "bar baz"])
    'foo, "bar baz"'

    dump_header({"foo": "bar baz"})
    'foo="bar baz"'
    ```

    Parameters:

    **iterable** ([dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")*\]* *\|* [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable "(in Python v3.11)")*\[*[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")*\]*) – The items to create a header from.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")

    Changed in version 3.0: The `allow_token` parameter is removed.

    Changelog

    Changed in version 2.2.3: If a key ends with `*`, its value will not be quoted.

    ## Cookies
- name: EndpointPrefix
  id: routing/index#werkzeug.routing.EndpointPrefix
  summary: Prefixes all endpoints (which must be strings for this factory) with another string
  belongs_to: URL Routing
  description: |-
    `class werkzeug.routing.EndpointPrefix(prefix, rules)`

    Prefixes all endpoints (which must be strings for this factory) with another string. This can be useful for sub applications:

    ``` python
    url_map = Map([
        Rule('/', endpoint='index'),
        EndpointPrefix('blog/', [Submount('/blog', [
            Rule('/', endpoint='index'),
            Rule('/entry/<entry_slug>', endpoint='show')
        ])])
    ])
    ```

    Parameters:

    - **prefix** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **rules** (*t.Iterable\[*[RuleFactory](#werkzeug.routing.RuleFactory "werkzeug.routing.RuleFactory")*\]*) –

    ## Rule Templates
- name: environ_property
  id: utils/index#werkzeug.utils.environ_property
  summary: Maps request attributes to environment variables
  belongs_to: Utilities
  description: |-
    `class werkzeug.utils.environ_property(name, default=None, load_func=None, dump_func=None, read_only=None, doc=None)`

    Maps request attributes to environment variables. This works not only for the Werkzeug request object, but also any other class with an environ attribute:

    ``` python
    >>> class Test(object):
    ...     environ = {'key': 'value'}
    ...     test = environ_property('key')
    >>> var = Test()
    >>> var.test
    'value'
    ```

    If you pass it a second value it’s used as default if the key does not exist, the third one can be a converter that takes a value and converts it. If it raises [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "(in Python v3.11)") or [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "(in Python v3.11)") the default value is used. If no default value is provided `None` is used.

    Per default the property is read only. You have to explicitly enable it by passing `read_only=False` to the constructor.

    Parameters:

    - **name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **default** (*\_TAccessorValue* *\|* *None*) –
    - **load_func** (*t.Callable\[\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*\],* *\_TAccessorValue\]* *\|* *None*) –
    - **dump_func** (*t.Callable\[\[\_TAccessorValue\],* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*\]* *\|* *None*) –
    - **read_only** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)") *\|* *None*) –
    - **doc** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
- name: EnvironBuilder
  id: test/index#werkzeug.test.EnvironBuilder
  summary: This class can be used to conveniently create a WSGI environment for testing purposes
  belongs_to: Testing WSGI Applications
  description: |-
    `class werkzeug.test.EnvironBuilder(path='/', base_url=None, query_string=None, method='GET', input_stream=None, content_type=None, content_length=None, errors_stream=None, multithread=False, multiprocess=False, run_once=False, headers=None, data=None, environ_base=None, environ_overrides=None, mimetype=None, json=None, auth=None)`

    This class can be used to conveniently create a WSGI environment for testing purposes. It can be used to quickly create WSGI environments or request objects from arbitrary data.

    The signature of this class is also used in some other places as of Werkzeug 0.5 ([`create_environ()`](#werkzeug.test.create_environ "werkzeug.test.create_environ"), `Response.from_values()`, [`Client.open()`](#werkzeug.test.Client.open "werkzeug.test.Client.open")). Because of this most of the functionality is available through the constructor alone.

    Files and regular form data can be manipulated independently of each other with the [`form`](#werkzeug.test.EnvironBuilder.form "werkzeug.test.EnvironBuilder.form") and [`files`](#werkzeug.test.EnvironBuilder.files "werkzeug.test.EnvironBuilder.files") attributes, but are passed with the same argument to the constructor: `data`.

    `data` can be any of these values:

    - a `str` or `bytes` object: The object is converted into an [`input_stream`](#werkzeug.test.EnvironBuilder.input_stream "werkzeug.test.EnvironBuilder.input_stream"), the [`content_length`](#werkzeug.test.EnvironBuilder.content_length "werkzeug.test.EnvironBuilder.content_length") is set and you have to provide a [`content_type`](#werkzeug.test.EnvironBuilder.content_type "werkzeug.test.EnvironBuilder.content_type").

    - a `dict` or `MultiDict`: The keys have to be strings. The values have to be either any of the following objects, or a list of any of the following objects:

      - a `file`-like object: These are converted into `FileStorage` objects automatically.
      - a `tuple`: The `add_file()` method is called with the key and the unpacked `tuple` items as positional arguments.
      - a `str`: The string is set as form data for the associated key.

    - a file-like object: The object content is loaded in memory and then handled like a regular `str` or a `bytes`.

    Parameters:

    - **path** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – the path of the request. In the WSGI environment this will end up as `PATH_INFO`. If the `query_string` is not defined and there is a question mark in the `path` everything after it is used as query string.
    - **base_url** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – the base URL is a URL that is used to extract the WSGI URL scheme, host (server name + server port) and the script root (`SCRIPT_NAME`).
    - **query_string** (*t.Mapping\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*\]* *\|* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – an optional string or dict with URL parameters.
    - **method** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – the HTTP method to use, defaults to `GET`.
    - **input_stream** (*t.IO\[*[bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.11)")*\]* *\|* *None*) – an optional input stream. Do not specify this and `data`. As soon as an input stream is set you can’t modify [`args`](#werkzeug.test.EnvironBuilder.args "werkzeug.test.EnvironBuilder.args") and [`files`](#werkzeug.test.EnvironBuilder.files "werkzeug.test.EnvironBuilder.files") unless you set the [`input_stream`](#werkzeug.test.EnvironBuilder.input_stream "werkzeug.test.EnvironBuilder.input_stream") to `None` again.
    - **content_type** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – The content type for the request. As of 0.5 you don’t have to provide this when specifying files and form data via `data`.
    - **content_length** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* *None*) – The content length for the request. You don’t have to specify this when providing data via `data`.
    - **errors_stream** (*t.IO\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*\]* *\|* *None*) – an optional error stream that is used for `wsgi.errors`. Defaults to `stderr`.
    - **multithread** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – controls `wsgi.multithread`. Defaults to `False`.
    - **multiprocess** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – controls `wsgi.multiprocess`. Defaults to `False`.
    - **run_once** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – controls `wsgi.run_once`. Defaults to `False`.
    - **headers** ([Headers](../datastructures/index#werkzeug.datastructures.Headers "werkzeug.datastructures.Headers") *\|* *t.Iterable\[*[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*\]\]* *\|* *None*) – an optional list or `Headers` object of headers.
    - **data** (*None* *\|* *(t.IO\[*[bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.11)")*\]* *\|* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.11)") *\|* *t.Mapping\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* *t.Any\])*) – a string or dict of form data or a file-object. See explanation above.
    - **json** (*t.Mapping\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* *t.Any\]* *\|* *None*) – An object to be serialized and assigned to `data`. Defaults the content type to `"application/json"`. Serialized with the function assigned to [`json_dumps`](#werkzeug.test.EnvironBuilder.json_dumps "werkzeug.test.EnvironBuilder.json_dumps").
    - **environ_base** (*t.Mapping\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* *t.Any\]* *\|* *None*) – an optional dict of environment defaults.
    - **environ_overrides** (*t.Mapping\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* *t.Any\]* *\|* *None*) – an optional dict of environment overrides.
    - **auth** ([Authorization](../datastructures/index#werkzeug.datastructures.Authorization "werkzeug.datastructures.Authorization") *\|* [tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*\]* *\|* *None*) – An authorization object to use for the `Authorization` header value. A `(username, password)` tuple is a shortcut for `Basic` authorization.
    - **mimetype** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –

    Changed in version 3.0: The `charset` parameter was removed.

    Changelog

    Changed in version 2.1: `CONTENT_TYPE` and `CONTENT_LENGTH` are not duplicated as header keys in the environ.

    Changed in version 2.0: `REQUEST_URI` and `RAW_URI` is the full raw URI including the query string, not only the path.

    Changed in version 2.0: The default [`request_class`](#werkzeug.test.EnvironBuilder.request_class "werkzeug.test.EnvironBuilder.request_class") is `Request` instead of `BaseRequest`.

    New in version 2.0: Added the `auth` parameter.

    New in version 0.15: The `json` param and [`json_dumps()`](#werkzeug.test.EnvironBuilder.json_dumps "werkzeug.test.EnvironBuilder.json_dumps") method.

    New in version 0.15: The environ has keys `REQUEST_URI` and `RAW_URI` containing the path before percent-decoding. This is not part of the WSGI PEP, but many WSGI servers include it.

    Changed in version 0.6: `path` and `base_url` can now be unicode strings that are encoded with `iri_to_uri()`.
- name: EnvironBuilder.close()
  id: test/index#werkzeug.test.EnvironBuilder.close
  summary: Closes all files
  belongs_to: Testing WSGI Applications
  description: |-
    `close()`

    Closes all files. If you put real `file` objects into the [`files`](#werkzeug.test.EnvironBuilder.files "werkzeug.test.EnvironBuilder.files") dict you can call this method to automatically close them all in one go.

    Return type:

    None
- name: EnvironBuilder.from_environ()
  id: test/index#werkzeug.test.EnvironBuilder.from_environ
  summary: Turn an environ dict back into a builder
  belongs_to: Testing WSGI Applications
  description: |-
    `classmethod from_environ(environ, **kwargs)`

    Turn an environ dict back into a builder. Any extra kwargs override the args extracted from the environ.

    Changelog

    Changed in version 2.0: Path and query values are passed through the WSGI decoding dance to avoid double encoding.

    New in version 0.15.

    Parameters:

    - **environ** (*WSGIEnvironment*) –
    - **kwargs** (*t.Any*) –

    Return type:

    [EnvironBuilder](#werkzeug.test.EnvironBuilder "werkzeug.test.EnvironBuilder")

    `property base_url: str`

    The base URL is used to extract the URL scheme, host name, port, and root path.

    `property content_type: str | None`

    The content type for the request. Reflected from and to the `headers`. Do not set if you set [`files`](#werkzeug.test.EnvironBuilder.files "werkzeug.test.EnvironBuilder.files") or [`form`](#werkzeug.test.EnvironBuilder.form "werkzeug.test.EnvironBuilder.form") for auto detection.

    `property mimetype: str | None`

    The mimetype (content type without charset etc.)

    Changelog

    New in version 0.14.

    `property mimetype_params: Mapping[str, str]`

    The mimetype parameters as dict. For example if the content type is `text/html; charset=utf-8` the params would be `{'charset': 'utf-8'}`.

    Changelog

    New in version 0.14.

    `property content_length: int | None`

    The content length as integer. Reflected from and to the `headers`. Do not set if you set [`files`](#werkzeug.test.EnvironBuilder.files "werkzeug.test.EnvironBuilder.files") or [`form`](#werkzeug.test.EnvironBuilder.form "werkzeug.test.EnvironBuilder.form") for auto detection.

    `property form: MultiDict`

    A `MultiDict` of form values.

    `property files: FileMultiDict`

    A `FileMultiDict` of uploaded files. Use `add_file()` to add new files.

    `property input_stream: IO[bytes] | None`

    An optional input stream. This is mutually exclusive with setting [`form`](#werkzeug.test.EnvironBuilder.form "werkzeug.test.EnvironBuilder.form") and [`files`](#werkzeug.test.EnvironBuilder.files "werkzeug.test.EnvironBuilder.files"), setting it will clear those. Do not provide this if the method is not `POST` or another method that has a body.

    `property query_string: str`

    The query string. If you set this to a string [`args`](#werkzeug.test.EnvironBuilder.args "werkzeug.test.EnvironBuilder.args") will no longer be available.

    `property args: MultiDict`

    The URL arguments as `MultiDict`.

    `property server_name: str`

    The server name (read-only, use `host` to set)

    `property server_port: int`

    The server port as integer (read-only, use `host` to set)
- name: EnvironBuilder.get_environ()
  id: test/index#werkzeug.test.EnvironBuilder.get_environ
  summary: Return the built environ
  belongs_to: Testing WSGI Applications
  description: |-
    `get_environ()`

    Return the built environ.

    Changelog

    Changed in version 0.15: The content type and length headers are set based on input stream detection. Previously this only set the WSGI keys.

    Return type:

    WSGIEnvironment
- name: EnvironBuilder.get_request()
  id: test/index#werkzeug.test.EnvironBuilder.get_request
  summary: Returns a request with the data
  belongs_to: Testing WSGI Applications
  description: |-
    `get_request(cls=None)`

    Returns a request with the data. If the request class is not specified [`request_class`](#werkzeug.test.EnvironBuilder.request_class "werkzeug.test.EnvironBuilder.request_class") is used.

    Parameters:

    **cls** ([type](https://docs.python.org/3/library/functions.html#type "(in Python v3.11)")*\[*[werkzeug.wrappers.request.Request](../wrappers/index#werkzeug.wrappers.Request "werkzeug.wrappers.request.Request")*\]* *\|* *None*) – The request wrapper to use.

    Return type:

    [Request](../wrappers/index#werkzeug.wrappers.Request "werkzeug.wrappers.request.Request")
- name: EnvironBuilder.json_dumps()
  id: test/index#werkzeug.test.EnvironBuilder.json_dumps
  summary: The serialization function used when json is passed
  belongs_to: Testing WSGI Applications
  description: |-
    `static json_dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)`

    The serialization function used when `json` is passed.
- name: EnvironBuilder.request_class
  id: test/index#werkzeug.test.EnvironBuilder.request_class
  summary: The default request class used by get_request()
  belongs_to: Testing WSGI Applications
  description: |-
    `request_class`

    The default request class used by [`get_request()`](#werkzeug.test.EnvironBuilder.get_request "werkzeug.test.EnvironBuilder.get_request").

    alias of [`Request`](../wrappers/index#werkzeug.wrappers.Request "werkzeug.wrappers.request.Request")
- name: EnvironBuilder.server_protocol
  id: test/index#werkzeug.test.EnvironBuilder.server_protocol
  summary: the server protocol to use
  belongs_to: Testing WSGI Applications
  description: |-
    `server_protocol = 'HTTP/1.1'`

    the server protocol to use. defaults to HTTP/1.1
- name: EnvironBuilder.wsgi_version
  id: test/index#werkzeug.test.EnvironBuilder.wsgi_version
  summary: the wsgi version to use
  belongs_to: Testing WSGI Applications
  description: |-
    `wsgi_version = (1, 0)`

    the wsgi version to use. defaults to (1, 0)
- name: EnvironHeaders
  id: datastructures/index#werkzeug.datastructures.EnvironHeaders
  summary: Read only version of the headers from a WSGI environment
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.EnvironHeaders(environ)`

    Read only version of the headers from a WSGI environment. This provides the same interface as `Headers` and is constructed from a WSGI environment. From Werkzeug 0.3 onwards, the `KeyError` raised by this class is also a subclass of the `BadRequest` HTTP exception and will render a page for a `400 BAD REQUEST` if caught in a catch-all for HTTP exceptions.
- name: ETags
  id: datastructures/index#werkzeug.datastructures.ETags
  summary: A set that can be used to check if one etag is present in a collection of etags
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.ETags(strong_etags=None, weak_etags=None, star_tag=False)`

    A set that can be used to check if one etag is present in a collection of etags.
- name: ETags.as_set()
  id: datastructures/index#werkzeug.datastructures.ETags.as_set
  summary: Convert the ETags object into a python set
  belongs_to: Data Structures
  description: |-
    `as_set(include_weak=False)`

    Convert the `ETags` object into a python set. Per default all the weak etags are not part of this set.
- name: ETags.contains()
  id: datastructures/index#werkzeug.datastructures.ETags.contains
  summary: Check if an etag is part of the set ignoring weak tags
  belongs_to: Data Structures
  description: |-
    `contains(etag)`

    Check if an etag is part of the set ignoring weak tags. It is also possible to use the `in` operator.
- name: ETags.contains_raw()
  id: datastructures/index#werkzeug.datastructures.ETags.contains_raw
  summary: When passed a quoted tag it will check if this tag is part of the set
  belongs_to: Data Structures
  description: |-
    `contains_raw(etag)`

    When passed a quoted tag it will check if this tag is part of the set. If the tag is weak it is checked against weak and strong tags, otherwise strong only.
- name: ETags.contains_weak()
  id: datastructures/index#werkzeug.datastructures.ETags.contains_weak
  summary: Check if an etag is part of the set including weak and strong tags
  belongs_to: Data Structures
  description: |-
    `contains_weak(etag)`

    Check if an etag is part of the set including weak and strong tags.
- name: ETags.is_strong()
  id: datastructures/index#werkzeug.datastructures.ETags.is_strong
  summary: Check if an etag is strong
  belongs_to: Data Structures
  description: |-
    `is_strong(etag)`

    Check if an etag is strong.
- name: ETags.is_weak()
  id: datastructures/index#werkzeug.datastructures.ETags.is_weak
  summary: Check if an etag is weak
  belongs_to: Data Structures
  description: |-
    `is_weak(etag)`

    Check if an etag is weak.
- name: ETags.to_header()
  id: datastructures/index#werkzeug.datastructures.ETags.to_header
  summary: Convert the etags set into a HTTP header string
  belongs_to: Data Structures
  description: |-
    `to_header()`

    Convert the etags set into a HTTP header string.
- name: eventlet
  id: deployment/eventlet/index
  summary: Prefer using Gunicorn with eventlet workers rather than using eventlet directly
  description: "# eventlet\n\nPrefer using [Gunicorn](../gunicorn/index) with eventlet workers rather than using [eventlet](https://eventlet.net/) directly. Gunicorn provides a much more configurable and production-tested server.\n\n[eventlet](https://eventlet.net/) allows writing asynchronous, coroutine-based code that looks like standard synchronous Python. It uses [greenlet](https://greenlet.readthedocs.io/en/latest/) to enable task switching without writing `async/await` or using `asyncio`.\n\n[gevent](../gevent/index) is another library that does the same thing. Certain dependencies you have, or other considerations, may affect which of the two you choose to use.\n\neventlet provides a WSGI server that can handle many connections at once instead of one per worker process. You must actually use eventlet in your own code to see any benefit to using the server.\n\n## Installing\n\nWhen using eventlet, greenlet\\>=1.0 is required, otherwise context locals such as `request` will not work as expected. When using PyPy, PyPy\\>=7.3.7 is required.\n\nCreate a virtualenv, install your application, then install `eventlet`.\n\n``` text\n$ cd hello-app\n$ python -m venv venv\n$ . venv/bin/activate\n$ pip install .  # install your application\n$ pip install eventlet\n```\n\n## Running\n\nTo use eventlet to serve your application, write a script that imports its `wsgi.server`, as well as your app or app factory.\n\n`wsgi.py`\n\n``` python\nimport eventlet\nfrom eventlet import wsgi\nfrom hello import create_app\n\napp = create_app()\nwsgi.server(eventlet.listen((\"127.0.0.1\", 8000), app)\n```\n\n``` text\n$ python wsgi.py\n(x) wsgi starting up on http://127.0.0.1:8000\n```\n\n## Binding Externally\n\neventlet should not be run as root because it would cause your application code to run as root, which is not secure. However, this means it will not be possible to bind to port 80 or 443. Instead, a reverse proxy such as [nginx](../nginx/index) or [Apache httpd](../apache-httpd/index) should be used in front of eventlet.\n\nYou can bind to all external IPs on a non-privileged port by using `0.0.0.0` in the server arguments shown in the previous section. Don’t do this when using a reverse proxy setup, otherwise it will be possible to bypass the proxy.\n\n`0.0.0.0` is not a valid address to navigate to, you’d use a specific IP address in your browser.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/deployment/eventlet/](https://werkzeug.palletsprojects.com/en/3.0.x/deployment/eventlet/)"
- name: FileMultiDict
  id: datastructures/index#werkzeug.datastructures.FileMultiDict
  summary: A special MultiDict that has convenience methods to add files to it
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.FileMultiDict(mapping=None)`

    A special [`MultiDict`](#werkzeug.datastructures.MultiDict "werkzeug.datastructures.MultiDict") that has convenience methods to add files to it. This is used for `EnvironBuilder` and generally useful for unittesting.

    Changelog

    New in version 0.5.
- name: FileMultiDict.add_file()
  id: datastructures/index#werkzeug.datastructures.FileMultiDict.add_file
  summary: Adds a new file to the dict
  belongs_to: Data Structures
  description: |-
    `add_file(name, file, filename=None, content_type=None)`

    Adds a new file to the dict. `file` can be a file name or a `file`-like or a [`FileStorage`](#werkzeug.datastructures.FileStorage "werkzeug.datastructures.FileStorage") object.

    Parameters:

    - **name** – the name of the field.
    - **file** – a filename or `file`-like object
    - **filename** – an optional filename
    - **content_type** – an optional content type

    ## HTTP Related
- name: FileStorage
  id: datastructures/index#werkzeug.datastructures.FileStorage
  summary: The FileStorage class is a thin wrapper over incoming files
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.FileStorage(stream=None, filename=None, name=None, content_type=None, content_length=None, headers=None)`

    The [`FileStorage`](#werkzeug.datastructures.FileStorage "werkzeug.datastructures.FileStorage") class is a thin wrapper over incoming files. It is used by the request object to represent uploaded files. All the attributes of the wrapper stream are proxied by the file storage so it’s possible to do `storage.read()` instead of the long form `storage.stream.read()`.
- name: FileStorage.close()
  id: datastructures/index#werkzeug.datastructures.FileStorage.close
  summary: Close the underlying file if possible
  belongs_to: Data Structures
  description: |-
    `close()`

    Close the underlying file if possible.

    `property content_length`

    The content-length sent in the header. Usually not available

    `property content_type`

    The content-type sent in the header. Usually not available

    `property mimetype`

    Like [`content_type`](#werkzeug.datastructures.FileStorage.content_type "werkzeug.datastructures.FileStorage.content_type"), but without parameters (eg, without charset, type etc.) and always lowercase. For example if the content type is `text/HTML; charset=utf-8` the mimetype would be `'text/html'`.

    Changelog

    New in version 0.7.

    `property mimetype_params`

    The mimetype parameters as dict. For example if the content type is `text/html; charset=utf-8` the params would be `{'charset': 'utf-8'}`.

    Changelog

    New in version 0.7.
- name: FileStorage.filename
  id: datastructures/index#werkzeug.datastructures.FileStorage.filename
  summary: The filename of the file on the client
  belongs_to: Data Structures
  description: |-
    `filename`

    The filename of the file on the client. Can be a `str`, or an instance of `os.PathLike`.
- name: FileStorage.headers
  id: datastructures/index#werkzeug.datastructures.FileStorage.headers
  summary: The multipart headers as Headers object
  belongs_to: Data Structures
  description: |-
    `headers`

    The multipart headers as [`Headers`](#werkzeug.datastructures.Headers "werkzeug.datastructures.Headers") object. This usually contains irrelevant information but in combination with custom multipart requests the raw headers might be interesting.

    Changelog

    New in version 0.6.
- name: FileStorage.name
  id: datastructures/index#werkzeug.datastructures.FileStorage.name
  summary: The name of the form field
  belongs_to: Data Structures
  description: |-
    `name`

    The name of the form field.
- name: FileStorage.save()
  id: datastructures/index#werkzeug.datastructures.FileStorage.save
  summary: Save the file to a destination path or file object
  belongs_to: Data Structures
  description: "`save(dst, buffer_size=16384)`\n\nSave the file to a destination path or file object. If the destination is a file object you have to close it yourself after the call. The buffer size is the number of bytes held in memory during the copy process. It defaults to 16KB.\n\nFor secure file saving also have a look at `secure_filename()`.\n\nParameters:\n\n- **dst** – a filename, [`os.PathLike`](https://docs.python.org/3/library/os.html#os.PathLike \"(in Python v3.11)\"), or open file object to write to.\n- **buffer_size** – Passed as the `length` parameter of [`shutil.copyfileobj()`](https://docs.python.org/3/library/shutil.html#shutil.copyfileobj \"(in Python v3.11)\").\n\nChangelog\n\nChanged in version 1.0: Supports [`pathlib`](https://docs.python.org/3/library/pathlib.html#module-pathlib \"(in Python v3.11)\").\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/datastructures/](https://werkzeug.palletsprojects.com/en/3.0.x/datastructures/)"
- name: FileStorage.stream
  id: datastructures/index#werkzeug.datastructures.FileStorage.stream
  summary: The input stream for the uploaded file
  belongs_to: Data Structures
  description: |-
    `stream`

    The input stream for the uploaded file. This usually points to an open temporary file.
- name: FileWrapper
  id: wsgi/index#werkzeug.wsgi.FileWrapper
  summary: This class can be used to convert a file-like object into an iterable
  belongs_to: WSGI Helpers
  description: |-
    `class werkzeug.wsgi.FileWrapper(file, buffer_size=8192)`

    This class can be used to convert a `file`-like object into an iterable. It yields `buffer_size` blocks until the file is fully read.

    You should not use this class directly but rather use the [`wrap_file()`](#werkzeug.wsgi.wrap_file "werkzeug.wsgi.wrap_file") function that uses the WSGI server’s file wrapper support if it’s available.

    Changelog

    New in version 0.5.

    If you’re using this object together with a `Response` you have to use the `direct_passthrough` mode.

    Parameters:

    - **file** (*t.IO\[*[bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.11)")*\]*) – a `file`-like object with a `read()` method.
    - **buffer_size** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")) – number of bytes for one iteration.
- name: find_modules()
  id: utils/index#werkzeug.utils.find_modules
  summary: Finds all the modules below a package
  belongs_to: Utilities
  description: |-
    `werkzeug.utils.find_modules(import_path, include_packages=False, recursive=False)`

    Finds all the modules below a package. This can be useful to automatically import all views / controllers so that their metaclasses / function decorators have a chance to register themselves on the application.

    Packages are not returned unless `include_packages` is `True`. This can also recursively list modules but in that case it will import all the packages to get the correct load path of that module.

    Parameters:

    - **import_path** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – the dotted name for the package to find child modules.
    - **include_packages** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – set to `True` if packages should be returned, too.
    - **recursive** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – set to `True` if recursion should happen.

    Returns:

    generator

    Return type:

    [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator "(in Python v3.11)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")\]
- name: FloatConverter
  id: routing/index#werkzeug.routing.FloatConverter
  summary: By default it only accepts unsigned, positive values
  belongs_to: URL Routing
  description: |-
    `class werkzeug.routing.FloatConverter(map, min=None, max=None, signed=False)`

    This converter only accepts floating point values:

    ``` python
    Rule("/probability/<float:probability>")
    ```

    By default it only accepts unsigned, positive values. The `signed` parameter will enable signed, negative values.

    ``` python
    Rule("/offset/<float(signed=True):offset>")
    ```

    Parameters:

    - **map** ([Map](#werkzeug.routing.Map "werkzeug.routing.Map")) – The [`Map`](#werkzeug.routing.Map "werkzeug.routing.Map").
    - **min** ([float](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)") *\|* *None*) – The minimal value.
    - **max** ([float](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)") *\|* *None*) – The maximal value.
    - **signed** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Allow signed (negative) values.

    Changelog

    New in version 0.15: The `signed` parameter.
- name: FormDataParser
  id: http/index#werkzeug.formparser.FormDataParser
  summary: This class implements parsing of form data for Werkzeug
  belongs_to: HTTP Utilities
  description: |-
    `class werkzeug.formparser.FormDataParser(stream_factory=None, max_form_memory_size=None, max_content_length=None, cls=None, silent=True, *, max_form_parts=None)`

    This class implements parsing of form data for Werkzeug. By itself it can parse multipart and url encoded form data. It can be subclassed and extended but for most mimetypes it is a better idea to use the untouched stream and expose it as separate attributes on a request object.

    Parameters:

    - **stream_factory** (*TStreamFactory* *\|* *None*) – An optional callable that returns a new read and writeable file descriptor. This callable works the same as `Response._get_file_stream()`.
    - **max_form_memory_size** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* *None*) – the maximum number of bytes to be accepted for in-memory stored form data. If the data exceeds the value specified an `RequestEntityTooLarge` exception is raised.
    - **max_content_length** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* *None*) – If this is provided and the transmitted data is longer than this value an `RequestEntityTooLarge` exception is raised.
    - **cls** ([type](https://docs.python.org/3/library/functions.html#type "(in Python v3.11)")*\[*[MultiDict](../datastructures/index#werkzeug.datastructures.MultiDict "werkzeug.datastructures.MultiDict")*\]* *\|* *None*) – an optional dict class to use. If this is not specified or `None` the default `MultiDict` is used.
    - **silent** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – If set to False parsing errors will not be caught.
    - **max_form_parts** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* *None*) – The maximum number of multipart parts to be parsed. If this is exceeded, a `RequestEntityTooLarge` exception is raised.

    Changed in version 3.0: The `charset` and `errors` parameters were removed.

    Changed in version 3.0: The `parse_functions` attribute and `get_parse_func` methods were removed.

    Changelog

    Changed in version 2.2.3: Added the `max_form_parts` parameter.

    New in version 0.8.
- name: generate_etag()
  id: http/index#werkzeug.http.generate_etag
  summary: Generate an etag for some data
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.generate_etag(data)`

    Generate an etag for some data.

    Changelog

    Changed in version 2.0: Use SHA-1. MD5 may not be available in some environments.

    Parameters:

    **data** ([bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.11)")) –

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
- name: generate_password_hash()
  id: utils/index#werkzeug.security.generate_password_hash
  summary: Securely hash a password for storage
  belongs_to: Utilities
  description: |-
    `werkzeug.security.generate_password_hash(password, method='scrypt', salt_length=16)`

    Securely hash a password for storage. A password can be compared to a stored hash using [`check_password_hash()`](#werkzeug.security.check_password_hash "werkzeug.security.check_password_hash").

    The following methods are supported:

    - `scrypt`, the default. The parameters are `n`, `r`, and `p`, the default is `scrypt:32768:8:1`. See [`hashlib.scrypt()`](https://docs.python.org/3/library/hashlib.html#hashlib.scrypt "(in Python v3.11)").
    - `pbkdf2`, less secure. The parameters are `hash_method` and `iterations`, the default is `pbkdf2:sha256:600000`. See [`hashlib.pbkdf2_hmac()`](https://docs.python.org/3/library/hashlib.html#hashlib.pbkdf2_hmac "(in Python v3.11)").

    Default parameters may be updated to reflect current guidelines, and methods may be deprecated and removed if they are no longer considered secure. To migrate old hashes, you may generate a new hash when checking an old hash, or you may contact users with a link to reset their password.

    Parameters:

    - **password** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The plaintext password.
    - **method** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The key derivation function and parameters.
    - **salt_length** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")) – The number of characters to generate for the salt.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")

    Changelog

    Changed in version 2.3: Scrypt support was added.

    Changed in version 2.3: The default iterations for pbkdf2 was increased to 600,000.

    Changed in version 2.3: All plain hashes are deprecated and will not be supported in Werkzeug 3.0.
- name: get_content_length()
  id: wsgi/index#werkzeug.wsgi.get_content_length
  summary: Return the Content-Length header value as an int
  belongs_to: WSGI Helpers
  description: |-
    `werkzeug.wsgi.get_content_length(environ)`

    Return the `Content-Length` header value as an int. If the header is not given or the `Transfer-Encoding` header is `chunked`, `None` is returned to indicate a streaming request. If the value is not an integer, or negative, 0 is returned.

    Parameters:

    **environ** (*WSGIEnvironment*) – The WSGI environ to get the content length from.

    Return type:

    [int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") \| None

    Changelog

    New in version 0.9.
- name: get_current_url()
  id: wsgi/index#werkzeug.wsgi.get_current_url
  summary: Recreate the URL for a request from the parts in a WSGI environment
  belongs_to: WSGI Helpers
  description: |-
    `werkzeug.wsgi.get_current_url(environ, root_only=False, strip_querystring=False, host_only=False, trusted_hosts=None)`

    Recreate the URL for a request from the parts in a WSGI environment.

    The URL is an IRI, not a URI, so it may contain Unicode characters. Use [`iri_to_uri()`](../urls/index#werkzeug.urls.iri_to_uri "werkzeug.urls.iri_to_uri") to convert it to ASCII.

    Parameters:

    - **environ** (*WSGIEnvironment*) – The WSGI environment to get the URL parts from.
    - **root_only** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Only build the root path, don’t include the remaining path or query string.
    - **strip_querystring** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Don’t include the query string.
    - **host_only** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Only build the scheme and host.
    - **trusted_hosts** (*t.Iterable\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*\]* *\|* *None*) – A list of trusted host names to validate the host against.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
- name: get_host()
  id: wsgi/index#werkzeug.wsgi.get_host
  summary: Return the host for the given WSGI environment
  belongs_to: WSGI Helpers
  description: |-
    `werkzeug.wsgi.get_host(environ, trusted_hosts=None)`

    Return the host for the given WSGI environment.

    The `Host` header is preferred, then `SERVER_NAME` if it’s not set. The returned host will only contain the port if it is different than the standard port for the protocol.

    Optionally, verify that the host is trusted using [`host_is_trusted()`](#werkzeug.wsgi.host_is_trusted "werkzeug.wsgi.host_is_trusted") and raise a [`SecurityError`](../exceptions/index#werkzeug.exceptions.SecurityError "werkzeug.exceptions.SecurityError") if it is not.

    Parameters:

    - **environ** (*WSGIEnvironment*) – A WSGI environment dict.
    - **trusted_hosts** (*t.Iterable\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*\]* *\|* *None*) – A list of trusted host names.

    Returns:

    Host, with port if necessary.

    Raises:

    [**SecurityError**](../exceptions/index#werkzeug.exceptions.SecurityError "werkzeug.exceptions.SecurityError") – If the host is not trusted.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
- name: get_input_stream()
  id: wsgi/index#werkzeug.wsgi.get_input_stream
  summary: Return the WSGI input stream, wrapped so that it may be read safely without going past the Content-Length header value or max_content_length
  belongs_to: WSGI Helpers
  description: |-
    `werkzeug.wsgi.get_input_stream(environ, safe_fallback=True, max_content_length=None)`

    Return the WSGI input stream, wrapped so that it may be read safely without going past the `Content-Length` header value or `max_content_length`.

    If `Content-Length` exceeds `max_content_length`, a `` RequestEntityTooLarge` `` `413 Content Too Large` error is raised.

    If the WSGI server sets `environ["wsgi.input_terminated"]`, it indicates that the server handles terminating the stream, so it is safe to read directly. For example, a server that knows how to handle chunked requests safely would set this.

    If `max_content_length` is set, it can be enforced on streams if `wsgi.input_terminated` is set. Otherwise, an empty stream is returned unless the user explicitly disables this safe fallback.

    If the limit is reached before the underlying stream is exhausted (such as a file that is too large, or an infinite stream), the remaining contents of the stream cannot be read safely. Depending on how the server handles this, clients may show a “connection reset” failure instead of seeing the 413 response.

    Parameters:

    - **environ** (*WSGIEnvironment*) – The WSGI environ containing the stream.
    - **safe_fallback** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Return an empty stream when `Content-Length` is not set. Disabling this allows infinite streams, which can be a denial-of-service risk.
    - **max_content_length** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* *None*) – The maximum length that content-length or streaming requests may not exceed.

    Return type:

    t.IO\[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.11)")\]

    Changelog

    Changed in version 2.3.2: `max_content_length` is only applied to streaming requests if the server sets `wsgi.input_terminated`.

    Changed in version 2.3: Check `max_content_length` and raise an error if it is exceeded.

    New in version 0.9.
- name: gevent
  id: deployment/gevent/index
  summary: Prefer using Gunicorn or uWSGI with gevent workers rather than using gevent directly
  description: "# gevent\n\nPrefer using [Gunicorn](../gunicorn/index) or [uWSGI](../uwsgi/index) with gevent workers rather than using [gevent](https://www.gevent.org/) directly. Gunicorn and uWSGI provide much more configurable and production-tested servers.\n\n[gevent](https://www.gevent.org/) allows writing asynchronous, coroutine-based code that looks like standard synchronous Python. It uses [greenlet](https://greenlet.readthedocs.io/en/latest/) to enable task switching without writing `async/await` or using `asyncio`.\n\n[eventlet](../eventlet/index) is another library that does the same thing. Certain dependencies you have, or other considerations, may affect which of the two you choose to use.\n\ngevent provides a WSGI server that can handle many connections at once instead of one per worker process. You must actually use gevent in your own code to see any benefit to using the server.\n\n## Installing\n\nWhen using gevent, greenlet\\>=1.0 is required, otherwise context locals such as `request` will not work as expected. When using PyPy, PyPy\\>=7.3.7 is required.\n\nCreate a virtualenv, install your application, then install `gevent`.\n\n``` text\n$ cd hello-app\n$ python -m venv venv\n$ . venv/bin/activate\n$ pip install .  # install your application\n$ pip install gevent\n```\n\n## Running\n\nTo use gevent to serve your application, write a script that imports its `WSGIServer`, as well as your app or app factory.\n\n`wsgi.py`\n\n``` python\nfrom gevent.pywsgi import WSGIServer\nfrom hello import create_app\n\napp = create_app()\nhttp_server = WSGIServer((\"127.0.0.1\", 8000), app)\nhttp_server.serve_forever()\n```\n\n``` text\n$ python wsgi.py\n```\n\nNo output is shown when the server starts.\n\n## Binding Externally\n\ngevent should not be run as root because it would cause your application code to run as root, which is not secure. However, this means it will not be possible to bind to port 80 or 443. Instead, a reverse proxy such as [nginx](../nginx/index) or [Apache httpd](../apache-httpd/index) should be used in front of gevent.\n\nYou can bind to all external IPs on a non-privileged port by using `0.0.0.0` in the server arguments shown in the previous section. Don’t do this when using a reverse proxy setup, otherwise it will be possible to bypass the proxy.\n\n`0.0.0.0` is not a valid address to navigate to, you’d use a specific IP address in your browser.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/deployment/gevent/](https://werkzeug.palletsprojects.com/en/3.0.x/deployment/gevent/)"
- name: Gunicorn
  id: deployment/gunicorn/index
  summary: Gunicorn is a pure Python WSGI server with simple configuration and multiple worker implementations for performance tuning
  description: "# Gunicorn\n\n[Gunicorn](https://gunicorn.org/) is a pure Python WSGI server with simple configuration and multiple worker implementations for performance tuning.\n\n- It tends to integrate easily with hosting platforms.\n- It does not support Windows (but does run on WSL).\n- It is easy to install as it does not require additional dependencies or compilation.\n- It has built-in async worker support using gevent or eventlet.\n\nThis page outlines the basics of running Gunicorn. Be sure to read its [documentation](https://docs.gunicorn.org/) and use `gunicorn --help` to understand what features are available.\n\n## Installing\n\nGunicorn is easy to install, as it does not require external dependencies or compilation. It runs on Windows only under WSL.\n\nCreate a virtualenv, install your application, then install `gunicorn`.\n\n``` text\n$ cd hello-app\n$ python -m venv venv\n$ . venv/bin/activate\n$ pip install .  # install your application\n$ pip install gunicorn\n```\n\n## Running\n\nThe only required argument to Gunicorn tells it how to load your application. The syntax is `{module_import}:{app_variable}`. `module_import` is the dotted import name to the module with your application. `app_variable` is the variable with the application. It can also be a function call (with any arguments) if you’re using the app factory pattern.\n\n``` text\n# equivalent to 'from hello import app'\n$ gunicorn -w 4 'hello:app'\n\n# equivalent to 'from hello import create_app; create_app()'\n$ gunicorn -w 4 'hello:create_app()'\n\nStarting gunicorn 20.1.0\nListening at: http://127.0.0.1:8000 (x)\nUsing worker: sync\nBooting worker with pid: x\nBooting worker with pid: x\nBooting worker with pid: x\nBooting worker with pid: x\n```\n\nThe `-w` option specifies the number of processes to run; a starting value could be `CPU * 2`. The default is only 1 worker, which is probably not what you want for the default worker type.\n\nLogs for each request aren’t shown by default, only worker info and errors are shown. To show access logs on stdout, use the `--access-logfile=-` option.\n\n## Binding Externally\n\nGunicorn should not be run as root because it would cause your application code to run as root, which is not secure. However, this means it will not be possible to bind to port 80 or 443. Instead, a reverse proxy such as [nginx](../nginx/index) or [Apache httpd](../apache-httpd/index) should be used in front of Gunicorn.\n\nYou can bind to all external IPs on a non-privileged port using the `-b 0.0.0.0` option. Don’t do this when using a reverse proxy setup, otherwise it will be possible to bypass the proxy.\n\n``` text\n$ gunicorn -w 4 -b 0.0.0.0 'hello:create_app()'\nListening at: http://0.0.0.0:8000 (x)\n```\n\n`0.0.0.0` is not a valid address to navigate to, you’d use a specific IP address in your browser.\n\n## Async with gevent or eventlet\n\nThe default sync worker is appropriate for many use cases. If you need asynchronous support, Gunicorn provides workers using either [gevent](https://www.gevent.org/) or [eventlet](https://eventlet.net/). This is not the same as Python’s `async/await`, or the ASGI server spec. You must actually use gevent/eventlet in your own code to see any benefit to using the workers.\n\nWhen using either gevent or eventlet, greenlet\\>=1.0 is required, otherwise context locals such as `request` will not work as expected. When using PyPy, PyPy\\>=7.3.7 is required.\n\nTo use gevent:\n\n``` text\n$ gunicorn -k gevent 'hello:create_app()'\nStarting gunicorn 20.1.0\nListening at: http://127.0.0.1:8000 (x)\nUsing worker: gevent\nBooting worker with pid: x\n```\n\nTo use eventlet:\n\n``` text\n$ gunicorn -k eventlet 'hello:create_app()'\nStarting gunicorn 20.1.0\nListening at: http://127.0.0.1:8000 (x)\nUsing worker: eventlet\nBooting worker with pid: x\n```\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/deployment/gunicorn/](https://werkzeug.palletsprojects.com/en/3.0.x/deployment/gunicorn/)"
- name: header_property
  id: utils/index#werkzeug.utils.header_property
  summary: Like environ_property but for headers
  belongs_to: Utilities
  description: |-
    `class werkzeug.utils.header_property(name, default=None, load_func=None, dump_func=None, read_only=None, doc=None)`

    Like `environ_property` but for headers.

    Parameters:

    - **name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **default** (*\_TAccessorValue* *\|* *None*) –
    - **load_func** (*t.Callable\[\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*\],* *\_TAccessorValue\]* *\|* *None*) –
    - **dump_func** (*t.Callable\[\[\_TAccessorValue\],* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*\]* *\|* *None*) –
    - **read_only** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)") *\|* *None*) –
    - **doc** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
- name: Headers
  id: datastructures/index#werkzeug.datastructures.Headers
  summary: An object that stores some headers
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.Headers([defaults])`

    An object that stores some headers. It has a dict-like interface, but is ordered, can store the same key multiple times, and iterating yields `(key, value)` pairs instead of only keys.

    This data structure is useful if you want a nicer way to handle WSGI headers which are stored as tuples in a list.

    From Werkzeug 0.3 onwards, the [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "(in Python v3.11)") raised by this class is also a subclass of the `BadRequest` HTTP exception and will render a page for a `400 BAD REQUEST` if caught in a catch-all for HTTP exceptions.

    Headers is mostly compatible with the Python [`wsgiref.headers.Headers`](https://docs.python.org/3/library/wsgiref.html#wsgiref.headers.Headers "(in Python v3.11)") class, with the exception of `__getitem__`. [`wsgiref`](https://docs.python.org/3/library/wsgiref.html#module-wsgiref "(in Python v3.11)") will return `None` for `headers['missing']`, whereas [`Headers`](#werkzeug.datastructures.Headers "werkzeug.datastructures.Headers") will raise a [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "(in Python v3.11)").

    To create a new `Headers` object, pass it a list, dict, or other `Headers` object with default values. These values are validated the same way values added later are.

    Parameters:

    **defaults** – The list of default values for the [`Headers`](#werkzeug.datastructures.Headers "werkzeug.datastructures.Headers").

    Changelog

    Changed in version 2.1.0: Default values are validated the same as values added later.

    Changed in version 0.9: This data structure now stores unicode values similar to how the multi dicts do it. The main difference is that bytes can be set as well which will automatically be latin1 decoded.

    Changed in version 0.9: The `linked()` function was removed without replacement as it was an API that does not support the changes to the encoding model.
- name: Headers.add()
  id: datastructures/index#werkzeug.datastructures.Headers.add
  summary: Add a new header tuple to the list
  belongs_to: Data Structures
  description: |-
    `add(_key, _value, **kw)`

    Add a new header tuple to the list.

    Keyword arguments can specify additional parameters for the header value, with underscores converted to dashes:

    ``` python
    >>> d = Headers()
    >>> d.add('Content-Type', 'text/plain')
    >>> d.add('Content-Disposition', 'attachment', filename='foo.png')
    ```

    The keyword argument dumping uses `dump_options_header()` behind the scenes.

    Changelog

    New in version 0.4.1: keyword arguments were added for [`wsgiref`](https://docs.python.org/3/library/wsgiref.html#module-wsgiref "(in Python v3.11)") compatibility.
- name: Headers.add_header()
  id: datastructures/index#werkzeug.datastructures.Headers.add_header
  summary: Add a new header tuple to the list
  belongs_to: Data Structures
  description: |-
    `add_header(_key, _value, **_kw)`

    Add a new header tuple to the list.

    An alias for [`add()`](#werkzeug.datastructures.Headers.add "werkzeug.datastructures.Headers.add") for compatibility with the [`wsgiref`](https://docs.python.org/3/library/wsgiref.html#module-wsgiref "(in Python v3.11)") [`add_header()`](https://docs.python.org/3/library/wsgiref.html#wsgiref.headers.Headers.add_header "(in Python v3.11)") method.
- name: Headers.clear()
  id: datastructures/index#werkzeug.datastructures.Headers.clear
  summary: Clears all headers
  belongs_to: Data Structures
  description: |-
    `clear()`

    Clears all headers.
- name: Headers.extend()
  id: datastructures/index#werkzeug.datastructures.Headers.extend
  summary: Extend headers in this object with items from another object containing header items as well as keyword arguments
  belongs_to: Data Structures
  description: |-
    `extend(*args, **kwargs)`

    Extend headers in this object with items from another object containing header items as well as keyword arguments.

    To replace existing keys instead of extending, use [`update()`](#werkzeug.datastructures.Headers.update "werkzeug.datastructures.Headers.update") instead.

    If provided, the first argument can be another [`Headers`](#werkzeug.datastructures.Headers "werkzeug.datastructures.Headers") object, a [`MultiDict`](#werkzeug.datastructures.MultiDict "werkzeug.datastructures.MultiDict"), [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)"), or iterable of pairs.

    Changelog

    Changed in version 1.0: Support [`MultiDict`](#werkzeug.datastructures.MultiDict "werkzeug.datastructures.MultiDict"). Allow passing `kwargs`.
- name: Headers.get()
  id: datastructures/index#werkzeug.datastructures.Headers.get
  summary: Return the default value if the requested data doesn’t exist
  belongs_to: Data Structures
  description: |-
    `get(key, default=None, type=None)`

    Return the default value if the requested data doesn’t exist. If `type` is provided and is a callable it should convert the value, return it or raise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "(in Python v3.11)") if that is not possible. In this case the function will return the default as if the value was not found:

    ``` python
    >>> d = Headers([('Content-Length', '42')])
    >>> d.get('Content-Length', type=int)
    42
    ```

    Parameters:

    - **key** – The key to be looked up.
    - **default** – The default value to be returned if the key can’t be looked up. If not further specified `None` is returned.
    - **type** – A callable that is used to cast the value in the [`Headers`](#werkzeug.datastructures.Headers "werkzeug.datastructures.Headers"). If a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "(in Python v3.11)") is raised by this callable the default value is returned.

    Changed in version 3.0: The `as_bytes` parameter was removed.

    Changelog

    Changed in version 0.9: The `as_bytes` parameter was added.
- name: Headers.get_all()
  id: datastructures/index#werkzeug.datastructures.Headers.get_all
  summary: Return a list of all the values for the named field
  belongs_to: Data Structures
  description: |-
    `get_all(name)`

    Return a list of all the values for the named field.

    This method is compatible with the [`wsgiref`](https://docs.python.org/3/library/wsgiref.html#module-wsgiref "(in Python v3.11)") [`get_all()`](https://docs.python.org/3/library/wsgiref.html#wsgiref.headers.Headers.get_all "(in Python v3.11)") method.
- name: Headers.getlist()
  id: datastructures/index#werkzeug.datastructures.Headers.getlist
  summary: Return the list of items for a given key
  belongs_to: Data Structures
  description: |-
    `getlist(key, type=None)`

    Return the list of items for a given key. If that key is not in the [`Headers`](#werkzeug.datastructures.Headers "werkzeug.datastructures.Headers"), the return value will be an empty list. Just like [`get()`](#werkzeug.datastructures.Headers.get "werkzeug.datastructures.Headers.get"), [`getlist()`](#werkzeug.datastructures.Headers.getlist "werkzeug.datastructures.Headers.getlist") accepts a `type` parameter. All items will be converted with the callable defined there.

    Parameters:

    - **key** – The key to be looked up.
    - **type** – A callable that is used to cast the value in the [`Headers`](#werkzeug.datastructures.Headers "werkzeug.datastructures.Headers"). If a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "(in Python v3.11)") is raised by this callable the value will be removed from the list.

    Returns:

    a [`list`](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)") of all the values for the key.

    Changed in version 3.0: The `as_bytes` parameter was removed.

    Changelog

    Changed in version 0.9: The `as_bytes` parameter was added.
- name: Headers.pop()
  id: datastructures/index#werkzeug.datastructures.Headers.pop
  summary: Removes and returns a key or index
  belongs_to: Data Structures
  description: |-
    `pop(key=None, default=no value)`

    Removes and returns a key or index.

    Parameters:

    **key** – The key to be popped. If this is an integer the item at that position is removed, if it’s a string the value for that key is. If the key is omitted or `None` the last item is removed.

    Returns:

    an item.
- name: Headers.popitem()
  id: datastructures/index#werkzeug.datastructures.Headers.popitem
  summary: Removes a key or index and returns a (key, value) item
  belongs_to: Data Structures
  description: |-
    `popitem()`

    Removes a key or index and returns a (key, value) item.
- name: Headers.remove()
  id: datastructures/index#werkzeug.datastructures.Headers.remove
  summary: Remove a key
  belongs_to: Data Structures
  description: |-
    `remove(key)`

    Remove a key.

    Parameters:

    **key** – The key to be removed.
- name: Headers.set()
  id: datastructures/index#werkzeug.datastructures.Headers.set
  summary: Remove all header tuples for key and add a new one
  belongs_to: Data Structures
  description: |-
    `set(_key, _value, **kw)`

    Remove all header tuples for `key` and add a new one. The newly added key either appears at the end of the list if there was no entry or replaces the first one.

    Keyword arguments can specify additional parameters for the header value, with underscores converted to dashes. See [`add()`](#werkzeug.datastructures.Headers.add "werkzeug.datastructures.Headers.add") for more information.

    Changelog

    Changed in version 0.6.1: [`set()`](#werkzeug.datastructures.Headers.set "werkzeug.datastructures.Headers.set") now accepts the same arguments as [`add()`](#werkzeug.datastructures.Headers.add "werkzeug.datastructures.Headers.add").

    Parameters:

    - **key** – The key to be inserted.
    - **value** – The value to be inserted.
- name: Headers.setdefault()
  id: datastructures/index#werkzeug.datastructures.Headers.setdefault
  summary: Return the first value for the key if it is in the headers, otherwise set the header to the value given by default and return that
  belongs_to: Data Structures
  description: |-
    `setdefault(key, default)`

    Return the first value for the key if it is in the headers, otherwise set the header to the value given by `default` and return that.

    Parameters:

    - **key** – The header key to get.
    - **default** – The value to set for the key if it is not in the headers.
- name: Headers.setlist()
  id: datastructures/index#werkzeug.datastructures.Headers.setlist
  summary: Remove any existing values for a header and add new ones
  belongs_to: Data Structures
  description: |-
    `setlist(key, values)`

    Remove any existing values for a header and add new ones.

    Parameters:

    - **key** – The header key to set.
    - **values** – An iterable of values to set for the key.

    Changelog

    New in version 1.0.
- name: Headers.setlistdefault()
  id: datastructures/index#werkzeug.datastructures.Headers.setlistdefault
  summary: Return the list of values for the key if it is in the headers, otherwise set the header to the list of values given by default and return that
  belongs_to: Data Structures
  description: |-
    `setlistdefault(key, default)`

    Return the list of values for the key if it is in the headers, otherwise set the header to the list of values given by `default` and return that.

    Unlike [`MultiDict.setlistdefault()`](#werkzeug.datastructures.MultiDict.setlistdefault "werkzeug.datastructures.MultiDict.setlistdefault"), modifying the returned list will not affect the headers.

    Parameters:

    - **key** – The header key to get.
    - **default** – An iterable of values to set for the key if it is not in the headers.

    Changelog

    New in version 1.0.
- name: Headers.to_wsgi_list()
  id: datastructures/index#werkzeug.datastructures.Headers.to_wsgi_list
  summary: Convert the headers into a list suitable for WSGI
  belongs_to: Data Structures
  description: |-
    `to_wsgi_list()`

    Convert the headers into a list suitable for WSGI.

    Returns:

    list
- name: Headers.update()
  id: datastructures/index#werkzeug.datastructures.Headers.update
  summary: Replace headers in this object with items from another headers object and keyword arguments
  belongs_to: Data Structures
  description: |-
    `update(*args, **kwargs)`

    Replace headers in this object with items from another headers object and keyword arguments.

    To extend existing keys instead of replacing, use [`extend()`](#werkzeug.datastructures.Headers.extend "werkzeug.datastructures.Headers.extend") instead.

    If provided, the first argument can be another [`Headers`](#werkzeug.datastructures.Headers "werkzeug.datastructures.Headers") object, a [`MultiDict`](#werkzeug.datastructures.MultiDict "werkzeug.datastructures.MultiDict"), [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)"), or iterable of pairs.

    Changelog

    New in version 1.0.
- name: HeaderSet
  id: datastructures/index#werkzeug.datastructures.HeaderSet
  summary: Similar to the ETags class this implements a set-like structure
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.HeaderSet(headers=None, on_update=None)`

    Similar to the [`ETags`](#werkzeug.datastructures.ETags "werkzeug.datastructures.ETags") class this implements a set-like structure. Unlike [`ETags`](#werkzeug.datastructures.ETags "werkzeug.datastructures.ETags") this is case insensitive and used for vary, allow, and content-language headers.

    If not constructed using the `parse_set_header()` function the instantiation works like this:

    ``` python
    >>> hs = HeaderSet(['foo', 'bar', 'baz'])
    >>> hs
    HeaderSet(['foo', 'bar', 'baz'])
    ```
- name: HeaderSet.add()
  id: datastructures/index#werkzeug.datastructures.HeaderSet.add
  summary: Add a new header to the set
  belongs_to: Data Structures
  description: |-
    `add(header)`

    Add a new header to the set.
- name: HeaderSet.as_set()
  id: datastructures/index#werkzeug.datastructures.HeaderSet.as_set
  summary: Return the set as real python set type
  belongs_to: Data Structures
  description: |-
    `as_set(preserve_casing=False)`

    Return the set as real python set type. When calling this, all the items are converted to lowercase and the ordering is lost.

    Parameters:

    **preserve_casing** – if set to `True` the items in the set returned will have the original case like in the [`HeaderSet`](#werkzeug.datastructures.HeaderSet "werkzeug.datastructures.HeaderSet"), otherwise they will be lowercase.
- name: HeaderSet.clear()
  id: datastructures/index#werkzeug.datastructures.HeaderSet.clear
  summary: Clear the set
  belongs_to: Data Structures
  description: |-
    `clear()`

    Clear the set.
- name: HeaderSet.discard()
  id: datastructures/index#werkzeug.datastructures.HeaderSet.discard
  summary: Like remove() but ignores errors
  belongs_to: Data Structures
  description: |-
    `discard(header)`

    Like [`remove()`](#werkzeug.datastructures.HeaderSet.remove "werkzeug.datastructures.HeaderSet.remove") but ignores errors.

    Parameters:

    **header** – the header to be discarded.
- name: HeaderSet.find()
  id: datastructures/index#werkzeug.datastructures.HeaderSet.find
  summary: Return the index of the header in the set or return -1 if not found
  belongs_to: Data Structures
  description: |-
    `find(header)`

    Return the index of the header in the set or return -1 if not found.

    Parameters:

    **header** – the header to be looked up.
- name: HeaderSet.index()
  id: datastructures/index#werkzeug.datastructures.HeaderSet.index
  summary: Return the index of the header in the set or raise an IndexError
  belongs_to: Data Structures
  description: |-
    `index(header)`

    Return the index of the header in the set or raise an [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "(in Python v3.11)").

    Parameters:

    **header** – the header to be looked up.
- name: HeaderSet.remove()
  id: datastructures/index#werkzeug.datastructures.HeaderSet.remove
  summary: Remove a header from the set
  belongs_to: Data Structures
  description: |-
    `remove(header)`

    Remove a header from the set. This raises an [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "(in Python v3.11)") if the header is not in the set.

    Changelog

    Changed in version 0.5: In older versions a [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "(in Python v3.11)") was raised instead of a [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "(in Python v3.11)") if the object was missing.

    Parameters:

    **header** – the header to be removed.
- name: HeaderSet.to_header()
  id: datastructures/index#werkzeug.datastructures.HeaderSet.to_header
  summary: Convert the header set into an HTTP header string
  belongs_to: Data Structures
  description: |-
    `to_header()`

    Convert the header set into an HTTP header string.
- name: HeaderSet.update()
  id: datastructures/index#werkzeug.datastructures.HeaderSet.update
  summary: Add all the headers from the iterable to the set
  belongs_to: Data Structures
  description: |-
    `update(iterable)`

    Add all the headers from the iterable to the set.

    Parameters:

    **iterable** – updates the set with the items from the iterable.
- name: host_is_trusted()
  id: wsgi/index#werkzeug.wsgi.host_is_trusted
  summary: Check if a host matches a list of trusted names
  belongs_to: WSGI Helpers
  description: |-
    `werkzeug.wsgi.host_is_trusted(hostname, trusted_list)`

    Check if a host matches a list of trusted names.

    Parameters:

    - **hostname** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The name to check.
    - **trusted_list** ([Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable "(in Python v3.11)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*\]*) – A list of valid names to match. If a name starts with a dot it will match all subdomains.

    Return type:

    [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")

    Changelog

    New in version 0.9.

    ## Convenience Helpers
- name: HTTP Exceptions
  id: exceptions/index
  summary: Implements a number of Python exceptions which can be raised from within a view to trigger a standard HTTP non-200 response
  description: "# HTTP Exceptions\n\nImplements a number of Python exceptions which can be raised from within a view to trigger a standard HTTP non-200 response.\n\n## Usage Example\n\n``` python\nfrom werkzeug.wrappers.request import Request\nfrom werkzeug.exceptions import HTTPException, NotFound\n\ndef view(request):\n    raise NotFound()\n\n@Request.application\ndef application(request):\n    try:\n        return view(request)\n    except HTTPException as e:\n        return e\n```\n\nAs you can see from this example those exceptions are callable WSGI applications. However, they are not Werkzeug response objects. You can get a response object by calling `get_response()` on a HTTP exception.\n\nKeep in mind that you may have to pass an environ (WSGI) or scope (ASGI) to `get_response()` because some errors fetch additional information relating to the request.\n\nIf you want to hook in a different exception page to say, a 404 status code, you can add a second except for a specific subclass of an error:\n\n``` python\n@Request.application\ndef application(request):\n    try:\n        return view(request)\n    except NotFound as e:\n        return not_found(request)\n    except HTTPException as e:\n        return e\n```\n\n## Error Classes\n\nThe following error classes exist in Werkzeug:\n\n`exception werkzeug.exceptions.BadRequest(description=None, response=None)`  \n*400* `Bad Request`\n\nRaise if the browser sends something to the application the application or server cannot handle.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n`exception werkzeug.exceptions.Unauthorized(description=None, response=None, www_authenticate=None)`  \n*401* `Unauthorized`\n\nRaise if the user is not authorized to access a resource.\n\nThe `www_authenticate` argument should be used to set the `WWW-Authenticate` header. This is used for HTTP basic auth and other schemes. Use [`WWWAuthenticate`](../datastructures/index#werkzeug.datastructures.WWWAuthenticate \"werkzeug.datastructures.WWWAuthenticate\") to create correctly formatted values. Strictly speaking a 401 response is invalid if it doesn’t provide at least one value for this header, although real clients typically don’t care.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – Override the default message used for the body of the response.\n- **www-authenticate** – A single value, or list of values, for the WWW-Authenticate header(s).\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n- **www_authenticate** (*None* *\\|* *(*[WWWAuthenticate](../datastructures/index#werkzeug.datastructures.WWWAuthenticate \"werkzeug.datastructures.WWWAuthenticate\") *\\|* *t.Iterable\\[*[WWWAuthenticate](../datastructures/index#werkzeug.datastructures.WWWAuthenticate \"werkzeug.datastructures.WWWAuthenticate\")*\\])*) –\n\nReturn type:  \nNone\n\nChangelog\n\nChanged in version 2.0: Serialize multiple `www_authenticate` items into multiple `WWW-Authenticate` headers, rather than joining them into a single value, for better interoperability.\n\nChanged in version 0.15.3: If the `www_authenticate` argument is not set, the `WWW-Authenticate` header is not set.\n\nChanged in version 0.15.3: The `response` argument was restored.\n\nChanged in version 0.15.1: `description` was moved back as the first argument, restoring its previous position.\n\nChanged in version 0.15.0: `www_authenticate` was added as the first argument, ahead of `description`.\n\n&nbsp;\n\n`exception werkzeug.exceptions.Forbidden(description=None, response=None)`  \n*403* `Forbidden`\n\nRaise if the user doesn’t have the permission for the requested resource but was authenticated.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.NotFound(description=None, response=None)`  \n*404* `Not Found`\n\nRaise if a resource does not exist and never existed.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.MethodNotAllowed(valid_methods=None, description=None, response=None)`  \n*405* `Method Not Allowed`\n\nRaise if the server used a method the resource does not handle. For example `POST` if the resource is view only. Especially useful for REST.\n\nThe first argument for this exception should be a list of allowed methods. Strictly speaking the response would be invalid if you don’t provide valid methods in the header which you can do with that list.\n\nTakes an optional list of valid http methods starting with werkzeug 0.3 the list will be mandatory.\n\nParameters:  \n- **valid_methods** (*t.Iterable\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]* *\\|* *None*) –\n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.NotAcceptable(description=None, response=None)`  \n*406* `Not Acceptable`\n\nRaise if the server can’t return any content conforming to the `Accept` headers of the client.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.RequestTimeout(description=None, response=None)`  \n*408* `Request Timeout`\n\nRaise to signalize a timeout.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.Conflict(description=None, response=None)`  \n*409* `Conflict`\n\nRaise to signal that a request cannot be completed because it conflicts with the current state on the server.\n\nChangelog\n\nNew in version 0.7.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.Gone(description=None, response=None)`  \n*410* `Gone`\n\nRaise if a resource existed previously and went away without new location.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.LengthRequired(description=None, response=None)`  \n*411* `Length Required`\n\nRaise if the browser submitted data but no `Content-Length` header which is required for the kind of processing the server does.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.PreconditionFailed(description=None, response=None)`  \n*412* `Precondition Failed`\n\nStatus code used in combination with `If-Match`, `If-None-Match`, or `If-Unmodified-Since`.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.RequestEntityTooLarge(description=None, response=None)`  \n*413* `Request Entity Too Large`\n\nThe status code one should return if the data submitted exceeded a given limit.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.RequestURITooLarge(description=None, response=None)`  \n*414* `Request URI Too Large`\n\nLike *413* but for too long URLs.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.UnsupportedMediaType(description=None, response=None)`  \n*415* `Unsupported Media Type`\n\nThe status code returned if the server is unable to handle the media type the client transmitted.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.RequestedRangeNotSatisfiable(length=None, units='bytes', description=None, response=None)`  \n*416* `Requested Range Not Satisfiable`\n\nThe client asked for an invalid part of the file.\n\nChangelog\n\nNew in version 0.7.\n\nTakes an optional `Content-Range` header value based on `length` parameter.\n\nParameters:  \n- **length** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) –\n- **units** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.ExpectationFailed(description=None, response=None)`  \n*417* `Expectation Failed`\n\nThe server cannot meet the requirements of the Expect request-header.\n\nChangelog\n\nNew in version 0.7.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.ImATeapot(description=None, response=None)`  \n*418* `I’m a teapot`\n\nThe server should return this if it is a teapot and someone attempted to brew coffee with it.\n\nChangelog\n\nNew in version 0.7.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.UnprocessableEntity(description=None, response=None)`  \n*422* `Unprocessable Entity`\n\nUsed if the request is well formed, but the instructions are otherwise incorrect.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.Locked(description=None, response=None)`  \n*423* `Locked`\n\nUsed if the resource that is being accessed is locked.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.FailedDependency(description=None, response=None)`  \n*424* `Failed Dependency`\n\nUsed if the method could not be performed on the resource because the requested action depended on another action and that action failed.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.PreconditionRequired(description=None, response=None)`  \n*428* `Precondition Required`\n\nThe server requires this request to be conditional, typically to prevent the lost update problem, which is a race condition between two or more clients attempting to update a resource through PUT or DELETE. By requiring each client to include a conditional header (“If-Match” or “If-Unmodified- Since”) with the proper value retained from a recent GET request, the server ensures that each client has at least seen the previous revision of the resource.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.TooManyRequests(description=None, response=None, retry_after=None)`  \n*429* `Too Many Requests`\n\nThe server is limiting the rate at which this user receives responses, and this request exceeds that rate. (The server may use any convenient method to identify users and their request rates). The server may include a “Retry-After” header to indicate how long the user should wait before retrying.\n\nParameters:  \n- **retry_after** (*datetime* *\\|* [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) – If given, set the `Retry-After` header to this value. May be an [`int`](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") number of seconds or a [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime \"(in Python v3.11)\").\n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\nChangelog\n\nChanged in version 1.0: Added `retry_after` parameter.\n\n&nbsp;\n\n`exception werkzeug.exceptions.RequestHeaderFieldsTooLarge(description=None, response=None)`  \n*431* `Request Header Fields Too Large`\n\nThe server refuses to process the request because the header fields are too large. One or more individual fields may be too large, or the set of all headers is too large.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.UnavailableForLegalReasons(description=None, response=None)`  \n*451* `Unavailable For Legal Reasons`\n\nThis status code indicates that the server is denying access to the resource as a consequence of a legal demand.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.InternalServerError(description=None, response=None, original_exception=None)`  \n*500* `Internal Server Error`\n\nRaise if an internal server error occurred. This is a good fallback if an unknown error occurred in the dispatcher.\n\nChangelog\n\nChanged in version 1.0.0: Added the [`original_exception`](#werkzeug.exceptions.InternalServerError.original_exception \"werkzeug.exceptions.InternalServerError.original_exception\") attribute.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n- **original_exception** ([BaseException](https://docs.python.org/3/library/exceptions.html#BaseException \"(in Python v3.11)\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n`original_exception`  \nThe original exception that caused this 500 error. Can be used by frameworks to provide context when handling unexpected errors.\n\n&nbsp;\n\n`exception werkzeug.exceptions.NotImplemented(description=None, response=None)`  \n*501* `Not Implemented`\n\nRaise if the application does not support the action requested by the browser.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.BadGateway(description=None, response=None)`  \n*502* `Bad Gateway`\n\nIf you do proxying in your application you should return this status code if you received an invalid response from the upstream server it accessed in attempting to fulfill the request.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.ServiceUnavailable(description=None, response=None, retry_after=None)`  \n*503* `Service Unavailable`\n\nStatus code you should return if a service is temporarily unavailable.\n\nParameters:  \n- **retry_after** (*datetime* *\\|* [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) – If given, set the `Retry-After` header to this value. May be an [`int`](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") number of seconds or a [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime \"(in Python v3.11)\").\n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\nChangelog\n\nChanged in version 1.0: Added `retry_after` parameter.\n\n&nbsp;\n\n`exception werkzeug.exceptions.GatewayTimeout(description=None, response=None)`  \n*504* `Gateway Timeout`\n\nStatus code you should return if a connection to an upstream server times out.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.HTTPVersionNotSupported(description=None, response=None)`  \n*505* `HTTP Version Not Supported`\n\nThe server does not support the HTTP protocol version used in the request.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.ClientDisconnected(description=None, response=None)`  \nInternal exception that is raised if Werkzeug detects a disconnected client. Since the client is already gone at that point attempting to send the error message to the client might not work and might ultimately result in another exception in the server. Mainly this is here so that it is silenced by default as far as Werkzeug is concerned.\n\nSince disconnections cannot be reliably detected and are unspecified by WSGI to a large extent this might or might not be raised if a client is gone.\n\nChangelog\n\nNew in version 0.8.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n&nbsp;\n\n`exception werkzeug.exceptions.SecurityError(description=None, response=None)`  \nRaised if something triggers a security error. This is otherwise exactly like a bad request error.\n\nChangelog\n\nNew in version 0.9.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n## Baseclass\n\nAll the exceptions implement this common interface:\n\n`exception werkzeug.exceptions.HTTPException(description=None, response=None)`  \nThe base class for all HTTP exceptions. This exception can be called as a WSGI application to render a default error page or you can catch the subclasses of it independently and render nicer error messages.\n\nChangelog\n\nChanged in version 2.1: Removed the `wrap` class method.\n\nParameters:  \n- **description** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **response** ([Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n`__call__(environ, start_response)`  \nCall the exception as WSGI application.\n\nParameters:  \n- **environ** (*WSGIEnvironment*) – the WSGI environment.\n- **start_response** (*StartResponse*) – the response callable provided by the WSGI server.\n\nReturn type:  \nt.Iterable\\[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\")\\]\n\n`get_response(environ=None, scope=None)`  \nGet a response object. If one was passed to the exception it’s returned directly.\n\nParameters:  \n- **environ** (*WSGIEnvironment* *\\|* *WSGIRequest* *\\|* *None*) – the optional environ for the request. This can be used to modify the response depending on how the request looked like.\n- **scope** ([dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.11)\") *\\|* *None*) –\n\nReturns:  \na `Response` object or a subclass thereof.\n\nReturn type:  \n[Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\")\n\n## Special HTTP Exceptions\n\nStarting with Werkzeug 0.3 some of the builtin classes raise exceptions that look like regular python exceptions (eg [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError \"(in Python v3.11)\")) but are [`BadRequest`](#werkzeug.exceptions.BadRequest \"werkzeug.exceptions.BadRequest\") HTTP exceptions at the same time. This decision was made to simplify a common pattern where you want to abort if the client tampered with the submitted form data in a way that the application can’t recover properly and should abort with `400 BAD REQUEST`.\n\nAssuming the application catches all HTTP exceptions and reacts to them properly a view function could do the following safely and doesn’t have to check if the keys exist:\n\n``` python\ndef new_post(request):\n    post = Post(title=request.form['title'], body=request.form['body'])\n    post.save()\n    return redirect(post.url)\n```\n\nIf `title` or `body` are missing in the form, a special key error will be raised which behaves like a [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError \"(in Python v3.11)\") but also a [`BadRequest`](#werkzeug.exceptions.BadRequest \"werkzeug.exceptions.BadRequest\") exception.\n\n`exception werkzeug.exceptions.BadRequestKeyError(arg=None, *args, **kwargs)`  \nAn exception that is used to signal both a [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError \"(in Python v3.11)\") and a [`BadRequest`](#werkzeug.exceptions.BadRequest \"werkzeug.exceptions.BadRequest\"). Used by many of the datastructures.\n\nParameters:  \n- **arg** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **args** (*t.Any*) –\n- **kwargs** (*t.Any*) –\n\n## Simple Aborting\n\nSometimes it’s convenient to just raise an exception by the error code, without importing the exception and looking up the name etc. For this purpose there is the [`abort()`](#werkzeug.exceptions.abort \"werkzeug.exceptions.abort\") function.\n\n`werkzeug.exceptions.abort(status, *args, **kwargs)`  \nRaises an [`HTTPException`](#werkzeug.exceptions.HTTPException \"werkzeug.exceptions.HTTPException\") for the given status code or WSGI application.\n\nIf a status code is given, it will be looked up in the list of exceptions and will raise that exception. If passed a WSGI application, it will wrap it in a proxy WSGI exception and raise that:\n\n``` python\nabort(404)  # 404 Not Found\nabort(Response('Hello World'))\n```\n\nParameters:  \n- **status** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* [Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\")) –\n- **args** (*t.Any*) –\n- **kwargs** (*t.Any*) –\n\nReturn type:  \nt.NoReturn\n\nIf you want to use this functionality with custom exceptions you can create an instance of the aborter class:\n\n`class werkzeug.exceptions.Aborter(mapping=None, extra=None)`  \nWhen passed a dict of code -\\> exception items it can be used as callable that raises exceptions. If the first argument to the callable is an integer it will be looked up in the mapping, if it’s a WSGI application it will be raised in a proxy exception.\n\nThe rest of the arguments are forwarded to the exception constructor.\n\nParameters:  \n- **mapping** ([dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.11)\")*\\[*[int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")*,* [type](https://docs.python.org/3/library/functions.html#type \"(in Python v3.11)\")*\\[*[HTTPException](#werkzeug.exceptions.HTTPException \"werkzeug.exceptions.HTTPException\")*\\]\\]* *\\|* *None*) –\n- **extra** ([dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.11)\")*\\[*[int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")*,* [type](https://docs.python.org/3/library/functions.html#type \"(in Python v3.11)\")*\\[*[HTTPException](#werkzeug.exceptions.HTTPException \"werkzeug.exceptions.HTTPException\")*\\]\\]* *\\|* *None*) –\n\n## Custom Errors\n\nAs you can see from the list above not all status codes are available as errors. Especially redirects and other non 200 status codes that do not represent errors are missing. For redirects you can use the `redirect()` function from the utilities.\n\nIf you want to add an error yourself you can subclass [`HTTPException`](#werkzeug.exceptions.HTTPException \"werkzeug.exceptions.HTTPException\"):\n\n``` python\nfrom werkzeug.exceptions import HTTPException\n\nclass PaymentRequired(HTTPException):\n    code = 402\n    description = '<p>Payment required.</p>'\n```\n\nThis is the minimal code you need for your own exception. If you want to add more logic to the errors you can override the `get_description()`, `get_body()`, `get_headers()` and [`get_response()`](#werkzeug.exceptions.HTTPException.get_response \"werkzeug.exceptions.HTTPException.get_response\") methods. In any case you should have a look at the sourcecode of the exceptions module.\n\nYou can override the default description in the constructor with the `description` parameter:\n\n``` python\nraise BadRequest(description='Request failed because X was not present')\n```\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/exceptions/](https://werkzeug.palletsprojects.com/en/3.0.x/exceptions/)"
- name: HTTP Utilities
  id: http/index
  summary: Werkzeug provides a couple of functions to parse and generate HTTP headers that are useful when implementing WSGI middlewares or whenever you are operating on a lower level layer
  description: "# HTTP Utilities\n\nWerkzeug provides a couple of functions to parse and generate HTTP headers that are useful when implementing WSGI middlewares or whenever you are operating on a lower level layer. All this functionality is also exposed from request and response objects.\n\n## Datetime Functions\n\nThese functions simplify working with times in an HTTP context. Werkzeug produces timezone-aware [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime \"(in Python v3.11)\") objects in UTC. When passing datetime objects to Werkzeug, it assumes any naive datetime is in UTC.\n\nWhen comparing datetime values from Werkzeug, your own datetime objects must also be timezone-aware, or you must make the values from Werkzeug naive.\n\n- `dt = datetime.now(timezone.utc)` gets the current time in UTC.\n- `dt = datetime(..., tzinfo=timezone.utc)` creates a time in UTC.\n- `dt = dt.replace(tzinfo=timezone.utc)` makes a naive object aware by assuming it’s in UTC.\n- `dt = dt.replace(tzinfo=None)` makes an aware object naive.\n\n`werkzeug.http.parse_date(value)`  \nParse an [**RFC 2822**](https://datatracker.ietf.org/doc/html/rfc2822.html) date into a timezone-aware [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime \"(in Python v3.11)\") object, or `None` if parsing fails.\n\nThis is a wrapper for [`email.utils.parsedate_to_datetime()`](https://docs.python.org/3/library/email.utils.html#email.utils.parsedate_to_datetime \"(in Python v3.11)\"). It returns `None` if parsing fails instead of raising an exception, and always returns a timezone-aware datetime object. If the string doesn’t have timezone information, it is assumed to be UTC.\n\nParameters:  \n**value** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – A string with a supported date format.\n\nReturn type:  \n[datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime \"(in Python v3.11)\") \\| None\n\nChangelog\n\nChanged in version 2.0: Return a timezone-aware datetime object. Use `email.utils.parsedate_to_datetime`.\n\n`werkzeug.http.http_date(timestamp=None)`  \nFormat a datetime object or timestamp into an [**RFC 2822**](https://datatracker.ietf.org/doc/html/rfc2822.html) date string.\n\nThis is a wrapper for [`email.utils.format_datetime()`](https://docs.python.org/3/library/email.utils.html#email.utils.format_datetime \"(in Python v3.11)\"). It assumes naive datetime objects are in UTC instead of raising an exception.\n\nParameters:  \n**timestamp** ([datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime \"(in Python v3.11)\") *\\|* [date](https://docs.python.org/3/library/datetime.html#datetime.date \"(in Python v3.11)\") *\\|* [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* [float](https://docs.python.org/3/library/functions.html#float \"(in Python v3.11)\") *\\|* [struct_time](https://docs.python.org/3/library/time.html#time.struct_time \"(in Python v3.11)\") *\\|* *None*) – The datetime or timestamp to format. Defaults to the current time.\n\nReturn type:  \n[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\n\nChangelog\n\nChanged in version 2.0: Use `email.utils.format_datetime`. Accept `date` objects.\n\n## Header Parsing\n\nThe following functions can be used to parse incoming HTTP headers. Because Python does not provide data structures with the semantics required by [**RFC 2616**](https://datatracker.ietf.org/doc/html/rfc2616.html), Werkzeug implements some custom data structures that are [documented separately](../datastructures/index#http-datastructures).\n\n`werkzeug.http.parse_options_header(value)`  \nParse a header that consists of a value with `key=value` parameters separated by semicolons `;`. For example, the `Content-Type` header.\n\n``` python\nparse_options_header(\"text/html; charset=UTF-8\")\n('text/html', {'charset': 'UTF-8'})\n\nparse_options_header(\"\")\n(\"\", {})\n```\n\nThis is the reverse of `dump_options_header()`.\n\nThis parses valid parameter parts as described in [RFC 9110](https://httpwg.org/specs/rfc9110.html#parameter). Invalid parts are skipped.\n\nThis handles continuations and charsets as described in [RFC 2231](https://www.rfc-editor.org/rfc/rfc2231#section-3), although not as strictly as the RFC. Only ASCII, UTF-8, and ISO-8859-1 charsets are accepted, otherwise the value remains quoted.\n\nClients may not be consistent in how they handle a quote character within a quoted value. The [HTML Standard](https://html.spec.whatwg.org/#multipart-form-data) replaces it with `%22` in multipart form data. [RFC 9110](https://httpwg.org/specs/rfc9110.html#quoted.strings) uses backslash escapes in HTTP headers. Both are decoded to the `\"` character.\n\nClients may not be consistent in how they handle non-ASCII characters. HTML documents must declare `<meta charset=UTF-8>`, otherwise browsers may replace with HTML character references, which can be decoded using [`html.unescape()`](https://docs.python.org/3/library/html.html#html.unescape \"(in Python v3.11)\").\n\nParameters:  \n**value** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – The header value to parse.\n\nReturns:  \n`(value, options)`, where `options` is a dict\n\nReturn type:  \n[tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\"), [dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.11)\")\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\"), [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\\]\\]\n\nChangelog\n\nChanged in version 2.3: Invalid parts, such as keys with no value, quoted keys, and incorrectly quoted values, are discarded instead of treating as `None`.\n\nChanged in version 2.3: Only ASCII, UTF-8, and ISO-8859-1 are accepted for charset values.\n\nChanged in version 2.3: Escaped quotes in quoted values, like `%22` and `\\\"`, are handled.\n\nChanged in version 2.2: Option names are always converted to lowercase.\n\nChanged in version 2.2: The `multiple` parameter was removed.\n\nChanged in version 0.15: [**RFC 2231**](https://datatracker.ietf.org/doc/html/rfc2231.html) parameter continuations are handled.\n\nNew in version 0.5.\n\n&nbsp;\n\n`werkzeug.http.parse_set_header(value, on_update=None)`  \nParse a set-like header and return a [`HeaderSet`](../datastructures/index#werkzeug.datastructures.HeaderSet \"werkzeug.datastructures.HeaderSet\") object:\n\n``` python\n>>> hs = parse_set_header('token, \"quoted value\"')\n```\n\nThe return value is an object that treats the items case-insensitively and keeps the order of the items:\n\n``` python\n>>> 'TOKEN' in hs\nTrue\n>>> hs.index('quoted value')\n1\n>>> hs\nHeaderSet(['token', 'quoted value'])\n```\n\nTo create a header from the `HeaderSet` again, use the [`dump_header()`](#werkzeug.http.dump_header \"werkzeug.http.dump_header\") function.\n\nParameters:  \n- **value** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – a set header to be parsed.\n- **on_update** ([Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.11)\")*\\[\\[*[HeaderSet](../datastructures/index#werkzeug.datastructures.HeaderSet \"werkzeug.datastructures.structures.HeaderSet\")*\\],* *None\\]* *\\|* *None*) – an optional callable that is called every time a value on the [`HeaderSet`](../datastructures/index#werkzeug.datastructures.HeaderSet \"werkzeug.datastructures.HeaderSet\") object is changed.\n\nReturns:  \na [`HeaderSet`](../datastructures/index#werkzeug.datastructures.HeaderSet \"werkzeug.datastructures.HeaderSet\")\n\nReturn type:  \n[HeaderSet](../datastructures/index#werkzeug.datastructures.HeaderSet \"werkzeug.datastructures.structures.HeaderSet\")\n\n&nbsp;\n\n`werkzeug.http.parse_list_header(value)`  \nParse a header value that consists of a list of comma separated items according to [RFC 9110](https://httpwg.org/specs/rfc9110.html#abnf.extension).\n\nThis extends `urllib.request.parse_http_list()` to remove surrounding quotes from values.\n\n``` python\nparse_list_header('token, \"quoted value\"')\n['token', 'quoted value']\n```\n\nThis is the reverse of [`dump_header()`](#werkzeug.http.dump_header \"werkzeug.http.dump_header\").\n\nParameters:  \n**value** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The header value to parse.\n\nReturn type:  \n[list](https://docs.python.org/3/library/stdtypes.html#list \"(in Python v3.11)\")\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\\]\n\n&nbsp;\n\n`werkzeug.http.parse_dict_header(value)`  \nParse a list header using [`parse_list_header()`](#werkzeug.http.parse_list_header \"werkzeug.http.parse_list_header\"), then parse each item as a `key=value` pair.\n\n``` python\nparse_dict_header('a=b, c=\"d, e\", f')\n{\"a\": \"b\", \"c\": \"d, e\", \"f\": None}\n```\n\nThis is the reverse of [`dump_header()`](#werkzeug.http.dump_header \"werkzeug.http.dump_header\").\n\nIf a key does not have a value, it is `None`.\n\nThis handles charsets for values as described in [RFC 2231](https://www.rfc-editor.org/rfc/rfc2231#section-3). Only ASCII, UTF-8, and ISO-8859-1 charsets are accepted, otherwise the value remains quoted.\n\nParameters:  \n**value** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The header value to parse.\n\nReturn type:  \n[dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.11)\")\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\"), [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") \\| None\\]\n\nChanged in version 3.0: Passing bytes is not supported.\n\nChanged in version 3.0: The `cls` argument is removed.\n\nChangelog\n\nChanged in version 2.3: Added support for `key*=charset''value` encoded items.\n\nChanged in version 0.9: The `cls` argument was added.\n\n&nbsp;\n\n`werkzeug.http.parse_accept_header(value: str | None) → Accept`  \nwerkzeug.http.parse_accept_header(*value:[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\\|[None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.11)\")*, *cls:[type](https://docs.python.org/3/library/functions.html#type \"(in Python v3.11)\")\\[\\_TAnyAccept\\]*) → \\_TAnyAccept  \nParse an `Accept` header according to [RFC 9110](https://httpwg.org/specs/rfc9110.html#field.accept).\n\nReturns an [`Accept`](../datastructures/index#werkzeug.datastructures.Accept \"werkzeug.datastructures.Accept\") instance, which can sort and inspect items based on their quality parameter. When parsing `Accept-Charset`, `Accept-Encoding`, or `Accept-Language`, pass the appropriate [`Accept`](../datastructures/index#werkzeug.datastructures.Accept \"werkzeug.datastructures.Accept\") subclass.\n\nParameters:  \n- **value** – The header value to parse.\n- **cls** – The [`Accept`](../datastructures/index#werkzeug.datastructures.Accept \"werkzeug.datastructures.Accept\") class to wrap the result in.\n\nReturns:  \nAn instance of `cls`.\n\nChangelog\n\nChanged in version 2.3: Parse according to RFC 9110. Items with invalid `q` values are skipped.\n\n&nbsp;\n\n`werkzeug.http.parse_cache_control_header(value: str | None, on_update: Callable[[_TAnyCC], None] | None, cls: None = None) → RequestCacheControl`  \nwerkzeug.http.parse_cache_control_header(*value:[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\\|[None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.11)\")*, *on_update:[Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.11)\")\\[\\[\\_TAnyCC\\],[None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.11)\")\\]\\|[None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.11)\")*, *cls:[type](https://docs.python.org/3/library/functions.html#type \"(in Python v3.11)\")\\[\\_TAnyCC\\]*) → \\_TAnyCC  \nParse a cache control header. The RFC differs between response and request cache control, this method does not. It’s your responsibility to not use the wrong control statements.\n\nChangelog\n\nNew in version 0.5: The `cls` was added. If not specified an immutable [`RequestCacheControl`](../datastructures/index#werkzeug.datastructures.RequestCacheControl \"werkzeug.datastructures.RequestCacheControl\") is returned.\n\nParameters:  \n- **value** – a cache control header to be parsed.\n- **on_update** – an optional callable that is called every time a value on the `CacheControl` object is changed.\n- **cls** – the class for the returned object. By default [`RequestCacheControl`](../datastructures/index#werkzeug.datastructures.RequestCacheControl \"werkzeug.datastructures.RequestCacheControl\") is used.\n\nReturns:  \na `cls` object.\n\n&nbsp;\n\n`werkzeug.http.parse_if_range_header(value)`  \nParses an if-range header which can be an etag or a date. Returns a [`IfRange`](../datastructures/index#werkzeug.datastructures.IfRange \"werkzeug.datastructures.IfRange\") object.\n\nChangelog\n\nChanged in version 2.0: If the value represents a datetime, it is timezone-aware.\n\nNew in version 0.7.\n\nParameters:  \n**value** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n\nReturn type:  \n[IfRange](../datastructures/index#werkzeug.datastructures.IfRange \"werkzeug.datastructures.range.IfRange\")\n\n&nbsp;\n\n`werkzeug.http.parse_range_header(value, make_inclusive=True)`  \nParses a range header into a [`Range`](../datastructures/index#werkzeug.datastructures.Range \"werkzeug.datastructures.Range\") object. If the header is missing or malformed `None` is returned. `ranges` is a list of `(start, stop)` tuples where the ranges are non-inclusive.\n\nChangelog\n\nNew in version 0.7.\n\nParameters:  \n- **value** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **make_inclusive** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) –\n\nReturn type:  \n[Range](../datastructures/index#werkzeug.datastructures.Range \"werkzeug.datastructures.range.Range\") \\| None\n\n&nbsp;\n\n`werkzeug.http.parse_content_range_header(value, on_update=None)`  \nParses a range header into a [`ContentRange`](../datastructures/index#werkzeug.datastructures.ContentRange \"werkzeug.datastructures.ContentRange\") object or `None` if parsing is not possible.\n\nChangelog\n\nNew in version 0.7.\n\nParameters:  \n- **value** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – a content range header to be parsed.\n- **on_update** ([Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.11)\")*\\[\\[*[ContentRange](../datastructures/index#werkzeug.datastructures.ContentRange \"werkzeug.datastructures.range.ContentRange\")*\\],* *None\\]* *\\|* *None*) – an optional callable that is called every time a value on the [`ContentRange`](../datastructures/index#werkzeug.datastructures.ContentRange \"werkzeug.datastructures.ContentRange\") object is changed.\n\nReturn type:  \n[ContentRange](../datastructures/index#werkzeug.datastructures.ContentRange \"werkzeug.datastructures.range.ContentRange\") \\| None\n\n## Header Utilities\n\nThe following utilities operate on HTTP headers well but do not parse them. They are useful if you’re dealing with conditional responses or if you want to proxy arbitrary requests but want to remove WSGI-unsupported hop-by-hop headers. Also there is a function to create HTTP header strings from the parsed data.\n\n`werkzeug.http.is_entity_header(header)`  \nCheck if a header is an entity header.\n\nChangelog\n\nNew in version 0.5.\n\nParameters:  \n**header** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – the header to test.\n\nReturns:  \n`True` if it’s an entity header, `False` otherwise.\n\nReturn type:  \n[bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")\n\n&nbsp;\n\n`werkzeug.http.is_hop_by_hop_header(header)`  \nCheck if a header is an HTTP/1.1 “Hop-by-Hop” header.\n\nChangelog\n\nNew in version 0.5.\n\nParameters:  \n**header** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – the header to test.\n\nReturns:  \n`True` if it’s an HTTP/1.1 “Hop-by-Hop” header, `False` otherwise.\n\nReturn type:  \n[bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")\n\n&nbsp;\n\n`werkzeug.http.remove_entity_headers(headers, allowed=('expires', 'content-location'))`  \nRemove all entity headers from a list or `Headers` object. This operation works in-place. `Expires` and `Content-Location` headers are by default not removed. The reason for this is [**RFC 2616**](https://datatracker.ietf.org/doc/html/rfc2616.html) section 10.3.5 which specifies some entity headers that should be sent.\n\nChangelog\n\nChanged in version 0.5: added `allowed` parameter.\n\nParameters:  \n- **headers** ([Headers](../datastructures/index#werkzeug.datastructures.Headers \"werkzeug.datastructures.headers.Headers\") *\\|* [list](https://docs.python.org/3/library/stdtypes.html#list \"(in Python v3.11)\")*\\[*[tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]\\]*) – a list or `Headers` object.\n- **allowed** ([Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]*) – a list of headers that should still be allowed even though they are entity headers.\n\nReturn type:  \nNone\n\n&nbsp;\n\n`werkzeug.http.remove_hop_by_hop_headers(headers)`  \nRemove all HTTP/1.1 “Hop-by-Hop” headers from a list or `Headers` object. This operation works in-place.\n\nChangelog\n\nNew in version 0.5.\n\nParameters:  \n**headers** ([Headers](../datastructures/index#werkzeug.datastructures.Headers \"werkzeug.datastructures.headers.Headers\") *\\|* [list](https://docs.python.org/3/library/stdtypes.html#list \"(in Python v3.11)\")*\\[*[tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]\\]*) – a list or `Headers` object.\n\nReturn type:  \nNone\n\n&nbsp;\n\n`werkzeug.http.is_byte_range_valid(start, stop, length)`  \nChecks if a given byte content range is valid for the given length.\n\nChangelog\n\nNew in version 0.7.\n\nParameters:  \n- **start** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) –\n- **stop** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) –\n- **length** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) –\n\nReturn type:  \n[bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")\n\n&nbsp;\n\n`werkzeug.http.quote_header_value(value, allow_token=True)`  \nAdd double quotes around a header value. If the header contains only ASCII token characters, it will be returned unchanged. If the header contains `\"` or `\\` characters, they will be escaped with an additional `\\` character.\n\nThis is the reverse of [`unquote_header_value()`](#werkzeug.http.unquote_header_value \"werkzeug.http.unquote_header_value\").\n\nParameters:  \n- **value** ([Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")) – The value to quote. Will be converted to a string.\n- **allow_token** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Disable to quote the value even if it only has token characters.\n\nReturn type:  \n[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\n\nChanged in version 3.0: Passing bytes is not supported.\n\nChanged in version 3.0: The `extra_chars` parameter is removed.\n\nChangelog\n\nChanged in version 2.3: The value is quoted if it is the empty string.\n\nNew in version 0.5.\n\n&nbsp;\n\n`werkzeug.http.unquote_header_value(value)`  \nRemove double quotes and decode slash-escaped `\"` and `\\` characters in a header value.\n\nThis is the reverse of [`quote_header_value()`](#werkzeug.http.quote_header_value \"werkzeug.http.quote_header_value\").\n\nParameters:  \n**value** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The header value to unquote.\n\nReturn type:  \n[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\n\nChanged in version 3.0: The `is_filename` parameter is removed.\n\n&nbsp;\n\n`werkzeug.http.dump_header(iterable)`  \nProduce a header value from a list of items or `key=value` pairs, separated by commas `,`.\n\nThis is the reverse of [`parse_list_header()`](#werkzeug.http.parse_list_header \"werkzeug.http.parse_list_header\"), [`parse_dict_header()`](#werkzeug.http.parse_dict_header \"werkzeug.http.parse_dict_header\"), and [`parse_set_header()`](#werkzeug.http.parse_set_header \"werkzeug.http.parse_set_header\").\n\nIf a value contains non-token characters, it will be quoted.\n\nIf a value is `None`, the key is output alone.\n\nIn some keys for some headers, a UTF-8 value can be encoded using a special `key*=UTF-8''value` form, where `value` is percent encoded. This function will not produce that format automatically, but if a given key ends with an asterisk `*`, the value is assumed to have that form and will not be quoted further.\n\n``` python\ndump_header([\"foo\", \"bar baz\"])\n'foo, \"bar baz\"'\n\ndump_header({\"foo\": \"bar baz\"})\n'foo=\"bar baz\"'\n```\n\nParameters:  \n**iterable** ([dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* [Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")*\\]* *\\|* [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.11)\")*\\[*[Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")*\\]*) – The items to create a header from.\n\nReturn type:  \n[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\n\nChanged in version 3.0: The `allow_token` parameter is removed.\n\nChangelog\n\nChanged in version 2.2.3: If a key ends with `*`, its value will not be quoted.\n\n## Cookies\n\n`werkzeug.http.parse_cookie(header, cls=None)`  \nParse a cookie from a string or WSGI environ.\n\nThe same key can be provided multiple times, the values are stored in-order. The default `MultiDict` will have the first value first, and all values can be retrieved with `MultiDict.getlist()`.\n\nParameters:  \n- **header** (*WSGIEnvironment* *\\|* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – The cookie header as a string, or a WSGI environ dict with a `HTTP_COOKIE` key.\n- **cls** ([type](https://docs.python.org/3/library/functions.html#type \"(in Python v3.11)\")*\\[ds.MultiDict\\]* *\\|* *None*) – A dict-like class to store the parsed cookies in. Defaults to `MultiDict`.\n\nReturn type:  \nds.MultiDict\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\"), [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\\]\n\nChanged in version 3.0: Passing bytes, and the `charset` and `errors` parameters, were removed.\n\nChangelog\n\nChanged in version 1.0: Returns a `MultiDict` instead of a `TypeConversionDict`.\n\nChanged in version 0.5: Returns a `TypeConversionDict` instead of a regular dict. The `cls` parameter was added.\n\n&nbsp;\n\n`werkzeug.http.dump_cookie(key, value='', max_age=None, expires=None, path='/', domain=None, secure=False, httponly=False, sync_expires=True, max_size=4093, samesite=None)`  \nCreate a Set-Cookie header without the `Set-Cookie` prefix.\n\nThe return value is usually restricted to ascii as the vast majority of values are properly escaped, but that is no guarantee. It’s tunneled through latin1 as required by [**PEP 3333**](https://peps.python.org/pep-3333/).\n\nThe return value is not ASCII safe if the key contains unicode characters. This is technically against the specification but happens in the wild. It’s strongly recommended to not use non-ASCII values for the keys.\n\nParameters:  \n- **max_age** ([timedelta](https://docs.python.org/3/library/datetime.html#datetime.timedelta \"(in Python v3.11)\") *\\|* [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) – should be a number of seconds, or `None` (default) if the cookie should last only as long as the client’s browser session. Additionally `timedelta` objects are accepted, too.\n- **expires** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* [datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime \"(in Python v3.11)\") *\\|* [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* [float](https://docs.python.org/3/library/functions.html#float \"(in Python v3.11)\") *\\|* *None*) – should be a `datetime` object or unix timestamp.\n- **path** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – limits the cookie to a given path, per default it will span the whole domain.\n- **domain** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – Use this if you want to set a cross-domain cookie. For example, `domain=\"example.com\"` will set a cookie that is readable by the domain `www.example.com`, `foo.example.com` etc. Otherwise, a cookie will only be readable by the domain that set it.\n- **secure** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – The cookie will only be available via HTTPS\n- **httponly** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – disallow JavaScript to access the cookie. This is an extension to the cookie standard and probably not supported by all browsers.\n- **charset** – the encoding for string values.\n- **sync_expires** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – automatically set expires if max_age is defined but expires not.\n- **max_size** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – Warn if the final header value exceeds this size. The default, 4093, should be safely [supported by most browsers](http://browsercookielimits.squawky.net/). Set to 0 to disable this check.\n- **samesite** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – Limits the scope of the cookie such that it will only be attached to requests if those requests are same-site.\n- **key** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **value** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n\nReturn type:  \n[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\n\nChanged in version 3.0: Passing bytes, and the `charset` parameter, were removed.\n\nChangelog\n\nChanged in version 2.3.3: The `path` parameter is `/` by default.\n\nChanged in version 2.3.1: The value allows more characters without quoting.\n\nChanged in version 2.3: `localhost` and other names without a dot are allowed for the domain. A leading dot is ignored.\n\nChanged in version 2.3: The `path` parameter is `None` by default.\n\nChanged in version 1.0.0: The string `'None'` is accepted for `samesite`.\n\n## Conditional Response Helpers\n\nFor conditional responses the following functions might be useful:\n\n`werkzeug.http.parse_etags(value)`  \nParse an etag header.\n\nParameters:  \n**value** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – the tag header to parse\n\nReturns:  \nan [`ETags`](../datastructures/index#werkzeug.datastructures.ETags \"werkzeug.datastructures.ETags\") object.\n\nReturn type:  \n[ETags](../datastructures/index#werkzeug.datastructures.ETags \"werkzeug.datastructures.etag.ETags\")\n\n&nbsp;\n\n`werkzeug.http.quote_etag(etag, weak=False)`  \nQuote an etag.\n\nParameters:  \n- **etag** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – the etag to quote.\n- **weak** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – set to `True` to tag it “weak”.\n\nReturn type:  \n[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\n\n&nbsp;\n\n`werkzeug.http.unquote_etag(etag)`  \nUnquote a single etag:\n\n``` python\n>>> unquote_etag('W/\"bar\"')\n('bar', True)\n>>> unquote_etag('\"bar\"')\n('bar', False)\n```\n\nParameters:  \n**etag** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – the etag identifier to unquote.\n\nReturns:  \na `(etag, weak)` tuple.\n\nReturn type:  \n[tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\"), [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")\\] \\| [tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")\\[None, None\\]\n\n&nbsp;\n\n`werkzeug.http.generate_etag(data)`  \nGenerate an etag for some data.\n\nChangelog\n\nChanged in version 2.0: Use SHA-1. MD5 may not be available in some environments.\n\nParameters:  \n**data** ([bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\")) –\n\nReturn type:  \n[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\n\n&nbsp;\n\n`werkzeug.http.is_resource_modified(environ, etag=None, data=None, last_modified=None, ignore_if_range=True)`  \nConvenience method for conditional requests.\n\nParameters:  \n- **environ** (*WSGIEnvironment*) – the WSGI environment of the request to be checked.\n- **etag** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – the etag for the response for comparison.\n- **data** ([bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\") *\\|* *None*) – or alternatively the data of the response to automatically generate an etag using [`generate_etag()`](#werkzeug.http.generate_etag \"werkzeug.http.generate_etag\").\n- **last_modified** (*datetime* *\\|* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – an optional date of the last modification.\n- **ignore_if_range** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – If `False`, `If-Range` header will be taken into account.\n\nReturns:  \n`True` if the resource was modified, otherwise `False`.\n\nReturn type:  \n[bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")\n\nChangelog\n\nChanged in version 2.0: SHA-1 is used to generate an etag value for the data. MD5 may not be available in some environments.\n\nChanged in version 1.0.0: The check is run for methods other than `GET` and `HEAD`.\n\n## Constants\n\n`werkzeug.http.HTTP_STATUS_CODES`  \nA dict of status code -\\> default status message pairs. This is used by the wrappers and other places where an integer status code is expanded to a string throughout Werkzeug.\n\n## Form Data Parsing\n\nWerkzeug provides the form parsing functions separately from the request object so that you can access form data from a plain WSGI environment.\n\nThe following formats are currently supported by the form data parser:\n\n- `application/x-www-form-urlencoded`\n- `multipart/form-data`\n\nNested multipart is not currently supported (Werkzeug 0.9), but it isn’t used by any of the modern web browsers.\n\nUsage example:\n\n``` python\n>>> from io import BytesIO\n>>> from werkzeug.formparser import parse_form_data\n>>> data = (\n...     b'--foo\\r\\nContent-Disposition: form-data; name=\"test\"\\r\\n'\n...     b\"\\r\\nHello World!\\r\\n--foo--\"\n... )\n>>> environ = {\n...     \"wsgi.input\": BytesIO(data),\n...     \"CONTENT_LENGTH\": str(len(data)),\n...     \"CONTENT_TYPE\": \"multipart/form-data; boundary=foo\",\n...     \"REQUEST_METHOD\": \"POST\",\n... }\n>>> stream, form, files = parse_form_data(environ)\n>>> stream.read()\nb''\n>>> form['test']\n'Hello World!'\n>>> not files\nTrue\n```\n\nNormally the WSGI environment is provided by the WSGI gateway with the incoming data as part of it. If you want to generate such fake-WSGI environments for unittesting you might want to use the `create_environ()` function or the `EnvironBuilder` instead.\n\n`class werkzeug.formparser.FormDataParser(stream_factory=None, max_form_memory_size=None, max_content_length=None, cls=None, silent=True, *, max_form_parts=None)`  \nThis class implements parsing of form data for Werkzeug. By itself it can parse multipart and url encoded form data. It can be subclassed and extended but for most mimetypes it is a better idea to use the untouched stream and expose it as separate attributes on a request object.\n\nParameters:  \n- **stream_factory** (*TStreamFactory* *\\|* *None*) – An optional callable that returns a new read and writeable file descriptor. This callable works the same as `Response._get_file_stream()`.\n- **max_form_memory_size** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) – the maximum number of bytes to be accepted for in-memory stored form data. If the data exceeds the value specified an `RequestEntityTooLarge` exception is raised.\n- **max_content_length** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) – If this is provided and the transmitted data is longer than this value an `RequestEntityTooLarge` exception is raised.\n- **cls** ([type](https://docs.python.org/3/library/functions.html#type \"(in Python v3.11)\")*\\[*[MultiDict](../datastructures/index#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\")*\\]* *\\|* *None*) – an optional dict class to use. If this is not specified or `None` the default `MultiDict` is used.\n- **silent** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – If set to False parsing errors will not be caught.\n- **max_form_parts** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) – The maximum number of multipart parts to be parsed. If this is exceeded, a `RequestEntityTooLarge` exception is raised.\n\nChanged in version 3.0: The `charset` and `errors` parameters were removed.\n\nChanged in version 3.0: The `parse_functions` attribute and `get_parse_func` methods were removed.\n\nChangelog\n\nChanged in version 2.2.3: Added the `max_form_parts` parameter.\n\nNew in version 0.8.\n\n&nbsp;\n\n`werkzeug.formparser.parse_form_data(environ, stream_factory=None, max_form_memory_size=None, max_content_length=None, cls=None, silent=True, *, max_form_parts=None)`  \nParse the form data in the environ and return it as tuple in the form `(stream, form, files)`. You should only call this method if the transport method is `POST`, `PUT`, or `PATCH`.\n\nIf the mimetype of the data transmitted is `multipart/form-data` the files multidict will be filled with `FileStorage` objects. If the mimetype is unknown the input stream is wrapped and returned as first argument, else the stream is empty.\n\nThis is a shortcut for the common usage of [`FormDataParser`](#werkzeug.formparser.FormDataParser \"werkzeug.formparser.FormDataParser\").\n\nParameters:  \n- **environ** (*WSGIEnvironment*) – the WSGI environment to be used for parsing.\n- **stream_factory** (*TStreamFactory* *\\|* *None*) – An optional callable that returns a new read and writeable file descriptor. This callable works the same as `Response._get_file_stream()`.\n- **max_form_memory_size** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) – the maximum number of bytes to be accepted for in-memory stored form data. If the data exceeds the value specified an `RequestEntityTooLarge` exception is raised.\n- **max_content_length** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) – If this is provided and the transmitted data is longer than this value an `RequestEntityTooLarge` exception is raised.\n- **cls** ([type](https://docs.python.org/3/library/functions.html#type \"(in Python v3.11)\")*\\[*[MultiDict](../datastructures/index#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\")*\\]* *\\|* *None*) – an optional dict class to use. If this is not specified or `None` the default `MultiDict` is used.\n- **silent** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – If set to False parsing errors will not be caught.\n- **max_form_parts** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) – The maximum number of multipart parts to be parsed. If this is exceeded, a `RequestEntityTooLarge` exception is raised.\n\nReturns:  \nA tuple in the form `(stream, form, files)`.\n\nReturn type:  \nt_parse_result\n\nChanged in version 3.0: The `charset` and `errors` parameters were removed.\n\nChangelog\n\nChanged in version 2.3: Added the `max_form_parts` parameter.\n\nNew in version 0.5.1: Added the `silent` parameter.\n\nNew in version 0.5: Added the `max_form_memory_size`, `max_content_length`, and `cls` parameters.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/http/](https://werkzeug.palletsprojects.com/en/3.0.x/http/)"
- name: http_date()
  id: http/index#werkzeug.http.http_date
  summary: Format a datetime object or timestamp into an RFC 2822 date string
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.http_date(timestamp=None)`

    Format a datetime object or timestamp into an [**RFC 2822**](https://datatracker.ietf.org/doc/html/rfc2822.html) date string.

    This is a wrapper for [`email.utils.format_datetime()`](https://docs.python.org/3/library/email.utils.html#email.utils.format_datetime "(in Python v3.11)"). It assumes naive datetime objects are in UTC instead of raising an exception.

    Parameters:

    **timestamp** ([datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime "(in Python v3.11)") *\|* [date](https://docs.python.org/3/library/datetime.html#datetime.date "(in Python v3.11)") *\|* [int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* [float](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)") *\|* [struct_time](https://docs.python.org/3/library/time.html#time.struct_time "(in Python v3.11)") *\|* *None*) – The datetime or timestamp to format. Defaults to the current time.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")

    Changelog

    Changed in version 2.0: Use `email.utils.format_datetime`. Accept `date` objects.

    ## Header Parsing

    The following functions can be used to parse incoming HTTP headers. Because Python does not provide data structures with the semantics required by [**RFC 2616**](https://datatracker.ietf.org/doc/html/rfc2616.html), Werkzeug implements some custom data structures that are [documented separately](../datastructures/index#http-datastructures).
- name: HTTPException.__call__()
  id: exceptions/index#werkzeug.exceptions.HTTPException.__call__
  summary: Call the exception as WSGI application
  belongs_to: HTTP Exceptions
  description: |-
    `__call__(environ, start_response)`

    Call the exception as WSGI application.

    Parameters:

    - **environ** (*WSGIEnvironment*) – the WSGI environment.
    - **start_response** (*StartResponse*) – the response callable provided by the WSGI server.

    Return type:

    t.Iterable\[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.11)")\]
- name: HTTPException.get_response()
  id: exceptions/index#werkzeug.exceptions.HTTPException.get_response
  summary: Get a response object
  belongs_to: HTTP Exceptions
  description: |-
    `get_response(environ=None, scope=None)`

    Get a response object. If one was passed to the exception it’s returned directly.

    Parameters:

    - **environ** (*WSGIEnvironment* *\|* *WSGIRequest* *\|* *None*) – the optional environ for the request. This can be used to modify the response depending on how the request looked like.
    - **scope** ([dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)") *\|* *None*) –

    Returns:

    a `Response` object or a subclass thereof.

    Return type:

    [Response](../wrappers/index#werkzeug.wrappers.Response "werkzeug.wrappers.Response")

    ## Special HTTP Exceptions

    Starting with Werkzeug 0.3 some of the builtin classes raise exceptions that look like regular python exceptions (eg [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "(in Python v3.11)")) but are [`BadRequest`](#werkzeug.exceptions.BadRequest "werkzeug.exceptions.BadRequest") HTTP exceptions at the same time. This decision was made to simplify a common pattern where you want to abort if the client tampered with the submitted form data in a way that the application can’t recover properly and should abort with `400 BAD REQUEST`.

    Assuming the application catches all HTTP exceptions and reacts to them properly a view function could do the following safely and doesn’t have to check if the keys exist:

    ``` python
    def new_post(request):
        post = Post(title=request.form['title'], body=request.form['body'])
        post.save()
        return redirect(post.url)
    ```

    If `title` or `body` are missing in the form, a special key error will be raised which behaves like a [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "(in Python v3.11)") but also a [`BadRequest`](#werkzeug.exceptions.BadRequest "werkzeug.exceptions.BadRequest") exception.

    `exception werkzeug.exceptions.BadRequestKeyError(arg=None, *args, **kwargs)`

    An exception that is used to signal both a [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "(in Python v3.11)") and a [`BadRequest`](#werkzeug.exceptions.BadRequest "werkzeug.exceptions.BadRequest"). Used by many of the datastructures.

    Parameters:

    - **arg** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
    - **args** (*t.Any*) –
    - **kwargs** (*t.Any*) –

    ## Simple Aborting

    Sometimes it’s convenient to just raise an exception by the error code, without importing the exception and looking up the name etc. For this purpose there is the [`abort()`](#werkzeug.exceptions.abort "werkzeug.exceptions.abort") function.
- name: IfRange
  id: datastructures/index#werkzeug.datastructures.IfRange
  summary: Very simple object that represents the If-Range header in parsed form
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.IfRange(etag=None, date=None)`

    Very simple object that represents the `If-Range` header in parsed form. It will either have neither a etag or date or one of either but never both.

    Changelog

    New in version 0.7.
- name: IfRange.date
  id: datastructures/index#werkzeug.datastructures.IfRange.date
  summary: The date in parsed format or None
  belongs_to: Data Structures
  description: |-
    `date`

    The date in parsed format or `None`.
- name: IfRange.etag
  id: datastructures/index#werkzeug.datastructures.IfRange.etag
  summary: The etag parsed and unquoted
  belongs_to: Data Structures
  description: |-
    `etag`

    The etag parsed and unquoted. Ranges always operate on strong etags so the weakness information is not necessary.
- name: IfRange.to_header()
  id: datastructures/index#werkzeug.datastructures.IfRange.to_header
  summary: Converts the object back into an HTTP header
  belongs_to: Data Structures
  description: |-
    `to_header()`

    Converts the object back into an HTTP header.
- name: ImmutableDict
  id: datastructures/index#werkzeug.datastructures.ImmutableDict
  summary: An immutable dict
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.ImmutableDict`

    An immutable [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)").

    Changelog

    New in version 0.5.
- name: ImmutableDict.copy()
  id: datastructures/index#werkzeug.datastructures.ImmutableDict.copy
  summary: Return a shallow mutable copy of this object
  belongs_to: Data Structures
  description: |-
    `copy()`

    Return a shallow mutable copy of this object. Keep in mind that the standard library’s [`copy()`](#werkzeug.datastructures.ImmutableDict.copy "werkzeug.datastructures.ImmutableDict.copy") function is a no-op for this class like for any other python immutable type (eg: [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")).
- name: ImmutableList
  id: datastructures/index#werkzeug.datastructures.ImmutableList
  summary: An immutable list
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.ImmutableList(iterable=(), /)`

    An immutable [`list`](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)").

    Changelog

    New in version 0.5.

    Private:
- name: ImmutableMultiDict
  id: datastructures/index#werkzeug.datastructures.ImmutableMultiDict
  summary: An immutable MultiDict
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.ImmutableMultiDict(mapping=None)`

    An immutable [`MultiDict`](#werkzeug.datastructures.MultiDict "werkzeug.datastructures.MultiDict").

    Changelog

    New in version 0.5.
- name: ImmutableMultiDict.copy()
  id: datastructures/index#werkzeug.datastructures.ImmutableMultiDict.copy
  summary: Return a shallow mutable copy of this object
  belongs_to: Data Structures
  description: |-
    `copy()`

    Return a shallow mutable copy of this object. Keep in mind that the standard library’s [`copy()`](#werkzeug.datastructures.ImmutableMultiDict.copy "werkzeug.datastructures.ImmutableMultiDict.copy") function is a no-op for this class like for any other python immutable type (eg: [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")).
- name: ImmutableOrderedMultiDict
  id: datastructures/index#werkzeug.datastructures.ImmutableOrderedMultiDict
  summary: An immutable OrderedMultiDict
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.ImmutableOrderedMultiDict(mapping=None)`

    An immutable [`OrderedMultiDict`](#werkzeug.datastructures.OrderedMultiDict "werkzeug.datastructures.OrderedMultiDict").

    Changelog

    New in version 0.6.
- name: ImmutableOrderedMultiDict.copy()
  id: datastructures/index#werkzeug.datastructures.ImmutableOrderedMultiDict.copy
  summary: Return a shallow mutable copy of this object
  belongs_to: Data Structures
  description: |-
    `copy()`

    Return a shallow mutable copy of this object. Keep in mind that the standard library’s [`copy()`](#werkzeug.datastructures.ImmutableOrderedMultiDict.copy "werkzeug.datastructures.ImmutableOrderedMultiDict.copy") function is a no-op for this class like for any other python immutable type (eg: [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")).
- name: ImmutableTypeConversionDict
  id: datastructures/index#werkzeug.datastructures.ImmutableTypeConversionDict
  summary: Works like a TypeConversionDict but does not support modifications
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.ImmutableTypeConversionDict`

    Works like a [`TypeConversionDict`](#werkzeug.datastructures.TypeConversionDict "werkzeug.datastructures.TypeConversionDict") but does not support modifications.

    Changelog

    New in version 0.5.
- name: ImmutableTypeConversionDict.copy()
  id: datastructures/index#werkzeug.datastructures.ImmutableTypeConversionDict.copy
  summary: Return a shallow mutable copy of this object
  belongs_to: Data Structures
  description: |-
    `copy()`

    Return a shallow mutable copy of this object. Keep in mind that the standard library’s [`copy()`](#werkzeug.datastructures.ImmutableTypeConversionDict.copy "werkzeug.datastructures.ImmutableTypeConversionDict.copy") function is a no-op for this class like for any other python immutable type (eg: [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")).
- name: import_string()
  id: utils/index#werkzeug.utils.import_string
  summary: Imports an object based on a string
  belongs_to: Utilities
  description: |-
    `werkzeug.utils.import_string(import_name, silent=False)`

    Imports an object based on a string. This is useful if you want to use import paths as endpoints or something similar. An import path can be specified either in dotted notation (`xml.sax.saxutils.escape`) or with a colon as object delimiter (`xml.sax.saxutils:escape`).

    If `silent` is True the return value will be `None` if the import fails.

    Parameters:

    - **import_name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – the dotted name for the object to import.
    - **silent** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – if set to `True` import errors are ignored and `None` is returned instead.

    Returns:

    imported object

    Return type:

    [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")
- name: Important Terms
  id: terms/index
  summary: This page covers important terms used in the documentation and Werkzeug itself
  description: "# Important Terms\n\nThis page covers important terms used in the documentation and Werkzeug itself.\n\n## WSGI\n\nWSGI a specification for Python web applications Werkzeug follows. It was specified in the [**PEP 3333**](https://peps.python.org/pep-3333/) and is widely supported. Unlike previous solutions it guarantees that web applications, servers and utilities can work together.\n\n## Response Object\n\nFor Werkzeug, a response object is an object that works like a WSGI application but does not do any request processing. Usually you have a view function or controller method that processes the request and assembles a response object.\n\nA response object is *not* necessarily the `Response` class or a subclass thereof.\n\nFor example Pylons/webob provide a very similar response class that can be used as well (`webob.Response`).\n\n## View Function\n\nOften people speak of MVC (Model, View, Controller) when developing web applications. However, the Django framework coined MTV (Model, Template, View) which basically means the same but reduces the concept to the data model, a function that processes data from the request and the database and renders a template.\n\nWerkzeug itself does not tell you how you should develop applications, but the documentation often speaks of view functions that work roughly the same. The idea of a view function is that it’s called with a request object (and optionally some parameters from an URL rule) and returns a response object.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/terms/](https://werkzeug.palletsprojects.com/en/3.0.x/terms/)"
- name: Installation
  id: installation/index
  summary: We recommend using the latest version of Python
  description: "# Installation\n\n## Python Version\n\nWe recommend using the latest version of Python. Werkzeug supports Python 3.8 and newer.\n\n### Optional dependencies\n\nThese distributions will not be installed automatically. Werkzeug will detect and use them if you install them.\n\n- [Colorama](https://pypi.org/project/colorama/) provides request log highlighting when using the development server on Windows. This works automatically on other systems.\n- [Watchdog](https://pypi.org/project/watchdog/) provides a faster, more efficient reloader for the development server.\n\n### greenlet\n\nYou may choose to use gevent or eventlet with your application. In this case, greenlet\\>=1.0 is required. When using PyPy, PyPy\\>=7.3.7 is required.\n\nThese are not minimum supported versions, they only indicate the first versions that added necessary features. You should use the latest versions of each.\n\n## Virtual environments\n\nUse a virtual environment to manage the dependencies for your project, both in development and in production.\n\nWhat problem does a virtual environment solve? The more Python projects you have, the more likely it is that you need to work with different versions of Python libraries, or even Python itself. Newer versions of libraries for one project can break compatibility in another project.\n\nVirtual environments are independent groups of Python libraries, one for each project. Packages installed for one project will not affect other projects or the operating system’s packages.\n\nPython comes bundled with the [`venv`](https://docs.python.org/3/library/venv.html#module-venv \"(in Python v3.11)\") module to create virtual environments.\n\n### Create an environment\n\nCreate a project folder and a `venv` folder within:\n\n``` sh\nmkdir myproject\ncd myproject\npython3 -m venv venv\n```\n\nOn Windows:\n\n``` bat\npy -3 -m venv venv\n```\n\n### Activate the environment\n\nBefore you work on your project, activate the corresponding environment:\n\n``` sh\n. venv/bin/activate\n```\n\nOn Windows:\n\n``` bat\nvenv\\Scripts\\activate\n```\n\nYour shell prompt will change to show the name of the activated environment.\n\n## Install Werkzeug\n\nWithin the activated environment, use the following command to install Werkzeug:\n\n``` sh\npip install Werkzeug\n```\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/installation/](https://werkzeug.palletsprojects.com/en/3.0.x/installation/)"
- name: IntegerConverter
  id: routing/index#werkzeug.routing.IntegerConverter
  summary: By default it only accepts unsigned, positive values
  belongs_to: URL Routing
  description: |-
    `class werkzeug.routing.IntegerConverter(map, fixed_digits=0, min=None, max=None, signed=False)`

    This converter only accepts integer values:

    ``` python
    Rule("/page/<int:page>")
    ```

    By default it only accepts unsigned, positive values. The `signed` parameter will enable signed, negative values.

    ``` python
    Rule("/page/<int(signed=True):page>")
    ```

    Parameters:

    - **map** ([Map](#werkzeug.routing.Map "werkzeug.routing.Map")) – The [`Map`](#werkzeug.routing.Map "werkzeug.routing.Map").
    - **fixed_digits** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")) – The number of fixed digits in the URL. If you set this to `4` for example, the rule will only match if the URL looks like `/0001/`. The default is variable length.
    - **min** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* *None*) – The minimal value.
    - **max** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* *None*) – The maximal value.
    - **signed** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Allow signed (negative) values.

    Changelog

    New in version 0.15: The `signed` parameter.
- name: InternalServerError.original_exception
  id: exceptions/index#werkzeug.exceptions.InternalServerError.original_exception
  summary: The original exception that caused this 500 error
  belongs_to: HTTP Exceptions
  description: |-
    `original_exception`

    The original exception that caused this 500 error. Can be used by frameworks to provide context when handling unexpected errors.

    `exception werkzeug.exceptions.NotImplemented(description=None, response=None)`

    *501* `Not Implemented`

    Raise if the application does not support the action requested by the browser.

    Parameters:

    - **description** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
    - **response** ([Response](../wrappers/index#werkzeug.wrappers.Response "werkzeug.wrappers.Response") *\|* *None*) –

    Return type:

    None

    `exception werkzeug.exceptions.BadGateway(description=None, response=None)`

    *502* `Bad Gateway`

    If you do proxying in your application you should return this status code if you received an invalid response from the upstream server it accessed in attempting to fulfill the request.

    Parameters:

    - **description** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
    - **response** ([Response](../wrappers/index#werkzeug.wrappers.Response "werkzeug.wrappers.Response") *\|* *None*) –

    Return type:

    None

    `exception werkzeug.exceptions.ServiceUnavailable(description=None, response=None, retry_after=None)`

    *503* `Service Unavailable`

    Status code you should return if a service is temporarily unavailable.

    Parameters:

    - **retry_after** (*datetime* *\|* [int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* *None*) – If given, set the `Retry-After` header to this value. May be an [`int`](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") number of seconds or a [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "(in Python v3.11)").
    - **description** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
    - **response** ([Response](../wrappers/index#werkzeug.wrappers.Response "werkzeug.wrappers.Response") *\|* *None*) –

    Return type:

    None

    Changelog

    Changed in version 1.0: Added `retry_after` parameter.

    `exception werkzeug.exceptions.GatewayTimeout(description=None, response=None)`

    *504* `Gateway Timeout`

    Status code you should return if a connection to an upstream server times out.

    Parameters:

    - **description** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
    - **response** ([Response](../wrappers/index#werkzeug.wrappers.Response "werkzeug.wrappers.Response") *\|* *None*) –

    Return type:

    None

    `exception werkzeug.exceptions.HTTPVersionNotSupported(description=None, response=None)`

    *505* `HTTP Version Not Supported`

    The server does not support the HTTP protocol version used in the request.

    Parameters:

    - **description** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
    - **response** ([Response](../wrappers/index#werkzeug.wrappers.Response "werkzeug.wrappers.Response") *\|* *None*) –

    Return type:

    None

    `exception werkzeug.exceptions.ClientDisconnected(description=None, response=None)`

    Internal exception that is raised if Werkzeug detects a disconnected client. Since the client is already gone at that point attempting to send the error message to the client might not work and might ultimately result in another exception in the server. Mainly this is here so that it is silenced by default as far as Werkzeug is concerned.

    Since disconnections cannot be reliably detected and are unspecified by WSGI to a large extent this might or might not be raised if a client is gone.

    Changelog

    New in version 0.8.

    Parameters:

    - **description** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
    - **response** ([Response](../wrappers/index#werkzeug.wrappers.Response "werkzeug.wrappers.Response") *\|* *None*) –

    Return type:

    None

    `exception werkzeug.exceptions.SecurityError(description=None, response=None)`

    Raised if something triggers a security error. This is otherwise exactly like a bad request error.

    Changelog

    New in version 0.9.

    Parameters:

    - **description** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
    - **response** ([Response](../wrappers/index#werkzeug.wrappers.Response "werkzeug.wrappers.Response") *\|* *None*) –

    Return type:

    None

    ## Baseclass

    All the exceptions implement this common interface:

    `exception werkzeug.exceptions.HTTPException(description=None, response=None)`

    The base class for all HTTP exceptions. This exception can be called as a WSGI application to render a default error page or you can catch the subclasses of it independently and render nicer error messages.

    Changelog

    Changed in version 2.1: Removed the `wrap` class method.

    Parameters:

    - **description** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
    - **response** ([Response](../wrappers/index#werkzeug.wrappers.Response "werkzeug.wrappers.Response") *\|* *None*) –

    Return type:

    None
- name: iri_to_uri()
  id: urls/index#werkzeug.urls.iri_to_uri
  summary: Convert an IRI to a URI
  belongs_to: URL Helpers
  description: |-
    `werkzeug.urls.iri_to_uri(iri)`

    Convert an IRI to a URI. All non-ASCII and unsafe characters are quoted. If the URL has a domain, it is encoded to Punycode.

    ``` python
    >>> iri_to_uri('http://\u2603.net/p\xe5th?q=\xe8ry%DF')
    'http://xn--n3h.net/p%C3%A5th?q=%C3%A8ry%DF'
    ```

    Parameters:

    **iri** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The IRI to convert.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")

    Changed in version 3.0: Passing a tuple or bytes, the `charset` and `errors` parameters, and the `safe_conversion` parameter, are removed.

    Changelog

    Changed in version 2.3: Which characters remain unquoted is specific to each part of the URL.

    Changed in version 0.15: All reserved characters remain unquoted. Previously, only some reserved characters were left unquoted.

    Changed in version 0.9.6: The `safe_conversion` parameter was added.

    New in version 0.6.
- name: is_byte_range_valid()
  id: http/index#werkzeug.http.is_byte_range_valid
  summary: Checks if a given byte content range is valid for the given length
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.is_byte_range_valid(start, stop, length)`

    Checks if a given byte content range is valid for the given length.

    Changelog

    New in version 0.7.

    Parameters:

    - **start** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* *None*) –
    - **stop** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* *None*) –
    - **length** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* *None*) –

    Return type:

    [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")
- name: is_entity_header()
  id: http/index#werkzeug.http.is_entity_header
  summary: Check if a header is an entity header
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.is_entity_header(header)`

    Check if a header is an entity header.

    Changelog

    New in version 0.5.

    Parameters:

    **header** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – the header to test.

    Returns:

    `True` if it’s an entity header, `False` otherwise.

    Return type:

    [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")
- name: is_hop_by_hop_header()
  id: http/index#werkzeug.http.is_hop_by_hop_header
  summary: Check if a header is an HTTP/1.1 “Hop-by-Hop” header
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.is_hop_by_hop_header(header)`

    Check if a header is an HTTP/1.1 “Hop-by-Hop” header.

    Changelog

    New in version 0.5.

    Parameters:

    **header** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – the header to test.

    Returns:

    `True` if it’s an HTTP/1.1 “Hop-by-Hop” header, `False` otherwise.

    Return type:

    [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")
- name: is_resource_modified()
  id: http/index#werkzeug.http.is_resource_modified
  summary: Convenience method for conditional requests
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.is_resource_modified(environ, etag=None, data=None, last_modified=None, ignore_if_range=True)`

    Convenience method for conditional requests.

    Parameters:

    - **environ** (*WSGIEnvironment*) – the WSGI environment of the request to be checked.
    - **etag** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – the etag for the response for comparison.
    - **data** ([bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.11)") *\|* *None*) – or alternatively the data of the response to automatically generate an etag using [`generate_etag()`](#werkzeug.http.generate_etag "werkzeug.http.generate_etag").
    - **last_modified** (*datetime* *\|* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – an optional date of the last modification.
    - **ignore_if_range** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – If `False`, `If-Range` header will be taken into account.

    Returns:

    `True` if the resource was modified, otherwise `False`.

    Return type:

    [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")

    Changelog

    Changed in version 2.0: SHA-1 is used to generate an etag value for the data. MD5 may not be available in some environments.

    Changed in version 1.0.0: The check is run for methods other than `GET` and `HEAD`.

    ## Constants

    `werkzeug.http.HTTP_STATUS_CODES`

    A dict of status code -\> default status message pairs. This is used by the wrappers and other places where an integer status code is expanded to a string throughout Werkzeug.

    ## Form Data Parsing

    Werkzeug provides the form parsing functions separately from the request object so that you can access form data from a plain WSGI environment.

    The following formats are currently supported by the form data parser:

    - `application/x-www-form-urlencoded`
    - `multipart/form-data`

    Nested multipart is not currently supported (Werkzeug 0.9), but it isn’t used by any of the modern web browsers.

    Usage example:

    ``` python
    >>> from io import BytesIO
    >>> from werkzeug.formparser import parse_form_data
    >>> data = (
    ...     b'--foo\r\nContent-Disposition: form-data; name="test"\r\n'
    ...     b"\r\nHello World!\r\n--foo--"
    ... )
    >>> environ = {
    ...     "wsgi.input": BytesIO(data),
    ...     "CONTENT_LENGTH": str(len(data)),
    ...     "CONTENT_TYPE": "multipart/form-data; boundary=foo",
    ...     "REQUEST_METHOD": "POST",
    ... }
    >>> stream, form, files = parse_form_data(environ)
    >>> stream.read()
    b''
    >>> form['test']
    'Hello World!'
    >>> not files
    True
    ```

    Normally the WSGI environment is provided by the WSGI gateway with the incoming data as part of it. If you want to generate such fake-WSGI environments for unittesting you might want to use the `create_environ()` function or the `EnvironBuilder` instead.
- name: is_running_from_reloader()
  id: serving/index#werkzeug.serving.is_running_from_reloader
  summary: Check if the server is running as a subprocess within the Werkzeug reloader
  belongs_to: Serving WSGI Applications
  description: |-
    `werkzeug.serving.is_running_from_reloader()`

    Check if the server is running as a subprocess within the Werkzeug reloader.

    Changelog

    New in version 0.10.

    Return type:

    [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")
- name: LanguageAccept
  id: datastructures/index#werkzeug.datastructures.LanguageAccept
  summary: Like Accept but with normalization for language tags
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.LanguageAccept(values=())`

    Like [`Accept`](#werkzeug.datastructures.Accept "werkzeug.datastructures.Accept") but with normalization for language tags.
- name: LimitedStream
  id: wsgi/index#werkzeug.wsgi.LimitedStream
  summary: Wrap a stream so that it doesn’t read more than a given limit
  belongs_to: WSGI Helpers
  description: |-
    `class werkzeug.wsgi.LimitedStream(stream, limit, is_max=False)`

    Wrap a stream so that it doesn’t read more than a given limit. This is used to limit `wsgi.input` to the `Content-Length` header value or [`Request.max_content_length`](../wrappers/index#werkzeug.wrappers.Request.max_content_length "werkzeug.wrappers.Request.max_content_length").

    When attempting to read after the limit has been reached, [`on_exhausted()`](#werkzeug.wsgi.LimitedStream.on_exhausted "werkzeug.wsgi.LimitedStream.on_exhausted") is called. When the limit is a maximum, this raises [`RequestEntityTooLarge`](../exceptions/index#werkzeug.exceptions.RequestEntityTooLarge "werkzeug.exceptions.RequestEntityTooLarge").

    If reading from the stream returns zero bytes or raises an error, [`on_disconnect()`](#werkzeug.wsgi.LimitedStream.on_disconnect "werkzeug.wsgi.LimitedStream.on_disconnect") is called, which raises [`ClientDisconnected`](../exceptions/index#werkzeug.exceptions.ClientDisconnected "werkzeug.exceptions.ClientDisconnected"). When the limit is a maximum and zero bytes were read, no error is raised, since it may be the end of the stream.

    If the limit is reached before the underlying stream is exhausted (such as a file that is too large, or an infinite stream), the remaining contents of the stream cannot be read safely. Depending on how the server handles this, clients may show a “connection reset” failure instead of seeing the 413 response.

    Parameters:

    - **stream** (*t.IO\[*[bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.11)")*\]*) – The stream to read from. Must be a readable binary IO object.
    - **limit** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")) – The limit in bytes to not read past. Should be either the `Content-Length` header value or `request.max_content_length`.
    - **is_max** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Whether the given `limit` is `request.max_content_length` instead of the `Content-Length` header value. This changes how exhausted and disconnect events are handled.

    Changelog

    Changed in version 2.3: Handle `max_content_length` differently than `Content-Length`.

    Changed in version 2.3: Implements `io.RawIOBase` rather than `io.IOBase`.
- name: LimitedStream.exhaust()
  id: wsgi/index#werkzeug.wsgi.LimitedStream.exhaust
  summary: Exhaust the stream by reading until the limit is reached or the client disconnects, returning the remaining data
  belongs_to: WSGI Helpers
  description: |-
    `exhaust()`

    Exhaust the stream by reading until the limit is reached or the client disconnects, returning the remaining data.

    Changelog

    Changed in version 2.3: Return the remaining data.

    Changed in version 2.2.3: Handle case where wrapped stream returns fewer bytes than requested.

    Return type:

    [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.11)")

    `property is_exhausted: bool`

    Whether the current stream position has reached the limit.
- name: LimitedStream.on_disconnect()
  id: wsgi/index#werkzeug.wsgi.LimitedStream.on_disconnect
  summary: Called when an attempted read receives zero bytes before the limit was reached
  belongs_to: WSGI Helpers
  description: |-
    `on_disconnect(error=None)`

    Called when an attempted read receives zero bytes before the limit was reached. This indicates that the client disconnected before sending the full request body.

    The default behavior is to raise [`ClientDisconnected`](../exceptions/index#werkzeug.exceptions.ClientDisconnected "werkzeug.exceptions.ClientDisconnected"), unless the limit is a maximum and no error was raised.

    Changelog

    Changed in version 2.3: Added the `error` parameter. Do nothing if the limit is a maximum and no error was raised.

    Changed in version 2.3: Any return value is ignored.

    Parameters:

    **error** ([Exception](https://docs.python.org/3/library/exceptions.html#Exception "(in Python v3.11)") *\|* *None*) –

    Return type:

    None
- name: LimitedStream.on_exhausted()
  id: wsgi/index#werkzeug.wsgi.LimitedStream.on_exhausted
  summary: Called when attempting to read after the limit has been reached
  belongs_to: WSGI Helpers
  description: |-
    `on_exhausted()`

    Called when attempting to read after the limit has been reached.

    The default behavior is to do nothing, unless the limit is a maximum, in which case it raises [`RequestEntityTooLarge`](../exceptions/index#werkzeug.exceptions.RequestEntityTooLarge "werkzeug.exceptions.RequestEntityTooLarge").

    Changelog

    Changed in version 2.3: Raises `RequestEntityTooLarge` if the limit is a maximum.

    Changed in version 2.3: Any return value is ignored.

    Return type:

    None
- name: LimitedStream.readable()
  id: wsgi/index#werkzeug.wsgi.LimitedStream.readable
  summary: Return whether object was opened for reading
  belongs_to: WSGI Helpers
  description: |-
    `readable()`

    Return whether object was opened for reading.

    If False, read() will raise OSError.

    Return type:

    [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")
- name: LimitedStream.readall()
  id: wsgi/index#werkzeug.wsgi.LimitedStream.readall
  summary: Read until EOF, using multiple read() call
  belongs_to: WSGI Helpers
  description: |-
    `readall()`

    Read until EOF, using multiple read() call.

    Return type:

    [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.11)")
- name: LimitedStream.tell()
  id: wsgi/index#werkzeug.wsgi.LimitedStream.tell
  summary: Return the current stream position
  belongs_to: WSGI Helpers
  description: |-
    `tell()`

    Return the current stream position.

    Changelog

    New in version 0.9.

    Return type:

    [int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")
- name: LintMiddleware
  id: middleware/lint/index#werkzeug.middleware.lint.LintMiddleware
  summary: Warns about common errors in the WSGI and HTTP behavior of the server and wrapped application
  belongs_to: WSGI Protocol Linter
  description: "`class werkzeug.middleware.lint.LintMiddleware(app)`\n\nWarns about common errors in the WSGI and HTTP behavior of the server and wrapped application. Some of the issues it checks are:\n\n- invalid status codes\n- non-bytes sent to the WSGI server\n- strings returned from the WSGI application\n- non-empty conditional responses\n- unquoted etags\n- relative URLs in the Location header\n- unsafe calls to wsgi.input\n- unclosed iterators\n\nError information is emitted using the [`warnings`](https://docs.python.org/3/library/warnings.html#module-warnings \"(in Python v3.11)\") module.\n\nParameters:\n\n**app** (*WSGIApplication*) – The WSGI application to wrap.\n\n``` python\nfrom werkzeug.middleware.lint import LintMiddleware\napp = LintMiddleware(app)\n```\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/middleware/lint/](https://werkzeug.palletsprojects.com/en/3.0.x/middleware/lint/)"
- name: make_ssl_devcert()
  id: serving/index#werkzeug.serving.make_ssl_devcert
  summary: Creates an SSL key for development
  belongs_to: Serving WSGI Applications
  description: "`werkzeug.serving.make_ssl_devcert(base_path, host=None, cn=None)`\n\nCreates an SSL key for development. This should be used instead of the `'adhoc'` key which generates a new cert on each server start. It accepts a path for where it should store the key and cert and either a host or CN. If a host is given it will use the CN `*.host/CN=host`.\n\nFor more information see [`run_simple()`](#werkzeug.serving.run_simple \"werkzeug.serving.run_simple\").\n\nChangelog\n\nNew in version 0.9.\n\nParameters:\n\n- **base_path** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – the path to the certificate and key. The extension `.crt` is added for the certificate, `.key` is added for the key.\n- **host** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – the name of the host. This can be used as an alternative for the `cn`.\n- **cn** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – the `CN` to use.\n\nReturn type:\n\n[tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\"), [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\\]\n\nInformation\n\nThe development server is not intended to be used on production systems. It was designed especially for development purposes and performs poorly under high load. For deployment setups have a look at the [Deploying to Production](../deployment/index) pages.\n\n## Reloader\n\nChangelog\n\nChanged in version 0.10.\n\nThe Werkzeug reloader constantly monitors modules and paths of your web application, and restarts the server if any of the observed files change.\n\nSince version 0.10, there are two backends the reloader supports: `stat` and `watchdog`.\n\n- The default `stat` backend simply checks the `mtime` of all files in a regular interval. This is sufficient for most cases, however, it is known to drain a laptop’s battery.\n- The `watchdog` backend uses filesystem events, and is much faster than `stat`. It requires the [watchdog](https://pypi.org/project/watchdog/) module to be installed. The recommended way to achieve this is to add `Werkzeug[watchdog]` to your requirements file.\n\nIf `watchdog` is installed and available it will automatically be used instead of the builtin `stat` reloader.\n\nTo switch between the backends you can use the `reloader_type` parameter of the [`run_simple()`](#werkzeug.serving.run_simple \"werkzeug.serving.run_simple\") function. `'stat'` sets it to the default stat based polling and `'watchdog'` forces it to the watchdog backend.\n\nNote\n\nSome edge cases, like modules that failed to import correctly, are not handled by the stat reloader for performance reasons. The watchdog reloader monitors such files too.\n\n## Colored Logging\n\nThe development server highlights the request logs in different colors based on the status code. On Windows, [Colorama](https://pypi.org/project/colorama/) must be installed as well to enable this.\n\n## Virtual Hosts\n\nMany web applications utilize multiple subdomains. This can be a bit tricky to simulate locally. Fortunately there is the [hosts file](https://en.wikipedia.org/wiki/Hosts_file) that can be used to assign the local computer multiple names.\n\nThis allows you to call your local computer `yourapplication.local` and `api.yourapplication.local` (or anything else) in addition to `localhost`.\n\nYou can find the hosts file on the following location:\n\n|              |                                           |\n|--------------|-------------------------------------------|\n| Windows      | `%SystemRoot%\\system32\\drivers\\etc\\hosts` |\n| Linux / OS X | `/etc/hosts`                              |\n\nYou can open the file with your favorite text editor and add a new name after `localhost`:\n\n``` python\n127.0.0.1       localhost yourapplication.local api.yourapplication.local\n```\n\nSave the changes and after a while you should be able to access the development server on these host names as well. You can use the [URL Routing](../routing/index) system to dispatch between different hosts or parse `request.host` yourself.\n\n## Shutting Down The Server\n\nIn some cases it can be useful to shut down a server after handling a request. For example, a local command line tool that needs OAuth authentication could temporarily start a server to listen for a response, record the user’s token, then stop the server.\n\nOne method to do this could be to start a server in a [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing \"(in Python v3.11)\") process, then terminate the process after a value is passed back to the parent.\n\n``` python\nimport multiprocessing\nfrom werkzeug import Request, Response, run_simple\n\ndef get_token(q: multiprocessing.Queue) -> None:\n    @Request.application\n    def app(request: Request) -> Response:\n        q.put(request.args[\"token\"])\n        return Response(\"\", 204)\n\n    run_simple(\"localhost\", 5000, app)\n\nif __name__ == \"__main__\":\n    q = multiprocessing.Queue()\n    p = multiprocessing.Process(target=get_token, args=(q,))\n    p.start()\n    print(\"waiting\")\n    token = q.get(block=True)\n    p.terminate()\n    print(token)\n```\n\nThat example uses Werkzeug’s development server, but any production server that can be started as a Python process could use the same technique and should be preferred for security. Another method could be to start a [`subprocess`](https://docs.python.org/3/library/subprocess.html#module-subprocess \"(in Python v3.11)\") process and send the value back over `stdout`.\n\n## Troubleshooting\n\nOn operating systems that support ipv6 and have it configured such as modern Linux systems, OS X 10.4 or higher as well as Windows Vista some browsers can be painfully slow if accessing your local server. The reason for this is that sometimes “localhost” is configured to be available on both ipv4 and ipv6 sockets and some browsers will try to access ipv6 first and then ipv4.\n\nAt the current time the integrated webserver does not support ipv6 and ipv4 at the same time and for better portability ipv4 is the default.\n\nIf you notice that the web browser takes ages to load the page there are two ways around this issue. If you don’t need ipv6 support you can disable the ipv6 entry in the [hosts file](https://en.wikipedia.org/wiki/Hosts_file) by removing this line:\n\n``` python\n::1             localhost\n```\n\nAlternatively you can also disable ipv6 support in your browser. For example if Firefox shows this behavior you can disable it by going to `about:config` and disabling the `network.dns.disableIPv6` key. This however is not recommended as of Werkzeug 0.6.1!\n\nStarting with Werkzeug 0.6.1, the server will now switch between ipv4 and ipv6 based on your operating system’s configuration. This means if that you disabled ipv6 support in your browser but your operating system is preferring ipv6, you will be unable to connect to your server. In that situation, you can either remove the localhost entry for `::1` or explicitly bind the hostname to an ipv4 address (`127.0.0.1`)\n\n## SSL\n\nChangelog\n\nNew in version 0.6.\n\nThe builtin server supports SSL for testing purposes. If an SSL context is provided it will be used. That means a server can either run in HTTP or HTTPS mode, but not both.\n\n### Quickstart\n\nThe easiest way to do SSL based development with Werkzeug is by using it to generate an SSL certificate and private key and storing that somewhere and to then put it there. For the certificate you need to provide the name of your server on generation or a `CN`.\n\n1.  Generate an SSL key and store it somewhere:\n\n    ``` python\n    >>> from werkzeug.serving import make_ssl_devcert\n    >>> make_ssl_devcert('/path/to/the/key', host='localhost')\n    ('/path/to/the/key.crt', '/path/to/the/key.key')\n    ```\n\n2.  Now this tuple can be passed as `ssl_context` to the [`run_simple()`](#werkzeug.serving.run_simple \"werkzeug.serving.run_simple\") method:\n\n    ``` python\n    run_simple('localhost', 4000, application,\n               ssl_context=('/path/to/the/key.crt',\n                            '/path/to/the/key.key'))\n    ```\n\nYou will have to acknowledge the certificate in your browser once then.\n\n### Loading Contexts by Hand\n\nYou can use a `ssl.SSLContext` object instead of a tuple for full control over the TLS configuration.\n\n``` python\nimport ssl\nctx = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\nctx.load_cert_chain('ssl.cert', 'ssl.key')\nrun_simple('localhost', 4000, application, ssl_context=ctx)\n```\n\n### Generating Certificates\n\nA key and certificate can be created in advance using the openssl tool instead of the [`make_ssl_devcert()`](#werkzeug.serving.make_ssl_devcert \"werkzeug.serving.make_ssl_devcert\"). This requires that you have the `openssl` command installed on your system:\n\n``` python\n$ openssl genrsa 1024 > ssl.key\n$ openssl req -new -x509 -nodes -sha1 -days 365 -key ssl.key > ssl.cert\n```\n\n### Adhoc Certificates\n\nThe easiest way to enable SSL is to start the server in adhoc-mode. In that case Werkzeug will generate an SSL certificate for you:\n\n``` python\nrun_simple('localhost', 4000, application,\n           ssl_context='adhoc')\n```\n\nThe downside of this of course is that you will have to acknowledge the certificate each time the server is reloaded. Adhoc certificates are discouraged because modern browsers do a bad job at supporting them for security reasons.\n\nThis feature requires the cryptography library to be installed.\n\n## Unix Sockets\n\nThe dev server can bind to a Unix socket instead of a TCP socket. [`run_simple()`](#werkzeug.serving.run_simple \"werkzeug.serving.run_simple\") will bind to a Unix socket if the `hostname` parameter starts with `'unix://'`.\n\n``` python\nfrom werkzeug.serving import run_simple\nrun_simple('unix://example.sock', 0, app)\n```\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/serving/](https://werkzeug.palletsprojects.com/en/3.0.x/serving/)"
- name: Map
  id: routing/index#werkzeug.routing.Map
  summary: The map class stores all the URL rules and some configuration parameters
  belongs_to: URL Routing
  description: |-
    `class werkzeug.routing.Map(rules=None, default_subdomain='', strict_slashes=True, merge_slashes=True, redirect_defaults=True, converters=None, sort_parameters=False, sort_key=None, host_matching=False)`

    The map class stores all the URL rules and some configuration parameters. Some of the configuration values are only stored on the `Map` instance since those affect all rules, others are just defaults and can be overridden for each rule. Note that you have to specify all arguments besides the `rules` as keyword arguments!

    Parameters:

    - **rules** (*t.Iterable\[*[RuleFactory](#werkzeug.routing.RuleFactory "werkzeug.routing.RuleFactory")*\]* *\|* *None*) – sequence of url rules for this map.
    - **default_subdomain** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The default subdomain for rules without a subdomain defined.
    - **strict_slashes** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – If a rule ends with a slash but the matched URL does not, redirect to the URL with a trailing slash.
    - **merge_slashes** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Merge consecutive slashes when matching or building URLs. Matches will redirect to the normalized URL. Slashes in variable parts are not merged.
    - **redirect_defaults** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – This will redirect to the default rule if it wasn’t visited that way. This helps creating unique URLs.
    - **converters** (*t.Mapping\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* [type](https://docs.python.org/3/library/functions.html#type "(in Python v3.11)")*\[BaseConverter\]\]* *\|* *None*) – A dict of converters that adds additional converters to the list of converters. If you redefine one converter this will override the original one.
    - **sort_parameters** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – If set to `True` the url parameters are sorted. See `url_encode` for more details.
    - **sort_key** (*t.Callable\[\[t.Any\],* *t.Any\]* *\|* *None*) – The sort key function for `url_encode`.
    - **host_matching** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – if set to `True` it enables the host matching feature and disables the subdomain one. If enabled the `host` parameter to rules is used instead of the `subdomain` one.

    Changed in version 3.0: The `charset` and `encoding_errors` parameters were removed.

    Changelog

    Changed in version 1.0: If `url_scheme` is `ws` or `wss`, only WebSocket rules will match.

    Changed in version 1.0: The `merge_slashes` parameter was added.

    Changed in version 0.7: The `encoding_errors` and `host_matching` parameters were added.

    Changed in version 0.5: The `sort_parameters` and `sort_key` paramters were added.
- name: Map.add()
  id: routing/index#werkzeug.routing.Map.add
  summary: Add a new rule or factory to the map and bind it
  belongs_to: URL Routing
  description: |-
    `add(rulefactory)`

    Add a new rule or factory to the map and bind it. Requires that the rule is not bound to another map.

    Parameters:

    **rulefactory** ([RuleFactory](#werkzeug.routing.RuleFactory "werkzeug.routing.RuleFactory")) – a [`Rule`](#werkzeug.routing.Rule "werkzeug.routing.Rule") or [`RuleFactory`](#werkzeug.routing.RuleFactory "werkzeug.routing.RuleFactory")

    Return type:

    None
- name: Map.bind()
  id: routing/index#werkzeug.routing.Map.bind
  summary: Return a new MapAdapter with the details specified to the call
  belongs_to: URL Routing
  description: |-
    `bind(server_name, script_name=None, subdomain=None, url_scheme='http', default_method='GET', path_info=None, query_args=None)`

    Return a new [`MapAdapter`](#werkzeug.routing.MapAdapter "werkzeug.routing.MapAdapter") with the details specified to the call. Note that `script_name` will default to `'/'` if not further specified or `None`. The `server_name` at least is a requirement because the HTTP RFC requires absolute URLs for redirects and so all redirect exceptions raised by Werkzeug will contain the full canonical URL.

    If no path_info is passed to `match()` it will use the default path info passed to bind. While this doesn’t really make sense for manual bind calls, it’s useful if you bind a map to a WSGI environment which already contains the path info.

    `subdomain` will default to the `default_subdomain` for this map if no defined. If there is no `default_subdomain` you cannot use the subdomain feature.

    Changelog

    Changed in version 1.0: If `url_scheme` is `ws` or `wss`, only WebSocket rules will match.

    Changed in version 0.15: `path_info` defaults to `'/'` if `None`.

    Changed in version 0.8: `query_args` can be a string.

    Changed in version 0.7: Added `query_args`.

    Parameters:

    - **server_name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **script_name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
    - **subdomain** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
    - **url_scheme** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **default_method** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **path_info** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
    - **query_args** ([Mapping](https://docs.python.org/3/library/typing.html#typing.Mapping "(in Python v3.11)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")*\]* *\|* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –

    Return type:

    [MapAdapter](#werkzeug.routing.MapAdapter "werkzeug.routing.map.MapAdapter")
- name: Map.bind_to_environ()
  id: routing/index#werkzeug.routing.Map.bind_to_environ
  summary: Like bind() but you can pass it an WSGI environment and it will fetch the information from that dictionary
  belongs_to: URL Routing
  description: |-
    `bind_to_environ(environ, server_name=None, subdomain=None)`

    Like [`bind()`](#werkzeug.routing.Map.bind "werkzeug.routing.Map.bind") but you can pass it an WSGI environment and it will fetch the information from that dictionary. Note that because of limitations in the protocol there is no way to get the current subdomain and real `server_name` from the environment. If you don’t provide it, Werkzeug will use `SERVER_NAME` and `SERVER_PORT` (or `HTTP_HOST` if provided) as used `server_name` with disabled subdomain feature.

    If `subdomain` is `None` but an environment and a server name is provided it will calculate the current subdomain automatically. Example: `server_name` is `'example.com'` and the `SERVER_NAME` in the wsgi `environ` is `'staging.dev.example.com'` the calculated subdomain will be `'staging.dev'`.

    If the object passed as environ has an environ attribute, the value of this attribute is used instead. This allows you to pass request objects. Additionally `PATH_INFO` added as a default of the [`MapAdapter`](#werkzeug.routing.MapAdapter "werkzeug.routing.MapAdapter") so that you don’t have to pass the path info to the match method.

    Changelog

    Changed in version 1.0.0: If the passed server name specifies port 443, it will match if the incoming scheme is `https` without a port.

    Changed in version 1.0.0: A warning is shown when the passed server name does not match the incoming WSGI server name.

    Changed in version 0.8: This will no longer raise a ValueError when an unexpected server name was passed.

    Changed in version 0.5: previously this method accepted a bogus `calculate_subdomain` parameter that did not have any effect. It was removed because of that.

    Parameters:

    - **environ** (*WSGIEnvironment* *\|* [Request](../wrappers/index#werkzeug.wrappers.Request "werkzeug.wrappers.Request")) – a WSGI environment.
    - **server_name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – an optional server name hint (see above).
    - **subdomain** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – optionally the current subdomain (see above).

    Return type:

    [MapAdapter](#werkzeug.routing.MapAdapter "werkzeug.routing.MapAdapter")
- name: Map.converters
  id: routing/index#werkzeug.routing.Map.converters
  summary: The dictionary of converters
  belongs_to: URL Routing
  description: |-
    `converters`

    The dictionary of converters. This can be modified after the class was created, but will only affect rules added after the modification. If the rules are defined with the list passed to the class, the `converters` parameter to the constructor has to be used instead.
- name: Map.default_converters
  id: routing/index#werkzeug.routing.Map.default_converters
  summary: A dict of default converters to be used
  belongs_to: URL Routing
  description: |-
    `default_converters = {'any': <class 'werkzeug.routing.converters.AnyConverter'>, 'default': <class 'werkzeug.routing.converters.UnicodeConverter'>, 'float': <class 'werkzeug.routing.converters.FloatConverter'>, 'int': <class 'werkzeug.routing.converters.IntegerConverter'>, 'path': <class 'werkzeug.routing.converters.PathConverter'>, 'string': <class 'werkzeug.routing.converters.UnicodeConverter'>, 'uuid': <class 'werkzeug.routing.converters.UUIDConverter'>}`

    A dict of default converters to be used.
- name: Map.is_endpoint_expecting()
  id: routing/index#werkzeug.routing.Map.is_endpoint_expecting
  summary: Iterate over all rules and check if the endpoint expects the arguments provided
  belongs_to: URL Routing
  description: |-
    `is_endpoint_expecting(endpoint, *arguments)`

    Iterate over all rules and check if the endpoint expects the arguments provided. This is for example useful if you have some URLs that expect a language code and others that do not and you want to wrap the builder a bit so that the current language code is automatically added if not provided but endpoints expect it.

    Parameters:

    - **endpoint** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – the endpoint to check.
    - **arguments** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – this function accepts one or more arguments as positional arguments. Each one of them is checked.

    Return type:

    [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")
- name: Map.iter_rules()
  id: routing/index#werkzeug.routing.Map.iter_rules
  summary: Iterate over all rules or the rules of an endpoint
  belongs_to: URL Routing
  description: |-
    `iter_rules(endpoint=None)`

    Iterate over all rules or the rules of an endpoint.

    Parameters:

    **endpoint** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – if provided only the rules for that endpoint are returned.

    Returns:

    an iterator

    Return type:

    [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator "(in Python v3.11)")\[[Rule](#werkzeug.routing.Rule "werkzeug.routing.rules.Rule")\]
- name: Map.lock_class()
  id: routing/index#werkzeug.routing.Map.lock_class
  summary: The type of lock to use when updating
  belongs_to: URL Routing
  description: |-
    `lock_class()`

    The type of lock to use when updating.

    Changelog

    New in version 1.0.
- name: Map.update()
  id: routing/index#werkzeug.routing.Map.update
  summary: Called before matching and building to keep the compiled rules in the correct order after things changed
  belongs_to: URL Routing
  description: |-
    `update()`

    Called before matching and building to keep the compiled rules in the correct order after things changed.

    Return type:

    None
- name: MapAdapter
  id: routing/index#werkzeug.routing.MapAdapter
  summary: Returned by Map.bind() or Map.bind_to_environ() and does the URL matching and building based on runtime information
  belongs_to: URL Routing
  description: |-
    `class werkzeug.routing.MapAdapter(map, server_name, script_name, subdomain, url_scheme, path_info, default_method, query_args=None)`

    Returned by [`Map.bind()`](#werkzeug.routing.Map.bind "werkzeug.routing.Map.bind") or [`Map.bind_to_environ()`](#werkzeug.routing.Map.bind_to_environ "werkzeug.routing.Map.bind_to_environ") and does the URL matching and building based on runtime information.

    Parameters:

    - **map** ([Map](#werkzeug.routing.Map "werkzeug.routing.Map")) –
    - **server_name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **script_name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **subdomain** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
    - **url_scheme** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **path_info** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **default_method** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **query_args** (*t.Mapping\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* *t.Any\]* *\|* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
- name: MapAdapter.allowed_methods()
  id: routing/index#werkzeug.routing.MapAdapter.allowed_methods
  summary: Returns the valid methods that match for a given path
  belongs_to: URL Routing
  description: |-
    `allowed_methods(path_info=None)`

    Returns the valid methods that match for a given path.

    Changelog

    New in version 0.7.

    Parameters:

    **path_info** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –

    Return type:

    [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable "(in Python v3.11)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")\]
- name: MapAdapter.build()
  id: routing/index#werkzeug.routing.MapAdapter.build
  summary: Building URLs works pretty much the other way round
  belongs_to: URL Routing
  description: |-
    `build(endpoint, values=None, method=None, force_external=False, append_unknown=True, url_scheme=None)`

    Building URLs works pretty much the other way round. Instead of `match` you call `build` and pass it the endpoint and a dict of arguments for the placeholders.

    The `build` function also accepts an argument called `force_external` which, if you set it to `True` will force external URLs. Per default external URLs (include the server name) will only be used if the target URL is on a different subdomain.

    ``` python
    >>> m = Map([
    ...     Rule('/', endpoint='index'),
    ...     Rule('/downloads/', endpoint='downloads/index'),
    ...     Rule('/downloads/<int:id>', endpoint='downloads/show')
    ... ])
    >>> urls = m.bind("example.com", "/")
    >>> urls.build("index", {})
    '/'
    >>> urls.build("downloads/show", {'id': 42})
    '/downloads/42'
    >>> urls.build("downloads/show", {'id': 42}, force_external=True)
    'http://example.com/downloads/42'
    ```

    Because URLs cannot contain non ASCII data you will always get bytes back. Non ASCII characters are urlencoded with the charset defined on the map instance.

    Additional values are converted to strings and appended to the URL as URL querystring parameters:

    ``` python
    >>> urls.build("index", {'q': 'My Searchstring'})
    '/?q=My+Searchstring'
    ```

    When processing those additional values, lists are furthermore interpreted as multiple values (as per [`werkzeug.datastructures.MultiDict`](../datastructures/index#werkzeug.datastructures.MultiDict "werkzeug.datastructures.MultiDict")):

    ``` python
    >>> urls.build("index", {'q': ['a', 'b', 'c']})
    '/?q=a&q=b&q=c'
    ```

    Passing a `MultiDict` will also add multiple values:

    ``` python
    >>> urls.build("index", MultiDict((('p', 'z'), ('q', 'a'), ('q', 'b'))))
    '/?p=z&q=a&q=b'
    ```

    If a rule does not exist when building a `BuildError` exception is raised.

    The build method accepts an argument called `method` which allows you to specify the method you want to have an URL built for if you have different methods for the same endpoint specified.

    Parameters:

    - **endpoint** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – the endpoint of the URL to build.
    - **values** ([Mapping](https://docs.python.org/3/library/typing.html#typing.Mapping "(in Python v3.11)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")*\]* *\|* *None*) – the values for the URL to build. Unhandled values are appended to the URL as query parameters.
    - **method** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – the HTTP method for the rule if there are different URLs for different methods on the same endpoint.
    - **force_external** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – enforce full canonical external URLs. If the URL scheme is not provided, this will generate a protocol-relative URL.
    - **append_unknown** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – unknown parameters are appended to the generated URL as query string argument. Disable this if you want the builder to ignore those.
    - **url_scheme** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – Scheme to use in place of the bound `url_scheme`.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")

    Changelog

    Changed in version 2.0: Added the `url_scheme` parameter.

    New in version 0.6: Added the `append_unknown` parameter.
- name: MapAdapter.dispatch()
  id: routing/index#werkzeug.routing.MapAdapter.dispatch
  summary: Does the complete dispatching process
  belongs_to: URL Routing
  description: |-
    `dispatch(view_func, path_info=None, method=None, catch_http_exceptions=False)`

    Does the complete dispatching process. `view_func` is called with the endpoint and a dict with the values for the view. It should look up the view function, call it, and return a response object or WSGI application. http exceptions are not caught by default so that applications can display nicer error messages by just catching them by hand. If you want to stick with the default error messages you can pass it `catch_http_exceptions=True` and it will catch the http exceptions.

    Here a small example for the dispatch usage:

    ``` python
    from werkzeug.wrappers import Request, Response
    from werkzeug.wsgi import responder
    from werkzeug.routing import Map, Rule

    def on_index(request):
        return Response('Hello from the index')

    url_map = Map([Rule('/', endpoint='index')])
    views = {'index': on_index}

    @responder
    def application(environ, start_response):
        request = Request(environ)
        urls = url_map.bind_to_environ(environ)
        return urls.dispatch(lambda e, v: views[e](request, **v),
                             catch_http_exceptions=True)
    ```

    Keep in mind that this method might return exception objects, too, so use `Response.force_type` to get a response object.

    Parameters:

    - **view_func** (*t.Callable\[\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* *t.Mapping\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* *t.Any\]\],* *WSGIApplication\]*) – a function that is called with the endpoint as first argument and the value dict as second. Has to dispatch to the actual view function with this information. (see above)
    - **path_info** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – the path info to use for matching. Overrides the path info specified on binding.
    - **method** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – the HTTP method used for matching. Overrides the method specified on binding.
    - **catch_http_exceptions** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – set to `True` to catch any of the werkzeug `HTTPException`s.

    Return type:

    WSGIApplication
- name: MapAdapter.get_host()
  id: routing/index#werkzeug.routing.MapAdapter.get_host
  summary: Figures out the full host name for the given domain part
  belongs_to: URL Routing
  description: |-
    `get_host(domain_part)`

    Figures out the full host name for the given domain part. The domain part is a subdomain in case host matching is disabled or a full host name.

    Parameters:

    **domain_part** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
- name: MapAdapter.make_alias_redirect_url()
  id: routing/index#werkzeug.routing.MapAdapter.make_alias_redirect_url
  summary: Internally called to make an alias redirect URL
  belongs_to: URL Routing
  description: |-
    `make_alias_redirect_url(path, endpoint, values, method, query_args)`

    Internally called to make an alias redirect URL.

    Parameters:

    - **path** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **endpoint** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **values** ([Mapping](https://docs.python.org/3/library/typing.html#typing.Mapping "(in Python v3.11)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")*\]*) –
    - **method** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **query_args** ([Mapping](https://docs.python.org/3/library/typing.html#typing.Mapping "(in Python v3.11)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")*\]* *\|* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
- name: MapAdapter.match()
  id: routing/index#werkzeug.routing.MapAdapter.match
  summary: 'The usage is simple: you just pass the match method the current path info as well as the method (which defaults to GET)'
  belongs_to: URL Routing
  description: |-
    `match(path_info: str | None = None, method: str | None = None, return_rule: Literal[False] = False, query_args: Mapping[str, Any] | str | None = None, websocket: bool | None = None) → tuple[str, Mapping[str, Any]]`

    match(*path_info:[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")\|[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.11)")=None*, *method:[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")\|[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.11)")=None*, *return_rule:[Literal](https://docs.python.org/3/library/typing.html#typing.Literal "(in Python v3.11)")\[True\]=True*, *query_args:[Mapping](https://docs.python.org/3/library/typing.html#typing.Mapping "(in Python v3.11)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)"),[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")\]\|[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")\|[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.11)")=None*, *websocket:[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")\|[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.11)")=None*)→[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")\[[werkzeug.routing.rules.Rule](#werkzeug.routing.Rule "werkzeug.routing.rules.Rule"),[Mapping](https://docs.python.org/3/library/typing.html#typing.Mapping "(in Python v3.11)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)"),[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")\]\]

    The usage is simple: you just pass the match method the current path info as well as the method (which defaults to `GET`). The following things can then happen:

    - you receive a `NotFound` exception that indicates that no URL is matching. A `NotFound` exception is also a WSGI application you can call to get a default page not found page (happens to be the same object as `werkzeug.exceptions.NotFound`)
    - you receive a `MethodNotAllowed` exception that indicates that there is a match for this URL but not for the current request method. This is useful for RESTful applications.
    - you receive a `RequestRedirect` exception with a `new_url` attribute. This exception is used to notify you about a request Werkzeug requests from your WSGI application. This is for example the case if you request `/foo` although the correct URL is `/foo/` You can use the `RequestRedirect` instance as response-like object similar to all other subclasses of `HTTPException`.
    - you receive a `WebsocketMismatch` exception if the only match is a WebSocket rule but the bind is an HTTP request, or if the match is an HTTP rule but the bind is a WebSocket request.
    - you get a tuple in the form `(endpoint, arguments)` if there is a match (unless `return_rule` is True, in which case you get a tuple in the form `(rule, arguments)`)

    If the path info is not passed to the match method the default path info of the map is used (defaults to the root URL if not defined explicitly).

    All of the exceptions raised are subclasses of `HTTPException` so they can be used as WSGI responses. They will all render generic error or redirect pages.

    Here is a small example for matching:

    ``` python
    >>> m = Map([
    ...     Rule('/', endpoint='index'),
    ...     Rule('/downloads/', endpoint='downloads/index'),
    ...     Rule('/downloads/<int:id>', endpoint='downloads/show')
    ... ])
    >>> urls = m.bind("example.com", "/")
    >>> urls.match("/", "GET")
    ('index', {})
    >>> urls.match("/downloads/42")
    ('downloads/show', {'id': 42})
    ```

    And here is what happens on redirect and missing URLs:

    ``` python
    >>> urls.match("/downloads")
    Traceback (most recent call last):
      ...
    RequestRedirect: http://example.com/downloads/
    >>> urls.match("/missing")
    Traceback (most recent call last):
      ...
    NotFound: 404 Not Found
    ```

    Parameters:

    - **path_info** – the path info to use for matching. Overrides the path info specified on binding.
    - **method** – the HTTP method used for matching. Overrides the method specified on binding.
    - **return_rule** – return the rule that matched instead of just the endpoint (defaults to `False`).
    - **query_args** – optional query arguments that are used for automatic redirects as string or dictionary. It’s currently not possible to use the query arguments for URL matching.
    - **websocket** – Match WebSocket instead of HTTP requests. A websocket request has a `ws` or `wss` `url_scheme`. This overrides that detection.

    Changelog

    New in version 1.0: Added `websocket`.

    Changed in version 0.8: `query_args` can be a string.

    New in version 0.7: Added `query_args`.

    New in version 0.6: Added `return_rule`.
- name: MapAdapter.test()
  id: routing/index#werkzeug.routing.MapAdapter.test
  summary: Test if a rule would match
  belongs_to: URL Routing
  description: |-
    `test(path_info=None, method=None)`

    Test if a rule would match. Works like `match` but returns `True` if the URL matches, or `False` if it does not exist.

    Parameters:

    - **path_info** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – the path info to use for matching. Overrides the path info specified on binding.
    - **method** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – the HTTP method used for matching. Overrides the method specified on binding.

    Return type:

    [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")
- name: Middleware
  id: middleware/index
  summary: A WSGI middleware is a WSGI application that wraps another application in order to observe or change its behavior
  description: "# Middleware\n\nA WSGI middleware is a WSGI application that wraps another application in order to observe or change its behavior. Werkzeug provides some middleware for common use cases.\n\n- [X-Forwarded-For Proxy Fix](proxy_fix/index)\n- [Serve Shared Static Files](shared_data/index)\n- [Application Dispatcher](dispatcher/index)\n- [Basic HTTP Proxy](http_proxy/index)\n- [WSGI Protocol Linter](lint/index)\n- [Application Profiler](profiler/index)\n\nThe [interactive debugger](../debug/index) is also a middleware that can be applied manually, although it is typically used automatically with the [development server](../serving/index).\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/middleware/](https://werkzeug.palletsprojects.com/en/3.0.x/middleware/)"
- name: MIMEAccept
  id: datastructures/index#werkzeug.datastructures.MIMEAccept
  summary: Like Accept but with special methods and behavior for mimetypes
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.MIMEAccept(values=())`

    Like [`Accept`](#werkzeug.datastructures.Accept "werkzeug.datastructures.Accept") but with special methods and behavior for mimetypes.

    `property accept_html`

    True if this object accepts HTML.

    `property accept_json`

    True if this object accepts JSON.

    `property accept_xhtml`

    True if this object accepts XHTML.
- name: mod_wsgi
  id: deployment/mod_wsgi/index
  summary: mod_wsgi is a WSGI server integrated with the Apache httpd server
  description: "# mod_wsgi\n\n[mod_wsgi](https://modwsgi.readthedocs.io/) is a WSGI server integrated with the [Apache httpd](https://httpd.apache.org/) server. The modern [mod_wsgi-express](https://pypi.org/project/mod-wsgi/) command makes it easy to configure and start the server without needing to write Apache httpd configuration.\n\n- Tightly integrated with Apache httpd.\n- Supports Windows directly.\n- Requires a compiler and the Apache development headers to install.\n- Does not require a reverse proxy setup.\n\nThis page outlines the basics of running mod_wsgi-express, not the more complex installation and configuration with httpd. Be sure to read the [mod_wsgi-express](https://pypi.org/project/mod-wsgi/), [mod_wsgi](https://modwsgi.readthedocs.io/), and [Apache httpd](https://httpd.apache.org/) documentation to understand what features are available.\n\n## Installing\n\nInstalling mod_wsgi requires a compiler and the Apache server and development headers installed. You will get an error if they are not. How to install them depends on the OS and package manager that you use.\n\nCreate a virtualenv, install your application, then install `mod_wsgi`.\n\n``` text\n$ cd hello-app\n$ python -m venv venv\n$ . venv/bin/activate\n$ pip install .  # install your application\n$ pip install mod_wsgi\n```\n\n## Running\n\nThe only argument to `mod_wsgi-express` specifies a script containing your application, which must be called `application`. You can write a small script to import your app with this name, or to create it if using the app factory pattern.\n\n`wsgi.py`\n\n``` python\nfrom hello import app\n\napplication = app\n```\n\n`wsgi.py`\n\n``` python\nfrom hello import create_app\n\napplication = create_app()\n```\n\nNow run the `mod_wsgi-express start-server` command.\n\n``` text\n$ mod_wsgi-express start-server wsgi.py --processes 4\n```\n\nThe `--processes` option specifies the number of worker processes to run; a starting value could be `CPU * 2`.\n\nLogs for each request aren’t show in the terminal. If an error occurs, its information is written to the error log file shown when starting the server.\n\n## Binding Externally\n\nUnlike the other WSGI servers in these docs, mod_wsgi can be run as root to bind to privileged ports like 80 and 443. However, it must be configured to drop permissions to a different user and group for the worker processes.\n\nFor example, if you created a `hello` user and group, you should install your virtualenv and application as that user, then tell mod_wsgi to drop to that user after starting.\n\n``` text\n$ sudo /home/hello/venv/bin/mod_wsgi-express start-server \\\n    /home/hello/wsgi.py \\\n    --user hello --group hello --port 80 --processes 4\n```\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/deployment/mod_wsgi/](https://werkzeug.palletsprojects.com/en/3.0.x/deployment/mod_wsgi/)"
- name: MultiDict
  id: datastructures/index#werkzeug.datastructures.MultiDict
  summary: A MultiDict is a dictionary subclass customized to deal with multiple values for the same key which is for example used by the parsing functions in the wrappers
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.MultiDict(mapping=None)`

    A [`MultiDict`](#werkzeug.datastructures.MultiDict "werkzeug.datastructures.MultiDict") is a dictionary subclass customized to deal with multiple values for the same key which is for example used by the parsing functions in the wrappers. This is necessary because some HTML form elements pass multiple values for the same key.

    [`MultiDict`](#werkzeug.datastructures.MultiDict "werkzeug.datastructures.MultiDict") implements all standard dictionary methods. Internally, it saves all values for a key as a list, but the standard dict access methods will only return the first value for a key. If you want to gain access to the other values, too, you have to use the `list` methods as explained below.

    Basic Usage:

    ``` python
    >>> d = MultiDict([('a', 'b'), ('a', 'c')])
    >>> d
    MultiDict([('a', 'b'), ('a', 'c')])
    >>> d['a']
    'b'
    >>> d.getlist('a')
    ['b', 'c']
    >>> 'a' in d
    True
    ```

    It behaves like a normal dict thus all dict functions will only return the first value when multiple values for one key are found.

    From Werkzeug 0.3 onwards, the `KeyError` raised by this class is also a subclass of the `BadRequest` HTTP exception and will render a page for a `400 BAD REQUEST` if caught in a catch-all for HTTP exceptions.

    A [`MultiDict`](#werkzeug.datastructures.MultiDict "werkzeug.datastructures.MultiDict") can be constructed from an iterable of `(key, value)` tuples, a dict, a [`MultiDict`](#werkzeug.datastructures.MultiDict "werkzeug.datastructures.MultiDict") or from Werkzeug 0.2 onwards some keyword parameters.

    Parameters:

    **mapping** – the initial value for the [`MultiDict`](#werkzeug.datastructures.MultiDict "werkzeug.datastructures.MultiDict"). Either a regular dict, an iterable of `(key, value)` tuples or `None`.
- name: MultiDict.add()
  id: datastructures/index#werkzeug.datastructures.MultiDict.add
  summary: Adds a new value for the key
  belongs_to: Data Structures
  description: |-
    `add(key, value)`

    Adds a new value for the key.

    Changelog

    New in version 0.6.

    Parameters:

    - **key** – the key for the value.
    - **value** – the value to add.
- name: MultiDict.clear()
  id: datastructures/index#werkzeug.datastructures.MultiDict.clear
  summary: clear() → None
  belongs_to: Data Structures
  description: '`clear() → None. Remove all items from D.`'
- name: MultiDict.copy()
  id: datastructures/index#werkzeug.datastructures.MultiDict.copy
  summary: Return a shallow copy of this object
  belongs_to: Data Structures
  description: |-
    `copy()`

    Return a shallow copy of this object.
- name: MultiDict.deepcopy()
  id: datastructures/index#werkzeug.datastructures.MultiDict.deepcopy
  summary: Return a deep copy of this object
  belongs_to: Data Structures
  description: |-
    `deepcopy(memo=None)`

    Return a deep copy of this object.
- name: MultiDict.fromkeys()
  id: datastructures/index#werkzeug.datastructures.MultiDict.fromkeys
  summary: Create a new dictionary with keys from iterable and values set to value
  belongs_to: Data Structures
  description: |-
    `fromkeys(value=None, /)`

    Create a new dictionary with keys from iterable and values set to value.
- name: MultiDict.get()
  id: datastructures/index#werkzeug.datastructures.MultiDict.get
  summary: Return the default value if the requested data doesn’t exist
  belongs_to: Data Structures
  description: |-
    `get(key, default=None, type=None)`

    Return the default value if the requested data doesn’t exist. If `type` is provided and is a callable it should convert the value, return it or raise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "(in Python v3.11)") if that is not possible. In this case the function will return the default as if the value was not found:

    ``` python
    >>> d = TypeConversionDict(foo='42', bar='blub')
    >>> d.get('foo', type=int)
    42
    >>> d.get('bar', -1, type=int)
    -1
    ```

    Parameters:

    - **key** – The key to be looked up.
    - **default** – The default value to be returned if the key can’t be looked up. If not further specified `None` is returned.
    - **type** – A callable that is used to cast the value in the [`MultiDict`](#werkzeug.datastructures.MultiDict "werkzeug.datastructures.MultiDict"). If a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "(in Python v3.11)") is raised by this callable the default value is returned.
- name: MultiDict.getlist()
  id: datastructures/index#werkzeug.datastructures.MultiDict.getlist
  summary: Return the list of items for a given key
  belongs_to: Data Structures
  description: |-
    `getlist(key, type=None)`

    Return the list of items for a given key. If that key is not in the `MultiDict`, the return value will be an empty list. Just like `get`, `getlist` accepts a `type` parameter. All items will be converted with the callable defined there.

    Parameters:

    - **key** – The key to be looked up.
    - **type** – A callable that is used to cast the value in the [`MultiDict`](#werkzeug.datastructures.MultiDict "werkzeug.datastructures.MultiDict"). If a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "(in Python v3.11)") is raised by this callable the value will be removed from the list.

    Returns:

    a [`list`](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)") of all the values for the key.
- name: MultiDict.items()
  id: datastructures/index#werkzeug.datastructures.MultiDict.items
  summary: Return an iterator of (key, value) pairs
  belongs_to: Data Structures
  description: |-
    `items(multi=False)`

    Return an iterator of `(key, value)` pairs.

    Parameters:

    **multi** – If set to `True` the iterator returned will have a pair for each value of each key. Otherwise it will only contain pairs for the first value of each key.
- name: MultiDict.keys()
  id: datastructures/index#werkzeug.datastructures.MultiDict.keys
  summary: null
  belongs_to: Data Structures
  description: '`keys() → a set-like object providing a view on D''s keys`'
- name: MultiDict.lists()
  id: datastructures/index#werkzeug.datastructures.MultiDict.lists
  summary: Return a iterator of (key, values) pairs, where values is the list of all values associated with the key
  belongs_to: Data Structures
  description: |-
    `lists()`

    Return a iterator of `(key, values)` pairs, where values is the list of all values associated with the key.
- name: MultiDict.listvalues()
  id: datastructures/index#werkzeug.datastructures.MultiDict.listvalues
  summary: Return an iterator of all values associated with a key
  belongs_to: Data Structures
  description: |-
    `listvalues()`

    Return an iterator of all values associated with a key. Zipping [`keys()`](#werkzeug.datastructures.MultiDict.keys "werkzeug.datastructures.MultiDict.keys") and this is the same as calling [`lists()`](#werkzeug.datastructures.MultiDict.lists "werkzeug.datastructures.MultiDict.lists"):

    ``` python
    >>> d = MultiDict({"foo": [1, 2, 3]})
    >>> zip(d.keys(), d.listvalues()) == d.lists()
    True
    ```
- name: MultiDict.pop()
  id: datastructures/index#werkzeug.datastructures.MultiDict.pop
  summary: Pop the first item for a list on the dict
  belongs_to: Data Structures
  description: |-
    `pop(key, default=no value)`

    Pop the first item for a list on the dict. Afterwards the key is removed from the dict, so additional values are discarded:

    ``` python
    >>> d = MultiDict({"foo": [1, 2, 3]})
    >>> d.pop("foo")
    1
    >>> "foo" in d
    False
    ```

    Parameters:

    - **key** – the key to pop.
    - **default** – if provided the value to return if the key was not in the dictionary.
- name: MultiDict.popitem()
  id: datastructures/index#werkzeug.datastructures.MultiDict.popitem
  summary: Pop an item from the dict
  belongs_to: Data Structures
  description: |-
    `popitem()`

    Pop an item from the dict.
- name: MultiDict.popitemlist()
  id: datastructures/index#werkzeug.datastructures.MultiDict.popitemlist
  summary: Pop a (key, list) tuple from the dict
  belongs_to: Data Structures
  description: |-
    `popitemlist()`

    Pop a `(key, list)` tuple from the dict.
- name: MultiDict.poplist()
  id: datastructures/index#werkzeug.datastructures.MultiDict.poplist
  summary: Pop the list for a key from the dict
  belongs_to: Data Structures
  description: |-
    `poplist(key)`

    Pop the list for a key from the dict. If the key is not in the dict an empty list is returned.

    Changelog

    Changed in version 0.5: If the key does no longer exist a list is returned instead of raising an error.
- name: MultiDict.setdefault()
  id: datastructures/index#werkzeug.datastructures.MultiDict.setdefault
  summary: Returns the value for the key if it is in the dict, otherwise it returns default and sets that value for key
  belongs_to: Data Structures
  description: |-
    `setdefault(key, default=None)`

    Returns the value for the key if it is in the dict, otherwise it returns `default` and sets that value for `key`.

    Parameters:

    - **key** – The key to be looked up.
    - **default** – The default value to be returned if the key is not in the dict. If not further specified it’s `None`.
- name: MultiDict.setlist()
  id: datastructures/index#werkzeug.datastructures.MultiDict.setlist
  summary: Remove the old values for a key and add new ones
  belongs_to: Data Structures
  description: |-
    `setlist(key, new_list)`

    Remove the old values for a key and add new ones. Note that the list you pass the values in will be shallow-copied before it is inserted in the dictionary.

    ``` python
    >>> d = MultiDict()
    >>> d.setlist('foo', ['1', '2'])
    >>> d['foo']
    '1'
    >>> d.getlist('foo')
    ['1', '2']
    ```

    Parameters:

    - **key** – The key for which the values are set.
    - **new_list** – An iterable with the new values for the key. Old values are removed first.
- name: MultiDict.setlistdefault()
  id: datastructures/index#werkzeug.datastructures.MultiDict.setlistdefault
  summary: Like setdefault but sets multiple values
  belongs_to: Data Structures
  description: |-
    `setlistdefault(key, default_list=None)`

    Like `setdefault` but sets multiple values. The list returned is not a copy, but the list that is actually used internally. This means that you can put new values into the dict by appending items to the list:

    ``` python
    >>> d = MultiDict({"foo": 1})
    >>> d.setlistdefault("foo").extend([2, 3])
    >>> d.getlist("foo")
    [1, 2, 3]
    ```

    Parameters:

    - **key** – The key to be looked up.
    - **default_list** – An iterable of default values. It is either copied (in case it was a list) or converted into a list before returned.

    Returns:

    a [`list`](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")
- name: MultiDict.to_dict()
  id: datastructures/index#werkzeug.datastructures.MultiDict.to_dict
  summary: Return the contents as regular dict
  belongs_to: Data Structures
  description: |-
    `to_dict(flat=True)`

    Return the contents as regular dict. If `flat` is `True` the returned dict will only have the first item present, if `flat` is `False` all values will be returned as lists.

    Parameters:

    **flat** – If set to `False` the dict returned will have lists with all the values in it. Otherwise it will only contain the first value for each key.

    Returns:

    a [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")
- name: MultiDict.update()
  id: datastructures/index#werkzeug.datastructures.MultiDict.update
  summary: null
  belongs_to: Data Structures
  description: |-
    `update(mapping)`

    update() extends rather than replaces existing key lists:

    ``` python
    >>> a = MultiDict({'x': 1})
    >>> b = MultiDict({'x': 2, 'y': 3})
    >>> a.update(b)
    >>> a
    MultiDict([('y', 3), ('x', 1), ('x', 2)])
    ```

    If the value list for a key in `other_dict` is empty, no new values will be added to the dict and the key will not be created:

    ``` python
    >>> x = {'empty_list': []}
    >>> y = MultiDict()
    >>> y.update(x)
    >>> y
    MultiDict([])
    ```
- name: MultiDict.values()
  id: datastructures/index#werkzeug.datastructures.MultiDict.values
  summary: Returns an iterator of the first value on every key’s value list
  belongs_to: Data Structures
  description: |-
    `values()`

    Returns an iterator of the first value on every key’s value list.
- name: nginx
  id: deployment/nginx/index
  summary: nginx is a fast, production level HTTP server
  description: "# nginx\n\n[nginx](https://nginx.org/) is a fast, production level HTTP server. When serving your application with one of the WSGI servers listed in [Deploying to Production](../index), it is often good or necessary to put a dedicated HTTP server in front of it. This “reverse proxy” can handle incoming requests, TLS, and other security and performance concerns better than the WSGI server.\n\nNginx can be installed using your system package manager, or a pre-built executable for Windows. Installing and running Nginx itself is outside the scope of this doc. This page outlines the basics of configuring Nginx to proxy your application. Be sure to read its documentation to understand what features are available.\n\n## Domain Name\n\nAcquiring and configuring a domain name is outside the scope of this doc. In general, you will buy a domain name from a registrar, pay for server space with a hosting provider, and then point your registrar at the hosting provider’s name servers.\n\nTo simulate this, you can also edit your `hosts` file, located at `/etc/hosts` on Linux. Add a line that associates a name with the local IP.\n\nModern Linux systems may be configured to treat any domain name that ends with `.localhost` like this without adding it to the `hosts` file.\n\n`/etc/hosts`\n\n``` python\n127.0.0.1 hello.localhost\n```\n\n## Configuration\n\nThe nginx configuration is located at `/etc/nginx/nginx.conf` on Linux. It may be different depending on your operating system. Check the docs and look for `nginx.conf`.\n\nRemove or comment out any existing `server` section. Add a `server` section and use the `proxy_pass` directive to point to the address the WSGI server is listening on. We’ll assume the WSGI server is listening locally at `http://127.0.0.1:8000`.\n\n`/etc/nginx.conf`\n\n``` nginx\nserver {\n    listen 80;\n    server_name _;\n\n    location / {\n        proxy_pass http://127.0.0.1:8000/;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Prefix /;\n    }\n}\n```\n\nThen [Tell Werkzeug it is Behind a Proxy](../proxy_fix/index) so that your application uses these headers.\n\n## Static Files\n\nIf your application has static files such as JavaScript, CSS, and images, it will be more efficient to let Nginx serve them directly rather than going through the Python application.\n\nAssuming the static files are expected to be available under the `/static/` URL, and are stored at `/home/project/static/`, add the following to the `server` block above.\n\n``` nginx\nlocation /static {\n    alias /home/project/static;\n}\n```\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/deployment/nginx/](https://werkzeug.palletsprojects.com/en/3.0.x/deployment/nginx/)"
- name: OrderedMultiDict
  id: datastructures/index#werkzeug.datastructures.OrderedMultiDict
  summary: Works like a regular MultiDict but preserves the order of the fields
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.OrderedMultiDict(mapping=None)`

    Works like a regular [`MultiDict`](#werkzeug.datastructures.MultiDict "werkzeug.datastructures.MultiDict") but preserves the order of the fields. To convert the ordered multi dict into a list you can use the `items()` method and pass it `multi=True`.

    In general an [`OrderedMultiDict`](#werkzeug.datastructures.OrderedMultiDict "werkzeug.datastructures.OrderedMultiDict") is an order of magnitude slower than a [`MultiDict`](#werkzeug.datastructures.MultiDict "werkzeug.datastructures.MultiDict").

    note

    Due to a limitation in Python you cannot convert an ordered multi dict into a regular dict by using `dict(multidict)`. Instead you have to use the `to_dict()` method, otherwise the internal bucket objects are exposed.
- name: parse_accept_header()
  id: http/index#werkzeug.http.parse_accept_header
  summary: Parse an Accept header according to RFC 9110
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.parse_accept_header(value: str | None) → Accept`

    werkzeug.http.parse_accept_header(*value:[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")\|[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.11)")*, *cls:[type](https://docs.python.org/3/library/functions.html#type "(in Python v3.11)")\[\_TAnyAccept\]*)→\_TAnyAccept

    Parse an `Accept` header according to [RFC 9110](https://httpwg.org/specs/rfc9110.html#field.accept).

    Returns an [`Accept`](../datastructures/index#werkzeug.datastructures.Accept "werkzeug.datastructures.Accept") instance, which can sort and inspect items based on their quality parameter. When parsing `Accept-Charset`, `Accept-Encoding`, or `Accept-Language`, pass the appropriate [`Accept`](../datastructures/index#werkzeug.datastructures.Accept "werkzeug.datastructures.Accept") subclass.

    Parameters:

    - **value** – The header value to parse.
    - **cls** – The [`Accept`](../datastructures/index#werkzeug.datastructures.Accept "werkzeug.datastructures.Accept") class to wrap the result in.

    Returns:

    An instance of `cls`.

    Changelog

    Changed in version 2.3: Parse according to RFC 9110. Items with invalid `q` values are skipped.
- name: parse_cache_control_header()
  id: http/index#werkzeug.http.parse_cache_control_header
  summary: Parse a cache control header
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.parse_cache_control_header(value: str | None, on_update: Callable[[_TAnyCC], None] | None, cls: None = None) → RequestCacheControl`

    werkzeug.http.parse_cache_control_header(*value:[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")\|[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.11)")*, *on_update:[Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.11)")\[\[\_TAnyCC\],[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.11)")\]\|[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.11)")*, *cls:[type](https://docs.python.org/3/library/functions.html#type "(in Python v3.11)")\[\_TAnyCC\]*)→\_TAnyCC

    Parse a cache control header. The RFC differs between response and request cache control, this method does not. It’s your responsibility to not use the wrong control statements.

    Changelog

    New in version 0.5: The `cls` was added. If not specified an immutable [`RequestCacheControl`](../datastructures/index#werkzeug.datastructures.RequestCacheControl "werkzeug.datastructures.RequestCacheControl") is returned.

    Parameters:

    - **value** – a cache control header to be parsed.
    - **on_update** – an optional callable that is called every time a value on the `CacheControl` object is changed.
    - **cls** – the class for the returned object. By default [`RequestCacheControl`](../datastructures/index#werkzeug.datastructures.RequestCacheControl "werkzeug.datastructures.RequestCacheControl") is used.

    Returns:

    a `cls` object.
- name: parse_content_range_header()
  id: http/index#werkzeug.http.parse_content_range_header
  summary: Parses a range header into a ContentRange object or None if parsing is not possible
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.parse_content_range_header(value, on_update=None)`

    Parses a range header into a [`ContentRange`](../datastructures/index#werkzeug.datastructures.ContentRange "werkzeug.datastructures.ContentRange") object or `None` if parsing is not possible.

    Changelog

    New in version 0.7.

    Parameters:

    - **value** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – a content range header to be parsed.
    - **on_update** ([Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.11)")*\[\[*[ContentRange](../datastructures/index#werkzeug.datastructures.ContentRange "werkzeug.datastructures.range.ContentRange")*\],* *None\]* *\|* *None*) – an optional callable that is called every time a value on the [`ContentRange`](../datastructures/index#werkzeug.datastructures.ContentRange "werkzeug.datastructures.ContentRange") object is changed.

    Return type:

    [ContentRange](../datastructures/index#werkzeug.datastructures.ContentRange "werkzeug.datastructures.range.ContentRange") \| None

    ## Header Utilities

    The following utilities operate on HTTP headers well but do not parse them. They are useful if you’re dealing with conditional responses or if you want to proxy arbitrary requests but want to remove WSGI-unsupported hop-by-hop headers. Also there is a function to create HTTP header strings from the parsed data.
- name: parse_cookie()
  id: http/index#werkzeug.http.parse_cookie
  summary: Parse a cookie from a string or WSGI environ
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.parse_cookie(header, cls=None)`

    Parse a cookie from a string or WSGI environ.

    The same key can be provided multiple times, the values are stored in-order. The default `MultiDict` will have the first value first, and all values can be retrieved with `MultiDict.getlist()`.

    Parameters:

    - **header** (*WSGIEnvironment* *\|* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – The cookie header as a string, or a WSGI environ dict with a `HTTP_COOKIE` key.
    - **cls** ([type](https://docs.python.org/3/library/functions.html#type "(in Python v3.11)")*\[ds.MultiDict\]* *\|* *None*) – A dict-like class to store the parsed cookies in. Defaults to `MultiDict`.

    Return type:

    ds.MultiDict\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)"), [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")\]

    Changed in version 3.0: Passing bytes, and the `charset` and `errors` parameters, were removed.

    Changelog

    Changed in version 1.0: Returns a `MultiDict` instead of a `TypeConversionDict`.

    Changed in version 0.5: Returns a `TypeConversionDict` instead of a regular dict. The `cls` parameter was added.
- name: parse_date()
  id: http/index#werkzeug.http.parse_date
  summary: Parse an RFC 2822 date into a timezone-aware datetime.datetime object, or None if parsing fails
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.parse_date(value)`

    Parse an [**RFC 2822**](https://datatracker.ietf.org/doc/html/rfc2822.html) date into a timezone-aware [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "(in Python v3.11)") object, or `None` if parsing fails.

    This is a wrapper for [`email.utils.parsedate_to_datetime()`](https://docs.python.org/3/library/email.utils.html#email.utils.parsedate_to_datetime "(in Python v3.11)"). It returns `None` if parsing fails instead of raising an exception, and always returns a timezone-aware datetime object. If the string doesn’t have timezone information, it is assumed to be UTC.

    Parameters:

    **value** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – A string with a supported date format.

    Return type:

    [datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime "(in Python v3.11)") \| None

    Changelog

    Changed in version 2.0: Return a timezone-aware datetime object. Use `email.utils.parsedate_to_datetime`.
- name: parse_dict_header()
  id: http/index#werkzeug.http.parse_dict_header
  summary: Parse a list header using parse_list_header(), then parse each item as a key=value pair
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.parse_dict_header(value)`

    Parse a list header using [`parse_list_header()`](#werkzeug.http.parse_list_header "werkzeug.http.parse_list_header"), then parse each item as a `key=value` pair.

    ``` python
    parse_dict_header('a=b, c="d, e", f')
    {"a": "b", "c": "d, e", "f": None}
    ```

    This is the reverse of [`dump_header()`](#werkzeug.http.dump_header "werkzeug.http.dump_header").

    If a key does not have a value, it is `None`.

    This handles charsets for values as described in [RFC 2231](https://www.rfc-editor.org/rfc/rfc2231#section-3). Only ASCII, UTF-8, and ISO-8859-1 charsets are accepted, otherwise the value remains quoted.

    Parameters:

    **value** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The header value to parse.

    Return type:

    [dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)"), [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") \| None\]

    Changed in version 3.0: Passing bytes is not supported.

    Changed in version 3.0: The `cls` argument is removed.

    Changelog

    Changed in version 2.3: Added support for `key*=charset''value` encoded items.

    Changed in version 0.9: The `cls` argument was added.
- name: parse_etags()
  id: http/index#werkzeug.http.parse_etags
  summary: Parse an etag header
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.parse_etags(value)`

    Parse an etag header.

    Parameters:

    **value** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – the tag header to parse

    Returns:

    an [`ETags`](../datastructures/index#werkzeug.datastructures.ETags "werkzeug.datastructures.ETags") object.

    Return type:

    [ETags](../datastructures/index#werkzeug.datastructures.ETags "werkzeug.datastructures.etag.ETags")
- name: parse_form_data()
  id: http/index#werkzeug.formparser.parse_form_data
  summary: Parse the form data in the environ and return it as tuple in the form (stream, form, files)
  belongs_to: HTTP Utilities
  description: "`werkzeug.formparser.parse_form_data(environ, stream_factory=None, max_form_memory_size=None, max_content_length=None, cls=None, silent=True, *, max_form_parts=None)`\n\nParse the form data in the environ and return it as tuple in the form `(stream, form, files)`. You should only call this method if the transport method is `POST`, `PUT`, or `PATCH`.\n\nIf the mimetype of the data transmitted is `multipart/form-data` the files multidict will be filled with `FileStorage` objects. If the mimetype is unknown the input stream is wrapped and returned as first argument, else the stream is empty.\n\nThis is a shortcut for the common usage of [`FormDataParser`](#werkzeug.formparser.FormDataParser \"werkzeug.formparser.FormDataParser\").\n\nParameters:\n\n- **environ** (*WSGIEnvironment*) – the WSGI environment to be used for parsing.\n- **stream_factory** (*TStreamFactory* *\\|* *None*) – An optional callable that returns a new read and writeable file descriptor. This callable works the same as `Response._get_file_stream()`.\n- **max_form_memory_size** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) – the maximum number of bytes to be accepted for in-memory stored form data. If the data exceeds the value specified an `RequestEntityTooLarge` exception is raised.\n- **max_content_length** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) – If this is provided and the transmitted data is longer than this value an `RequestEntityTooLarge` exception is raised.\n- **cls** ([type](https://docs.python.org/3/library/functions.html#type \"(in Python v3.11)\")*\\[*[MultiDict](../datastructures/index#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\")*\\]* *\\|* *None*) – an optional dict class to use. If this is not specified or `None` the default `MultiDict` is used.\n- **silent** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – If set to False parsing errors will not be caught.\n- **max_form_parts** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) – The maximum number of multipart parts to be parsed. If this is exceeded, a `RequestEntityTooLarge` exception is raised.\n\nReturns:\n\nA tuple in the form `(stream, form, files)`.\n\nReturn type:\n\nt_parse_result\n\nChanged in version 3.0: The `charset` and `errors` parameters were removed.\n\nChangelog\n\nChanged in version 2.3: Added the `max_form_parts` parameter.\n\nNew in version 0.5.1: Added the `silent` parameter.\n\nNew in version 0.5: Added the `max_form_memory_size`, `max_content_length`, and `cls` parameters.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/http/](https://werkzeug.palletsprojects.com/en/3.0.x/http/)"
- name: parse_if_range_header()
  id: http/index#werkzeug.http.parse_if_range_header
  summary: Parses an if-range header which can be an etag or a date
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.parse_if_range_header(value)`

    Parses an if-range header which can be an etag or a date. Returns a [`IfRange`](../datastructures/index#werkzeug.datastructures.IfRange "werkzeug.datastructures.IfRange") object.

    Changelog

    Changed in version 2.0: If the value represents a datetime, it is timezone-aware.

    New in version 0.7.

    Parameters:

    **value** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –

    Return type:

    [IfRange](../datastructures/index#werkzeug.datastructures.IfRange "werkzeug.datastructures.range.IfRange")
- name: parse_list_header()
  id: http/index#werkzeug.http.parse_list_header
  summary: Parse a header value that consists of a list of comma separated items according to RFC 9110
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.parse_list_header(value)`

    Parse a header value that consists of a list of comma separated items according to [RFC 9110](https://httpwg.org/specs/rfc9110.html#abnf.extension).

    This extends `urllib.request.parse_http_list()` to remove surrounding quotes from values.

    ``` python
    parse_list_header('token, "quoted value"')
    ['token', 'quoted value']
    ```

    This is the reverse of [`dump_header()`](#werkzeug.http.dump_header "werkzeug.http.dump_header").

    Parameters:

    **value** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The header value to parse.

    Return type:

    [list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")\]
- name: parse_options_header()
  id: http/index#werkzeug.http.parse_options_header
  summary: Parse a header that consists of a value with key=value parameters separated by semicolons ;. For example, the Content-Type header
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.parse_options_header(value)`

    Parse a header that consists of a value with `key=value` parameters separated by semicolons `;`. For example, the `Content-Type` header.

    ``` python
    parse_options_header("text/html; charset=UTF-8")
    ('text/html', {'charset': 'UTF-8'})

    parse_options_header("")
    ("", {})
    ```

    This is the reverse of `dump_options_header()`.

    This parses valid parameter parts as described in [RFC 9110](https://httpwg.org/specs/rfc9110.html#parameter). Invalid parts are skipped.

    This handles continuations and charsets as described in [RFC 2231](https://www.rfc-editor.org/rfc/rfc2231#section-3), although not as strictly as the RFC. Only ASCII, UTF-8, and ISO-8859-1 charsets are accepted, otherwise the value remains quoted.

    Clients may not be consistent in how they handle a quote character within a quoted value. The [HTML Standard](https://html.spec.whatwg.org/#multipart-form-data) replaces it with `%22` in multipart form data. [RFC 9110](https://httpwg.org/specs/rfc9110.html#quoted.strings) uses backslash escapes in HTTP headers. Both are decoded to the `"` character.

    Clients may not be consistent in how they handle non-ASCII characters. HTML documents must declare `<meta charset=UTF-8>`, otherwise browsers may replace with HTML character references, which can be decoded using [`html.unescape()`](https://docs.python.org/3/library/html.html#html.unescape "(in Python v3.11)").

    Parameters:

    **value** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – The header value to parse.

    Returns:

    `(value, options)`, where `options` is a dict

    Return type:

    [tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)"), [dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)"), [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")\]\]

    Changelog

    Changed in version 2.3: Invalid parts, such as keys with no value, quoted keys, and incorrectly quoted values, are discarded instead of treating as `None`.

    Changed in version 2.3: Only ASCII, UTF-8, and ISO-8859-1 are accepted for charset values.

    Changed in version 2.3: Escaped quotes in quoted values, like `%22` and `\"`, are handled.

    Changed in version 2.2: Option names are always converted to lowercase.

    Changed in version 2.2: The `multiple` parameter was removed.

    Changed in version 0.15: [**RFC 2231**](https://datatracker.ietf.org/doc/html/rfc2231.html) parameter continuations are handled.

    New in version 0.5.
- name: parse_range_header()
  id: http/index#werkzeug.http.parse_range_header
  summary: Parses a range header into a Range object
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.parse_range_header(value, make_inclusive=True)`

    Parses a range header into a [`Range`](../datastructures/index#werkzeug.datastructures.Range "werkzeug.datastructures.Range") object. If the header is missing or malformed `None` is returned. `ranges` is a list of `(start, stop)` tuples where the ranges are non-inclusive.

    Changelog

    New in version 0.7.

    Parameters:

    - **value** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
    - **make_inclusive** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) –

    Return type:

    [Range](../datastructures/index#werkzeug.datastructures.Range "werkzeug.datastructures.range.Range") \| None
- name: parse_set_header()
  id: http/index#werkzeug.http.parse_set_header
  summary: To create a header from the HeaderSet again, use the dump_header() function
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.parse_set_header(value, on_update=None)`

    Parse a set-like header and return a [`HeaderSet`](../datastructures/index#werkzeug.datastructures.HeaderSet "werkzeug.datastructures.HeaderSet") object:

    ``` python
    >>> hs = parse_set_header('token, "quoted value"')
    ```

    The return value is an object that treats the items case-insensitively and keeps the order of the items:

    ``` python
    >>> 'TOKEN' in hs
    True
    >>> hs.index('quoted value')
    1
    >>> hs
    HeaderSet(['token', 'quoted value'])
    ```

    To create a header from the `HeaderSet` again, use the [`dump_header()`](#werkzeug.http.dump_header "werkzeug.http.dump_header") function.

    Parameters:

    - **value** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – a set header to be parsed.
    - **on_update** ([Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.11)")*\[\[*[HeaderSet](../datastructures/index#werkzeug.datastructures.HeaderSet "werkzeug.datastructures.structures.HeaderSet")*\],* *None\]* *\|* *None*) – an optional callable that is called every time a value on the [`HeaderSet`](../datastructures/index#werkzeug.datastructures.HeaderSet "werkzeug.datastructures.HeaderSet") object is changed.

    Returns:

    a [`HeaderSet`](../datastructures/index#werkzeug.datastructures.HeaderSet "werkzeug.datastructures.HeaderSet")

    Return type:

    [HeaderSet](../datastructures/index#werkzeug.datastructures.HeaderSet "werkzeug.datastructures.structures.HeaderSet")
- name: PathConverter
  id: routing/index#werkzeug.routing.PathConverter
  summary: Like the default UnicodeConverter, but it also matches slashes
  belongs_to: URL Routing
  description: |-
    `class werkzeug.routing.PathConverter(map, *args, **kwargs)`

    Like the default [`UnicodeConverter`](#werkzeug.routing.UnicodeConverter "werkzeug.routing.UnicodeConverter"), but it also matches slashes. This is useful for wikis and similar applications:

    ``` python
    Rule('/<path:wikipage>')
    Rule('/<path:wikipage>/edit')
    ```

    Parameters:

    - **map** ([Map](#werkzeug.routing.Map "werkzeug.routing.Map")) – the [`Map`](#werkzeug.routing.Map "werkzeug.routing.Map").
    - **args** (*t.Any*) –
    - **kwargs** (*t.Any*) –
- name: ProfilerMiddleware
  id: middleware/profiler/index#werkzeug.middleware.profiler.ProfilerMiddleware
  summary: Wrap a WSGI application and profile the execution of each request
  belongs_to: Application Profiler
  description: "`class werkzeug.middleware.profiler.ProfilerMiddleware(app, stream=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>, sort_by=('time', 'calls'), restrictions=(), profile_dir=None, filename_format='{method}.{path}.{elapsed:.0f}ms.{time:.0f}.prof')`\n\nWrap a WSGI application and profile the execution of each request. Responses are buffered so that timings are more exact.\n\nIf `stream` is given, [`pstats.Stats`](https://docs.python.org/3/library/profile.html#pstats.Stats \"(in Python v3.11)\") are written to it after each request. If `profile_dir` is given, [`cProfile`](https://docs.python.org/3/library/profile.html#module-cProfile \"(in Python v3.11)\") data files are saved to that directory, one file per request.\n\nThe filename can be customized by passing `filename_format`. If it is a string, it will be formatted using [`str.format()`](https://docs.python.org/3/library/stdtypes.html#str.format \"(in Python v3.11)\") with the following fields available:\n\n- `{method}` - The request method; GET, POST, etc.\n- `{path}` - The request path or ‘root’ should one not exist.\n- `{elapsed}` - The elapsed time of the request in milliseconds.\n- `{time}` - The time of the request.\n\nIf it is a callable, it will be called with the WSGI `environ` and be expected to return a filename string. The `environ` dictionary will also have the `\"werkzeug.profiler\"` key populated with a dictionary containing the following fields (more may be added in the future): - `{elapsed}` - The elapsed time of the request in milliseconds. - `{time}` - The time of the request.\n\nParameters:\n\n- **app** (*WSGIApplication*) – The WSGI application to wrap.\n- **stream** (*t.IO\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]* *\\|* *None*) – Write stats to this stream. Disable with `None`.\n- **sort_by** (*t.Iterable\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]*) – A tuple of columns to sort stats by. See [`pstats.Stats.sort_stats()`](https://docs.python.org/3/library/profile.html#pstats.Stats.sort_stats \"(in Python v3.11)\").\n- **restrictions** (*t.Iterable\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* [float](https://docs.python.org/3/library/functions.html#float \"(in Python v3.11)\")*\\]*) – A tuple of restrictions to filter stats by. See [`pstats.Stats.print_stats()`](https://docs.python.org/3/library/profile.html#pstats.Stats.print_stats \"(in Python v3.11)\").\n- **profile_dir** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – Save profile data files to this directory.\n- **filename_format** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – Format string for profile data file names, or a callable returning a name. See explanation above.\n\n``` python\nfrom werkzeug.middleware.profiler import ProfilerMiddleware\napp = ProfilerMiddleware(app)\n```\n\nChanged in version 3.0: Added the `\"werkzeug.profiler\"` key to the `filename_format(environ)` parameter with the `elapsed` and `time` fields.\n\nChangelog\n\nChanged in version 0.15: Stats are written even if `profile_dir` is given, and can be disable by passing `stream=None`.\n\nNew in version 0.15: Added `filename_format`.\n\nNew in version 0.9: Added `restrictions` and `profile_dir`.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/middleware/profiler/](https://werkzeug.palletsprojects.com/en/3.0.x/middleware/profiler/)"
- name: ProxyFix
  id: middleware/proxy_fix/index#werkzeug.middleware.proxy_fix.ProxyFix
  summary: Adjust the WSGI environ based on X-Forwarded- that proxies in front of the application may set
  belongs_to: X-Forwarded-For Proxy Fix
  description: "`class werkzeug.middleware.proxy_fix.ProxyFix(app, x_for=1, x_proto=1, x_host=0, x_port=0, x_prefix=0)`\n\nAdjust the WSGI environ based on `X-Forwarded-` that proxies in front of the application may set.\n\n- `X-Forwarded-For` sets `REMOTE_ADDR`.\n- `X-Forwarded-Proto` sets `wsgi.url_scheme`.\n- `X-Forwarded-Host` sets `HTTP_HOST`, `SERVER_NAME`, and `SERVER_PORT`.\n- `X-Forwarded-Port` sets `HTTP_HOST` and `SERVER_PORT`.\n- `X-Forwarded-Prefix` sets `SCRIPT_NAME`.\n\nYou must tell the middleware how many proxies set each header so it knows what values to trust. It is a security issue to trust values that came from the client rather than a proxy.\n\nThe original values of the headers are stored in the WSGI environ as `werkzeug.proxy_fix.orig`, a dict.\n\nParameters:\n\n- **app** (*WSGIApplication*) – The WSGI application to wrap.\n- **x_for** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – Number of values to trust for `X-Forwarded-For`.\n- **x_proto** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – Number of values to trust for `X-Forwarded-Proto`.\n- **x_host** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – Number of values to trust for `X-Forwarded-Host`.\n- **x_port** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – Number of values to trust for `X-Forwarded-Port`.\n- **x_prefix** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – Number of values to trust for `X-Forwarded-Prefix`.\n\n``` python\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n# App is behind one proxy that sets the -For and -Host headers.\napp = ProxyFix(app, x_for=1, x_host=1)\n```\n\nChangelog\n\nChanged in version 1.0: The `num_proxies` argument and attribute; the `get_remote_addr` method; and the environ keys `orig_remote_addr`, `orig_wsgi_url_scheme`, and `orig_http_host` were removed.\n\nChanged in version 0.15: All headers support multiple values. Each header is configured with a separate number of trusted proxies.\n\nChanged in version 0.15: Original WSGI environ values are stored in the `werkzeug.proxy_fix.orig` dict.\n\nChanged in version 0.15: Support `X-Forwarded-Port` and `X-Forwarded-Prefix`.\n\nChanged in version 0.15: `X-Forwarded-Host` and `X-Forwarded-Port` modify `SERVER_NAME` and `SERVER_PORT`.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/middleware/proxy_fix/](https://werkzeug.palletsprojects.com/en/3.0.x/middleware/proxy_fix/)"
- name: ProxyMiddleware
  id: middleware/http_proxy/index#werkzeug.middleware.http_proxy.ProxyMiddleware
  summary: Proxy requests under a path to an external server, routing other requests to the app
  belongs_to: Basic HTTP Proxy
  description: "`class werkzeug.middleware.http_proxy.ProxyMiddleware(app, targets, chunk_size=16384, timeout=10)`\n\nProxy requests under a path to an external server, routing other requests to the app.\n\nThis middleware can only proxy HTTP requests, as HTTP is the only protocol handled by the WSGI server. Other protocols, such as WebSocket requests, cannot be proxied at this layer. This should only be used for development, in production a real proxy server should be used.\n\nThe middleware takes a dict mapping a path prefix to a dict describing the host to be proxied to:\n\n``` python\napp = ProxyMiddleware(app, {\n    \"/static/\": {\n        \"target\": \"http://127.0.0.1:5001/\",\n    }\n})\n```\n\nEach host has the following options:\n\n`target:`\n\nThe target URL to dispatch to. This is required.\n\n`remove_prefix:`\n\nWhether to remove the prefix from the URL before dispatching it to the target. The default is `False`.\n\n`host:`\n\n`\"<auto>\" (default):`\n\nThe host header is automatically rewritten to the URL of the target.\n\n`None:`\n\nThe host header is unmodified from the client request.\n\nAny other value:\n\nThe host header is overwritten with the value.\n\n`headers:`\n\nA dictionary of headers to be sent with the request to the target. The default is `{}`.\n\n`ssl_context:`\n\nA [`ssl.SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext \"(in Python v3.11)\") defining how to verify requests if the target is HTTPS. The default is `None`.\n\nIn the example above, everything under `\"/static/\"` is proxied to the server on port 5001. The host header is rewritten to the target, and the `\"/static/\"` prefix is removed from the URLs.\n\nParameters:\n\n- **app** (*WSGIApplication*) – The WSGI application to wrap.\n- **targets** (*t.Mapping\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* [dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* *t.Any\\]\\]*) – Proxy target configurations. See description above.\n- **chunk_size** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – Size of chunks to read from input stream and write to target.\n- **timeout** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – Seconds before an operation to a target fails.\n\nChangelog\n\nNew in version 0.14.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/middleware/http_proxy/](https://werkzeug.palletsprojects.com/en/3.0.x/middleware/http_proxy/)"
- name: Quickstart
  id: quickstart/index
  summary: This part of the documentation shows how to use the most important parts of Werkzeug
  description: "# Quickstart\n\nThis part of the documentation shows how to use the most important parts of Werkzeug. It’s intended as a starting point for developers with basic understanding of [**PEP 3333**](https://peps.python.org/pep-3333/) (WSGI) and [**RFC 2616**](https://datatracker.ietf.org/doc/html/rfc2616.html) (HTTP).\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/quickstart/](https://werkzeug.palletsprojects.com/en/3.0.x/quickstart/)"
- name: quote_etag()
  id: http/index#werkzeug.http.quote_etag
  summary: Quote an etag
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.quote_etag(etag, weak=False)`

    Quote an etag.

    Parameters:

    - **etag** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – the etag to quote.
    - **weak** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – set to `True` to tag it “weak”.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
- name: quote_header_value()
  id: http/index#werkzeug.http.quote_header_value
  summary: Add double quotes around a header value
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.quote_header_value(value, allow_token=True)`

    Add double quotes around a header value. If the header contains only ASCII token characters, it will be returned unchanged. If the header contains `"` or `\` characters, they will be escaped with an additional `\` character.

    This is the reverse of [`unquote_header_value()`](#werkzeug.http.unquote_header_value "werkzeug.http.unquote_header_value").

    Parameters:

    - **value** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")) – The value to quote. Will be converted to a string.
    - **allow_token** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Disable to quote the value even if it only has token characters.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")

    Changed in version 3.0: Passing bytes is not supported.

    Changed in version 3.0: The `extra_chars` parameter is removed.

    Changelog

    Changed in version 2.3: The value is quoted if it is the empty string.

    New in version 0.5.
- name: Range
  id: datastructures/index#werkzeug.datastructures.Range
  summary: Represents a Range header
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.Range(units, ranges)`

    Represents a `Range` header. All methods only support only bytes as the unit. Stores a list of ranges if given, but the methods only work if only one range is provided.

    Raises:

    [**ValueError**](https://docs.python.org/3/library/exceptions.html#ValueError "(in Python v3.11)") – If the ranges provided are invalid.

    Changelog

    Changed in version 0.15: The ranges passed in are validated.

    New in version 0.7.
- name: Range.make_content_range()
  id: datastructures/index#werkzeug.datastructures.Range.make_content_range
  summary: Creates a ContentRange object from the current range and given content length
  belongs_to: Data Structures
  description: |-
    `make_content_range(length)`

    Creates a [`ContentRange`](#werkzeug.datastructures.ContentRange "werkzeug.datastructures.ContentRange") object from the current range and given content length.
- name: Range.range_for_length()
  id: datastructures/index#werkzeug.datastructures.Range.range_for_length
  summary: If the range is for bytes, the length is not None and there is exactly one range and it is satisfiable it returns a (start, stop) tuple, otherwise None
  belongs_to: Data Structures
  description: |-
    `range_for_length(length)`

    If the range is for bytes, the length is not None and there is exactly one range and it is satisfiable it returns a `(start, stop)` tuple, otherwise `None`.
- name: Range.ranges
  id: datastructures/index#werkzeug.datastructures.Range.ranges
  summary: A list of (begin, end) tuples for the range header provided
  belongs_to: Data Structures
  description: |-
    `ranges`

    A list of `(begin, end)` tuples for the range header provided. The ranges are non-inclusive.
- name: Range.to_content_range_header()
  id: datastructures/index#werkzeug.datastructures.Range.to_content_range_header
  summary: null
  belongs_to: Data Structures
  description: |-
    `to_content_range_header(length)`

    Converts the object into `Content-Range` HTTP header, based on given length
- name: Range.to_header()
  id: datastructures/index#werkzeug.datastructures.Range.to_header
  summary: Converts the object back into an HTTP header
  belongs_to: Data Structures
  description: |-
    `to_header()`

    Converts the object back into an HTTP header.
- name: Range.units
  id: datastructures/index#werkzeug.datastructures.Range.units
  summary: The units of this range
  belongs_to: Data Structures
  description: |-
    `units`

    The units of this range. Usually “bytes”.
- name: redirect()
  id: utils/index#werkzeug.utils.redirect
  summary: Returns a response object (a WSGI application) that, if called, redirects the client to the target location
  belongs_to: Utilities
  description: |-
    `werkzeug.utils.redirect(location, code=302, Response=None)`

    Returns a response object (a WSGI application) that, if called, redirects the client to the target location. Supported codes are 301, 302, 303, 305, 307, and 308. 300 is not supported because it’s not a real redirect and 304 because it’s the answer for a request with a request with defined If-Modified-Since headers.

    Changelog

    New in version 0.10: The class used for the Response object can now be passed in.

    New in version 0.6: The location can now be a unicode string that is encoded using the `iri_to_uri()` function.

    Parameters:

    - **location** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – the location the response should redirect to.
    - **code** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")) – the redirect status code. defaults to 302.
    - **Response** (*class*) – a Response class to use when instantiating a response. The default is [`werkzeug.wrappers.Response`](../wrappers/index#werkzeug.wrappers.Response "werkzeug.wrappers.Response") if unspecified.

    Return type:

    [Response](../wrappers/index#werkzeug.wrappers.Response "werkzeug.wrappers.Response")
- name: remove_entity_headers()
  id: http/index#werkzeug.http.remove_entity_headers
  summary: Remove all entity headers from a list or Headers object
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.remove_entity_headers(headers, allowed=('expires', 'content-location'))`

    Remove all entity headers from a list or `Headers` object. This operation works in-place. `Expires` and `Content-Location` headers are by default not removed. The reason for this is [**RFC 2616**](https://datatracker.ietf.org/doc/html/rfc2616.html) section 10.3.5 which specifies some entity headers that should be sent.

    Changelog

    Changed in version 0.5: added `allowed` parameter.

    Parameters:

    - **headers** ([Headers](../datastructures/index#werkzeug.datastructures.Headers "werkzeug.datastructures.headers.Headers") *\|* [list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")*\[*[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*\]\]*) – a list or `Headers` object.
    - **allowed** ([Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable "(in Python v3.11)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*\]*) – a list of headers that should still be allowed even though they are entity headers.

    Return type:

    None
- name: remove_hop_by_hop_headers()
  id: http/index#werkzeug.http.remove_hop_by_hop_headers
  summary: Remove all HTTP/1.1 “Hop-by-Hop” headers from a list or Headers object
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.remove_hop_by_hop_headers(headers)`

    Remove all HTTP/1.1 “Hop-by-Hop” headers from a list or `Headers` object. This operation works in-place.

    Changelog

    New in version 0.5.

    Parameters:

    **headers** ([Headers](../datastructures/index#werkzeug.datastructures.Headers "werkzeug.datastructures.headers.Headers") *\|* [list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")*\[*[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*\]\]*) – a list or `Headers` object.

    Return type:

    None
- name: Request
  id: wrappers/index#werkzeug.wrappers.Request
  summary: Represents an incoming WSGI HTTP request, with headers and body taken from the WSGI environment
  belongs_to: Request / Response Objects
  description: |-
    `class werkzeug.wrappers.Request(environ, populate_request=True, shallow=False)`

    Represents an incoming WSGI HTTP request, with headers and body taken from the WSGI environment. Has properties and methods for using the functionality defined by various HTTP specs. The data in requests object is read-only.

    Text data is assumed to use UTF-8 encoding, which should be true for the vast majority of modern clients. Using an encoding set by the client is unsafe in Python due to extra encodings it provides, such as `zip`. To change the assumed encoding, subclass and replace `charset`.

    Parameters:

    - **environ** (*WSGIEnvironment*) – The WSGI environ is generated by the WSGI server and contains information about the server configuration and client request.
    - **populate_request** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Add this request object to the WSGI environ as `environ['werkzeug.request']`. Can be useful when debugging.
    - **shallow** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Makes reading from [`stream`](#werkzeug.wrappers.Request.stream "werkzeug.wrappers.Request.stream") (and any method that would read from it) raise a [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "(in Python v3.11)"). Useful to prevent consuming the form data in middleware, which would make it unavailable to the final application.

    Changed in version 3.0: The `charset`, `url_charset`, and `encoding_errors` parameters were removed.

    Changelog

    Changed in version 2.1: Old `BaseRequest` and mixin classes were removed.

    Changed in version 2.1: Remove the `disable_data_descriptor` attribute.

    Changed in version 2.0: Combine `BaseRequest` and mixins into a single `Request` class.

    Changed in version 0.5: Read-only mode is enforced with immutable classes for all data.
- name: Request / Response Objects
  id: wrappers/index
  summary: The request and response objects wrap the WSGI environment or the return value from a WSGI application so that it is another WSGI application (wraps a whole application)
  description: "# Request / Response Objects\n\nThe request and response objects wrap the WSGI environment or the return value from a WSGI application so that it is another WSGI application (wraps a whole application).\n\n## How they Work\n\nYour WSGI application is always passed two arguments. The WSGI “environment” and the WSGI `start_response` function that is used to start the response phase. The [`Request`](#werkzeug.wrappers.Request \"werkzeug.wrappers.Request\") class wraps the `environ` for easier access to request variables (form data, request headers etc.).\n\nThe [`Response`](#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") on the other hand is a standard WSGI application that you can create. The simple hello world in Werkzeug looks like this:\n\n``` python\nfrom werkzeug.wrappers import Response\napplication = Response('Hello World!')\n```\n\nTo make it more useful you can replace it with a function and do some processing:\n\n``` python\nfrom werkzeug.wrappers import Request, Response\n\ndef application(environ, start_response):\n    request = Request(environ)\n    response = Response(f\"Hello {request.args.get('name', 'World!')}!\")\n    return response(environ, start_response)\n```\n\nBecause this is a very common task the [`Request`](#werkzeug.wrappers.Request \"werkzeug.wrappers.Request\") object provides a helper for that. The above code can be rewritten like this:\n\n``` python\nfrom werkzeug.wrappers import Request, Response\n\n@Request.application\ndef application(request):\n    return Response(f\"Hello {request.args.get('name', 'World!')}!\")\n```\n\nThe `application` is still a valid WSGI application that accepts the environment and `start_response` callable.\n\n## Mutability and Reusability of Wrappers\n\nThe implementation of the Werkzeug request and response objects are trying to guard you from common pitfalls by disallowing certain things as much as possible. This serves two purposes: high performance and avoiding of pitfalls.\n\nFor the request object the following rules apply:\n\n1.  The request object is immutable. Modifications are not supported by default, you may however replace the immutable attributes with mutable attributes if you need to modify it.\n2.  The request object may be shared in the same thread, but is not thread safe itself. If you need to access it from multiple threads, use locks around calls.\n3.  It’s not possible to pickle the request object.\n\nFor the response object the following rules apply:\n\n1.  The response object is mutable\n2.  The response object can be pickled or copied after `freeze()` was called.\n3.  Since Werkzeug 0.6 it’s safe to use the same response object for multiple WSGI responses.\n4.  It’s possible to create copies using `copy.deepcopy`.\n\n## Wrapper Classes\n\n`class werkzeug.wrappers.Request(environ, populate_request=True, shallow=False)`  \nRepresents an incoming WSGI HTTP request, with headers and body taken from the WSGI environment. Has properties and methods for using the functionality defined by various HTTP specs. The data in requests object is read-only.\n\nText data is assumed to use UTF-8 encoding, which should be true for the vast majority of modern clients. Using an encoding set by the client is unsafe in Python due to extra encodings it provides, such as `zip`. To change the assumed encoding, subclass and replace `charset`.\n\nParameters:  \n- **environ** (*WSGIEnvironment*) – The WSGI environ is generated by the WSGI server and contains information about the server configuration and client request.\n- **populate_request** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Add this request object to the WSGI environ as `environ['werkzeug.request']`. Can be useful when debugging.\n- **shallow** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Makes reading from [`stream`](#werkzeug.wrappers.Request.stream \"werkzeug.wrappers.Request.stream\") (and any method that would read from it) raise a [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError \"(in Python v3.11)\"). Useful to prevent consuming the form data in middleware, which would make it unavailable to the final application.\n\nChanged in version 3.0: The `charset`, `url_charset`, and `encoding_errors` parameters were removed.\n\nChangelog\n\nChanged in version 2.1: Old `BaseRequest` and mixin classes were removed.\n\nChanged in version 2.1: Remove the `disable_data_descriptor` attribute.\n\nChanged in version 2.0: Combine `BaseRequest` and mixins into a single `Request` class.\n\nChanged in version 0.5: Read-only mode is enforced with immutable classes for all data.\n\n`_get_file_stream(total_content_length, content_type, filename=None, content_length=None)`  \nCalled to get a stream for the file upload.\n\nThis must provide a file-like class with `read()`, `readline()` and `seek()` methods that is both writeable and readable.\n\nThe default implementation returns a temporary file if the total content length is higher than 500KB. Because many browsers do not provide a content length for the files only the total content length matters.\n\nParameters:  \n- **total_content_length** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) – the total content length of all the data in the request combined. This value is guaranteed to be there.\n- **content_type** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – the mimetype of the uploaded file.\n- **filename** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – the filename of the uploaded file. May be `None`.\n- **content_length** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) – the length of this file. This value is usually not provided because webbrowsers do not provide this value.\n\nReturn type:  \n[IO](https://docs.python.org/3/library/typing.html#typing.IO \"(in Python v3.11)\")\\[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\")\\]\n\n`property accept_charsets: CharsetAccept`  \nList of charsets this client supports as [`CharsetAccept`](../datastructures/index#werkzeug.datastructures.CharsetAccept \"werkzeug.datastructures.CharsetAccept\") object.\n\n`property accept_encodings: Accept`  \nList of encodings this client accepts. Encodings in a HTTP term are compression encodings such as gzip. For charsets have a look at `accept_charset`.\n\n`property accept_languages: LanguageAccept`  \nList of languages this client accepts as [`LanguageAccept`](../datastructures/index#werkzeug.datastructures.LanguageAccept \"werkzeug.datastructures.LanguageAccept\") object.\n\n`property accept_mimetypes: MIMEAccept`  \nList of mimetypes this client supports as [`MIMEAccept`](../datastructures/index#werkzeug.datastructures.MIMEAccept \"werkzeug.datastructures.MIMEAccept\") object.\n\n`access_control_request_headers`  \nSent with a preflight request to indicate which headers will be sent with the cross origin request. Set `access_control_allow_headers` on the response to indicate which headers are allowed.\n\n`access_control_request_method`  \nSent with a preflight request to indicate which method will be used for the cross origin request. Set `access_control_allow_methods` on the response to indicate which methods are allowed.\n\n`property access_route: list[str]`  \nIf a forwarded header exists this is a list of all ip addresses from the client ip to the last proxy server.\n\n`classmethod application(f)`  \nDecorate a function as responder that accepts the request as the last argument. This works like the `responder()` decorator but the function is passed the request object as the last argument and the request object will be closed automatically:\n\n``` python\n@Request.application\ndef my_wsgi_app(request):\n    return Response('Hello World!')\n```\n\nAs of Werkzeug 0.14 HTTP exceptions are automatically caught and converted to responses instead of failing.\n\nParameters:  \n**f** (*t.Callable\\[\\[*[Request](#werkzeug.wrappers.Request \"werkzeug.wrappers.Request\")*\\],* *WSGIApplication\\]*) – the WSGI callable to decorate\n\nReturns:  \na new WSGI callable\n\nReturn type:  \nWSGIApplication\n\n`property args: MultiDict[str, str]`  \nThe parsed URL parameters (the part in the URL after the question mark).\n\nBy default an [`ImmutableMultiDict`](../datastructures/index#werkzeug.datastructures.ImmutableMultiDict \"werkzeug.datastructures.ImmutableMultiDict\") is returned from this function. This can be changed by setting [`parameter_storage_class`](#werkzeug.wrappers.Request.parameter_storage_class \"werkzeug.wrappers.Request.parameter_storage_class\") to a different type. This might be necessary if the order of the form data is important.\n\nChangelog\n\nChanged in version 2.3: Invalid bytes remain percent encoded.\n\n`property authorization: Authorization | None`  \nThe `Authorization` header parsed into an [`Authorization`](../datastructures/index#werkzeug.datastructures.Authorization \"werkzeug.datastructures.Authorization\") object. `None` if the header is not present.\n\nChangelog\n\nChanged in version 2.3: `Authorization` is no longer a `dict`. The `token` attribute was added for auth schemes that use a token instead of parameters.\n\n`property base_url: str`  \nLike [`url`](#werkzeug.wrappers.Request.url \"werkzeug.wrappers.Request.url\") but without the query string.\n\n`property cache_control: RequestCacheControl`  \nA [`RequestCacheControl`](../datastructures/index#werkzeug.datastructures.RequestCacheControl \"werkzeug.datastructures.RequestCacheControl\") object for the incoming cache control headers.\n\n`close()`  \nCloses associated resources of this request object. This closes all file handles explicitly. You can also use the request object in a with statement which will automatically close it.\n\nChangelog\n\nNew in version 0.9.\n\nReturn type:  \nNone\n\n`content_encoding`  \nThe Content-Encoding entity-header field is used as a modifier to the media-type. When present, its value indicates what additional content codings have been applied to the entity-body, and thus what decoding mechanisms must be applied in order to obtain the media-type referenced by the Content-Type header field.\n\nChangelog\n\nNew in version 0.9.\n\n`property content_length: int | None`  \nThe Content-Length entity-header field indicates the size of the entity-body in bytes or, in the case of the HEAD method, the size of the entity-body that would have been sent had the request been a GET.\n\n`content_md5`  \nThe Content-MD5 entity-header field, as defined in RFC 1864, is an MD5 digest of the entity-body for the purpose of providing an end-to-end message integrity check (MIC) of the entity-body. (Note: a MIC is good for detecting accidental modification of the entity-body in transit, but is not proof against malicious attacks.)\n\nChangelog\n\nNew in version 0.9.\n\n`content_type`  \nThe Content-Type entity-header field indicates the media type of the entity-body sent to the recipient or, in the case of the HEAD method, the media type that would have been sent had the request been a GET.\n\n`property cookies: ImmutableMultiDict[str, str]`  \nA [`dict`](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.11)\") with the contents of all cookies transmitted with the request.\n\n`property data: bytes`  \nThe raw data read from [`stream`](#werkzeug.wrappers.Request.stream \"werkzeug.wrappers.Request.stream\"). Will be empty if the request represents form data.\n\nTo get the raw data even if it represents form data, use [`get_data()`](#werkzeug.wrappers.Request.get_data \"werkzeug.wrappers.Request.get_data\").\n\n`date`  \nThe Date general-header field represents the date and time at which the message was originated, having the same semantics as orig-date in RFC 822.\n\nChangelog\n\nChanged in version 2.0: The datetime object is timezone-aware.\n\n`dict_storage_class`  \nalias of [`ImmutableMultiDict`](../datastructures/index#werkzeug.datastructures.ImmutableMultiDict \"werkzeug.datastructures.structures.ImmutableMultiDict\")\n\n`environ: WSGIEnvironment`  \nThe WSGI environment containing HTTP headers and information from the WSGI server.\n\n`property files: ImmutableMultiDict[str, FileStorage]`  \n[`MultiDict`](../datastructures/index#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\") object containing all uploaded files. Each key in [`files`](#werkzeug.wrappers.Request.files \"werkzeug.wrappers.Request.files\") is the name from the `<input type=\"file\" name=\"\">`. Each value in [`files`](#werkzeug.wrappers.Request.files \"werkzeug.wrappers.Request.files\") is a Werkzeug [`FileStorage`](../datastructures/index#werkzeug.datastructures.FileStorage \"werkzeug.datastructures.FileStorage\") object.\n\nIt basically behaves like a standard file object you know from Python, with the difference that it also has a [`save()`](../datastructures/index#werkzeug.datastructures.FileStorage.save \"werkzeug.datastructures.FileStorage.save\") function that can store the file on the filesystem.\n\nNote that [`files`](#werkzeug.wrappers.Request.files \"werkzeug.wrappers.Request.files\") will only contain data if the request method was POST, PUT or PATCH and the `<form>` that posted to the request had `enctype=\"multipart/form-data\"`. It will be empty otherwise.\n\nSee the [`MultiDict`](../datastructures/index#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\") / [`FileStorage`](../datastructures/index#werkzeug.datastructures.FileStorage \"werkzeug.datastructures.FileStorage\") documentation for more details about the used data structure.\n\n`property form: ImmutableMultiDict[str, str]`  \nThe form parameters. By default an [`ImmutableMultiDict`](../datastructures/index#werkzeug.datastructures.ImmutableMultiDict \"werkzeug.datastructures.ImmutableMultiDict\") is returned from this function. This can be changed by setting [`parameter_storage_class`](#werkzeug.wrappers.Request.parameter_storage_class \"werkzeug.wrappers.Request.parameter_storage_class\") to a different type. This might be necessary if the order of the form data is important.\n\nPlease keep in mind that file uploads will not end up here, but instead in the [`files`](#werkzeug.wrappers.Request.files \"werkzeug.wrappers.Request.files\") attribute.\n\nChangelog\n\nChanged in version 0.9: Previous to Werkzeug 0.9 this would only contain form data for POST and PUT requests.\n\n`form_data_parser_class`  \nalias of [`FormDataParser`](../http/index#werkzeug.formparser.FormDataParser \"werkzeug.formparser.FormDataParser\")\n\n`classmethod from_values(*args, **kwargs)`  \nCreate a new request object based on the values provided. If environ is given missing values are filled from there. This method is useful for small scripts when you need to simulate a request from an URL. Do not use this method for unittesting, there is a full featured client object (`Client`) that allows to create multipart requests, support for cookies etc.\n\nThis accepts the same options as the [`EnvironBuilder`](../test/index#werkzeug.test.EnvironBuilder \"werkzeug.test.EnvironBuilder\").\n\nChangelog\n\nChanged in version 0.5: This method now accepts the same arguments as [`EnvironBuilder`](../test/index#werkzeug.test.EnvironBuilder \"werkzeug.test.EnvironBuilder\"). Because of this the `environ` parameter is now called `environ_overrides`.\n\nReturns:  \nrequest object\n\nParameters:  \n- **args** ([Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")) –\n- **kwargs** ([Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")) –\n\nReturn type:  \n[Request](#werkzeug.wrappers.Request \"werkzeug.wrappers.request.Request\")\n\n`property full_path: str`  \nRequested path, including the query string.\n\n`get_data(cache: bool = True, as_text: Literal[False] = False, parse_form_data: bool = False) → bytes`  \nget_data(*cache:[bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")=True*, *as_text:[Literal](https://docs.python.org/3/library/typing.html#typing.Literal \"(in Python v3.11)\")\\[True\\]=False*, *parse_form_data:[bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")=False*) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")  \nThis reads the buffered incoming data from the client into one bytes object. By default this is cached but that behavior can be changed by setting `cache` to `False`.\n\nUsually it’s a bad idea to call this method without checking the content length first as a client could send dozens of megabytes or more to cause memory problems on the server.\n\nNote that if the form data was already parsed this method will not return anything as form data parsing does not cache the data like this method does. To implicitly invoke form data parsing function set `parse_form_data` to `True`. When this is done the return value of this method will be an empty string if the form parser handles the data. This generally is not necessary as if the whole data is cached (which is the default) the form parser will used the cached data to parse the form data. Please be generally aware of checking the content length first in any case before calling this method to avoid exhausting server memory.\n\nIf `as_text` is set to `True` the return value will be a decoded string.\n\nChangelog\n\nNew in version 0.9.\n\n`get_json(force: bool = False, silent: Literal[False] = False, cache: bool = True) → Any`  \nget_json(*force:[bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")=False*, *silent:[bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")=False*, *cache:[bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")=True*) → [Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")\\|[None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.11)\")  \nParse [`data`](#werkzeug.wrappers.Request.data \"werkzeug.wrappers.Request.data\") as JSON.\n\nIf the mimetype does not indicate JSON (*application/json*, see [`is_json`](#werkzeug.wrappers.Request.is_json \"werkzeug.wrappers.Request.is_json\")), or parsing fails, [`on_json_loading_failed()`](#werkzeug.wrappers.Request.on_json_loading_failed \"werkzeug.wrappers.Request.on_json_loading_failed\") is called and its return value is used as the return value. By default this raises a 415 Unsupported Media Type resp.\n\nParameters:  \n- **force** – Ignore the mimetype and always try to parse JSON.\n- **silent** – Silence mimetype and parsing errors, and return `None` instead.\n- **cache** – Store the parsed JSON to return for subsequent calls.\n\nChangelog\n\nChanged in version 2.3: Raise a 415 error instead of 400.\n\nChanged in version 2.1: Raise a 400 error if the content type is incorrect.\n\n`headers`  \nThe headers received with the request.\n\n`property host: str`  \nThe host name the request was made to, including the port if it’s non-standard. Validated with [`trusted_hosts`](#werkzeug.wrappers.Request.trusted_hosts \"werkzeug.wrappers.Request.trusted_hosts\").\n\n`property host_url: str`  \nThe request URL scheme and host only.\n\n`property if_match: ETags`  \nAn object containing all the etags in the `If-Match` header.\n\nReturn type:  \n[`ETags`](../datastructures/index#werkzeug.datastructures.ETags \"werkzeug.datastructures.ETags\")\n\n`property if_modified_since: datetime | None`  \nThe parsed `If-Modified-Since` header as a datetime object.\n\nChangelog\n\nChanged in version 2.0: The datetime object is timezone-aware.\n\n`property if_none_match: ETags`  \nAn object containing all the etags in the `If-None-Match` header.\n\nReturn type:  \n[`ETags`](../datastructures/index#werkzeug.datastructures.ETags \"werkzeug.datastructures.ETags\")\n\n`property if_range: IfRange`  \nThe parsed `If-Range` header.\n\nChangelog\n\nChanged in version 2.0: `IfRange.date` is timezone-aware.\n\nNew in version 0.7.\n\n`property if_unmodified_since: datetime | None`  \nThe parsed `If-Unmodified-Since` header as a datetime object.\n\nChangelog\n\nChanged in version 2.0: The datetime object is timezone-aware.\n\n`input_stream`  \nThe raw WSGI input stream, without any safety checks.\n\nThis is dangerous to use. It does not guard against infinite streams or reading past [`content_length`](#werkzeug.wrappers.Request.content_length \"werkzeug.wrappers.Request.content_length\") or [`max_content_length`](#werkzeug.wrappers.Request.max_content_length \"werkzeug.wrappers.Request.max_content_length\").\n\nUse [`stream`](#werkzeug.wrappers.Request.stream \"werkzeug.wrappers.Request.stream\") instead.\n\n`property is_json: bool`  \nCheck if the mimetype indicates JSON data, either *application/json* or *application/\\*+json*.\n\n`is_multiprocess`  \nboolean that is `True` if the application is served by a WSGI server that spawns multiple processes.\n\n`is_multithread`  \nboolean that is `True` if the application is served by a multithreaded WSGI server.\n\n`is_run_once`  \nboolean that is `True` if the application will be executed only once in a process lifetime. This is the case for CGI for example, but it’s not guaranteed that the execution only happens one time.\n\n`property is_secure: bool`  \n`True` if the request was made with a secure protocol (HTTPS or WSS).\n\n`property json: Any | None`  \nThe parsed JSON data if [`mimetype`](#werkzeug.wrappers.Request.mimetype \"werkzeug.wrappers.Request.mimetype\") indicates JSON (*application/json*, see [`is_json`](#werkzeug.wrappers.Request.is_json \"werkzeug.wrappers.Request.is_json\")).\n\nCalls [`get_json()`](#werkzeug.wrappers.Request.get_json \"werkzeug.wrappers.Request.get_json\") with default arguments.\n\nIf the request content type is not `application/json`, this will raise a 415 Unsupported Media Type error.\n\nChangelog\n\nChanged in version 2.3: Raise a 415 error instead of 400.\n\nChanged in version 2.1: Raise a 400 error if the content type is incorrect.\n\n`json_module = <module 'json' from '/home/docs/.asdf/installs/python/3.10.12/lib/python3.10/json/__init__.py'>`  \nA module or other object that has `dumps` and `loads` functions that match the API of the built-in [`json`](https://docs.python.org/3/library/json.html#module-json \"(in Python v3.11)\") module.\n\n`list_storage_class`  \nalias of [`ImmutableList`](../datastructures/index#werkzeug.datastructures.ImmutableList \"werkzeug.datastructures.structures.ImmutableList\")\n\n`make_form_data_parser()`  \nCreates the form data parser. Instantiates the [`form_data_parser_class`](#werkzeug.wrappers.Request.form_data_parser_class \"werkzeug.wrappers.Request.form_data_parser_class\") with some parameters.\n\nChangelog\n\nNew in version 0.8.\n\nReturn type:  \n[FormDataParser](../http/index#werkzeug.formparser.FormDataParser \"werkzeug.formparser.FormDataParser\")\n\n`max_content_length: int | None = None`  \nthe maximum content length. This is forwarded to the form data parsing function (`parse_form_data()`). When set and the [`form`](#werkzeug.wrappers.Request.form \"werkzeug.wrappers.Request.form\") or [`files`](#werkzeug.wrappers.Request.files \"werkzeug.wrappers.Request.files\") attribute is accessed and the parsing fails because more than the specified value is transmitted a [`RequestEntityTooLarge`](../exceptions/index#werkzeug.exceptions.RequestEntityTooLarge \"werkzeug.exceptions.RequestEntityTooLarge\") exception is raised.\n\nChangelog\n\nNew in version 0.5.\n\n`max_form_memory_size: int | None = None`  \nthe maximum form field size. This is forwarded to the form data parsing function (`parse_form_data()`). When set and the [`form`](#werkzeug.wrappers.Request.form \"werkzeug.wrappers.Request.form\") or [`files`](#werkzeug.wrappers.Request.files \"werkzeug.wrappers.Request.files\") attribute is accessed and the data in memory for post data is longer than the specified value a [`RequestEntityTooLarge`](../exceptions/index#werkzeug.exceptions.RequestEntityTooLarge \"werkzeug.exceptions.RequestEntityTooLarge\") exception is raised.\n\nChangelog\n\nNew in version 0.5.\n\n`max_form_parts = 1000`  \nThe maximum number of multipart parts to parse, passed to [`form_data_parser_class`](#werkzeug.wrappers.Request.form_data_parser_class \"werkzeug.wrappers.Request.form_data_parser_class\"). Parsing form data with more than this many parts will raise [`RequestEntityTooLarge`](../exceptions/index#werkzeug.exceptions.RequestEntityTooLarge \"werkzeug.exceptions.RequestEntityTooLarge\").\n\nChangelog\n\nNew in version 2.2.3.\n\n`max_forwards`  \nThe Max-Forwards request-header field provides a mechanism with the TRACE and OPTIONS methods to limit the number of proxies or gateways that can forward the request to the next inbound server.\n\n`method`  \nThe method the request was made with, such as `GET`.\n\n`property mimetype: str`  \nLike [`content_type`](#werkzeug.wrappers.Request.content_type \"werkzeug.wrappers.Request.content_type\"), but without parameters (eg, without charset, type etc.) and always lowercase. For example if the content type is `text/HTML; charset=utf-8` the mimetype would be `'text/html'`.\n\n`property mimetype_params: dict[str, str]`  \nThe mimetype parameters as dict. For example if the content type is `text/html; charset=utf-8` the params would be `{'charset': 'utf-8'}`.\n\n`on_json_loading_failed(e)`  \nCalled if [`get_json()`](#werkzeug.wrappers.Request.get_json \"werkzeug.wrappers.Request.get_json\") fails and isn’t silenced.\n\nIf this method returns a value, it is used as the return value for [`get_json()`](#werkzeug.wrappers.Request.get_json \"werkzeug.wrappers.Request.get_json\"). The default implementation raises [`BadRequest`](../exceptions/index#werkzeug.exceptions.BadRequest \"werkzeug.exceptions.BadRequest\").\n\nParameters:  \n**e** ([ValueError](https://docs.python.org/3/library/exceptions.html#ValueError \"(in Python v3.11)\") *\\|* *None*) – If parsing failed, this is the exception. It will be `None` if the content type wasn’t `application/json`.\n\nReturn type:  \n[Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")\n\nChangelog\n\nChanged in version 2.3: Raise a 415 error instead of 400.\n\n`origin`  \nThe host that the request originated from. Set `access_control_allow_origin` on the response to indicate which origins are allowed.\n\n`parameter_storage_class`  \nalias of [`ImmutableMultiDict`](../datastructures/index#werkzeug.datastructures.ImmutableMultiDict \"werkzeug.datastructures.structures.ImmutableMultiDict\")\n\n`path`  \nThe path part of the URL after [`root_path`](#werkzeug.wrappers.Request.root_path \"werkzeug.wrappers.Request.root_path\"). This is the path used for routing within the application.\n\n`property pragma: HeaderSet`  \nThe Pragma general-header field is used to include implementation-specific directives that might apply to any recipient along the request/response chain. All pragma directives specify optional behavior from the viewpoint of the protocol; however, some systems MAY require that behavior be consistent with the directives.\n\n`query_string`  \nThe part of the URL after the “?”. This is the raw value, use [`args`](#werkzeug.wrappers.Request.args \"werkzeug.wrappers.Request.args\") for the parsed values.\n\n`property range: Range | None`  \nThe parsed `Range` header.\n\nChangelog\n\nNew in version 0.7.\n\nReturn type:  \n[`Range`](../datastructures/index#werkzeug.datastructures.Range \"werkzeug.datastructures.Range\")\n\n`referrer`  \nThe Referer\\[sic\\] request-header field allows the client to specify, for the server’s benefit, the address (URI) of the resource from which the Request-URI was obtained (the “referrer”, although the header field is misspelled).\n\n`remote_addr`  \nThe address of the client sending the request.\n\n`remote_user`  \nIf the server supports user authentication, and the script is protected, this attribute contains the username the user has authenticated as.\n\n`root_path`  \nThe prefix that the application is mounted under, without a trailing slash. [`path`](#werkzeug.wrappers.Request.path \"werkzeug.wrappers.Request.path\") comes after this.\n\n`property root_url: str`  \nThe request URL scheme, host, and root path. This is the root that the application is accessed from.\n\n`scheme`  \nThe URL scheme of the protocol the request used, such as `https` or `wss`.\n\n`property script_root: str`  \nAlias for `self.root_path`. `environ[\"SCRIPT_ROOT\"]` without a trailing slash.\n\n`server`  \nThe address of the server. `(host, port)`, `(path, None)` for unix sockets, or `None` if not known.\n\n`shallow: bool`  \nSet when creating the request object. If `True`, reading from the request body will cause a `RuntimeException`. Useful to prevent modifying the stream from middleware.\n\n`property stream: IO[bytes]`  \nThe WSGI input stream, with safety checks. This stream can only be consumed once.\n\nUse [`get_data()`](#werkzeug.wrappers.Request.get_data \"werkzeug.wrappers.Request.get_data\") to get the full data as bytes or text. The [`data`](#werkzeug.wrappers.Request.data \"werkzeug.wrappers.Request.data\") attribute will contain the full bytes only if they do not represent form data. The [`form`](#werkzeug.wrappers.Request.form \"werkzeug.wrappers.Request.form\") attribute will contain the parsed form data in that case.\n\nUnlike [`input_stream`](#werkzeug.wrappers.Request.input_stream \"werkzeug.wrappers.Request.input_stream\"), this stream guards against infinite streams or reading past [`content_length`](#werkzeug.wrappers.Request.content_length \"werkzeug.wrappers.Request.content_length\") or [`max_content_length`](#werkzeug.wrappers.Request.max_content_length \"werkzeug.wrappers.Request.max_content_length\").\n\nIf `max_content_length` is set, it can be enforced on streams if `wsgi.input_terminated` is set. Otherwise, an empty stream is returned.\n\nIf the limit is reached before the underlying stream is exhausted (such as a file that is too large, or an infinite stream), the remaining contents of the stream cannot be read safely. Depending on how the server handles this, clients may show a “connection reset” failure instead of seeing the 413 response.\n\nChangelog\n\nChanged in version 2.3: Check `max_content_length` preemptively and while reading.\n\nChanged in version 0.9: The stream is always set (but may be consumed) even if form parsing was accessed first.\n\n`trusted_hosts: list[str] | None = None`  \nValid host names when handling requests. By default all hosts are trusted, which means that whatever the client says the host is will be accepted.\n\nBecause `Host` and `X-Forwarded-Host` headers can be set to any value by a malicious client, it is recommended to either set this property or implement similar validation in the proxy (if the application is being run behind one).\n\nChangelog\n\nNew in version 0.9.\n\n`property url: str`  \nThe full request URL with the scheme, host, root path, path, and query string.\n\n`property url_root: str`  \nAlias for [`root_url`](#werkzeug.wrappers.Request.root_url \"werkzeug.wrappers.Request.root_url\"). The URL with scheme, host, and root path. For example, `https://example.com/app/`.\n\n`property user_agent: UserAgent`  \nThe user agent. Use `user_agent.string` to get the header value. Set [`user_agent_class`](#werkzeug.wrappers.Request.user_agent_class \"werkzeug.wrappers.Request.user_agent_class\") to a subclass of [`UserAgent`](../utils/index#werkzeug.user_agent.UserAgent \"werkzeug.user_agent.UserAgent\") to provide parsing for the other properties or other extended data.\n\nChangelog\n\nChanged in version 2.1: The built-in parser was removed. Set `user_agent_class` to a `UserAgent` subclass to parse data from the string.\n\n`user_agent_class`  \nalias of [`UserAgent`](../utils/index#werkzeug.user_agent.UserAgent \"werkzeug.user_agent.UserAgent\")\n\n`property values: CombinedMultiDict[str, str]`  \nA [`werkzeug.datastructures.CombinedMultiDict`](../datastructures/index#werkzeug.datastructures.CombinedMultiDict \"werkzeug.datastructures.CombinedMultiDict\") that combines [`args`](#werkzeug.wrappers.Request.args \"werkzeug.wrappers.Request.args\") and [`form`](#werkzeug.wrappers.Request.form \"werkzeug.wrappers.Request.form\").\n\nFor GET requests, only `args` are present, not `form`.\n\nChangelog\n\nChanged in version 2.0: For GET requests, only `args` are present, not `form`.\n\n`property want_form_data_parsed: bool`  \n`True` if the request method carries content. By default this is true if a `Content-Type` is sent.\n\nChangelog\n\nNew in version 0.8.\n\n`class werkzeug.wrappers.Response(response=None, status=None, headers=None, mimetype=None, content_type=None, direct_passthrough=False)`  \nRepresents an outgoing WSGI HTTP response with body, status, and headers. Has properties and methods for using the functionality defined by various HTTP specs.\n\nThe response body is flexible to support different use cases. The simple form is passing bytes, or a string which will be encoded as UTF-8. Passing an iterable of bytes or strings makes this a streaming response. A generator is particularly useful for building a CSV file in memory or using SSE (Server Sent Events). A file-like object is also iterable, although the [`send_file()`](../utils/index#werkzeug.utils.send_file \"werkzeug.utils.send_file\") helper should be used in that case.\n\nThe response object is itself a WSGI application callable. When called ([`__call__()`](#werkzeug.wrappers.Response.__call__ \"werkzeug.wrappers.Response.__call__\")) with `environ` and `start_response`, it will pass its status and headers to `start_response` then return its body as an iterable.\n\n``` python\nfrom werkzeug.wrappers.response import Response\n\ndef index():\n    return Response(\"Hello, World!\")\n\ndef application(environ, start_response):\n    path = environ.get(\"PATH_INFO\") or \"/\"\n\n    if path == \"/\":\n        response = index()\n    else:\n        response = Response(\"Not Found\", status=404)\n\n    return response(environ, start_response)\n```\n\nParameters:  \n- **response** ([Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]* *\\|* [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.11)\")*\\[*[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\")*\\]*) – The data for the body of the response. A string or bytes, or tuple or list of strings or bytes, for a fixed-length response, or any other iterable of strings or bytes for a streaming response. Defaults to an empty body.\n- **status** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *HTTPStatus* *\\|* *None*) – The status code for the response. Either an int, in which case the default status message is added, or a string in the form `{code} {message}`, like `404 Not Found`. Defaults to 200.\n- **headers** ([Headers](../datastructures/index#werkzeug.datastructures.Headers \"werkzeug.datastructures.headers.Headers\")) – A [`Headers`](../datastructures/index#werkzeug.datastructures.Headers \"werkzeug.datastructures.Headers\") object, or a list of `(key, value)` tuples that will be converted to a `Headers` object.\n- **mimetype** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – The mime type (content type without charset or other parameters) of the response. If the value starts with `text/` (or matches some other special cases), the charset will be added to create the `content_type`.\n- **content_type** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – The full content type of the response. Overrides building the value from `mimetype`.\n- **direct_passthrough** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Pass the response body directly through as the WSGI iterable. This can be used when the body is a binary file or other iterator of bytes, to skip some unnecessary checks. Use [`send_file()`](../utils/index#werkzeug.utils.send_file \"werkzeug.utils.send_file\") instead of setting this manually.\n\nChangelog\n\nChanged in version 2.1: Old `BaseResponse` and mixin classes were removed.\n\nChanged in version 2.0: Combine `BaseResponse` and mixins into a single `Response` class.\n\nChanged in version 0.5: The `direct_passthrough` parameter was added.\n\n`__call__(environ, start_response)`  \nProcess this response as WSGI application.\n\nParameters:  \n- **environ** (*WSGIEnvironment*) – the WSGI environment.\n- **start_response** (*StartResponse*) – the response callable provided by the WSGI server.\n\nReturns:  \nan application iterator\n\nReturn type:  \nt.Iterable\\[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\")\\]\n\n`_ensure_sequence(mutable=False)`  \nThis method can be called by methods that need a sequence. If `mutable` is true, it will also ensure that the response sequence is a standard Python list.\n\nChangelog\n\nNew in version 0.6.\n\nParameters:  \n**mutable** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) –\n\nReturn type:  \nNone\n\n`accept_ranges`  \nThe `Accept-Ranges` header. Even though the name would indicate that multiple values are supported, it must be one string token only.\n\nThe values `'bytes'` and `'none'` are common.\n\nChangelog\n\nNew in version 0.7.\n\n`property access_control_allow_credentials: bool`  \nWhether credentials can be shared by the browser to JavaScript code. As part of the preflight request it indicates whether credentials can be used on the cross origin request.\n\n`access_control_allow_headers`  \nWhich headers can be sent with the cross origin request.\n\n`access_control_allow_methods`  \nWhich methods can be used for the cross origin request.\n\n`access_control_allow_origin`  \nThe origin or ‘\\*’ for any origin that may make cross origin requests.\n\n`access_control_expose_headers`  \nWhich headers can be shared by the browser to JavaScript code.\n\n`access_control_max_age`  \nThe maximum age in seconds the access control settings can be cached for.\n\n`add_etag(overwrite=False, weak=False)`  \nAdd an etag for the current response if there is none yet.\n\nChangelog\n\nChanged in version 2.0: SHA-1 is used to generate the value. MD5 may not be available in some environments.\n\nParameters:  \n- **overwrite** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) –\n- **weak** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) –\n\nReturn type:  \nNone\n\n`age`  \nThe Age response-header field conveys the sender’s estimate of the amount of time since the response (or its revalidation) was generated at the origin server.\n\nAge values are non-negative decimal integers, representing time in seconds.\n\n`property allow: HeaderSet`  \nThe Allow entity-header field lists the set of methods supported by the resource identified by the Request-URI. The purpose of this field is strictly to inform the recipient of valid methods associated with the resource. An Allow header field MUST be present in a 405 (Method Not Allowed) response.\n\n`autocorrect_location_header = False`  \nIf a redirect `Location` header is a relative URL, make it an absolute URL, including scheme and domain.\n\nChangelog\n\nChanged in version 2.1: This is disabled by default, so responses will send relative redirects.\n\nNew in version 0.8.\n\n`automatically_set_content_length = True`  \nShould this response object automatically set the content-length header if possible? This is true by default.\n\nChangelog\n\nNew in version 0.8.\n\n`property cache_control: ResponseCacheControl`  \nThe Cache-Control general-header field is used to specify directives that MUST be obeyed by all caching mechanisms along the request/response chain.\n\n`calculate_content_length()`  \nReturns the content length if available or `None` otherwise.\n\nReturn type:  \n[int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") \\| None\n\n`call_on_close(func)`  \nAdds a function to the internal list of functions that should be called as part of closing down the response. Since 0.7 this function also returns the function that was passed so that this can be used as a decorator.\n\nChangelog\n\nNew in version 0.6.\n\nParameters:  \n**func** ([Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.11)\")*\\[\\[\\],* [Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")*\\]*) –\n\nReturn type:  \n[Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.11)\")\\[\\[\\], [Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")\\]\n\n`close()`  \nClose the wrapped response if possible. You can also use the object in a with statement which will automatically close it.\n\nChangelog\n\nNew in version 0.9: Can now be used in a with statement.\n\nReturn type:  \nNone\n\n`content_encoding`  \nThe Content-Encoding entity-header field is used as a modifier to the media-type. When present, its value indicates what additional content codings have been applied to the entity-body, and thus what decoding mechanisms must be applied in order to obtain the media-type referenced by the Content-Type header field.\n\n`property content_language: HeaderSet`  \nThe Content-Language entity-header field describes the natural language(s) of the intended audience for the enclosed entity. Note that this might not be equivalent to all the languages used within the entity-body.\n\n`content_length`  \nThe Content-Length entity-header field indicates the size of the entity-body, in decimal number of OCTETs, sent to the recipient or, in the case of the HEAD method, the size of the entity-body that would have been sent had the request been a GET.\n\n`content_location`  \nThe Content-Location entity-header field MAY be used to supply the resource location for the entity enclosed in the message when that entity is accessible from a location separate from the requested resource’s URI.\n\n`content_md5`  \nThe Content-MD5 entity-header field, as defined in RFC 1864, is an MD5 digest of the entity-body for the purpose of providing an end-to-end message integrity check (MIC) of the entity-body. (Note: a MIC is good for detecting accidental modification of the entity-body in transit, but is not proof against malicious attacks.)\n\n`property content_range: ContentRange`  \nThe `Content-Range` header as a [`ContentRange`](../datastructures/index#werkzeug.datastructures.ContentRange \"werkzeug.datastructures.ContentRange\") object. Available even if the header is not set.\n\nChangelog\n\nNew in version 0.7.\n\n`property content_security_policy: ContentSecurityPolicy`  \nThe `Content-Security-Policy` header as a `ContentSecurityPolicy` object. Available even if the header is not set.\n\nThe Content-Security-Policy header adds an additional layer of security to help detect and mitigate certain types of attacks.\n\n`property content_security_policy_report_only: ContentSecurityPolicy`  \nThe `Content-Security-policy-report-only` header as a `ContentSecurityPolicy` object. Available even if the header is not set.\n\nThe Content-Security-Policy-Report-Only header adds a csp policy that is not enforced but is reported thereby helping detect certain types of attacks.\n\n`content_type`  \nThe Content-Type entity-header field indicates the media type of the entity-body sent to the recipient or, in the case of the HEAD method, the media type that would have been sent had the request been a GET.\n\n`cross_origin_embedder_policy`  \nPrevents a document from loading any cross-origin resources that do not explicitly grant the document permission. Values must be a member of the `werkzeug.http.COEP` enum.\n\n`cross_origin_opener_policy`  \nAllows control over sharing of browsing context group with cross-origin documents. Values must be a member of the `werkzeug.http.COOP` enum.\n\n`property data: bytes | str`  \nA descriptor that calls [`get_data()`](#werkzeug.wrappers.Response.get_data \"werkzeug.wrappers.Response.get_data\") and [`set_data()`](#werkzeug.wrappers.Response.set_data \"werkzeug.wrappers.Response.set_data\").\n\n`date`  \nThe Date general-header field represents the date and time at which the message was originated, having the same semantics as orig-date in RFC 822.\n\nChangelog\n\nChanged in version 2.0: The datetime object is timezone-aware.\n\n`default_mimetype: str | None = 'text/plain'`  \nthe default mimetype if none is provided.\n\n`default_status = 200`  \nthe default status if none is provided.\n\n`delete_cookie(key, path='/', domain=None, secure=False, httponly=False, samesite=None)`  \nDelete a cookie. Fails silently if key doesn’t exist.\n\nParameters:  \n- **key** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – the key (name) of the cookie to be deleted.\n- **path** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – if the cookie that should be deleted was limited to a path, the path has to be defined here.\n- **domain** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – if the cookie that should be deleted was limited to a domain, that domain has to be defined here.\n- **secure** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – If `True`, the cookie will only be available via HTTPS.\n- **httponly** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Disallow JavaScript access to the cookie.\n- **samesite** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – Limit the scope of the cookie to only be attached to requests that are “same-site”.\n\nReturn type:  \nNone\n\n`direct_passthrough`  \nPass the response body directly through as the WSGI iterable. This can be used when the body is a binary file or other iterator of bytes, to skip some unnecessary checks. Use [`send_file()`](../utils/index#werkzeug.utils.send_file \"werkzeug.utils.send_file\") instead of setting this manually.\n\n`expires`  \nThe Expires entity-header field gives the date/time after which the response is considered stale. A stale cache entry may not normally be returned by a cache.\n\nChangelog\n\nChanged in version 2.0: The datetime object is timezone-aware.\n\n`classmethod force_type(response, environ=None)`  \nEnforce that the WSGI response is a response object of the current type. Werkzeug will use the [`Response`](#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") internally in many situations like the exceptions. If you call `get_response()` on an exception you will get back a regular [`Response`](#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") object, even if you are using a custom subclass.\n\nThis method can enforce a given response type, and it will also convert arbitrary WSGI callables into response objects if an environ is provided:\n\n``` python\n# convert a Werkzeug response object into an instance of the\n# MyResponseClass subclass.\nresponse = MyResponseClass.force_type(response)\n\n# convert any WSGI application into a response object\nresponse = MyResponseClass.force_type(response, environ)\n```\n\nThis is especially useful if you want to post-process responses in the main dispatcher and use functionality provided by your subclass.\n\nKeep in mind that this will modify response objects in place if possible!\n\nParameters:  \n- **response** ([Response](#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\")) – a response object or wsgi application.\n- **environ** (*WSGIEnvironment* *\\|* *None*) – a WSGI environment object.\n\nReturns:  \na response object.\n\nReturn type:  \n[Response](#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\")\n\n`freeze()`  \nMake the response object ready to be pickled. Does the following:\n\n- Buffer the response into a list, ignoring `implicity_sequence_conversion` and [`direct_passthrough`](#werkzeug.wrappers.Response.direct_passthrough \"werkzeug.wrappers.Response.direct_passthrough\").\n- Set the `Content-Length` header.\n- Generate an `ETag` header if one is not already set.\n\nChangelog\n\nChanged in version 2.1: Removed the `no_etag` parameter.\n\nChanged in version 2.0: An `ETag` header is always added.\n\nChanged in version 0.6: The `Content-Length` header is set.\n\nReturn type:  \nNone\n\n`classmethod from_app(app, environ, buffered=False)`  \nCreate a new response object from an application output. This works best if you pass it an application that returns a generator all the time. Sometimes applications may use the `write()` callable returned by the `start_response` function. This tries to resolve such edge cases automatically. But if you don’t get the expected output you should set `buffered` to `True` which enforces buffering.\n\nParameters:  \n- **app** (*WSGIApplication*) – the WSGI application to execute.\n- **environ** (*WSGIEnvironment*) – the WSGI environment to execute against.\n- **buffered** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – set to `True` to enforce buffering.\n\nReturns:  \na response object.\n\nReturn type:  \n[Response](#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\")\n\n`get_app_iter(environ)`  \nReturns the application iterator for the given environ. Depending on the request method and the current status code the return value might be an empty response rather than the one from the response.\n\nIf the request method is `HEAD` or the status code is in a range where the HTTP specification requires an empty response, an empty iterable is returned.\n\nChangelog\n\nNew in version 0.6.\n\nParameters:  \n**environ** (*WSGIEnvironment*) – the WSGI environment of the request.\n\nReturns:  \na response iterable.\n\nReturn type:  \nt.Iterable\\[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\")\\]\n\n`get_data(as_text: Literal[False] = False) → bytes`  \nget_data(*as_text:[Literal](https://docs.python.org/3/library/typing.html#typing.Literal \"(in Python v3.11)\")\\[True\\]*) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")  \nThe string representation of the response body. Whenever you call this property the response iterable is encoded and flattened. This can lead to unwanted behavior if you stream big data.\n\nThis behavior can be disabled by setting [`implicit_sequence_conversion`](#werkzeug.wrappers.Response.implicit_sequence_conversion \"werkzeug.wrappers.Response.implicit_sequence_conversion\") to `False`.\n\nIf `as_text` is set to `True` the return value will be a decoded string.\n\nChangelog\n\nNew in version 0.9.\n\n`get_etag()`  \nReturn a tuple in the form `(etag, is_weak)`. If there is no ETag the return value is `(None, None)`.\n\nReturn type:  \n[tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\"), [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")\\] \\| [tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")\\[None, None\\]\n\n`get_json(force: bool = False, silent: Literal[False] = False) → Any`  \nget_json(*force:[bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")=False*, *silent:[bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")=False*) → [Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")\\|[None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.11)\")  \nParse [`data`](#werkzeug.wrappers.Response.data \"werkzeug.wrappers.Response.data\") as JSON. Useful during testing.\n\nIf the mimetype does not indicate JSON (*application/json*, see [`is_json`](#werkzeug.wrappers.Response.is_json \"werkzeug.wrappers.Response.is_json\")), this returns `None`.\n\nUnlike [`Request.get_json()`](#werkzeug.wrappers.Request.get_json \"werkzeug.wrappers.Request.get_json\"), the result is not cached.\n\nParameters:  \n- **force** – Ignore the mimetype and always try to parse JSON.\n- **silent** – Silence parsing errors and return `None` instead.\n\n`get_wsgi_headers(environ)`  \nThis is automatically called right before the response is started and returns headers modified for the given environment. It returns a copy of the headers from the response with some modifications applied if necessary.\n\nFor example the location header (if present) is joined with the root URL of the environment. Also the content length is automatically set to zero here for certain status codes.\n\nChangelog\n\nChanged in version 0.6: Previously that function was called `fix_headers` and modified the response object in place. Also since 0.6, IRIs in location and content-location headers are handled properly.\n\nAlso starting with 0.6, Werkzeug will attempt to set the content length if it is able to figure it out on its own. This is the case if all the strings in the response iterable are already encoded and the iterable is buffered.\n\nParameters:  \n**environ** (*WSGIEnvironment*) – the WSGI environment of the request.\n\nReturns:  \nreturns a new [`Headers`](../datastructures/index#werkzeug.datastructures.Headers \"werkzeug.datastructures.Headers\") object.\n\nReturn type:  \n[Headers](../datastructures/index#werkzeug.datastructures.Headers \"werkzeug.datastructures.Headers\")\n\n`get_wsgi_response(environ)`  \nReturns the final WSGI response as tuple. The first item in the tuple is the application iterator, the second the status and the third the list of headers. The response returned is created specially for the given environment. For example if the request method in the WSGI environment is `'HEAD'` the response will be empty and only the headers and status code will be present.\n\nChangelog\n\nNew in version 0.6.\n\nParameters:  \n**environ** (*WSGIEnvironment*) – the WSGI environment of the request.\n\nReturns:  \nan `(app_iter, status, headers)` tuple.\n\nReturn type:  \n[tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")\\[t.Iterable\\[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\")\\], [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\"), [list](https://docs.python.org/3/library/stdtypes.html#list \"(in Python v3.11)\")\\[[tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\"), [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\\]\\]\\]\n\n`implicit_sequence_conversion = True`  \nif set to `False` accessing properties on the response object will not try to consume the response iterator and convert it into a list.\n\nChangelog\n\nNew in version 0.6.2: That attribute was previously called `implicit_seqence_conversion`. (Notice the typo). If you did use this feature, you have to adapt your code to the name change.\n\n`property is_json: bool`  \nCheck if the mimetype indicates JSON data, either *application/json* or *application/\\*+json*.\n\n`property is_sequence: bool`  \nIf the iterator is buffered, this property will be `True`. A response object will consider an iterator to be buffered if the response attribute is a list or tuple.\n\nChangelog\n\nNew in version 0.6.\n\n`property is_streamed: bool`  \nIf the response is streamed (the response is not an iterable with a length information) this property is `True`. In this case streamed means that there is no information about the number of iterations. This is usually `True` if a generator is passed to the response object.\n\nThis is useful for checking before applying some sort of post filtering that should not take place for streamed responses.\n\n`iter_encoded()`  \nIter the response encoded with the encoding of the response. If the response object is invoked as WSGI application the return value of this method is used as application iterator unless [`direct_passthrough`](#werkzeug.wrappers.Response.direct_passthrough \"werkzeug.wrappers.Response.direct_passthrough\") was activated.\n\nReturn type:  \n[Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.11)\")\\[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\")\\]\n\n`property json: Any | None`  \nThe parsed JSON data if [`mimetype`](#werkzeug.wrappers.Response.mimetype \"werkzeug.wrappers.Response.mimetype\") indicates JSON (*application/json*, see [`is_json`](#werkzeug.wrappers.Response.is_json \"werkzeug.wrappers.Response.is_json\")).\n\nCalls [`get_json()`](#werkzeug.wrappers.Response.get_json \"werkzeug.wrappers.Response.get_json\") with default arguments.\n\n`json_module = <module 'json' from '/home/docs/.asdf/installs/python/3.10.12/lib/python3.10/json/__init__.py'>`  \nA module or other object that has `dumps` and `loads` functions that match the API of the built-in [`json`](https://docs.python.org/3/library/json.html#module-json \"(in Python v3.11)\") module.\n\n`last_modified`  \nThe Last-Modified entity-header field indicates the date and time at which the origin server believes the variant was last modified.\n\nChangelog\n\nChanged in version 2.0: The datetime object is timezone-aware.\n\n`location`  \nThe Location response-header field is used to redirect the recipient to a location other than the Request-URI for completion of the request or identification of a new resource.\n\n`make_conditional(request_or_environ, accept_ranges=False, complete_length=None)`  \nMake the response conditional to the request. This method works best if an etag was defined for the response already. The `add_etag` method can be used to do that. If called without etag just the date header is set.\n\nThis does nothing if the request method in the request or environ is anything but GET or HEAD.\n\nFor optimal performance when handling range requests, it’s recommended that your response data object implements `seekable`, `seek` and `tell` methods as described by [`io.IOBase`](https://docs.python.org/3/library/io.html#io.IOBase \"(in Python v3.11)\"). Objects returned by [`wrap_file()`](../wsgi/index#werkzeug.wsgi.wrap_file \"werkzeug.wsgi.wrap_file\") automatically implement those methods.\n\nIt does not remove the body of the response because that’s something the [`__call__()`](#werkzeug.wrappers.Response.__call__ \"werkzeug.wrappers.Response.__call__\") function does for us automatically.\n\nReturns self so that you can do `return resp.make_conditional(req)` but modifies the object in-place.\n\nParameters:  \n- **request_or_environ** (*WSGIEnvironment* *\\|* [Request](#werkzeug.wrappers.Request \"werkzeug.wrappers.Request\")) – a request object or WSGI environment to be used to make the response conditional against.\n- **accept_ranges** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\") *\\|* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – This parameter dictates the value of `Accept-Ranges` header. If `False` (default), the header is not set. If `True`, it will be set to `\"bytes\"`. If it’s a string, it will use this value.\n- **complete_length** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) – Will be used only in valid Range Requests. It will set `Content-Range` complete length value and compute `Content-Length` real value. This parameter is mandatory for successful Range Requests completion.\n\nRaises:  \n[`RequestedRangeNotSatisfiable`](../exceptions/index#werkzeug.exceptions.RequestedRangeNotSatisfiable \"werkzeug.exceptions.RequestedRangeNotSatisfiable\") if `Range` header could not be parsed or satisfied.\n\nReturn type:  \n[Response](#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\")\n\nChangelog\n\nChanged in version 2.0: Range processing is skipped if length is 0 instead of raising a 416 Range Not Satisfiable error.\n\n`make_sequence()`  \nConverts the response iterator in a list. By default this happens automatically if required. If `implicit_sequence_conversion` is disabled, this method is not automatically called and some properties might raise exceptions. This also encodes all the items.\n\nChangelog\n\nNew in version 0.6.\n\nReturn type:  \nNone\n\n`max_cookie_size = 4093`  \nWarn if a cookie header exceeds this size. The default, 4093, should be safely [supported by most browsers](http://browsercookielimits.squawky.net/). A cookie larger than this size will still be sent, but it may be ignored or handled incorrectly by some browsers. Set to 0 to disable this check.\n\nChangelog\n\nNew in version 0.13.\n\n`property mimetype: str | None`  \nThe mimetype (content type without charset etc.)\n\n`property mimetype_params: dict[str, str]`  \nThe mimetype parameters as dict. For example if the content type is `text/html; charset=utf-8` the params would be `{'charset': 'utf-8'}`.\n\nChangelog\n\nNew in version 0.5.\n\n`response: Iterable[str] | Iterable[bytes]`  \nThe response body to send as the WSGI iterable. A list of strings or bytes represents a fixed-length response, any other iterable is a streaming response. Strings are encoded to bytes as UTF-8.\n\nDo not set to a plain string or bytes, that will cause sending the response to be very inefficient as it will iterate one byte at a time.\n\n`property retry_after: datetime | None`  \nThe Retry-After response-header field can be used with a 503 (Service Unavailable) response to indicate how long the service is expected to be unavailable to the requesting client.\n\nTime in seconds until expiration or date.\n\nChangelog\n\nChanged in version 2.0: The datetime object is timezone-aware.\n\n`set_cookie(key, value='', max_age=None, expires=None, path='/', domain=None, secure=False, httponly=False, samesite=None)`  \nSets a cookie.\n\nA warning is raised if the size of the cookie header exceeds [`max_cookie_size`](#werkzeug.wrappers.Response.max_cookie_size \"werkzeug.wrappers.Response.max_cookie_size\"), but the header will still be set.\n\nParameters:  \n- **key** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – the key (name) of the cookie to be set.\n- **value** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – the value of the cookie.\n- **max_age** ([timedelta](https://docs.python.org/3/library/datetime.html#datetime.timedelta \"(in Python v3.11)\") *\\|* [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) – should be a number of seconds, or `None` (default) if the cookie should last only as long as the client’s browser session.\n- **expires** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* [datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime \"(in Python v3.11)\") *\\|* [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* [float](https://docs.python.org/3/library/functions.html#float \"(in Python v3.11)\") *\\|* *None*) – should be a `datetime` object or UNIX timestamp.\n- **path** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – limits the cookie to a given path, per default it will span the whole domain.\n- **domain** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – if you want to set a cross-domain cookie. For example, `domain=\"example.com\"` will set a cookie that is readable by the domain `www.example.com`, `foo.example.com` etc. Otherwise, a cookie will only be readable by the domain that set it.\n- **secure** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – If `True`, the cookie will only be available via HTTPS.\n- **httponly** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Disallow JavaScript access to the cookie.\n- **samesite** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – Limit the scope of the cookie to only be attached to requests that are “same-site”.\n\nReturn type:  \nNone\n\n`set_data(value)`  \nSets a new string as response. The value must be a string or bytes. If a string is set it’s encoded to the charset of the response (utf-8 by default).\n\nChangelog\n\nNew in version 0.9.\n\nParameters:  \n**value** ([bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\") *\\|* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n\nReturn type:  \nNone\n\n`set_etag(etag, weak=False)`  \nSet the etag, and override the old one if there was one.\n\nParameters:  \n- **etag** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **weak** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) –\n\nReturn type:  \nNone\n\n`property status: str`  \nThe HTTP status code as a string.\n\n`property status_code: int`  \nThe HTTP status code as a number.\n\n`property stream: ResponseStream`  \nThe response iterable as write-only stream.\n\n`property vary: HeaderSet`  \nThe Vary field value indicates the set of request-header fields that fully determines, while the response is fresh, whether a cache is permitted to use the response to reply to a subsequent request without revalidation.\n\n`property www_authenticate: WWWAuthenticate`  \nThe `WWW-Authenticate` header parsed into a [`WWWAuthenticate`](../datastructures/index#werkzeug.datastructures.WWWAuthenticate \"werkzeug.datastructures.WWWAuthenticate\") object. Modifying the object will modify the header value.\n\nThis header is not set by default. To set this header, assign an instance of [`WWWAuthenticate`](../datastructures/index#werkzeug.datastructures.WWWAuthenticate \"werkzeug.datastructures.WWWAuthenticate\") to this attribute.\n\n``` python\nresponse.www_authenticate = WWWAuthenticate(\n    \"basic\", {\"realm\": \"Authentication Required\"}\n)\n```\n\nMultiple values for this header can be sent to give the client multiple options. Assign a list to set multiple headers. However, modifying the items in the list will not automatically update the header values, and accessing this attribute will only ever return the first value.\n\nTo unset this header, assign `None` or use `del`.\n\nChangelog\n\nChanged in version 2.3: This attribute can be assigned to to set the header. A list can be assigned to set multiple header values. Use `del` to unset the header.\n\nChanged in version 2.3: `WWWAuthenticate` is no longer a `dict`. The `token` attribute was added for auth challenges that use a token instead of parameters.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/wrappers/](https://werkzeug.palletsprojects.com/en/3.0.x/wrappers/)"
- name: Request._get_file_stream()
  id: wrappers/index#werkzeug.wrappers.Request._get_file_stream
  summary: Called to get a stream for the file upload
  belongs_to: Request / Response Objects
  description: |-
    `_get_file_stream(total_content_length, content_type, filename=None, content_length=None)`

    Called to get a stream for the file upload.

    This must provide a file-like class with `read()`, `readline()` and `seek()` methods that is both writeable and readable.

    The default implementation returns a temporary file if the total content length is higher than 500KB. Because many browsers do not provide a content length for the files only the total content length matters.

    Parameters:

    - **total_content_length** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* *None*) – the total content length of all the data in the request combined. This value is guaranteed to be there.
    - **content_type** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – the mimetype of the uploaded file.
    - **filename** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – the filename of the uploaded file. May be `None`.
    - **content_length** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* *None*) – the length of this file. This value is usually not provided because webbrowsers do not provide this value.

    Return type:

    [IO](https://docs.python.org/3/library/typing.html#typing.IO "(in Python v3.11)")\[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.11)")\]

    `property accept_charsets: CharsetAccept`

    List of charsets this client supports as [`CharsetAccept`](../datastructures/index#werkzeug.datastructures.CharsetAccept "werkzeug.datastructures.CharsetAccept") object.

    `property accept_encodings: Accept`

    List of encodings this client accepts. Encodings in a HTTP term are compression encodings such as gzip. For charsets have a look at `accept_charset`.

    `property accept_languages: LanguageAccept`

    List of languages this client accepts as [`LanguageAccept`](../datastructures/index#werkzeug.datastructures.LanguageAccept "werkzeug.datastructures.LanguageAccept") object.

    `property accept_mimetypes: MIMEAccept`

    List of mimetypes this client supports as [`MIMEAccept`](../datastructures/index#werkzeug.datastructures.MIMEAccept "werkzeug.datastructures.MIMEAccept") object.
- name: Request.access_control_request_headers
  id: wrappers/index#werkzeug.wrappers.Request.access_control_request_headers
  summary: Sent with a preflight request to indicate which headers will be sent with the cross origin request
  belongs_to: Request / Response Objects
  description: |-
    `access_control_request_headers`

    Sent with a preflight request to indicate which headers will be sent with the cross origin request. Set `access_control_allow_headers` on the response to indicate which headers are allowed.
- name: Request.access_control_request_method
  id: wrappers/index#werkzeug.wrappers.Request.access_control_request_method
  summary: Sent with a preflight request to indicate which method will be used for the cross origin request
  belongs_to: Request / Response Objects
  description: |-
    `access_control_request_method`

    Sent with a preflight request to indicate which method will be used for the cross origin request. Set `access_control_allow_methods` on the response to indicate which methods are allowed.

    `property access_route: list[str]`

    If a forwarded header exists this is a list of all ip addresses from the client ip to the last proxy server.
- name: Request.application()
  id: wrappers/index#werkzeug.wrappers.Request.application
  summary: Decorate a function as responder that accepts the request as the last argument
  belongs_to: Request / Response Objects
  description: |-
    `classmethod application(f)`

    Decorate a function as responder that accepts the request as the last argument. This works like the `responder()` decorator but the function is passed the request object as the last argument and the request object will be closed automatically:

    ``` python
    @Request.application
    def my_wsgi_app(request):
        return Response('Hello World!')
    ```

    As of Werkzeug 0.14 HTTP exceptions are automatically caught and converted to responses instead of failing.

    Parameters:

    **f** (*t.Callable\[\[*[Request](#werkzeug.wrappers.Request "werkzeug.wrappers.Request")*\],* *WSGIApplication\]*) – the WSGI callable to decorate

    Returns:

    a new WSGI callable

    Return type:

    WSGIApplication

    `property args: MultiDict[str, str]`

    The parsed URL parameters (the part in the URL after the question mark).

    By default an [`ImmutableMultiDict`](../datastructures/index#werkzeug.datastructures.ImmutableMultiDict "werkzeug.datastructures.ImmutableMultiDict") is returned from this function. This can be changed by setting [`parameter_storage_class`](#werkzeug.wrappers.Request.parameter_storage_class "werkzeug.wrappers.Request.parameter_storage_class") to a different type. This might be necessary if the order of the form data is important.

    Changelog

    Changed in version 2.3: Invalid bytes remain percent encoded.

    `property authorization: Authorization | None`

    The `Authorization` header parsed into an [`Authorization`](../datastructures/index#werkzeug.datastructures.Authorization "werkzeug.datastructures.Authorization") object. `None` if the header is not present.

    Changelog

    Changed in version 2.3: `Authorization` is no longer a `dict`. The `token` attribute was added for auth schemes that use a token instead of parameters.

    `property base_url: str`

    Like [`url`](#werkzeug.wrappers.Request.url "werkzeug.wrappers.Request.url") but without the query string.

    `property cache_control: RequestCacheControl`

    A [`RequestCacheControl`](../datastructures/index#werkzeug.datastructures.RequestCacheControl "werkzeug.datastructures.RequestCacheControl") object for the incoming cache control headers.
- name: Request.close()
  id: wrappers/index#werkzeug.wrappers.Request.close
  summary: Closes associated resources of this request object
  belongs_to: Request / Response Objects
  description: |-
    `close()`

    Closes associated resources of this request object. This closes all file handles explicitly. You can also use the request object in a with statement which will automatically close it.

    Changelog

    New in version 0.9.

    Return type:

    None
- name: Request.content_encoding
  id: wrappers/index#werkzeug.wrappers.Request.content_encoding
  summary: The Content-Encoding entity-header field is used as a modifier to the media-type
  belongs_to: Request / Response Objects
  description: |-
    `content_encoding`

    The Content-Encoding entity-header field is used as a modifier to the media-type. When present, its value indicates what additional content codings have been applied to the entity-body, and thus what decoding mechanisms must be applied in order to obtain the media-type referenced by the Content-Type header field.

    Changelog

    New in version 0.9.

    `property content_length: int | None`

    The Content-Length entity-header field indicates the size of the entity-body in bytes or, in the case of the HEAD method, the size of the entity-body that would have been sent had the request been a GET.
- name: Request.content_md5
  id: wrappers/index#werkzeug.wrappers.Request.content_md5
  summary: The Content-MD5 entity-header field, as defined in RFC 1864, is an MD5 digest of the entity-body for the purpose of providing an end-to-end message integrity check (MIC) of the entity-body
  belongs_to: Request / Response Objects
  description: |-
    `content_md5`

    The Content-MD5 entity-header field, as defined in RFC 1864, is an MD5 digest of the entity-body for the purpose of providing an end-to-end message integrity check (MIC) of the entity-body. (Note: a MIC is good for detecting accidental modification of the entity-body in transit, but is not proof against malicious attacks.)

    Changelog

    New in version 0.9.
- name: Request.content_type
  id: wrappers/index#werkzeug.wrappers.Request.content_type
  summary: The Content-Type entity-header field indicates the media type of the entity-body sent to the recipient or, in the case of the HEAD method, the media type that would have been sent had the request been a GET
  belongs_to: Request / Response Objects
  description: |-
    `content_type`

    The Content-Type entity-header field indicates the media type of the entity-body sent to the recipient or, in the case of the HEAD method, the media type that would have been sent had the request been a GET.

    `property cookies: ImmutableMultiDict[str, str]`

    A [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)") with the contents of all cookies transmitted with the request.

    `property data: bytes`

    The raw data read from [`stream`](#werkzeug.wrappers.Request.stream "werkzeug.wrappers.Request.stream"). Will be empty if the request represents form data.

    To get the raw data even if it represents form data, use [`get_data()`](#werkzeug.wrappers.Request.get_data "werkzeug.wrappers.Request.get_data").
- name: Request.date
  id: wrappers/index#werkzeug.wrappers.Request.date
  summary: The Date general-header field represents the date and time at which the message was originated, having the same semantics as orig-date in RFC 822
  belongs_to: Request / Response Objects
  description: |-
    `date`

    The Date general-header field represents the date and time at which the message was originated, having the same semantics as orig-date in RFC 822.

    Changelog

    Changed in version 2.0: The datetime object is timezone-aware.
- name: Request.dict_storage_class
  id: wrappers/index#werkzeug.wrappers.Request.dict_storage_class
  summary: null
  belongs_to: Request / Response Objects
  description: |-
    `dict_storage_class`

    alias of [`ImmutableMultiDict`](../datastructures/index#werkzeug.datastructures.ImmutableMultiDict "werkzeug.datastructures.structures.ImmutableMultiDict")
- name: Request.environ
  id: wrappers/index#werkzeug.wrappers.Request.environ
  summary: The WSGI environment containing HTTP headers and information from the WSGI server
  belongs_to: Request / Response Objects
  description: |-
    `environ: WSGIEnvironment`

    The WSGI environment containing HTTP headers and information from the WSGI server.

    `property files: ImmutableMultiDict[str, FileStorage]`

    [`MultiDict`](../datastructures/index#werkzeug.datastructures.MultiDict "werkzeug.datastructures.MultiDict") object containing all uploaded files. Each key in [`files`](#werkzeug.wrappers.Request.files "werkzeug.wrappers.Request.files") is the name from the `<input type="file" name="">`. Each value in [`files`](#werkzeug.wrappers.Request.files "werkzeug.wrappers.Request.files") is a Werkzeug [`FileStorage`](../datastructures/index#werkzeug.datastructures.FileStorage "werkzeug.datastructures.FileStorage") object.

    It basically behaves like a standard file object you know from Python, with the difference that it also has a [`save()`](../datastructures/index#werkzeug.datastructures.FileStorage.save "werkzeug.datastructures.FileStorage.save") function that can store the file on the filesystem.

    Note that [`files`](#werkzeug.wrappers.Request.files "werkzeug.wrappers.Request.files") will only contain data if the request method was POST, PUT or PATCH and the `<form>` that posted to the request had `enctype="multipart/form-data"`. It will be empty otherwise.

    See the [`MultiDict`](../datastructures/index#werkzeug.datastructures.MultiDict "werkzeug.datastructures.MultiDict") / [`FileStorage`](../datastructures/index#werkzeug.datastructures.FileStorage "werkzeug.datastructures.FileStorage") documentation for more details about the used data structure.

    `property form: ImmutableMultiDict[str, str]`

    The form parameters. By default an [`ImmutableMultiDict`](../datastructures/index#werkzeug.datastructures.ImmutableMultiDict "werkzeug.datastructures.ImmutableMultiDict") is returned from this function. This can be changed by setting [`parameter_storage_class`](#werkzeug.wrappers.Request.parameter_storage_class "werkzeug.wrappers.Request.parameter_storage_class") to a different type. This might be necessary if the order of the form data is important.

    Please keep in mind that file uploads will not end up here, but instead in the [`files`](#werkzeug.wrappers.Request.files "werkzeug.wrappers.Request.files") attribute.

    Changelog

    Changed in version 0.9: Previous to Werkzeug 0.9 this would only contain form data for POST and PUT requests.
- name: Request.form_data_parser_class
  id: wrappers/index#werkzeug.wrappers.Request.form_data_parser_class
  summary: null
  belongs_to: Request / Response Objects
  description: |-
    `form_data_parser_class`

    alias of [`FormDataParser`](../http/index#werkzeug.formparser.FormDataParser "werkzeug.formparser.FormDataParser")
- name: Request.from_values()
  id: wrappers/index#werkzeug.wrappers.Request.from_values
  summary: Create a new request object based on the values provided
  belongs_to: Request / Response Objects
  description: |-
    `classmethod from_values(*args, **kwargs)`

    Create a new request object based on the values provided. If environ is given missing values are filled from there. This method is useful for small scripts when you need to simulate a request from an URL. Do not use this method for unittesting, there is a full featured client object (`Client`) that allows to create multipart requests, support for cookies etc.

    This accepts the same options as the [`EnvironBuilder`](../test/index#werkzeug.test.EnvironBuilder "werkzeug.test.EnvironBuilder").

    Changelog

    Changed in version 0.5: This method now accepts the same arguments as [`EnvironBuilder`](../test/index#werkzeug.test.EnvironBuilder "werkzeug.test.EnvironBuilder"). Because of this the `environ` parameter is now called `environ_overrides`.

    Returns:

    request object

    Parameters:

    - **args** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")) –
    - **kwargs** ([Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")) –

    Return type:

    [Request](#werkzeug.wrappers.Request "werkzeug.wrappers.request.Request")

    `property full_path: str`

    Requested path, including the query string.
- name: Request.get_data()
  id: wrappers/index#werkzeug.wrappers.Request.get_data
  summary: This reads the buffered incoming data from the client into one bytes object
  belongs_to: Request / Response Objects
  description: |-
    `get_data(cache: bool = True, as_text: Literal[False] = False, parse_form_data: bool = False) → bytes`

    get_data(*cache:[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")=True*, *as_text:[Literal](https://docs.python.org/3/library/typing.html#typing.Literal "(in Python v3.11)")\[True\]=False*, *parse_form_data:[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")=False*)→[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")

    This reads the buffered incoming data from the client into one bytes object. By default this is cached but that behavior can be changed by setting `cache` to `False`.

    Usually it’s a bad idea to call this method without checking the content length first as a client could send dozens of megabytes or more to cause memory problems on the server.

    Note that if the form data was already parsed this method will not return anything as form data parsing does not cache the data like this method does. To implicitly invoke form data parsing function set `parse_form_data` to `True`. When this is done the return value of this method will be an empty string if the form parser handles the data. This generally is not necessary as if the whole data is cached (which is the default) the form parser will used the cached data to parse the form data. Please be generally aware of checking the content length first in any case before calling this method to avoid exhausting server memory.

    If `as_text` is set to `True` the return value will be a decoded string.

    Changelog

    New in version 0.9.
- name: Request.get_json()
  id: wrappers/index#werkzeug.wrappers.Request.get_json
  summary: Parse data as JSON
  belongs_to: Request / Response Objects
  description: |-
    `get_json(force: bool = False, silent: Literal[False] = False, cache: bool = True) → Any`

    get_json(*force:[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")=False*, *silent:[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")=False*, *cache:[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")=True*)→[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")\|[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.11)")

    Parse [`data`](#werkzeug.wrappers.Request.data "werkzeug.wrappers.Request.data") as JSON.

    If the mimetype does not indicate JSON (*application/json*, see [`is_json`](#werkzeug.wrappers.Request.is_json "werkzeug.wrappers.Request.is_json")), or parsing fails, [`on_json_loading_failed()`](#werkzeug.wrappers.Request.on_json_loading_failed "werkzeug.wrappers.Request.on_json_loading_failed") is called and its return value is used as the return value. By default this raises a 415 Unsupported Media Type resp.

    Parameters:

    - **force** – Ignore the mimetype and always try to parse JSON.
    - **silent** – Silence mimetype and parsing errors, and return `None` instead.
    - **cache** – Store the parsed JSON to return for subsequent calls.

    Changelog

    Changed in version 2.3: Raise a 415 error instead of 400.

    Changed in version 2.1: Raise a 400 error if the content type is incorrect.
- name: Request.headers
  id: wrappers/index#werkzeug.wrappers.Request.headers
  summary: The headers received with the request
  belongs_to: Request / Response Objects
  description: |-
    `headers`

    The headers received with the request.

    `property host: str`

    The host name the request was made to, including the port if it’s non-standard. Validated with [`trusted_hosts`](#werkzeug.wrappers.Request.trusted_hosts "werkzeug.wrappers.Request.trusted_hosts").

    `property host_url: str`

    The request URL scheme and host only.

    `property if_match: ETags`

    An object containing all the etags in the `If-Match` header.

    Return type:

    [`ETags`](../datastructures/index#werkzeug.datastructures.ETags "werkzeug.datastructures.ETags")

    `property if_modified_since: datetime | None`

    The parsed `If-Modified-Since` header as a datetime object.

    Changelog

    Changed in version 2.0: The datetime object is timezone-aware.

    `property if_none_match: ETags`

    An object containing all the etags in the `If-None-Match` header.

    Return type:

    [`ETags`](../datastructures/index#werkzeug.datastructures.ETags "werkzeug.datastructures.ETags")

    `property if_range: IfRange`

    The parsed `If-Range` header.

    Changelog

    Changed in version 2.0: `IfRange.date` is timezone-aware.

    New in version 0.7.

    `property if_unmodified_since: datetime | None`

    The parsed `If-Unmodified-Since` header as a datetime object.

    Changelog

    Changed in version 2.0: The datetime object is timezone-aware.
- name: Request.input_stream
  id: wrappers/index#werkzeug.wrappers.Request.input_stream
  summary: The raw WSGI input stream, without any safety checks
  belongs_to: Request / Response Objects
  description: |-
    `input_stream`

    The raw WSGI input stream, without any safety checks.

    This is dangerous to use. It does not guard against infinite streams or reading past [`content_length`](#werkzeug.wrappers.Request.content_length "werkzeug.wrappers.Request.content_length") or [`max_content_length`](#werkzeug.wrappers.Request.max_content_length "werkzeug.wrappers.Request.max_content_length").

    Use [`stream`](#werkzeug.wrappers.Request.stream "werkzeug.wrappers.Request.stream") instead.

    `property is_json: bool`

    Check if the mimetype indicates JSON data, either *application/json* or *application/\*+json*.
- name: Request.is_multiprocess
  id: wrappers/index#werkzeug.wrappers.Request.is_multiprocess
  summary: boolean that is True if the application is served by a WSGI server that spawns multiple processes
  belongs_to: Request / Response Objects
  description: |-
    `is_multiprocess`

    boolean that is `True` if the application is served by a WSGI server that spawns multiple processes.
- name: Request.is_multithread
  id: wrappers/index#werkzeug.wrappers.Request.is_multithread
  summary: boolean that is True if the application is served by a multithreaded WSGI server
  belongs_to: Request / Response Objects
  description: |-
    `is_multithread`

    boolean that is `True` if the application is served by a multithreaded WSGI server.
- name: Request.is_run_once
  id: wrappers/index#werkzeug.wrappers.Request.is_run_once
  summary: boolean that is True if the application will be executed only once in a process lifetime
  belongs_to: Request / Response Objects
  description: |-
    `is_run_once`

    boolean that is `True` if the application will be executed only once in a process lifetime. This is the case for CGI for example, but it’s not guaranteed that the execution only happens one time.

    `property is_secure: bool`

    `True` if the request was made with a secure protocol (HTTPS or WSS).

    `property json: Any | None`

    The parsed JSON data if [`mimetype`](#werkzeug.wrappers.Request.mimetype "werkzeug.wrappers.Request.mimetype") indicates JSON (*application/json*, see [`is_json`](#werkzeug.wrappers.Request.is_json "werkzeug.wrappers.Request.is_json")).

    Calls [`get_json()`](#werkzeug.wrappers.Request.get_json "werkzeug.wrappers.Request.get_json") with default arguments.

    If the request content type is not `application/json`, this will raise a 415 Unsupported Media Type error.

    Changelog

    Changed in version 2.3: Raise a 415 error instead of 400.

    Changed in version 2.1: Raise a 400 error if the content type is incorrect.
- name: Request.json_module
  id: wrappers/index#werkzeug.wrappers.Request.json_module
  summary: A module or other object that has dumps and loads functions that match the API of the built-in json module
  belongs_to: Request / Response Objects
  description: |-
    `json_module = <module 'json' from '/home/docs/.asdf/installs/python/3.10.12/lib/python3.10/json/__init__.py'>`

    A module or other object that has `dumps` and `loads` functions that match the API of the built-in [`json`](https://docs.python.org/3/library/json.html#module-json "(in Python v3.11)") module.
- name: Request.list_storage_class
  id: wrappers/index#werkzeug.wrappers.Request.list_storage_class
  summary: null
  belongs_to: Request / Response Objects
  description: |-
    `list_storage_class`

    alias of [`ImmutableList`](../datastructures/index#werkzeug.datastructures.ImmutableList "werkzeug.datastructures.structures.ImmutableList")
- name: Request.make_form_data_parser()
  id: wrappers/index#werkzeug.wrappers.Request.make_form_data_parser
  summary: Creates the form data parser
  belongs_to: Request / Response Objects
  description: |-
    `make_form_data_parser()`

    Creates the form data parser. Instantiates the [`form_data_parser_class`](#werkzeug.wrappers.Request.form_data_parser_class "werkzeug.wrappers.Request.form_data_parser_class") with some parameters.

    Changelog

    New in version 0.8.

    Return type:

    [FormDataParser](../http/index#werkzeug.formparser.FormDataParser "werkzeug.formparser.FormDataParser")
- name: Request.max_content_length
  id: wrappers/index#werkzeug.wrappers.Request.max_content_length
  summary: the maximum content length
  belongs_to: Request / Response Objects
  description: |-
    `max_content_length: int | None = None`

    the maximum content length. This is forwarded to the form data parsing function (`parse_form_data()`). When set and the [`form`](#werkzeug.wrappers.Request.form "werkzeug.wrappers.Request.form") or [`files`](#werkzeug.wrappers.Request.files "werkzeug.wrappers.Request.files") attribute is accessed and the parsing fails because more than the specified value is transmitted a [`RequestEntityTooLarge`](../exceptions/index#werkzeug.exceptions.RequestEntityTooLarge "werkzeug.exceptions.RequestEntityTooLarge") exception is raised.

    Changelog

    New in version 0.5.
- name: Request.max_form_memory_size
  id: wrappers/index#werkzeug.wrappers.Request.max_form_memory_size
  summary: the maximum form field size
  belongs_to: Request / Response Objects
  description: |-
    `max_form_memory_size: int | None = None`

    the maximum form field size. This is forwarded to the form data parsing function (`parse_form_data()`). When set and the [`form`](#werkzeug.wrappers.Request.form "werkzeug.wrappers.Request.form") or [`files`](#werkzeug.wrappers.Request.files "werkzeug.wrappers.Request.files") attribute is accessed and the data in memory for post data is longer than the specified value a [`RequestEntityTooLarge`](../exceptions/index#werkzeug.exceptions.RequestEntityTooLarge "werkzeug.exceptions.RequestEntityTooLarge") exception is raised.

    Changelog

    New in version 0.5.
- name: Request.max_form_parts
  id: wrappers/index#werkzeug.wrappers.Request.max_form_parts
  summary: The maximum number of multipart parts to parse, passed to form_data_parser_class
  belongs_to: Request / Response Objects
  description: |-
    `max_form_parts = 1000`

    The maximum number of multipart parts to parse, passed to [`form_data_parser_class`](#werkzeug.wrappers.Request.form_data_parser_class "werkzeug.wrappers.Request.form_data_parser_class"). Parsing form data with more than this many parts will raise [`RequestEntityTooLarge`](../exceptions/index#werkzeug.exceptions.RequestEntityTooLarge "werkzeug.exceptions.RequestEntityTooLarge").

    Changelog

    New in version 2.2.3.
- name: Request.max_forwards
  id: wrappers/index#werkzeug.wrappers.Request.max_forwards
  summary: The Max-Forwards request-header field provides a mechanism with the TRACE and OPTIONS methods to limit the number of proxies or gateways that can forward the request to the next inbound server
  belongs_to: Request / Response Objects
  description: |-
    `max_forwards`

    The Max-Forwards request-header field provides a mechanism with the TRACE and OPTIONS methods to limit the number of proxies or gateways that can forward the request to the next inbound server.
- name: Request.method
  id: wrappers/index#werkzeug.wrappers.Request.method
  summary: The method the request was made with, such as GET
  belongs_to: Request / Response Objects
  description: |-
    `method`

    The method the request was made with, such as `GET`.

    `property mimetype: str`

    Like [`content_type`](#werkzeug.wrappers.Request.content_type "werkzeug.wrappers.Request.content_type"), but without parameters (eg, without charset, type etc.) and always lowercase. For example if the content type is `text/HTML; charset=utf-8` the mimetype would be `'text/html'`.

    `property mimetype_params: dict[str, str]`

    The mimetype parameters as dict. For example if the content type is `text/html; charset=utf-8` the params would be `{'charset': 'utf-8'}`.
- name: Request.on_json_loading_failed()
  id: wrappers/index#werkzeug.wrappers.Request.on_json_loading_failed
  summary: Called if get_json() fails and isn’t silenced
  belongs_to: Request / Response Objects
  description: |-
    `on_json_loading_failed(e)`

    Called if [`get_json()`](#werkzeug.wrappers.Request.get_json "werkzeug.wrappers.Request.get_json") fails and isn’t silenced.

    If this method returns a value, it is used as the return value for [`get_json()`](#werkzeug.wrappers.Request.get_json "werkzeug.wrappers.Request.get_json"). The default implementation raises [`BadRequest`](../exceptions/index#werkzeug.exceptions.BadRequest "werkzeug.exceptions.BadRequest").

    Parameters:

    **e** ([ValueError](https://docs.python.org/3/library/exceptions.html#ValueError "(in Python v3.11)") *\|* *None*) – If parsing failed, this is the exception. It will be `None` if the content type wasn’t `application/json`.

    Return type:

    [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")

    Changelog

    Changed in version 2.3: Raise a 415 error instead of 400.
- name: Request.origin
  id: wrappers/index#werkzeug.wrappers.Request.origin
  summary: The host that the request originated from
  belongs_to: Request / Response Objects
  description: |-
    `origin`

    The host that the request originated from. Set `access_control_allow_origin` on the response to indicate which origins are allowed.
- name: Request.parameter_storage_class
  id: wrappers/index#werkzeug.wrappers.Request.parameter_storage_class
  summary: null
  belongs_to: Request / Response Objects
  description: |-
    `parameter_storage_class`

    alias of [`ImmutableMultiDict`](../datastructures/index#werkzeug.datastructures.ImmutableMultiDict "werkzeug.datastructures.structures.ImmutableMultiDict")
- name: Request.path
  id: wrappers/index#werkzeug.wrappers.Request.path
  summary: The path part of the URL after root_path
  belongs_to: Request / Response Objects
  description: |-
    `path`

    The path part of the URL after [`root_path`](#werkzeug.wrappers.Request.root_path "werkzeug.wrappers.Request.root_path"). This is the path used for routing within the application.

    `property pragma: HeaderSet`

    The Pragma general-header field is used to include implementation-specific directives that might apply to any recipient along the request/response chain. All pragma directives specify optional behavior from the viewpoint of the protocol; however, some systems MAY require that behavior be consistent with the directives.
- name: Request.query_string
  id: wrappers/index#werkzeug.wrappers.Request.query_string
  summary: The part of the URL after the “?”. This is the raw value, use args for the parsed values
  belongs_to: Request / Response Objects
  description: |-
    `query_string`

    The part of the URL after the “?”. This is the raw value, use [`args`](#werkzeug.wrappers.Request.args "werkzeug.wrappers.Request.args") for the parsed values.

    `property range: Range | None`

    The parsed `Range` header.

    Changelog

    New in version 0.7.

    Return type:

    [`Range`](../datastructures/index#werkzeug.datastructures.Range "werkzeug.datastructures.Range")
- name: Request.referrer
  id: wrappers/index#werkzeug.wrappers.Request.referrer
  summary: The Referer[sic] request-header field allows the client to specify, for the server’s benefit, the address (URI) of the resource from which the Request-URI was obtained (the “referrer”, although the header field is misspelled)
  belongs_to: Request / Response Objects
  description: |-
    `referrer`

    The Referer\[sic\] request-header field allows the client to specify, for the server’s benefit, the address (URI) of the resource from which the Request-URI was obtained (the “referrer”, although the header field is misspelled).
- name: Request.remote_addr
  id: wrappers/index#werkzeug.wrappers.Request.remote_addr
  summary: The address of the client sending the request
  belongs_to: Request / Response Objects
  description: |-
    `remote_addr`

    The address of the client sending the request.
- name: Request.remote_user
  id: wrappers/index#werkzeug.wrappers.Request.remote_user
  summary: If the server supports user authentication, and the script is protected, this attribute contains the username the user has authenticated as
  belongs_to: Request / Response Objects
  description: |-
    `remote_user`

    If the server supports user authentication, and the script is protected, this attribute contains the username the user has authenticated as.
- name: Request.root_path
  id: wrappers/index#werkzeug.wrappers.Request.root_path
  summary: The prefix that the application is mounted under, without a trailing slash
  belongs_to: Request / Response Objects
  description: |-
    `root_path`

    The prefix that the application is mounted under, without a trailing slash. [`path`](#werkzeug.wrappers.Request.path "werkzeug.wrappers.Request.path") comes after this.

    `property root_url: str`

    The request URL scheme, host, and root path. This is the root that the application is accessed from.
- name: Request.scheme
  id: wrappers/index#werkzeug.wrappers.Request.scheme
  summary: The URL scheme of the protocol the request used, such as https or wss
  belongs_to: Request / Response Objects
  description: |-
    `scheme`

    The URL scheme of the protocol the request used, such as `https` or `wss`.

    `property script_root: str`

    Alias for `self.root_path`. `environ["SCRIPT_ROOT"]` without a trailing slash.
- name: Request.server
  id: wrappers/index#werkzeug.wrappers.Request.server
  summary: The address of the server
  belongs_to: Request / Response Objects
  description: |-
    `server`

    The address of the server. `(host, port)`, `(path, None)` for unix sockets, or `None` if not known.
- name: Request.shallow
  id: wrappers/index#werkzeug.wrappers.Request.shallow
  summary: Set when creating the request object
  belongs_to: Request / Response Objects
  description: |-
    `shallow: bool`

    Set when creating the request object. If `True`, reading from the request body will cause a `RuntimeException`. Useful to prevent modifying the stream from middleware.

    `property stream: IO[bytes]`

    The WSGI input stream, with safety checks. This stream can only be consumed once.

    Use [`get_data()`](#werkzeug.wrappers.Request.get_data "werkzeug.wrappers.Request.get_data") to get the full data as bytes or text. The [`data`](#werkzeug.wrappers.Request.data "werkzeug.wrappers.Request.data") attribute will contain the full bytes only if they do not represent form data. The [`form`](#werkzeug.wrappers.Request.form "werkzeug.wrappers.Request.form") attribute will contain the parsed form data in that case.

    Unlike [`input_stream`](#werkzeug.wrappers.Request.input_stream "werkzeug.wrappers.Request.input_stream"), this stream guards against infinite streams or reading past [`content_length`](#werkzeug.wrappers.Request.content_length "werkzeug.wrappers.Request.content_length") or [`max_content_length`](#werkzeug.wrappers.Request.max_content_length "werkzeug.wrappers.Request.max_content_length").

    If `max_content_length` is set, it can be enforced on streams if `wsgi.input_terminated` is set. Otherwise, an empty stream is returned.

    If the limit is reached before the underlying stream is exhausted (such as a file that is too large, or an infinite stream), the remaining contents of the stream cannot be read safely. Depending on how the server handles this, clients may show a “connection reset” failure instead of seeing the 413 response.

    Changelog

    Changed in version 2.3: Check `max_content_length` preemptively and while reading.

    Changed in version 0.9: The stream is always set (but may be consumed) even if form parsing was accessed first.
- name: Request.trusted_hosts
  id: wrappers/index#werkzeug.wrappers.Request.trusted_hosts
  summary: Valid host names when handling requests
  belongs_to: Request / Response Objects
  description: |-
    `trusted_hosts: list[str] | None = None`

    Valid host names when handling requests. By default all hosts are trusted, which means that whatever the client says the host is will be accepted.

    Because `Host` and `X-Forwarded-Host` headers can be set to any value by a malicious client, it is recommended to either set this property or implement similar validation in the proxy (if the application is being run behind one).

    Changelog

    New in version 0.9.

    `property url: str`

    The full request URL with the scheme, host, root path, path, and query string.

    `property url_root: str`

    Alias for [`root_url`](#werkzeug.wrappers.Request.root_url "werkzeug.wrappers.Request.root_url"). The URL with scheme, host, and root path. For example, `https://example.com/app/`.

    `property user_agent: UserAgent`

    The user agent. Use `user_agent.string` to get the header value. Set [`user_agent_class`](#werkzeug.wrappers.Request.user_agent_class "werkzeug.wrappers.Request.user_agent_class") to a subclass of [`UserAgent`](../utils/index#werkzeug.user_agent.UserAgent "werkzeug.user_agent.UserAgent") to provide parsing for the other properties or other extended data.

    Changelog

    Changed in version 2.1: The built-in parser was removed. Set `user_agent_class` to a `UserAgent` subclass to parse data from the string.
- name: Request.user_agent_class
  id: wrappers/index#werkzeug.wrappers.Request.user_agent_class
  summary: A werkzeug.datastructures.CombinedMultiDict that combines args and form
  belongs_to: Request / Response Objects
  description: |-
    `user_agent_class`

    alias of [`UserAgent`](../utils/index#werkzeug.user_agent.UserAgent "werkzeug.user_agent.UserAgent")

    `property values: CombinedMultiDict[str, str]`

    A [`werkzeug.datastructures.CombinedMultiDict`](../datastructures/index#werkzeug.datastructures.CombinedMultiDict "werkzeug.datastructures.CombinedMultiDict") that combines [`args`](#werkzeug.wrappers.Request.args "werkzeug.wrappers.Request.args") and [`form`](#werkzeug.wrappers.Request.form "werkzeug.wrappers.Request.form").

    For GET requests, only `args` are present, not `form`.

    Changelog

    Changed in version 2.0: For GET requests, only `args` are present, not `form`.

    `property want_form_data_parsed: bool`

    `True` if the request method carries content. By default this is true if a `Content-Type` is sent.

    Changelog

    New in version 0.8.
- name: RequestCacheControl
  id: datastructures/index#werkzeug.datastructures.RequestCacheControl
  summary: A cache control for requests
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.RequestCacheControl(values=(), on_update=None)`

    A cache control for requests. This is immutable and gives access to all the request-relevant cache control headers.

    To get a header of the [`RequestCacheControl`](#werkzeug.datastructures.RequestCacheControl "werkzeug.datastructures.RequestCacheControl") object again you can convert the object into a string or call the `to_header()` method. If you plan to subclass it and add your own items have a look at the sourcecode for that class.

    Changelog

    Changed in version 2.1.0: Setting int properties such as `max_age` will convert the value to an int.

    New in version 0.5: In previous versions a `CacheControl` class existed that was used both for request and response.
- name: RequestCacheControl.max_age
  id: datastructures/index#werkzeug.datastructures.RequestCacheControl.max_age
  summary: null
  belongs_to: Data Structures
  description: |-
    `max_age`

    accessor for ‘max-age’
- name: RequestCacheControl.no_cache
  id: datastructures/index#werkzeug.datastructures.RequestCacheControl.no_cache
  summary: null
  belongs_to: Data Structures
  description: |-
    `no_cache`

    accessor for ‘no-cache’
- name: RequestCacheControl.no_store
  id: datastructures/index#werkzeug.datastructures.RequestCacheControl.no_store
  summary: null
  belongs_to: Data Structures
  description: |-
    `no_store`

    accessor for ‘no-store’
- name: RequestCacheControl.no_transform
  id: datastructures/index#werkzeug.datastructures.RequestCacheControl.no_transform
  summary: null
  belongs_to: Data Structures
  description: |-
    `no_transform`

    accessor for ‘no-transform’

    `property max_stale`

    accessor for ‘max-stale’

    `property min_fresh`

    accessor for ‘min-fresh’

    `property only_if_cached`

    accessor for ‘only-if-cached’
- name: responder()
  id: wsgi/index#werkzeug.wsgi.responder
  summary: Marks a function as responder
  belongs_to: WSGI Helpers
  description: |-
    `werkzeug.wsgi.responder(f)`

    Marks a function as responder. Decorate a function with it and it will automatically call the return value as WSGI application.

    Example:

    ``` python
    @responder
    def application(environ, start_response):
        return Response('Hello World!')
    ```

    Parameters:

    **f** (*t.Callable\[...,* *WSGIApplication\]*) –

    Return type:

    WSGIApplication
- name: Response
  id: wrappers/index#werkzeug.wrappers.Response
  summary: Represents an outgoing WSGI HTTP response with body, status, and headers
  belongs_to: Request / Response Objects
  description: |-
    `class werkzeug.wrappers.Response(response=None, status=None, headers=None, mimetype=None, content_type=None, direct_passthrough=False)`

    Represents an outgoing WSGI HTTP response with body, status, and headers. Has properties and methods for using the functionality defined by various HTTP specs.

    The response body is flexible to support different use cases. The simple form is passing bytes, or a string which will be encoded as UTF-8. Passing an iterable of bytes or strings makes this a streaming response. A generator is particularly useful for building a CSV file in memory or using SSE (Server Sent Events). A file-like object is also iterable, although the [`send_file()`](../utils/index#werkzeug.utils.send_file "werkzeug.utils.send_file") helper should be used in that case.

    The response object is itself a WSGI application callable. When called ([`__call__()`](#werkzeug.wrappers.Response.__call__ "werkzeug.wrappers.Response.__call__")) with `environ` and `start_response`, it will pass its status and headers to `start_response` then return its body as an iterable.

    ``` python
    from werkzeug.wrappers.response import Response

    def index():
        return Response("Hello, World!")

    def application(environ, start_response):
        path = environ.get("PATH_INFO") or "/"

        if path == "/":
            response = index()
        else:
            response = Response("Not Found", status=404)

        return response(environ, start_response)
    ```

    Parameters:

    - **response** ([Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable "(in Python v3.11)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*\]* *\|* [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable "(in Python v3.11)")*\[*[bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.11)")*\]*) – The data for the body of the response. A string or bytes, or tuple or list of strings or bytes, for a fixed-length response, or any other iterable of strings or bytes for a streaming response. Defaults to an empty body.
    - **status** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *HTTPStatus* *\|* *None*) – The status code for the response. Either an int, in which case the default status message is added, or a string in the form `{code} {message}`, like `404 Not Found`. Defaults to 200.
    - **headers** ([Headers](../datastructures/index#werkzeug.datastructures.Headers "werkzeug.datastructures.headers.Headers")) – A [`Headers`](../datastructures/index#werkzeug.datastructures.Headers "werkzeug.datastructures.Headers") object, or a list of `(key, value)` tuples that will be converted to a `Headers` object.
    - **mimetype** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – The mime type (content type without charset or other parameters) of the response. If the value starts with `text/` (or matches some other special cases), the charset will be added to create the `content_type`.
    - **content_type** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – The full content type of the response. Overrides building the value from `mimetype`.
    - **direct_passthrough** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Pass the response body directly through as the WSGI iterable. This can be used when the body is a binary file or other iterator of bytes, to skip some unnecessary checks. Use [`send_file()`](../utils/index#werkzeug.utils.send_file "werkzeug.utils.send_file") instead of setting this manually.

    Changelog

    Changed in version 2.1: Old `BaseResponse` and mixin classes were removed.

    Changed in version 2.0: Combine `BaseResponse` and mixins into a single `Response` class.

    Changed in version 0.5: The `direct_passthrough` parameter was added.
- name: Response.__call__()
  id: wrappers/index#werkzeug.wrappers.Response.__call__
  summary: Process this response as WSGI application
  belongs_to: Request / Response Objects
  description: |-
    `__call__(environ, start_response)`

    Process this response as WSGI application.

    Parameters:

    - **environ** (*WSGIEnvironment*) – the WSGI environment.
    - **start_response** (*StartResponse*) – the response callable provided by the WSGI server.

    Returns:

    an application iterator

    Return type:

    t.Iterable\[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.11)")\]
- name: Response._ensure_sequence()
  id: wrappers/index#werkzeug.wrappers.Response._ensure_sequence
  summary: This method can be called by methods that need a sequence
  belongs_to: Request / Response Objects
  description: |-
    `_ensure_sequence(mutable=False)`

    This method can be called by methods that need a sequence. If `mutable` is true, it will also ensure that the response sequence is a standard Python list.

    Changelog

    New in version 0.6.

    Parameters:

    **mutable** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) –

    Return type:

    None
- name: Response.accept_ranges
  id: wrappers/index#werkzeug.wrappers.Response.accept_ranges
  summary: The Accept-Ranges header
  belongs_to: Request / Response Objects
  description: |-
    `accept_ranges`

    The `Accept-Ranges` header. Even though the name would indicate that multiple values are supported, it must be one string token only.

    The values `'bytes'` and `'none'` are common.

    Changelog

    New in version 0.7.

    `property access_control_allow_credentials: bool`

    Whether credentials can be shared by the browser to JavaScript code. As part of the preflight request it indicates whether credentials can be used on the cross origin request.
- name: Response.access_control_allow_headers
  id: wrappers/index#werkzeug.wrappers.Response.access_control_allow_headers
  summary: Which headers can be sent with the cross origin request
  belongs_to: Request / Response Objects
  description: |-
    `access_control_allow_headers`

    Which headers can be sent with the cross origin request.
- name: Response.access_control_allow_methods
  id: wrappers/index#werkzeug.wrappers.Response.access_control_allow_methods
  summary: Which methods can be used for the cross origin request
  belongs_to: Request / Response Objects
  description: |-
    `access_control_allow_methods`

    Which methods can be used for the cross origin request.
- name: Response.access_control_allow_origin
  id: wrappers/index#werkzeug.wrappers.Response.access_control_allow_origin
  summary: The origin or ‘*’ for any origin that may make cross origin requests
  belongs_to: Request / Response Objects
  description: |-
    `access_control_allow_origin`

    The origin or ‘\*’ for any origin that may make cross origin requests.
- name: Response.access_control_expose_headers
  id: wrappers/index#werkzeug.wrappers.Response.access_control_expose_headers
  summary: Which headers can be shared by the browser to JavaScript code
  belongs_to: Request / Response Objects
  description: |-
    `access_control_expose_headers`

    Which headers can be shared by the browser to JavaScript code.
- name: Response.access_control_max_age
  id: wrappers/index#werkzeug.wrappers.Response.access_control_max_age
  summary: The maximum age in seconds the access control settings can be cached for
  belongs_to: Request / Response Objects
  description: |-
    `access_control_max_age`

    The maximum age in seconds the access control settings can be cached for.
- name: Response.add_etag()
  id: wrappers/index#werkzeug.wrappers.Response.add_etag
  summary: Add an etag for the current response if there is none yet
  belongs_to: Request / Response Objects
  description: |-
    `add_etag(overwrite=False, weak=False)`

    Add an etag for the current response if there is none yet.

    Changelog

    Changed in version 2.0: SHA-1 is used to generate the value. MD5 may not be available in some environments.

    Parameters:

    - **overwrite** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) –
    - **weak** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) –

    Return type:

    None
- name: Response.age
  id: wrappers/index#werkzeug.wrappers.Response.age
  summary: The Age response-header field conveys the sender’s estimate of the amount of time since the response (or its revalidation) was generated at the origin server
  belongs_to: Request / Response Objects
  description: |-
    `age`

    The Age response-header field conveys the sender’s estimate of the amount of time since the response (or its revalidation) was generated at the origin server.

    Age values are non-negative decimal integers, representing time in seconds.

    `property allow: HeaderSet`

    The Allow entity-header field lists the set of methods supported by the resource identified by the Request-URI. The purpose of this field is strictly to inform the recipient of valid methods associated with the resource. An Allow header field MUST be present in a 405 (Method Not Allowed) response.
- name: Response.autocorrect_location_header
  id: wrappers/index#werkzeug.wrappers.Response.autocorrect_location_header
  summary: If a redirect Location header is a relative URL, make it an absolute URL, including scheme and domain
  belongs_to: Request / Response Objects
  description: |-
    `autocorrect_location_header = False`

    If a redirect `Location` header is a relative URL, make it an absolute URL, including scheme and domain.

    Changelog

    Changed in version 2.1: This is disabled by default, so responses will send relative redirects.

    New in version 0.8.
- name: Response.automatically_set_content_length
  id: wrappers/index#werkzeug.wrappers.Response.automatically_set_content_length
  summary: Should this response object automatically set the content-length header if possible? This is true by default
  belongs_to: Request / Response Objects
  description: |-
    `automatically_set_content_length = True`

    Should this response object automatically set the content-length header if possible? This is true by default.

    Changelog

    New in version 0.8.

    `property cache_control: ResponseCacheControl`

    The Cache-Control general-header field is used to specify directives that MUST be obeyed by all caching mechanisms along the request/response chain.
- name: Response.calculate_content_length()
  id: wrappers/index#werkzeug.wrappers.Response.calculate_content_length
  summary: Returns the content length if available or None otherwise
  belongs_to: Request / Response Objects
  description: |-
    `calculate_content_length()`

    Returns the content length if available or `None` otherwise.

    Return type:

    [int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") \| None
- name: Response.call_on_close()
  id: wrappers/index#werkzeug.wrappers.Response.call_on_close
  summary: Adds a function to the internal list of functions that should be called as part of closing down the response
  belongs_to: Request / Response Objects
  description: |-
    `call_on_close(func)`

    Adds a function to the internal list of functions that should be called as part of closing down the response. Since 0.7 this function also returns the function that was passed so that this can be used as a decorator.

    Changelog

    New in version 0.6.

    Parameters:

    **func** ([Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.11)")*\[\[\],* [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")*\]*) –

    Return type:

    [Callable](https://docs.python.org/3/library/typing.html#typing.Callable "(in Python v3.11)")\[\[\], [Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")\]
- name: Response.close()
  id: wrappers/index#werkzeug.wrappers.Response.close
  summary: Close the wrapped response if possible
  belongs_to: Request / Response Objects
  description: |-
    `close()`

    Close the wrapped response if possible. You can also use the object in a with statement which will automatically close it.

    Changelog

    New in version 0.9: Can now be used in a with statement.

    Return type:

    None
- name: Response.content_encoding
  id: wrappers/index#werkzeug.wrappers.Response.content_encoding
  summary: The Content-Encoding entity-header field is used as a modifier to the media-type
  belongs_to: Request / Response Objects
  description: |-
    `content_encoding`

    The Content-Encoding entity-header field is used as a modifier to the media-type. When present, its value indicates what additional content codings have been applied to the entity-body, and thus what decoding mechanisms must be applied in order to obtain the media-type referenced by the Content-Type header field.

    `property content_language: HeaderSet`

    The Content-Language entity-header field describes the natural language(s) of the intended audience for the enclosed entity. Note that this might not be equivalent to all the languages used within the entity-body.
- name: Response.content_length
  id: wrappers/index#werkzeug.wrappers.Response.content_length
  summary: The Content-Length entity-header field indicates the size of the entity-body, in decimal number of OCTETs, sent to the recipient or, in the case of the HEAD method, the size of the entity-body that would have been sent had the request been a GET
  belongs_to: Request / Response Objects
  description: |-
    `content_length`

    The Content-Length entity-header field indicates the size of the entity-body, in decimal number of OCTETs, sent to the recipient or, in the case of the HEAD method, the size of the entity-body that would have been sent had the request been a GET.
- name: Response.content_location
  id: wrappers/index#werkzeug.wrappers.Response.content_location
  summary: The Content-Location entity-header field MAY be used to supply the resource location for the entity enclosed in the message when that entity is accessible from a location separate from the requested resource’s URI
  belongs_to: Request / Response Objects
  description: |-
    `content_location`

    The Content-Location entity-header field MAY be used to supply the resource location for the entity enclosed in the message when that entity is accessible from a location separate from the requested resource’s URI.
- name: Response.content_md5
  id: wrappers/index#werkzeug.wrappers.Response.content_md5
  summary: The Content-MD5 entity-header field, as defined in RFC 1864, is an MD5 digest of the entity-body for the purpose of providing an end-to-end message integrity check (MIC) of the entity-body
  belongs_to: Request / Response Objects
  description: |-
    `content_md5`

    The Content-MD5 entity-header field, as defined in RFC 1864, is an MD5 digest of the entity-body for the purpose of providing an end-to-end message integrity check (MIC) of the entity-body. (Note: a MIC is good for detecting accidental modification of the entity-body in transit, but is not proof against malicious attacks.)

    `property content_range: ContentRange`

    The `Content-Range` header as a [`ContentRange`](../datastructures/index#werkzeug.datastructures.ContentRange "werkzeug.datastructures.ContentRange") object. Available even if the header is not set.

    Changelog

    New in version 0.7.

    `property content_security_policy: ContentSecurityPolicy`

    The `Content-Security-Policy` header as a `ContentSecurityPolicy` object. Available even if the header is not set.

    The Content-Security-Policy header adds an additional layer of security to help detect and mitigate certain types of attacks.

    `property content_security_policy_report_only: ContentSecurityPolicy`

    The `Content-Security-policy-report-only` header as a `ContentSecurityPolicy` object. Available even if the header is not set.

    The Content-Security-Policy-Report-Only header adds a csp policy that is not enforced but is reported thereby helping detect certain types of attacks.
- name: Response.content_type
  id: wrappers/index#werkzeug.wrappers.Response.content_type
  summary: The Content-Type entity-header field indicates the media type of the entity-body sent to the recipient or, in the case of the HEAD method, the media type that would have been sent had the request been a GET
  belongs_to: Request / Response Objects
  description: |-
    `content_type`

    The Content-Type entity-header field indicates the media type of the entity-body sent to the recipient or, in the case of the HEAD method, the media type that would have been sent had the request been a GET.
- name: Response.cross_origin_embedder_policy
  id: wrappers/index#werkzeug.wrappers.Response.cross_origin_embedder_policy
  summary: Prevents a document from loading any cross-origin resources that do not explicitly grant the document permission
  belongs_to: Request / Response Objects
  description: |-
    `cross_origin_embedder_policy`

    Prevents a document from loading any cross-origin resources that do not explicitly grant the document permission. Values must be a member of the `werkzeug.http.COEP` enum.
- name: Response.cross_origin_opener_policy
  id: wrappers/index#werkzeug.wrappers.Response.cross_origin_opener_policy
  summary: Allows control over sharing of browsing context group with cross-origin documents
  belongs_to: Request / Response Objects
  description: |-
    `cross_origin_opener_policy`

    Allows control over sharing of browsing context group with cross-origin documents. Values must be a member of the `werkzeug.http.COOP` enum.

    `property data: bytes | str`

    A descriptor that calls [`get_data()`](#werkzeug.wrappers.Response.get_data "werkzeug.wrappers.Response.get_data") and [`set_data()`](#werkzeug.wrappers.Response.set_data "werkzeug.wrappers.Response.set_data").
- name: Response.date
  id: wrappers/index#werkzeug.wrappers.Response.date
  summary: The Date general-header field represents the date and time at which the message was originated, having the same semantics as orig-date in RFC 822
  belongs_to: Request / Response Objects
  description: |-
    `date`

    The Date general-header field represents the date and time at which the message was originated, having the same semantics as orig-date in RFC 822.

    Changelog

    Changed in version 2.0: The datetime object is timezone-aware.
- name: Response.default_mimetype
  id: wrappers/index#werkzeug.wrappers.Response.default_mimetype
  summary: the default mimetype if none is provided
  belongs_to: Request / Response Objects
  description: |-
    `default_mimetype: str | None = 'text/plain'`

    the default mimetype if none is provided.
- name: Response.default_status
  id: wrappers/index#werkzeug.wrappers.Response.default_status
  summary: the default status if none is provided
  belongs_to: Request / Response Objects
  description: |-
    `default_status = 200`

    the default status if none is provided.
- name: Response.delete_cookie()
  id: wrappers/index#werkzeug.wrappers.Response.delete_cookie
  summary: Delete a cookie
  belongs_to: Request / Response Objects
  description: |-
    `delete_cookie(key, path='/', domain=None, secure=False, httponly=False, samesite=None)`

    Delete a cookie. Fails silently if key doesn’t exist.

    Parameters:

    - **key** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – the key (name) of the cookie to be deleted.
    - **path** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – if the cookie that should be deleted was limited to a path, the path has to be defined here.
    - **domain** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – if the cookie that should be deleted was limited to a domain, that domain has to be defined here.
    - **secure** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – If `True`, the cookie will only be available via HTTPS.
    - **httponly** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Disallow JavaScript access to the cookie.
    - **samesite** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – Limit the scope of the cookie to only be attached to requests that are “same-site”.

    Return type:

    None
- name: Response.direct_passthrough
  id: wrappers/index#werkzeug.wrappers.Response.direct_passthrough
  summary: Pass the response body directly through as the WSGI iterable
  belongs_to: Request / Response Objects
  description: |-
    `direct_passthrough`

    Pass the response body directly through as the WSGI iterable. This can be used when the body is a binary file or other iterator of bytes, to skip some unnecessary checks. Use [`send_file()`](../utils/index#werkzeug.utils.send_file "werkzeug.utils.send_file") instead of setting this manually.
- name: Response.expires
  id: wrappers/index#werkzeug.wrappers.Response.expires
  summary: The Expires entity-header field gives the date/time after which the response is considered stale
  belongs_to: Request / Response Objects
  description: |-
    `expires`

    The Expires entity-header field gives the date/time after which the response is considered stale. A stale cache entry may not normally be returned by a cache.

    Changelog

    Changed in version 2.0: The datetime object is timezone-aware.
- name: Response.force_type()
  id: wrappers/index#werkzeug.wrappers.Response.force_type
  summary: Enforce that the WSGI response is a response object of the current type
  belongs_to: Request / Response Objects
  description: |-
    `classmethod force_type(response, environ=None)`

    Enforce that the WSGI response is a response object of the current type. Werkzeug will use the [`Response`](#werkzeug.wrappers.Response "werkzeug.wrappers.Response") internally in many situations like the exceptions. If you call `get_response()` on an exception you will get back a regular [`Response`](#werkzeug.wrappers.Response "werkzeug.wrappers.Response") object, even if you are using a custom subclass.

    This method can enforce a given response type, and it will also convert arbitrary WSGI callables into response objects if an environ is provided:

    ``` python
    # convert a Werkzeug response object into an instance of the
    # MyResponseClass subclass.
    response = MyResponseClass.force_type(response)

    # convert any WSGI application into a response object
    response = MyResponseClass.force_type(response, environ)
    ```

    This is especially useful if you want to post-process responses in the main dispatcher and use functionality provided by your subclass.

    Keep in mind that this will modify response objects in place if possible!

    Parameters:

    - **response** ([Response](#werkzeug.wrappers.Response "werkzeug.wrappers.Response")) – a response object or wsgi application.
    - **environ** (*WSGIEnvironment* *\|* *None*) – a WSGI environment object.

    Returns:

    a response object.

    Return type:

    [Response](#werkzeug.wrappers.Response "werkzeug.wrappers.Response")
- name: Response.freeze()
  id: wrappers/index#werkzeug.wrappers.Response.freeze
  summary: Make the response object ready to be pickled
  belongs_to: Request / Response Objects
  description: |-
    `freeze()`

    Make the response object ready to be pickled. Does the following:

    - Buffer the response into a list, ignoring `implicity_sequence_conversion` and [`direct_passthrough`](#werkzeug.wrappers.Response.direct_passthrough "werkzeug.wrappers.Response.direct_passthrough").
    - Set the `Content-Length` header.
    - Generate an `ETag` header if one is not already set.

    Changelog

    Changed in version 2.1: Removed the `no_etag` parameter.

    Changed in version 2.0: An `ETag` header is always added.

    Changed in version 0.6: The `Content-Length` header is set.

    Return type:

    None
- name: Response.from_app()
  id: wrappers/index#werkzeug.wrappers.Response.from_app
  summary: Create a new response object from an application output
  belongs_to: Request / Response Objects
  description: |-
    `classmethod from_app(app, environ, buffered=False)`

    Create a new response object from an application output. This works best if you pass it an application that returns a generator all the time. Sometimes applications may use the `write()` callable returned by the `start_response` function. This tries to resolve such edge cases automatically. But if you don’t get the expected output you should set `buffered` to `True` which enforces buffering.

    Parameters:

    - **app** (*WSGIApplication*) – the WSGI application to execute.
    - **environ** (*WSGIEnvironment*) – the WSGI environment to execute against.
    - **buffered** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – set to `True` to enforce buffering.

    Returns:

    a response object.

    Return type:

    [Response](#werkzeug.wrappers.Response "werkzeug.wrappers.Response")
- name: Response.get_app_iter()
  id: wrappers/index#werkzeug.wrappers.Response.get_app_iter
  summary: Returns the application iterator for the given environ
  belongs_to: Request / Response Objects
  description: |-
    `get_app_iter(environ)`

    Returns the application iterator for the given environ. Depending on the request method and the current status code the return value might be an empty response rather than the one from the response.

    If the request method is `HEAD` or the status code is in a range where the HTTP specification requires an empty response, an empty iterable is returned.

    Changelog

    New in version 0.6.

    Parameters:

    **environ** (*WSGIEnvironment*) – the WSGI environment of the request.

    Returns:

    a response iterable.

    Return type:

    t.Iterable\[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.11)")\]
- name: Response.get_data()
  id: wrappers/index#werkzeug.wrappers.Response.get_data
  summary: The string representation of the response body
  belongs_to: Request / Response Objects
  description: |-
    `get_data(as_text: Literal[False] = False) → bytes`

    get_data ( *as_text : [Literal](https://docs.python.org/3/library/typing.html#typing.Literal "(in Python v3.11)") \[ True \] * ) → [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")

    The string representation of the response body. Whenever you call this property the response iterable is encoded and flattened. This can lead to unwanted behavior if you stream big data.

    This behavior can be disabled by setting [`implicit_sequence_conversion`](#werkzeug.wrappers.Response.implicit_sequence_conversion "werkzeug.wrappers.Response.implicit_sequence_conversion") to `False`.

    If `as_text` is set to `True` the return value will be a decoded string.

    Changelog

    New in version 0.9.
- name: Response.get_etag()
  id: wrappers/index#werkzeug.wrappers.Response.get_etag
  summary: Return a tuple in the form (etag, is_weak)
  belongs_to: Request / Response Objects
  description: |-
    `get_etag()`

    Return a tuple in the form `(etag, is_weak)`. If there is no ETag the return value is `(None, None)`.

    Return type:

    [tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)"), [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")\] \| [tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")\[None, None\]
- name: Response.get_json()
  id: wrappers/index#werkzeug.wrappers.Response.get_json
  summary: Parse data as JSON
  belongs_to: Request / Response Objects
  description: |-
    `get_json(force: bool = False, silent: Literal[False] = False) → Any`

    get_json(*force:[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")=False*, *silent:[bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")=False*)→[Any](https://docs.python.org/3/library/typing.html#typing.Any "(in Python v3.11)")\|[None](https://docs.python.org/3/library/constants.html#None "(in Python v3.11)")

    Parse [`data`](#werkzeug.wrappers.Response.data "werkzeug.wrappers.Response.data") as JSON. Useful during testing.

    If the mimetype does not indicate JSON (*application/json*, see [`is_json`](#werkzeug.wrappers.Response.is_json "werkzeug.wrappers.Response.is_json")), this returns `None`.

    Unlike [`Request.get_json()`](#werkzeug.wrappers.Request.get_json "werkzeug.wrappers.Request.get_json"), the result is not cached.

    Parameters:

    - **force** – Ignore the mimetype and always try to parse JSON.
    - **silent** – Silence parsing errors and return `None` instead.
- name: Response.get_wsgi_headers()
  id: wrappers/index#werkzeug.wrappers.Response.get_wsgi_headers
  summary: This is automatically called right before the response is started and returns headers modified for the given environment
  belongs_to: Request / Response Objects
  description: |-
    `get_wsgi_headers(environ)`

    This is automatically called right before the response is started and returns headers modified for the given environment. It returns a copy of the headers from the response with some modifications applied if necessary.

    For example the location header (if present) is joined with the root URL of the environment. Also the content length is automatically set to zero here for certain status codes.

    Changelog

    Changed in version 0.6: Previously that function was called `fix_headers` and modified the response object in place. Also since 0.6, IRIs in location and content-location headers are handled properly.

    Also starting with 0.6, Werkzeug will attempt to set the content length if it is able to figure it out on its own. This is the case if all the strings in the response iterable are already encoded and the iterable is buffered.

    Parameters:

    **environ** (*WSGIEnvironment*) – the WSGI environment of the request.

    Returns:

    returns a new [`Headers`](../datastructures/index#werkzeug.datastructures.Headers "werkzeug.datastructures.Headers") object.

    Return type:

    [Headers](../datastructures/index#werkzeug.datastructures.Headers "werkzeug.datastructures.Headers")
- name: Response.get_wsgi_response()
  id: wrappers/index#werkzeug.wrappers.Response.get_wsgi_response
  summary: Returns the final WSGI response as tuple
  belongs_to: Request / Response Objects
  description: |-
    `get_wsgi_response(environ)`

    Returns the final WSGI response as tuple. The first item in the tuple is the application iterator, the second the status and the third the list of headers. The response returned is created specially for the given environment. For example if the request method in the WSGI environment is `'HEAD'` the response will be empty and only the headers and status code will be present.

    Changelog

    New in version 0.6.

    Parameters:

    **environ** (*WSGIEnvironment*) – the WSGI environment of the request.

    Returns:

    an `(app_iter, status, headers)` tuple.

    Return type:

    [tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")\[t.Iterable\[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.11)")\], [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)"), [list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.11)")\[[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)"), [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")\]\]\]
- name: Response.implicit_sequence_conversion
  id: wrappers/index#werkzeug.wrappers.Response.implicit_sequence_conversion
  summary: if set to False accessing properties on the response object will not try to consume the response iterator and convert it into a list
  belongs_to: Request / Response Objects
  description: |-
    `implicit_sequence_conversion = True`

    if set to `False` accessing properties on the response object will not try to consume the response iterator and convert it into a list.

    Changelog

    New in version 0.6.2: That attribute was previously called `implicit_seqence_conversion`. (Notice the typo). If you did use this feature, you have to adapt your code to the name change.

    `property is_json: bool`

    Check if the mimetype indicates JSON data, either *application/json* or *application/\*+json*.

    `property is_sequence: bool`

    If the iterator is buffered, this property will be `True`. A response object will consider an iterator to be buffered if the response attribute is a list or tuple.

    Changelog

    New in version 0.6.

    `property is_streamed: bool`

    If the response is streamed (the response is not an iterable with a length information) this property is `True`. In this case streamed means that there is no information about the number of iterations. This is usually `True` if a generator is passed to the response object.

    This is useful for checking before applying some sort of post filtering that should not take place for streamed responses.
- name: Response.iter_encoded()
  id: wrappers/index#werkzeug.wrappers.Response.iter_encoded
  summary: Iter the response encoded with the encoding of the response
  belongs_to: Request / Response Objects
  description: |-
    `iter_encoded()`

    Iter the response encoded with the encoding of the response. If the response object is invoked as WSGI application the return value of this method is used as application iterator unless [`direct_passthrough`](#werkzeug.wrappers.Response.direct_passthrough "werkzeug.wrappers.Response.direct_passthrough") was activated.

    Return type:

    [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator "(in Python v3.11)")\[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.11)")\]

    `property json: Any | None`

    The parsed JSON data if [`mimetype`](#werkzeug.wrappers.Response.mimetype "werkzeug.wrappers.Response.mimetype") indicates JSON (*application/json*, see [`is_json`](#werkzeug.wrappers.Response.is_json "werkzeug.wrappers.Response.is_json")).

    Calls [`get_json()`](#werkzeug.wrappers.Response.get_json "werkzeug.wrappers.Response.get_json") with default arguments.
- name: Response.json_module
  id: wrappers/index#werkzeug.wrappers.Response.json_module
  summary: A module or other object that has dumps and loads functions that match the API of the built-in json module
  belongs_to: Request / Response Objects
  description: |-
    `json_module = <module 'json' from '/home/docs/.asdf/installs/python/3.10.12/lib/python3.10/json/__init__.py'>`

    A module or other object that has `dumps` and `loads` functions that match the API of the built-in [`json`](https://docs.python.org/3/library/json.html#module-json "(in Python v3.11)") module.
- name: Response.last_modified
  id: wrappers/index#werkzeug.wrappers.Response.last_modified
  summary: The Last-Modified entity-header field indicates the date and time at which the origin server believes the variant was last modified
  belongs_to: Request / Response Objects
  description: |-
    `last_modified`

    The Last-Modified entity-header field indicates the date and time at which the origin server believes the variant was last modified.

    Changelog

    Changed in version 2.0: The datetime object is timezone-aware.
- name: Response.location
  id: wrappers/index#werkzeug.wrappers.Response.location
  summary: The Location response-header field is used to redirect the recipient to a location other than the Request-URI for completion of the request or identification of a new resource
  belongs_to: Request / Response Objects
  description: |-
    `location`

    The Location response-header field is used to redirect the recipient to a location other than the Request-URI for completion of the request or identification of a new resource.
- name: Response.make_conditional()
  id: wrappers/index#werkzeug.wrappers.Response.make_conditional
  summary: Make the response conditional to the request
  belongs_to: Request / Response Objects
  description: |-
    `make_conditional(request_or_environ, accept_ranges=False, complete_length=None)`

    Make the response conditional to the request. This method works best if an etag was defined for the response already. The `add_etag` method can be used to do that. If called without etag just the date header is set.

    This does nothing if the request method in the request or environ is anything but GET or HEAD.

    For optimal performance when handling range requests, it’s recommended that your response data object implements `seekable`, `seek` and `tell` methods as described by [`io.IOBase`](https://docs.python.org/3/library/io.html#io.IOBase "(in Python v3.11)"). Objects returned by [`wrap_file()`](../wsgi/index#werkzeug.wsgi.wrap_file "werkzeug.wsgi.wrap_file") automatically implement those methods.

    It does not remove the body of the response because that’s something the [`__call__()`](#werkzeug.wrappers.Response.__call__ "werkzeug.wrappers.Response.__call__") function does for us automatically.

    Returns self so that you can do `return resp.make_conditional(req)` but modifies the object in-place.

    Parameters:

    - **request_or_environ** (*WSGIEnvironment* *\|* [Request](#werkzeug.wrappers.Request "werkzeug.wrappers.Request")) – a request object or WSGI environment to be used to make the response conditional against.
    - **accept_ranges** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)") *\|* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – This parameter dictates the value of `Accept-Ranges` header. If `False` (default), the header is not set. If `True`, it will be set to `"bytes"`. If it’s a string, it will use this value.
    - **complete_length** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* *None*) – Will be used only in valid Range Requests. It will set `Content-Range` complete length value and compute `Content-Length` real value. This parameter is mandatory for successful Range Requests completion.

    Raises:

    [`RequestedRangeNotSatisfiable`](../exceptions/index#werkzeug.exceptions.RequestedRangeNotSatisfiable "werkzeug.exceptions.RequestedRangeNotSatisfiable") if `Range` header could not be parsed or satisfied.

    Return type:

    [Response](#werkzeug.wrappers.Response "werkzeug.wrappers.Response")

    Changelog

    Changed in version 2.0: Range processing is skipped if length is 0 instead of raising a 416 Range Not Satisfiable error.
- name: Response.make_sequence()
  id: wrappers/index#werkzeug.wrappers.Response.make_sequence
  summary: Converts the response iterator in a list
  belongs_to: Request / Response Objects
  description: |-
    `make_sequence()`

    Converts the response iterator in a list. By default this happens automatically if required. If `implicit_sequence_conversion` is disabled, this method is not automatically called and some properties might raise exceptions. This also encodes all the items.

    Changelog

    New in version 0.6.

    Return type:

    None
- name: Response.max_cookie_size
  id: wrappers/index#werkzeug.wrappers.Response.max_cookie_size
  summary: Warn if a cookie header exceeds this size
  belongs_to: Request / Response Objects
  description: |-
    `max_cookie_size = 4093`

    Warn if a cookie header exceeds this size. The default, 4093, should be safely [supported by most browsers](http://browsercookielimits.squawky.net/). A cookie larger than this size will still be sent, but it may be ignored or handled incorrectly by some browsers. Set to 0 to disable this check.

    Changelog

    New in version 0.13.

    `property mimetype: str | None`

    The mimetype (content type without charset etc.)

    `property mimetype_params: dict[str, str]`

    The mimetype parameters as dict. For example if the content type is `text/html; charset=utf-8` the params would be `{'charset': 'utf-8'}`.

    Changelog

    New in version 0.5.
- name: Response.response
  id: wrappers/index#werkzeug.wrappers.Response.response
  summary: The response body to send as the WSGI iterable
  belongs_to: Request / Response Objects
  description: |-
    `response: Iterable[str] | Iterable[bytes]`

    The response body to send as the WSGI iterable. A list of strings or bytes represents a fixed-length response, any other iterable is a streaming response. Strings are encoded to bytes as UTF-8.

    Do not set to a plain string or bytes, that will cause sending the response to be very inefficient as it will iterate one byte at a time.

    `property retry_after: datetime | None`

    The Retry-After response-header field can be used with a 503 (Service Unavailable) response to indicate how long the service is expected to be unavailable to the requesting client.

    Time in seconds until expiration or date.

    Changelog

    Changed in version 2.0: The datetime object is timezone-aware.
- name: Response.set_cookie()
  id: wrappers/index#werkzeug.wrappers.Response.set_cookie
  summary: Sets a cookie
  belongs_to: Request / Response Objects
  description: |-
    `set_cookie(key, value='', max_age=None, expires=None, path='/', domain=None, secure=False, httponly=False, samesite=None)`

    Sets a cookie.

    A warning is raised if the size of the cookie header exceeds [`max_cookie_size`](#werkzeug.wrappers.Response.max_cookie_size "werkzeug.wrappers.Response.max_cookie_size"), but the header will still be set.

    Parameters:

    - **key** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – the key (name) of the cookie to be set.
    - **value** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – the value of the cookie.
    - **max_age** ([timedelta](https://docs.python.org/3/library/datetime.html#datetime.timedelta "(in Python v3.11)") *\|* [int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* *None*) – should be a number of seconds, or `None` (default) if the cookie should last only as long as the client’s browser session.
    - **expires** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* [datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime "(in Python v3.11)") *\|* [int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* [float](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)") *\|* *None*) – should be a `datetime` object or UNIX timestamp.
    - **path** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – limits the cookie to a given path, per default it will span the whole domain.
    - **domain** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – if you want to set a cross-domain cookie. For example, `domain="example.com"` will set a cookie that is readable by the domain `www.example.com`, `foo.example.com` etc. Otherwise, a cookie will only be readable by the domain that set it.
    - **secure** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – If `True`, the cookie will only be available via HTTPS.
    - **httponly** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Disallow JavaScript access to the cookie.
    - **samesite** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – Limit the scope of the cookie to only be attached to requests that are “same-site”.

    Return type:

    None
- name: Response.set_data()
  id: wrappers/index#werkzeug.wrappers.Response.set_data
  summary: Sets a new string as response
  belongs_to: Request / Response Objects
  description: |-
    `set_data(value)`

    Sets a new string as response. The value must be a string or bytes. If a string is set it’s encoded to the charset of the response (utf-8 by default).

    Changelog

    New in version 0.9.

    Parameters:

    **value** ([bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.11)") *\|* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –

    Return type:

    None
- name: Response.set_etag()
  id: wrappers/index#werkzeug.wrappers.Response.set_etag
  summary: Set the etag, and override the old one if there was one
  belongs_to: Request / Response Objects
  description: "`set_etag(etag, weak=False)`\n\nSet the etag, and override the old one if there was one.\n\nParameters:\n\n- **etag** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **weak** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) –\n\nReturn type:\n\nNone\n\n`property status: str`\n\nThe HTTP status code as a string.\n\n`property status_code: int`\n\nThe HTTP status code as a number.\n\n`property stream: ResponseStream`\n\nThe response iterable as write-only stream.\n\n`property vary: HeaderSet`\n\nThe Vary field value indicates the set of request-header fields that fully determines, while the response is fresh, whether a cache is permitted to use the response to reply to a subsequent request without revalidation.\n\n`property www_authenticate: WWWAuthenticate`\n\nThe `WWW-Authenticate` header parsed into a [`WWWAuthenticate`](../datastructures/index#werkzeug.datastructures.WWWAuthenticate \"werkzeug.datastructures.WWWAuthenticate\") object. Modifying the object will modify the header value.\n\nThis header is not set by default. To set this header, assign an instance of [`WWWAuthenticate`](../datastructures/index#werkzeug.datastructures.WWWAuthenticate \"werkzeug.datastructures.WWWAuthenticate\") to this attribute.\n\n``` python\nresponse.www_authenticate = WWWAuthenticate(\n    \"basic\", {\"realm\": \"Authentication Required\"}\n)\n```\n\nMultiple values for this header can be sent to give the client multiple options. Assign a list to set multiple headers. However, modifying the items in the list will not automatically update the header values, and accessing this attribute will only ever return the first value.\n\nTo unset this header, assign `None` or use `del`.\n\nChangelog\n\nChanged in version 2.3: This attribute can be assigned to to set the header. A list can be assigned to set multiple header values. Use `del` to unset the header.\n\nChanged in version 2.3: `WWWAuthenticate` is no longer a `dict`. The `token` attribute was added for auth challenges that use a token instead of parameters.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/wrappers/](https://werkzeug.palletsprojects.com/en/3.0.x/wrappers/)"
- name: ResponseCacheControl
  id: datastructures/index#werkzeug.datastructures.ResponseCacheControl
  summary: A cache control for responses
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.ResponseCacheControl(values=(), on_update=None)`

    A cache control for responses. Unlike [`RequestCacheControl`](#werkzeug.datastructures.RequestCacheControl "werkzeug.datastructures.RequestCacheControl") this is mutable and gives access to response-relevant cache control headers.

    To get a header of the [`ResponseCacheControl`](#werkzeug.datastructures.ResponseCacheControl "werkzeug.datastructures.ResponseCacheControl") object again you can convert the object into a string or call the `to_header()` method. If you plan to subclass it and add your own items have a look at the sourcecode for that class.

    Changelog

    Changed in version 2.1.1: `s_maxage` converts the value to an int.

    Changed in version 2.1.0: Setting int properties such as `max_age` will convert the value to an int.

    New in version 0.5: In previous versions a `CacheControl` class existed that was used both for request and response.
- name: ResponseCacheControl.max_age
  id: datastructures/index#werkzeug.datastructures.ResponseCacheControl.max_age
  summary: null
  belongs_to: Data Structures
  description: |-
    `max_age`

    accessor for ‘max-age’
- name: ResponseCacheControl.no_cache
  id: datastructures/index#werkzeug.datastructures.ResponseCacheControl.no_cache
  summary: null
  belongs_to: Data Structures
  description: |-
    `no_cache`

    accessor for ‘no-cache’
- name: ResponseCacheControl.no_store
  id: datastructures/index#werkzeug.datastructures.ResponseCacheControl.no_store
  summary: null
  belongs_to: Data Structures
  description: |-
    `no_store`

    accessor for ‘no-store’
- name: ResponseCacheControl.no_transform
  id: datastructures/index#werkzeug.datastructures.ResponseCacheControl.no_transform
  summary: null
  belongs_to: Data Structures
  description: |-
    `no_transform`

    accessor for ‘no-transform’

    `property immutable`

    accessor for ‘immutable’

    `property must_revalidate`

    accessor for ‘must-revalidate’

    `property private`

    accessor for ‘private’

    `property proxy_revalidate`

    accessor for ‘proxy-revalidate’

    `property public`

    accessor for ‘public’

    `property s_maxage`

    accessor for ‘s-maxage’
- name: Rule
  id: routing/index#werkzeug.routing.Rule
  summary: A Rule represents one URL pattern
  belongs_to: URL Routing
  description: |-
    `class werkzeug.routing.Rule(string, defaults=None, subdomain=None, methods=None, build_only=False, endpoint=None, strict_slashes=None, merge_slashes=None, redirect_to=None, alias=False, host=None, websocket=False)`

    A Rule represents one URL pattern. There are some options for `Rule` that change the way it behaves and are passed to the `Rule` constructor. Note that besides the rule-string all arguments *must* be keyword arguments in order to not break the application on Werkzeug upgrades.

    `string`

    Rule strings basically are just normal URL paths with placeholders in the format `<converter(arguments):name>` where the converter and the arguments are optional. If no converter is defined the `default` converter is used which means `string` in the normal configuration.

    URL rules that end with a slash are branch URLs, others are leaves. If you have `strict_slashes` enabled (which is the default), all branch URLs that are matched without a trailing slash will trigger a redirect to the same URL with the missing slash appended.

    The converters are defined on the `Map`.

    `endpoint`

    The endpoint for this rule. This can be anything. A reference to a function, a string, a number etc. The preferred way is using a string because the endpoint is used for URL generation.

    `defaults`

    An optional dict with defaults for other rules with the same endpoint. This is a bit tricky but useful if you want to have unique URLs:

    ``` python
    url_map = Map([
        Rule('/all/', defaults={'page': 1}, endpoint='all_entries'),
        Rule('/all/page/<int:page>', endpoint='all_entries')
    ])
    ```

    If a user now visits `http://example.com/all/page/1` they will be redirected to `http://example.com/all/`. If `redirect_defaults` is disabled on the `Map` instance this will only affect the URL generation.

    `subdomain`

    The subdomain rule string for this rule. If not specified the rule only matches for the `default_subdomain` of the map. If the map is not bound to a subdomain this feature is disabled.

    Can be useful if you want to have user profiles on different subdomains and all subdomains are forwarded to your application:

    ``` python
    url_map = Map([
        Rule('/', subdomain='<username>', endpoint='user/homepage'),
        Rule('/stats', subdomain='<username>', endpoint='user/stats')
    ])
    ```

    `methods`

    A sequence of http methods this rule applies to. If not specified, all methods are allowed. For example this can be useful if you want different endpoints for `POST` and `GET`. If methods are defined and the path matches but the method matched against is not in this list or in the list of another rule for that path the error raised is of the type `MethodNotAllowed` rather than `NotFound`. If `GET` is present in the list of methods and `HEAD` is not, `HEAD` is added automatically.

    `strict_slashes`

    Override the `Map` setting for `strict_slashes` only for this rule. If not specified the `Map` setting is used.

    `merge_slashes`

    Override `Map.merge_slashes` for this rule.

    `build_only`

    Set this to True and the rule will never match but will create a URL that can be build. This is useful if you have resources on a subdomain or folder that are not handled by the WSGI application (like static data)

    `redirect_to`

    If given this must be either a string or callable. In case of a callable it’s called with the url adapter that triggered the match and the values of the URL as keyword arguments and has to return the target for the redirect, otherwise it has to be a string with placeholders in rule syntax:

    ``` python
    def foo_with_slug(adapter, id):
        # ask the database for the slug for the old id.  this of
        # course has nothing to do with werkzeug.
        return f'foo/{Foo.get_slug_for_id(id)}'

    url_map = Map([
        Rule('/foo/<slug>', endpoint='foo'),
        Rule('/some/old/url/<slug>', redirect_to='foo/<slug>'),
        Rule('/other/old/url/<int:id>', redirect_to=foo_with_slug)
    ])
    ```

    When the rule is matched the routing system will raise a `RequestRedirect` exception with the target for the redirect.

    Keep in mind that the URL will be joined against the URL root of the script so don’t use a leading slash on the target URL unless you really mean root of that domain.

    `alias`

    If enabled this rule serves as an alias for another rule with the same endpoint and arguments.

    `host`

    If provided and the URL map has host matching enabled this can be used to provide a match rule for the whole host. This also means that the subdomain feature is disabled.

    `websocket`

    If `True`, this rule is only matches for WebSocket (`ws://`, `wss://`) requests. By default, rules will only match for HTTP requests.

    Changelog

    Changed in version 2.1: Percent-encoded newlines (`%0a`), which are decoded by WSGI servers, are considered when routing instead of terminating the match early.

    New in version 1.0: Added `websocket`.

    New in version 1.0: Added `merge_slashes`.

    New in version 0.7: Added `alias` and `host`.

    Changed in version 0.6.1: `HEAD` is added to `methods` if `GET` is present.

    Parameters:

    - **string** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **defaults** (*t.Mapping\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* *t.Any\]* *\|* *None*) –
    - **subdomain** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
    - **methods** (*t.Iterable\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*\]* *\|* *None*) –
    - **build_only** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) –
    - **endpoint** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
    - **strict_slashes** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)") *\|* *None*) –
    - **merge_slashes** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)") *\|* *None*) –
    - **redirect_to** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *t.Callable\[...,* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*\]* *\|* *None*) –
    - **alias** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) –
    - **host** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
    - **websocket** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) –
- name: Rule.empty()
  id: routing/index#werkzeug.routing.Rule.empty
  summary: Return an unbound copy of this rule
  belongs_to: URL Routing
  description: |-
    `empty()`

    Return an unbound copy of this rule.

    This can be useful if want to reuse an already bound URL for another map. See `get_empty_kwargs` to override what keyword arguments are provided to the new copy.

    Return type:

    [Rule](#werkzeug.routing.Rule "werkzeug.routing.rules.Rule")

    ## Matchers
- name: RuleFactory
  id: routing/index#werkzeug.routing.RuleFactory
  summary: As soon as you have more complex URL setups it’s a good idea to use rule factories to avoid repetitive tasks
  belongs_to: URL Routing
  description: |-
    `class werkzeug.routing.RuleFactory`

    As soon as you have more complex URL setups it’s a good idea to use rule factories to avoid repetitive tasks. Some of them are builtin, others can be added by subclassing `RuleFactory` and overriding `get_rules`.
- name: RuleFactory.get_rules()
  id: routing/index#werkzeug.routing.RuleFactory.get_rules
  summary: Subclasses of RuleFactory have to override this method and return an iterable of rules
  belongs_to: URL Routing
  description: |-
    `get_rules(map)`

    Subclasses of `RuleFactory` have to override this method and return an iterable of rules.

    Parameters:

    **map** ([Map](#werkzeug.routing.Map "werkzeug.routing.Map")) –

    Return type:

    t.Iterable\[[Rule](#werkzeug.routing.Rule "werkzeug.routing.Rule")\]
- name: RuleTemplate
  id: routing/index#werkzeug.routing.RuleTemplate
  summary: Returns copies of the rules wrapped and expands string templates in the endpoint, rule, defaults or subdomain sections
  belongs_to: URL Routing
  description: "`class werkzeug.routing.RuleTemplate(rules)`\n\nReturns copies of the rules wrapped and expands string templates in the endpoint, rule, defaults or subdomain sections.\n\nHere a small example for such a rule template:\n\n``` python\nfrom werkzeug.routing import Map, Rule, RuleTemplate\n\nresource = RuleTemplate([\n    Rule('/$name/', endpoint='$name.list'),\n    Rule('/$name/<int:id>', endpoint='$name.show')\n])\n\nurl_map = Map([resource(name='user'), resource(name='page')])\n```\n\nWhen a rule template is called the keyword arguments are used to replace the placeholders in all the string parameters.\n\nParameters:\n\n**rules** (*t.Iterable\\[*[Rule](#werkzeug.routing.Rule \"werkzeug.routing.Rule\")*\\]*) –\n\n## Custom Converters\n\nYou can add custom converters that add behaviors not provided by the built-in converters. To make a custom converter, subclass `BaseConverter` then pass the new class to the [`Map`](#werkzeug.routing.Map \"werkzeug.routing.Map\") `converters` parameter, or add it to [`url_map.converters`](#werkzeug.routing.Map.converters \"werkzeug.routing.Map.converters\").\n\nThe converter should have a `regex` attribute with a regular expression to match with. If the converter can take arguments in a URL rule, it should accept them in its `__init__` method. The entire regex expression will be matched as a group and used as the value for conversion.\n\nIf a custom converter can match a forward slash, `/`, it should have the attribute `part_isolating` set to `False`. This will ensure that rules using the custom converter are correctly matched.\n\nIt can implement a `to_python` method to convert the matched string to some other object. This can also do extra validation that wasn’t possible with the `regex` attribute, and should raise a `werkzeug.routing.ValidationError` in that case. Raising any other errors will cause a 500 error.\n\nIt can implement a `to_url` method to convert a Python object to a string when building a URL. Any error raised here will be converted to a `werkzeug.routing.BuildError` and eventually cause a 500 error.\n\nThis example implements a `BooleanConverter` that will match the strings `\"yes\"`, `\"no\"`, and `\"maybe\"`, returning a random value for `\"maybe\"`.\n\n``` python\nfrom random import randrange\nfrom werkzeug.routing import BaseConverter, ValidationError\n\nclass BooleanConverter(BaseConverter):\n    regex = r\"(?:yes|no|maybe)\"\n\n    def __init__(self, url_map, maybe=False):\n        super().__init__(url_map)\n        self.maybe = maybe\n\n    def to_python(self, value):\n        if value == \"maybe\":\n            if self.maybe:\n                return not randrange(2)\n            raise ValidationError\n        return value == 'yes'\n\n    def to_url(self, value):\n        return \"yes\" if value else \"no\"\n\nfrom werkzeug.routing import Map, Rule\n\nurl_map = Map([\n    Rule(\"/vote/<bool:werkzeug_rocks>\", endpoint=\"vote\"),\n    Rule(\"/guess/<bool(maybe=True):foo>\", endpoint=\"guess\")\n], converters={'bool': BooleanConverter})\n```\n\nIf you want to change the default converter, assign a different converter to the `\"default\"` key.\n\n## Host Matching\n\nChangelog\n\nNew in version 0.7.\n\nStarting with Werkzeug 0.7 it’s also possible to do matching on the whole host names instead of just the subdomain. To enable this feature you need to pass `host_matching=True` to the [`Map`](#werkzeug.routing.Map \"werkzeug.routing.Map\") constructor and provide the `host` argument to all routes:\n\n``` python\nurl_map = Map([\n    Rule('/', endpoint='www_index', host='www.example.com'),\n    Rule('/', endpoint='help_index', host='help.example.com')\n], host_matching=True)\n```\n\nVariable parts are of course also possible in the host section:\n\n``` python\nurl_map = Map([\n    Rule('/', endpoint='www_index', host='www.example.com'),\n    Rule('/', endpoint='user_index', host='<user>.example.com')\n], host_matching=True)\n```\n\n## WebSockets\n\nChangelog\n\nNew in version 1.0.\n\nIf a [`Rule`](#werkzeug.routing.Rule \"werkzeug.routing.Rule\") is created with `websocket=True`, it will only match if the [`Map`](#werkzeug.routing.Map \"werkzeug.routing.Map\") is bound to a request with a `url_scheme` of `ws` or `wss`.\n\nNote\n\nWerkzeug has no further WebSocket support beyond routing. This functionality is mostly of use to ASGI projects.\n\n``` python\nurl_map = Map([\n    Rule(\"/ws\", endpoint=\"comm\", websocket=True),\n])\nadapter = map.bind(\"example.org\", \"/ws\", url_scheme=\"ws\")\nassert adapter.match() == (\"comm\", {})\n```\n\nIf the only match is a WebSocket rule and the bind is HTTP (or the only match is HTTP and the bind is WebSocket) a `WebsocketMismatch` (derives from [`BadRequest`](../exceptions/index#werkzeug.exceptions.BadRequest \"werkzeug.exceptions.BadRequest\")) exception is raised.\n\nAs WebSocket URLs have a different scheme, rules are always built with a scheme and host, `force_external=True` is implied.\n\n``` python\nurl = adapter.build(\"comm\")\nassert url == \"ws://example.org/ws\"\n```\n\n## State Machine Matching\n\nThe default matching algorithm uses a state machine that transitions between parts of the request path to find a match. To understand how this works consider this rule:\n\n``` python\n/resource/<id>\n```\n\nFirstly this rule is decomposed into two `RulePart`. The first is a static part with a content equal to `resource`, the second is dynamic and requires a regex match to `[^/]+`.\n\nA state machine is then created with an initial state that represents the rule’s first `/`. This initial state has a single, static transition to the next state which represents the rule’s second `/`. This second state has a single dynamic transition to the final state which includes the rule.\n\nTo match a path the matcher starts and the initial state and follows transitions that work. Clearly a trial path of `/resource/2` has the parts `\"\"`, `resource`, and `2` which match the transitions and hence a rule will match. Whereas `/other/2` will not match as there is no transition for the `other` part from the initial state.\n\nThe only diversion from this rule is if a `RulePart` is not part-isolating i.e. it will match `/`. In this case the `RulePart` is considered final and represents a transition that must include all the subsequent parts of the trial path.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/routing/](https://werkzeug.palletsprojects.com/en/3.0.x/routing/)"
- name: run_simple()
  id: serving/index#werkzeug.serving.run_simple
  summary: Start a development server for a WSGI application
  belongs_to: Serving WSGI Applications
  description: |-
    `werkzeug.serving.run_simple(hostname, port, application, use_reloader=False, use_debugger=False, use_evalex=True, extra_files=None, exclude_patterns=None, reloader_interval=1, reloader_type='auto', threaded=False, processes=1, request_handler=None, static_files=None, passthrough_errors=False, ssl_context=None)`

    Start a development server for a WSGI application. Various optional features can be enabled.

    Warning

    Do not use the development server when deploying to production. It is intended for use only during local development. It is not designed to be particularly efficient, stable, or secure.

    Parameters:

    - **hostname** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The host to bind to, for example `'localhost'`. Can be a domain, IPv4 or IPv6 address, or file path starting with `unix://` for a Unix socket.
    - **port** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")) – The port to bind to, for example `8080`. Using `0` tells the OS to pick a random free port.
    - **application** (*WSGIApplication*) – The WSGI application to run.
    - **use_reloader** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Use a reloader process to restart the server process when files are changed.
    - **use_debugger** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Use Werkzeug’s debugger, which will show formatted tracebacks on unhandled exceptions.
    - **use_evalex** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Make the debugger interactive. A Python terminal can be opened for any frame in the traceback. Some protection is provided by requiring a PIN, but this should never be enabled on a publicly visible server.
    - **extra_files** (*t.Iterable\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*\]* *\|* *None*) – The reloader will watch these files for changes in addition to Python modules. For example, watch a configuration file.
    - **exclude_patterns** (*t.Iterable\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*\]* *\|* *None*) – The reloader will ignore changes to any files matching these [`fnmatch`](https://docs.python.org/3/library/fnmatch.html#module-fnmatch "(in Python v3.11)") patterns. For example, ignore cache files.
    - **reloader_interval** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")) – How often the reloader tries to check for changes.
    - **reloader_type** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The reloader to use. The `'stat'` reloader is built in, but may require significant CPU to watch files. The `'watchdog'` reloader is much more efficient but requires installing the `watchdog` package first.
    - **threaded** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Handle concurrent requests using threads. Cannot be used with `processes`.
    - **processes** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")) – Handle concurrent requests using up to this number of processes. Cannot be used with `threaded`.
    - **request_handler** ([type](https://docs.python.org/3/library/functions.html#type "(in Python v3.11)")*\[WSGIRequestHandler\]* *\|* *None*) – Use a different `BaseHTTPRequestHandler` subclass to handle requests.
    - **static_files** ([dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* [tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*\]\]* *\|* *None*) – A dict mapping URL prefixes to directories to serve static files from using `SharedDataMiddleware`.
    - **passthrough_errors** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Don’t catch unhandled exceptions at the server level, let the server crash instead. If `use_debugger` is enabled, the debugger will still catch such errors.
    - **ssl_context** (*\_TSSLContextArg* *\|* *None*) – Configure TLS to serve over HTTPS. Can be an [`ssl.SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext "(in Python v3.11)") object, a `(cert_file, key_file)` tuple to create a typical context, or the string `'adhoc'` to generate a temporary self-signed certificate.

    Return type:

    None

    Changelog

    Changed in version 2.1: Instructions are shown for dealing with an “address already in use” error.

    Changed in version 2.1: Running on `0.0.0.0` or `::` shows the loopback IP in addition to a real IP.

    Changed in version 2.1: The command-line interface was removed.

    Changed in version 2.0: Running on `0.0.0.0` or `::` shows a real IP address that was bound as well as a warning not to run the development server in production.

    Changed in version 2.0: The `exclude_patterns` parameter was added.

    Changed in version 0.15: Bind to a Unix socket by passing a `hostname` that starts with `unix://`.

    Changed in version 0.10: Improved the reloader and added support for changing the backend through the `reloader_type` parameter.

    Changed in version 0.9: A command-line interface was added.

    Changed in version 0.8: `ssl_context` can be a tuple of paths to the certificate and private key files.

    Changed in version 0.6: The `ssl_context` parameter was added.

    Changed in version 0.5: The `static_files` and `passthrough_errors` parameters were added.
- name: run_wsgi_app()
  id: test/index#werkzeug.test.run_wsgi_app
  summary: Return a tuple in the form (app_iter, status, headers) of the application output
  belongs_to: Testing WSGI Applications
  description: "`werkzeug.test.run_wsgi_app(app, environ, buffered=False)`\n\nReturn a tuple in the form (app_iter, status, headers) of the application output. This works best if you pass it an application that returns an iterator all the time.\n\nSometimes applications may use the `write()` callable returned by the `start_response` function. This tries to resolve such edge cases automatically. But if you don’t get the expected output you should set `buffered` to `True` which enforces buffering.\n\nIf passed an invalid WSGI application the behavior of this function is undefined. Never pass non-conforming WSGI applications to this function.\n\nParameters:\n\n- **app** (*WSGIApplication*) – the application to execute.\n- **buffered** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – set to `True` to enforce buffering.\n- **environ** (*WSGIEnvironment*) –\n\nReturns:\n\ntuple in the form `(app_iter, status, headers)`\n\nReturn type:\n\n[tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")\\[t.Iterable\\[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\")\\], [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\"), [Headers](../datastructures/index#werkzeug.datastructures.Headers \"werkzeug.datastructures.Headers\")\\]\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/test/](https://werkzeug.palletsprojects.com/en/3.0.x/test/)"
- name: safe_join()
  id: utils/index#werkzeug.security.safe_join
  summary: Safely join zero or more untrusted path components to a base directory to avoid escaping the base directory
  belongs_to: Utilities
  description: "`werkzeug.security.safe_join(directory, *pathnames)`\n\nSafely join zero or more untrusted path components to a base directory to avoid escaping the base directory.\n\nParameters:\n\n- **directory** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The trusted base directory.\n- **pathnames** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The untrusted path components relative to the base directory.\n\nReturns:\n\nA safe path, otherwise `None`.\n\nReturn type:\n\n[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") \\| None\n\n## Logging\n\nWerkzeug uses standard Python [`logging`](https://docs.python.org/3/library/logging.html#module-logging \"(in Python v3.11)\"). The logger is named `\"werkzeug\"`.\n\n``` python\nimport logging\nlogger = logging.getLogger(\"werkzeug\")\n```\n\nIf the logger level is not set, it will be set to [`INFO`](https://docs.python.org/3/library/logging.html#logging.INFO \"(in Python v3.11)\") on first use. If there is no handler for that level, a [`StreamHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.StreamHandler \"(in Python v3.11)\") is added.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/utils/](https://werkzeug.palletsprojects.com/en/3.0.x/utils/)"
- name: secure_filename()
  id: utils/index#werkzeug.utils.secure_filename
  summary: Pass it a filename and it will return a secure version of it
  belongs_to: Utilities
  description: |-
    `werkzeug.utils.secure_filename(filename)`

    Pass it a filename and it will return a secure version of it. This filename can then safely be stored on a regular file system and passed to [`os.path.join()`](https://docs.python.org/3/library/os.path.html#os.path.join "(in Python v3.11)"). The filename returned is an ASCII only string for maximum portability.

    On windows systems the function also makes sure that the file is not named after one of the special device files.

    ``` python
    >>> secure_filename("My cool movie.mov")
    'My_cool_movie.mov'
    >>> secure_filename("../../../etc/passwd")
    'etc_passwd'
    >>> secure_filename('i contain cool \xfcml\xe4uts.txt')
    'i_contain_cool_umlauts.txt'
    ```

    The function might return an empty filename. It’s your responsibility to ensure that the filename is unique and that you abort or generate a random filename if the function returned an empty one.

    Changelog

    New in version 0.5.

    Parameters:

    **filename** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – the filename to secure

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")

    ## URL Helpers

    Please refer to [URL Helpers](../urls/index).

    ## User Agent API
- name: send_file()
  id: utils/index#werkzeug.utils.send_file
  summary: Send the contents of a file to the client
  belongs_to: Utilities
  description: |-
    `werkzeug.utils.send_file(path_or_file, environ, mimetype=None, as_attachment=False, download_name=None, conditional=True, etag=True, last_modified=None, max_age=None, use_x_sendfile=False, response_class=None, _root_path=None)`

    Send the contents of a file to the client.

    The first argument can be a file path or a file-like object. Paths are preferred in most cases because Werkzeug can manage the file and get extra information from the path. Passing a file-like object requires that the file is opened in binary mode, and is mostly useful when building a file in memory with [`io.BytesIO`](https://docs.python.org/3/library/io.html#io.BytesIO "(in Python v3.11)").

    Never pass file paths provided by a user. The path is assumed to be trusted, so a user could craft a path to access a file you didn’t intend. Use [`send_from_directory()`](#werkzeug.utils.send_from_directory "werkzeug.utils.send_from_directory") to safely serve user-provided paths.

    If the WSGI server sets a `file_wrapper` in `environ`, it is used, otherwise Werkzeug’s built-in wrapper is used. Alternatively, if the HTTP server supports `X-Sendfile`, `use_x_sendfile=True` will tell the server to send the given path, which is much more efficient than reading it in Python.

    Parameters:

    - **path_or_file** ([os.PathLike](https://docs.python.org/3/library/os.html#os.PathLike "(in Python v3.11)") *\|* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *t.IO\[*[bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.11)")*\]*) – The path to the file to send, relative to the current working directory if a relative path is given. Alternatively, a file-like object opened in binary mode. Make sure the file pointer is seeked to the start of the data.
    - **environ** (*WSGIEnvironment*) – The WSGI environ for the current request.
    - **mimetype** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – The MIME type to send for the file. If not provided, it will try to detect it from the file name.
    - **as_attachment** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Indicate to a browser that it should offer to save the file instead of displaying it.
    - **download_name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – The default name browsers will use when saving the file. Defaults to the passed file name.
    - **conditional** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Enable conditional and range responses based on request headers. Requires passing a file path and `environ`.
    - **etag** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)") *\|* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – Calculate an ETag for the file, which requires passing a file path. Can also be a string to use instead.
    - **last_modified** (*datetime* *\|* [int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* [float](https://docs.python.org/3/library/functions.html#float "(in Python v3.11)") *\|* *None*) – The last modified time to send for the file, in seconds. If not provided, it will try to detect it from the file path.
    - **max_age** (*None* *\|* *(*[int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* *t.Callable\[\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None\],* [int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* *None\])*) – How long the client should cache the file, in seconds. If set, `Cache-Control` will be `public`, otherwise it will be `no-cache` to prefer conditional caching.
    - **use_x_sendfile** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – Set the `X-Sendfile` header to let the server to efficiently send the file. Requires support from the HTTP server. Requires passing a file path.
    - **response_class** ([type](https://docs.python.org/3/library/functions.html#type "(in Python v3.11)")*\[*[Response](../wrappers/index#werkzeug.wrappers.Response "werkzeug.wrappers.Response")*\]* *\|* *None*) – Build the response using this class. Defaults to [`Response`](../wrappers/index#werkzeug.wrappers.Response "werkzeug.wrappers.Response").
    - **\_root_path** ([os.PathLike](https://docs.python.org/3/library/os.html#os.PathLike "(in Python v3.11)") *\|* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – Do not use. For internal use only. Use [`send_from_directory()`](#werkzeug.utils.send_from_directory "werkzeug.utils.send_from_directory") to safely send files under a path.

    Return type:

    [Response](../wrappers/index#werkzeug.wrappers.Response "werkzeug.wrappers.Response")

    Changelog

    Changed in version 2.0.2: `send_file` only sets a detected `Content-Encoding` if `as_attachment` is disabled.

    New in version 2.0: Adapted from Flask’s implementation.

    Changed in version 2.0: `download_name` replaces Flask’s `attachment_filename` parameter. If `as_attachment=False`, it is passed with `Content-Disposition: inline` instead.

    Changed in version 2.0: `max_age` replaces Flask’s `cache_timeout` parameter. `conditional` is enabled and `max_age` is not set by default.

    Changed in version 2.0: `etag` replaces Flask’s `add_etags` parameter. It can be a string to use instead of generating one.

    Changed in version 2.0: If an encoding is returned when guessing `mimetype` from `download_name`, set the `Content-Encoding` header.
- name: send_from_directory()
  id: utils/index#werkzeug.utils.send_from_directory
  summary: Send a file from within a directory using send_file()
  belongs_to: Utilities
  description: |-
    `werkzeug.utils.send_from_directory(directory, path, environ, **kwargs)`

    Send a file from within a directory using [`send_file()`](#werkzeug.utils.send_file "werkzeug.utils.send_file").

    This is a secure way to serve files from a folder, such as static files or uploads. Uses [`safe_join()`](#werkzeug.security.safe_join "werkzeug.security.safe_join") to ensure the path coming from the client is not maliciously crafted to point outside the specified directory.

    If the final path does not point to an existing regular file, returns a 404 [`NotFound`](../exceptions/index#werkzeug.exceptions.NotFound "werkzeug.exceptions.NotFound") error.

    Parameters:

    - **directory** ([os.PathLike](https://docs.python.org/3/library/os.html#os.PathLike "(in Python v3.11)") *\|* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The directory that `path` must be located under. This *must not* be a value provided by the client, otherwise it becomes insecure.
    - **path** ([os.PathLike](https://docs.python.org/3/library/os.html#os.PathLike "(in Python v3.11)") *\|* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The path to the file to send, relative to `directory`. This is the part of the path provided by the client, which is checked for security.
    - **environ** (*WSGIEnvironment*) – The WSGI environ for the current request.
    - **kwargs** (*t.Any*) – Arguments to pass to [`send_file()`](#werkzeug.utils.send_file "werkzeug.utils.send_file").

    Return type:

    [Response](../wrappers/index#werkzeug.wrappers.Response "werkzeug.wrappers.Response")

    Changelog

    New in version 2.0: Adapted from Flask’s implementation.
- name: Serve Shared Static Files
  id: middleware/shared_data/index
  summary: class werkzeug.middleware.shared_data.SharedDataMiddleware(app, exports, disallow=None, cache=True, cache_timeout=43200, fallback_mimetype='application/octet-stream') A WSGI middleware which provides static content for development environments or simple server setups
  description: "# Serve Shared Static Files\n\n`class werkzeug.middleware.shared_data.SharedDataMiddleware(app, exports, disallow=None, cache=True, cache_timeout=43200, fallback_mimetype='application/octet-stream')`  \nA WSGI middleware which provides static content for development environments or simple server setups. Its usage is quite simple:\n\n``` python\nimport os\nfrom werkzeug.middleware.shared_data import SharedDataMiddleware\n\napp = SharedDataMiddleware(app, {\n    '/shared': os.path.join(os.path.dirname(__file__), 'shared')\n})\n```\n\nThe contents of the folder `./shared` will now be available on `http://example.com/shared/`. This is pretty useful during development because a standalone media server is not required. Files can also be mounted on the root folder and still continue to use the application because the shared data middleware forwards all unhandled requests to the application, even if the requests are below one of the shared folders.\n\nIf `pkg_resources` is available you can also tell the middleware to serve files from package data:\n\n``` python\napp = SharedDataMiddleware(app, {\n    '/static': ('myapplication', 'static')\n})\n```\n\nThis will then serve the `static` folder in the `myapplication` Python package.\n\nThe optional `disallow` parameter can be a list of [`fnmatch()`](https://docs.python.org/3/library/fnmatch.html#fnmatch.fnmatch \"(in Python v3.11)\") rules for files that are not accessible from the web. If `cache` is set to `False` no caching headers are sent.\n\nCurrently the middleware does not support non-ASCII filenames. If the encoding on the file system happens to match the encoding of the URI it may work but this could also be by accident. We strongly suggest using ASCII only file names for static files.\n\nThe middleware will guess the mimetype using the Python `mimetype` module. If it’s unable to figure out the charset it will fall back to `fallback_mimetype`.\n\nParameters:  \n- **app** (*WSGIApplication*) – the application to wrap. If you don’t want to wrap an application you can pass it `NotFound`.\n- **exports** ([dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* [tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]\\]* *\\|* *t.Iterable\\[*[tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* [tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]\\]\\]*) – a list or dict of exported files and folders.\n- **disallow** (*None*) – a list of [`fnmatch()`](https://docs.python.org/3/library/fnmatch.html#fnmatch.fnmatch \"(in Python v3.11)\") rules.\n- **cache** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – enable or disable caching headers.\n- **cache_timeout** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – the cache timeout in seconds for the headers.\n- **fallback_mimetype** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The fallback mimetype for unknown files.\n\nChangelog\n\nChanged in version 1.0: The default `fallback_mimetype` is `application/octet-stream`. If a filename looks like a text mimetype, the `utf-8` charset is added to it.\n\nNew in version 0.6: Added `fallback_mimetype`.\n\nChanged in version 0.5: Added `cache_timeout`.\n\n`is_allowed(filename)`  \nSubclasses can override this method to disallow the access to certain files. However by providing `disallow` in the constructor this method is overwritten.\n\nParameters:  \n**filename** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n\nReturn type:  \n[bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/middleware/shared_data/](https://werkzeug.palletsprojects.com/en/3.0.x/middleware/shared_data/)"
- name: Serving WSGI Applications
  id: serving/index
  summary: There are many ways to serve a WSGI application
  description: "# Serving WSGI Applications\n\nThere are many ways to serve a WSGI application. While you’re developing it, you usually don’t want to have a full-blown webserver like Apache up and running, but instead a simple standalone one. Because of that Werkzeug comes with a builtin development server.\n\nThe easiest way is creating a small `start-myproject.py` file that runs the application using the builtin server:\n\n``` python\nfrom werkzeug.serving import run_simple\nfrom myproject import make_app\n\napp = make_app(...)\nrun_simple('localhost', 8080, app, use_reloader=True)\n```\n\nYou can also pass it the `extra_files` keyword argument with a list of additional files (like configuration files) you want to observe.\n\n`werkzeug.serving.run_simple(hostname, port, application, use_reloader=False, use_debugger=False, use_evalex=True, extra_files=None, exclude_patterns=None, reloader_interval=1, reloader_type='auto', threaded=False, processes=1, request_handler=None, static_files=None, passthrough_errors=False, ssl_context=None)`  \nStart a development server for a WSGI application. Various optional features can be enabled.\n\nWarning\n\nDo not use the development server when deploying to production. It is intended for use only during local development. It is not designed to be particularly efficient, stable, or secure.\n\nParameters:  \n- **hostname** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The host to bind to, for example `'localhost'`. Can be a domain, IPv4 or IPv6 address, or file path starting with `unix://` for a Unix socket.\n- **port** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – The port to bind to, for example `8080`. Using `0` tells the OS to pick a random free port.\n- **application** (*WSGIApplication*) – The WSGI application to run.\n- **use_reloader** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Use a reloader process to restart the server process when files are changed.\n- **use_debugger** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Use Werkzeug’s debugger, which will show formatted tracebacks on unhandled exceptions.\n- **use_evalex** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Make the debugger interactive. A Python terminal can be opened for any frame in the traceback. Some protection is provided by requiring a PIN, but this should never be enabled on a publicly visible server.\n- **extra_files** (*t.Iterable\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]* *\\|* *None*) – The reloader will watch these files for changes in addition to Python modules. For example, watch a configuration file.\n- **exclude_patterns** (*t.Iterable\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]* *\\|* *None*) – The reloader will ignore changes to any files matching these [`fnmatch`](https://docs.python.org/3/library/fnmatch.html#module-fnmatch \"(in Python v3.11)\") patterns. For example, ignore cache files.\n- **reloader_interval** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – How often the reloader tries to check for changes.\n- **reloader_type** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The reloader to use. The `'stat'` reloader is built in, but may require significant CPU to watch files. The `'watchdog'` reloader is much more efficient but requires installing the `watchdog` package first.\n- **threaded** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Handle concurrent requests using threads. Cannot be used with `processes`.\n- **processes** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – Handle concurrent requests using up to this number of processes. Cannot be used with `threaded`.\n- **request_handler** ([type](https://docs.python.org/3/library/functions.html#type \"(in Python v3.11)\")*\\[WSGIRequestHandler\\]* *\\|* *None*) – Use a different `BaseHTTPRequestHandler` subclass to handle requests.\n- **static_files** ([dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* [tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]\\]* *\\|* *None*) – A dict mapping URL prefixes to directories to serve static files from using `SharedDataMiddleware`.\n- **passthrough_errors** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Don’t catch unhandled exceptions at the server level, let the server crash instead. If `use_debugger` is enabled, the debugger will still catch such errors.\n- **ssl_context** (*\\_TSSLContextArg* *\\|* *None*) – Configure TLS to serve over HTTPS. Can be an [`ssl.SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext \"(in Python v3.11)\") object, a `(cert_file, key_file)` tuple to create a typical context, or the string `'adhoc'` to generate a temporary self-signed certificate.\n\nReturn type:  \nNone\n\nChangelog\n\nChanged in version 2.1: Instructions are shown for dealing with an “address already in use” error.\n\nChanged in version 2.1: Running on `0.0.0.0` or `::` shows the loopback IP in addition to a real IP.\n\nChanged in version 2.1: The command-line interface was removed.\n\nChanged in version 2.0: Running on `0.0.0.0` or `::` shows a real IP address that was bound as well as a warning not to run the development server in production.\n\nChanged in version 2.0: The `exclude_patterns` parameter was added.\n\nChanged in version 0.15: Bind to a Unix socket by passing a `hostname` that starts with `unix://`.\n\nChanged in version 0.10: Improved the reloader and added support for changing the backend through the `reloader_type` parameter.\n\nChanged in version 0.9: A command-line interface was added.\n\nChanged in version 0.8: `ssl_context` can be a tuple of paths to the certificate and private key files.\n\nChanged in version 0.6: The `ssl_context` parameter was added.\n\nChanged in version 0.5: The `static_files` and `passthrough_errors` parameters were added.\n\n`werkzeug.serving.is_running_from_reloader()`  \nCheck if the server is running as a subprocess within the Werkzeug reloader.\n\nChangelog\n\nNew in version 0.10.\n\nReturn type:  \n[bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")\n\n&nbsp;\n\n`werkzeug.serving.make_ssl_devcert(base_path, host=None, cn=None)`  \nCreates an SSL key for development. This should be used instead of the `'adhoc'` key which generates a new cert on each server start. It accepts a path for where it should store the key and cert and either a host or CN. If a host is given it will use the CN `*.host/CN=host`.\n\nFor more information see [`run_simple()`](#werkzeug.serving.run_simple \"werkzeug.serving.run_simple\").\n\nChangelog\n\nNew in version 0.9.\n\nParameters:  \n- **base_path** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – the path to the certificate and key. The extension `.crt` is added for the certificate, `.key` is added for the key.\n- **host** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – the name of the host. This can be used as an alternative for the `cn`.\n- **cn** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – the `CN` to use.\n\nReturn type:  \n[tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\"), [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\\]\n\nInformation\n\nThe development server is not intended to be used on production systems. It was designed especially for development purposes and performs poorly under high load. For deployment setups have a look at the [Deploying to Production](../deployment/index) pages.\n\n## Reloader\n\nChangelog\n\nChanged in version 0.10.\n\nThe Werkzeug reloader constantly monitors modules and paths of your web application, and restarts the server if any of the observed files change.\n\nSince version 0.10, there are two backends the reloader supports: `stat` and `watchdog`.\n\n- The default `stat` backend simply checks the `mtime` of all files in a regular interval. This is sufficient for most cases, however, it is known to drain a laptop’s battery.\n- The `watchdog` backend uses filesystem events, and is much faster than `stat`. It requires the [watchdog](https://pypi.org/project/watchdog/) module to be installed. The recommended way to achieve this is to add `Werkzeug[watchdog]` to your requirements file.\n\nIf `watchdog` is installed and available it will automatically be used instead of the builtin `stat` reloader.\n\nTo switch between the backends you can use the `reloader_type` parameter of the [`run_simple()`](#werkzeug.serving.run_simple \"werkzeug.serving.run_simple\") function. `'stat'` sets it to the default stat based polling and `'watchdog'` forces it to the watchdog backend.\n\nNote\n\nSome edge cases, like modules that failed to import correctly, are not handled by the stat reloader for performance reasons. The watchdog reloader monitors such files too.\n\n## Colored Logging\n\nThe development server highlights the request logs in different colors based on the status code. On Windows, [Colorama](https://pypi.org/project/colorama/) must be installed as well to enable this.\n\n## Virtual Hosts\n\nMany web applications utilize multiple subdomains. This can be a bit tricky to simulate locally. Fortunately there is the [hosts file](https://en.wikipedia.org/wiki/Hosts_file) that can be used to assign the local computer multiple names.\n\nThis allows you to call your local computer `yourapplication.local` and `api.yourapplication.local` (or anything else) in addition to `localhost`.\n\nYou can find the hosts file on the following location:\n\n|              |                                           |\n|--------------|-------------------------------------------|\n| Windows      | `%SystemRoot%\\system32\\drivers\\etc\\hosts` |\n| Linux / OS X | `/etc/hosts`                              |\n\nYou can open the file with your favorite text editor and add a new name after `localhost`:\n\n``` python\n127.0.0.1       localhost yourapplication.local api.yourapplication.local\n```\n\nSave the changes and after a while you should be able to access the development server on these host names as well. You can use the [URL Routing](../routing/index) system to dispatch between different hosts or parse `request.host` yourself.\n\n## Shutting Down The Server\n\nIn some cases it can be useful to shut down a server after handling a request. For example, a local command line tool that needs OAuth authentication could temporarily start a server to listen for a response, record the user’s token, then stop the server.\n\nOne method to do this could be to start a server in a [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing \"(in Python v3.11)\") process, then terminate the process after a value is passed back to the parent.\n\n``` python\nimport multiprocessing\nfrom werkzeug import Request, Response, run_simple\n\ndef get_token(q: multiprocessing.Queue) -> None:\n    @Request.application\n    def app(request: Request) -> Response:\n        q.put(request.args[\"token\"])\n        return Response(\"\", 204)\n\n    run_simple(\"localhost\", 5000, app)\n\nif __name__ == \"__main__\":\n    q = multiprocessing.Queue()\n    p = multiprocessing.Process(target=get_token, args=(q,))\n    p.start()\n    print(\"waiting\")\n    token = q.get(block=True)\n    p.terminate()\n    print(token)\n```\n\nThat example uses Werkzeug’s development server, but any production server that can be started as a Python process could use the same technique and should be preferred for security. Another method could be to start a [`subprocess`](https://docs.python.org/3/library/subprocess.html#module-subprocess \"(in Python v3.11)\") process and send the value back over `stdout`.\n\n## Troubleshooting\n\nOn operating systems that support ipv6 and have it configured such as modern Linux systems, OS X 10.4 or higher as well as Windows Vista some browsers can be painfully slow if accessing your local server. The reason for this is that sometimes “localhost” is configured to be available on both ipv4 and ipv6 sockets and some browsers will try to access ipv6 first and then ipv4.\n\nAt the current time the integrated webserver does not support ipv6 and ipv4 at the same time and for better portability ipv4 is the default.\n\nIf you notice that the web browser takes ages to load the page there are two ways around this issue. If you don’t need ipv6 support you can disable the ipv6 entry in the [hosts file](https://en.wikipedia.org/wiki/Hosts_file) by removing this line:\n\n``` python\n::1             localhost\n```\n\nAlternatively you can also disable ipv6 support in your browser. For example if Firefox shows this behavior you can disable it by going to `about:config` and disabling the `network.dns.disableIPv6` key. This however is not recommended as of Werkzeug 0.6.1!\n\nStarting with Werkzeug 0.6.1, the server will now switch between ipv4 and ipv6 based on your operating system’s configuration. This means if that you disabled ipv6 support in your browser but your operating system is preferring ipv6, you will be unable to connect to your server. In that situation, you can either remove the localhost entry for `::1` or explicitly bind the hostname to an ipv4 address (`127.0.0.1`)\n\n## SSL\n\nChangelog\n\nNew in version 0.6.\n\nThe builtin server supports SSL for testing purposes. If an SSL context is provided it will be used. That means a server can either run in HTTP or HTTPS mode, but not both.\n\n### Quickstart\n\nThe easiest way to do SSL based development with Werkzeug is by using it to generate an SSL certificate and private key and storing that somewhere and to then put it there. For the certificate you need to provide the name of your server on generation or a `CN`.\n\n1.  Generate an SSL key and store it somewhere:\n\n    ``` python\n    >>> from werkzeug.serving import make_ssl_devcert\n    >>> make_ssl_devcert('/path/to/the/key', host='localhost')\n    ('/path/to/the/key.crt', '/path/to/the/key.key')\n    ```\n\n2.  Now this tuple can be passed as `ssl_context` to the [`run_simple()`](#werkzeug.serving.run_simple \"werkzeug.serving.run_simple\") method:\n\n    ``` python\n    run_simple('localhost', 4000, application,\n               ssl_context=('/path/to/the/key.crt',\n                            '/path/to/the/key.key'))\n    ```\n\nYou will have to acknowledge the certificate in your browser once then.\n\n### Loading Contexts by Hand\n\nYou can use a `ssl.SSLContext` object instead of a tuple for full control over the TLS configuration.\n\n``` python\nimport ssl\nctx = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\nctx.load_cert_chain('ssl.cert', 'ssl.key')\nrun_simple('localhost', 4000, application, ssl_context=ctx)\n```\n\n### Generating Certificates\n\nA key and certificate can be created in advance using the openssl tool instead of the [`make_ssl_devcert()`](#werkzeug.serving.make_ssl_devcert \"werkzeug.serving.make_ssl_devcert\"). This requires that you have the `openssl` command installed on your system:\n\n``` python\n$ openssl genrsa 1024 > ssl.key\n$ openssl req -new -x509 -nodes -sha1 -days 365 -key ssl.key > ssl.cert\n```\n\n### Adhoc Certificates\n\nThe easiest way to enable SSL is to start the server in adhoc-mode. In that case Werkzeug will generate an SSL certificate for you:\n\n``` python\nrun_simple('localhost', 4000, application,\n           ssl_context='adhoc')\n```\n\nThe downside of this of course is that you will have to acknowledge the certificate each time the server is reloaded. Adhoc certificates are discouraged because modern browsers do a bad job at supporting them for security reasons.\n\nThis feature requires the cryptography library to be installed.\n\n## Unix Sockets\n\nThe dev server can bind to a Unix socket instead of a TCP socket. [`run_simple()`](#werkzeug.serving.run_simple \"werkzeug.serving.run_simple\") will bind to a Unix socket if the `hostname` parameter starts with `'unix://'`.\n\n``` python\nfrom werkzeug.serving import run_simple\nrun_simple('unix://example.sock', 0, app)\n```\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/serving/](https://werkzeug.palletsprojects.com/en/3.0.x/serving/)"
- name: SharedDataMiddleware
  id: middleware/shared_data/index#werkzeug.middleware.shared_data.SharedDataMiddleware
  summary: A WSGI middleware which provides static content for development environments or simple server setups
  belongs_to: Serve Shared Static Files
  description: |-
    `class werkzeug.middleware.shared_data.SharedDataMiddleware(app, exports, disallow=None, cache=True, cache_timeout=43200, fallback_mimetype='application/octet-stream')`

    A WSGI middleware which provides static content for development environments or simple server setups. Its usage is quite simple:

    ``` python
    import os
    from werkzeug.middleware.shared_data import SharedDataMiddleware

    app = SharedDataMiddleware(app, {
        '/shared': os.path.join(os.path.dirname(__file__), 'shared')
    })
    ```

    The contents of the folder `./shared` will now be available on `http://example.com/shared/`. This is pretty useful during development because a standalone media server is not required. Files can also be mounted on the root folder and still continue to use the application because the shared data middleware forwards all unhandled requests to the application, even if the requests are below one of the shared folders.

    If `pkg_resources` is available you can also tell the middleware to serve files from package data:

    ``` python
    app = SharedDataMiddleware(app, {
        '/static': ('myapplication', 'static')
    })
    ```

    This will then serve the `static` folder in the `myapplication` Python package.

    The optional `disallow` parameter can be a list of [`fnmatch()`](https://docs.python.org/3/library/fnmatch.html#fnmatch.fnmatch "(in Python v3.11)") rules for files that are not accessible from the web. If `cache` is set to `False` no caching headers are sent.

    Currently the middleware does not support non-ASCII filenames. If the encoding on the file system happens to match the encoding of the URI it may work but this could also be by accident. We strongly suggest using ASCII only file names for static files.

    The middleware will guess the mimetype using the Python `mimetype` module. If it’s unable to figure out the charset it will fall back to `fallback_mimetype`.

    Parameters:

    - **app** (*WSGIApplication*) – the application to wrap. If you don’t want to wrap an application you can pass it `NotFound`.
    - **exports** ([dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* [tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*\]\]* *\|* *t.Iterable\[*[tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* [tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*\]\]\]*) – a list or dict of exported files and folders.
    - **disallow** (*None*) – a list of [`fnmatch()`](https://docs.python.org/3/library/fnmatch.html#fnmatch.fnmatch "(in Python v3.11)") rules.
    - **cache** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) – enable or disable caching headers.
    - **cache_timeout** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")) – the cache timeout in seconds for the headers.
    - **fallback_mimetype** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The fallback mimetype for unknown files.

    Changelog

    Changed in version 1.0: The default `fallback_mimetype` is `application/octet-stream`. If a filename looks like a text mimetype, the `utf-8` charset is added to it.

    New in version 0.6: Added `fallback_mimetype`.

    Changed in version 0.5: Added `cache_timeout`.
- name: SharedDataMiddleware.is_allowed()
  id: middleware/shared_data/index#werkzeug.middleware.shared_data.SharedDataMiddleware.is_allowed
  summary: Subclasses can override this method to disallow the access to certain files
  belongs_to: Serve Shared Static Files
  description: "`is_allowed(filename)`\n\nSubclasses can override this method to disallow the access to certain files. However by providing `disallow` in the constructor this method is overwritten.\n\nParameters:\n\n**filename** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n\nReturn type:\n\n[bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/middleware/shared_data/](https://werkzeug.palletsprojects.com/en/3.0.x/middleware/shared_data/)"
- name: StateMachineMatcher
  id: routing/index#werkzeug.routing.StateMachineMatcher
  summary: null
  belongs_to: URL Routing
  description: |-
    `class werkzeug.routing.StateMachineMatcher(merge_slashes)`

    Parameters:

    **merge_slashes** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")) –

    ## Rule Factories
- name: Subdomain
  id: routing/index#werkzeug.routing.Subdomain
  summary: All URLs provided by this factory have the subdomain set to a specific domain
  belongs_to: URL Routing
  description: |-
    `class werkzeug.routing.Subdomain(subdomain, rules)`

    All URLs provided by this factory have the subdomain set to a specific domain. For example if you want to use the subdomain for the current language this can be a good setup:

    ``` python
    url_map = Map([
        Rule('/', endpoint='#select_language'),
        Subdomain('<string(length=2):lang_code>', [
            Rule('/', endpoint='index'),
            Rule('/about', endpoint='about'),
            Rule('/help', endpoint='help')
        ])
    ])
    ```

    All the rules except for the `'#select_language'` endpoint will now listen on a two letter long subdomain that holds the language code for the current request.

    Parameters:

    - **subdomain** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **rules** (*t.Iterable\[*[RuleFactory](#werkzeug.routing.RuleFactory "werkzeug.routing.RuleFactory")*\]*) –
- name: Submount
  id: routing/index#werkzeug.routing.Submount
  summary: null
  belongs_to: URL Routing
  description: |-
    `class werkzeug.routing.Submount(path, rules)`

    Like `Subdomain` but prefixes the URL rule with a given string:

    ``` python
    url_map = Map([
        Rule('/', endpoint='index'),
        Submount('/blog', [
            Rule('/', endpoint='blog/index'),
            Rule('/entry/<entry_slug>', endpoint='blog/show')
        ])
    ])
    ```

    Now the rule `'blog/show'` matches `/blog/entry/<entry_slug>`.

    Parameters:

    - **path** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **rules** (*t.Iterable\[*[RuleFactory](#werkzeug.routing.RuleFactory "werkzeug.routing.RuleFactory")*\]*) –
- name: Tell Werkzeug it is Behind a Proxy
  id: deployment/proxy_fix/index
  summary: When using a reverse proxy, or many Python hosting platforms, the proxy will intercept and forward all external requests to the local WSGI server
  description: "# Tell Werkzeug it is Behind a Proxy\n\nWhen using a reverse proxy, or many Python hosting platforms, the proxy will intercept and forward all external requests to the local WSGI server.\n\nFrom the WSGI server and application’s perspectives, requests are now coming from the HTTP server to the local address, rather than from the remote address to the external server address.\n\nHTTP servers should set `X-Forwarded-` headers to pass on the real values to the application. The application can then be told to trust and use those values by wrapping it with the [X-Forwarded-For Proxy Fix](../../middleware/proxy_fix/index) middleware provided by Werkzeug.\n\nThis middleware should only be used if the application is actually behind a proxy, and should be configured with the number of proxies that are chained in front of it. Not all proxies set all the headers. Since incoming headers can be faked, you must set how many proxies are setting each header so the middleware knows what to trust.\n\n``` python\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\napp.wsgi_app = ProxyFix(\n    app.wsgi_app, x_for=1, x_proto=1, x_host=1, x_prefix=1\n)\n```\n\nRemember, only apply this middleware if you are behind a proxy, and set the correct number of proxies that set each header. It can be a security issue if you get this configuration wrong.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/deployment/proxy_fix/](https://werkzeug.palletsprojects.com/en/3.0.x/deployment/proxy_fix/)"
- name: test_app()
  id: wsgi/index#werkzeug.testapp.test_app
  summary: Simple test application that dumps the environment
  belongs_to: WSGI Helpers
  description: "`werkzeug.testapp.test_app(req)`\n\nSimple test application that dumps the environment. You can use it to check if Werkzeug is working properly:\n\n``` pycon\n>>> from werkzeug.serving import run_simple\n>>> from werkzeug.testapp import test_app\n>>> run_simple('localhost', 3000, test_app)\n * Running on http://localhost:3000/\n```\n\nThe application displays important information from the WSGI environment, the Python interpreter and the installed libraries.\n\nParameters:\n\n**req** ([Request](../wrappers/index#werkzeug.wrappers.Request \"werkzeug.wrappers.request.Request\")) –\n\nReturn type:\n\n[Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.response.Response\")\n\n## Bytes, Strings, and Encodings\n\nThe values in HTTP requests come in as bytes representing (or encoded to) ASCII. The WSGI specification ([**PEP 3333**](https://peps.python.org/pep-3333/)) decided to always use the `str` type to represent values. To accomplish this, the raw bytes are decoded using the ISO-8859-1 charset to produce a string.\n\nStrings in the WSGI environment are restricted to ISO-8859-1 code points. If a string read from the environment might contain characters outside that charset, it must first be decoded to bytes as ISO-8859-1, then encoded to a string using the proper charset (typically UTF-8). The reverse is done when writing to the environ. This is known as the “WSGI encoding dance”.\n\nWerkzeug provides functions to deal with this automatically so that you don’t need to be aware of the inner workings. Use the functions on this page as well as [`EnvironHeaders()`](../datastructures/index#werkzeug.datastructures.EnvironHeaders \"werkzeug.datastructures.EnvironHeaders\") to read data out of the WSGI environment.\n\nApplications should avoid manually creating or modifying a WSGI environment unless they take care of the proper encoding or decoding step. All high level interfaces in Werkzeug will apply the encoding and decoding as necessary.\n\n## Raw Request URI and Path Encoding\n\nThe `PATH_INFO` in the environ is the path value after percent-decoding. For example, the raw path `/hello%2fworld` would show up from the WSGI server to Werkzeug as `/hello/world`. This loses the information that the slash was a raw character as opposed to a path separator.\n\nThe WSGI specification ([**PEP 3333**](https://peps.python.org/pep-3333/)) does not provide a way to get the original value, so it is impossible to route some types of data in the path. The most compatible way to work around this is to send problematic data in the query string instead of the path.\n\nHowever, many WSGI servers add a non-standard environ key with the raw path. To match this behavior, Werkzeug’s test client and development server will add the raw value to both the `REQUEST_URI` and `RAW_URI` keys. If you want to route based on this value, you can use middleware to replace `PATH_INFO` in the environ before it reaches the application. However, keep in mind that these keys are non-standard and not guaranteed to be present.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/wsgi/](https://werkzeug.palletsprojects.com/en/3.0.x/wsgi/)"
- name: Testing WSGI Applications
  id: test/index
  summary: Werkzeug provides a Client to simulate requests to a WSGI application without starting a server
  description: "# Testing WSGI Applications\n\n## Test Client\n\nWerkzeug provides a [`Client`](#werkzeug.test.Client \"werkzeug.test.Client\") to simulate requests to a WSGI application without starting a server. The client has methods for making different types of requests, as well as managing cookies across requests.\n\n``` python\n>>> from werkzeug.test import Client\n>>> from werkzeug.testapp import test_app\n>>> c = Client(test_app)\n>>> response = c.get(\"/\")\n>>> response.status_code\n200\n>>> response.headers\nHeaders([('Content-Type', 'text/html; charset=utf-8'), ('Content-Length', '5211')])\n>>> response.get_data(as_text=True)\n'<!doctype html>...'\n```\n\nThe client’s request methods return instances of [`TestResponse`](#werkzeug.test.TestResponse \"werkzeug.test.TestResponse\"). This provides extra attributes and methods on top of [`Response`](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") that are useful for testing.\n\n## Request Body\n\nBy passing a dict to `data`, the client will construct a request body with file and form data. It will set the content type to `application/x-www-form-urlencoded` if there are no files, or `multipart/form-data` there are.\n\n``` python\nimport io\n\nresponse = client.post(data={\n    \"name\": \"test\",\n    \"file\": (BytesIO(\"file contents\".encode(\"utf8\")), \"test.txt\")\n})\n```\n\nPass a string, bytes, or file-like object to `data` to use that as the raw request body. In that case, you should set the content type appropriately. For example, to post YAML:\n\n``` python\nresponse = client.post(\n    data=\"a: value\\nb: 1\\n\", content_type=\"application/yaml\"\n)\n```\n\nA shortcut when testing JSON APIs is to pass a dict to `json` instead of using `data`. This will automatically call `json.dumps()` and set the content type to `application/json`. Additionally, if the app returns JSON, `response.json` will automatically call `json.loads()`.\n\n``` python\nresponse = client.post(\"/api\", json={\"a\": \"value\", \"b\": 1})\nobj = response.json()\n```\n\n## Environment Builder\n\n[`EnvironBuilder`](#werkzeug.test.EnvironBuilder \"werkzeug.test.EnvironBuilder\") is used to construct a WSGI environ dict. The test client uses this internally to prepare its requests. The arguments passed to the client request methods are the same as the builder.\n\nSometimes, it can be useful to construct a WSGI environment manually. An environ builder or dict can be passed to the test client request methods in place of other arguments to use a custom environ.\n\n``` Python\nfrom werkzeug.test import EnvironBuilder\nbuilder = EnvironBuilder(...)\n# build an environ dict\nenviron = builder.get_environ()\n# build an environ dict wrapped in a request\nrequest = builder.get_request()\n```\n\nThe test client responses make this available through [`TestResponse.request`](#werkzeug.test.TestResponse.request \"werkzeug.test.TestResponse.request\") and `response.request.environ`.\n\n## API\n\n`class werkzeug.test.Client(application, response_wrapper=None, use_cookies=True, allow_subdomain_redirects=False)`  \nSimulate sending requests to a WSGI application without running a WSGI or HTTP server.\n\nParameters:  \n- **application** (*WSGIApplication*) – The WSGI application to make requests to.\n- **response_wrapper** ([type](https://docs.python.org/3/library/functions.html#type \"(in Python v3.11)\")*\\[*[Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\")*\\]* *\\|* *None*) – A [`Response`](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") class to wrap response data with. Defaults to [`TestResponse`](#werkzeug.test.TestResponse \"werkzeug.test.TestResponse\"). If it’s not a subclass of `TestResponse`, one will be created.\n- **use_cookies** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Persist cookies from `Set-Cookie` response headers to the `Cookie` header in subsequent requests. Domain and path matching is supported, but other cookie parameters are ignored.\n- **allow_subdomain_redirects** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Allow requests to follow redirects to subdomains. Enable this if the application handles subdomains and redirects between them.\n\nChangelog\n\nChanged in version 2.3: Simplify cookie implementation, support domain and path matching.\n\nChanged in version 2.1: All data is available as properties on the returned response object. The response cannot be returned as a tuple.\n\nChanged in version 2.0: `response_wrapper` is always a subclass of :class:`TestResponse`.\n\nChanged in version 0.5: Added the `use_cookies` parameter.\n\n`get_cookie(key, domain='localhost', path='/')`  \nReturn a [`Cookie`](#werkzeug.test.Cookie \"werkzeug.test.Cookie\") if it exists. Cookies are uniquely identified by `(domain, path, key)`.\n\nParameters:  \n- **key** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The decoded form of the key for the cookie.\n- **domain** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The domain the cookie was set for.\n- **path** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The path the cookie was set for.\n\nReturn type:  \n[Cookie](#werkzeug.test.Cookie \"werkzeug.test.Cookie\") \\| None\n\nChangelog\n\nNew in version 2.3.\n\n`set_cookie(key, value='', *, domain='localhost', origin_only=True, path='/', **kwargs)`  \nSet a cookie to be sent in subsequent requests.\n\nThis is a convenience to skip making a test request to a route that would set the cookie. To test the cookie, make a test request to a route that uses the cookie value.\n\nThe client uses `domain`, `origin_only`, and `path` to determine which cookies to send with a request. It does not use other cookie parameters that browsers use, since they’re not applicable in tests.\n\nParameters:  \n- **key** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The key part of the cookie.\n- **value** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The value part of the cookie.\n- **domain** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – Send this cookie with requests that match this domain. If `origin_only` is true, it must be an exact match, otherwise it may be a suffix match.\n- **origin_only** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Whether the domain must be an exact match to the request.\n- **path** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – Send this cookie with requests that match this path either exactly or as a prefix.\n- **kwargs** ([Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")) – Passed to [`dump_cookie()`](../http/index#werkzeug.http.dump_cookie \"werkzeug.http.dump_cookie\").\n\nReturn type:  \nNone\n\nChanged in version 3.0: The parameter `server_name` is removed. The first parameter is `key`. Use the `domain` and `origin_only` parameters instead.\n\nChangelog\n\nChanged in version 2.3: The `origin_only` parameter was added.\n\nChanged in version 2.3: The `domain` parameter defaults to `localhost`.\n\n`delete_cookie(key, *, domain='localhost', path='/')`  \nDelete a cookie if it exists. Cookies are uniquely identified by `(domain, path, key)`.\n\nParameters:  \n- **key** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The decoded form of the key for the cookie.\n- **domain** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The domain the cookie was set for.\n- **path** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The path the cookie was set for.\n\nReturn type:  \nNone\n\nChanged in version 3.0: The `server_name` parameter is removed. The first parameter is `key`. Use the `domain` parameter instead.\n\nChanged in version 3.0: The `secure`, `httponly` and `samesite` parameters are removed.\n\nChangelog\n\nChanged in version 2.3: The `domain` parameter defaults to `localhost`.\n\n`open(*args, buffered=False, follow_redirects=False, **kwargs)`  \nGenerate an environ dict from the given arguments, make a request to the application using it, and return the response.\n\nParameters:  \n- **args** ([Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")) – Passed to [`EnvironBuilder`](#werkzeug.test.EnvironBuilder \"werkzeug.test.EnvironBuilder\") to create the environ for the request. If a single arg is passed, it can be an existing [`EnvironBuilder`](#werkzeug.test.EnvironBuilder \"werkzeug.test.EnvironBuilder\") or an environ dict.\n- **buffered** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Convert the iterator returned by the app into a list. If the iterator has a `close()` method, it is called automatically.\n- **follow_redirects** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Make additional requests to follow HTTP redirects until a non-redirect status is returned. [`TestResponse.history`](#werkzeug.test.TestResponse.history \"werkzeug.test.TestResponse.history\") lists the intermediate responses.\n- **kwargs** ([Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")) –\n\nReturn type:  \n[TestResponse](#werkzeug.test.TestResponse \"werkzeug.test.TestResponse\")\n\nChangelog\n\nChanged in version 2.1: Removed the `as_tuple` parameter.\n\nChanged in version 2.0: The request input stream is closed when calling `response.close()`. Input streams for redirects are automatically closed.\n\nChanged in version 0.5: If a dict is provided as file in the dict for the `data` parameter the content type has to be called `content_type` instead of `mimetype`. This change was made for consistency with `werkzeug.FileWrapper`.\n\nChanged in version 0.5: Added the `follow_redirects` parameter.\n\n`get(*args, **kw)`  \nCall [`open()`](#werkzeug.test.Client.open \"werkzeug.test.Client.open\") with `method` set to `GET`.\n\nParameters:  \n- **args** ([Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")) –\n- **kw** ([Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")) –\n\nReturn type:  \n[TestResponse](#werkzeug.test.TestResponse \"werkzeug.test.TestResponse\")\n\n`post(*args, **kw)`  \nCall [`open()`](#werkzeug.test.Client.open \"werkzeug.test.Client.open\") with `method` set to `POST`.\n\nParameters:  \n- **args** ([Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")) –\n- **kw** ([Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")) –\n\nReturn type:  \n[TestResponse](#werkzeug.test.TestResponse \"werkzeug.test.TestResponse\")\n\n`put(*args, **kw)`  \nCall [`open()`](#werkzeug.test.Client.open \"werkzeug.test.Client.open\") with `method` set to `PUT`.\n\nParameters:  \n- **args** ([Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")) –\n- **kw** ([Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")) –\n\nReturn type:  \n[TestResponse](#werkzeug.test.TestResponse \"werkzeug.test.TestResponse\")\n\n`delete(*args, **kw)`  \nCall [`open()`](#werkzeug.test.Client.open \"werkzeug.test.Client.open\") with `method` set to `DELETE`.\n\nParameters:  \n- **args** ([Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")) –\n- **kw** ([Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")) –\n\nReturn type:  \n[TestResponse](#werkzeug.test.TestResponse \"werkzeug.test.TestResponse\")\n\n`patch(*args, **kw)`  \nCall [`open()`](#werkzeug.test.Client.open \"werkzeug.test.Client.open\") with `method` set to `PATCH`.\n\nParameters:  \n- **args** ([Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")) –\n- **kw** ([Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")) –\n\nReturn type:  \n[TestResponse](#werkzeug.test.TestResponse \"werkzeug.test.TestResponse\")\n\n`options(*args, **kw)`  \nCall [`open()`](#werkzeug.test.Client.open \"werkzeug.test.Client.open\") with `method` set to `OPTIONS`.\n\nParameters:  \n- **args** ([Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")) –\n- **kw** ([Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")) –\n\nReturn type:  \n[TestResponse](#werkzeug.test.TestResponse \"werkzeug.test.TestResponse\")\n\n`head(*args, **kw)`  \nCall [`open()`](#werkzeug.test.Client.open \"werkzeug.test.Client.open\") with `method` set to `HEAD`.\n\nParameters:  \n- **args** ([Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")) –\n- **kw** ([Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")) –\n\nReturn type:  \n[TestResponse](#werkzeug.test.TestResponse \"werkzeug.test.TestResponse\")\n\n`trace(*args, **kw)`  \nCall [`open()`](#werkzeug.test.Client.open \"werkzeug.test.Client.open\") with `method` set to `TRACE`.\n\nParameters:  \n- **args** ([Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")) –\n- **kw** ([Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")) –\n\nReturn type:  \n[TestResponse](#werkzeug.test.TestResponse \"werkzeug.test.TestResponse\")\n\n`class werkzeug.test.TestResponse(response, status, headers, request, history=(), **kwargs)`  \n[`Response`](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") subclass that provides extra information about requests made with the test [`Client`](#werkzeug.test.Client \"werkzeug.test.Client\").\n\nTest client requests will always return an instance of this class. If a custom response class is passed to the client, it is subclassed along with this to support test information.\n\nIf the test request included large files, or if the application is serving a file, call `close()` to close any open files and prevent Python showing a `ResourceWarning`.\n\nChangelog\n\nChanged in version 2.2: Set the `default_mimetype` to None to prevent a mimetype being assumed if missing.\n\nChanged in version 2.1: Response instances cannot be treated as tuples.\n\nNew in version 2.0: Test client methods always return instances of this class.\n\nParameters:  \n- **response** ([Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]* *\\|* [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.11)\")*\\[*[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\")*\\]*) –\n- **status** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **headers** ([Headers](../datastructures/index#werkzeug.datastructures.Headers \"werkzeug.datastructures.headers.Headers\")) –\n- **request** ([Request](../wrappers/index#werkzeug.wrappers.Request \"werkzeug.wrappers.request.Request\")) –\n- **history** ([tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")*\\[*[werkzeug.test.TestResponse](#werkzeug.test.TestResponse \"werkzeug.test.TestResponse\")*,* *...\\]*) –\n- **kwargs** (*t.Any*) –\n\n`default_mimetype: str | None = None`  \nthe default mimetype if none is provided.\n\n`request: Request`  \nA request object with the environ used to make the request that resulted in this response.\n\n`history: tuple[werkzeug.test.TestResponse, ...]`  \nA list of intermediate responses. Populated when the test request is made with `follow_redirects` enabled.\n\n`property text: str`  \nThe response data as text. A shortcut for `response.get_data(as_text=True)`.\n\nChangelog\n\nNew in version 2.1.\n\n&nbsp;\n\n`class werkzeug.test.Cookie(key, value, decoded_key, decoded_value, expires, max_age, domain, origin_only, path, secure, http_only, same_site)`  \nA cookie key, value, and parameters.\n\nThe class itself is not a public API. Its attributes are documented for inspection with [`Client.get_cookie()`](#werkzeug.test.Client.get_cookie \"werkzeug.test.Client.get_cookie\") only.\n\nChangelog\n\nNew in version 2.3.\n\nParameters:  \n- **key** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **value** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **decoded_key** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **decoded_value** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **expires** ([datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime \"(in Python v3.11)\") *\\|* *None*) –\n- **max_age** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) –\n- **domain** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **origin_only** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) –\n- **path** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **secure** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\") *\\|* *None*) –\n- **http_only** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\") *\\|* *None*) –\n- **same_site** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n\n`key: str`  \nThe cookie key, encoded as a client would see it.\n\n`value: str`  \nThe cookie key, encoded as a client would see it.\n\n`decoded_key: str`  \nThe cookie key, decoded as the application would set and see it.\n\n`decoded_value: str`  \nThe cookie value, decoded as the application would set and see it.\n\n`expires: datetime | None`  \nThe time at which the cookie is no longer valid.\n\n`max_age: int | None`  \nThe number of seconds from when the cookie was set at which it is no longer valid.\n\n`domain: str`  \nThe domain that the cookie was set for, or the request domain if not set.\n\n`origin_only: bool`  \nWhether the cookie will be sent for exact domain matches only. This is `True` if the `Domain` parameter was not present.\n\n`path: str`  \nThe path that the cookie was set for.\n\n`secure: bool | None`  \nThe `Secure` parameter.\n\n`http_only: bool | None`  \nThe `HttpOnly` parameter.\n\n`same_site: str | None`  \nThe `SameSite` parameter.\n\n&nbsp;\n\n`class werkzeug.test.EnvironBuilder(path='/', base_url=None, query_string=None, method='GET', input_stream=None, content_type=None, content_length=None, errors_stream=None, multithread=False, multiprocess=False, run_once=False, headers=None, data=None, environ_base=None, environ_overrides=None, mimetype=None, json=None, auth=None)`  \nThis class can be used to conveniently create a WSGI environment for testing purposes. It can be used to quickly create WSGI environments or request objects from arbitrary data.\n\nThe signature of this class is also used in some other places as of Werkzeug 0.5 ([`create_environ()`](#werkzeug.test.create_environ \"werkzeug.test.create_environ\"), `Response.from_values()`, [`Client.open()`](#werkzeug.test.Client.open \"werkzeug.test.Client.open\")). Because of this most of the functionality is available through the constructor alone.\n\nFiles and regular form data can be manipulated independently of each other with the [`form`](#werkzeug.test.EnvironBuilder.form \"werkzeug.test.EnvironBuilder.form\") and [`files`](#werkzeug.test.EnvironBuilder.files \"werkzeug.test.EnvironBuilder.files\") attributes, but are passed with the same argument to the constructor: `data`.\n\n`data` can be any of these values:\n\n- a `str` or `bytes` object: The object is converted into an [`input_stream`](#werkzeug.test.EnvironBuilder.input_stream \"werkzeug.test.EnvironBuilder.input_stream\"), the [`content_length`](#werkzeug.test.EnvironBuilder.content_length \"werkzeug.test.EnvironBuilder.content_length\") is set and you have to provide a [`content_type`](#werkzeug.test.EnvironBuilder.content_type \"werkzeug.test.EnvironBuilder.content_type\").\n\n- a `dict` or `MultiDict`: The keys have to be strings. The values have to be either any of the following objects, or a list of any of the following objects:\n\n  - a `file`-like object: These are converted into `FileStorage` objects automatically.\n  - a `tuple`: The `add_file()` method is called with the key and the unpacked `tuple` items as positional arguments.\n  - a `str`: The string is set as form data for the associated key.\n\n- a file-like object: The object content is loaded in memory and then handled like a regular `str` or a `bytes`.\n\nParameters:  \n- **path** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – the path of the request. In the WSGI environment this will end up as `PATH_INFO`. If the `query_string` is not defined and there is a question mark in the `path` everything after it is used as query string.\n- **base_url** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – the base URL is a URL that is used to extract the WSGI URL scheme, host (server name + server port) and the script root (`SCRIPT_NAME`).\n- **query_string** (*t.Mapping\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]* *\\|* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – an optional string or dict with URL parameters.\n- **method** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – the HTTP method to use, defaults to `GET`.\n- **input_stream** (*t.IO\\[*[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\")*\\]* *\\|* *None*) – an optional input stream. Do not specify this and `data`. As soon as an input stream is set you can’t modify [`args`](#werkzeug.test.EnvironBuilder.args \"werkzeug.test.EnvironBuilder.args\") and [`files`](#werkzeug.test.EnvironBuilder.files \"werkzeug.test.EnvironBuilder.files\") unless you set the [`input_stream`](#werkzeug.test.EnvironBuilder.input_stream \"werkzeug.test.EnvironBuilder.input_stream\") to `None` again.\n- **content_type** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – The content type for the request. As of 0.5 you don’t have to provide this when specifying files and form data via `data`.\n- **content_length** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) – The content length for the request. You don’t have to specify this when providing data via `data`.\n- **errors_stream** (*t.IO\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]* *\\|* *None*) – an optional error stream that is used for `wsgi.errors`. Defaults to `stderr`.\n- **multithread** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – controls `wsgi.multithread`. Defaults to `False`.\n- **multiprocess** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – controls `wsgi.multiprocess`. Defaults to `False`.\n- **run_once** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – controls `wsgi.run_once`. Defaults to `False`.\n- **headers** ([Headers](../datastructures/index#werkzeug.datastructures.Headers \"werkzeug.datastructures.Headers\") *\\|* *t.Iterable\\[*[tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]\\]* *\\|* *None*) – an optional list or `Headers` object of headers.\n- **data** (*None* *\\|* *(t.IO\\[*[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\")*\\]* *\\|* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\") *\\|* *t.Mapping\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* *t.Any\\])*) – a string or dict of form data or a file-object. See explanation above.\n- **json** (*t.Mapping\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* *t.Any\\]* *\\|* *None*) – An object to be serialized and assigned to `data`. Defaults the content type to `\"application/json\"`. Serialized with the function assigned to [`json_dumps`](#werkzeug.test.EnvironBuilder.json_dumps \"werkzeug.test.EnvironBuilder.json_dumps\").\n- **environ_base** (*t.Mapping\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* *t.Any\\]* *\\|* *None*) – an optional dict of environment defaults.\n- **environ_overrides** (*t.Mapping\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* *t.Any\\]* *\\|* *None*) – an optional dict of environment overrides.\n- **auth** ([Authorization](../datastructures/index#werkzeug.datastructures.Authorization \"werkzeug.datastructures.Authorization\") *\\|* [tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]* *\\|* *None*) – An authorization object to use for the `Authorization` header value. A `(username, password)` tuple is a shortcut for `Basic` authorization.\n- **mimetype** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n\nChanged in version 3.0: The `charset` parameter was removed.\n\nChangelog\n\nChanged in version 2.1: `CONTENT_TYPE` and `CONTENT_LENGTH` are not duplicated as header keys in the environ.\n\nChanged in version 2.0: `REQUEST_URI` and `RAW_URI` is the full raw URI including the query string, not only the path.\n\nChanged in version 2.0: The default [`request_class`](#werkzeug.test.EnvironBuilder.request_class \"werkzeug.test.EnvironBuilder.request_class\") is `Request` instead of `BaseRequest`.\n\nNew in version 2.0: Added the `auth` parameter.\n\nNew in version 0.15: The `json` param and [`json_dumps()`](#werkzeug.test.EnvironBuilder.json_dumps \"werkzeug.test.EnvironBuilder.json_dumps\") method.\n\nNew in version 0.15: The environ has keys `REQUEST_URI` and `RAW_URI` containing the path before percent-decoding. This is not part of the WSGI PEP, but many WSGI servers include it.\n\nChanged in version 0.6: `path` and `base_url` can now be unicode strings that are encoded with `iri_to_uri()`.\n\n`server_protocol = 'HTTP/1.1'`  \nthe server protocol to use. defaults to HTTP/1.1\n\n`wsgi_version = (1, 0)`  \nthe wsgi version to use. defaults to (1, 0)\n\n`request_class`  \nThe default request class used by [`get_request()`](#werkzeug.test.EnvironBuilder.get_request \"werkzeug.test.EnvironBuilder.get_request\").\n\nalias of [`Request`](../wrappers/index#werkzeug.wrappers.Request \"werkzeug.wrappers.request.Request\")\n\n`static json_dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)`  \nThe serialization function used when `json` is passed.\n\n`classmethod from_environ(environ, **kwargs)`  \nTurn an environ dict back into a builder. Any extra kwargs override the args extracted from the environ.\n\nChangelog\n\nChanged in version 2.0: Path and query values are passed through the WSGI decoding dance to avoid double encoding.\n\nNew in version 0.15.\n\nParameters:  \n- **environ** (*WSGIEnvironment*) –\n- **kwargs** (*t.Any*) –\n\nReturn type:  \n[EnvironBuilder](#werkzeug.test.EnvironBuilder \"werkzeug.test.EnvironBuilder\")\n\n`property base_url: str`  \nThe base URL is used to extract the URL scheme, host name, port, and root path.\n\n`property content_type: str | None`  \nThe content type for the request. Reflected from and to the `headers`. Do not set if you set [`files`](#werkzeug.test.EnvironBuilder.files \"werkzeug.test.EnvironBuilder.files\") or [`form`](#werkzeug.test.EnvironBuilder.form \"werkzeug.test.EnvironBuilder.form\") for auto detection.\n\n`property mimetype: str | None`  \nThe mimetype (content type without charset etc.)\n\nChangelog\n\nNew in version 0.14.\n\n`property mimetype_params: Mapping[str, str]`  \nThe mimetype parameters as dict. For example if the content type is `text/html; charset=utf-8` the params would be `{'charset': 'utf-8'}`.\n\nChangelog\n\nNew in version 0.14.\n\n`property content_length: int | None`  \nThe content length as integer. Reflected from and to the `headers`. Do not set if you set [`files`](#werkzeug.test.EnvironBuilder.files \"werkzeug.test.EnvironBuilder.files\") or [`form`](#werkzeug.test.EnvironBuilder.form \"werkzeug.test.EnvironBuilder.form\") for auto detection.\n\n`property form: MultiDict`  \nA `MultiDict` of form values.\n\n`property files: FileMultiDict`  \nA `FileMultiDict` of uploaded files. Use `add_file()` to add new files.\n\n`property input_stream: IO[bytes] | None`  \nAn optional input stream. This is mutually exclusive with setting [`form`](#werkzeug.test.EnvironBuilder.form \"werkzeug.test.EnvironBuilder.form\") and [`files`](#werkzeug.test.EnvironBuilder.files \"werkzeug.test.EnvironBuilder.files\"), setting it will clear those. Do not provide this if the method is not `POST` or another method that has a body.\n\n`property query_string: str`  \nThe query string. If you set this to a string [`args`](#werkzeug.test.EnvironBuilder.args \"werkzeug.test.EnvironBuilder.args\") will no longer be available.\n\n`property args: MultiDict`  \nThe URL arguments as `MultiDict`.\n\n`property server_name: str`  \nThe server name (read-only, use `host` to set)\n\n`property server_port: int`  \nThe server port as integer (read-only, use `host` to set)\n\n`close()`  \nCloses all files. If you put real `file` objects into the [`files`](#werkzeug.test.EnvironBuilder.files \"werkzeug.test.EnvironBuilder.files\") dict you can call this method to automatically close them all in one go.\n\nReturn type:  \nNone\n\n`get_environ()`  \nReturn the built environ.\n\nChangelog\n\nChanged in version 0.15: The content type and length headers are set based on input stream detection. Previously this only set the WSGI keys.\n\nReturn type:  \nWSGIEnvironment\n\n`get_request(cls=None)`  \nReturns a request with the data. If the request class is not specified [`request_class`](#werkzeug.test.EnvironBuilder.request_class \"werkzeug.test.EnvironBuilder.request_class\") is used.\n\nParameters:  \n**cls** ([type](https://docs.python.org/3/library/functions.html#type \"(in Python v3.11)\")*\\[*[werkzeug.wrappers.request.Request](../wrappers/index#werkzeug.wrappers.Request \"werkzeug.wrappers.request.Request\")*\\]* *\\|* *None*) – The request wrapper to use.\n\nReturn type:  \n[Request](../wrappers/index#werkzeug.wrappers.Request \"werkzeug.wrappers.request.Request\")\n\n&nbsp;\n\n`werkzeug.test.create_environ(*args, **kwargs)`  \nCreate a new WSGI environ dict based on the values passed. The first parameter should be the path of the request which defaults to ‘/’. The second one can either be an absolute path (in that case the host is localhost:80) or a full path to the request with scheme, netloc port and the path to the script.\n\nThis accepts the same arguments as the [`EnvironBuilder`](#werkzeug.test.EnvironBuilder \"werkzeug.test.EnvironBuilder\") constructor.\n\nChangelog\n\nChanged in version 0.5: This function is now a thin wrapper over [`EnvironBuilder`](#werkzeug.test.EnvironBuilder \"werkzeug.test.EnvironBuilder\") which was added in 0.5. The `headers`, `environ_base`, `environ_overrides` and `charset` parameters were added.\n\nParameters:  \n- **args** (*t.Any*) –\n- **kwargs** (*t.Any*) –\n\nReturn type:  \nWSGIEnvironment\n\n&nbsp;\n\n`werkzeug.test.run_wsgi_app(app, environ, buffered=False)`  \nReturn a tuple in the form (app_iter, status, headers) of the application output. This works best if you pass it an application that returns an iterator all the time.\n\nSometimes applications may use the `write()` callable returned by the `start_response` function. This tries to resolve such edge cases automatically. But if you don’t get the expected output you should set `buffered` to `True` which enforces buffering.\n\nIf passed an invalid WSGI application the behavior of this function is undefined. Never pass non-conforming WSGI applications to this function.\n\nParameters:  \n- **app** (*WSGIApplication*) – the application to execute.\n- **buffered** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – set to `True` to enforce buffering.\n- **environ** (*WSGIEnvironment*) –\n\nReturns:  \ntuple in the form `(app_iter, status, headers)`\n\nReturn type:  \n[tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")\\[t.Iterable\\[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\")\\], [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\"), [Headers](../datastructures/index#werkzeug.datastructures.Headers \"werkzeug.datastructures.Headers\")\\]\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/test/](https://werkzeug.palletsprojects.com/en/3.0.x/test/)"
- name: TestResponse
  id: test/index#werkzeug.test.TestResponse
  summary: Response subclass that provides extra information about requests made with the test Client
  belongs_to: Testing WSGI Applications
  description: |-
    `class werkzeug.test.TestResponse(response, status, headers, request, history=(), **kwargs)`

    [`Response`](../wrappers/index#werkzeug.wrappers.Response "werkzeug.wrappers.Response") subclass that provides extra information about requests made with the test [`Client`](#werkzeug.test.Client "werkzeug.test.Client").

    Test client requests will always return an instance of this class. If a custom response class is passed to the client, it is subclassed along with this to support test information.

    If the test request included large files, or if the application is serving a file, call `close()` to close any open files and prevent Python showing a `ResourceWarning`.

    Changelog

    Changed in version 2.2: Set the `default_mimetype` to None to prevent a mimetype being assumed if missing.

    Changed in version 2.1: Response instances cannot be treated as tuples.

    New in version 2.0: Test client methods always return instances of this class.

    Parameters:

    - **response** ([Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable "(in Python v3.11)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*\]* *\|* [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable "(in Python v3.11)")*\[*[bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.11)")*\]*) –
    - **status** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **headers** ([Headers](../datastructures/index#werkzeug.datastructures.Headers "werkzeug.datastructures.headers.Headers")) –
    - **request** ([Request](../wrappers/index#werkzeug.wrappers.Request "werkzeug.wrappers.request.Request")) –
    - **history** ([tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")*\[*[werkzeug.test.TestResponse](#werkzeug.test.TestResponse "werkzeug.test.TestResponse")*,* *...\]*) –
    - **kwargs** (*t.Any*) –
- name: TestResponse.default_mimetype
  id: test/index#werkzeug.test.TestResponse.default_mimetype
  summary: the default mimetype if none is provided
  belongs_to: Testing WSGI Applications
  description: |-
    `default_mimetype: str | None = None`

    the default mimetype if none is provided.
- name: TestResponse.history
  id: test/index#werkzeug.test.TestResponse.history
  summary: A list of intermediate responses
  belongs_to: Testing WSGI Applications
  description: |-
    `history: tuple[werkzeug.test.TestResponse, ...]`

    A list of intermediate responses. Populated when the test request is made with `follow_redirects` enabled.

    `property text: str`

    The response data as text. A shortcut for `response.get_data(as_text=True)`.

    Changelog

    New in version 2.1.
- name: TestResponse.request
  id: test/index#werkzeug.test.TestResponse.request
  summary: A request object with the environ used to make the request that resulted in this response
  belongs_to: Testing WSGI Applications
  description: |-
    `request: Request`

    A request object with the environ used to make the request that resulted in this response.
- name: TypeConversionDict
  id: datastructures/index#werkzeug.datastructures.TypeConversionDict
  summary: Works like a regular dict but the get() method can perform type conversions
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.TypeConversionDict`

    Works like a regular dict but the [`get()`](#werkzeug.datastructures.TypeConversionDict.get "werkzeug.datastructures.TypeConversionDict.get") method can perform type conversions. [`MultiDict`](#werkzeug.datastructures.MultiDict "werkzeug.datastructures.MultiDict") and [`CombinedMultiDict`](#werkzeug.datastructures.CombinedMultiDict "werkzeug.datastructures.CombinedMultiDict") are subclasses of this class and provide the same feature.

    Changelog

    New in version 0.5.
- name: TypeConversionDict.get()
  id: datastructures/index#werkzeug.datastructures.TypeConversionDict.get
  summary: Return the default value if the requested data doesn’t exist
  belongs_to: Data Structures
  description: |-
    `get(key, default=None, type=None)`

    Return the default value if the requested data doesn’t exist. If `type` is provided and is a callable it should convert the value, return it or raise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "(in Python v3.11)") if that is not possible. In this case the function will return the default as if the value was not found:

    ``` python
    >>> d = TypeConversionDict(foo='42', bar='blub')
    >>> d.get('foo', type=int)
    42
    >>> d.get('bar', -1, type=int)
    -1
    ```

    Parameters:

    - **key** – The key to be looked up.
    - **default** – The default value to be returned if the key can’t be looked up. If not further specified `None` is returned.
    - **type** – A callable that is used to cast the value in the [`MultiDict`](#werkzeug.datastructures.MultiDict "werkzeug.datastructures.MultiDict"). If a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "(in Python v3.11)") is raised by this callable the default value is returned.
- name: UnicodeConverter
  id: routing/index#werkzeug.routing.UnicodeConverter
  summary: This converter is the default converter and accepts any string but only one path segment
  belongs_to: URL Routing
  description: |-
    `class werkzeug.routing.UnicodeConverter(map, minlength=1, maxlength=None, length=None)`

    This converter is the default converter and accepts any string but only one path segment. Thus the string can not include a slash.

    This is the default validator.

    Example:

    ``` python
    Rule('/pages/<page>'),
    Rule('/<string(length=2):lang_code>')
    ```

    Parameters:

    - **map** ([Map](#werkzeug.routing.Map "werkzeug.routing.Map")) – the [`Map`](#werkzeug.routing.Map "werkzeug.routing.Map").
    - **minlength** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")) – the minimum length of the string. Must be greater or equal 1.
    - **maxlength** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* *None*) – the maximum length of the string.
    - **length** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)") *\|* *None*) – the exact length of the string.
- name: unquote_etag()
  id: http/index#werkzeug.http.unquote_etag
  summary: etag (str | None) – the etag identifier to unquote
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.unquote_etag(etag)`

    Unquote a single etag:

    ``` python
    >>> unquote_etag('W/"bar"')
    ('bar', True)
    >>> unquote_etag('"bar"')
    ('bar', False)
    ```

    Parameters:

    **etag** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – the etag identifier to unquote.

    Returns:

    a `(etag, weak)` tuple.

    Return type:

    [tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")\[[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)"), [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")\] \| [tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.11)")\[None, None\]
- name: unquote_header_value()
  id: http/index#werkzeug.http.unquote_header_value
  summary: Remove double quotes and decode slash-escaped " and \ characters in a header value
  belongs_to: HTTP Utilities
  description: |-
    `werkzeug.http.unquote_header_value(value)`

    Remove double quotes and decode slash-escaped `"` and `\` characters in a header value.

    This is the reverse of [`quote_header_value()`](#werkzeug.http.quote_header_value "werkzeug.http.quote_header_value").

    Parameters:

    **value** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The header value to unquote.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")

    Changed in version 3.0: The `is_filename` parameter is removed.
- name: uri_to_iri()
  id: urls/index#werkzeug.urls.uri_to_iri
  summary: Convert a URI to an IRI
  belongs_to: URL Helpers
  description: "`werkzeug.urls.uri_to_iri(uri)`\n\nConvert a URI to an IRI. All valid UTF-8 characters are unquoted, leaving all reserved and invalid characters quoted. If the URL has a domain, it is decoded from Punycode.\n\n``` python\n>>> uri_to_iri(\"http://xn--n3h.net/p%C3%A5th?q=%C3%A8ry%DF\")\n'http://\\u2603.net/p\\xe5th?q=\\xe8ry%DF'\n```\n\nParameters:\n\n**uri** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The URI to convert.\n\nReturn type:\n\n[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\n\nChanged in version 3.0: Passing a tuple or bytes, and the `charset` and `errors` parameters, are removed.\n\nChangelog\n\nChanged in version 2.3: Which characters remain quoted is specific to each part of the URL.\n\nChanged in version 0.15: All reserved and invalid characters remain quoted. Previously, only some reserved characters were preserved, and invalid bytes were replaced instead of left quoted.\n\nNew in version 0.6.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/urls/](https://werkzeug.palletsprojects.com/en/3.0.x/urls/)"
- name: URL Helpers
  id: urls/index
  summary: werkzeug.urls.iri_to_uri(iri) Convert an IRI to a URI
  description: "# URL Helpers\n\n`werkzeug.urls.iri_to_uri(iri)`  \nConvert an IRI to a URI. All non-ASCII and unsafe characters are quoted. If the URL has a domain, it is encoded to Punycode.\n\n``` python\n>>> iri_to_uri('http://\\u2603.net/p\\xe5th?q=\\xe8ry%DF')\n'http://xn--n3h.net/p%C3%A5th?q=%C3%A8ry%DF'\n```\n\nParameters:  \n**iri** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The IRI to convert.\n\nReturn type:  \n[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\n\nChanged in version 3.0: Passing a tuple or bytes, the `charset` and `errors` parameters, and the `safe_conversion` parameter, are removed.\n\nChangelog\n\nChanged in version 2.3: Which characters remain unquoted is specific to each part of the URL.\n\nChanged in version 0.15: All reserved characters remain unquoted. Previously, only some reserved characters were left unquoted.\n\nChanged in version 0.9.6: The `safe_conversion` parameter was added.\n\nNew in version 0.6.\n\n`werkzeug.urls.uri_to_iri(uri)`  \nConvert a URI to an IRI. All valid UTF-8 characters are unquoted, leaving all reserved and invalid characters quoted. If the URL has a domain, it is decoded from Punycode.\n\n``` python\n>>> uri_to_iri(\"http://xn--n3h.net/p%C3%A5th?q=%C3%A8ry%DF\")\n'http://\\u2603.net/p\\xe5th?q=\\xe8ry%DF'\n```\n\nParameters:  \n**uri** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The URI to convert.\n\nReturn type:  \n[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\n\nChanged in version 3.0: Passing a tuple or bytes, and the `charset` and `errors` parameters, are removed.\n\nChangelog\n\nChanged in version 2.3: Which characters remain quoted is specific to each part of the URL.\n\nChanged in version 0.15: All reserved and invalid characters remain quoted. Previously, only some reserved characters were preserved, and invalid bytes were replaced instead of left quoted.\n\nNew in version 0.6.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/urls/](https://werkzeug.palletsprojects.com/en/3.0.x/urls/)"
- name: URL Routing
  id: routing/index
  summary: When it comes to combining multiple controller or view functions (however you want to call them), you need a dispatcher
  description: "# URL Routing\n\nWhen it comes to combining multiple controller or view functions (however you want to call them), you need a dispatcher. A simple way would be applying regular expression tests on `PATH_INFO` and call registered callback functions that return the value.\n\nWerkzeug provides a much more powerful system, similar to [Routes](https://routes.readthedocs.io/en/latest/). All the objects mentioned on this page must be imported from [`werkzeug.routing`](#module-werkzeug.routing \"werkzeug.routing\"), not from `werkzeug`!\n\n## Quickstart\n\nHere is a simple example which could be the URL definition for a blog:\n\n``` python\nfrom werkzeug.routing import Map, Rule, NotFound, RequestRedirect\n\nurl_map = Map([\n    Rule('/', endpoint='blog/index'),\n    Rule('/<int:year>/', endpoint='blog/archive'),\n    Rule('/<int:year>/<int:month>/', endpoint='blog/archive'),\n    Rule('/<int:year>/<int:month>/<int:day>/', endpoint='blog/archive'),\n    Rule('/<int:year>/<int:month>/<int:day>/<slug>',\n         endpoint='blog/show_post'),\n    Rule('/about', endpoint='blog/about_me'),\n    Rule('/feeds/', endpoint='blog/feeds'),\n    Rule('/feeds/<feed_name>.rss', endpoint='blog/show_feed')\n])\n\ndef application(environ, start_response):\n    urls = url_map.bind_to_environ(environ)\n    try:\n        endpoint, args = urls.match()\n    except HTTPException, e:\n        return e(environ, start_response)\n    start_response('200 OK', [('Content-Type', 'text/plain')])\n    return [f'Rule points to {endpoint!r} with arguments {args!r}'.encode()]\n```\n\nSo what does that do? First of all we create a new [`Map`](#werkzeug.routing.Map \"werkzeug.routing.Map\") which stores a bunch of URL rules. Then we pass it a list of [`Rule`](#werkzeug.routing.Rule \"werkzeug.routing.Rule\") objects.\n\nEach [`Rule`](#werkzeug.routing.Rule \"werkzeug.routing.Rule\") object is instantiated with a string that represents a rule and an endpoint which will be the alias for what view the rule represents. Multiple rules can have the same endpoint, but should have different arguments to allow URL construction.\n\nThe format for the URL rules is straightforward, but explained in detail below.\n\nInside the WSGI application we bind the url_map to the current request which will return a new [`MapAdapter`](#werkzeug.routing.MapAdapter \"werkzeug.routing.MapAdapter\"). This url_map adapter can then be used to match or build domains for the current request.\n\nThe [`MapAdapter.match()`](#werkzeug.routing.MapAdapter.match \"werkzeug.routing.MapAdapter.match\") method can then either return a tuple in the form `(endpoint, args)` or raise one of the three exceptions [`NotFound`](../exceptions/index#werkzeug.exceptions.NotFound \"werkzeug.exceptions.NotFound\"), [`MethodNotAllowed`](../exceptions/index#werkzeug.exceptions.MethodNotAllowed \"werkzeug.exceptions.MethodNotAllowed\"), or `RequestRedirect`. For more details about those exceptions have a look at the documentation of the [`MapAdapter.match()`](#werkzeug.routing.MapAdapter.match \"werkzeug.routing.MapAdapter.match\") method.\n\n## Rule Format\n\nRule strings are URL paths with placeholders for variable parts in the format `<converter(arguments):name>`. `converter` and `arguments` (with parentheses) are optional. If no converter is given, the `default` converter is used (`string` by default). The available converters are discussed below.\n\nRules that end with a slash are “branches”, others are “leaves”. If `strict_slashes` is enabled (the default), visiting a branch URL without a trailing slash will redirect to the URL with a slash appended.\n\nMany HTTP servers merge consecutive slashes into one when receiving requests. If `merge_slashes` is enabled (the default), rules will merge slashes in non-variable parts when matching and building. Visiting a URL with consecutive slashes will redirect to the URL with slashes merged. If you want to disable `merge_slashes` for a [`Rule`](#werkzeug.routing.Rule \"werkzeug.routing.Rule\") or [`Map`](#werkzeug.routing.Map \"werkzeug.routing.Map\"), you’ll also need to configure your web server appropriately.\n\n## Built-in Converters\n\nConverters for common types of URL variables are built-in. The available converters can be overridden or extended through [`Map.converters`](#werkzeug.routing.Map.converters \"werkzeug.routing.Map.converters\").\n\n`class werkzeug.routing.UnicodeConverter(map, minlength=1, maxlength=None, length=None)`  \nThis converter is the default converter and accepts any string but only one path segment. Thus the string can not include a slash.\n\nThis is the default validator.\n\nExample:\n\n``` python\nRule('/pages/<page>'),\nRule('/<string(length=2):lang_code>')\n```\n\nParameters:  \n- **map** ([Map](#werkzeug.routing.Map \"werkzeug.routing.Map\")) – the [`Map`](#werkzeug.routing.Map \"werkzeug.routing.Map\").\n- **minlength** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – the minimum length of the string. Must be greater or equal 1.\n- **maxlength** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) – the maximum length of the string.\n- **length** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) – the exact length of the string.\n\n`class werkzeug.routing.PathConverter(map, *args, **kwargs)`  \nLike the default [`UnicodeConverter`](#werkzeug.routing.UnicodeConverter \"werkzeug.routing.UnicodeConverter\"), but it also matches slashes. This is useful for wikis and similar applications:\n\n``` python\nRule('/<path:wikipage>')\nRule('/<path:wikipage>/edit')\n```\n\nParameters:  \n- **map** ([Map](#werkzeug.routing.Map \"werkzeug.routing.Map\")) – the [`Map`](#werkzeug.routing.Map \"werkzeug.routing.Map\").\n- **args** (*t.Any*) –\n- **kwargs** (*t.Any*) –\n\n&nbsp;\n\n`class werkzeug.routing.AnyConverter(map, *items)`  \nMatches one of the items provided. Items can either be Python identifiers or strings:\n\n``` python\nRule('/<any(about, help, imprint, class, \"foo,bar\"):page_name>')\n```\n\nParameters:  \n- **map** ([Map](#werkzeug.routing.Map \"werkzeug.routing.Map\")) – the [`Map`](#werkzeug.routing.Map \"werkzeug.routing.Map\").\n- **items** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – this function accepts the possible items as positional arguments.\n\nChangelog\n\nChanged in version 2.2: Value is validated when building a URL.\n\n&nbsp;\n\n`class werkzeug.routing.IntegerConverter(map, fixed_digits=0, min=None, max=None, signed=False)`  \nThis converter only accepts integer values:\n\n``` python\nRule(\"/page/<int:page>\")\n```\n\nBy default it only accepts unsigned, positive values. The `signed` parameter will enable signed, negative values.\n\n``` python\nRule(\"/page/<int(signed=True):page>\")\n```\n\nParameters:  \n- **map** ([Map](#werkzeug.routing.Map \"werkzeug.routing.Map\")) – The [`Map`](#werkzeug.routing.Map \"werkzeug.routing.Map\").\n- **fixed_digits** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – The number of fixed digits in the URL. If you set this to `4` for example, the rule will only match if the URL looks like `/0001/`. The default is variable length.\n- **min** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) – The minimal value.\n- **max** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) – The maximal value.\n- **signed** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Allow signed (negative) values.\n\nChangelog\n\nNew in version 0.15: The `signed` parameter.\n\n&nbsp;\n\n`class werkzeug.routing.FloatConverter(map, min=None, max=None, signed=False)`  \nThis converter only accepts floating point values:\n\n``` python\nRule(\"/probability/<float:probability>\")\n```\n\nBy default it only accepts unsigned, positive values. The `signed` parameter will enable signed, negative values.\n\n``` python\nRule(\"/offset/<float(signed=True):offset>\")\n```\n\nParameters:  \n- **map** ([Map](#werkzeug.routing.Map \"werkzeug.routing.Map\")) – The [`Map`](#werkzeug.routing.Map \"werkzeug.routing.Map\").\n- **min** ([float](https://docs.python.org/3/library/functions.html#float \"(in Python v3.11)\") *\\|* *None*) – The minimal value.\n- **max** ([float](https://docs.python.org/3/library/functions.html#float \"(in Python v3.11)\") *\\|* *None*) – The maximal value.\n- **signed** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Allow signed (negative) values.\n\nChangelog\n\nNew in version 0.15: The `signed` parameter.\n\n&nbsp;\n\n`class werkzeug.routing.UUIDConverter(map, *args, **kwargs)`  \nThis converter only accepts UUID strings:\n\n``` python\nRule('/object/<uuid:identifier>')\n```\n\nChangelog\n\nNew in version 0.10.\n\nParameters:  \n- **map** ([Map](#werkzeug.routing.Map \"werkzeug.routing.Map\")) – the [`Map`](#werkzeug.routing.Map \"werkzeug.routing.Map\").\n- **args** (*t.Any*) –\n- **kwargs** (*t.Any*) –\n\n## Maps, Rules and Adapters\n\n`class werkzeug.routing.Map(rules=None, default_subdomain='', strict_slashes=True, merge_slashes=True, redirect_defaults=True, converters=None, sort_parameters=False, sort_key=None, host_matching=False)`  \nThe map class stores all the URL rules and some configuration parameters. Some of the configuration values are only stored on the `Map` instance since those affect all rules, others are just defaults and can be overridden for each rule. Note that you have to specify all arguments besides the `rules` as keyword arguments!\n\nParameters:  \n- **rules** (*t.Iterable\\[*[RuleFactory](#werkzeug.routing.RuleFactory \"werkzeug.routing.RuleFactory\")*\\]* *\\|* *None*) – sequence of url rules for this map.\n- **default_subdomain** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The default subdomain for rules without a subdomain defined.\n- **strict_slashes** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – If a rule ends with a slash but the matched URL does not, redirect to the URL with a trailing slash.\n- **merge_slashes** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Merge consecutive slashes when matching or building URLs. Matches will redirect to the normalized URL. Slashes in variable parts are not merged.\n- **redirect_defaults** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – This will redirect to the default rule if it wasn’t visited that way. This helps creating unique URLs.\n- **converters** (*t.Mapping\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* [type](https://docs.python.org/3/library/functions.html#type \"(in Python v3.11)\")*\\[BaseConverter\\]\\]* *\\|* *None*) – A dict of converters that adds additional converters to the list of converters. If you redefine one converter this will override the original one.\n- **sort_parameters** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – If set to `True` the url parameters are sorted. See `url_encode` for more details.\n- **sort_key** (*t.Callable\\[\\[t.Any\\],* *t.Any\\]* *\\|* *None*) – The sort key function for `url_encode`.\n- **host_matching** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – if set to `True` it enables the host matching feature and disables the subdomain one. If enabled the `host` parameter to rules is used instead of the `subdomain` one.\n\nChanged in version 3.0: The `charset` and `encoding_errors` parameters were removed.\n\nChangelog\n\nChanged in version 1.0: If `url_scheme` is `ws` or `wss`, only WebSocket rules will match.\n\nChanged in version 1.0: The `merge_slashes` parameter was added.\n\nChanged in version 0.7: The `encoding_errors` and `host_matching` parameters were added.\n\nChanged in version 0.5: The `sort_parameters` and `sort_key` paramters were added.\n\n`converters`  \nThe dictionary of converters. This can be modified after the class was created, but will only affect rules added after the modification. If the rules are defined with the list passed to the class, the `converters` parameter to the constructor has to be used instead.\n\n`add(rulefactory)`  \nAdd a new rule or factory to the map and bind it. Requires that the rule is not bound to another map.\n\nParameters:  \n**rulefactory** ([RuleFactory](#werkzeug.routing.RuleFactory \"werkzeug.routing.RuleFactory\")) – a [`Rule`](#werkzeug.routing.Rule \"werkzeug.routing.Rule\") or [`RuleFactory`](#werkzeug.routing.RuleFactory \"werkzeug.routing.RuleFactory\")\n\nReturn type:  \nNone\n\n`bind(server_name, script_name=None, subdomain=None, url_scheme='http', default_method='GET', path_info=None, query_args=None)`  \nReturn a new [`MapAdapter`](#werkzeug.routing.MapAdapter \"werkzeug.routing.MapAdapter\") with the details specified to the call. Note that `script_name` will default to `'/'` if not further specified or `None`. The `server_name` at least is a requirement because the HTTP RFC requires absolute URLs for redirects and so all redirect exceptions raised by Werkzeug will contain the full canonical URL.\n\nIf no path_info is passed to `match()` it will use the default path info passed to bind. While this doesn’t really make sense for manual bind calls, it’s useful if you bind a map to a WSGI environment which already contains the path info.\n\n`subdomain` will default to the `default_subdomain` for this map if no defined. If there is no `default_subdomain` you cannot use the subdomain feature.\n\nChangelog\n\nChanged in version 1.0: If `url_scheme` is `ws` or `wss`, only WebSocket rules will match.\n\nChanged in version 0.15: `path_info` defaults to `'/'` if `None`.\n\nChanged in version 0.8: `query_args` can be a string.\n\nChanged in version 0.7: Added `query_args`.\n\nParameters:  \n- **server_name** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **script_name** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **subdomain** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **url_scheme** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **default_method** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **path_info** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **query_args** ([Mapping](https://docs.python.org/3/library/typing.html#typing.Mapping \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* [Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")*\\]* *\\|* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n\nReturn type:  \n[MapAdapter](#werkzeug.routing.MapAdapter \"werkzeug.routing.map.MapAdapter\")\n\n`bind_to_environ(environ, server_name=None, subdomain=None)`  \nLike [`bind()`](#werkzeug.routing.Map.bind \"werkzeug.routing.Map.bind\") but you can pass it an WSGI environment and it will fetch the information from that dictionary. Note that because of limitations in the protocol there is no way to get the current subdomain and real `server_name` from the environment. If you don’t provide it, Werkzeug will use `SERVER_NAME` and `SERVER_PORT` (or `HTTP_HOST` if provided) as used `server_name` with disabled subdomain feature.\n\nIf `subdomain` is `None` but an environment and a server name is provided it will calculate the current subdomain automatically. Example: `server_name` is `'example.com'` and the `SERVER_NAME` in the wsgi `environ` is `'staging.dev.example.com'` the calculated subdomain will be `'staging.dev'`.\n\nIf the object passed as environ has an environ attribute, the value of this attribute is used instead. This allows you to pass request objects. Additionally `PATH_INFO` added as a default of the [`MapAdapter`](#werkzeug.routing.MapAdapter \"werkzeug.routing.MapAdapter\") so that you don’t have to pass the path info to the match method.\n\nChangelog\n\nChanged in version 1.0.0: If the passed server name specifies port 443, it will match if the incoming scheme is `https` without a port.\n\nChanged in version 1.0.0: A warning is shown when the passed server name does not match the incoming WSGI server name.\n\nChanged in version 0.8: This will no longer raise a ValueError when an unexpected server name was passed.\n\nChanged in version 0.5: previously this method accepted a bogus `calculate_subdomain` parameter that did not have any effect. It was removed because of that.\n\nParameters:  \n- **environ** (*WSGIEnvironment* *\\|* [Request](../wrappers/index#werkzeug.wrappers.Request \"werkzeug.wrappers.Request\")) – a WSGI environment.\n- **server_name** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – an optional server name hint (see above).\n- **subdomain** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – optionally the current subdomain (see above).\n\nReturn type:  \n[MapAdapter](#werkzeug.routing.MapAdapter \"werkzeug.routing.MapAdapter\")\n\n`default_converters = {'any': <class 'werkzeug.routing.converters.AnyConverter'>, 'default': <class 'werkzeug.routing.converters.UnicodeConverter'>, 'float': <class 'werkzeug.routing.converters.FloatConverter'>, 'int': <class 'werkzeug.routing.converters.IntegerConverter'>, 'path': <class 'werkzeug.routing.converters.PathConverter'>, 'string': <class 'werkzeug.routing.converters.UnicodeConverter'>, 'uuid': <class 'werkzeug.routing.converters.UUIDConverter'>}`  \nA dict of default converters to be used.\n\n`is_endpoint_expecting(endpoint, *arguments)`  \nIterate over all rules and check if the endpoint expects the arguments provided. This is for example useful if you have some URLs that expect a language code and others that do not and you want to wrap the builder a bit so that the current language code is automatically added if not provided but endpoints expect it.\n\nParameters:  \n- **endpoint** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – the endpoint to check.\n- **arguments** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – this function accepts one or more arguments as positional arguments. Each one of them is checked.\n\nReturn type:  \n[bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")\n\n`iter_rules(endpoint=None)`  \nIterate over all rules or the rules of an endpoint.\n\nParameters:  \n**endpoint** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – if provided only the rules for that endpoint are returned.\n\nReturns:  \nan iterator\n\nReturn type:  \n[Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.11)\")\\[[Rule](#werkzeug.routing.Rule \"werkzeug.routing.rules.Rule\")\\]\n\n`lock_class()`  \nThe type of lock to use when updating.\n\nChangelog\n\nNew in version 1.0.\n\n`update()`  \nCalled before matching and building to keep the compiled rules in the correct order after things changed.\n\nReturn type:  \nNone\n\n&nbsp;\n\n`class werkzeug.routing.MapAdapter(map, server_name, script_name, subdomain, url_scheme, path_info, default_method, query_args=None)`  \nReturned by [`Map.bind()`](#werkzeug.routing.Map.bind \"werkzeug.routing.Map.bind\") or [`Map.bind_to_environ()`](#werkzeug.routing.Map.bind_to_environ \"werkzeug.routing.Map.bind_to_environ\") and does the URL matching and building based on runtime information.\n\nParameters:  \n- **map** ([Map](#werkzeug.routing.Map \"werkzeug.routing.Map\")) –\n- **server_name** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **script_name** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **subdomain** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **url_scheme** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **path_info** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **default_method** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **query_args** (*t.Mapping\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* *t.Any\\]* *\\|* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n\n`allowed_methods(path_info=None)`  \nReturns the valid methods that match for a given path.\n\nChangelog\n\nNew in version 0.7.\n\nParameters:  \n**path_info** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n\nReturn type:  \n[Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.11)\")\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\\]\n\n`build(endpoint, values=None, method=None, force_external=False, append_unknown=True, url_scheme=None)`  \nBuilding URLs works pretty much the other way round. Instead of `match` you call `build` and pass it the endpoint and a dict of arguments for the placeholders.\n\nThe `build` function also accepts an argument called `force_external` which, if you set it to `True` will force external URLs. Per default external URLs (include the server name) will only be used if the target URL is on a different subdomain.\n\n``` python\n>>> m = Map([\n...     Rule('/', endpoint='index'),\n...     Rule('/downloads/', endpoint='downloads/index'),\n...     Rule('/downloads/<int:id>', endpoint='downloads/show')\n... ])\n>>> urls = m.bind(\"example.com\", \"/\")\n>>> urls.build(\"index\", {})\n'/'\n>>> urls.build(\"downloads/show\", {'id': 42})\n'/downloads/42'\n>>> urls.build(\"downloads/show\", {'id': 42}, force_external=True)\n'http://example.com/downloads/42'\n```\n\nBecause URLs cannot contain non ASCII data you will always get bytes back. Non ASCII characters are urlencoded with the charset defined on the map instance.\n\nAdditional values are converted to strings and appended to the URL as URL querystring parameters:\n\n``` python\n>>> urls.build(\"index\", {'q': 'My Searchstring'})\n'/?q=My+Searchstring'\n```\n\nWhen processing those additional values, lists are furthermore interpreted as multiple values (as per [`werkzeug.datastructures.MultiDict`](../datastructures/index#werkzeug.datastructures.MultiDict \"werkzeug.datastructures.MultiDict\")):\n\n``` python\n>>> urls.build(\"index\", {'q': ['a', 'b', 'c']})\n'/?q=a&q=b&q=c'\n```\n\nPassing a `MultiDict` will also add multiple values:\n\n``` python\n>>> urls.build(\"index\", MultiDict((('p', 'z'), ('q', 'a'), ('q', 'b'))))\n'/?p=z&q=a&q=b'\n```\n\nIf a rule does not exist when building a `BuildError` exception is raised.\n\nThe build method accepts an argument called `method` which allows you to specify the method you want to have an URL built for if you have different methods for the same endpoint specified.\n\nParameters:  \n- **endpoint** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – the endpoint of the URL to build.\n- **values** ([Mapping](https://docs.python.org/3/library/typing.html#typing.Mapping \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* [Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")*\\]* *\\|* *None*) – the values for the URL to build. Unhandled values are appended to the URL as query parameters.\n- **method** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – the HTTP method for the rule if there are different URLs for different methods on the same endpoint.\n- **force_external** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – enforce full canonical external URLs. If the URL scheme is not provided, this will generate a protocol-relative URL.\n- **append_unknown** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – unknown parameters are appended to the generated URL as query string argument. Disable this if you want the builder to ignore those.\n- **url_scheme** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – Scheme to use in place of the bound `url_scheme`.\n\nReturn type:  \n[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\n\nChangelog\n\nChanged in version 2.0: Added the `url_scheme` parameter.\n\nNew in version 0.6: Added the `append_unknown` parameter.\n\n`dispatch(view_func, path_info=None, method=None, catch_http_exceptions=False)`  \nDoes the complete dispatching process. `view_func` is called with the endpoint and a dict with the values for the view. It should look up the view function, call it, and return a response object or WSGI application. http exceptions are not caught by default so that applications can display nicer error messages by just catching them by hand. If you want to stick with the default error messages you can pass it `catch_http_exceptions=True` and it will catch the http exceptions.\n\nHere a small example for the dispatch usage:\n\n``` python\nfrom werkzeug.wrappers import Request, Response\nfrom werkzeug.wsgi import responder\nfrom werkzeug.routing import Map, Rule\n\ndef on_index(request):\n    return Response('Hello from the index')\n\nurl_map = Map([Rule('/', endpoint='index')])\nviews = {'index': on_index}\n\n@responder\ndef application(environ, start_response):\n    request = Request(environ)\n    urls = url_map.bind_to_environ(environ)\n    return urls.dispatch(lambda e, v: views[e](request, **v),\n                         catch_http_exceptions=True)\n```\n\nKeep in mind that this method might return exception objects, too, so use `Response.force_type` to get a response object.\n\nParameters:  \n- **view_func** (*t.Callable\\[\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* *t.Mapping\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* *t.Any\\]\\],* *WSGIApplication\\]*) – a function that is called with the endpoint as first argument and the value dict as second. Has to dispatch to the actual view function with this information. (see above)\n- **path_info** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – the path info to use for matching. Overrides the path info specified on binding.\n- **method** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – the HTTP method used for matching. Overrides the method specified on binding.\n- **catch_http_exceptions** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – set to `True` to catch any of the werkzeug `HTTPException`s.\n\nReturn type:  \nWSGIApplication\n\n`get_host(domain_part)`  \nFigures out the full host name for the given domain part. The domain part is a subdomain in case host matching is disabled or a full host name.\n\nParameters:  \n**domain_part** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n\nReturn type:  \n[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\n\n`make_alias_redirect_url(path, endpoint, values, method, query_args)`  \nInternally called to make an alias redirect URL.\n\nParameters:  \n- **path** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **endpoint** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **values** ([Mapping](https://docs.python.org/3/library/typing.html#typing.Mapping \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* [Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")*\\]*) –\n- **method** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **query_args** ([Mapping](https://docs.python.org/3/library/typing.html#typing.Mapping \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* [Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")*\\]* *\\|* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n\nReturn type:  \n[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\n\n`match(path_info: str | None = None, method: str | None = None, return_rule: Literal[False] = False, query_args: Mapping[str, Any] | str | None = None, websocket: bool | None = None) → tuple[str, Mapping[str, Any]]`  \nmatch(*path_info:[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\\|[None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.11)\")=None*, *method:[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\\|[None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.11)\")=None*, *return_rule:[Literal](https://docs.python.org/3/library/typing.html#typing.Literal \"(in Python v3.11)\")\\[True\\]=True*, *query_args:[Mapping](https://docs.python.org/3/library/typing.html#typing.Mapping \"(in Python v3.11)\")\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\"),[Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")\\]\\|[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\\|[None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.11)\")=None*, *websocket:[bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")\\|[None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.11)\")=None*) → [tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.11)\")\\[[werkzeug.routing.rules.Rule](#werkzeug.routing.Rule \"werkzeug.routing.rules.Rule\"),[Mapping](https://docs.python.org/3/library/typing.html#typing.Mapping \"(in Python v3.11)\")\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\"),[Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")\\]\\]  \nThe usage is simple: you just pass the match method the current path info as well as the method (which defaults to `GET`). The following things can then happen:\n\n- you receive a `NotFound` exception that indicates that no URL is matching. A `NotFound` exception is also a WSGI application you can call to get a default page not found page (happens to be the same object as `werkzeug.exceptions.NotFound`)\n- you receive a `MethodNotAllowed` exception that indicates that there is a match for this URL but not for the current request method. This is useful for RESTful applications.\n- you receive a `RequestRedirect` exception with a `new_url` attribute. This exception is used to notify you about a request Werkzeug requests from your WSGI application. This is for example the case if you request `/foo` although the correct URL is `/foo/` You can use the `RequestRedirect` instance as response-like object similar to all other subclasses of `HTTPException`.\n- you receive a `WebsocketMismatch` exception if the only match is a WebSocket rule but the bind is an HTTP request, or if the match is an HTTP rule but the bind is a WebSocket request.\n- you get a tuple in the form `(endpoint, arguments)` if there is a match (unless `return_rule` is True, in which case you get a tuple in the form `(rule, arguments)`)\n\nIf the path info is not passed to the match method the default path info of the map is used (defaults to the root URL if not defined explicitly).\n\nAll of the exceptions raised are subclasses of `HTTPException` so they can be used as WSGI responses. They will all render generic error or redirect pages.\n\nHere is a small example for matching:\n\n``` python\n>>> m = Map([\n...     Rule('/', endpoint='index'),\n...     Rule('/downloads/', endpoint='downloads/index'),\n...     Rule('/downloads/<int:id>', endpoint='downloads/show')\n... ])\n>>> urls = m.bind(\"example.com\", \"/\")\n>>> urls.match(\"/\", \"GET\")\n('index', {})\n>>> urls.match(\"/downloads/42\")\n('downloads/show', {'id': 42})\n```\n\nAnd here is what happens on redirect and missing URLs:\n\n``` python\n>>> urls.match(\"/downloads\")\nTraceback (most recent call last):\n  ...\nRequestRedirect: http://example.com/downloads/\n>>> urls.match(\"/missing\")\nTraceback (most recent call last):\n  ...\nNotFound: 404 Not Found\n```\n\nParameters:  \n- **path_info** – the path info to use for matching. Overrides the path info specified on binding.\n- **method** – the HTTP method used for matching. Overrides the method specified on binding.\n- **return_rule** – return the rule that matched instead of just the endpoint (defaults to `False`).\n- **query_args** – optional query arguments that are used for automatic redirects as string or dictionary. It’s currently not possible to use the query arguments for URL matching.\n- **websocket** – Match WebSocket instead of HTTP requests. A websocket request has a `ws` or `wss` `url_scheme`. This overrides that detection.\n\nChangelog\n\nNew in version 1.0: Added `websocket`.\n\nChanged in version 0.8: `query_args` can be a string.\n\nNew in version 0.7: Added `query_args`.\n\nNew in version 0.6: Added `return_rule`.\n\n`test(path_info=None, method=None)`  \nTest if a rule would match. Works like `match` but returns `True` if the URL matches, or `False` if it does not exist.\n\nParameters:  \n- **path_info** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – the path info to use for matching. Overrides the path info specified on binding.\n- **method** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – the HTTP method used for matching. Overrides the method specified on binding.\n\nReturn type:  \n[bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")\n\n&nbsp;\n\n`class werkzeug.routing.Rule(string, defaults=None, subdomain=None, methods=None, build_only=False, endpoint=None, strict_slashes=None, merge_slashes=None, redirect_to=None, alias=False, host=None, websocket=False)`  \nA Rule represents one URL pattern. There are some options for `Rule` that change the way it behaves and are passed to the `Rule` constructor. Note that besides the rule-string all arguments *must* be keyword arguments in order to not break the application on Werkzeug upgrades.\n\n`string`  \nRule strings basically are just normal URL paths with placeholders in the format `<converter(arguments):name>` where the converter and the arguments are optional. If no converter is defined the `default` converter is used which means `string` in the normal configuration.\n\nURL rules that end with a slash are branch URLs, others are leaves. If you have `strict_slashes` enabled (which is the default), all branch URLs that are matched without a trailing slash will trigger a redirect to the same URL with the missing slash appended.\n\nThe converters are defined on the `Map`.\n\n`endpoint`  \nThe endpoint for this rule. This can be anything. A reference to a function, a string, a number etc. The preferred way is using a string because the endpoint is used for URL generation.\n\n`defaults`  \nAn optional dict with defaults for other rules with the same endpoint. This is a bit tricky but useful if you want to have unique URLs:\n\n``` python\nurl_map = Map([\n    Rule('/all/', defaults={'page': 1}, endpoint='all_entries'),\n    Rule('/all/page/<int:page>', endpoint='all_entries')\n])\n```\n\nIf a user now visits `http://example.com/all/page/1` they will be redirected to `http://example.com/all/`. If `redirect_defaults` is disabled on the `Map` instance this will only affect the URL generation.\n\n`subdomain`  \nThe subdomain rule string for this rule. If not specified the rule only matches for the `default_subdomain` of the map. If the map is not bound to a subdomain this feature is disabled.\n\nCan be useful if you want to have user profiles on different subdomains and all subdomains are forwarded to your application:\n\n``` python\nurl_map = Map([\n    Rule('/', subdomain='<username>', endpoint='user/homepage'),\n    Rule('/stats', subdomain='<username>', endpoint='user/stats')\n])\n```\n\n`methods`  \nA sequence of http methods this rule applies to. If not specified, all methods are allowed. For example this can be useful if you want different endpoints for `POST` and `GET`. If methods are defined and the path matches but the method matched against is not in this list or in the list of another rule for that path the error raised is of the type `MethodNotAllowed` rather than `NotFound`. If `GET` is present in the list of methods and `HEAD` is not, `HEAD` is added automatically.\n\n`strict_slashes`  \nOverride the `Map` setting for `strict_slashes` only for this rule. If not specified the `Map` setting is used.\n\n`merge_slashes`  \nOverride `Map.merge_slashes` for this rule.\n\n`build_only`  \nSet this to True and the rule will never match but will create a URL that can be build. This is useful if you have resources on a subdomain or folder that are not handled by the WSGI application (like static data)\n\n`redirect_to`  \nIf given this must be either a string or callable. In case of a callable it’s called with the url adapter that triggered the match and the values of the URL as keyword arguments and has to return the target for the redirect, otherwise it has to be a string with placeholders in rule syntax:\n\n``` python\ndef foo_with_slug(adapter, id):\n    # ask the database for the slug for the old id.  this of\n    # course has nothing to do with werkzeug.\n    return f'foo/{Foo.get_slug_for_id(id)}'\n\nurl_map = Map([\n    Rule('/foo/<slug>', endpoint='foo'),\n    Rule('/some/old/url/<slug>', redirect_to='foo/<slug>'),\n    Rule('/other/old/url/<int:id>', redirect_to=foo_with_slug)\n])\n```\n\nWhen the rule is matched the routing system will raise a `RequestRedirect` exception with the target for the redirect.\n\nKeep in mind that the URL will be joined against the URL root of the script so don’t use a leading slash on the target URL unless you really mean root of that domain.\n\n`alias`  \nIf enabled this rule serves as an alias for another rule with the same endpoint and arguments.\n\n`host`  \nIf provided and the URL map has host matching enabled this can be used to provide a match rule for the whole host. This also means that the subdomain feature is disabled.\n\n`websocket`  \nIf `True`, this rule is only matches for WebSocket (`ws://`, `wss://`) requests. By default, rules will only match for HTTP requests.\n\nChangelog\n\nChanged in version 2.1: Percent-encoded newlines (`%0a`), which are decoded by WSGI servers, are considered when routing instead of terminating the match early.\n\nNew in version 1.0: Added `websocket`.\n\nNew in version 1.0: Added `merge_slashes`.\n\nNew in version 0.7: Added `alias` and `host`.\n\nChanged in version 0.6.1: `HEAD` is added to `methods` if `GET` is present.\n\nParameters:  \n- **string** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **defaults** (*t.Mapping\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*,* *t.Any\\]* *\\|* *None*) –\n- **subdomain** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **methods** (*t.Iterable\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]* *\\|* *None*) –\n- **build_only** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) –\n- **endpoint** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **strict_slashes** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\") *\\|* *None*) –\n- **merge_slashes** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\") *\\|* *None*) –\n- **redirect_to** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *t.Callable\\[...,* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]* *\\|* *None*) –\n- **alias** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) –\n- **host** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **websocket** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) –\n\n`empty()`  \nReturn an unbound copy of this rule.\n\nThis can be useful if want to reuse an already bound URL for another map. See `get_empty_kwargs` to override what keyword arguments are provided to the new copy.\n\nReturn type:  \n[Rule](#werkzeug.routing.Rule \"werkzeug.routing.rules.Rule\")\n\n## Matchers\n\n`class werkzeug.routing.StateMachineMatcher(merge_slashes)`  \nParameters:  \n**merge_slashes** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) –\n\n## Rule Factories\n\n`class werkzeug.routing.RuleFactory`  \nAs soon as you have more complex URL setups it’s a good idea to use rule factories to avoid repetitive tasks. Some of them are builtin, others can be added by subclassing `RuleFactory` and overriding `get_rules`.\n\n`get_rules(map)`  \nSubclasses of `RuleFactory` have to override this method and return an iterable of rules.\n\nParameters:  \n**map** ([Map](#werkzeug.routing.Map \"werkzeug.routing.Map\")) –\n\nReturn type:  \nt.Iterable\\[[Rule](#werkzeug.routing.Rule \"werkzeug.routing.Rule\")\\]\n\n&nbsp;\n\n`class werkzeug.routing.Subdomain(subdomain, rules)`  \nAll URLs provided by this factory have the subdomain set to a specific domain. For example if you want to use the subdomain for the current language this can be a good setup:\n\n``` python\nurl_map = Map([\n    Rule('/', endpoint='#select_language'),\n    Subdomain('<string(length=2):lang_code>', [\n        Rule('/', endpoint='index'),\n        Rule('/about', endpoint='about'),\n        Rule('/help', endpoint='help')\n    ])\n])\n```\n\nAll the rules except for the `'#select_language'` endpoint will now listen on a two letter long subdomain that holds the language code for the current request.\n\nParameters:  \n- **subdomain** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **rules** (*t.Iterable\\[*[RuleFactory](#werkzeug.routing.RuleFactory \"werkzeug.routing.RuleFactory\")*\\]*) –\n\n&nbsp;\n\n`class werkzeug.routing.Submount(path, rules)`  \nLike `Subdomain` but prefixes the URL rule with a given string:\n\n``` python\nurl_map = Map([\n    Rule('/', endpoint='index'),\n    Submount('/blog', [\n        Rule('/', endpoint='blog/index'),\n        Rule('/entry/<entry_slug>', endpoint='blog/show')\n    ])\n])\n```\n\nNow the rule `'blog/show'` matches `/blog/entry/<entry_slug>`.\n\nParameters:  \n- **path** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **rules** (*t.Iterable\\[*[RuleFactory](#werkzeug.routing.RuleFactory \"werkzeug.routing.RuleFactory\")*\\]*) –\n\n&nbsp;\n\n`class werkzeug.routing.EndpointPrefix(prefix, rules)`  \nPrefixes all endpoints (which must be strings for this factory) with another string. This can be useful for sub applications:\n\n``` python\nurl_map = Map([\n    Rule('/', endpoint='index'),\n    EndpointPrefix('blog/', [Submount('/blog', [\n        Rule('/', endpoint='index'),\n        Rule('/entry/<entry_slug>', endpoint='show')\n    ])])\n])\n```\n\nParameters:  \n- **prefix** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **rules** (*t.Iterable\\[*[RuleFactory](#werkzeug.routing.RuleFactory \"werkzeug.routing.RuleFactory\")*\\]*) –\n\n## Rule Templates\n\n`class werkzeug.routing.RuleTemplate(rules)`  \nReturns copies of the rules wrapped and expands string templates in the endpoint, rule, defaults or subdomain sections.\n\nHere a small example for such a rule template:\n\n``` python\nfrom werkzeug.routing import Map, Rule, RuleTemplate\n\nresource = RuleTemplate([\n    Rule('/$name/', endpoint='$name.list'),\n    Rule('/$name/<int:id>', endpoint='$name.show')\n])\n\nurl_map = Map([resource(name='user'), resource(name='page')])\n```\n\nWhen a rule template is called the keyword arguments are used to replace the placeholders in all the string parameters.\n\nParameters:  \n**rules** (*t.Iterable\\[*[Rule](#werkzeug.routing.Rule \"werkzeug.routing.Rule\")*\\]*) –\n\n## Custom Converters\n\nYou can add custom converters that add behaviors not provided by the built-in converters. To make a custom converter, subclass `BaseConverter` then pass the new class to the [`Map`](#werkzeug.routing.Map \"werkzeug.routing.Map\") `converters` parameter, or add it to [`url_map.converters`](#werkzeug.routing.Map.converters \"werkzeug.routing.Map.converters\").\n\nThe converter should have a `regex` attribute with a regular expression to match with. If the converter can take arguments in a URL rule, it should accept them in its `__init__` method. The entire regex expression will be matched as a group and used as the value for conversion.\n\nIf a custom converter can match a forward slash, `/`, it should have the attribute `part_isolating` set to `False`. This will ensure that rules using the custom converter are correctly matched.\n\nIt can implement a `to_python` method to convert the matched string to some other object. This can also do extra validation that wasn’t possible with the `regex` attribute, and should raise a `werkzeug.routing.ValidationError` in that case. Raising any other errors will cause a 500 error.\n\nIt can implement a `to_url` method to convert a Python object to a string when building a URL. Any error raised here will be converted to a `werkzeug.routing.BuildError` and eventually cause a 500 error.\n\nThis example implements a `BooleanConverter` that will match the strings `\"yes\"`, `\"no\"`, and `\"maybe\"`, returning a random value for `\"maybe\"`.\n\n``` python\nfrom random import randrange\nfrom werkzeug.routing import BaseConverter, ValidationError\n\nclass BooleanConverter(BaseConverter):\n    regex = r\"(?:yes|no|maybe)\"\n\n    def __init__(self, url_map, maybe=False):\n        super().__init__(url_map)\n        self.maybe = maybe\n\n    def to_python(self, value):\n        if value == \"maybe\":\n            if self.maybe:\n                return not randrange(2)\n            raise ValidationError\n        return value == 'yes'\n\n    def to_url(self, value):\n        return \"yes\" if value else \"no\"\n\nfrom werkzeug.routing import Map, Rule\n\nurl_map = Map([\n    Rule(\"/vote/<bool:werkzeug_rocks>\", endpoint=\"vote\"),\n    Rule(\"/guess/<bool(maybe=True):foo>\", endpoint=\"guess\")\n], converters={'bool': BooleanConverter})\n```\n\nIf you want to change the default converter, assign a different converter to the `\"default\"` key.\n\n## Host Matching\n\nChangelog\n\nNew in version 0.7.\n\nStarting with Werkzeug 0.7 it’s also possible to do matching on the whole host names instead of just the subdomain. To enable this feature you need to pass `host_matching=True` to the [`Map`](#werkzeug.routing.Map \"werkzeug.routing.Map\") constructor and provide the `host` argument to all routes:\n\n``` python\nurl_map = Map([\n    Rule('/', endpoint='www_index', host='www.example.com'),\n    Rule('/', endpoint='help_index', host='help.example.com')\n], host_matching=True)\n```\n\nVariable parts are of course also possible in the host section:\n\n``` python\nurl_map = Map([\n    Rule('/', endpoint='www_index', host='www.example.com'),\n    Rule('/', endpoint='user_index', host='<user>.example.com')\n], host_matching=True)\n```\n\n## WebSockets\n\nChangelog\n\nNew in version 1.0.\n\nIf a [`Rule`](#werkzeug.routing.Rule \"werkzeug.routing.Rule\") is created with `websocket=True`, it will only match if the [`Map`](#werkzeug.routing.Map \"werkzeug.routing.Map\") is bound to a request with a `url_scheme` of `ws` or `wss`.\n\nNote\n\nWerkzeug has no further WebSocket support beyond routing. This functionality is mostly of use to ASGI projects.\n\n``` python\nurl_map = Map([\n    Rule(\"/ws\", endpoint=\"comm\", websocket=True),\n])\nadapter = map.bind(\"example.org\", \"/ws\", url_scheme=\"ws\")\nassert adapter.match() == (\"comm\", {})\n```\n\nIf the only match is a WebSocket rule and the bind is HTTP (or the only match is HTTP and the bind is WebSocket) a `WebsocketMismatch` (derives from [`BadRequest`](../exceptions/index#werkzeug.exceptions.BadRequest \"werkzeug.exceptions.BadRequest\")) exception is raised.\n\nAs WebSocket URLs have a different scheme, rules are always built with a scheme and host, `force_external=True` is implied.\n\n``` python\nurl = adapter.build(\"comm\")\nassert url == \"ws://example.org/ws\"\n```\n\n## State Machine Matching\n\nThe default matching algorithm uses a state machine that transitions between parts of the request path to find a match. To understand how this works consider this rule:\n\n``` python\n/resource/<id>\n```\n\nFirstly this rule is decomposed into two `RulePart`. The first is a static part with a content equal to `resource`, the second is dynamic and requires a regex match to `[^/]+`.\n\nA state machine is then created with an initial state that represents the rule’s first `/`. This initial state has a single, static transition to the next state which represents the rule’s second `/`. This second state has a single dynamic transition to the final state which includes the rule.\n\nTo match a path the matcher starts and the initial state and follows transitions that work. Clearly a trial path of `/resource/2` has the parts `\"\"`, `resource`, and `2` which match the transitions and hence a rule will match. Whereas `/other/2` will not match as there is no transition for the `other` part from the initial state.\n\nThe only diversion from this rule is if a `RulePart` is not part-isolating i.e. it will match `/`. In this case the `RulePart` is considered final and represents a transition that must include all the subsequent parts of the trial path.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/routing/](https://werkzeug.palletsprojects.com/en/3.0.x/routing/)"
- name: UserAgent
  id: utils/index#werkzeug.user_agent.UserAgent
  summary: Represents a parsed user agent header value
  belongs_to: Utilities
  description: |-
    `class werkzeug.user_agent.UserAgent(string)`

    Represents a parsed user agent header value.

    The default implementation does no parsing, only the [`string`](#werkzeug.user_agent.UserAgent.string "werkzeug.user_agent.UserAgent.string") attribute is set. A subclass may parse the string to set the common attributes or expose other information. Set [`werkzeug.wrappers.Request.user_agent_class`](../wrappers/index#werkzeug.wrappers.Request.user_agent_class "werkzeug.wrappers.Request.user_agent_class") to use a subclass.

    Parameters:

    **string** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) – The header value to parse.

    Changelog

    New in version 2.0: This replaces the previous `useragents` module, but does not provide a built-in parser.
- name: UserAgent.browser
  id: utils/index#werkzeug.user_agent.UserAgent.browser
  summary: The browser name, if it could be parsed from the string
  belongs_to: Utilities
  description: |-
    `browser: str | None = None`

    The browser name, if it could be parsed from the string.
- name: UserAgent.language
  id: utils/index#werkzeug.user_agent.UserAgent.language
  summary: The browser language, if it could be parsed from the string
  belongs_to: Utilities
  description: |-
    `language: str | None = None`

    The browser language, if it could be parsed from the string.
- name: UserAgent.platform
  id: utils/index#werkzeug.user_agent.UserAgent.platform
  summary: The OS name, if it could be parsed from the string
  belongs_to: Utilities
  description: |-
    `platform: str | None = None`

    The OS name, if it could be parsed from the string.
- name: UserAgent.string
  id: utils/index#werkzeug.user_agent.UserAgent.string
  summary: The original header value
  belongs_to: Utilities
  description: |-
    `string: str`

    The original header value.
- name: UserAgent.to_header()
  id: utils/index#werkzeug.user_agent.UserAgent.to_header
  summary: Convert to a header value
  belongs_to: Utilities
  description: |-
    `to_header()`

    Convert to a header value.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")

    ## Security Helpers
- name: UserAgent.version
  id: utils/index#werkzeug.user_agent.UserAgent.version
  summary: The browser version, if it could be parsed from the string
  belongs_to: Utilities
  description: |-
    `version: str | None = None`

    The browser version, if it could be parsed from the string.
- name: Utilities
  id: utils/index
  summary: Various utility functions shipped with Werkzeug
  description: "# Utilities\n\nVarious utility functions shipped with Werkzeug.\n\n## General Helpers\n\n`class werkzeug.utils.cached_property(fget, name=None, doc=None)`  \nA `property()` that is only evaluated once. Subsequent access returns the cached value. Setting the property sets the cached value. Deleting the property clears the cached value, accessing it again will evaluate it again.\n\n``` python\nclass Example:\n    @cached_property\n    def value(self):\n        # calculate something important here\n        return 42\n\ne = Example()\ne.value  # evaluates\ne.value  # uses cache\ne.value = 16  # sets cache\ndel e.value  # clears cache\n```\n\nIf the class defines `__slots__`, it must add `_cache_{name}` as a slot. Alternatively, it can add `__dict__`, but that’s usually not desirable.\n\nChangelog\n\nChanged in version 2.1: Works with `__slots__`.\n\nChanged in version 2.0: `del obj.name` clears the cached value.\n\nParameters:  \n- **fget** (*t.Callable\\[\\[t.Any\\],* *\\_T\\]*) –\n- **name** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n- **doc** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n\n`class werkzeug.utils.environ_property(name, default=None, load_func=None, dump_func=None, read_only=None, doc=None)`  \nMaps request attributes to environment variables. This works not only for the Werkzeug request object, but also any other class with an environ attribute:\n\n``` python\n>>> class Test(object):\n...     environ = {'key': 'value'}\n...     test = environ_property('key')\n>>> var = Test()\n>>> var.test\n'value'\n```\n\nIf you pass it a second value it’s used as default if the key does not exist, the third one can be a converter that takes a value and converts it. If it raises [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError \"(in Python v3.11)\") or [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError \"(in Python v3.11)\") the default value is used. If no default value is provided `None` is used.\n\nPer default the property is read only. You have to explicitly enable it by passing `read_only=False` to the constructor.\n\nParameters:  \n- **name** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **default** (*\\_TAccessorValue* *\\|* *None*) –\n- **load_func** (*t.Callable\\[\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\],* *\\_TAccessorValue\\]* *\\|* *None*) –\n- **dump_func** (*t.Callable\\[\\[\\_TAccessorValue\\],* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]* *\\|* *None*) –\n- **read_only** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\") *\\|* *None*) –\n- **doc** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n\n&nbsp;\n\n`class werkzeug.utils.header_property(name, default=None, load_func=None, dump_func=None, read_only=None, doc=None)`  \nLike `environ_property` but for headers.\n\nParameters:  \n- **name** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) –\n- **default** (*\\_TAccessorValue* *\\|* *None*) –\n- **load_func** (*t.Callable\\[\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\],* *\\_TAccessorValue\\]* *\\|* *None*) –\n- **dump_func** (*t.Callable\\[\\[\\_TAccessorValue\\],* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]* *\\|* *None*) –\n- **read_only** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\") *\\|* *None*) –\n- **doc** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) –\n\n&nbsp;\n\n`werkzeug.utils.redirect(location, code=302, Response=None)`  \nReturns a response object (a WSGI application) that, if called, redirects the client to the target location. Supported codes are 301, 302, 303, 305, 307, and 308. 300 is not supported because it’s not a real redirect and 304 because it’s the answer for a request with a request with defined If-Modified-Since headers.\n\nChangelog\n\nNew in version 0.10: The class used for the Response object can now be passed in.\n\nNew in version 0.6: The location can now be a unicode string that is encoded using the `iri_to_uri()` function.\n\nParameters:  \n- **location** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – the location the response should redirect to.\n- **code** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – the redirect status code. defaults to 302.\n- **Response** (*class*) – a Response class to use when instantiating a response. The default is [`werkzeug.wrappers.Response`](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\") if unspecified.\n\nReturn type:  \n[Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\")\n\n&nbsp;\n\n`werkzeug.utils.append_slash_redirect(environ, code=308)`  \nRedirect to the current URL with a slash appended.\n\nIf the current URL is `/user/42`, the redirect URL will be `42/`. When joined to the current URL during response processing or by the browser, this will produce `/user/42/`.\n\nThe behavior is undefined if the path ends with a slash already. If called unconditionally on a URL, it may produce a redirect loop.\n\nParameters:  \n- **environ** (*WSGIEnvironment*) – Use the path and query from this WSGI environment to produce the redirect URL.\n- **code** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – the status code for the redirect.\n\nReturn type:  \n[Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\")\n\nChangelog\n\nChanged in version 2.1: Produce a relative URL that only modifies the last segment. Relevant when the current path has multiple segments.\n\nChanged in version 2.1: The default status code is 308 instead of 301. This preserves the request method and body.\n\n&nbsp;\n\n`werkzeug.utils.send_file(path_or_file, environ, mimetype=None, as_attachment=False, download_name=None, conditional=True, etag=True, last_modified=None, max_age=None, use_x_sendfile=False, response_class=None, _root_path=None)`  \nSend the contents of a file to the client.\n\nThe first argument can be a file path or a file-like object. Paths are preferred in most cases because Werkzeug can manage the file and get extra information from the path. Passing a file-like object requires that the file is opened in binary mode, and is mostly useful when building a file in memory with [`io.BytesIO`](https://docs.python.org/3/library/io.html#io.BytesIO \"(in Python v3.11)\").\n\nNever pass file paths provided by a user. The path is assumed to be trusted, so a user could craft a path to access a file you didn’t intend. Use [`send_from_directory()`](#werkzeug.utils.send_from_directory \"werkzeug.utils.send_from_directory\") to safely serve user-provided paths.\n\nIf the WSGI server sets a `file_wrapper` in `environ`, it is used, otherwise Werkzeug’s built-in wrapper is used. Alternatively, if the HTTP server supports `X-Sendfile`, `use_x_sendfile=True` will tell the server to send the given path, which is much more efficient than reading it in Python.\n\nParameters:  \n- **path_or_file** ([os.PathLike](https://docs.python.org/3/library/os.html#os.PathLike \"(in Python v3.11)\") *\\|* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *t.IO\\[*[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\")*\\]*) – The path to the file to send, relative to the current working directory if a relative path is given. Alternatively, a file-like object opened in binary mode. Make sure the file pointer is seeked to the start of the data.\n- **environ** (*WSGIEnvironment*) – The WSGI environ for the current request.\n- **mimetype** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – The MIME type to send for the file. If not provided, it will try to detect it from the file name.\n- **as_attachment** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Indicate to a browser that it should offer to save the file instead of displaying it.\n- **download_name** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – The default name browsers will use when saving the file. Defaults to the passed file name.\n- **conditional** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Enable conditional and range responses based on request headers. Requires passing a file path and `environ`.\n- **etag** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\") *\\|* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – Calculate an ETag for the file, which requires passing a file path. Can also be a string to use instead.\n- **last_modified** (*datetime* *\\|* [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* [float](https://docs.python.org/3/library/functions.html#float \"(in Python v3.11)\") *\\|* *None*) – The last modified time to send for the file, in seconds. If not provided, it will try to detect it from the file path.\n- **max_age** (*None* *\\|* *(*[int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *t.Callable\\[\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None\\],* [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None\\])*) – How long the client should cache the file, in seconds. If set, `Cache-Control` will be `public`, otherwise it will be `no-cache` to prefer conditional caching.\n- **use_x_sendfile** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Set the `X-Sendfile` header to let the server to efficiently send the file. Requires support from the HTTP server. Requires passing a file path.\n- **response_class** ([type](https://docs.python.org/3/library/functions.html#type \"(in Python v3.11)\")*\\[*[Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\")*\\]* *\\|* *None*) – Build the response using this class. Defaults to [`Response`](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\").\n- **\\_root_path** ([os.PathLike](https://docs.python.org/3/library/os.html#os.PathLike \"(in Python v3.11)\") *\\|* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") *\\|* *None*) – Do not use. For internal use only. Use [`send_from_directory()`](#werkzeug.utils.send_from_directory \"werkzeug.utils.send_from_directory\") to safely send files under a path.\n\nReturn type:  \n[Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\")\n\nChangelog\n\nChanged in version 2.0.2: `send_file` only sets a detected `Content-Encoding` if `as_attachment` is disabled.\n\nNew in version 2.0: Adapted from Flask’s implementation.\n\nChanged in version 2.0: `download_name` replaces Flask’s `attachment_filename` parameter. If `as_attachment=False`, it is passed with `Content-Disposition: inline` instead.\n\nChanged in version 2.0: `max_age` replaces Flask’s `cache_timeout` parameter. `conditional` is enabled and `max_age` is not set by default.\n\nChanged in version 2.0: `etag` replaces Flask’s `add_etags` parameter. It can be a string to use instead of generating one.\n\nChanged in version 2.0: If an encoding is returned when guessing `mimetype` from `download_name`, set the `Content-Encoding` header.\n\n&nbsp;\n\n`werkzeug.utils.send_from_directory(directory, path, environ, **kwargs)`  \nSend a file from within a directory using [`send_file()`](#werkzeug.utils.send_file \"werkzeug.utils.send_file\").\n\nThis is a secure way to serve files from a folder, such as static files or uploads. Uses [`safe_join()`](#werkzeug.security.safe_join \"werkzeug.security.safe_join\") to ensure the path coming from the client is not maliciously crafted to point outside the specified directory.\n\nIf the final path does not point to an existing regular file, returns a 404 [`NotFound`](../exceptions/index#werkzeug.exceptions.NotFound \"werkzeug.exceptions.NotFound\") error.\n\nParameters:  \n- **directory** ([os.PathLike](https://docs.python.org/3/library/os.html#os.PathLike \"(in Python v3.11)\") *\\|* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The directory that `path` must be located under. This *must not* be a value provided by the client, otherwise it becomes insecure.\n- **path** ([os.PathLike](https://docs.python.org/3/library/os.html#os.PathLike \"(in Python v3.11)\") *\\|* [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The path to the file to send, relative to `directory`. This is the part of the path provided by the client, which is checked for security.\n- **environ** (*WSGIEnvironment*) – The WSGI environ for the current request.\n- **kwargs** (*t.Any*) – Arguments to pass to [`send_file()`](#werkzeug.utils.send_file \"werkzeug.utils.send_file\").\n\nReturn type:  \n[Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.Response\")\n\nChangelog\n\nNew in version 2.0: Adapted from Flask’s implementation.\n\n&nbsp;\n\n`werkzeug.utils.import_string(import_name, silent=False)`  \nImports an object based on a string. This is useful if you want to use import paths as endpoints or something similar. An import path can be specified either in dotted notation (`xml.sax.saxutils.escape`) or with a colon as object delimiter (`xml.sax.saxutils:escape`).\n\nIf `silent` is True the return value will be `None` if the import fails.\n\nParameters:  \n- **import_name** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – the dotted name for the object to import.\n- **silent** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – if set to `True` import errors are ignored and `None` is returned instead.\n\nReturns:  \nimported object\n\nReturn type:  \n[Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.11)\")\n\n&nbsp;\n\n`werkzeug.utils.find_modules(import_path, include_packages=False, recursive=False)`  \nFinds all the modules below a package. This can be useful to automatically import all views / controllers so that their metaclasses / function decorators have a chance to register themselves on the application.\n\nPackages are not returned unless `include_packages` is `True`. This can also recursively list modules but in that case it will import all the packages to get the correct load path of that module.\n\nParameters:  \n- **import_path** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – the dotted name for the package to find child modules.\n- **include_packages** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – set to `True` if packages should be returned, too.\n- **recursive** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – set to `True` if recursion should happen.\n\nReturns:  \ngenerator\n\nReturn type:  \n[Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.11)\")\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\\]\n\n&nbsp;\n\n`werkzeug.utils.secure_filename(filename)`  \nPass it a filename and it will return a secure version of it. This filename can then safely be stored on a regular file system and passed to [`os.path.join()`](https://docs.python.org/3/library/os.path.html#os.path.join \"(in Python v3.11)\"). The filename returned is an ASCII only string for maximum portability.\n\nOn windows systems the function also makes sure that the file is not named after one of the special device files.\n\n``` python\n>>> secure_filename(\"My cool movie.mov\")\n'My_cool_movie.mov'\n>>> secure_filename(\"../../../etc/passwd\")\n'etc_passwd'\n>>> secure_filename('i contain cool \\xfcml\\xe4uts.txt')\n'i_contain_cool_umlauts.txt'\n```\n\nThe function might return an empty filename. It’s your responsibility to ensure that the filename is unique and that you abort or generate a random filename if the function returned an empty one.\n\nChangelog\n\nNew in version 0.5.\n\nParameters:  \n**filename** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – the filename to secure\n\nReturn type:  \n[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\n\n## URL Helpers\n\nPlease refer to [URL Helpers](../urls/index).\n\n## User Agent API\n\n`class werkzeug.user_agent.UserAgent(string)`  \nRepresents a parsed user agent header value.\n\nThe default implementation does no parsing, only the [`string`](#werkzeug.user_agent.UserAgent.string \"werkzeug.user_agent.UserAgent.string\") attribute is set. A subclass may parse the string to set the common attributes or expose other information. Set [`werkzeug.wrappers.Request.user_agent_class`](../wrappers/index#werkzeug.wrappers.Request.user_agent_class \"werkzeug.wrappers.Request.user_agent_class\") to use a subclass.\n\nParameters:  \n**string** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The header value to parse.\n\nChangelog\n\nNew in version 2.0: This replaces the previous `useragents` module, but does not provide a built-in parser.\n\n`platform: str | None = None`  \nThe OS name, if it could be parsed from the string.\n\n`browser: str | None = None`  \nThe browser name, if it could be parsed from the string.\n\n`version: str | None = None`  \nThe browser version, if it could be parsed from the string.\n\n`language: str | None = None`  \nThe browser language, if it could be parsed from the string.\n\n`string: str`  \nThe original header value.\n\n`to_header()`  \nConvert to a header value.\n\nReturn type:  \n[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\n\n## Security Helpers\n\n`werkzeug.security.generate_password_hash(password, method='scrypt', salt_length=16)`  \nSecurely hash a password for storage. A password can be compared to a stored hash using [`check_password_hash()`](#werkzeug.security.check_password_hash \"werkzeug.security.check_password_hash\").\n\nThe following methods are supported:\n\n- `scrypt`, the default. The parameters are `n`, `r`, and `p`, the default is `scrypt:32768:8:1`. See [`hashlib.scrypt()`](https://docs.python.org/3/library/hashlib.html#hashlib.scrypt \"(in Python v3.11)\").\n- `pbkdf2`, less secure. The parameters are `hash_method` and `iterations`, the default is `pbkdf2:sha256:600000`. See [`hashlib.pbkdf2_hmac()`](https://docs.python.org/3/library/hashlib.html#hashlib.pbkdf2_hmac \"(in Python v3.11)\").\n\nDefault parameters may be updated to reflect current guidelines, and methods may be deprecated and removed if they are no longer considered secure. To migrate old hashes, you may generate a new hash when checking an old hash, or you may contact users with a link to reset their password.\n\nParameters:  \n- **password** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The plaintext password.\n- **method** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The key derivation function and parameters.\n- **salt_length** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – The number of characters to generate for the salt.\n\nReturn type:  \n[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\n\nChangelog\n\nChanged in version 2.3: Scrypt support was added.\n\nChanged in version 2.3: The default iterations for pbkdf2 was increased to 600,000.\n\nChanged in version 2.3: All plain hashes are deprecated and will not be supported in Werkzeug 3.0.\n\n&nbsp;\n\n`werkzeug.security.check_password_hash(pwhash, password)`  \nSecurely check that the given stored password hash, previously generated using [`generate_password_hash()`](#werkzeug.security.generate_password_hash \"werkzeug.security.generate_password_hash\"), matches the given password.\n\nMethods may be deprecated and removed if they are no longer considered secure. To migrate old hashes, you may generate a new hash when checking an old hash, or you may contact users with a link to reset their password.\n\nParameters:  \n- **pwhash** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The hashed password.\n- **password** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The plaintext password.\n\nReturn type:  \n[bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")\n\nChangelog\n\nChanged in version 2.3: All plain hashes are deprecated and will not be supported in Werkzeug 3.0.\n\n&nbsp;\n\n`werkzeug.security.safe_join(directory, *pathnames)`  \nSafely join zero or more untrusted path components to a base directory to avoid escaping the base directory.\n\nParameters:  \n- **directory** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The trusted base directory.\n- **pathnames** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The untrusted path components relative to the base directory.\n\nReturns:  \nA safe path, otherwise `None`.\n\nReturn type:  \n[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\") \\| None\n\n## Logging\n\nWerkzeug uses standard Python [`logging`](https://docs.python.org/3/library/logging.html#module-logging \"(in Python v3.11)\"). The logger is named `\"werkzeug\"`.\n\n``` python\nimport logging\nlogger = logging.getLogger(\"werkzeug\")\n```\n\nIf the logger level is not set, it will be set to [`INFO`](https://docs.python.org/3/library/logging.html#logging.INFO \"(in Python v3.11)\") on first use. If there is no handler for that level, a [`StreamHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.StreamHandler \"(in Python v3.11)\") is added.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/utils/](https://werkzeug.palletsprojects.com/en/3.0.x/utils/)"
- name: UUIDConverter
  id: routing/index#werkzeug.routing.UUIDConverter
  summary: New in version 0.10
  belongs_to: URL Routing
  description: |-
    `class werkzeug.routing.UUIDConverter(map, *args, **kwargs)`

    This converter only accepts UUID strings:

    ``` python
    Rule('/object/<uuid:identifier>')
    ```

    Changelog

    New in version 0.10.

    Parameters:

    - **map** ([Map](#werkzeug.routing.Map "werkzeug.routing.Map")) – the [`Map`](#werkzeug.routing.Map "werkzeug.routing.Map").
    - **args** (*t.Any*) –
    - **kwargs** (*t.Any*) –

    ## Maps, Rules and Adapters
- name: uWSGI
  id: deployment/uwsgi/index
  summary: uWSGI is a fast, compiled server suite with extensive configuration and capabilities beyond a basic server
  description: "# uWSGI\n\n[uWSGI](https://uwsgi-docs.readthedocs.io/en/latest/) is a fast, compiled server suite with extensive configuration and capabilities beyond a basic server.\n\n- It can be very performant due to being a compiled program.\n- It is complex to configure beyond the basic application, and has so many options that it can be difficult for beginners to understand.\n- It does not support Windows (but does run on WSL).\n- It requires a compiler to install in some cases.\n\nThis page outlines the basics of running uWSGI. Be sure to read its documentation to understand what features are available.\n\n## Installing\n\nuWSGI has multiple ways to install it. The most straightforward is to install the `pyuwsgi` package, which provides precompiled wheels for common platforms. However, it does not provide SSL support, which can be provided with a reverse proxy instead.\n\nCreate a virtualenv, install your application, then install `pyuwsgi`.\n\n``` text\n$ cd hello-app\n$ python -m venv venv\n$ . venv/bin/activate\n$ pip install .  # install your application\n$ pip install pyuwsgi\n```\n\nIf you have a compiler available, you can install the `uwsgi` package instead. Or install the `pyuwsgi` package from sdist instead of wheel. Either method will include SSL support.\n\n``` text\n$ pip install uwsgi\n\n# or\n$ pip install --no-binary pyuwsgi pyuwsgi\n```\n\n## Running\n\nThe most basic way to run uWSGI is to tell it to start an HTTP server and import your application.\n\n``` text\n$ uwsgi --http 127.0.0.1:8000 --master -p 4 -w hello:app\n\n*** Starting uWSGI 2.0.20 (64bit) on [x] ***\n*** Operational MODE: preforking ***\nmounting hello:app on /\nspawned uWSGI master process (pid: x)\nspawned uWSGI worker 1 (pid: x, cores: 1)\nspawned uWSGI worker 2 (pid: x, cores: 1)\nspawned uWSGI worker 3 (pid: x, cores: 1)\nspawned uWSGI worker 4 (pid: x, cores: 1)\nspawned uWSGI http 1 (pid: x)\n```\n\nIf you’re using the app factory pattern, you’ll need to create a small Python file to create the app, then point uWSGI at that.\n\n`wsgi.py`\n\n``` python\nfrom hello import create_app\n\napp = create_app()\n```\n\n``` text\n$ uwsgi --http 127.0.0.1:8000 --master -p 4 -w wsgi:app\n```\n\nThe `--http` option starts an HTTP server at 127.0.0.1 port 8000. The `--master` option specifies the standard worker manager. The `-p` option starts 4 worker processes; a starting value could be `CPU * 2`. The `-w` option tells uWSGI how to import your application\n\n## Binding Externally\n\nuWSGI should not be run as root with the configuration shown in this doc because it would cause your application code to run as root, which is not secure. However, this means it will not be possible to bind to port 80 or 443. Instead, a reverse proxy such as [nginx](../nginx/index) or [Apache httpd](../apache-httpd/index) should be used in front of uWSGI. It is possible to run uWSGI as root securely, but that is beyond the scope of this doc.\n\nuWSGI has optimized integration with [Nginx uWSGI](https://uwsgi-docs.readthedocs.io/en/latest/Nginx.html) and [Apache mod_proxy_uwsgi](https://uwsgi-docs.readthedocs.io/en/latest/Apache.html#mod-proxy-uwsgi), and possibly other servers, instead of using a standard HTTP proxy. That configuration is beyond the scope of this doc, see the links for more information.\n\nYou can bind to all external IPs on a non-privileged port using the `--http 0.0.0.0:8000` option. Don’t do this when using a reverse proxy setup, otherwise it will be possible to bypass the proxy.\n\n``` text\n$ uwsgi --http 0.0.0.0:8000 --master -p 4 -w wsgi:app\n```\n\n`0.0.0.0` is not a valid address to navigate to, you’d use a specific IP address in your browser.\n\n## Async with gevent\n\nThe default sync worker is appropriate for many use cases. If you need asynchronous support, uWSGI provides a [gevent](https://www.gevent.org/) worker. This is not the same as Python’s `async/await`, or the ASGI server spec. You must actually use gevent in your own code to see any benefit to using the worker.\n\nWhen using gevent, greenlet\\>=1.0 is required, otherwise context locals such as `request` will not work as expected. When using PyPy, PyPy\\>=7.3.7 is required.\n\n``` text\n$ uwsgi --http 127.0.0.1:8000 --master --gevent 100 -w wsgi:app\n\n*** Starting uWSGI 2.0.20 (64bit) on [x] ***\n*** Operational MODE: async ***\nmounting hello:app on /\nspawned uWSGI master process (pid: x)\nspawned uWSGI worker 1 (pid: x, cores: 100)\nspawned uWSGI http 1 (pid: x)\n*** running gevent loop engine [addr:x] ***\n```\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/deployment/uwsgi/](https://werkzeug.palletsprojects.com/en/3.0.x/deployment/uwsgi/)"
- name: Waitress
  id: deployment/waitress/index
  summary: Waitress is a pure Python WSGI server
  description: "# Waitress\n\n[Waitress](https://docs.pylonsproject.org/projects/waitress/) is a pure Python WSGI server.\n\n- It is easy to configure.\n- It supports Windows directly.\n- It is easy to install as it does not require additional dependencies or compilation.\n- It does not support streaming requests, full request data is always buffered.\n- It uses a single process with multiple thread workers.\n\nThis page outlines the basics of running Waitress. Be sure to read its documentation and `waitress-serve --help` to understand what features are available.\n\n## Installing\n\nCreate a virtualenv, install your application, then install `waitress`.\n\n``` text\n$ cd hello-app\n$ python -m venv venv\n$ . venv/bin/activate\n$ pip install .  # install your application\n$ pip install waitress\n```\n\n## Running\n\nThe only required argument to `waitress-serve` tells it how to load your application. The syntax is `{module}:{app}`. `module` is the dotted import name to the module with your application. `app` is the variable with the application. If you’re using the app factory pattern, use `--call {module}:{factory}` instead.\n\n``` text\n# equivalent to 'from hello import app'\n$ waitress-serve hello:app --host 127.0.0.1\n\n# equivalent to 'from hello import create_app; create_app()'\n$ waitress-serve --call hello:create_app --host 127.0.0.1\n\nServing on http://127.0.0.1:8080\n```\n\nThe `--host` option binds the server to local `127.0.0.1` only.\n\nLogs for each request aren’t shown, only errors are shown. Logging can be configured through the Python interface instead of the command line.\n\n## Binding Externally\n\nWaitress should not be run as root because it would cause your application code to run as root, which is not secure. However, this means it will not be possible to bind to port 80 or 443. Instead, a reverse proxy such as [nginx](../nginx/index) or [Apache httpd](../apache-httpd/index) should be used in front of Waitress.\n\nYou can bind to all external IPs on a non-privileged port by not specifying the `--host` option. Don’t do this when using a revers proxy setup, otherwise it will be possible to bypass the proxy.\n\n`0.0.0.0` is not a valid address to navigate to, you’d use a specific IP address in your browser.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/deployment/waitress/](https://werkzeug.palletsprojects.com/en/3.0.x/deployment/waitress/)"
- name: Werkzeug Tutorial
  id: tutorial/index
  summary: Welcome to the Werkzeug tutorial in which we will create a TinyURL clone that stores URLs in a redis instance
  description: "# Werkzeug Tutorial\n\nWelcome to the Werkzeug tutorial in which we will create a [TinyURL](https://tinyurl.com/) clone that stores URLs in a redis instance. The libraries we will use for this applications are [Jinja](http://jinja.pocoo.org/) 2 for the templates, [redis](https://redis.io/) for the database layer and, of course, Werkzeug for the WSGI layer.\n\nYou can use `pip` to install the required libraries:\n\n``` python\npip install Jinja2 redis Werkzeug\n```\n\nAlso make sure to have a redis server running on your local machine. If you are on OS X, you can use `brew` to install it:\n\n``` python\nbrew install redis\n```\n\nIf you are on Ubuntu or Debian, you can use apt-get:\n\n``` python\nsudo apt-get install redis-server\n```\n\nRedis was developed for UNIX systems and was never really designed to work on Windows. For development purposes, the unofficial ports however work well enough. You can get them from [github](https://github.com/dmajkic/redis/downloads).\n\n## Introducing Shortly\n\nIn this tutorial, we will together create a simple URL shortener service with Werkzeug. Please keep in mind that Werkzeug is not a framework, it’s a library with utilities to create your own framework or application and as such is very flexible. The approach we use here is just one of many you can use.\n\nAs data store, we will use [redis](https://redis.io/) here instead of a relational database to keep this simple and because that’s the kind of job that [redis](https://redis.io/) excels at.\n\nThe final result will look something like this:\n\n## Step 0: A Basic WSGI Introduction\n\nWerkzeug is a utility library for WSGI. WSGI itself is a protocol or convention that ensures that your web application can speak with the webserver and more importantly that web applications work nicely together.\n\nA basic “Hello World” application in WSGI without the help of Werkzeug looks like this:\n\n``` python\ndef application(environ, start_response):\n    start_response('200 OK', [('Content-Type', 'text/plain')])\n    return ['Hello World!'.encode('utf-8')]\n```\n\nA WSGI application is something you can call and pass an environ dict and a `start_response` callable. The environ contains all incoming information, the `start_response` function can be used to indicate the start of the response. With Werkzeug you don’t have to deal directly with either as request and response objects are provided to work with them.\n\nThe request data takes the environ object and allows you to access the data from that environ in a nice manner. The response object is a WSGI application in itself and provides a much nicer way to create responses.\n\nHere is how you would write that application with response objects:\n\n``` python\nfrom werkzeug.wrappers import Response\n\ndef application(environ, start_response):\n    response = Response('Hello World!', mimetype='text/plain')\n    return response(environ, start_response)\n```\n\nAnd here an expanded version that looks at the query string in the URL (more importantly at the `name` parameter in the URL to substitute “World” against another word):\n\n``` python\nfrom werkzeug.wrappers import Request, Response\n\ndef application(environ, start_response):\n    request = Request(environ)\n    text = f\"Hello {request.args.get('name', 'World')}!\"\n    response = Response(text, mimetype='text/plain')\n    return response(environ, start_response)\n```\n\nAnd that’s all you need to know about WSGI.\n\n## Step 1: Creating the Folders\n\nBefore we get started, let’s create the folders needed for this application:\n\n``` python\n/shortly\n    /static\n    /templates\n```\n\nThe shortly folder is not a python package, but just something where we drop our files. Directly into this folder we will then put our main module in the following steps. The files inside the static folder are available to users of the application via HTTP. This is the place where CSS and JavaScript files go. Inside the templates folder we will make Jinja2 look for templates. The templates you create later in the tutorial will go in this directory.\n\n## Step 2: The Base Structure\n\nNow let’s get right into it and create a module for our application. Let’s create a file called `shortly.py` in the `shortly` folder. At first we will need a bunch of imports. I will pull in all the imports here, even if they are not used right away, to keep it from being confusing:\n\n``` python\nimport os\nimport redis\nfrom werkzeug.urls import url_parse\nfrom werkzeug.wrappers import Request, Response\nfrom werkzeug.routing import Map, Rule\nfrom werkzeug.exceptions import HTTPException, NotFound\nfrom werkzeug.middleware.shared_data import SharedDataMiddleware\nfrom werkzeug.utils import redirect\nfrom jinja2 import Environment, FileSystemLoader\n```\n\nThen we can create the basic structure for our application and a function to create a new instance of it, optionally with a piece of WSGI middleware that exports all the files on the `static` folder on the web:\n\n``` python\nclass Shortly(object):\n\n    def __init__(self, config):\n        self.redis = redis.Redis(\n            config['redis_host'], config['redis_port'], decode_responses=True\n        )\n\n    def dispatch_request(self, request):\n        return Response('Hello World!')\n\n    def wsgi_app(self, environ, start_response):\n        request = Request(environ)\n        response = self.dispatch_request(request)\n        return response(environ, start_response)\n\n    def __call__(self, environ, start_response):\n        return self.wsgi_app(environ, start_response)\n\n\ndef create_app(redis_host='localhost', redis_port=6379, with_static=True):\n    app = Shortly({\n        'redis_host':       redis_host,\n        'redis_port':       redis_port\n    })\n    if with_static:\n        app.wsgi_app = SharedDataMiddleware(app.wsgi_app, {\n            '/static':  os.path.join(os.path.dirname(__file__), 'static')\n        })\n    return app\n```\n\nLastly we can add a piece of code that will start a local development server with automatic code reloading and a debugger:\n\n``` python\nif __name__ == '__main__':\n    from werkzeug.serving import run_simple\n    app = create_app()\n    run_simple('127.0.0.1', 5000, app, use_debugger=True, use_reloader=True)\n```\n\nThe basic idea here is that our `Shortly` class is an actual WSGI application. The `__call__` method directly dispatches to `wsgi_app`. This is done so that we can wrap `wsgi_app` to apply middlewares like we do in the `create_app` function. The actual `wsgi_app` method then creates a `Request` object and calls the `dispatch_request` method which then has to return a `Response` object which is then evaluated as WSGI application again. As you can see: turtles all the way down. Both the `Shortly` class we create, as well as any request object in Werkzeug implements the WSGI interface. As a result of that you could even return another WSGI application from the `dispatch_request` method.\n\nThe `create_app` factory function can be used to create a new instance of our application. Not only will it pass some parameters as configuration to the application but also optionally add a WSGI middleware that exports static files. This way we have access to the files from the static folder even when we are not configuring our server to provide them which is very helpful for development.\n\n## Intermezzo: Running the Application\n\nNow you should be able to execute the file with `python` and see a server on your local machine:\n\n``` python\n$ python shortly.py\n * Running on http://127.0.0.1:5000/\n * Restarting with reloader: stat() polling\n```\n\nIt also tells you that the reloader is active. It will use various techniques to figure out if any file changed on the disk and then automatically restart.\n\nJust go to the URL and you should see “Hello World!”.\n\n## Step 3: The Environment\n\nNow that we have the basic application class, we can make the constructor do something useful and provide a few helpers on there that can come in handy. We will need to be able to render templates and connect to redis, so let’s extend the class a bit:\n\n``` python\ndef __init__(self, config):\n    self.redis = redis.Redis(config['redis_host'], config['redis_port'])\n    template_path = os.path.join(os.path.dirname(__file__), 'templates')\n    self.jinja_env = Environment(loader=FileSystemLoader(template_path),\n                                 autoescape=True)\n\ndef render_template(self, template_name, **context):\n    t = self.jinja_env.get_template(template_name)\n    return Response(t.render(context), mimetype='text/html')\n```\n\n## Step 4: The Routing\n\nNext up is routing. Routing is the process of matching and parsing the URL to something we can use. Werkzeug provides a flexible integrated routing system which we can use for that. The way it works is that you create a [`Map`](../routing/index#werkzeug.routing.Map \"werkzeug.routing.Map\") instance and add a bunch of [`Rule`](../routing/index#werkzeug.routing.Rule \"werkzeug.routing.Rule\") objects. Each rule has a pattern it will try to match the URL against and an “endpoint”. The endpoint is typically a string and can be used to uniquely identify the URL. We could also use this to automatically reverse the URL, but that’s not what we will do in this tutorial.\n\nJust put this into the constructor:\n\n``` python\nself.url_map = Map([\n    Rule('/', endpoint='new_url'),\n    Rule('/<short_id>', endpoint='follow_short_link'),\n    Rule('/<short_id>+', endpoint='short_link_details')\n])\n```\n\nHere we create a URL map with three rules. `/` for the root of the URL space where we will just dispatch to a function that implements the logic to create a new URL. And then one that follows the short link to the target URL and another one with the same rule but a plus (`+`) at the end to show the link details.\n\nSo how do we find our way from the endpoint to a function? That’s up to you. The way we will do it in this tutorial is by calling the method `on_` + endpoint on the class itself. Here is how this works:\n\n``` python\ndef dispatch_request(self, request):\n    adapter = self.url_map.bind_to_environ(request.environ)\n    try:\n        endpoint, values = adapter.match()\n        return getattr(self, f'on_{endpoint}')(request, **values)\n    except HTTPException as e:\n        return e\n```\n\nWe bind the URL map to the current environment and get back a `URLAdapter`. The adapter can be used to match the request but also to reverse URLs. The match method will return the endpoint and a dictionary of values in the URL. For instance the rule for `follow_short_link` has a variable part called `short_id`. When we go to `http://localhost:5000/foo` we will get the following values back:\n\n``` python\nendpoint = 'follow_short_link'\nvalues = {'short_id': 'foo'}\n```\n\nIf it does not match anything, it will raise a [`NotFound`](../exceptions/index#werkzeug.exceptions.NotFound \"werkzeug.exceptions.NotFound\") exception, which is an [`HTTPException`](../exceptions/index#werkzeug.exceptions.HTTPException \"werkzeug.exceptions.HTTPException\"). All HTTP exceptions are also WSGI applications by themselves which render a default error page. So we just catch all of them down and return the error itself.\n\nIf all works well, we call the function `on_` + endpoint and pass it the request as argument as well as all the URL arguments as keyword arguments and return the response object that method returns.\n\n## Step 5: The First View\n\nLet’s start with the first view: the one for new URLs:\n\n``` python\ndef on_new_url(self, request):\n    error = None\n    url = ''\n    if request.method == 'POST':\n        url = request.form['url']\n        if not is_valid_url(url):\n            error = 'Please enter a valid URL'\n        else:\n            short_id = self.insert_url(url)\n            return redirect(f\"/{short_id}+\")\n    return self.render_template('new_url.html', error=error, url=url)\n```\n\nThis logic should be easy to understand. Basically we are checking that the request method is POST, in which case we validate the URL and add a new entry to the database, then redirect to the detail page. This means we need to write a function and a helper method. For URL validation this is good enough:\n\n``` python\ndef is_valid_url(url):\n    parts = url_parse(url)\n    return parts.scheme in ('http', 'https')\n```\n\nFor inserting the URL, all we need is this little method on our class:\n\n``` python\ndef insert_url(self, url):\n    short_id = self.redis.get(f'reverse-url:{url}')\n    if short_id is not None:\n        return short_id\n    url_num = self.redis.incr('last-url-id')\n    short_id = base36_encode(url_num)\n    self.redis.set(f'url-target:{short_id}', url)\n    self.redis.set(f'reverse-url:{url}', short_id)\n    return short_id\n```\n\n`reverse-url:` + the URL will store the short id. If the URL was already submitted this won’t be None and we can just return that value which will be the short ID. Otherwise we increment the `last-url-id` key and convert it to base36. Then we store the link and the reverse entry in redis. And here the function to convert to base 36:\n\n``` python\ndef base36_encode(number):\n    assert number >= 0, 'positive integer required'\n    if number == 0:\n        return '0'\n    base36 = []\n    while number != 0:\n        number, i = divmod(number, 36)\n        base36.append('0123456789abcdefghijklmnopqrstuvwxyz'[i])\n    return ''.join(reversed(base36))\n```\n\nSo what is missing for this view to work is the template. We will create this later, let’s first also write the other views and then do the templates in one go.\n\n## Step 6: Redirect View\n\nThe redirect view is easy. All it has to do is to look for the link in redis and redirect to it. Additionally we will also increment a counter so that we know how often a link was clicked:\n\n``` python\ndef on_follow_short_link(self, request, short_id):\n    link_target = self.redis.get(f'url-target:{short_id}')\n    if link_target is None:\n        raise NotFound()\n    self.redis.incr(f'click-count:{short_id}')\n    return redirect(link_target)\n```\n\nIn this case we will raise a [`NotFound`](../exceptions/index#werkzeug.exceptions.NotFound \"werkzeug.exceptions.NotFound\") exception by hand if the URL does not exist, which will bubble up to the `dispatch_request` function and be converted into a default 404 response.\n\n## Step 7: Detail View\n\nThe link detail view is very similar, we just render a template again. In addition to looking up the target, we also ask redis for the number of times the link was clicked and let it default to zero if such a key does not yet exist:\n\n``` python\ndef on_short_link_details(self, request, short_id):\n    link_target = self.redis.get(f'url-target:{short_id}')\n    if link_target is None:\n        raise NotFound()\n    click_count = int(self.redis.get(f'click-count:{short_id}') or 0)\n    return self.render_template('short_link_details.html',\n        link_target=link_target,\n        short_id=short_id,\n        click_count=click_count\n    )\n```\n\nPlease be aware that redis always works with strings, so you have to convert the click count to [`int`](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") by hand.\n\n## Step 8: Templates\n\nAnd here are all the templates. Just drop them into the `templates` folder. Jinja2 supports template inheritance, so the first thing we will do is create a layout template with blocks that act as placeholders. We also set up Jinja2 so that it automatically escapes strings with HTML rules, so we don’t have to spend time on that ourselves. This prevents XSS attacks and rendering errors.\n\n*layout.html*:\n\n``` html+jinja\n<!doctype html>\n<title>{% block title %}{% endblock %} | shortly</title>\n<link rel=stylesheet href=/static/style.css type=text/css>\n<div class=box>\n  <h1><a href=/>shortly</a></h1>\n  <p class=tagline>Shortly is a URL shortener written with Werkzeug\n  {% block body %}{% endblock %}\n</div>\n```\n\n*new_url.html*:\n\n``` html+jinja\n{% extends \"layout.html\" %}\n{% block title %}Create New Short URL{% endblock %}\n{% block body %}\n  <h2>Submit URL</h2>\n  <form action=\"\" method=post>\n    {% if error %}\n      <p class=error><strong>Error:</strong> {{ error }}\n    {% endif %}\n    <p>URL:\n      <input type=text name=url value=\"{{ url }}\" class=urlinput>\n      <input type=submit value=\"Shorten\">\n  </form>\n{% endblock %}\n```\n\n*short_link_details.html*:\n\n``` html+jinja\n{% extends \"layout.html\" %}\n{% block title %}Details about /{{ short_id }}{% endblock %}\n{% block body %}\n  <h2><a href=\"/{{ short_id }}\">/{{ short_id }}</a></h2>\n  <dl>\n    <dt>Full link\n    <dd class=link><div>{{ link_target }}</div>\n    <dt>Click count:\n    <dd>{{ click_count }}\n  </dl>\n{% endblock %}\n```\n\n## Step 9: The Style\n\nFor this to look better than ugly black and white, here a simple stylesheet that goes along:\n\n*static/style.css*:\n\n``` css\nbody        { background: #E8EFF0; margin: 0; padding: 0; }\nbody, input { font-family: 'Helvetica Neue', Arial,\n              sans-serif; font-weight: 300; font-size: 18px; }\n.box        { width: 500px; margin: 60px auto; padding: 20px;\n              background: white; box-shadow: 0 1px 4px #BED1D4;\n              border-radius: 2px; }\na           { color: #11557C; }\nh1, h2      { margin: 0; color: #11557C; }\nh1 a        { text-decoration: none; }\nh2          { font-weight: normal; font-size: 24px; }\n.tagline    { color: #888; font-style: italic; margin: 0 0 20px 0; }\n.link div   { overflow: auto; font-size: 0.8em; white-space: pre;\n              padding: 4px 10px; margin: 5px 0; background: #E5EAF1; }\ndt          { font-weight: normal; }\n.error      { background: #E8EFF0; padding: 3px 8px; color: #11557C;\n              font-size: 0.9em; border-radius: 2px; }\n.urlinput   { width: 300px; }\n```\n\n## Bonus: Refinements\n\nLook at the implementation in the example dictionary in the Werkzeug repository to see a version of this tutorial with some small refinements such as a custom 404 page.\n\n- [shortly in the example folder](https://github.com/pallets/werkzeug/tree/main/examples/shortly)\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/tutorial/](https://werkzeug.palletsprojects.com/en/3.0.x/tutorial/)"
- name: wrap_file()
  id: wsgi/index#werkzeug.wsgi.wrap_file
  summary: Wraps a file
  belongs_to: WSGI Helpers
  description: |-
    `werkzeug.wsgi.wrap_file(environ, file, buffer_size=8192)`

    Wraps a file. This uses the WSGI server’s file wrapper if available or otherwise the generic [`FileWrapper`](#werkzeug.wsgi.FileWrapper "werkzeug.wsgi.FileWrapper").

    Changelog

    New in version 0.5.

    If the file wrapper from the WSGI server is used it’s important to not iterate over it from inside the application but to pass it through unchanged. If you want to pass out a file wrapper inside a response object you have to set `Response.direct_passthrough` to `True`.

    More information about file wrappers are available in [**PEP 333**](https://peps.python.org/pep-0333/).

    Parameters:

    - **file** (*t.IO\[*[bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.11)")*\]*) – a `file`-like object with a `read()` method.
    - **buffer_size** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.11)")) – number of bytes for one iteration.
    - **environ** (*WSGIEnvironment*) –

    Return type:

    t.Iterable\[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.11)")\]

    ## Environ Helpers

    These functions operate on the WSGI environment. They extract useful information or perform common manipulations:
- name: WSGI Helpers
  id: wsgi/index
  summary: The following classes and functions are designed to make working with the WSGI specification easier or operate on the WSGI layer
  description: "# WSGI Helpers\n\nThe following classes and functions are designed to make working with the WSGI specification easier or operate on the WSGI layer. All the functionality from this module is available on the high-level [Request / Response Objects](../wrappers/index).\n\n## Iterator / Stream Helpers\n\nThese classes and functions simplify working with the WSGI application iterator and the input stream.\n\n`class werkzeug.wsgi.ClosingIterator(iterable, callbacks=None)`  \nThe WSGI specification requires that all middlewares and gateways respect the `close` callback of the iterable returned by the application. Because it is useful to add another close action to a returned iterable and adding a custom iterable is a boring task this class can be used for that:\n\n``` python\nreturn ClosingIterator(app(environ, start_response), [cleanup_session,\n                                                      cleanup_locals])\n```\n\nIf there is just one close function it can be passed instead of the list.\n\nA closing iterator is not needed if the application uses response objects and finishes the processing if the response is started:\n\n``` python\ntry:\n    return response(environ, start_response)\nfinally:\n    cleanup_session()\n    cleanup_locals()\n```\n\nParameters:  \n- **iterable** (*t.Iterable\\[*[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\")*\\]*) –\n- **callbacks** (*None* *\\|* *(t.Callable\\[\\[\\],* *None\\]* *\\|* *t.Iterable\\[t.Callable\\[\\[\\],* *None\\]\\])*) –\n\n`class werkzeug.wsgi.FileWrapper(file, buffer_size=8192)`  \nThis class can be used to convert a `file`-like object into an iterable. It yields `buffer_size` blocks until the file is fully read.\n\nYou should not use this class directly but rather use the [`wrap_file()`](#werkzeug.wsgi.wrap_file \"werkzeug.wsgi.wrap_file\") function that uses the WSGI server’s file wrapper support if it’s available.\n\nChangelog\n\nNew in version 0.5.\n\nIf you’re using this object together with a `Response` you have to use the `direct_passthrough` mode.\n\nParameters:  \n- **file** (*t.IO\\[*[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\")*\\]*) – a `file`-like object with a `read()` method.\n- **buffer_size** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – number of bytes for one iteration.\n\n&nbsp;\n\n`class werkzeug.wsgi.LimitedStream(stream, limit, is_max=False)`  \nWrap a stream so that it doesn’t read more than a given limit. This is used to limit `wsgi.input` to the `Content-Length` header value or [`Request.max_content_length`](../wrappers/index#werkzeug.wrappers.Request.max_content_length \"werkzeug.wrappers.Request.max_content_length\").\n\nWhen attempting to read after the limit has been reached, [`on_exhausted()`](#werkzeug.wsgi.LimitedStream.on_exhausted \"werkzeug.wsgi.LimitedStream.on_exhausted\") is called. When the limit is a maximum, this raises [`RequestEntityTooLarge`](../exceptions/index#werkzeug.exceptions.RequestEntityTooLarge \"werkzeug.exceptions.RequestEntityTooLarge\").\n\nIf reading from the stream returns zero bytes or raises an error, [`on_disconnect()`](#werkzeug.wsgi.LimitedStream.on_disconnect \"werkzeug.wsgi.LimitedStream.on_disconnect\") is called, which raises [`ClientDisconnected`](../exceptions/index#werkzeug.exceptions.ClientDisconnected \"werkzeug.exceptions.ClientDisconnected\"). When the limit is a maximum and zero bytes were read, no error is raised, since it may be the end of the stream.\n\nIf the limit is reached before the underlying stream is exhausted (such as a file that is too large, or an infinite stream), the remaining contents of the stream cannot be read safely. Depending on how the server handles this, clients may show a “connection reset” failure instead of seeing the 413 response.\n\nParameters:  \n- **stream** (*t.IO\\[*[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\")*\\]*) – The stream to read from. Must be a readable binary IO object.\n- **limit** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – The limit in bytes to not read past. Should be either the `Content-Length` header value or `request.max_content_length`.\n- **is_max** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Whether the given `limit` is `request.max_content_length` instead of the `Content-Length` header value. This changes how exhausted and disconnect events are handled.\n\nChangelog\n\nChanged in version 2.3: Handle `max_content_length` differently than `Content-Length`.\n\nChanged in version 2.3: Implements `io.RawIOBase` rather than `io.IOBase`.\n\n`exhaust()`  \nExhaust the stream by reading until the limit is reached or the client disconnects, returning the remaining data.\n\nChangelog\n\nChanged in version 2.3: Return the remaining data.\n\nChanged in version 2.2.3: Handle case where wrapped stream returns fewer bytes than requested.\n\nReturn type:  \n[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\")\n\n`property is_exhausted: bool`  \nWhether the current stream position has reached the limit.\n\n`on_disconnect(error=None)`  \nCalled when an attempted read receives zero bytes before the limit was reached. This indicates that the client disconnected before sending the full request body.\n\nThe default behavior is to raise [`ClientDisconnected`](../exceptions/index#werkzeug.exceptions.ClientDisconnected \"werkzeug.exceptions.ClientDisconnected\"), unless the limit is a maximum and no error was raised.\n\nChangelog\n\nChanged in version 2.3: Added the `error` parameter. Do nothing if the limit is a maximum and no error was raised.\n\nChanged in version 2.3: Any return value is ignored.\n\nParameters:  \n**error** ([Exception](https://docs.python.org/3/library/exceptions.html#Exception \"(in Python v3.11)\") *\\|* *None*) –\n\nReturn type:  \nNone\n\n`on_exhausted()`  \nCalled when attempting to read after the limit has been reached.\n\nThe default behavior is to do nothing, unless the limit is a maximum, in which case it raises [`RequestEntityTooLarge`](../exceptions/index#werkzeug.exceptions.RequestEntityTooLarge \"werkzeug.exceptions.RequestEntityTooLarge\").\n\nChangelog\n\nChanged in version 2.3: Raises `RequestEntityTooLarge` if the limit is a maximum.\n\nChanged in version 2.3: Any return value is ignored.\n\nReturn type:  \nNone\n\n`readable()`  \nReturn whether object was opened for reading.\n\nIf False, read() will raise OSError.\n\nReturn type:  \n[bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")\n\n`readall()`  \nRead until EOF, using multiple read() call.\n\nReturn type:  \n[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\")\n\n`tell()`  \nReturn the current stream position.\n\nChangelog\n\nNew in version 0.9.\n\nReturn type:  \n[int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")\n\n&nbsp;\n\n`werkzeug.wsgi.wrap_file(environ, file, buffer_size=8192)`  \nWraps a file. This uses the WSGI server’s file wrapper if available or otherwise the generic [`FileWrapper`](#werkzeug.wsgi.FileWrapper \"werkzeug.wsgi.FileWrapper\").\n\nChangelog\n\nNew in version 0.5.\n\nIf the file wrapper from the WSGI server is used it’s important to not iterate over it from inside the application but to pass it through unchanged. If you want to pass out a file wrapper inside a response object you have to set `Response.direct_passthrough` to `True`.\n\nMore information about file wrappers are available in [**PEP 333**](https://peps.python.org/pep-0333/).\n\nParameters:  \n- **file** (*t.IO\\[*[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\")*\\]*) – a `file`-like object with a `read()` method.\n- **buffer_size** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – number of bytes for one iteration.\n- **environ** (*WSGIEnvironment*) –\n\nReturn type:  \nt.Iterable\\[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\")\\]\n\n## Environ Helpers\n\nThese functions operate on the WSGI environment. They extract useful information or perform common manipulations:\n\n`werkzeug.wsgi.get_host(environ, trusted_hosts=None)`  \nReturn the host for the given WSGI environment.\n\nThe `Host` header is preferred, then `SERVER_NAME` if it’s not set. The returned host will only contain the port if it is different than the standard port for the protocol.\n\nOptionally, verify that the host is trusted using [`host_is_trusted()`](#werkzeug.wsgi.host_is_trusted \"werkzeug.wsgi.host_is_trusted\") and raise a [`SecurityError`](../exceptions/index#werkzeug.exceptions.SecurityError \"werkzeug.exceptions.SecurityError\") if it is not.\n\nParameters:  \n- **environ** (*WSGIEnvironment*) – A WSGI environment dict.\n- **trusted_hosts** (*t.Iterable\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]* *\\|* *None*) – A list of trusted host names.\n\nReturns:  \nHost, with port if necessary.\n\nRaises:  \n[**SecurityError**](../exceptions/index#werkzeug.exceptions.SecurityError \"werkzeug.exceptions.SecurityError\") – If the host is not trusted.\n\nReturn type:  \n[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\n\n&nbsp;\n\n`werkzeug.wsgi.get_content_length(environ)`  \nReturn the `Content-Length` header value as an int. If the header is not given or the `Transfer-Encoding` header is `chunked`, `None` is returned to indicate a streaming request. If the value is not an integer, or negative, 0 is returned.\n\nParameters:  \n**environ** (*WSGIEnvironment*) – The WSGI environ to get the content length from.\n\nReturn type:  \n[int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") \\| None\n\nChangelog\n\nNew in version 0.9.\n\n&nbsp;\n\n`werkzeug.wsgi.get_input_stream(environ, safe_fallback=True, max_content_length=None)`  \nReturn the WSGI input stream, wrapped so that it may be read safely without going past the `Content-Length` header value or `max_content_length`.\n\nIf `Content-Length` exceeds `max_content_length`, a `` RequestEntityTooLarge` `` `413 Content Too Large` error is raised.\n\nIf the WSGI server sets `environ[\"wsgi.input_terminated\"]`, it indicates that the server handles terminating the stream, so it is safe to read directly. For example, a server that knows how to handle chunked requests safely would set this.\n\nIf `max_content_length` is set, it can be enforced on streams if `wsgi.input_terminated` is set. Otherwise, an empty stream is returned unless the user explicitly disables this safe fallback.\n\nIf the limit is reached before the underlying stream is exhausted (such as a file that is too large, or an infinite stream), the remaining contents of the stream cannot be read safely. Depending on how the server handles this, clients may show a “connection reset” failure instead of seeing the 413 response.\n\nParameters:  \n- **environ** (*WSGIEnvironment*) – The WSGI environ containing the stream.\n- **safe_fallback** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Return an empty stream when `Content-Length` is not set. Disabling this allows infinite streams, which can be a denial-of-service risk.\n- **max_content_length** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\") *\\|* *None*) – The maximum length that content-length or streaming requests may not exceed.\n\nReturn type:  \nt.IO\\[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.11)\")\\]\n\nChangelog\n\nChanged in version 2.3.2: `max_content_length` is only applied to streaming requests if the server sets `wsgi.input_terminated`.\n\nChanged in version 2.3: Check `max_content_length` and raise an error if it is exceeded.\n\nNew in version 0.9.\n\n&nbsp;\n\n`werkzeug.wsgi.get_current_url(environ, root_only=False, strip_querystring=False, host_only=False, trusted_hosts=None)`  \nRecreate the URL for a request from the parts in a WSGI environment.\n\nThe URL is an IRI, not a URI, so it may contain Unicode characters. Use [`iri_to_uri()`](../urls/index#werkzeug.urls.iri_to_uri \"werkzeug.urls.iri_to_uri\") to convert it to ASCII.\n\nParameters:  \n- **environ** (*WSGIEnvironment*) – The WSGI environment to get the URL parts from.\n- **root_only** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Only build the root path, don’t include the remaining path or query string.\n- **strip_querystring** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Don’t include the query string.\n- **host_only** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")) – Only build the scheme and host.\n- **trusted_hosts** (*t.Iterable\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]* *\\|* *None*) – A list of trusted host names to validate the host against.\n\nReturn type:  \n[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")\n\n&nbsp;\n\n`werkzeug.wsgi.host_is_trusted(hostname, trusted_list)`  \nCheck if a host matches a list of trusted names.\n\nParameters:  \n- **hostname** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")) – The name to check.\n- **trusted_list** ([Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.11)\")*\\[*[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.11)\")*\\]*) – A list of valid names to match. If a name starts with a dot it will match all subdomains.\n\nReturn type:  \n[bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.11)\")\n\nChangelog\n\nNew in version 0.9.\n\n## Convenience Helpers\n\n`werkzeug.wsgi.responder(f)`  \nMarks a function as responder. Decorate a function with it and it will automatically call the return value as WSGI application.\n\nExample:\n\n``` python\n@responder\ndef application(environ, start_response):\n    return Response('Hello World!')\n```\n\nParameters:  \n**f** (*t.Callable\\[...,* *WSGIApplication\\]*) –\n\nReturn type:  \nWSGIApplication\n\n&nbsp;\n\n`werkzeug.testapp.test_app(req)`  \nSimple test application that dumps the environment. You can use it to check if Werkzeug is working properly:\n\n``` pycon\n>>> from werkzeug.serving import run_simple\n>>> from werkzeug.testapp import test_app\n>>> run_simple('localhost', 3000, test_app)\n * Running on http://localhost:3000/\n```\n\nThe application displays important information from the WSGI environment, the Python interpreter and the installed libraries.\n\nParameters:  \n**req** ([Request](../wrappers/index#werkzeug.wrappers.Request \"werkzeug.wrappers.request.Request\")) –\n\nReturn type:  \n[Response](../wrappers/index#werkzeug.wrappers.Response \"werkzeug.wrappers.response.Response\")\n\n## Bytes, Strings, and Encodings\n\nThe values in HTTP requests come in as bytes representing (or encoded to) ASCII. The WSGI specification ([**PEP 3333**](https://peps.python.org/pep-3333/)) decided to always use the `str` type to represent values. To accomplish this, the raw bytes are decoded using the ISO-8859-1 charset to produce a string.\n\nStrings in the WSGI environment are restricted to ISO-8859-1 code points. If a string read from the environment might contain characters outside that charset, it must first be decoded to bytes as ISO-8859-1, then encoded to a string using the proper charset (typically UTF-8). The reverse is done when writing to the environ. This is known as the “WSGI encoding dance”.\n\nWerkzeug provides functions to deal with this automatically so that you don’t need to be aware of the inner workings. Use the functions on this page as well as [`EnvironHeaders()`](../datastructures/index#werkzeug.datastructures.EnvironHeaders \"werkzeug.datastructures.EnvironHeaders\") to read data out of the WSGI environment.\n\nApplications should avoid manually creating or modifying a WSGI environment unless they take care of the proper encoding or decoding step. All high level interfaces in Werkzeug will apply the encoding and decoding as necessary.\n\n## Raw Request URI and Path Encoding\n\nThe `PATH_INFO` in the environ is the path value after percent-decoding. For example, the raw path `/hello%2fworld` would show up from the WSGI server to Werkzeug as `/hello/world`. This loses the information that the slash was a raw character as opposed to a path separator.\n\nThe WSGI specification ([**PEP 3333**](https://peps.python.org/pep-3333/)) does not provide a way to get the original value, so it is impossible to route some types of data in the path. The most compatible way to work around this is to send problematic data in the query string instead of the path.\n\nHowever, many WSGI servers add a non-standard environ key with the raw path. To match this behavior, Werkzeug’s test client and development server will add the raw value to both the `REQUEST_URI` and `RAW_URI` keys. If you want to route based on this value, you can use middleware to replace `PATH_INFO` in the environ before it reaches the application. However, keep in mind that these keys are non-standard and not guaranteed to be present.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/wsgi/](https://werkzeug.palletsprojects.com/en/3.0.x/wsgi/)"
- name: WSGI Protocol Linter
  id: middleware/lint/index
  summary: This module provides a middleware that performs sanity checks on the behavior of the WSGI server and application
  description: "# WSGI Protocol Linter\n\nThis module provides a middleware that performs sanity checks on the behavior of the WSGI server and application. It checks that the [**PEP 3333**](https://peps.python.org/pep-3333/) WSGI spec is properly implemented. It also warns on some common HTTP errors such as non-empty responses for 304 status codes.\n\n`class werkzeug.middleware.lint.LintMiddleware(app)`  \nWarns about common errors in the WSGI and HTTP behavior of the server and wrapped application. Some of the issues it checks are:\n\n- invalid status codes\n- non-bytes sent to the WSGI server\n- strings returned from the WSGI application\n- non-empty conditional responses\n- unquoted etags\n- relative URLs in the Location header\n- unsafe calls to wsgi.input\n- unclosed iterators\n\nError information is emitted using the [`warnings`](https://docs.python.org/3/library/warnings.html#module-warnings \"(in Python v3.11)\") module.\n\nParameters:  \n**app** (*WSGIApplication*) – The WSGI application to wrap.\n\n``` python\nfrom werkzeug.middleware.lint import LintMiddleware\napp = LintMiddleware(app)\n```\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/middleware/lint/](https://werkzeug.palletsprojects.com/en/3.0.x/middleware/lint/)"
- name: WWWAuthenticate
  id: datastructures/index#werkzeug.datastructures.WWWAuthenticate
  summary: Represents the parts of a WWW-Authenticate response header
  belongs_to: Data Structures
  description: |-
    `class werkzeug.datastructures.WWWAuthenticate(auth_type, values=None, token=None)`

    Represents the parts of a `WWW-Authenticate` response header.

    Set [`Response.www_authenticate`](../wrappers/index#werkzeug.wrappers.Response.www_authenticate "werkzeug.wrappers.Response.www_authenticate") to an instance of list of instances to set values for this header in the response. Modifying this instance will modify the header value.

    Depending on the auth scheme, either [`parameters`](#werkzeug.datastructures.WWWAuthenticate.parameters "werkzeug.datastructures.WWWAuthenticate.parameters") or [`token`](#werkzeug.datastructures.WWWAuthenticate.token "werkzeug.datastructures.WWWAuthenticate.token") should be set. The `Basic` scheme will encode `username` and `password` parameters to a token.

    For convenience, `auth["key"]` and `auth.key` both act on the [`parameters`](#werkzeug.datastructures.WWWAuthenticate.parameters "werkzeug.datastructures.WWWAuthenticate.parameters") dict, and can be used to get, set, or delete parameters. `auth.get("key")` and `"key" in auth` are also provided.

    Changelog

    Changed in version 2.3: The `token` parameter and attribute was added to support auth schemes that use a token instead of parameters, such as `Bearer`.

    Changed in version 2.3: The object is no longer a `dict`.

    Changed in version 2.3: The `on_update` parameter was removed.

    Parameters:

    - **auth_type** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")) –
    - **values** ([dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.11)")*\[*[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")*,* [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None\]* *\|* *None*) –
    - **token** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) –
- name: WWWAuthenticate.from_header()
  id: datastructures/index#werkzeug.datastructures.WWWAuthenticate.from_header
  summary: Parse a WWW-Authenticate header value and return an instance, or None if the value is empty
  belongs_to: Data Structures
  description: |-
    `classmethod from_header(value)`

    Parse a `WWW-Authenticate` header value and return an instance, or `None` if the value is empty.

    Parameters:

    **value** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)") *\|* *None*) – The header value to parse.

    Return type:

    te.Self \| None

    Changelog

    New in version 2.3.

    `property parameters: dict[str, str | None]`

    A dict of parameters for the header. Only one of this or [`token`](#werkzeug.datastructures.WWWAuthenticate.token "werkzeug.datastructures.WWWAuthenticate.token") should have a value for a given scheme.
- name: WWWAuthenticate.to_header()
  id: datastructures/index#werkzeug.datastructures.WWWAuthenticate.to_header
  summary: Produce a WWW-Authenticate header value representing this data
  belongs_to: Data Structures
  description: |-
    `to_header()`

    Produce a `WWW-Authenticate` header value representing this data.

    Return type:

    [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")

    `property token: str | None`

    A dict of parameters for the header. Only one of this or [`token`](#werkzeug.datastructures.WWWAuthenticate.token "werkzeug.datastructures.WWWAuthenticate.token") should have a value for a given scheme.

    `property type: str`

    The authorization scheme, like `basic`, `digest`, or `bearer`.
- name: X-Forwarded-For Proxy Fix
  id: middleware/proxy_fix/index
  summary: This module provides a middleware that adjusts the WSGI environ based on X-Forwarded- headers that proxies in front of an application may set
  description: "# X-Forwarded-For Proxy Fix\n\nThis module provides a middleware that adjusts the WSGI environ based on `X-Forwarded-` headers that proxies in front of an application may set.\n\nWhen an application is running behind a proxy server, WSGI may see the request as coming from that server rather than the real client. Proxies set various headers to track where the request actually came from.\n\nThis middleware should only be used if the application is actually behind such a proxy, and should be configured with the number of proxies that are chained in front of it. Not all proxies set all the headers. Since incoming headers can be faked, you must set how many proxies are setting each header so the middleware knows what to trust.\n\n`class werkzeug.middleware.proxy_fix.ProxyFix(app, x_for=1, x_proto=1, x_host=0, x_port=0, x_prefix=0)`  \nAdjust the WSGI environ based on `X-Forwarded-` that proxies in front of the application may set.\n\n- `X-Forwarded-For` sets `REMOTE_ADDR`.\n- `X-Forwarded-Proto` sets `wsgi.url_scheme`.\n- `X-Forwarded-Host` sets `HTTP_HOST`, `SERVER_NAME`, and `SERVER_PORT`.\n- `X-Forwarded-Port` sets `HTTP_HOST` and `SERVER_PORT`.\n- `X-Forwarded-Prefix` sets `SCRIPT_NAME`.\n\nYou must tell the middleware how many proxies set each header so it knows what values to trust. It is a security issue to trust values that came from the client rather than a proxy.\n\nThe original values of the headers are stored in the WSGI environ as `werkzeug.proxy_fix.orig`, a dict.\n\nParameters:  \n- **app** (*WSGIApplication*) – The WSGI application to wrap.\n- **x_for** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – Number of values to trust for `X-Forwarded-For`.\n- **x_proto** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – Number of values to trust for `X-Forwarded-Proto`.\n- **x_host** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – Number of values to trust for `X-Forwarded-Host`.\n- **x_port** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – Number of values to trust for `X-Forwarded-Port`.\n- **x_prefix** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.11)\")) – Number of values to trust for `X-Forwarded-Prefix`.\n\n``` python\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n# App is behind one proxy that sets the -For and -Host headers.\napp = ProxyFix(app, x_for=1, x_host=1)\n```\n\nChangelog\n\nChanged in version 1.0: The `num_proxies` argument and attribute; the `get_remote_addr` method; and the environ keys `orig_remote_addr`, `orig_wsgi_url_scheme`, and `orig_http_host` were removed.\n\nChanged in version 0.15: All headers support multiple values. Each header is configured with a separate number of trusted proxies.\n\nChanged in version 0.15: Original WSGI environ values are stored in the `werkzeug.proxy_fix.orig` dict.\n\nChanged in version 0.15: Support `X-Forwarded-Port` and `X-Forwarded-Prefix`.\n\nChanged in version 0.15: `X-Forwarded-Host` and `X-Forwarded-Port` modify `SERVER_NAME` and `SERVER_PORT`.\n\n© 2007 Pallets  \nLicensed under the BSD 3-clause License.  \n[https://werkzeug.palletsprojects.com/en/3.0.x/middleware/proxy_fix/](https://werkzeug.palletsprojects.com/en/3.0.x/middleware/proxy_fix/)"
