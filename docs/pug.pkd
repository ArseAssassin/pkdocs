---
name: Pug
slug: pug
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  © Pug authors
  Licensed under the MIT license.
  https://pugjs.org/api/getting-started.html
homepage: https://pugjs.org/

---
- name: API Reference
  id: api/reference
  summary: This page details how to render Pug using the JavaScript API
  description: "# API Reference\n\nThis page details how to render Pug using the JavaScript API.\n\n## Options\n\nAll API methods accept the following set of options:\n\nfilename: string  \nThe name of the file being compiled. Used in exceptions, and required for relative `include`\\s and `extend`\\s. Defaults to `'Pug'`.\n\nbasedir: string  \nThe root directory of all absolute inclusion.\n\ndoctype: string  \nIf the `doctype` is not specified as part of the template, you can specify it here. It is sometimes useful to get self-closing tags and remove mirroring of boolean attributes. See [doctype documentation](../language/doctype#doctype-option) for more information.\n\npretty: boolean \\| string  \n\\[Deprecated.\\] Adds whitespace to the resulting HTML to make it easier for a human to read using `'  '` as indentation. If a string is specified, that will be used as indentation instead (e.g. `'\\t'`). We strongly recommend against using this option. Too often, it creates subtle bugs in your templates because of the way it alters the interpretation and rendering of whitespace, and so this feature is going to be removed. Defaults to `false`.\n\nfilters: object  \nHash table of [custom filters](../language/filters#custom-filters). Defaults to `undefined`.\n\nself: boolean  \nUse a `self` namespace to hold the locals. It will speed up the compilation, but instead of writing `variable` you will have to write `self.variable` to access a property of the locals object. Defaults to `false`.\n\ndebug: boolean  \nIf set to `true`, the tokens and function body are logged to stdout.\n\ncompileDebug: boolean  \nIf set to `true`, the function source will be included in the compiled template for better error messages (sometimes useful in development). It is enabled by default, unless used with [Express](https://expressjs.com/) in production mode.\n\nglobals: Array\\<string\\>  \nAdd a list of global names to make accessible in templates.\n\ncache: boolean  \nIf set to `true`, compiled functions are cached. `filename` must be set as the cache key. Only applies to `render` functions. Defaults to `false`.\n\ninlineRuntimeFunctions: boolean  \nInline runtime functions instead of `require`-ing them from a shared version. For `compileClient` functions, the default is `true` (so that one does not have to include the runtime). For all other compilation or rendering types, the default is `false`.\n\nname: string  \nThe name of the template function. Only applies to `compileClient` functions. Defaults to `'template'`.\n\n## Methods\n\n### pug.compile(source, ?options)\n\nCompile a Pug template to a function, which can be rendered multiple times with different locals.\n\nsource: string  \nThe source Pug template to compile\n\noptions: ?options  \nAn options object\n\nreturns: function  \nA function to generate the HTML from an object containing locals\n\n``` cm-s-default\nvar pug = require('pug');\n\n// Compile a function\nvar fn = pug.compile('string of pug', options);\n\n// Render the function\nvar html = fn(locals);\n// => '<string>of pug</string>'\n```\n\n### pug.compileFile(path, ?options)\n\nCompile a Pug template from a file to a function, which can be rendered multiple times with different locals.\n\npath: string  \nThe path to a Pug file\n\noptions: ?options  \nAn options object\n\n&nbsp;\n\nreturns: function  \nA function to generate the HTML from an object containing locals\n\n``` cm-s-default\nvar pug = require('pug');\n\n// Compile a function\nvar fn = pug.compileFile('path to pug file', options);\n\n// Render the function\nvar html = fn(locals);\n// => '<string>of pug</string>'\n```\n\n### pug.compileClient(source, ?options)\n\nCompile a Pug template to a string of JavaScript, which can be used client side.\n\nsource: string  \nThe Pug template to compile\n\noptions: ?options  \nAn options object\n\n&nbsp;\n\nreturns: string  \nA string of JavaScript representing a function\n\n``` cm-s-default\nvar pug = require('pug');\n\n// Compile a function\nvar fn = pug.compileClient('string of pug', options);\n\n// Render the function\nvar html = fn(locals);\n// => 'function template(locals) { return \"<string>of pug</string>\"; }'\n```\n\n### pug.compileClientWithDependenciesTracked(source, ?options)\n\nSame as [`compileClient`](#pugcompilesource-options), except that this method returns an object of the form:\n\n``` cm-s-default\n{\n  'body': 'function (locals) {...}',\n  'dependencies': ['filename.pug']\n}\n```\n\nYou should only use this method if you need `dependencies` to implement something like watching for changes to the Pug files.\n\n### pug.compileFileClient(path, ?options)\n\nCompile a Pug template file to a string of JavaScript that can be used client side.\n\npath: string  \nThe path to a Pug file\n\noptions: ?options  \nAn options object\n\noptions.name: string  \nIf you pass a `.name` property on the options object, it will be used as the name of your client side template function.\n\n&nbsp;\n\nreturns: string  \nA JavaScript function body.\n\nFirst, our template file.\n\n``` cm-s-default\nh1 This is a Pug template\nh2 By #{author}\n```\n\nThen, we compile the Pug file into a function string.\n\n``` cm-s-default\nvar fs = require('fs');\nvar pug = require('pug');\n\n// Compile the template to a function string\nvar jsFunctionString = pug.compileFileClient('/path/to/pugFile.pug', {name: \"fancyTemplateFun\"});\n\n// Maybe you want to compile all of your templates to a templates.js file and serve it to the client\nfs.writeFileSync(\"templates.js\", jsFunctionString);\n```\n\nHere’s what the output function string looks like (written to `templates.js`).\n\n``` cm-s-default\nfunction fancyTemplateFun(locals) {\n  var buf = [];\n  var pug_mixins = {};\n  var pug_interp;\n\n  var locals_for_with = (locals || {});\n\n  (function (author) {\n    buf.push(\"<h1>This is a Pug template</h1><h2>By \"\n      + (pug.escape((pug_interp = author) == null ? '' : pug_interp))\n      + \"</h2>\");\n  }.call(this, \"author\" in locals_for_with ?\n    locals_for_with.author : typeof author !== \"undefined\" ?\n      author : undefined)\n  );\n\n  return buf.join(\"\");\n}\n```\n\n``` cm-s-default\n<!DOCTYPE html>\n<html>\n  <head>\n    <script src=\"/templates.js\"></script>\n  </head>\n\n  <body>\n    <h1>This is one fancy template.</h1>\n\n    <script type=\"text/javascript\">\n      var html = window.fancyTemplateFun({author: \"enlore\"});\n      var div = document.createElement(\"div\");\n      div.innerHTML = html;\n      document.body.appendChild(div);\n    </script>\n  </body>\n</html>\n```\n\n### pug.render(source, ?options, ?callback)\n\nsource: string  \nThe source Pug template to render\n\noptions: ?options  \nAn options object, also used as the locals object\n\ncallback: ?function  \nNode.js-style callback receiving the rendered results. **This callback is called synchronously.**\n\n&nbsp;\n\nreturns: string  \nThe resulting HTML string\n\n``` cm-s-default\nvar pug = require('pug');\n\nvar html = pug.render('string of pug', options);\n// => '<string>of pug</string>'\n```\n\n### pug.renderFile(path, ?options, ?callback)\n\npath: string  \nThe path to the Pug file to render\n\noptions: ?options  \nAn options object, also used as the locals object\n\ncallback: ?function  \nNode.js-style callback receiving the rendered results. **This callback is called synchronously.**\n\n&nbsp;\n\nreturns: string  \nThe resulting HTML string\n\n``` cm-s-default\nvar pug = require('pug');\n\nvar html = pug.renderFile('path/to/file.pug', options);\n// ...\n```\n\n## Properties\n\n### pug.filters\n\nA hash table of [custom filters](../language/filters#custom-filters).\n\nThis object has the same semantics as the [`filters` option](#options), but applies globally to all Pug compilation. When a filter is present in both `pug.filters` and `options.filters`, the `filters` option takes precedence.\n\n###### Deprecated\n\nThis property has been deprecated in favor of the [`filters` option](#options).\n\n© Pug authors  \nLicensed under the MIT license.  \n[https://pugjs.org/api/reference.html](https://pugjs.org/api/reference.html)"
- name: Attributes
  id: language/attributes
  summary: Tag attributes look similar to HTML (with optional commas), but their values are just regular JavaScript
  description: "# Attributes\n\nTag attributes look similar to HTML (with optional commas), but their values are just regular JavaScript.\n\n(NOTE: Examples on this page use the pipe character (`|`) for [whitespace control](plain-text#whitespace-control).)\n\n    a(href='//google.com') Google\n    |\n    |\n    a(class='button' href='//google.com') Google\n    |\n    |\n    a(class='button', href='//google.com') Google\n\n    <a href=\"//google.com\">Google</a>\n    <a class=\"button\" href=\"//google.com\">Google</a>\n    <a class=\"button\" href=\"//google.com\">Google</a>\n\nNormal JavaScript expressions work fine, too:\n\n    - var authenticated = true\n    body(class=authenticated ? 'authed' : 'anon')\n\n    <body class=\"authed\"></body>\n\n## Multiline Attributes\n\nIf you have many attributes, you can also spread them across many lines:\n\n    input(\n      type='checkbox'\n      name='agreement'\n      checked\n    )\n\n    <input type=\"checkbox\" name=\"agreement\" checked=\"checked\" />\n\nIf your JavaScript runtime supports ES2015 [template strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) (including Node.js/io.js 1.0.0 and later), you can use that syntax for attributes. This is really useful for attributes with really long values:\n\n    input(data-json=`\n      {\n        \"very-long\": \"piece of \",\n        \"data\": true\n      }\n    `)\n\n    <input data-json=\"\n      {\n        &quot;very-long&quot;: &quot;piece of &quot;,\n        &quot;data&quot;: true\n      }\n    \" />\n\n## Quoted Attributes\n\nIf your attribute name contains odd characters that might interfere with JavaScript syntax, either quote it using `\"\"` or `''`, or use commas to separate different attributes. Examples of such characters include `[]` and `()` (frequently used in Angular 2).\n\n    //- In this case, `(click)` is treated as a\n    //- function call instead of a attribute name,\n    //- resulting in the unusual error.\n    div(class='div-class' (click)='play()')\n\n    index.pug:4:11\n        2| //- function call instead of a attribute name,\n        3| //- resulting in the unusual error.\n      > 4| div(class='div-class' (click)='play()')\n    -----------------^\n\n    Syntax Error: Assigning to rvalue\n\n    div(class='div-class', (click)='play()')\n    div(class='div-class' '(click)'='play()')\n\n    <div class=\"div-class\" (click)=\"play()\"></div>\n    <div class=\"div-class\" (click)=\"play()\"></div>\n\n## Attribute Interpolation\n\n###### Caution\n\nPrevious versions of Pug/Jade supported an interpolation syntax such as:\n\n``` cm-s-default\na(href=\"/#{url}\") Link\n```\n\nThis syntax is **no longer supported.** Alternatives are found below. (Check our [migration guide](../api/migration-v2) for more information on other incompatibilities between Pug v2 and previous versions.)\n\nHere are some alternatives you can use to include variables in your attribute:\n\n1.  Simply write the attribute in JavaScript:\n\n        - var url = 'pug-test.html';\n        a(href='/' + url) Link\n        |\n        |\n        - url = 'https://example.com/'\n        a(href=url) Another link\n\n        <a href=\"/pug-test.html\">Link</a>\n        <a href=\"https://example.com/\">Another link</a>\n\n2.  If your JavaScript runtime supports ES2015 [template strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) (including Node.js/io.js 1.0.0 and later), you can also use its syntax to simplify your attributes:\n\n        - var btnType = 'info'\n        - var btnSize = 'lg'\n        button(type='button' class='btn btn-' + btnType + ' btn-' + btnSize)\n        |\n        |\n        button(type='button' class=`btn btn-${btnType} btn-${btnSize}`)\n\n        <button class=\"btn btn-info btn-lg\" type=\"button\"></button>\n        <button class=\"btn btn-info btn-lg\" type=\"button\"></button>\n\n## Unescaped Attributes\n\nBy default, all attributes are escaped—that is,special characters are replaced with escape sequences—to prevent attacks (such as cross site scripting). If you need to use special characters, use `!=` instead of `=`.\n\n    div(escaped=\"<code>\")\n    div(unescaped!=\"<code>\")\n\n    <div escaped=\"&lt;code&gt;\"></div>\n    <div unescaped=\"<code>\"></div>\n\n###### Caution\n\n**Unescaped buffered code can be dangerous.** You must be sure to sanitize any user inputs to avoid [cross-site scripting](https://en.wikipedia.org/wiki/Cross-site_scripting).\n\n## Boolean Attributes\n\nBoolean attributes are mirrored by Pug. Boolean values (`true` and `false`) are accepted. When no value is specified `true` is assumed.\n\n    input(type='checkbox' checked)\n    |\n    |\n    input(type='checkbox' checked=true)\n    |\n    |\n    input(type='checkbox' checked=false)\n    |\n    |\n    input(type='checkbox' checked=true.toString())\n\n    <input type=\"checkbox\" checked=\"checked\" />\n    <input type=\"checkbox\" checked=\"checked\" />\n    <input type=\"checkbox\" />\n    <input type=\"checkbox\" checked=\"true\" />\n\nIf the doctype is `html`, Pug knows not to mirror the attribute, and instead uses the terse style (understood by all browsers).\n\n    doctype html\n    |\n    |\n    input(type='checkbox' checked)\n    |\n    |\n    input(type='checkbox' checked=true)\n    |\n    |\n    input(type='checkbox' checked=false)\n    |\n    |\n    input(type='checkbox' checked=true && 'checked')\n\n    <!DOCTYPE html>\n    <input type=\"checkbox\" checked>\n    <input type=\"checkbox\" checked>\n    <input type=\"checkbox\">\n    <input type=\"checkbox\" checked=\"checked\">\n\n## Style Attributes\n\nThe `style` attribute can be a string, like any normal attribute; but it can also be an object, which is handy when styles are generated by JavaScript.\n\n    a(style={color: 'red', background: 'green'})\n\n    <a style=\"color:red;background:green;\"></a>\n\n## Class Attributes\n\nThe `class` attribute can be a string, like any normal attribute; but it can also be an array of class names, which is handy when generated from JavaScript.\n\n    - var classes = ['foo', 'bar', 'baz']\n    a(class=classes)\n    |\n    |\n    //- the class attribute may also be repeated to merge arrays\n    a.bang(class=classes class=['bing'])\n\n    <a class=\"foo bar baz\"></a>\n    <a class=\"bang foo bar baz bing\"></a>\n\nIt can also be an object which maps class names to `true` or `false` values. This is useful for applying conditional classes\n\n    - var currentUrl = '/about'\n    a(class={active: currentUrl === '/'} href='/') Home\n    |\n    |\n    a(class={active: currentUrl === '/about'} href='/about') About\n\n    <a href=\"/\">Home</a>\n    <a class=\"active\" href=\"/about\">About</a>\n\n## Class Literal\n\nClasses may be defined using a `.classname` syntax:\n\n    a.button\n\n    <a class=\"button\"></a>\n\nSince `div`'s are such a common choice of tag, it is the default if you omit the tag name:\n\n    .content\n\n    <div class=\"content\"></div>\n\n## ID Literal\n\nIDs may be defined using a `#idname` syntax:\n\n    a#main-link\n\n    <a id=\"main-link\"></a>\n\nSince `div`'s are such a common choice of tag, it is the default if you omit the tag name:\n\n    #content\n\n    <div id=\"content\"></div>\n\n## &attributes\n\nPronounced as “and attributes”, the `&attributes` syntax can be used to explode an object into attributes of an element.\n\n    div#foo(data-bar=\"foo\")&attributes({'data-foo': 'bar'})\n\n    <div id=\"foo\" data-bar=\"foo\" data-foo=\"bar\"></div>\n\nThe above example uses an object literal. But you can also use a variable whose value is an object, too. (See also: [Mixin Attributes](mixins#mixin-attributes)).\n\n    - var attributes = {};\n    - attributes.class = 'baz';\n    div#foo(data-bar=\"foo\")&attributes(attributes)\n\n    <div class=\"baz\" id=\"foo\" data-bar=\"foo\"></div>\n\n###### Caution\n\n**Attributes applied using `&attributes` are not automatically escaped.** You must be sure to sanitize any user inputs to avoid [cross-site scripting](https://en.wikipedia.org/wiki/Cross-site_scripting) (XSS). If passing in `attributes` from a mixin call, this is done automatically.\n\n© Pug authors  \nLicensed under the MIT license.  \n[https://pugjs.org/language/attributes.html](https://pugjs.org/language/attributes.html)"
- name: Case
  id: language/case
  summary: The case statement is a shorthand for JavaScript’s switch statement
  description: "# Case\n\nThe `case` statement is a shorthand for JavaScript’s `switch` statement. It takes the following form:\n\n    - var friends = 10\n    case friends\n      when 0\n        p you have no friends\n      when 1\n        p you have a friend\n      default\n        p you have #{friends} friends\n\n    <p>you have 10 friends</p>\n\n## Case Fall Through\n\nYou can use fall through, just as you would in a JavaScript `switch` statement.\n\n    - var friends = 0\n    case friends\n      when 0\n      when 1\n        p you have very few friends\n      default\n        p you have #{friends} friends\n\n    <p>you have very few friends</p>\n\nThe difference, however, is a fall through in JavaScript happens whenever a `break` statement is not explicitly included; in Pug, it only happens when a block is completely missing.\n\nIf you would like to not output anything in a specific case, add an explicit unbuffered `break`:\n\n    - var friends = 0\n    case friends\n      when 0\n        - break\n      when 1\n        p you have very few friends\n      default\n        p you have #{friends} friends\n\n## Block Expansion\n\nBlock expansion may also be used:\n\n    <p>you have a friend</p>\n\n© Pug authors  \nLicensed under the MIT license.  \n[https://pugjs.org/language/case.html](https://pugjs.org/language/case.html)"
- name: Code
  id: language/code
  summary: Pug allows you to write inline JavaScript code in your templates
  description: "# Code\n\nPug allows you to write inline JavaScript code in your templates. There are three types of code: Unbuffered, Buffered, and Unescaped Buffered.\n\n## Unbuffered Code\n\nUnbuffered code starts with `-`. It does not directly add anything to the output.\n\n    - for (var x = 0; x < 3; x++)\n      li item\n\n    <li>item</li>\n    <li>item</li>\n    <li>item</li>\n\nPug also supports block unbuffered code:\n\n    -\n      var list = [\"Uno\", \"Dos\", \"Tres\",\n              \"Cuatro\", \"Cinco\", \"Seis\"]\n    each item in list\n      li= item\n\n    <li>Uno</li>\n    <li>Dos</li>\n    <li>Tres</li>\n    <li>Cuatro</li>\n    <li>Cinco</li>\n    <li>Seis</li>\n\n## Buffered Code\n\nBuffered code starts with `=`. It evaluates the JavaScript expression and outputs the result. For security, buffered code is first HTML escaped.\n\n    p\n      = 'This code is <escaped>!'\n\n    <p>This code is &lt;escaped&gt;!</p>\n\nIt can also be written inline (after any attributes), and supports the full range of JavaScript expressions:\n\n    p= 'This code is' + ' <escaped>!'\n    p(style=\"background: blue\")= 'A message with a ' + 'blue' + ' background'\n\n    <p>This code is &lt;escaped&gt;!</p>\n    <p style=\"background: blue\">A message with a blue background</p>\n\n## Unescaped Buffered Code\n\nUnescaped buffered code starts with `!=`. It evaluates the JavaScript expression and outputs the result. Unescaped buffered code does not perform any escaping, so is unsafe for user input:\n\n    p\n      != 'This code is <strong>not</strong> escaped!'\n\n    <p>This code is <strong>not</strong> escaped!</p>\n\nUnescaped buffered code can also be written inline with attributes, and supports the full range of JavaScript expressions:\n\n    p!= 'This code is' + ' <strong>not</strong> escaped!'\n\n    <p>This code is <strong>not</strong> escaped!</p>\n\n###### Caution\n\n**Unescaped buffered code can be dangerous.** You must be sure to sanitize any user inputs to avoid [cross-site scripting](https://en.wikipedia.org/wiki/Cross-site_scripting) (XSS).\n\n© Pug authors  \nLicensed under the MIT license.  \n[https://pugjs.org/language/code.html](https://pugjs.org/language/code.html)"
- name: Comments
  id: language/comments
  summary: Buffered comments look the same as single-line JavaScript comments
  description: "# Comments\n\nBuffered comments look the same as single-line JavaScript comments. They act sort of like markup tags, producing *HTML* comments in the rendered page.\n\nLike tags, buffered comments must appear on their own line.\n\n    // just some paragraphs\n    p foo\n    p bar\n\n    <!-- just some paragraphs-->\n    <p>foo</p>\n    <p>bar</p>\n\nPug also supports unbuffered comments. Simply add a hyphen (`-`) to the start of the comment.\n\nThese are only for commenting on the Pug code itself, and *do not* appear in the rendered HTML.\n\n    //- will not output within markup\n    p foo\n    p bar\n\n    <p>foo</p>\n    <p>bar</p>\n\n## Block Comments\n\nBlock comments work, too:\n\n    body\n      //-\n        Comments for your template writers.\n        Use as much text as you want.\n      //\n        Comments for your HTML readers.\n        Use as much text as you want.\n\n    <body>\n      <!--Comments for your HTML readers.\n    Use as much text as you want.-->\n    </body>\n\n## Conditional Comments\n\nPug does not have any special syntax for conditional comments. (Conditional comments are a peculiar method of adding fallback markup for old versions of Internet Explorer.)\n\nHowever, since all lines beginning with `<` are treated as [plain text](plain-text), normal HTML-style conditional comments work just fine.\n\n    doctype html\n\n    <!--[if IE 8]>\n    <html lang=\"en\" class=\"lt-ie9\">\n    <![endif]-->\n    <!--[if gt IE 8]><!-->\n    <html lang=\"en\">\n    <!--<![endif]-->\n\n    body\n      p Supporting old web browsers is a pain.\n\n    </html>\n\n    <!DOCTYPE html>\n    <!--[if IE 8]>\n    <html lang=\"en\" class=\"lt-ie9\">\n    <![endif]-->\n    <!--[if gt IE 8]><!-->\n    <html lang=\"en\">\n    <!--<![endif]-->\n\n    <body>\n      <p>Supporting old web browsers is a pain.</p>\n    </body>\n\n    </html>\n\n© Pug authors  \nLicensed under the MIT license.  \n[https://pugjs.org/language/comments.html](https://pugjs.org/language/comments.html)"
- name: Conditionals
  id: language/conditionals
  summary: Pug’s first-class conditional syntax allows for optional parentheses
  description: "# Conditionals\n\nPug’s first-class conditional syntax allows for optional parentheses.\n\nIf you’re coming from Pug v1, you may now omit the leading `-`. Otherwise, it’s identical (just regular JavaScript):\n\n    - var user = {description: 'foo bar baz'}\n    - var authorised = false\n    #user\n      if user.description\n        h2.green Description\n        p.description= user.description\n      else if authorised\n        h2.blue Description\n        p.description.\n          User has no description,\n          why not add one...\n      else\n        h2.red Description\n        p.description User has no description\n\n    <div id=\"user\">\n      <h2 class=\"green\">Description</h2>\n      <p class=\"description\">foo bar baz</p>\n    </div>\n\nPug also provides the conditional `unless`, which works like a negated `if`. The following are equivalent:\n\n``` cm-s-default\nunless user.isAnonymous\n  p You're logged in as #{user.name}\n```\n\n``` cm-s-default\nif !user.isAnonymous\n  p You're logged in as #{user.name}\n```\n\n© Pug authors  \nLicensed under the MIT license.  \n[https://pugjs.org/language/conditionals.html](https://pugjs.org/language/conditionals.html)"
- name: Doctype
  id: language/doctype
  summary: In addition to being buffered in the output, a doctype in Pug can affect compilation in other ways
  description: "# Doctype\n\n    doctype html\n\n    <!DOCTYPE html>\n\n## Doctype Shortcuts\n\nThere are shortcuts for commonly used doctypes:\n\ndoctype html  \n``` cm-s-default\n<!DOCTYPE html>\n```\n\ndoctype xml  \n``` cm-s-default\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n```\n\ndoctype transitional  \n``` cm-s-default\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n```\n\ndoctype strict  \n``` cm-s-default\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n```\n\ndoctype frameset  \n``` cm-s-default\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">\n```\n\ndoctype 1.1  \n``` cm-s-default\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n```\n\ndoctype basic  \n``` cm-s-default\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">\n```\n\ndoctype mobile  \n``` cm-s-default\n<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">\n```\n\ndoctype plist  \n``` cm-s-default\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n```\n\n## Custom Doctypes\n\nYou can also use your own literal custom doctype:\n\n    doctype html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\"\n\n    <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\">\n\n## Doctype Option\n\nIn addition to being buffered in the output, a doctype in Pug can affect compilation in other ways. For example, whether self-closing tags end with `/>` or `>` depends on whether HTML or XML is specified. The output of [boolean attributes](attributes#boolean-attributes) may be affected as well.\n\nIf, for whatever reason, it is not possible to use the `doctype` keyword (e.g., just rendering HTML fragments), but you would still like to specify the doctype of the template, you can do so via the [`doctype` option](../api/reference#options).\n\n``` cm-s-default\nvar pug = require('pug');\n\nvar source = 'img(src=\"foo.png\")';\n\npug.render(source);\n// => '<img src=\"foo.png\"/>'\n\npug.render(source, {doctype: 'xml'});\n// => '<img src=\"foo.png\"></img>'\n\npug.render(source, {doctype: 'html'});\n// => '<img src=\"foo.png\">'\n```\n\n© Pug authors  \nLicensed under the MIT license.  \n[https://pugjs.org/language/doctype.html](https://pugjs.org/language/doctype.html)"
- name: Express Integration
  id: api/express
  summary: Pug fully integrates with Express, a popular Node.js web framework, as a supported view engine
  description: "# Express Integration\n\nPug fully integrates with [Express](https://expressjs.com/), a popular Node.js web framework, as a supported view engine. Check out Express’s excellent [guide](https://expressjs.com/en/guide/using-template-engines.html) for how to integrate Pug with Express.\n\n## Production Defaults\n\nIn Express, the environmental variable `NODE_ENV` is designed to inform the web application of the execution environment: whether it is in development or in production. Express and Pug automatically modify the defaults of a few options in production environment, to provide a better out-of-the-box experience for users.\n\nSpecifically, when `process.env.NODE_ENV` is set to `'production'`, and Pug is used with Express, the [`compileDebug`](reference#options) option is `false` by default, while the [`cache`](reference#options) option is `true`.\n\nTo override the defaults for `compileDebug` and `cache`, you can set the respective property in `app.locals` or `res.locals` objects to `true` or `false`. The `cache` option can also be overriden through Express’s `app.disable`/`enable('view cache')`.\n\nFor more details, check Express’s [API reference](https://expressjs.com/en/api.html).\n\n© Pug authors  \nLicensed under the MIT license.  \n[https://pugjs.org/api/express.html](https://pugjs.org/api/express.html)"
- name: Filters
  id: language/filters
  summary: Filters let you use other languages in Pug templates
  description: "# Filters\n\nFilters let you use other languages in Pug templates. They take a block of plain text as an input.\n\nTo pass options to the filter, add them inside parentheses after the filter name (just as you would do with [tag attributes](attributes)): `:less(ieCompat=false)`.\n\nAll [JSTransformer modules](https://www.npmjs.com/browse/keyword/jstransformer) can be used as Pug filters. Popular filters include `:babel`, `:uglify-js`, `:scss`, and `:markdown-it`. Check out the documentation for the JSTransformer for the options supported for the specific filter.\n\nIf you can’t find an appropriate filter for your use case, you can write your own [custom filter](#custom-filters).\n\nFor example, if you want to be able to use CoffeeScript and Markdown (using Markdown-it renderer) in your Pug template, you would first make sure that these features are installed:\n\n``` cm-s-default\n$ npm install --save jstransformer-coffee-script\n$ npm install --save jstransformer-markdown-it\n```\n\nNow, you should be able to render the following template:\n\n    :markdown-it(linkify langPrefix='highlight-')\n      # Markdown\n\n      Markdown document with http://links.com and\n\n      ```js\n      var codeBlocks;\n      ```\n    script\n      :coffee-script\n        console.log 'This is coffee script'\n\n    <h1>Markdown</h1>\n    <p>Markdown document with <a href=\"http://links.com\">http://links.com</a> and</p>\n    <pre><code class=\"highlight-js\">var codeBlocks;\n    </code></pre>\n    <script>\n      (function() {\n        console.log('This is coffee script');\n\n      }).call(this);\n    </script>\n\n###### Warning\n\n**Filters are rendered at compile time.** This makes them fast, but it also means that they cannot support dynamic content or options.\n\nBy default, compilation in the browser does not have access to JSTransformer-based filters, unless the JSTransformer modules are explicitly packed and made available through a CommonJS platform (such as Browserify or Webpack). In fact, the page you are reading right now uses Browserify to make the filters available in the browser.\n\nTemplates pre-compiled on the server do not have this limitation.\n\n## Inline Syntax\n\nIf the content of the filter is short, one can even use filters as if they are tags:\n\n    p\n      :markdown-it(inline) **BOLD TEXT**\n\n    p.\n      In the midst of a large amount of plain\n      text, suddenly a wild #[:markdown-it(inline) *Markdown*]\n      appeared.\n\n    <p><strong>BOLD TEXT</strong></p>\n    <p>In the midst of a large amount of plain\n      text, suddenly a wild <em>Markdown</em>\n      appeared.</p>\n\n## Filtered Includes\n\nYou can also apply filters to external files, using the [include syntax](includes#including-filtered-text).\n\n## Nested Filters\n\nYou can apply multiple filters on the same block of text. To do so, simply specify the filters on the same line.\n\nThe filters are applied in reverse order. The text is first passed to the last filter; then, the result is passed to the second last filter, and so on.\n\nIn the following example, the script is first transformed by `babel`, and then by `cdata-js`.\n\n    script\n      :cdata-js:babel(presets=['es2015'])\n        const myFunc = () => `This is ES2015 in a CD${'ATA'}`;\n\n    <script>\n      //<![CDATA[\n      'use strict';\n\n      var myFunc = function myFunc() {\n        return 'This is ES2015 in a CD' + 'ATA';\n      };\n      //]]>\n    </script>\n\n## Custom Filters\n\nYou can add your own filters to Pug via the [`filters` option](../api/reference#options).\n\n``` cm-s-default\noptions.filters = {\n  'my-own-filter': function (text, options) {\n    if (options.addStart) text = 'Start\\n' + text;\n    if (options.addEnd)   text = text + '\\nEnd';\n    return text;\n  }\n};\n```\n\n``` cm-s-default\np\n  :my-own-filter(addStart addEnd)\n    Filter\n    Body\n```\n\n``` cm-s-default\n<p>\n  Start\n  Filter\n  Body\n  End\n</p>\n```\n\n© Pug authors  \nLicensed under the MIT license.  \n[https://pugjs.org/language/filters.html](https://pugjs.org/language/filters.html)"
- name: Includes
  id: language/includes
  summary: Includes allow you to insert the contents of one Pug file into another
  description: "# Includes\n\nIncludes allow you to insert the contents of one Pug file into another.\n\n    //- index.pug\n    doctype html\n    html\n      include includes/head.pug\n      body\n        h1 My Site\n        p Welcome to my super lame site.\n        include includes/foot.pug\n\n    //- includes/head.pug\n    head\n      title My Site\n      script(src='/javascripts/jquery.js')\n      script(src='/javascripts/app.js')\n\n    //- includes/foot.pug\n    footer#footer\n      p Copyright (c) foobar\n\n    <!DOCTYPE html>\n    <html>\n\n    <head>\n      <title>My Site</title>\n      <script src=\"/javascripts/jquery.js\"></script>\n      <script src=\"/javascripts/app.js\"></script>\n    </head>\n\n    <body>\n      <h1>My Site</h1>\n      <p>Welcome to my super lame site.</p>\n      <footer id=\"footer\">\n        <p>Copyright (c) foobar</p>\n      </footer>\n    </body>\n\n    </html>\n\nIf the path is absolute (e.g., `include /root.pug`), it is resolved by prepending `options.basedir`. Otherwise, paths are resolved relative to the current file being compiled.\n\nIf no file extension is given, `.pug` is automatically appended to the file name.\n\n## Including Plain Text\n\nIncluding non-Pug files simply includes their raw text.\n\n    //- index.pug\n    doctype html\n    html\n      head\n        style\n          include style.css\n      body\n        h1 My Site\n        p Welcome to my super lame site.\n        script\n          include script.js\n\n    /* style.css */\n    h1 {\n      color: red;\n    }\n\n    // script.js\n    console.log('You are awesome');\n\n    <!DOCTYPE html>\n    <html>\n\n    <head>\n      <style>\n        /* style.css */\n        h1 {\n          color: red;\n        }\n      </style>\n    </head>\n\n    <body>\n      <h1>My Site</h1>\n      <p>Welcome to my super lame site.</p>\n      <script>\n        // script.js\n        console.log('You are awesome');\n      </script>\n    </body>\n\n    </html>\n\n## Including Filtered Text\n\nYou can combine filters with includes, allowing you to filter things as you include them.\n\n``` cm-s-default\n//- index.pug\ndoctype html\nhtml\n  head\n    title An Article\n  body\n    include:markdown-it article.md\n```\n\n``` cm-s-default\n# article.md\n\nThis is an article written in markdown.\n```\n\n``` cm-s-default\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>An Article</title>\n  </head>\n  <body>\n    <h1>article.md</h1>\n    <p>This is an article written in markdown.</p>\n  </body>\n</html>\n```\n\n© Pug authors  \nLicensed under the MIT license.  \n[https://pugjs.org/language/includes.html](https://pugjs.org/language/includes.html)"
- name: Interpolation
  id: language/interpolation
  summary: Pug provides operators for a variety of your different interpolative needs
  description: "# Interpolation\n\nPug provides operators for a variety of your different interpolative needs.\n\n## String Interpolation, Escaped\n\nConsider the placement of the following template’s locals: `title`, `author`, and `theGreat`.\n\n    - var title = \"On Dogs: Man's Best Friend\";\n    - var author = \"enlore\";\n    - var theGreat = \"<span>escape!</span>\";\n\n    h1= title\n    p Written with love by #{author}\n    p This will be safe: #{theGreat}\n\n    <h1>On Dogs: Man's Best Friend</h1>\n    <p>Written with love by enlore</p>\n    <p>This will be safe: &lt;span&gt;escape!&lt;/span&gt;</p>\n\n`title` follows the basic pattern for evaluating a template local, but the code in between `#{` and `}` is evaluated, escaped, and the result buffered into the output of the template being rendered.\n\nThis can be any valid Javascript expression, so you can do whatever feels good.\n\n    - var msg = \"not my inside voice\";\n    p This is #{msg.toUpperCase()}\n\n    <p>This is NOT MY INSIDE VOICE</p>\n\nPug is smart enough to figure out where the expression ends, so you can even include `}` without escaping.\n\n    p No escaping for #{'}'}!\n\n    <p>No escaping for }!</p>\n\nIf you need to include a verbatim `#{`, you can either escape it, or use interpolation. (So meta!)\n\n    p Escaping works with \\#{interpolation}\n    p Interpolation works with #{'#{interpolation}'} too!\n\n    <p>Escaping works with #{interpolation}</p>\n    <p>Interpolation works with #{interpolation} too!</p>\n\n## String Interpolation, Unescaped\n\nYou don’t *have* to play it safe. You can buffer unescaped values into your templates, too.\n\n    - var riskyBusiness = \"<em>Some of the girls are wearing my mother's clothing.</em>\";\n    .quote\n      p Joel: !{riskyBusiness}\n\n    <div class=\"quote\">\n      <p>Joel: <em>Some of the girls are wearing my mother's clothing.</em></p>\n    </div>\n\n###### Caution\n\n**Keep in mind that buffering unescaped content into your templates can be mighty risky if that content comes fresh from your users.** Never trust user input!\n\n## Tag Interpolation\n\nInterpolation works not only on JavaScript values, but on Pug as well. Just use the tag interpolation syntax, like so:\n\n    p.\n      This is a very long and boring paragraph that spans multiple lines.\n      Suddenly there is a #[strong strongly worded phrase] that cannot be\n      #[em ignored].\n    p.\n      And here's an example of an interpolated tag with an attribute:\n      #[q(lang=\"es\") ¡Hola Mundo!]\n\n    <p>This is a very long and boring paragraph that spans multiple lines.\n      Suddenly there is a <strong>strongly worded phrase</strong> that cannot be\n      <em>ignored</em>.</p>\n    <p>And here's an example of an interpolated tag with an attribute:\n      <q lang=\"es\">¡Hola Mundo!</q></p>\n\nYou could accomplish the same thing by writing an HTML tag inline with your Pug…but then, what’s the point of writing the Pug? Wrap an inline Pug tag declaration in `#[` and `]`, and it’ll be evaluated and buffered into the content of its containing tag.\n\n### Whitespace Control\n\nThe tag interpolation syntax is especially useful for inline tags, where whitespace before and after the tag is significant.\n\nBy default, however, Pug removes all spaces before and after tags. Check out the following example:\n\n    p\n      | If I don't write the paragraph with tag interpolation, tags like\n      strong strong\n      | and\n      em em\n      | might produce unexpected results.\n    p.\n      If I do, whitespace is #[strong respected] and #[em everybody] is happy.\n\n    <p>If I don't write the paragraph with tag interpolation, tags like<strong>strong</strong>and<em>em</em>might produce unexpected results.</p>\n    <p>If I do, whitespace is <strong>respected</strong> and <em>everybody</em> is happy.</p>\n\nSee the whitespace section in the [Plain Text](plain-text#whitespace-control) page for more discussion on this topic.\n\n© Pug authors  \nLicensed under the MIT license.  \n[https://pugjs.org/language/interpolation.html](https://pugjs.org/language/interpolation.html)"
- name: Iteration
  id: language/iteration
  summary: 'Pug supports two primary methods of iteration: each and while'
  description: "# Iteration\n\nPug supports two primary methods of iteration: `each` and `while`.\n\n## each\n\nPug’s first-class iteration syntax makes it easier to iterate over arrays and objects in a template:\n\n    ul\n      each val in [1, 2, 3, 4, 5]\n        li= val\n\n    <ul>\n      <li>1</li>\n      <li>2</li>\n      <li>3</li>\n      <li>4</li>\n      <li>5</li>\n    </ul>\n\nYou can also get the index as you iterate:\n\n    ul\n      each val, index in ['zero', 'one', 'two']\n        li= index + ': ' + val\n\n    <ul>\n      <li>0: zero</li>\n      <li>1: one</li>\n      <li>2: two</li>\n    </ul>\n\nPug also lets you iterate over the keys in an object:\n\n    ul\n      each val, key in {1: 'one', 2: 'two', 3: 'three'}\n        li= key + ': ' + val\n\n    <ul>\n      <li>1: one</li>\n      <li>2: two</li>\n      <li>3: three</li>\n    </ul>\n\nThe object or array to iterate over is just plain JavaScript. So, it can be a variable, or the result of a function call, or almost anything else.\n\n    - var values = [];\n    ul\n      each val in values.length ? values : ['There are no values']\n        li= val\n\n    <ul>\n      <li>There are no values</li>\n    </ul>\n\nOne can also add an `else` block that will be executed if the array or object does not contain values to iterate over. The following is equivalent to the example above:\n\n    - var values = [];\n    ul\n      each val in values\n        li= val\n      else\n        li There are no values\n\n    <ul>\n      <li>There are no values</li>\n    </ul>\n\nYou can also use `for` as an alias of `each`.\n\n## while\n\nYou can also use `while` to create a loop:\n\n    - var n = 0;\n    ul\n      while n < 4\n        li= n++\n\n    <ul>\n      <li>0</li>\n      <li>1</li>\n      <li>2</li>\n      <li>3</li>\n    </ul>\n\n© Pug authors  \nLicensed under the MIT license.  \n[https://pugjs.org/language/iteration.html](https://pugjs.org/language/iteration.html)"
- name: Migrating to Pug 2
  id: api/migration-v2
  summary: Pug 2 was released in August 2016
  description: "# Migrating to Pug 2\n\nPug 2 was released in August 2016. To make improvements in the new release possible, we had to make the decision of deprecating or removing some APIs and undocumented language features. We made an effort to make these changes as unintrusive as possible, and many of these changes were previously discouraged in console warnings.\n\nThis article details how you can convert your application to Pug v2 from Jade.\n\n## Project Rename\n\nDue to a trademark issue, the project name has been changed from “Jade” to “Pug” in conjunction with the release of Pug 2. This also means that we have changed the official supported file extension from `.jade` to `.pug`. Although `.jade` is still supported, it is deprecated. All users are encouraged to transition to `.pug` immediately.\n\n## Removed Language Features\n\nMost of these removals can be automatically detected by [`pug-lint`](https://www.npmjs.com/package/pug-lint), our official linter.\n\n### Legacy Mixin Call\n\n``` cm-s-default\n//- old\n\nmixin foo('whatever')\n```\n\n``` cm-s-default\n//- new\n\n+foo('whatever')\n```\n\nWe removed the legacy syntax for calling a [mixin](../language/mixins) to make it easier to differentiate between declarations and calls. (All uses of the old syntax caused warnings in Jade v1.)\n\n### Attribute Interpolation\n\n``` cm-s-default\n//- old\n\na(href='#{link}')\n\na(href='before#{link}after')\n```\n\n``` cm-s-default\n//- new\n\na(href=link)\n\n//- (on Node.js/io.js ≥ 1.0.0)\na(href=`before${link}after`) \n//- (everywhere)\na(href='before' + link + 'after')\n```\n\nWe removed support for interpolation in attributes since the implementation was unnecessarily complex, and the feature tended to discourage users from learning that they can just use any JavaScript value in place of attributes. Check our [attribute documentation](../language/attributes#attribute-interpolation) for more information on attribute syntax.\n\n### Prefixed `each` Syntax\n\n``` cm-s-default\n//- old\n\n- each a in b\n  = a\n\n- for a in b\n  = a\n```\n\n``` cm-s-default\n//- new\n\neach a in b\n  = a\n\nfor a in b\n  = a\n```\n\n`each` is not part of the JavaScript syntax, so the use of `each` “keyword” in a JavaScript line is confusing as well as hackish (in terms of implementation). The same applies to parentheses-less `for` keyword.\n\nSimply remove `-` and your code should work again.\n\n## Removed API\n\nThese exported properties and compilation options have been removed. In your application, make sure you are not using these APIs.\n\n### Properties\n\n#### `doctype`\n\nPreviously, the undocumented `jade.doctype` object contained a hash of [doctype shortcuts](../language/doctype#doctype-shortcuts). By extending this object, users could create additional or modify existing doctype shortcuts.\n\nIn Pug v2, this object has been split from Pug into the [`doctypes`](https://www.npmjs.com/package/doctypes) package. To extend doctype shortcuts, you could write a `codeGen` plugin.\n\n#### `nodes`\n\nPreviously, the undocumented `jade.nodes` object held a hash of classes that serve as the constructor of the nodes of the (also undocumented) Jade abstract syntax tree. In Pug v2, we have abandoned this approach in favor of duck typing using the `type` property in AST nodes.\n\n#### `selfClosing`\n\nPreviously, the undocumented `jade.selfClosing` array could used to extend or modify the behavior of [self-closing tags](../language/tags#self-closing-tags).\n\nIn Pug v2, this array has been split from Pug into the [`void-elements`](https://www.npmjs.com/package/void-elements) package. To modify this array, you could write a `codeGen` plugin.\n\n#### `utils`\n\nPreviously, the undocumented `jade.utils` object contained three functions that are useful for template engine internals.\n\n`utils.merge` has been removed from Pug, as it is not used anymore. Its functionality can be roughly replicated using the ES2015 [`Object.assign`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) method, among other variants.\n\n`utils.stringify` has been split from Pug into the [`js-stringify`](https://www.npmjs.com/package/js-stringify) package, with additional protection against possible XSS attacks. All users are advised to use that package.\n\n`utils.walkAST` has been split into the [`pug-walk`](https://www.npmjs.com/package/pug-walk) package.\n\n#### `Compiler`, `Lexer`, `Parser`\n\nPreviously, the undocumented Jade `compiler`, `lexer`, and `parser` classes were exported through these properties. Users were allowed to create their own compilers, lexers, and parsers that derive from these classes, in order to customize compilation behaviors.\n\nPug v2 allows customization of the compilation process through plugins, and these exported properties are now removed.\n\nThe Pug v2 equivalent of classes are now part of the [`pug-code-gen`](https://www.npmjs.com/package/pug-code-gen), [`pug-lexer`](https://www.npmjs.com/package/pug-lexer), and [`pug-parser`](https://www.npmjs.com/package/pug-parser) packages, with various incompatible changes.\n\n### Options\n\n#### `compiler`, `lexer`, `parser`\n\nThese options were used in conjunction with the removed [`Compiler`, `Lexer`, and `Parser` classes](#compiler-lexer-parser).\n\n#### `client`\n\nThe `client` option was used for client function compilation. It was deprecated in favor of the [`compileClient`](reference#pugcompileclientsource-options) function in 2013 year, and its use has been warned against since then.\n\n© Pug authors  \nLicensed under the MIT license.  \n[https://pugjs.org/api/migration-v2.html](https://pugjs.org/api/migration-v2.html)"
- name: Migrating to Pug 3 (from Pug 2)
  id: api/migration-v3
  summary: If you are migrating from Jade, please follow the Migrating to Pug 2 article first
  description: "# Migrating to Pug 3 (from Pug 2)\n\nIf you are migrating from Jade, please follow the [Migrating to Pug 2](migration-v2) article first. This article covers how to upgrade from Pug 2 to Pug 3.\n\nFor a complete list of new features, please refer to [the release notes](https://github.com/pugjs/pug/releases/tag/pug%403.0.0). What follows are instructions for dealing with breaking changes only.\n\n## filters with `minify`\n\n###### Note\n\nIf you are not using filters with the “minify” option, you can ignore this change.\n\nIf you were using filters that output JavaScript or CSS, along with the `minify` option, you now need to include an extra dependency. If you want to support minifying JavaScript, you must install `jstransformer-uglify-js` and if you want to support minifying CSS, you must install `jstransformer-clean-css`.\n\n## `read` plugins should now return `Buffer`\n\n###### Note\n\nIf you are not using plugins, you can ignore this change.\n\nIf you are using a `read` plugin to override the way that pug reads files, and you want to support the new `renderBuffer` filters, you will need to return `Buffer`.\n\ne.g.\n\n``` cm-s-default\n//- old\n\npug.renderFile(filename, {\n  plugins: [\n    {\n      read: (filename) => {\n        // this returns a \"string\"\n        return fs.readFileSync(filename, 'utf8');\n      },\n    }\n  ]\n})\n```\n\n``` cm-s-default\n//- new\n\npug.renderFile(filename, {\n  plugins: [\n    {\n      read: (filename) => {\n        // this returns a \"Buffer\"\n        return fs.readFileSync(filename);\n      },\n    }\n  ]\n})\n```\n\n## Node.js Support\n\nWe dropped support for node versions prior to 10.0.0. We recommend upgrading all projects using pug to node.js 12, but we will support 10 until April 2021.\n\nIn future we may drop support for node versions [when they reach end of life](https://github.com/nodejs/Release) without a major version bump.\n\n© Pug authors  \nLicensed under the MIT license.  \n[https://pugjs.org/api/migration-v3.html](https://pugjs.org/api/migration-v3.html)"
- name: Mixins
  id: language/mixins
  summary: Mixins allow you to create reusable blocks of Pug
  description: "# Mixins\n\nMixins allow you to create reusable blocks of Pug.\n\n    //- Declaration\n    mixin list\n      ul\n        li foo\n        li bar\n        li baz\n    //- Use\n    +list\n    +list\n\n    <ul>\n      <li>foo</li>\n      <li>bar</li>\n      <li>baz</li>\n    </ul>\n    <ul>\n      <li>foo</li>\n      <li>bar</li>\n      <li>baz</li>\n    </ul>\n\nMixins are compiled to functions, and can take arguments:\n\n    mixin pet(name)\n      li.pet= name\n    ul\n      +pet('cat')\n      +pet('dog')\n      +pet('pig')\n\n    <ul>\n      <li class=\"pet\">cat</li>\n      <li class=\"pet\">dog</li>\n      <li class=\"pet\">pig</li>\n    </ul>\n\n## Mixin Blocks\n\nMixins can also take a block of Pug to act as the content:\n\n    mixin article(title)\n      .article\n        .article-wrapper\n          h1= title\n          if block\n            block\n          else\n            p No content provided\n\n    +article('Hello world')\n\n    +article('Hello world')\n      p This is my\n      p Amazing article\n\n    <div class=\"article\">\n      <div class=\"article-wrapper\">\n        <h1>Hello world</h1>\n        <p>No content provided</p>\n      </div>\n    </div>\n    <div class=\"article\">\n      <div class=\"article-wrapper\">\n        <h1>Hello world</h1>\n        <p>This is my</p>\n        <p>Amazing article</p>\n      </div>\n    </div>\n\n## Mixin Attributes\n\nMixins also get an implicit `attributes` argument, which is taken from the attributes passed to the mixin:\n\n    mixin link(href, name)\n      //- attributes == {class: \"btn\"}\n      a(class!=attributes.class href=href)= name\n\n    +link('/foo', 'foo')(class=\"btn\")\n\n    <a class=\"btn\" href=\"/foo\">foo</a>\n\n###### Note\n\n**The values in `attributes` by default are already escaped!** You should use `!=` to avoid escaping them a second time. (See also [unescaped attributes](attributes#unescaped-attributes).)\n\nYou can also use mixins with [`&attributes`](attributes#attributes):\n\n    mixin link(href, name)\n      a(href=href)&attributes(attributes)= name\n\n    +link('/foo', 'foo')(class=\"btn\")\n\n    <a class=\"btn\" href=\"/foo\">foo</a>\n\n###### Note\n\nThe syntax `+link(class=\"btn\")` is also valid and equivalent to `+link()(class=\"btn\")`, since Pug tries to detect if parentheses’ contents are attributes or arguments. Nevertheless, we encourage you to use the second syntax, as you pass explicitly no arguments and you ensure the first parenthesis is the arguments list.\n\n## Default Argument’s Values\n\nYou can also set default values for you `arguments`. Same as setting *default function parameters* in ES6.\n\n    //- Declaration\n    mixin article(title='Default Title')\n      .article\n        .article-wrapper\n          h1= title\n\n    //- Use\n    +article()\n\n    +article('Hello world')\n\n    <div class=\"article\">\n      <div class=\"article-wrapper\">\n        <h1>Default Title</h1>\n      </div>\n    </div>\n    <div class=\"article\">\n      <div class=\"article-wrapper\">\n        <h1>Hello world</h1>\n      </div>\n    </div>\n\n## Rest Arguments\n\nYou can write mixins that take an unknown number of arguments using the “rest arguments” syntax.\n\n    mixin list(id, ...items)\n      ul(id=id)\n        each item in items\n          li= item\n\n    +list('my-list', 1, 2, 3, 4)\n\n    <ul id=\"my-list\">\n      <li>1</li>\n      <li>2</li>\n      <li>3</li>\n      <li>4</li>\n    </ul>\n\n© Pug authors  \nLicensed under the MIT license.  \n[https://pugjs.org/language/mixins.html](https://pugjs.org/language/mixins.html)"
- name: Plain Text
  id: language/plain-text
  summary: Pug provides four ways of getting plain text — that is, any code or text content that should go, mostly unprocessed, directly into the rendered HTML
  description: "# Plain Text\n\nPug provides four ways of getting *plain text* — that is, any code or text content that should go, mostly unprocessed, directly into the rendered HTML. They are useful in different situations.\n\nPlain text does still use tag and string [interpolation](interpolation), but the first word on the line is not a Pug tag. And because plain text is not escaped, you can also include literal HTML.\n\nOne common pitfall here is managing whitespace in the rendered HTML. We’ll talk about that at the end of this page.\n\n## Inline in a Tag\n\nThe easiest way to add plain text is *inline*. The first term on the line is the tag itself. Everything after the tag and one space will be the text contents of that tag. This is most useful when the plain text content is short (or if you don’t mind lines running long).\n\n    p This is plain old <em>text</em> content.\n\n    <p>This is plain old <em>text</em> content.</p>\n\n## Literal HTML\n\nWhole lines are also treated as plain text when they begin with a left angle bracket (`<`), which may occasionally be useful for writing literal HTML tags in places that could otherwise be inconvenient. For example, one use case is [conditional comments](comments#conditional-comments). Since literal HTML tags do not get processed, they do not self-close, unlike Pug tags.\n\n    <html>\n\n    body\n      p Indenting the body tag here would make no difference.\n      p HTML itself isn't whitespace-sensitive.\n\n    </html>\n\n    <html>\n\n    <body>\n      <p>Indenting the body tag here would make no difference.</p>\n      <p>HTML itself isn't whitespace-sensitive.</p>\n    </body>\n\n    </html>\n\n## Piped Text\n\nAnother way to add plain text to templates is to prefix a line with a pipe character (`|`). This method is useful for mixing plain text with inline tags, as we discuss later, in the Whitespace Control section.\n\n    p\n      | The pipe always goes at the beginning of its own line,\n      | not counting indentation.\n\n    <p>The pipe always goes at the beginning of its own line,\n      not counting indentation.</p>\n\n## Block in a Tag\n\nOften you might want large blocks of text within a tag. A good example is writing JavaScript and CSS code in the `script` and `style` tags. To do this, just add a `.` right after the tag name, or after the closing parenthesis, if the tag has [attributes](attributes).\n\nThere should be no space between the tag and the dot. Plain text contents of the tag must be indented one level:\n\n    script.\n      if (usingPug)\n        console.log('you are awesome')\n      else\n        console.log('use pug')\n\n    <script>\n      if (usingPug)\n        console.log('you are awesome')\n      else\n        console.log('use pug')\n    </script>\n\nYou can also create a dot block of plain text *after* other tags within the parent tag.\n\n    div\n      p This text belongs to the paragraph tag.\n      br\n      .\n        This text belongs to the div tag.\n\n    <div>\n      <p>This text belongs to the paragraph tag.</p><br />This text belongs to the div tag.\n    </div>\n\n## Whitespace Control\n\nManaging the whitespace of the rendered HTML is one of the trickiest parts about learning Pug. Don’t worry, though, you’ll get the hang of it soon enough.\n\nYou just need to remember two main points about how whitespace works. When compiling to HTML:\n\n1.  Pug removes *indentation*, and all whitespace *between elements*.\n    - So, the closing tag of an HTML element will touch the opening tag of the next. This is generally not a problem for block-level elements like paragraphs, because they will still render as separate paragraphs in the web browser (unless you have changed their CSS `display` property). See the methods described below, however, for when you do need to insert space between elements.\n2.  Pug *preserves* whitespace *within* elements, including:\n    - all whitespace in the middle of a line of text.\n    - leading whitespace beyond the block indentation.\n    - trailing whitespace.\n    - line breaks within a plain text block, or between consecutive piped lines.\n\nSo…Pug drops the whitespace between tags, but keeps the whitespace inside them. The value here is that it gives you full control over whether tags and/or plain text should touch. It even lets you place tags in the middle of words.\n\n    | You put the em\n    em pha\n    | sis on the wrong syl\n    em la\n    | ble.\n\n    You put the em<em>pha</em>sis on the wrong syl<em>la</em>ble.\n\nThe trade-off is that it *requires* you to think about and take control over whether tags and text touch.\n\nIf you need the text and/or tags to touch — perhaps you need a period to appear outside the hyperlink at the end of a sentence — this is easy, as it’s basically what happens unless you tell Pug otherwise.\n\n    a ...sentence ending with a link\n    | .\n\n    <a>...sentence ending with a link</a>.\n\nIf you need to *add* space, you have a few options:\n\n### Recommended Solutions\n\nYou could add one or more empty piped lines — a pipe with either spaces or nothing after it. This will insert whitespace in the rendered HTML.\n\n    | Don't\n    |\n    button#self-destruct touch\n    |\n    | me!\n\n    Don't\n    <button id=\"self-destruct\">touch</button>\n    me!\n\nIf your inline tags don’t require many attributes, you may find it easiest to use tag interpolation, or literal HTML, within a plain text *block*.\n\n    p.\n      Using regular tags can help keep your lines short,\n      but interpolated tags may be easier to #[em visualize]\n      whether the tags and text are whitespace-separated.\n\n    <p>Using regular tags can help keep your lines short,\n      but interpolated tags may be easier to <em>visualize</em>\n      whether the tags and text are whitespace-separated.</p>\n\n### Not recommended\n\nDepending on where you need the whitespace, you could add an extra space at the beginning of the text (after the block indentation, pipe character, and/or tag). Or you could add a trailing space at the *end* of the text.\n\n**NOTE the trailing and leading spaces here:**\n\n    | Hey, check out \n    a(href=\"http://example.biz/kitteh.png\") this picture\n    |  of my cat!\n\n    Hey, check out <a href=\"http://example.biz/kitteh.png\">this picture</a> of my cat!\n\nThe above solution works perfectly well, but is admittedly perhaps a little dangerous: many code editors by default will *remove* trailing whitespace on save. You and all your contributors may have to configure your editors to prevent automatic trailing whitespace removal.\n\n© Pug authors  \nLicensed under the MIT license.  \n[https://pugjs.org/language/plain-text.html](https://pugjs.org/language/plain-text.html)"
- name: pug.compile()
  id: api/reference#pugcompilesource-options
  summary: Compile a Pug template to a function, which can be rendered multiple times with different locals
  belongs_to: API Reference
  description: |-
    ### pug.compile(source, ?options)

    Compile a Pug template to a function, which can be rendered multiple times with different locals.

    source: string

    The source Pug template to compile

    options: ?options

    An options object

    returns: function

    A function to generate the HTML from an object containing locals

    ``` cm-s-default
    var pug = require('pug');

    // Compile a function
    var fn = pug.compile('string of pug', options);

    // Render the function
    var html = fn(locals);
    // => '<string>of pug</string>'
    ```
- name: pug.compileClient()
  id: api/reference#pugcompileclientsource-options
  summary: Compile a Pug template to a string of JavaScript, which can be used client side
  belongs_to: API Reference
  description: |-
    ### pug.compileClient(source, ?options)

    Compile a Pug template to a string of JavaScript, which can be used client side.

    source: string

    The Pug template to compile

    options: ?options

    An options object

    returns: string

    A string of JavaScript representing a function

    ``` cm-s-default
    var pug = require('pug');

    // Compile a function
    var fn = pug.compileClient('string of pug', options);

    // Render the function
    var html = fn(locals);
    // => 'function template(locals) { return "<string>of pug</string>"; }'
    ```
- name: pug.compileClientWithDependenciesTracked()
  id: api/reference#pugcompileclientwithdependenciestrackedsource-options
  summary: You should only use this method if you need dependencies to implement something like watching for changes to the Pug files
  belongs_to: API Reference
  description: |-
    ### pug.compileClientWithDependenciesTracked(source, ?options)

    Same as [`compileClient`](#pugcompilesource-options), except that this method returns an object of the form:

    ``` cm-s-default
    {
      'body': 'function (locals) {...}',
      'dependencies': ['filename.pug']
    }
    ```

    You should only use this method if you need `dependencies` to implement something like watching for changes to the Pug files.
- name: pug.compileFile()
  id: api/reference#pugcompilefilepath-options
  summary: Compile a Pug template from a file to a function, which can be rendered multiple times with different locals
  belongs_to: API Reference
  description: |-
    ### pug.compileFile(path, ?options)

    Compile a Pug template from a file to a function, which can be rendered multiple times with different locals.

    path: string

    The path to a Pug file

    options: ?options

    An options object

    returns: function

    A function to generate the HTML from an object containing locals

    ``` cm-s-default
    var pug = require('pug');

    // Compile a function
    var fn = pug.compileFile('path to pug file', options);

    // Render the function
    var html = fn(locals);
    // => '<string>of pug</string>'
    ```
- name: pug.compileFileClient()
  id: api/reference#pugcompilefileclientpath-options
  summary: Compile a Pug template file to a string of JavaScript that can be used client side
  belongs_to: API Reference
  description: |-
    ### pug.compileFileClient(path, ?options)

    Compile a Pug template file to a string of JavaScript that can be used client side.

    path: string

    The path to a Pug file

    options: ?options

    An options object

    options.name: string

    If you pass a `.name` property on the options object, it will be used as the name of your client side template function.

    returns: string

    A JavaScript function body.

    First, our template file.

    ``` cm-s-default
    h1 This is a Pug template
    h2 By #{author}
    ```

    Then, we compile the Pug file into a function string.

    ``` cm-s-default
    var fs = require('fs');
    var pug = require('pug');

    // Compile the template to a function string
    var jsFunctionString = pug.compileFileClient('/path/to/pugFile.pug', {name: "fancyTemplateFun"});

    // Maybe you want to compile all of your templates to a templates.js file and serve it to the client
    fs.writeFileSync("templates.js", jsFunctionString);
    ```

    Here’s what the output function string looks like (written to `templates.js`).

    ``` cm-s-default
    function fancyTemplateFun(locals) {
      var buf = [];
      var pug_mixins = {};
      var pug_interp;

      var locals_for_with = (locals || {});

      (function (author) {
        buf.push("<h1>This is a Pug template</h1><h2>By "
          + (pug.escape((pug_interp = author) == null ? '' : pug_interp))
          + "</h2>");
      }.call(this, "author" in locals_for_with ?
        locals_for_with.author : typeof author !== "undefined" ?
          author : undefined)
      );

      return buf.join("");
    }
    ```

    ``` cm-s-default
    <!DOCTYPE html>
    <html>
      <head>
        <script src="/templates.js"></script>
      </head>

      <body>
        <h1>This is one fancy template.</h1>

        <script type="text/javascript">
          var html = window.fancyTemplateFun({author: "enlore"});
          var div = document.createElement("div");
          div.innerHTML = html;
          document.body.appendChild(div);
        </script>
      </body>
    </html>
    ```
- name: pug.filters
  id: api/reference#pugfilters
  summary: A hash table of custom filters
  belongs_to: API Reference
  description: "### pug.filters\n\nA hash table of [custom filters](../language/filters#custom-filters).\n\nThis object has the same semantics as the [`filters` option](#options), but applies globally to all Pug compilation. When a filter is present in both `pug.filters` and `options.filters`, the `filters` option takes precedence.\n\n###### Deprecated\n\nThis property has been deprecated in favor of the [`filters` option](#options).\n\n© Pug authors  \nLicensed under the MIT license.  \n[https://pugjs.org/api/reference.html](https://pugjs.org/api/reference.html)"
- name: pug.render()
  id: api/reference#pugrendersource-options-callback
  summary: Node.js-style callback receiving the rendered results
  belongs_to: API Reference
  description: |-
    ### pug.render(source, ?options, ?callback)

    source: string

    The source Pug template to render

    options: ?options

    An options object, also used as the locals object

    callback: ?function

    Node.js-style callback receiving the rendered results. **This callback is called synchronously.**

    returns: string

    The resulting HTML string

    ``` cm-s-default
    var pug = require('pug');

    var html = pug.render('string of pug', options);
    // => '<string>of pug</string>'
    ```
- name: pug.renderFile()
  id: api/reference#pugrenderfilepath-options-callback
  summary: Node.js-style callback receiving the rendered results
  belongs_to: API Reference
  description: |-
    ### pug.renderFile(path, ?options, ?callback)

    path: string

    The path to the Pug file to render

    options: ?options

    An options object, also used as the locals object

    callback: ?function

    Node.js-style callback receiving the rendered results. **This callback is called synchronously.**

    returns: string

    The resulting HTML string

    ``` cm-s-default
    var pug = require('pug');

    var html = pug.renderFile('path/to/file.pug', options);
    // ...
    ```

    ## Properties
- name: Tags
  id: language/tags
  summary: By default, text at the start of a line (or after only white space) represents an HTML tag
  description: "# Tags\n\nBy default, text at the start of a line (or after only white space) represents an HTML tag. Indented tags are nested, creating the tree structure of HTML.\n\n    ul\n      li Item A\n      li Item B\n      li Item C\n\n    <ul>\n      <li>Item A</li>\n      <li>Item B</li>\n      <li>Item C</li>\n    </ul>\n\nPug also knows which elements are self-closing:\n\n    img\n\n    <img />\n\n## Block Expansion\n\nTo save space, Pug provides an inline syntax for nested tags.\n\n    a: img\n\n    <a><img /></a>\n\n## Self-Closing Tags\n\nTags such as `img`, `meta`, and `link` are automatically self-closing (unless you use the XML doctype).\n\nYou can also explicitly self close a tag by appending the `/` character. Only do this if you know what you’re doing.\n\n    foo/\n    foo(bar='baz')/\n\n    <foo />\n    <foo bar=\"baz\" />\n\n## Rendered Whitespace\n\nWhitespace is removed from the beginning and end of tags, so that you have control over whether the rendered HTML elements touch or not. Whitespace control is generally handled via [plain text](plain-text#whitespace-control).\n\n© Pug authors  \nLicensed under the MIT license.  \n[https://pugjs.org/language/tags.html](https://pugjs.org/language/tags.html)"
- name: Template Inheritance
  id: language/inheritance
  summary: Pug supports template inheritance
  description: "# Template Inheritance\n\nPug supports template inheritance. Template inheritance works via the `block` and `extends` keywords.\n\nIn a template, a `block` is simply a “block” of Pug that a child template may replace. This process is recursive.\n\nPug blocks can provide default content, if appropriate. Providing default content is purely optional, though. The example below defines `block scripts`, `block content`, and `block foot`.\n\n``` cm-s-default\n//- layout.pug\nhtml\n  head\n    title My Site - #{title}\n    block scripts\n      script(src='/jquery.js')\n  body\n    block content\n    block foot\n      #footer\n        p some footer content\n```\n\nTo extend this layout, create a new file and use the `extends` directive with a path to the parent template. (If no file extension is given, `.pug` is automatically appended to the file name.) Then, define one or more blocks to override the parent block content.\n\nBelow, notice that the `foot` block is *not* redefined, so it will use the parent’s default and output “some footer content”.\n\n``` cm-s-default\n//- page-a.pug\nextends layout.pug\n\nblock scripts\n  script(src='/jquery.js')\n  script(src='/pets.js')\n\nblock content\n  h1= title\n  - var pets = ['cat', 'dog']\n  each petName in pets\n    include pet.pug\n```\n\n``` cm-s-default\n//- pet.pug\np= petName\n```\n\nIt’s also possible to override a block to provide additional blocks, as shown in the following example. As it shows, `content` now exposes a `sidebar` and `primary` block for overriding. (Alternatively, the child template could override `content` altogether.)\n\n``` cm-s-default\n//- sub-layout.pug\nextends layout.pug\n\nblock content\n  .sidebar\n    block sidebar\n      p nothing\n  .primary\n    block primary\n      p nothing\n```\n\n``` cm-s-default\n//- page-b.pug\nextends sub-layout.pug\n\nblock content\n  .sidebar\n    block sidebar\n      p nothing\n  .primary\n    block primary\n      p nothing\n```\n\n## Block `append` / `prepend`\n\nPug allows you to `replace` (default), `prepend`, or `append` blocks.\n\nSuppose you have default scripts in a `head` block that you wish to use on *every* page. You might do this:\n\n``` cm-s-default\n//- layout.pug\nhtml\n  head\n    block head\n      script(src='/vendor/jquery.js')\n      script(src='/vendor/caustic.js')\n  body\n    block content\n```\n\nNow, consider a page of your JavaScript game. You want some game related scripts as well as these defaults. You can simply `append` the block:\n\n``` cm-s-default\n//- page.pug\nextends layout.pug\n\nblock append head\n  script(src='/vendor/three.js')\n  script(src='/game.js')\n```\n\nWhen using `block append` or `block prepend`, the word “`block`” is optional:\n\n``` cm-s-default\n//- page.pug\nextends layout\n\nappend head\n  script(src='/vendor/three.js')\n  script(src='/game.js')\n```\n\n## Common mistakes\n\nPug’s template inheritance is a powerful feature that allows you to split complex page template structures into smaller, simpler files. However, if you chain many, many templates together, you can make things a lot more complicated for yourself.\n\nNote that **only named blocks and mixin definitions** can appear at the top (unindented) level of a child template. This is important! Parent templates define a page’s overall structure, and child templates can only `append`, `prepend`, or replace specific blocks of markup and logic. If a child template tried to add content outside of a block, Pug would have no way of knowing where to put it in the final page.\n\nThis includes [unbuffered code](code#unbuffered-code), which can also contain markup. If you need to define variables for use in a child template, you can do so a few different ways:\n\n- Add the variables to the Pug [options](../api/reference#options) object, or define them in unbuffered code in a parent template. The child template will inherit these variables.\n- Define the variables *in a block* in the child template. Extending templates must have at least one block, or it would be empty — just define your variables there.\n\nFor the same reason, Pug’s [buffered comments](comments) cannot appear at the top level of an extending template: they produce HTML comments which would have nowhere to go in the resulting HTML. (Unbuffered Pug comments, however, can still go anywhere.)\n\n© Pug authors  \nLicensed under the MIT license.  \n[https://pugjs.org/language/inheritance.html](https://pugjs.org/language/inheritance.html)"
