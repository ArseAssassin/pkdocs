---
name: i3
slug: i3
text_format: markdown
generator: src:devdocs
version: null
copyright: |-
  © 2009, Michael Stapelberg and contributors
  https://i3wm.org/docs/userguide.html
homepage: https://i3wm.org/
generator_command: doc src:devdocs use i3

---
- name: 1. Default keybindings
  id: index#_default_keybindings
  summary: The red keys are the modifiers you need to press (by default), the blue keys are your homerow
  description: |-
    ## 1. Default keybindings

    For the "too long; didn’t read" people, here is an overview of the default keybindings (click to see the full-size image):

    **Keys to use with $mod (Alt):**

    [](https://i3wm.org/docs/keyboard-layer1.png)

    **Keys to use with Shift+$mod:**

    [](https://i3wm.org/docs/keyboard-layer2.png)

    The red keys are the modifiers you need to press (by default), the blue keys are your homerow.

    Note that when starting i3 without a config file, i3-config-wizard will offer you to create a config file in which the key positions (!) match what you see in the image above, regardless of the keyboard layout you are using. If you prefer to use a config file where the key letters match what you are seeing above, just decline i3-config-wizard’s offer and base your config on `/etc/i3/config`.
- name: 2. Using i3
  id: index#_using_i3
  summary: Throughout this guide, the keyword $mod will be used to refer to the configured modifier
  description: |-
    ## 2. Using i3

    Throughout this guide, the keyword `$mod` will be used to refer to the configured modifier. This is the Alt key (`Mod1`) by default, with the Windows key (`Mod4`) being a popular alternative that largely prevents conflicts with application-defined shortcuts.
- name: 2.1. Opening terminals and moving around
  id: index#_opening_terminals_and_moving_around
  summary: One very basic operation is opening a new terminal
  description: |-
    ### 2.1. Opening terminals and moving around

    One very basic operation is opening a new terminal. By default, the keybinding for this is `$mod+Enter`, that is Alt+Enter (`Mod1+Enter`) in the default configuration. By pressing `$mod+Enter`, a new terminal will be opened. It will fill the whole space available on your screen.

    If you now open another terminal, i3 will place it next to the current one, splitting the screen size in half. Depending on your monitor, i3 will put the created window beside the existing window (on wide displays) or below the existing window (rotated displays).

    To move the focus between the two terminals, you can use the arrow keys. For convenience, the arrows are also available directly on the [keyboard’s home row](https://en.wikipedia.org/wiki/Touch_typing) underneath your right hand:

    |          |       |
    |:---------|:------|
    | `$mod+j` | left  |
    | `$mod+k` | down  |
    | `$mod+l` | up    |
    | `$mod+;` | right |

    Note that this differs by one key from the popular text editor `vi`, which was [developed on an ADM-3A terminal and therefore uses `hjkl` instead of `jkl;`](https://twitter.com/hillelogram/status/1326600125569961991) — i3’s default is meant to require minimal finger movement, but some `vi` users change their i3 config for consistency.

    At the moment, your workspace is split (it contains two terminals) in a specific direction (horizontal by default). Every window can be split horizontally or vertically again, just like the workspace. The terminology is "window" for a container that actually contains an X11 window (like a terminal or browser) and "split container" for containers that consist of one or more windows.

    To split a window vertically, press `$mod+v` before you create the new window. To split it horizontally, press `$mod+h`.
- name: 2.2. Changing the container layout
  id: index#_changing_the_container_layout
  summary: splith/splitv Windows are sized so that every window gets an equal amount of space in the container
  description: "### 2.2. Changing the container layout\n\nA split container can have one of the following layouts:\n\nsplith/splitv  \nWindows are sized so that every window gets an equal amount of space in the container. splith distributes the windows horizontally (windows are right next to each other), splitv distributes them vertically (windows are on top of each other).\n\nstacking  \nOnly the focused window in the container is displayed. You get a list of windows at the top of the container.\n\ntabbed  \nThe same principle as `stacking`, but the list of windows at the top is only a single line which is vertically split.\n\nTo switch modes, press `$mod+e` for splith/splitv (it toggles), `$mod+s` for stacking and `$mod+w` for tabbed."
- name: 2.3. Toggling fullscreen mode for a window
  id: index#_toggling_fullscreen_mode_for_a_window
  summary: To display a window in fullscreen mode or to go out of fullscreen mode again, press $mod+f
  description: |-
    ### 2.3. Toggling fullscreen mode for a window

    To display a window in fullscreen mode or to go out of fullscreen mode again, press `$mod+f`.

    There is also a global fullscreen mode in i3 in which the client will span all available outputs (the command is `fullscreen toggle global`).
- name: 2.4. Opening other applications
  id: index#_opening_other_applications
  summary: Aside from opening applications from a terminal, you can also use the handy dmenu which is opened by pressing $mod+d by default
  description: |-
    ### 2.4. Opening other applications

    Aside from opening applications from a terminal, you can also use the handy `dmenu` which is opened by pressing `$mod+d` by default. Just type the name (or a part of it) of the application which you want to open. The corresponding application has to be in your `$PATH` for this to work.

    Additionally, if you have applications you open very frequently, you can create a keybinding for starting the application directly. See the section [\[configuring\]](#configuring) for details.
- name: 2.5. Closing windows
  id: index#_closing_windows
  summary: If an application does not provide a mechanism for closing (most applications provide a menu, the escape key or a shortcut like Control+w to close), you can press $mod+Shift+q to kill a window
  description: |-
    ### 2.5. Closing windows

    If an application does not provide a mechanism for closing (most applications provide a menu, the escape key or a shortcut like `Control+w` to close), you can press `$mod+Shift+q` to kill a window. For applications which support the WM_DELETE protocol, this will correctly close the application (saving any modifications or doing other cleanup). If the application doesn’t support the WM_DELETE protocol your X server will kill the window and the behaviour depends on the application.
- name: 2.6. Using workspaces
  id: index#_using_workspaces
  summary: Workspaces are an easy way to group a set of windows
  description: |-
    ### 2.6. Using workspaces

    Workspaces are an easy way to group a set of windows. By default, you are on the first workspace, as the bar on the bottom left indicates. To switch to another workspace, press `$mod+num` where `num` is the number of the workspace you want to use. If the workspace does not exist yet, it will be created.

    A common paradigm is to put the web browser on one workspace, communication applications (`mutt`, `irssi`, …) on another one, and the ones with which you work, on the third one. Of course, there is no need to follow this approach.

    If you have multiple screens, a workspace will be created on each screen at startup. If you open a new workspace, it will be bound to the screen you created it on. When you switch to a workspace on another screen, i3 will set focus to that screen.
- name: 2.7. Moving windows to workspaces
  id: index#_moving_windows_to_workspaces
  summary: To move a window to another workspace, simply press $mod+Shift+num where num is (like when switching workspaces) the number of the target workspace
  description: |-
    ### 2.7. Moving windows to workspaces

    To move a window to another workspace, simply press `$mod+Shift+num` where `num` is (like when switching workspaces) the number of the target workspace. Similarly to switching workspaces, the target workspace will be created if it does not yet exist.
- name: 2.8. Resizing
  id: index#_resizing
  summary: 'The easiest way to resize a container is by using the mouse: Grab the border and move it to the wanted size'
  description: |-
    ### 2.8. Resizing

    The easiest way to resize a container is by using the mouse: Grab the border and move it to the wanted size.

    You can also use [\[binding_modes\]](#binding_modes) to define a mode for resizing via the keyboard. To see an example for this, look at the [default config](https://github.com/i3/i3/blob/next/etc/config.keycodes) provided by i3.
- name: 2.9. Restarting i3 inplace
  id: index#_restarting_i3_inplace
  summary: To restart i3 in place (and thus get into a clean state if there is a bug, or to upgrade to a newer version of i3) you can use $mod+Shift+r
  description: |-
    ### 2.9. Restarting i3 inplace

    To restart i3 in place (and thus get into a clean state if there is a bug, or to upgrade to a newer version of i3) you can use `$mod+Shift+r`.
- name: 2.10. Exiting i3
  id: index#_exiting_i3
  summary: To cleanly exit i3 without killing your X server, you can use $mod+Shift+e
  description: |-
    ### 2.10. Exiting i3

    To cleanly exit i3 without killing your X server, you can use `$mod+Shift+e`. By default, a dialog will ask you to confirm if you really want to quit.
- name: 2.11. Floating
  id: index#_floating
  summary: Floating mode is the opposite of tiling mode
  description: |-
    ### 2.11. Floating

    Floating mode is the opposite of tiling mode. The position and size of a window are not managed automatically by i3, but manually by you. Using this mode violates the tiling paradigm but can be useful for some corner cases like "Save as" dialog windows, or toolbar windows (GIMP or similar). Those windows usually set the appropriate hint and are opened in floating mode by default.

    You can toggle floating mode for a window by pressing `$mod+Shift+Space`. By dragging the window’s titlebar with your mouse you can move the window around. By grabbing the borders and moving them you can resize the window. You can also do that by using the [\[floating_modifier\]](#floating_modifier). Another way to resize floating windows using the mouse is to right-click on the titlebar and drag.

    For resizing floating windows with your keyboard, see the resizing binding mode provided by the i3 [default config](https://github.com/i3/i3/blob/next/etc/config.keycodes).

    Floating windows are always on top of tiling windows.
- name: 2.12. Moving tiling containers with the mouse
  id: index#tiling_drag
  summary: Since i3 4.21, it’s possible to drag tiling containers using the mouse
  description: "### 2.12. Moving tiling containers with the mouse\n\nSince i3 4.21, it’s possible to drag tiling containers using the mouse. The drag can be initiated either by dragging the window’s titlebar or by pressing the [\\[floating_modifier\\]](#floating_modifier) and dragging the container while holding the left-click button. See the [\\[config_tiling_drag\\]](#config_tiling_drag) option for configuring which action triggers the tiling drag.\n\nOnce the drag is initiated and the cursor has left the original container, drop indicators are created according to the position of the cursor relatively to the target container. These indicators help you understand what the resulting [\\[tree\\]](#tree) layout is going to be after you release the mouse button.\n\nThe possible drop positions are:\n\nDrop on container  \nThis happens when the mouse is relatively near the center of a container. If the mouse is released, the result is exactly as if you had run the `move container to mark` command. See [\\[move_to_mark\\]](#move_to_mark).\n\nDrop as sibling  \nThis happens when the mouse is relatively near the edge of a container. If the mouse is released, the dragged container will become a sibling of the target container, placed left/right/up/down according to the position of the indicator. This might or might not create a new v-split or h-split according to the previous layout of the target container. For example, if the target container is in an h-split and you drop the dragged container below it, the new layout will have to be a v-split.\n\nDrop to parent  \nThis happens when the mouse is relatively near the edge of a container (but even closer to the border in comparison to the sibling case above) **and** if that edge is also the parent container’s edge. For example, if three containers are in a horizontal layout then edges where this can happen is the left edge of the left container, the right edge of the right container and all bottom and top edges of all three containers. If the mouse is released, the container is first dropped as a sibling to the target container, like in the case above, and then is moved directionally like with the `move left|right|down|up` command. See [\\[move_direction\\]](#move_direction).\n\nThe color of the indicator matches the `client.focused` setting. See [\\[client_colors\\]](#client_colors)."
- name: 3. Tree
  id: index#tree
  summary: i3 stores all information about the X11 outputs, workspaces and layout of the windows on them in a tree
  description: |-
    ## 3. Tree

    i3 stores all information about the X11 outputs, workspaces and layout of the windows on them in a tree. The root node is the X11 root window, followed by the X11 outputs, then dock areas and a content container, then workspaces and finally the windows themselves. In previous versions of i3 we had multiple lists (of outputs, workspaces) and a table for each workspace. That approach turned out to be complicated to use (snapping), understand and implement.
- name: 3.1. The tree consists of Containers
  id: index#_the_tree_consists_of_containers
  summary: The building blocks of our tree are so-called Containers
  description: |-
    ### 3.1. The tree consists of Containers

    The building blocks of our tree are so-called `Containers`. A `Container` can host a window (meaning an X11 window, one that you can actually see and use, like a browser). Alternatively, it could contain one or more `Containers`. A simple example is the workspace: When you start i3 with a single monitor, a single workspace and you open two terminal windows, you will end up with a tree like this:

    Figure 1. Two terminals on standard workspace
- name: 3.2. Orientation and Split Containers
  id: index#OrientationSplit
  summary: It is only natural to use so-called Split Containers in order to build a layout when using a tree as data structure
  description: |-
    ### 3.2. Orientation and Split Containers

    It is only natural to use so-called `Split Containers` in order to build a layout when using a tree as data structure. In i3, every `Container` has an orientation (horizontal, vertical or unspecified) and the orientation depends on the layout the container is in (vertical for splitv and stacking, horizontal for splith and tabbed). So, in our example with the workspace, the default layout of the workspace `Container` is splith (most monitors are widescreen nowadays). If you change the layout to splitv (`$mod+v` in the default config) and **then** open two terminals, i3 will configure your windows like this:

    Figure 2. Vertical Workspace Orientation

    An interesting new feature of i3 since version 4 is the ability to split anything: Let’s assume you have two terminals on a workspace (with splith layout, that is horizontal orientation), focus is on the right terminal. Now you want to open another terminal window below the current one. If you would just open a new terminal window, it would show up to the right due to the splith layout. Instead, press `$mod+v` to split the container with the splitv layout (to open a `Horizontal Split Container`, use `$mod+h`). Now you can open a new terminal and it will open below the current one:

    Figure 3. Vertical Split Container

    You probably guessed it already: There is no limit on how deep your hierarchy of splits can be.
- name: 3.3. Focus parent
  id: index#_focus_parent
  summary: Let’s stay with our example from above
  description: |-
    ### 3.3. Focus parent

    Let’s stay with our example from above. We have a terminal on the left and two vertically split terminals on the right, focus is on the bottom right one. When you open a new terminal, it will open below the current one.

    So, how can you open a new terminal window to the **right** of the current one? The solution is to use `focus parent`, which will focus the `Parent Container` of the current `Container`. In default configuration, use `$mod+a` to navigate one `Container` up the tree (you can repeat this multiple times until you get to the `Workspace Container`). In this case, you would focus the `Vertical Split Container` which is **inside** the horizontally oriented workspace. Thus, now new windows will be opened to the right of the `Vertical Split Container`:

    Figure 4. Focus parent, then open new terminal
- name: 3.4. Implicit containers
  id: index#_implicit_containers
  summary: In some cases, i3 needs to implicitly create a container to fulfill your command
  description: |-
    ### 3.4. Implicit containers

    In some cases, i3 needs to implicitly create a container to fulfill your command.

    One example is the following scenario: You start i3 with a single monitor and a single workspace on which you open three terminal windows. All these terminal windows are directly attached to one node inside i3’s layout tree, the workspace node. By default, the workspace node’s orientation is `horizontal`.

    Now you move one of these terminals down (`$mod+Shift+k` by default). The workspace node’s orientation will be changed to `vertical`. The terminal window you moved down is directly attached to the workspace and appears on the bottom of the screen. A new (horizontal) container was created to accommodate the other two terminal windows. You will notice this when switching to tabbed mode (for example). You would end up having one tab with a representation of the split container (e.g., "H\[urxvt firefox\]") and the other one being the terminal window you moved down.
- name: 4. Configuring i3
  id: index#configuring
  summary: This is where the real fun begins ;-). Most things are very dependent on your ideal working environment so we can’t make reasonable defaults for them
  description: |-
    ## 4. Configuring i3

    This is where the real fun begins ;-). Most things are very dependent on your ideal working environment so we can’t make reasonable defaults for them.

    While not using a programming language for the configuration, i3 stays quite flexible in regards to the things you usually want your window manager to do.

    For example, you can configure bindings to jump to specific windows, you can set specific applications to start on specific workspaces, you can automatically start applications, you can change the colors of i3, and you can bind your keys to do useful things.

    To change the configuration of i3, copy `/etc/i3/config` to `~/.i3/config` (or `~/.config/i3/config` if you like the XDG directory scheme) and edit it with a text editor.

    On first start (and on all following starts, unless you have a configuration file), i3 will offer you to create a configuration file. You can tell the wizard to use either Alt (`Mod1`) or Windows (`Mod4`) as modifier in the config file. Also, the created config file will use the key symbols of your current keyboard layout. To start the wizard, use the command `i3-config-wizard`. Please note that you must not have `~/.i3/config`, otherwise the wizard will exit.

    Since i3 4.0, a new configuration format is used. i3 will try to automatically detect the format version of a config file based on a few different keywords, but if you want to make sure that your config is read with the new format, include the following line in your config file:

                      # i3 config file (v4)
- name: 4.1. Include directive
  id: index#include
  summary: Since i3 v4.20, it is possible to include other configuration files from your i3 configuration
  description: "### 4.1. Include directive\n\nSince i3 v4.20, it is possible to include other configuration files from your i3 configuration.\n\n**Syntax**:\n\n                    include <pattern>\n                  \n\ni3 expands `pattern` using shell-like word expansion, specifically using the [`wordexp(3)` C standard library function](https://manpages.debian.org/wordexp.3).\n\n**Examples**:\n\n                    # Tilde expands to the user’s home directory:\n    include ~/.config/i3/assignments.conf\n\n    # Environment variables are expanded:\n    include $HOME/.config/i3/assignments.conf\n\n    # Wildcards are expanded:\n    include ~/.config/i3/config.d/*.conf\n\n    # Command substitution:\n    include ~/.config/i3/`hostname`.conf\n\n    # i3 loads each path only once, so including the i3 config will not result\n    # in an endless loop, but in an error:\n    include ~/.config/i3/config\n\n    # i3 changes the working directory while parsing a config file\n    # so that relative paths are interpreted relative to the directory\n    # of the config file that contains the path:\n    include assignments.conf\n                  \n\nIf a specified file cannot be read, for example because of a lack of file permissions, or because of a dangling symlink, i3 will report an error and continue processing your remaining configuration.\n\nTo list all loaded configuration files, run `i3 --moreversion`:\n\n                    % i3 --moreversion\n    Binary i3 version:  4.19.2-87-gfcae64f7+ © 2009 Michael Stapelberg and contributors\n    Running i3 version: 4.19.2-87-gfcae64f7+ (pid 963940)\n    Loaded i3 config:\n      /tmp/i3.cfg (main) (last modified: 2021-05-13T16:42:31 CEST, 463 seconds ago)\n      /tmp/included.cfg (included) (last modified: 2021-05-13T16:42:43 CEST, 451 seconds ago)\n      /tmp/another.cfg (included) (last modified: 2021-05-13T16:42:46 CEST, 448 seconds ago)\n                  \n\nVariables are shared between all config files, but beware of the following limitation:\n\n- You can define a variable and use it within an included file.\n\n- You cannot use (in the parent file) a variable that was defined within an included file.\n\nThis is a technical limitation: variable expansion happens in a separate stage before parsing include directives.\n\nConceptually, included files can only add to the configuration, not undo the effects of already-processed configuration. For example, you can only add new key bindings, not overwrite or remove existing key bindings. This means:\n\n- The `include` directive is suitable for organizing large configurations into separate files, possibly selecting files based on conditionals.\n\n- The `include` directive is not suitable for expressing “use the default configuration with the following changes”. For that case, we still recommend copying and modifying the default config.\n\n[TABLE]"
- name: 4.2. Comments
  id: index#_comments
  summary: It is possible and recommended to use comments in your configuration file to properly document your setup for later reference
  description: |-
    ### 4.2. Comments

    It is possible and recommended to use comments in your configuration file to properly document your setup for later reference. Comments are started with a \# and can only be used at the beginning of a line:

    **Examples**:

                        # This is a comment
- name: 4.3. Fonts
  id: index#fonts
  summary: i3 has support for both X core fonts and FreeType fonts (through Pango) to render window titles
  description: "### 4.3. Fonts\n\ni3 has support for both X core fonts and FreeType fonts (through Pango) to render window titles.\n\nTo generate an X core font description, you can use `xfontsel(1)`. To see special characters (Unicode), you need to use a font which supports the ISO-10646 encoding.\n\nA FreeType font description is composed by a font family, a style, a weight, a variant, a stretch and a size. FreeType fonts support right-to-left rendering and contain often more Unicode glyphs than X core fonts.\n\nIf i3 cannot open the configured font, it will output an error in the logfile and fall back to a working font.\n\n**Syntax**:\n\n                    font <X core font description>\n    font pango:<family list> [<style options>] <size>\n                  \n\n**Examples**:\n\n                    font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1\n    font pango:DejaVu Sans Mono 10\n    font pango:DejaVu Sans Mono, Terminus Bold Semi-Condensed 11\n    font pango:Terminus 11px"
- name: 4.4. Keyboard bindings
  id: index#keybindings
  summary: A keyboard binding makes i3 execute a command (see below) upon pressing a specific key
  description: "### 4.4. Keyboard bindings\n\nA keyboard binding makes i3 execute a command (see below) upon pressing a specific key. i3 allows you to bind either on keycodes or on keysyms (you can also mix your bindings, though i3 will not protect you from overlapping ones).\n\n- A keysym (key symbol) is a description for a specific symbol, like \"a\" or \"b\", but also more strange ones like \"underscore\" instead of \"\\_\". These are the ones you use in Xmodmap to remap your keys. To get the current mapping of your keys, use `xmodmap -pke`. To interactively enter a key and see what keysym it is configured to, use `xev`.\n\n- Keycodes do not need to have a symbol assigned (handy for custom vendor hotkeys on some notebooks) and they will not change their meaning as you switch to a different keyboard layout (when using `xmodmap`).\n\nMy recommendation is: If you often switch keyboard layouts but you want to keep your bindings in the same physical location on the keyboard, use keycodes. If you don’t switch layouts, and want a clean and simple config file, use keysyms.\n\nSome tools (such as `import` or `xdotool`) might be unable to run upon a KeyPress event, because the keyboard/pointer is still grabbed. For these situations, the `--release` flag can be used, which will execute the command after the keys have been released.\n\n**Syntax**:\n\n                    bindsym [--release] [<Group>+][<Modifiers>+]<keysym> command\n    bindcode [--release] [<Group>+][<Modifiers>+]<keycode> command\n                  \n\n**Examples**:\n\n                    # Fullscreen\n    bindsym $mod+f fullscreen toggle\n\n    # Restart\n    bindsym $mod+Shift+r restart\n\n    # Notebook-specific hotkeys\n    bindcode 214 exec --no-startup-id /home/michael/toggle_beamer.sh\n\n    # Simulate ctrl+v upon pressing $mod+x\n    bindsym --release $mod+x exec --no-startup-id xdotool key --clearmodifiers ctrl+v\n\n    # Take a screenshot upon pressing $mod+x (select an area)\n    bindsym --release $mod+x exec --no-startup-id import /tmp/latest-screenshot.png\n                  \n\nAvailable Modifiers:\n\nMod1-Mod5, Shift, Control  \nStandard modifiers, see `xmodmap(1)`\n\nGroup1, Group2, Group3, Group4  \nWhen using multiple keyboard layouts (e.g. with `setxkbmap -layout us,ru`), you can specify in which XKB group (also called “layout”) a keybinding should be active. By default, keybindings are translated in Group1 and are active in all groups. If you want to override keybindings in one of your layouts, specify the corresponding group. For backwards compatibility, the group “Mode_switch” is an alias for Group2."
- name: 4.5. Mouse bindings
  id: index#mousebindings
  summary: A mouse binding makes i3 execute a command upon pressing a specific mouse button in the scope of the clicked container (see [command_criteria]). You can configure mouse bindings in a similar way to key bindings
  description: "### 4.5. Mouse bindings\n\nA mouse binding makes i3 execute a command upon pressing a specific mouse button in the scope of the clicked container (see [\\[command_criteria\\]](#command_criteria)). You can configure mouse bindings in a similar way to key bindings.\n\n**Syntax**:\n\n                    bindsym [--release] [--border] [--whole-window] [--exclude-titlebar] [<Modifiers>+]button<n> command\n                  \n\nBy default, the binding will only run when you click on the titlebar of the window. If the `--release` flag is given, it will run when the mouse button is released.\n\nIf the `--whole-window` flag is given, the binding will also run when any part of the window is clicked, with the exception of the border. To have a bind run when the border is clicked, specify the `--border` flag.\n\nIf the `--exclude-titlebar` flag is given, the titlebar will not be considered for the keybinding.\n\n**Examples**:\n\n                    # The middle button over a titlebar kills the window\n    bindsym --release button2 kill\n\n    # The middle button and a modifier over any part of the window kills the window\n    bindsym --whole-window $mod+button2 kill\n\n    # The right button toggles floating\n    bindsym button3 floating toggle\n    bindsym $mod+button3 floating toggle\n\n    # The side buttons move the window around\n    bindsym button9 move left\n    bindsym button8 move right"
- name: 4.6. Binding modes
  id: index#binding_modes
  summary: You can have multiple sets of bindings by using different binding modes
  description: "### 4.6. Binding modes\n\nYou can have multiple sets of bindings by using different binding modes. When you switch to another binding mode, all bindings from the current mode are released and only the bindings defined in the new mode are valid for as long as you stay in that binding mode. The only predefined binding mode is `default`, which is the mode i3 starts out with and to which all bindings not defined in a specific binding mode belong.\n\nWorking with binding modes consists of two parts: defining a binding mode and switching to it. For these purposes, there are one config directive and one command, both of which are called `mode`. The directive is used to define the bindings belonging to a certain binding mode, while the command will switch to the specified mode.\n\nIt is recommended to use binding modes in combination with [\\[variables\\]](#variables) in order to make maintenance easier. Below is an example of how to use a binding mode.\n\nNote that it is advisable to define bindings for switching back to the default mode.\n\nNote that it is possible to use [\\[pango_markup\\]](#pango_markup) for binding modes, but you need to enable it explicitly by passing the `--pango_markup` flag to the mode definition.\n\n**Syntax**:\n\n                    # config directive\n    mode [--pango_markup] <name>\n\n    # command\n    mode <name>\n                  \n\n**Example**:\n\n                    # Press $mod+o followed by either f, t, Escape or Return to launch firefox,\n    # thunderbird or return to the default mode, respectively.\n    set $mode_launcher Launch: [f]irefox [t]hunderbird\n    bindsym $mod+o mode \"$mode_launcher\"\n\n    mode \"$mode_launcher\" {\n        bindsym f exec firefox\n        bindsym t exec thunderbird\n\n        bindsym Escape mode \"default\"\n        bindsym Return mode \"default\"\n    }"
- name: 4.7. The floating modifier
  id: index#floating_modifier
  summary: To move floating windows with your mouse, you can either grab their titlebar or configure the so-called floating modifier which you can then press and click anywhere in the window itself to move it
  description: "### 4.7. The floating modifier\n\nTo move floating windows with your mouse, you can either grab their titlebar or configure the so-called floating modifier which you can then press and click anywhere in the window itself to move it. The most common setup is to use the same key you use for managing windows (Mod1 for example). Then you can press Mod1, click into a window using your left mouse button, and drag it to the position you want.\n\nWhen holding the floating modifier, you can resize a floating window by pressing the right mouse button on it and moving around while holding it. If you hold the shift button as well, the resize will be proportional (the aspect ratio will be preserved).\n\n**Syntax**:\n\n                    floating_modifier <Modifier>\n                  \n\n**Example**:\n\n                    floating_modifier Mod1"
- name: 4.8. Constraining floating window size
  id: index#_constraining_floating_window_size
  summary: The maximum and minimum dimensions of floating windows can be specified
  description: "### 4.8. Constraining floating window size\n\nThe maximum and minimum dimensions of floating windows can be specified. If either dimension of `floating_maximum_size` is specified as -1, that dimension will be unconstrained with respect to its maximum value. If either dimension of `floating_maximum_size` is undefined, or specified as 0, i3 will use a default value to constrain the maximum size. `floating_minimum_size` is treated in a manner analogous to `floating_maximum_size`.\n\n**Syntax**:\n\n                    floating_minimum_size <width> x <height>\n    floating_maximum_size <width> x <height>\n                  \n\n**Example**:\n\n                    floating_minimum_size 75 x 50\n    floating_maximum_size -1 x -1"
- name: 4.9. Orientation for new workspaces
  id: index#_orientation_for_new_workspaces
  summary: 'New workspaces get a reasonable default orientation: Wide-screen monitors (anything wider than high) get horizontal orientation, rotated monitors (anything higher than wide) get vertical orientation'
  description: "### 4.9. Orientation for new workspaces\n\nNew workspaces get a reasonable default orientation: Wide-screen monitors (anything wider than high) get horizontal orientation, rotated monitors (anything higher than wide) get vertical orientation.\n\nWith the `default_orientation` configuration directive, you can override that behavior.\n\n**Syntax**:\n\n                    default_orientation horizontal|vertical|auto\n                  \n\n**Example**:\n\n                    default_orientation vertical"
- name: 4.10. Layout mode for new containers
  id: index#_layout_mode_for_new_containers
  summary: This option determines in which mode new containers on workspace level will start
  description: "### 4.10. Layout mode for new containers\n\nThis option determines in which mode new containers on workspace level will start.\n\n**Syntax**:\n\n                    workspace_layout default|stacking|tabbed\n                  \n\n**Example**:\n\n                    workspace_layout tabbed"
- name: 4.11. Window title alignment
  id: index#_window_title_alignment
  summary: This option determines the window title’s text alignment
  description: |-
    ### 4.11. Window title alignment

    This option determines the window title’s text alignment. Default is `left`

    **Syntax**:

                        title_align left|center|right
- name: 4.12. Default border style for new windows
  id: index#default_border
  summary: This option determines which border style new windows will have
  description: "### 4.12. Default border style for new windows\n\nThis option determines which border style **new** windows will have. The default is `normal`. Note that default_floating_border applies only to windows which are starting out as floating windows, e.g., dialog windows, but not windows that are floated later on.\n\nSetting border style to `pixel` eliminates title bars in split layouts. The border style `normal` allows you to adjust edge border width while keeping your title bar.\n\nThe title bar is always visible in stacking and tabbed layouts, and this cannot be changed through configuration.\n\n**Syntax**:\n\n                    default_border normal|none|pixel\n    default_border normal|pixel <px>\n    default_floating_border normal|none|pixel\n    default_floating_border normal|pixel <px>\n                  \n\nPlease note that `new_window` and `new_float` have been deprecated in favor of the above options and will be removed in a future release. We strongly recommend using the new options instead.\n\n**Example**:\n\n                    default_border pixel\n                  \n\nThe \"normal\" and \"pixel\" border styles support an optional border width in pixels:\n\n**Example**:\n\n                    # The same as default_border none\n    default_border pixel 0\n\n    # A 3 px border\n    default_border pixel 3"
- name: 4.13. Hiding borders adjacent to the screen edges
  id: index#_hiding_vertical_borders
  summary: You can hide container borders adjacent to the screen edges using hide_edge_borders (the default is none). Hiding borders is useful if you are using scrollbars, or do not want to waste even two pixels in displayspace
  description: "### 4.13. Hiding borders adjacent to the screen edges\n\nYou can hide container borders adjacent to the screen edges using `hide_edge_borders` (the default is `none`). Hiding borders is useful if you are using scrollbars, or do not want to waste even two pixels in displayspace.\n\nThe \"smart\" setting hides borders on workspaces with only one window visible, but keeps them on workspaces with multiple windows visible.\n\nThe \"smart_no_gaps\" setting hides edge-specific borders of a container if the container is the only container on its workspace and the gaps to the screen edge are `0`.\n\n`hide_edge_borders` has replaced the old `smart_borders` syntax. Use the former instead of the latter.\n\n**Syntax**:\n\n                    hide_edge_borders none|vertical|horizontal|both|smart|smart_no_gaps\n                  \n\n**Example**:\n\n                    hide_edge_borders vertical"
- name: 4.14. Arbitrary commands for specific windows (for_window)
  id: index#for_window
  summary: With the for_window directive, you can let i3 execute any command when it encounters a specific window
  description: "### 4.14. Arbitrary commands for specific windows (for_window)\n\nWith the `for_window` directive, you can let i3 execute any command when it encounters a specific window. This can be used to set windows to floating or to change their border style, for example.\n\n**Syntax**:\n\n                    for_window <criteria> <command>\n                  \n\n**Examples**:\n\n                    # enable floating mode for all XTerm windows\n    for_window [class=\"XTerm\"] floating enable\n\n    # Make all urxvts use a 1-pixel border:\n    for_window [class=\"urxvt\"] border pixel 1\n\n    # A less useful, but rather funny example:\n    # makes the window floating as soon as I change\n    # directory to ~/work\n    for_window [title=\"x200: ~/work\"] floating enable\n                  \n\nThe valid criteria are the same as those for commands, see [\\[command_criteria\\]](#command_criteria). Only commands can be executed at runtime, not config directives, see [\\[list_of_commands\\]](#list_of_commands)."
- name: 4.15. Don’t focus window upon opening
  id: index#no_focus
  summary: When a new window appears, it will be focused
  description: "### 4.15. Don’t focus window upon opening\n\nWhen a new window appears, it will be focused. The `no_focus` directive allows preventing this from happening and must be used in combination with [\\[command_criteria\\]](#command_criteria).\n\nNote that this does not apply to all cases, e.g., when feeding data into a running application causing it to request being focused. To configure the behavior in such cases, refer to [\\[focus_on_window_activation\\]](#focus_on_window_activation).\n\n`no_focus` will also be ignored for the first window on a workspace as there shouldn’t be a reason to not focus the window in this case. This allows for better usability in combination with `workspace_layout`.\n\n**Syntax**:\n\n                    no_focus <criteria>\n                  \n\n**Example**:\n\n                    no_focus [window_role=\"pop-up\"]"
- name: 4.16. Variables
  id: index#variables
  summary: As you learned in the section about keyboard bindings, you will have to configure lots of bindings containing modifier keys
  description: "### 4.16. Variables\n\nAs you learned in the section about keyboard bindings, you will have to configure lots of bindings containing modifier keys. If you want to save yourself some typing and be able to change the modifier you use later, variables can be handy.\n\n**Syntax**:\n\n                    set $<name> <value>\n                  \n\n**Example**:\n\n                    set $m Mod1\n    bindsym $m+Shift+r restart\n                  \n\nVariables are directly replaced in the file when parsing. Variables expansion is not recursive so it is not possible to define a variable with a value containing another variable. There is no fancy handling and there are absolutely no plans to change this. If you need a more dynamic configuration you should create a little script which generates a configuration file and run it before starting i3 (for example in your `~/.xsession` file).\n\nAlso see [\\[xresources\\]](#xresources) to learn how to create variables based on resources loaded from the X resource database."
- name: 4.17. X resources
  id: index#xresources
  summary: '[variables] can also be created using a value configured in the X resource database'
  description: "### 4.17. X resources\n\n[\\[variables\\]](#variables) can also be created using a value configured in the X resource database. This is useful, for example, to avoid configuring color values within the i3 configuration. Instead, the values can be configured, once, in the X resource database to achieve an easily maintainable, consistent color theme across many X applications.\n\nDefining a resource will load this resource from the resource database and assign its value to the specified variable. This is done verbatim and the value must therefore be in the format that i3 uses. A fallback must be specified in case the resource cannot be loaded from the database.\n\n**Syntax**:\n\n                    set_from_resource $<name> <resource_name> <fallback>\n                  \n\n**Example**:\n\n                    # The ~/.Xresources should contain a line such as\n    #     *color0: #121212\n    # and must be loaded properly, e.g., by using\n    #     xrdb ~/.Xresources\n    # This value is picked up on by other applications (e.g., the URxvt terminal\n    # emulator) and can be used in i3 like this:\n    set_from_resource $black i3wm.color0 #000000"
- name: 4.18. Automatically putting clients on specific workspaces
  id: index#assign_workspace
  summary: To automatically make a specific window show up on a specific workspace, you can use an assignment
  description: "### 4.18. Automatically putting clients on specific workspaces\n\nTo automatically make a specific window show up on a specific workspace, you can use an **assignment**. You can match windows by using any criteria, see [\\[command_criteria\\]](#command_criteria). The difference between `assign` and `for_window <criteria> move to workspace` is that the former will only be executed when the application maps the window (mapping means actually displaying it on the screen) but the latter will be executed whenever a window changes its properties to something that matches the specified criteria.\n\nThus, it is recommended that you match on window classes (and instances, when appropriate) instead of window titles whenever possible because some applications first create their window, and then worry about setting the correct title. Firefox with Vimperator comes to mind. The window starts up being named Firefox, and only when Vimperator is loaded does the title change. As i3 will get the title as soon as the application maps the window, you’d need to have to match on *Firefox* in this case. Another known issue is with Spotify, which doesn’t set the class hints when mapping the window, meaning you’ll have to use a `for_window` rule to assign Spotify to a specific workspace. Finally, using `assign [tiling]` and `assign [floating]` is not supported.\n\nYou can also assign a window to show up on a specific output. You can use RandR names such as `VGA1` or names relative to the output with the currently focused workspace such as `left` and `down`.\n\nAssignments are processed by i3 in the order in which they appear in the config file. The first one which matches the window wins and later assignments are not considered.\n\n**Syntax**:\n\n                    assign <criteria> [→] [workspace] [number] <workspace>\n    assign <criteria> [→] output left|right|up|down|primary|nonprimary|<output>\n                  \n\n**Examples**:\n\n                    # Assign URxvt terminals to workspace 2\n    assign [class=\"URxvt\"] 2\n\n    # Same thing, but more precise (exact match instead of substring)\n    assign [class=\"^URxvt$\"] 2\n\n    # Same thing, but with a beautiful arrow :)\n    assign [class=\"^URxvt$\"] → 2\n\n    # Assignment to a named workspace\n    assign [class=\"^URxvt$\"] → work\n\n    # Assign to the workspace with number 2, regardless of name\n    assign [class=\"^URxvt$\"] → number 2\n\n    # You can also specify a number + name. If the workspace with number 2 exists,\n    # assign will skip the text part.\n    assign [class=\"^URxvt$\"] → number \"2: work\"\n\n    # Start urxvt -name irssi\n    assign [class=\"^URxvt$\" instance=\"^irssi$\"] → 3\n\n    # Assign urxvt to the output right of the current one\n    assign [class=\"^URxvt$\"] → output right\n\n    # Assign urxvt to the primary output\n    assign [class=\"^URxvt$\"] → output primary\n\n    # Assign urxvt to the first non-primary output\n    assign [class=\"^URxvt$\"] → output nonprimary\n                  \n\nNote that you might not have a primary output configured yet. To do so, run:\n\n                    xrandr --output <output> --primary\n                  \n\nAlso, the arrow is not required, it just looks good :-). If you decide to use it, it has to be a UTF-8 encoded arrow, not `->` or something like that.\n\nTo get the class and instance, you can use `xprop`. After clicking on the window, you will see the following output:\n\n**xprop**:\n\n                    WM_CLASS(STRING) = \"irssi\", \"URxvt\"\n                  \n\nThe first part of the WM_CLASS is the instance (\"irssi\" in this example), the second part is the class (\"URxvt\" in this example).\n\nShould you have any problems with assignments, make sure to check the i3 logfile first (see <https://i3wm.org/docs/debugging.html>). It includes more details about the matching process and the window’s actual class, instance and title when starting up.\n\nNote that if you want to start an application just once on a specific workspace, but you don’t want to assign all instances of it permanently, you can make use of i3’s startup-notification support (see [\\[exec\\]](#exec)) in your config file in the following way:\n\n**Start iceweasel on workspace 3 (once)**:\n\n                    # Start iceweasel on workspace 3, then switch back to workspace 1\n    # (Being a command-line utility, i3-msg does not support startup notifications,\n    #  hence the exec --no-startup-id.)\n    # (Starting iceweasel with i3’s exec command is important in order to make i3\n    #  create a startup notification context, without which the iceweasel window(s)\n    #  cannot be matched onto the workspace on which the command was started.)\n    exec --no-startup-id i3-msg 'workspace 3; exec iceweasel; workspace 1'"
- name: 4.19. Automatically starting applications on i3 startup
  id: index#_automatically_starting_applications_on_i3_startup
  summary: By using the exec keyword outside a keybinding, you can configure which commands will be performed by i3 on initial startup
  description: "### 4.19. Automatically starting applications on i3 startup\n\nBy using the `exec` keyword outside a keybinding, you can configure which commands will be performed by i3 on initial startup. `exec` commands will not run when restarting i3, if you need a command to run also when restarting i3 you should use the `exec_always` keyword. These commands will be run in order.\n\nSee [\\[command_chaining\\]](#command_chaining) for details on the special meaning of `;` (semicolon) and `,` (comma): they chain commands together in i3, so you need to use quoted strings (as shown in [\\[exec_quoting\\]](#exec_quoting)) if they appear in your command.\n\n**Syntax**:\n\n                    exec [--no-startup-id] <command>\n    exec_always [--no-startup-id] <command>\n                  \n\n**Examples**:\n\n                    exec chromium\n    exec_always ~/my_script.sh\n\n    # Execute the terminal emulator urxvt, which is not yet startup-notification aware.\n    exec --no-startup-id urxvt\n                  \n\nThe flag --no-startup-id is explained in [\\[exec\\]](#exec)."
- name: 4.20. Automatically putting workspaces on specific screens
  id: index#workspace_screen
  summary: If you assign clients to workspaces, it might be handy to put the workspaces on specific screens
  description: "### 4.20. Automatically putting workspaces on specific screens\n\nIf you assign clients to workspaces, it might be handy to put the workspaces on specific screens. Also, the assignment of workspaces to screens will determine which workspace i3 uses for a new screen when adding screens or when starting (e.g., by default it will use 1 for the first screen, 2 for the second screen and so on).\n\n**Syntax**:\n\n                    workspace <workspace> output <output1> [output2]…\n                  \n\nThe *output* is the name of the RandR output you attach your screen to. On a laptop, you might have VGA1 and LVDS1 as output names. You can see the available outputs by running `xrandr --current`.\n\nIf your X server supports RandR 1.5 or newer, i3 will use RandR monitor objects instead of output objects. Run `xrandr --listmonitors` to see a list. Usually, a monitor object contains exactly one output, and has the same name as the output; but should that not be the case, you can specify the name of either the monitor or the output in i3’s configuration. For example, the Dell UP2414Q uses two scalers internally, so its output names might be “DP1” and “DP2”, but the monitor name is “Dell UP2414Q”.\n\n(Note that even if you specify the name of an output which doesn’t span the entire monitor, i3 will still use the entire area of the containing monitor rather than that of just the output’s.)\n\nYou can specify multiple outputs. The first available will be used.\n\nIf you use named workspaces, they must be quoted:\n\n**Examples**:\n\n                    workspace 1 output LVDS1\n    workspace 2 output primary\n    workspace 5 output VGA1 LVDS1\n    workspace \"2: vim\" output VGA1"
- name: 4.21. Changing colors
  id: index#client_colors
  summary: You can change all colors which i3 uses to draw the window decorations
  description: "### 4.21. Changing colors\n\nYou can change all colors which i3 uses to draw the window decorations.\n\n**Syntax**:\n\n                    <colorclass> <border> <background> <text> <indicator> <child_border>\n                  \n\nWhere colorclass can be one of:\n\nclient.focused  \nA client which currently has the focus.\n\nclient.focused_inactive  \nA client which is the focused one of its container, but it does not have the focus at the moment.\n\nclient.focused_tab_title  \nTab or stack container title that is the parent of the focused container but not directly focused. Defaults to focused_inactive if not specified and does not use the indicator and child_border colors.\n\nclient.unfocused  \nA client which is not the focused one of its container.\n\nclient.urgent  \nA client which has its urgency hint activated.\n\nclient.placeholder  \nBackground and text color are used to draw placeholder window contents (when restoring layouts). Border and indicator are ignored.\n\nclient.background  \nBackground color which will be used to paint the background of the client window on top of which the client will be rendered. Only clients which do not cover the whole area of this window expose the color. Note that this colorclass only takes a single color.\n\nColors are in HTML hex format (#rrggbb, optionally \\#rrggbbaa), see the following example:\n\n**Examples (default colors)**:\n\n                    # class                 border  backgr. text    indicator child_border\n    client.focused          #4c7899 #285577 #ffffff #2e9ef4   #285577\n    client.focused_inactive #333333 #5f676a #ffffff #484e50   #5f676a\n    client.unfocused        #333333 #222222 #888888 #292d2e   #222222\n    client.urgent           #2f343a #900000 #ffffff #900000   #900000\n    client.placeholder      #000000 #0c0c0c #ffffff #000000   #0c0c0c\n\n    client.background       #ffffff\n                  \n\nNote that for the window decorations, the color around the child window is the \"child_border\", and \"border\" color is only the two thin lines around the titlebar.\n\nThe indicator color is used for indicating where a new window will be opened. For horizontal split containers, the right border will be painted in indicator color, for vertical split containers, the bottom border. This only applies to single windows within a split container, which are otherwise indistinguishable from single windows outside of a split container."
- name: 4.22. Interprocess communication
  id: index#_interprocess_communication
  summary: i3 uses Unix sockets to provide an IPC interface
  description: "### 4.22. Interprocess communication\n\ni3 uses Unix sockets to provide an IPC interface. This allows third-party programs to get information from i3, such as the current workspaces (to display a workspace bar), and to control i3.\n\nBy default, an IPC socket will be created in `$XDG_RUNTIME_DIR/i3/ipc-socket.%p` if the directory is available, falling back to `/tmp/i3-%u.XXXXXX/ipc-socket.%p`, where `%u` is your UNIX username, `%p` is the PID of i3 and XXXXXX is a string of random characters from the portable filename character set (see mkdtemp(3)).\n\nYou can override the default path through the environment-variable `I3SOCK` or by specifying the `ipc-socket` directive. This is discouraged, though, since i3 does the right thing by default. If you decide to change it, it is strongly recommended to set this to a location in your home directory so that no other user can create that directory.\n\n**Examples**:\n\n                    ipc-socket ~/.i3/i3-ipc.sock\n                  \n\nYou can then use the `i3-msg` application to perform any command listed in [\\[list_of_commands\\]](#list_of_commands)."
- name: 4.23. Focus follows mouse
  id: index#_focus_follows_mouse
  summary: By default, window focus follows your mouse movements as the mouse crosses window borders
  description: "### 4.23. Focus follows mouse\n\nBy default, window focus follows your mouse movements as the mouse crosses window borders. However, if you have a setup where your mouse usually is in your way (like a touchpad on your laptop which you do not want to disable completely), you might want to disable *focus follows mouse* and control focus only by using your keyboard. The mouse will still be useful inside the currently active window (for example to click on links in your browser window).\n\n**Syntax**:\n\n                    focus_follows_mouse yes|no\n                  \n\n**Example**:\n\n                    focus_follows_mouse no"
- name: 4.24. Mouse warping
  id: index#_mouse_warping
  summary: By default, when switching focus to a window on a different output (e.g
  description: "### 4.24. Mouse warping\n\nBy default, when switching focus to a window on a different output (e.g. focusing a window on workspace 3 on output VGA-1, coming from workspace 2 on LVDS-1), the mouse cursor is warped to the center of that window.\n\nWith the `mouse_warping` option, you can control when the mouse cursor should be warped. `none` disables warping entirely, whereas `output` is the default behavior described above.\n\n**Syntax**:\n\n                    mouse_warping output|none\n                  \n\n**Example**:\n\n                    mouse_warping none"
- name: 4.25. Popups during fullscreen mode
  id: index#_popups_during_fullscreen_mode
  summary: Display the popup if it belongs to the fullscreen application only
  description: "### 4.25. Popups during fullscreen mode\n\nWhen you are in fullscreen mode, some applications still open popup windows (take Xpdf for example). This is because these applications might not be aware that they are in fullscreen mode (they do not check the corresponding hint). There are three things which are possible to do in this situation:\n\n1.  Display the popup if it belongs to the fullscreen application only. This is the default and should be reasonable behavior for most users.\n\n2.  Just ignore the popup (don’t map it). This won’t interrupt you while you are in fullscreen. However, some apps might react badly to this (deadlock until you go out of fullscreen).\n\n3.  Leave fullscreen mode.\n\n**Syntax**:\n\n                    popup_during_fullscreen smart|ignore|leave_fullscreen\n                  \n\n**Example**:\n\n                    popup_during_fullscreen smart"
- name: 4.26. Focus wrapping
  id: index#_focus_wrapping
  summary: By default, when in a container with several windows or child containers, the opposite window will be focused when trying to move the focus over the edge of a container (and there are no other containers in that direction) — the focus wraps
  description: "### 4.26. Focus wrapping\n\nBy default, when in a container with several windows or child containers, the opposite window will be focused when trying to move the focus over the edge of a container (and there are no other containers in that direction) — the focus wraps.\n\nIf desired, you can disable this behavior by setting the `focus_wrapping` configuration directive to the value `no`.\n\nWhen enabled, focus wrapping does not occur by default if there is another window or container in the specified direction, and focus will instead be set on that window or container. This is the default behavior so you can navigate to all your windows without having to use `focus parent`.\n\nIf you want the focus to **always** wrap and you are aware of using `focus parent` to switch to different containers, you can instead set `focus_wrapping` to the value `force`.\n\nTo restrict focus inside the current workspace set `focus_wrapping` to the value `workspace`. You will need to use `focus parent` until a workspace is selected to switch to a different workspace using the focus commands (the `workspace` command will still work as expected).\n\n**Syntax**:\n\n                    focus_wrapping yes|no|force|workspace\n\n    # Legacy syntax, equivalent to \"focus_wrapping force\"\n    force_focus_wrapping yes\n                  \n\n**Examples**:\n\n                    # Disable focus wrapping\n    focus_wrapping no\n\n    # Force focus wrapping\n    focus_wrapping force"
- name: 4.27. Forcing Xinerama
  id: index#_forcing_xinerama
  summary: As explained in-depth in https://i3wm.org/docs/multi-monitor.html, some X11 video drivers (especially the nVidia binary driver) only provide support for Xinerama instead of RandR
  description: "### 4.27. Forcing Xinerama\n\nAs explained in-depth in <https://i3wm.org/docs/multi-monitor.html>, some X11 video drivers (especially the nVidia binary driver) only provide support for Xinerama instead of RandR. In such a situation, i3 must be told to use the inferior Xinerama API explicitly and therefore don’t provide support for reconfiguring your screens on the fly (they are read only once on startup and that’s it).\n\nFor people who cannot modify their `~/.xsession` to add the `--force-xinerama` commandline parameter, a configuration option is provided:\n\n**Syntax**:\n\n                    force_xinerama yes|no\n                  \n\n**Example**:\n\n                    force_xinerama yes\n                  \n\nAlso note that your output names are not descriptive (like `HDMI1`) when using Xinerama, instead they are counted up, starting at 0: `xinerama-0`, `xinerama-1`, …"
- name: 4.28. Automatic back-and-forth when switching to the current workspace
  id: index#workspace_auto_back_and_forth
  summary: This configuration directive enables automatic workspace back_and_forth (see [back_and_forth]) when switching to the workspace that is currently focused
  description: "### 4.28. Automatic back-and-forth when switching to the current workspace\n\nThis configuration directive enables automatic `workspace back_and_forth` (see [\\[back_and_forth\\]](#back_and_forth)) when switching to the workspace that is currently focused.\n\nFor instance: Assume you are on workspace \"1: www\" and switch to \"2: IM\" using mod+2 because somebody sent you a message. You don’t need to remember where you came from now, you can just press $mod+2 again to switch back to \"1: www\".\n\n**Syntax**:\n\n                    workspace_auto_back_and_forth yes|no\n                  \n\n**Example**:\n\n                    workspace_auto_back_and_forth yes"
- name: 4.29. Delaying urgency hint reset on workspace change
  id: index#_delaying_urgency_hint_reset_on_workspace_change
  summary: If an application on another workspace sets an urgency hint, switching to this workspace might lead to immediate focus of the application, which also means the window decoration color would be immediately reset to client.focused
  description: "### 4.29. Delaying urgency hint reset on workspace change\n\nIf an application on another workspace sets an urgency hint, switching to this workspace might lead to immediate focus of the application, which also means the window decoration color would be immediately reset to `client.focused`. This might make it unnecessarily hard to tell which window originally raised the event.\n\nIn order to prevent this, you can tell i3 to delay resetting the urgency state by a certain time using the `force_display_urgency_hint` directive. Setting the value to 0 disables this feature.\n\nThe default is 500ms.\n\n**Syntax**:\n\n                    force_display_urgency_hint <timeout> ms\n                  \n\n**Example**:\n\n                    force_display_urgency_hint 500 ms"
- name: 4.30. Focus on window activation
  id: index#focus_on_window_activation
  summary: If a window is activated, e.g., via google-chrome www.google.com, it may request to take focus
  description: "### 4.30. Focus on window activation\n\nIf a window is activated, e.g., via `google-chrome www.google.com`, it may request to take focus. Since this might not be preferable, different reactions can be configured.\n\nNote that this might not affect windows that are being opened. To prevent new windows from being focused, see [\\[no_focus\\]](#no_focus).\n\n**Syntax**:\n\n                    focus_on_window_activation smart|urgent|focus|none\n                  \n\nThe different modes will act as follows:\n\nsmart  \nThis is the default behavior. If the window requesting focus is on an active workspace, it will receive the focus. Otherwise, the urgency hint will be set.\n\nurgent  \nThe window will always be marked urgent, but the focus will not be stolen.\n\nfocus  \nThe window will always be focused and not be marked urgent.\n\nnone  \nThe window will neither be focused, nor be marked urgent."
- name: 4.31. Drawing marks on window decoration
  id: index#show_marks
  summary: If activated, marks (see [vim_like_marks]) on windows are drawn in their window decoration
  description: "### 4.31. Drawing marks on window decoration\n\nIf activated, marks (see [\\[vim_like_marks\\]](#vim_like_marks)) on windows are drawn in their window decoration. However, any mark starting with an underscore in its name (`_`) will not be drawn even if this option is activated.\n\nThe default for this option is `yes`.\n\n**Syntax**:\n\n                    show_marks yes|no\n                  \n\n**Example**:\n\n                    show_marks yes"
- name: 4.32. Line continuation
  id: index#line_continuation
  summary: Config files support line continuation, meaning when you end a line in a backslash character (\), the line-break will be ignored by the parser
  description: |-
    ### 4.32. Line continuation

    Config files support line continuation, meaning when you end a line in a backslash character (`\`), the line-break will be ignored by the parser. This feature can be used to create more readable configuration files. Commented lines are not continued.

    **Examples**:

                        bindsym Mod1+f \
        fullscreen toggle

        # this line is not continued \
        bindsym Mod1+F fullscreen toggle
- name: 4.33. Tiling drag
  id: index#config_tiling_drag
  summary: The default is modifier
  description: "### 4.33. Tiling drag\n\nYou can configure how to initiate the tiling drag feature (see [\\[tiling_drag\\]](#tiling_drag)).\n\nThe default is `modifier`.\n\n**Syntax**:\n\n                    tiling_drag off\n    tiling_drag modifier|titlebar [modifier|titlebar]\n                  \n\n**Examples**:\n\n                    # Only initiate a tiling drag when the modifier is held:\n    tiling_drag modifier\n\n    # Initiate a tiling drag on either titlebar click or held modifier:\n    tiling_drag modifier titlebar\n\n    # Disable tiling drag altogether\n    tiling_drag off"
- name: 4.34. Gaps
  id: index#gaps
  summary: Since i3 4.22, you can configure window gaps
  description: "### 4.34. Gaps\n\nSince i3 4.22, you can configure window gaps. “Gaps” are added spacing between windows (or split containers) and to the screen edges:\n\nFigure 5. Gaps enabled (10 px inner gaps, 20 px outer gaps)\n\nYou can configure two different kind of gaps:\n\n1.  Inner gaps are space between two adjacent windows (or split containers).\n\n2.  Outer gaps are space along the screen edges. You can configure each side (left, right, top, bottom) separately.\n\nIf you are familiar with HTML and CSS, you can think of inner gaps as `padding`, and of outer gaps as `margin`, applied to a `<div>` around your window or split container.\n\nNote that outer gaps are added to the inner gaps, meaning the total gap size between a screen edge and a window (or split container) will be the sum of outer and inner gaps.\n\nYou can define gaps either globally or per workspace using the following syntax.\n\n**Syntax**:\n\n                    # Inner gaps for all windows: space between two adjacent windows (or split containers).\n    gaps inner <gap_size>[px]\n\n    # Outer gaps for all windows: space along the screen edges.\n    gaps outer|horizontal|vertical|top|left|bottom|right <gap_size>[px]\n\n    # Inner and outer gaps for all windows on a specific workspace.\n    # <ws> can be a workspace number or name.\n    workspace <ws> gaps inner <gap_size>[px]\n    workspace <ws> gaps outer|horizontal|vertical|top|left|bottom|right <gap_size>[px]\n\n    # Enabling “Smart Gaps” means no gaps will be shown when there is\n    # precisely one window or split container on the workspace.\n    #\n    # inverse_outer only enables outer gaps when there is exactly one\n    # window or split container on the workspace.\n    smart_gaps on|off|inverse_outer\n                  \n\nOuter gaps can be configured for each side individually with the `top`, `left`, `bottom` and `right` directive. `horizontal` and `vertical` are shortcuts for `left`/`right` and `top`/`bottom`, respectively.\n\n**Example**:\n\n                    # Configure 5px of space between windows and to the screen edges.\n    gaps inner 5px\n\n    # Configure an additional 5px of extra space to the screen edges,\n    # for a total gap of 10px to the screen edges, and 5px between windows.\n    gaps outer 5px\n\n    # Overwrite gaps to 0, I need all the space I can get on workspace 3.\n    workspace 3 gaps inner 0\n    workspace 3 gaps outer 0\n\n    # Only enable outer gaps when there is exactly one window or split container on the workspace.\n    smart_gaps inverse_outer\n                  \n\nTip: Gaps can additionally be changed at runtime with the `gaps` command, see [\\[changing_gaps\\]](#changing_gaps).\n\nTip: You can find an [example configuration](https://github.com/Airblader/i3/wiki/Example-Configuration) that uses modes to illustrate various gap configurations."
- name: 5. Configuring i3bar
  id: index#_configuring_i3bar
  summary: The bar at the bottom of your monitor is drawn by a separate process called i3bar
  description: |-
    ## 5. Configuring i3bar

    The bar at the bottom of your monitor is drawn by a separate process called i3bar. Having this part of "the i3 user interface" in a separate process has several advantages:

    1.  It is a modular approach. If you don’t need a workspace bar at all, or if you prefer a different one (dzen2, xmobar, maybe even gnome-panel?), you can just remove the i3bar configuration and start your favorite bar instead.

    2.  It follows the UNIX philosophy of "Make each program do one thing well". While i3 manages your windows well, i3bar is good at displaying a bar on each monitor (unless you configure it otherwise).

    3.  It leads to two separate, clean codebases. If you want to understand i3, you don’t need to bother with the details of i3bar and vice versa.

    That said, i3bar is configured in the same configuration file as i3. This is because it is tightly coupled with i3 (in contrary to i3lock or i3status which are useful for people using other window managers). Therefore, it makes no sense to use a different configuration place when we already have a good configuration infrastructure in place.

    Configuring your workspace bar starts with opening a `bar` block. You can have multiple bar blocks to use different settings for different outputs (monitors):

    **Example**:

                      bar {
            status_command i3status
        }
- name: 5.1. i3bar command
  id: index#_i3bar_command
  summary: By default i3 will just pass i3bar and let your shell handle the execution, searching your $PATH for a correct version
  description: "### 5.1. i3bar command\n\nBy default i3 will just pass `i3bar` and let your shell handle the execution, searching your `$PATH` for a correct version. If you have a different `i3bar` somewhere or the binary is not in your `$PATH` you can tell i3 what to execute.\n\nThe specified command will be passed to `sh -c`, so you can use globbing and have to have correct quoting etc.\n\n**Syntax**:\n\n                    i3bar_command <command>\n                  \n\n**Example**:\n\n                    bar {\n        i3bar_command /home/user/bin/i3bar\n    }"
- name: 5.2. Statusline command
  id: index#status_command
  summary: i3bar can run a program and display every line of its stdout output on the right hand side of the bar
  description: "### 5.2. Statusline command\n\ni3bar can run a program and display every line of its `stdout` output on the right hand side of the bar. This is useful to display system information like your current IP address, battery status or date/time.\n\nThe specified command will be passed to `sh -c`, so you can use globbing and have to have correct quoting etc. Note that for signal handling, depending on your shell (users of dash(1) are known to be affected), you have to use the shell’s exec command so that signals are passed to your program, not to the shell.\n\n**Syntax**:\n\n                    status_command <command>\n                  \n\n**Example**:\n\n                    bar {\n        status_command i3status --config ~/.i3status.conf\n\n        # For dash(1) users who want signal handling to work:\n        status_command exec ~/.bin/my_status_command\n    }"
- name: 5.3. Workspace buttons command
  id: index#workspace_command
  summary: Since i3 4.23, i3bar can run a program and use its stdout output to define the workspace buttons displayed on the left hand side of the bar
  description: "### 5.3. Workspace buttons command\n\nSince i3 4.23, i3bar can run a program and use its `stdout` output to define the workspace buttons displayed on the left hand side of the bar. With this feature, you can, for example, rename the buttons of workspaces, hide specific workspaces, always show a workspace button even if the workspace does not exist or change the order of the buttons.\n\nAlso see [\\[status_command\\]](#status_command) for the statusline option and <https://i3wm.org/docs/i3bar-workspace-protocol.html> for the detailed protocol.\n\n**Syntax**:\n\n                    workspace_command <command>\n                  \n\n**Example**:\n\n                    bar {\n        workspace_command /path/to/script.sh\n    }"
- name: 5.4. Display mode
  id: index#_display_mode
  summary: You can either have i3bar be visible permanently at one edge of the screen (dock mode) or make it show up when you press your modifier key (hide mode). It is also possible to force i3bar to always stay hidden (invisible mode). The modifier key can be configured using the modifier option
  description: "### 5.4. Display mode\n\nYou can either have i3bar be visible permanently at one edge of the screen (`dock` mode) or make it show up when you press your modifier key (`hide` mode). It is also possible to force i3bar to always stay hidden (`invisible` mode). The modifier key can be configured using the `modifier` option.\n\nThe mode option can be changed during runtime through the `bar mode` command. On reload the mode will be reverted to its configured value.\n\nThe hide mode maximizes screen space that can be used for actual windows. When the bar is hidden, i3bar sends the `SIGSTOP` and `SIGCONT` signals to the `status_command` process in order to conserve battery power. This feature can be disabled by the `status_command` process by setting the appropriate values in its JSON header message.\n\nInvisible mode allows to permanently maximize screen space, as the bar is never shown. Thus, you can configure i3bar to not disturb you by popping up because of an urgency hint or because the modifier key is pressed.\n\nIn order to control whether i3bar is hidden or shown in hide mode, there exists the hidden_state option, which has no effect in dock mode or invisible mode. It indicates the current hidden_state of the bar: (1) The bar acts like in normal hide mode, it is hidden and is only unhidden in case of urgency hints or by pressing the modifier key (`hide` state), or (2) it is drawn on top of the currently visible workspace (`show` state).\n\nLike the mode, the hidden_state can also be controlled through i3, this can be done by using the `bar hidden_state` command.\n\nThe default mode is dock mode; in hide mode, the default modifier is Mod4 (usually the windows key). The default value for the hidden_state is hide.\n\n**Syntax**:\n\n                    mode dock|hide|invisible\n    hidden_state hide|show\n    modifier <Modifier>|none\n                  \n\n**Example**:\n\n                    bar {\n        mode hide\n        hidden_state hide\n        modifier Mod1\n    }\n                  \n\nAvailable modifiers are Mod1-Mod5, Shift, Control (see `xmodmap(1)`). You can also use \"none\" if you don’t want any modifier to trigger this behavior."
- name: 5.5. Mouse button commands
  id: index#_mouse_button_commands
  summary: Specifies a command to run when a button was pressed on i3bar to override the default behavior
  description: "### 5.5. Mouse button commands\n\nSpecifies a command to run when a button was pressed on i3bar to override the default behavior. This is useful, e.g., for disabling the scroll wheel action or running scripts that implement custom behavior for these buttons.\n\nA button is always named `button<n>`, where 1 to 5 are default buttons as follows and higher numbers can be special buttons on devices offering more buttons:\n\nbutton1  \nLeft mouse button.\n\nbutton2  \nMiddle mouse button.\n\nbutton3  \nRight mouse button.\n\nbutton4  \nScroll wheel up.\n\nbutton5  \nScroll wheel down.\n\nbutton6  \nScroll wheel right.\n\nbutton7  \nScroll wheel left.\n\nPlease note that the old `wheel_up_cmd` and `wheel_down_cmd` commands are deprecated and will be removed in a future release. We strongly recommend using the more general `bindsym` with `button4` and `button5` instead.\n\n**Syntax**:\n\n                    bindsym [--release] button<n> <command>\n                  \n\n**Example**:\n\n                    bar {\n        # disable clicking on workspace buttons\n        bindsym button1 nop\n        # Take a screenshot by right clicking on the bar\n        bindsym --release button3 exec --no-startup-id import /tmp/latest-screenshot.png\n        # execute custom script when scrolling downwards\n        bindsym button5 exec ~/.i3/scripts/custom_wheel_down\n    }"
- name: 5.6. Bar ID
  id: index#_bar_id
  summary: Specifies the bar ID for the configured bar instance
  description: "### 5.6. Bar ID\n\nSpecifies the bar ID for the configured bar instance. If this option is missing, the ID is set to *bar-x*, where x corresponds to the position of the embedding bar block in the config file (*bar-0*, *bar-1*, …).\n\n**Syntax**:\n\n                    id <bar_id>\n                  \n\n**Example**:\n\n                    bar {\n        id bar-1\n    }"
- name: 5.7. Position
  id: index#i3bar_position
  summary: This option determines in which edge of the screen i3bar should show up
  description: "### 5.7. Position\n\nThis option determines in which edge of the screen i3bar should show up.\n\nThe default is bottom.\n\n**Syntax**:\n\n                    position top|bottom\n                  \n\n**Example**:\n\n                    bar {\n        position top\n    }"
- name: 5.8. Output(s)
  id: index#_output_s
  summary: You can restrict i3bar to one or more outputs (monitors). The default is to handle all outputs
  description: "### 5.8. Output(s)\n\nYou can restrict i3bar to one or more outputs (monitors). The default is to handle all outputs. Restricting the outputs is useful for using different options for different outputs by using multiple *bar* blocks.\n\nTo make a particular i3bar instance handle multiple outputs, specify the output directive multiple times.\n\nThese output names have a special meaning:\n\nprimary  \nSelects the output that is configured as primary in the X server.\n\nnonprimary  \nSelects every output that is not configured as primary in the X server.\n\n**Syntax**:\n\n                    output primary|nonprimary|<output>\n                  \n\n**Example**:\n\n                    # big monitor: everything\n    bar {\n        # The display is connected either via HDMI or via DisplayPort\n        output HDMI2\n        output DP2\n        status_command i3status\n    }\n\n    # laptop monitor: bright colors and i3status with less modules.\n    bar {\n        output LVDS1\n        status_command i3status --config ~/.i3status-small.conf\n        colors {\n            background #000000\n            statusline #ffffff\n        }\n    }\n\n    # show bar on the primary monitor and on HDMI2\n    bar {\n        output primary\n        output HDMI2\n        status_command i3status\n    }\n                  \n\nNote that you might not have a primary output configured yet. To do so, run:\n\n                    xrandr --output <output> --primary"
- name: 5.9. Tray output
  id: index#_tray_output
  summary: i3bar by default provides a system tray area where programs such as NetworkManager, VLC, Pidgin, etc
  description: "### 5.9. Tray output\n\ni3bar by default provides a system tray area where programs such as NetworkManager, VLC, Pidgin, etc. can place little icons.\n\nYou can configure on which output (monitor) the icons should be displayed or you can turn off the functionality entirely.\n\nYou can use multiple `tray_output` directives in your config to specify a list of outputs on which you want the tray to appear. The first available output in that list as defined by the order of the directives will be used for the tray output.\n\n**Syntax**:\n\n                    tray_output none|primary|<output>\n                  \n\n**Example**:\n\n                    # disable system tray\n    bar {\n        tray_output none\n    }\n\n    # show tray icons on the primary monitor\n    bar {\n        tray_output primary\n    }\n\n    # show tray icons on the big monitor\n    bar {\n        tray_output HDMI2\n    }\n                  \n\nNote that you might not have a primary output configured yet. To do so, run:\n\n                    xrandr --output <output> --primary\n                  \n\nNote that when you use multiple bar configuration blocks, either specify `tray_output primary` in all of them or explicitly specify `tray_output none` in bars which should not display the tray, otherwise the different instances might race each other in trying to display tray icons."
- name: 5.10. Tray padding
  id: index#_tray_padding
  summary: The tray is shown on the right-hand side of the bar
  description: "### 5.10. Tray padding\n\nThe tray is shown on the right-hand side of the bar. By default, a padding of 2 pixels is used for the upper, lower and right-hand side of the tray area and between the individual icons.\n\n**Syntax**:\n\n                    tray_padding <px> [px]\n                  \n\n**Example**:\n\n                    # Obey Fitts's law\n    tray_padding 0"
- name: 5.11. Font
  id: index#_font
  summary: Specifies the font to be used in the bar
  description: "### 5.11. Font\n\nSpecifies the font to be used in the bar. See [\\[fonts\\]](#fonts).\n\n**Syntax**:\n\n                    font <font>\n                  \n\n**Example**:\n\n                    bar {\n        font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1\n        font pango:DejaVu Sans Mono 10\n    }"
- name: 5.12. Custom separator symbol
  id: index#_custom_separator_symbol
  summary: Specifies a custom symbol to be used for the separator as opposed to the vertical, one pixel thick separator
  description: "### 5.12. Custom separator symbol\n\nSpecifies a custom symbol to be used for the separator as opposed to the vertical, one pixel thick separator.\n\n**Syntax**:\n\n                    separator_symbol <symbol>\n                  \n\n**Example**:\n\n                    bar {\n        separator_symbol \":|:\"\n    }"
- name: 5.13. Workspace buttons
  id: index#_workspace_buttons
  summary: Specifies whether workspace buttons should be shown or not
  description: "### 5.13. Workspace buttons\n\nSpecifies whether workspace buttons should be shown or not. This is useful if you want to display a statusline-only bar containing additional information.\n\nThe default is to show workspace buttons.\n\n**Syntax**:\n\n                    workspace_buttons yes|no\n                  \n\n**Example**:\n\n                    bar {\n        workspace_buttons no\n    }"
- name: 5.14. Minimal width for workspace buttons
  id: index#_minimal_width_for_workspace_buttons
  summary: By default, the width a workspace button is determined by the width of the text showing the workspace name
  description: "### 5.14. Minimal width for workspace buttons\n\nBy default, the width a workspace button is determined by the width of the text showing the workspace name. If the name is too short (say, one letter), then the workspace button might look too small.\n\nThis option specifies the minimum width for workspace buttons. If the name of a workspace is too short to cover the button, an additional padding is added on both sides of the button so that the text is centered.\n\nThe default value of zero means that no additional padding is added.\n\nThe setting also applies to the current binding mode indicator.\n\nNote that the specified pixels refer to logical pixels, which might translate into more pixels on HiDPI displays.\n\n**Syntax**:\n\n                    workspace_min_width <px> [px]\n                  \n\n**Example**:\n\n                    bar {\n        workspace_min_width 40\n    }"
- name: 5.15. Strip workspace numbers/name
  id: index#_strip_workspace_numbers_name
  summary: Specifies whether workspace numbers should be displayed within the workspace buttons
  description: "### 5.15. Strip workspace numbers/name\n\nSpecifies whether workspace numbers should be displayed within the workspace buttons. This is useful if you want to have a named workspace that stays in order on the bar according to its number without displaying the number prefix.\n\nWhen `strip_workspace_numbers` is set to `yes`, any workspace that has a name of the form \"\\[n\\]\\[:\\]\\[NAME\\]\" will display only the name. You could use this, for instance, to display Roman numerals rather than digits by naming your workspaces to \"1:I\", \"2:II\", \"3:III\", \"4:IV\", …\n\nWhen `strip_workspace_name` is set to `yes`, any workspace that has a name of the form \"\\[n\\]\\[:\\]\\[NAME\\]\" will display only the number.\n\nThe default is to display the full name within the workspace button. Be aware that the colon in the workspace name is optional, so `[n][NAME]` will also have the workspace name and number stripped correctly.\n\n**Syntax**:\n\n                    strip_workspace_numbers yes|no\n    strip_workspace_name yes|no\n                  \n\n**Example**:\n\n                    bar {\n        strip_workspace_numbers yes\n    }"
- name: 5.16. Binding Mode indicator
  id: index#_binding_mode_indicator
  summary: Specifies whether the current binding mode indicator should be shown or not
  description: "### 5.16. Binding Mode indicator\n\nSpecifies whether the current binding mode indicator should be shown or not. This is useful if you want to hide the workspace buttons but still be able to see the current binding mode indicator. See [\\[binding_modes\\]](#binding_modes) to learn what modes are and how to use them.\n\nThe default is to show the mode indicator.\n\n**Syntax**:\n\n                    binding_mode_indicator yes|no\n                  \n\n**Example**:\n\n                    bar {\n        binding_mode_indicator no\n    }"
- name: 5.17. Colors
  id: index#_colors
  summary: background Background color of the bar
  description: "### 5.17. Colors\n\nAs with i3, colors are in HTML hex format (#rrggbb, optionally \\#rrggbbaa). The following colors can be configured at the moment:\n\nbackground  \nBackground color of the bar.\n\nstatusline  \nText color to be used for the statusline.\n\nseparator  \nText color to be used for the separator.\n\nfocused_background  \nBackground color of the bar on the currently focused monitor output. If not used, the color will be taken from `background`.\n\nfocused_statusline  \nText color to be used for the statusline on the currently focused monitor output. If not used, the color will be taken from `statusline`.\n\nfocused_separator  \nText color to be used for the separator on the currently focused monitor output. If not used, the color will be taken from `separator`.\n\nfocused_workspace  \nBorder, background and text color for a workspace button when the workspace has focus.\n\nactive_workspace  \nBorder, background and text color for a workspace button when the workspace is active (visible) on some output, but the focus is on another one. You can only tell this apart from the focused workspace when you are using multiple monitors.\n\ninactive_workspace  \nBorder, background and text color for a workspace button when the workspace does not have focus and is not active (visible) on any output. This will be the case for most workspaces.\n\nurgent_workspace  \nBorder, background and text color for a workspace button when the workspace contains a window with the urgency hint set.\n\nbinding_mode  \nBorder, background and text color for the binding mode indicator. If not used, the colors will be taken from `urgent_workspace`.\n\n**Syntax**:\n\n                    colors {\n        background <color>\n        statusline <color>\n        separator <color>\n\n        <colorclass> <border> <background> <text>\n    }\n                  \n\n**Example (default colors)**:\n\n                    bar {\n        colors {\n            background #000000\n            statusline #ffffff\n            separator #666666\n\n            focused_workspace  #4c7899 #285577 #ffffff\n            active_workspace   #333333 #5f676a #ffffff\n            inactive_workspace #333333 #222222 #888888\n            urgent_workspace   #2f343a #900000 #ffffff\n            binding_mode       #2f343a #900000 #ffffff\n        }\n    }"
- name: 5.18. Transparency
  id: index#_transparency
  summary: In the i3bar color configuration and i3bar status block color attribute you can then use colors in the RGBA format, i.e
  description: "### 5.18. Transparency\n\ni3bar can support transparency by passing the `--transparency` flag in the configuration:\n\n**Syntax**:\n\n                    bar {\n        i3bar_command i3bar --transparency\n    }\n                  \n\nIn the i3bar color configuration and i3bar status block color attribute you can then use colors in the RGBA format, i.e. the last two (hexadecimal) digits specify the opacity. For example, `#00000000` will be completely transparent, while `#000000FF` will be a fully opaque black (the same as `#000000`).\n\nPlease note that due to the way the tray specification works, enabling this flag will cause all tray icons to have a transparent background."
- name: 5.19. Padding
  id: index#i3bar_padding
  summary: 'Note: As a convenience for users who migrate from i3-gaps to i3, the height directive from i3-gaps is supported by i3, but should be changed to padding'
  description: "### 5.19. Padding\n\nTo make i3bar higher (without increasing the font size), and/or add padding to the left and right side of i3bar, you can use the `padding` directive:\n\n**Syntax**:\n\n                    bar {\n        # 2px left/right and 2px top/bottom padding\n        padding 2px\n\n        # 2px top/bottom padding, no left/right padding\n        padding 2px 0\n\n        # 2px top padding, no left/right padding, 4px bottom padding\n        padding 2px 0 4px\n\n        # four value syntax\n        padding top[px] right[px] bottom[px] left[px]\n    }\n                  \n\n**Examples**:\n\n                    bar {\n        # 2px left/right and 2px top/bottom padding\n        padding 2px\n\n        # 2px top/bottom padding, no left/right padding\n        padding 2px 0\n\n        # 2px top padding, no left/right padding, 4px bottom padding\n        padding 2px 0 4px\n\n        # 2px top padding, 6px right padding, 4px bottom padding, 1px left padding\n        padding 2px 6px 4px 1px\n    }\n                  \n\nNote: As a convenience for users who migrate from i3-gaps to i3, the `height` directive from i3-gaps is supported by i3, but should be changed to `padding`."
- name: 6. List of commands
  id: index#list_of_commands
  summary: Commands are what you bind to specific keypresses
  description: "## 6. List of commands\n\nCommands are what you bind to specific keypresses. You can also issue commands at runtime without pressing a key by using the IPC interface. An easy way to do this is to use the `i3-msg` utility:\n\n**Example**:\n\n                  # execute this on your shell to make the current container borderless\n    i3-msg border none\n                \n\nCommands can be chained by using `;` (a semicolon). So, to move a window to a specific workspace and immediately switch to that workspace, you can configure the following keybinding:\n\n**Example**:\n\n                  bindsym $mod+x move container to workspace 3; workspace 3\n                \n\nFurthermore, you can change the scope of a command - that is, which containers should be affected by that command, by using various criteria. The criteria are specified before any command in a pair of square brackets and are separated by space.\n\nWhen using multiple commands, separate them by using a `,` (a comma) instead of a semicolon. Criteria apply only until the next semicolon, so if you use a semicolon to separate commands, only the first one will be executed for the matched window(s).\n\n**Example**:\n\n                  # if you want to kill all windows which have the class Firefox, use:\n    bindsym $mod+x [class=\"Firefox\"] kill\n\n    # same thing, but case-insensitive\n    bindsym $mod+x [class=\"(?i)firefox\"] kill\n\n    # kill only the About dialog from Firefox\n    bindsym $mod+x [class=\"Firefox\" window_role=\"About\"] kill\n\n    # kill all windows except for Firefox and Gnome Terminal.\n    # case-insensitive and uses negative lookaheads, supported by PCRE\n    bindsym $mod+x [class=\"^(?i)(?!firefox)(?!gnome-terminal).*\"] kill\n\n    # enable floating mode and move container to workspace 4\n    for_window [class=\"^evil-app$\"] floating enable, move container to workspace 4\n\n    # enable window icons for all windows with extra horizontal padding of 1px\n    for_window [all] title_window_icon padding 1px\n\n    # move all floating windows to the scratchpad\n    bindsym $mod+x [floating] move scratchpad\n                \n\nThe criteria which are currently implemented are:\n\nall  \nMatches all windows. This criterion requires no value.\n\nclass  \nCompares the window class (the second part of WM_CLASS). Use the special value `__focused__` to match all windows having the same window class as the currently focused window.\n\ninstance  \nCompares the window instance (the first part of WM_CLASS). Use the special value `__focused__` to match all windows having the same window instance as the currently focused window.\n\nwindow_role  \nCompares the window role (WM_WINDOW_ROLE). Use the special value `__focused__` to match all windows having the same window role as the currently focused window.\n\nwindow_type  \nCompare the window type (\\_NET_WM_WINDOW_TYPE). Possible values are `normal`, `dialog`, `utility`, `toolbar`, `splash`, `menu`, `dropdown_menu`, `popup_menu`, `tooltip` and `notification`.\n\nmachine  \nCompares the name of the machine the client window is running on (WM_CLIENT_MACHINE). Usually, it is equal to the hostname of the local machine, but it may differ if remote X11 apps are used.\n\nid  \nCompares the X11 window ID, which you can get via `xwininfo` for example.\n\ntitle  \nCompares the X11 window title (\\_NET_WM_NAME or WM_NAME as fallback). Use the special value `__focused__` to match all windows having the same window title as the currently focused window.\n\nurgent  \nCompares the urgent state of the window. Can be \"latest\" or \"oldest\". Matches the latest or oldest urgent window, respectively. (The following aliases are also available: newest, last, recent, first)\n\nworkspace  \nCompares the workspace name of the workspace the window belongs to. Use the special value `__focused__` to match all windows in the currently focused workspace.\n\ncon_mark  \nCompares the marks set for this container, see [\\[vim_like_marks\\]](#vim_like_marks). A match is made if any of the container’s marks matches the specified mark.\n\ncon_id  \nCompares the i3-internal container ID, which you can get via the IPC interface. Handy for scripting. Use the special value `__focused__` to match only the currently focused window.\n\nfloating  \nOnly matches floating windows. This criterion requires no value.\n\nfloating_from  \nLike `floating` but this criterion takes two possible values: \"auto\" and \"user\". With \"auto\", only windows that were automatically opened as floating are matched. With \"user\", only windows that the user made floating are matched.\n\ntiling  \nOnly matches tiling windows. This criterion requires no value.\n\ntiling_from  \nLike `tiling` but this criterion takes two possible values: \"auto\" and \"user\". With \"auto\", only windows that were automatically opened as tiling are matched. With \"user\", only windows that the user made tiling are matched.\n\nThe criteria `class`, `instance`, `role`, `title`, `workspace`, `machine` and `mark` are actually regular expressions (PCRE). See `pcresyntax(3)` or `perldoc perlre` for information on how to use them."
- name: 6.1. Executing applications (exec)
  id: index#exec
  summary: What good is a window manager if you can’t actually start any applications? The exec command starts an application by passing the command you specify to a shell
  description: "### 6.1. Executing applications (exec)\n\nWhat good is a window manager if you can’t actually start any applications? The exec command starts an application by passing the command you specify to a shell. This implies that you can use globbing (wildcards) and programs will be searched in your `$PATH`.\n\nSee [\\[command_chaining\\]](#command_chaining) for details on the special meaning of `;` (semicolon) and `,` (comma): they chain commands together in i3, so you need to use quoted strings (as shown in [\\[exec_quoting\\]](#exec_quoting)) if they appear in your command.\n\n**Syntax**:\n\n                    exec [--no-startup-id] <command>\n                  \n\n**Example**:\n\n                    # Start the GIMP\n    bindsym $mod+g exec gimp\n\n    # Start the terminal emulator urxvt which is not yet startup-notification-aware\n    bindsym $mod+Return exec --no-startup-id urxvt\n                  \n\nThe `--no-startup-id` parameter disables startup-notification support for this particular exec command. With startup-notification, i3 can make sure that a window appears on the workspace on which you used the exec command. Also, it will change the X11 cursor to `watch` (a clock) while the application is launching. So, if an application is not startup-notification aware (most GTK and Qt using applications seem to be, though), you will end up with a watch cursor for 60 seconds.\n\nIf the command to be executed contains a `;` (semicolon) and/or a `,` (comma), the entire command must be quoted. For example, to have a keybinding for the shell command `notify-send Hello, i3`, you would add an entry to your configuration file like this:\n\n**Example**:\n\n                    # Execute a command with a comma in it\n    bindsym $mod+p exec \"notify-send Hello, i3\"\n                  \n\nIf however a command with a comma and/or semicolon itself requires quotes, you must escape the internal quotation marks with double backslashes, like this:\n\n**Example**:\n\n                    # Execute a command with a comma, semicolon and internal quotes\n    bindsym $mod+p exec \"notify-send \\\\\"Hello, i3; from $USER\\\\\"\""
- name: 6.2. Splitting containers
  id: index#_splitting_containers
  summary: The split command makes the current window a split container
  description: "### 6.2. Splitting containers\n\nThe split command makes the current window a split container. Split containers can contain multiple windows. Depending on the layout of the split container, new windows get placed to the right of the current one (splith) or new windows get placed below the current one (splitv).\n\nIf you apply this command to a split container with the same orientation, nothing will happen. If you use a different orientation, the split container’s orientation will be changed (if it does not have more than one window). The `toggle` option will toggle the orientation of the split container if it contains a single window. Otherwise it makes the current window a split container with opposite orientation compared to the parent container. Use `layout toggle split` to change the layout of any split container from splitv to splith or vice-versa. You can also define a custom sequence of layouts to cycle through with `layout toggle`, see [\\[manipulating_layout\\]](#manipulating_layout).\n\n**Syntax**:\n\n                    split vertical|horizontal|toggle\n                  \n\n**Example**:\n\n                    bindsym $mod+v split vertical\n    bindsym $mod+h split horizontal\n    bindsym $mod+t split toggle"
- name: 6.3. Manipulating layout
  id: index#manipulating_layout
  summary: Use layout toggle split, layout stacking, layout tabbed, layout splitv or layout splith to change the current container layout to splith/splitv, stacking, tabbed layout, splitv or splith, respectively
  description: "### 6.3. Manipulating layout\n\nUse `layout toggle split`, `layout stacking`, `layout tabbed`, `layout splitv` or `layout splith` to change the current container layout to splith/splitv, stacking, tabbed layout, splitv or splith, respectively.\n\nSpecify up to four layouts after `layout toggle` to cycle through them. Every time the command is executed, the layout specified after the currently active one will be applied. If the currently active layout is not in the list, the first layout in the list will be activated.\n\nTo make the current window (!) fullscreen, use `fullscreen enable` (or `fullscreen enable global` for the global mode), to leave either fullscreen mode use `fullscreen disable`, and to toggle between these two states use `fullscreen toggle` (or `fullscreen toggle global`).\n\nLikewise, to make the current window floating (or tiling again) use `floating enable` respectively `floating disable` (or `floating toggle`):\n\n**Syntax**:\n\n                    layout default|tabbed|stacking|splitv|splith\n    layout toggle [split|all]\n    layout toggle [split|tabbed|stacking|splitv|splith] [split|tabbed|stacking|splitv|splith]…\n                  \n\n**Examples**:\n\n                    bindsym $mod+s layout stacking\n    bindsym $mod+l layout toggle split\n    bindsym $mod+w layout tabbed\n\n    # Toggle between stacking/tabbed/split:\n    bindsym $mod+x layout toggle\n\n    # Toggle between stacking/tabbed/splith/splitv:\n    bindsym $mod+x layout toggle all\n\n    # Toggle between stacking/tabbed/splith:\n    bindsym $mod+x layout toggle stacking tabbed splith\n\n    # Toggle between splitv/tabbed\n    bindsym $mod+x layout toggle splitv tabbed\n\n    # Toggle between last split layout/tabbed/stacking\n    bindsym $mod+x layout toggle split tabbed stacking\n\n    # Toggle fullscreen\n    bindsym $mod+f fullscreen toggle\n\n    # Toggle floating/tiling\n    bindsym $mod+t floating toggle"
- name: 6.4. Focusing containers
  id: index#_focusing_moving_containers
  summary: To change focus, you can use the focus command
  description: "### 6.4. Focusing containers\n\nTo change focus, you can use the `focus` command. The following options are available:\n\n\\<criteria\\>  \nSets focus to the container that matches the specified criteria. See [\\[command_criteria\\]](#command_criteria).\n\nworkspace  \nSets focus to the workspace that contains the container that matches the specified criteria.\n\nleft\\|right\\|up\\|down  \nSets focus to the nearest container in the given direction.\n\nparent  \nSets focus to the parent container of the current container.\n\nchild  \nThe opposite of `focus parent`, sets the focus to the last focused child container.\n\nnext\\|prev  \nAutomatically sets focus to the adjacent container. If `sibling` is specified, the command will focus the exact sibling container, including non-leaf containers like split containers. Otherwise, it is an automatic version of `focus left|right|up|down` in the orientation of the parent container.\n\nfloating  \nSets focus to the last focused floating container.\n\ntiling  \nSets focus to the last focused tiling container.\n\nmode_toggle  \nToggles between floating/tiling containers.\n\noutput  \nFollowed by a direction or an output name, this will focus the corresponding output.\n\n**Syntax**:\n\n                    <criteria> focus\n    <criteria> focus workspace\n    focus left|right|down|up\n    focus parent|child|floating|tiling|mode_toggle\n    focus next|prev [sibling]\n    focus output left|right|down|up|current|primary|nonprimary|next|<output1> [output2]…\n                  \n\n**Examples**:\n\n                    # Focus firefox\n    bindsym $mod+F1 [class=\"Firefox\"] focus\n\n    # Focus the workspace where firefox is, without necessarily focusing firefox\n    # itself.\n    bindsym $mod+x [class=\"Firefox\"] focus workspace\n\n    # Focus container on the left, bottom, top, right\n    bindsym $mod+j focus left\n    bindsym $mod+k focus down\n    bindsym $mod+l focus up\n    bindsym $mod+semicolon focus right\n\n    # Focus parent container\n    bindsym $mod+u focus parent\n\n    # Focus last floating/tiling container\n    bindsym $mod+g focus mode_toggle\n\n    # Focus the next output (effectively toggles when you only have two outputs)\n    bindsym $mod+x move workspace to output next\n\n    # Focus the output right to the current one\n    bindsym $mod+x focus output right\n\n    # Focus the big output\n    bindsym $mod+x focus output HDMI-2\n\n    # Focus the primary output\n    bindsym $mod+x focus output primary\n\n    # Cycle focus through non-primary outputs\n    bindsym $mod+x focus output nonprimary\n\n    # Cycle focus between outputs VGA1 and LVDS1 but not DVI0\n    bindsym $mod+x focus output VGA1 LVDS1\n                  \n\nNote that you might not have a primary output configured yet. To do so, run:\n\n                    xrandr --output <output> --primary"
- name: 6.5. Moving containers
  id: index#move_direction
  summary: Use the move command to move a container
  description: "### 6.5. Moving containers\n\nUse the `move` command to move a container.\n\n**Syntax**:\n\n                    # Moves the container into the given direction.\n    # The optional pixel argument specifies how far the\n    # container should be moved if it is floating and\n    # defaults to 10 pixels. The optional ppt argument\n    # means \"percentage points\", and if specified it indicates\n    # how many points the container should be moved if it is\n    # floating rather than by a pixel value.\n    move <left|right|down|up> [<amount> [px|ppt]]\n\n    # Moves the container to the specified pos_x and pos_y\n    # coordinates on the screen.\n    move position <pos_x> [px|ppt] <pos_y> [px|ppt]\n\n    # Moves the container to the center of the screen.\n    # If 'absolute' is used, it is moved to the center of\n    # all outputs.\n    move [absolute] position center\n\n    # Moves the container to the current position of the\n    # mouse cursor. Only affects floating containers.\n    move position mouse\n                  \n\n**Examples**:\n\n                    # Move container to the left, bottom, top, right\n    bindsym $mod+j move left\n    bindsym $mod+k move down\n    bindsym $mod+l move up\n    bindsym $mod+semicolon move right\n\n    # Move container, but make floating containers\n    # move more than the default\n    bindsym $mod+j move left 20 px\n\n    # Move floating container to the center of all outputs\n    bindsym $mod+c move absolute position center\n\n    # Move container to the current position of the cursor\n    bindsym $mod+m move position mouse"
- name: 6.6. Swapping containers
  id: index#_swapping_containers
  summary: Two containers can be swapped (i.e., move to each other’s position) by using the swap command
  description: "### 6.6. Swapping containers\n\nTwo containers can be swapped (i.e., move to each other’s position) by using the `swap` command. They will assume the position and geometry of the container they are swapped with.\n\nThe first container to participate in the swapping can be selected through the normal command criteria process with the focused window being the usual fallback if no criteria are specified. The second container can be selected using one of the following methods:\n\n`id`  \nThe X11 window ID of a client window.\n\n`con_id`  \nThe i3 container ID of a container.\n\n`mark`  \nA container with the specified mark, see [\\[vim_like_marks\\]](#vim_like_marks).\n\nNote that swapping does not work with all containers. Most notably, swapping containers that have a parent-child relationship to one another does not work.\n\n**Syntax**:\n\n                    swap container with id|con_id|mark <arg>\n                  \n\n**Examples**:\n\n                    # Swaps the focused container with the container marked »swapee«.\n    swap container with mark swapee\n\n    # Swaps container marked »A« and »B«\n    [con_mark=\"^A$\"] swap container with mark B"
- name: 6.7. Sticky floating windows
  id: index#_sticky_floating_windows
  summary: If you want a window to stick to the glass, i.e., have it stay on screen even if you switch to another workspace, you can use the sticky command
  description: "### 6.7. Sticky floating windows\n\nIf you want a window to stick to the glass, i.e., have it stay on screen even if you switch to another workspace, you can use the `sticky` command. For example, this can be useful for notepads, a media player or a video chat window.\n\nNote that while any window can be made sticky through this command, it will only take effect if the window is floating.\n\n**Syntax**:\n\n                    sticky enable|disable|toggle\n                  \n\n**Examples**:\n\n                    # make a terminal sticky that was started as a notepad\n    for_window [instance=notepad] sticky enable"
- name: 6.8. Changing (named) workspaces/moving to workspaces
  id: index#_changing_named_workspaces_moving_to_workspaces
  summary: To change to a specific workspace, use the workspace command, followed by the number or name of the workspace
  description: "### 6.8. Changing (named) workspaces/moving to workspaces\n\nTo change to a specific workspace, use the `workspace` command, followed by the number or name of the workspace. Pass the optional flag `--no-auto-back-and-forth` to disable [\\[workspace_auto_back_and_forth\\]](#workspace_auto_back_and_forth) for this specific call only.\n\nTo move containers to specific workspaces, use `move container to workspace`.\n\nYou can also switch to the next and previous workspace with the commands `workspace next` and `workspace prev`, which is handy, for example, if you have workspace 1, 3, 4 and 9 and you want to cycle through them with a single key combination. To restrict those to the current output, use `workspace next_on_output` and `workspace prev_on_output`. Similarly, you can use `move container to workspace next`, `move container to workspace prev` to move a container to the next/previous workspace and `move container to workspace current` (the last one makes sense only when used with criteria).\n\n`workspace next` cycles through either numbered or named workspaces. But when it reaches the last numbered/named workspace, it looks for named workspaces after exhausting numbered ones and looks for numbered ones after exhausting named ones.\n\nSee [\\[move_to_outputs\\]](#move_to_outputs) for how to move a container/workspace to a different RandR output.\n\nWorkspace names are parsed as [Pango markup](https://developer.gnome.org/pango/1.46/) by i3bar.\n\nTo switch back to the previously focused workspace, use `workspace back_and_forth`; likewise, you can move containers to the previously focused workspace using `move container to workspace back_and_forth`.\n\n**Syntax**:\n\n                    workspace next|prev|next_on_output|prev_on_output\n    workspace back_and_forth\n    workspace [--no-auto-back-and-forth] <name>\n    workspace [--no-auto-back-and-forth] number <name>\n\n    move [--no-auto-back-and-forth] [window|container] [to] workspace <name>\n    move [--no-auto-back-and-forth] [window|container] [to] workspace number <name>\n    move [window|container] [to] workspace prev|next|current\n                  \n\n**Examples**:\n\n                    bindsym $mod+1 workspace 1\n    bindsym $mod+2 workspace 2\n    bindsym $mod+3 workspace 3:<span foreground=\"red\">vim</span>\n    ...\n\n    bindsym $mod+Shift+1 move container to workspace 1\n    bindsym $mod+Shift+2 move container to workspace 2\n    ...\n\n    # switch between the current and the previously focused one\n    bindsym $mod+b workspace back_and_forth\n    bindsym $mod+Shift+b move container to workspace back_and_forth\n\n    # move the whole workspace to the next output\n    bindsym $mod+x move workspace to output right\n\n    # move firefox to current workspace\n    bindsym $mod+F1 [class=\"Firefox\"] move workspace current\n                  \n\n#### 6.8.1. Named workspaces\n\nWorkspaces are identified by their name. So, instead of using numbers in the workspace command, you can use an arbitrary name:\n\n**Example**:\n\n                      bindsym $mod+1 workspace mail\n    ...\n                    \n\nIf you want the workspace to have a number **and** a name, just prefix the number, like this:\n\n**Example**:\n\n                      bindsym $mod+1 workspace 1: mail\n    bindsym $mod+2 workspace 2: www\n    ...\n                    \n\nNote that the workspace will really be named \"1: mail\". i3 treats workspace names beginning with a number in a slightly special way. Normally, named workspaces are ordered the way they appeared. When they start with a number, i3 will order them numerically. Also, you will be able to use `workspace number 1` to switch to the workspace which begins with number 1, regardless of which name it has. This is useful in case you are changing the workspace’s name dynamically. To combine both commands you can use `workspace number 1: mail` to specify a default name if there’s currently no workspace starting with a \"1\".\n\n#### 6.8.2. Renaming workspaces\n\nYou can rename workspaces. This might be useful to start with the default numbered workspaces, do your work, and rename the workspaces afterwards to reflect what’s actually on them. You can also omit the old name to rename the currently focused workspace. This is handy if you want to use the rename command with `i3-input`.\n\n**Syntax**:\n\n                      rename workspace <old_name> to <new_name>\n    rename workspace to <new_name>\n                    \n\n**Examples**:\n\n                      i3-msg 'rename workspace 5 to 6'\n    i3-msg 'rename workspace 1 to \"1: www\"'\n    i3-msg 'rename workspace \"1: www\" to \"10: www\"'\n    i3-msg 'rename workspace to \"2: mail\"'\n    bindsym $mod+r exec i3-input -F 'rename workspace to \"%s\"' -P 'New name: '\n                    \n\nIf you want to rename workspaces on demand while keeping the navigation stable, you can use a setup like this:\n\n**Example**:\n\n                      bindsym $mod+1 workspace number \"1: www\"\n    bindsym $mod+2 workspace number \"2: mail\"\n    ...\n                    \n\nIf a workspace does not exist, the command `workspace number \"1: mail\"` will create workspace \"1: mail\".\n\nIf a workspace with number 1 already exists, the command will switch to this workspace and ignore the text part. So even when the workspace has been renamed \"1: web\", the above command will still switch to it. The command `workspace 1` will however create and move to a new workspace \"1\" alongside the existing \"1: mail\" workspace."
- name: 6.9. Moving workspaces to a different screen
  id: index#_moving_workspaces_to_a_different_screen
  summary: See [move_to_outputs] for how to move a container/workspace to a different RandR output
  description: |-
    ### 6.9. Moving workspaces to a different screen

    See [\[move_to_outputs\]](#move_to_outputs) for how to move a container/workspace to a different RandR output.
- name: 6.10. Moving containers/workspaces to RandR outputs
  id: index#move_to_outputs
  summary: 'If you specify more than one output, the container/workspace is cycled through them: If it is already in one of the outputs of the list, it will move to the next output in the list'
  description: "### 6.10. Moving containers/workspaces to RandR outputs\n\nTo move a container to another RandR output (addressed by names like `LVDS1` or `VGA1`) or to a RandR output identified by a specific direction (like `left`, `right`, `up` or `down`), there are two commands:\n\n**Syntax**:\n\n                    move container to output left|right|down|up|current|primary|nonprimary|next|<output1> [output2]…\n    move workspace to output left|right|down|up|current|primary|nonprimary|next|<output1> [output2]…\n                  \n\n**Examples**:\n\n                    # Move the current workspace to the next output\n    # (effectively toggles when you only have two outputs)\n    bindsym $mod+x move workspace to output next\n\n    # Cycle this workspace between outputs VGA1 and LVDS1 but not DVI0\n    bindsym $mod+x move workspace to output VGA1 LVDS1\n\n    # Put this window on the presentation output.\n    bindsym $mod+x move container to output VGA1\n\n    # Put this window on the primary output.\n    bindsym $mod+x move container to output primary\n                  \n\nIf you specify more than one output, the container/workspace is cycled through them: If it is already in one of the outputs of the list, it will move to the next output in the list. If it is in an output not in the list, it will move to the first specified output. Non-existing outputs are skipped.\n\nNote that you might not have a primary output configured yet. To do so, run:\n\n                    xrandr --output <output> --primary"
- name: 6.11. Moving containers/windows to marks
  id: index#move_to_mark
  summary: To move a container to another container with a specific mark (see [vim_like_marks]), you can use the following command
  description: "### 6.11. Moving containers/windows to marks\n\nTo move a container to another container with a specific mark (see [\\[vim_like_marks\\]](#vim_like_marks)), you can use the following command.\n\nThe window will be moved right after the marked container in the tree, i.e., it ends up in the same position as if you had opened a new window when the marked container was focused. If the mark is on a split container, the window will appear as a new child after the currently focused child within that container.\n\n**Syntax**:\n\n                    move window|container to mark <mark>\n                  \n\n**Example**:\n\n                    for_window [instance=\"tabme\"] move window to mark target"
- name: 6.12. Resizing containers/windows
  id: index#resizingconfig
  summary: Direction can either be one of up, down, left or right
  description: "### 6.12. Resizing containers/windows\n\nIf you want to resize containers/windows using your keyboard, you can use the `resize` command:\n\n**Syntax**:\n\n                    resize grow|shrink <direction> [<px> px [or <ppt> ppt]]\n    resize set [width] <width> [px | ppt]\n    resize set height <height> [px | ppt]\n    resize set [width] <width> [px | ppt] [height] <height> [px | ppt]\n                  \n\nDirection can either be one of `up`, `down`, `left` or `right`. Or you can be less specific and use `width` or `height`, in which case i3 will take/give space from all the other containers. The optional pixel argument specifies by how many pixels a container should be grown or shrunk (the default is 10 pixels). The optional ppt argument means \"percentage points\", and if specified it indicates that a **tiling container** should be grown or shrunk by that many points, instead of by the `px` value.\n\nNote about `resize set`: a value of 0 for \\<width\\> or \\<height\\> means \"do not resize in this direction\".\n\nIt is recommended to define bindings for resizing in a dedicated binding mode. See [\\[binding_modes\\]](#binding_modes) and the example in the i3 [default config](https://github.com/i3/i3/blob/next/etc/config.keycodes) for more context.\n\n**Example**:\n\n                    for_window [class=\"urxvt\"] resize set 640 480"
- name: 6.13. Jumping to specific windows
  id: index#_jumping_to_specific_windows
  summary: Often when in a multi-monitor environment, you want to quickly jump to a specific window
  description: "### 6.13. Jumping to specific windows\n\nOften when in a multi-monitor environment, you want to quickly jump to a specific window. For example, while working on workspace 3 you might want to jump to your mail client to email your boss that you’ve achieved some important goal. Instead of figuring out how to navigate to your mail client, it would be more convenient to have a shortcut. You can use the `focus` command with criteria for that.\n\n**Syntax**:\n\n                    [class=\"class\"] focus\n    [title=\"title\"] focus\n                  \n\n**Examples**:\n\n                    # Get me to the next open VIM instance\n    bindsym $mod+a [class=\"urxvt\" title=\"VIM\"] focus"
- name: 6.14. VIM-like marks (mark/goto)
  id: index#vim_like_marks
  summary: 'This feature is like the jump feature: It allows you to directly jump to a specific window (this means switching to the appropriate workspace and setting focus to the windows). However, you can directly mark a specific window with an arbitrary label and use it afterwards'
  description: "### 6.14. VIM-like marks (mark/goto)\n\nThis feature is like the jump feature: It allows you to directly jump to a specific window (this means switching to the appropriate workspace and setting focus to the windows). However, you can directly mark a specific window with an arbitrary label and use it afterwards. You can unmark the label in the same way, using the unmark command. If you don’t specify a label, unmark removes all marks. You do not need to ensure that your windows have unique classes or titles, and you do not need to change your configuration file.\n\nAs the command needs to include the label with which you want to mark the window, you cannot simply bind it to a key. `i3-input` is a tool created for this purpose: It lets you input a command and sends the command to i3. It can also prefix this command and display a custom prompt for the input dialog.\n\nThe additional `--toggle` option will remove the mark if the window already has this mark or add it otherwise. Note that you might need to use this in combination with `--add` (see below) as any other marks will otherwise be removed.\n\nThe `--replace` flag causes i3 to remove any existing marks, which is also the default behavior. You can use the `--add` flag to put more than one mark on a window.\n\nRefer to [\\[show_marks\\]](#show_marks) if you don’t want marks to be shown in the window decoration.\n\n**Syntax**:\n\n                    mark [--add|--replace] [--toggle] <identifier>\n    [con_mark=\"identifier\"] focus\n    unmark <identifier>\n                  \n\nYou can use `i3-input` to prompt for a mark name, then use the `mark` and `focus` commands to create and jump to custom marks:\n\n**Examples**:\n\n                    # read 1 character and mark the current window with this character\n    bindsym $mod+m exec i3-input -F 'mark %s' -l 1 -P 'Mark: '\n\n    # read 1 character and go to the window with the character\n    bindsym $mod+g exec i3-input -F '[con_mark=\"%s\"] focus' -l 1 -P 'Goto: '\n                  \n\nAlternatively, if you do not want to mess with `i3-input`, you could create separate bindings for a specific set of labels and then only use those labels:\n\n**Example (in a terminal)**:\n\n                    # marks the focused container\n    mark irssi\n\n    # focus the container with the mark \"irssi\"\n    '[con_mark=\"irssi\"] focus'\n\n    # remove the mark \"irssi\" from whichever container has it\n    unmark irssi\n\n    # remove all marks on all firefox windows\n    [class=\"(?i)firefox\"] unmark"
- name: 6.15. Window title format
  id: index#pango_markup
  summary: By default, i3 will simply print the X11 window title
  description: "### 6.15. Window title format\n\nBy default, i3 will simply print the X11 window title. Using `title_format`, this can be customized by setting the format to the desired output. This directive supports [Pango markup](https://developer.gnome.org/pango/1.46/) and the following placeholders which will be replaced:\n\n`%title`  \nFor normal windows, this is the X11 window title (\\_NET_WM_NAME or WM_NAME as fallback). When used on containers without a window (e.g., a split container inside a tabbed/stacked layout), this will be the tree representation of the container (e.g., \"H\\[xterm xterm\\]\").\n\n`%class`  \nThe X11 window class (second part of WM_CLASS). This corresponds to the `class` criterion, see [\\[command_criteria\\]](#command_criteria).\n\n`%instance`  \nThe X11 window instance (first part of WM_CLASS). This corresponds to the `instance` criterion, see [\\[command_criteria\\]](#command_criteria).\n\n`%machine`  \nThe X11 name of the machine (WM_CLIENT_MACHINE). This corresponds to the `machine` criterion, see [\\[command_criteria\\]](#command_criteria).\n\nUsing the [\\[for_window\\]](#for_window) directive, you can set the title format for any window based on [\\[command_criteria\\]](#command_criteria).\n\n**Syntax**:\n\n                    title_format <format>\n                  \n\n**Examples**:\n\n                    # give the focused window a prefix\n    bindsym $mod+p title_format \"Important | %title\"\n\n    # print all window titles bold\n    for_window [class=\".*\"] title_format \"<b>%title</b>\"\n\n    # print window titles of firefox windows red\n    for_window [class=\"(?i)firefox\"] title_format \"<span foreground='red'>%title</span>\""
- name: 6.16. Window title icon
  id: index#title_window_icon
  summary: By default, i3 does not display the window icon in the title bar
  description: "### 6.16. Window title icon\n\nBy default, i3 does not display the window icon in the title bar.\n\nStarting with i3 v4.20, you can optionally enable window icons either for specific windows or for all windows (using the [\\[for_window\\]](#for_window) directive).\n\n**Syntax**:\n\n                    title_window_icon <yes|no|toggle>\n    title_window_icon <padding|toggle> <px>\n                  \n\n**Examples**:\n\n                    # show the window icon for the focused window to make it stand out\n    bindsym $mod+p title_window_icon on\n\n    # enable window icons for all windows\n    for_window [all] title_window_icon on\n\n    # enable window icons for all windows with extra horizontal padding\n    for_window [all] title_window_icon padding 3px"
- name: 6.17. Changing border style
  id: index#_changing_border_style
  summary: To change the border of the current client, you can use border normal to use the normal border (including window title), border pixel 1 to use a 1-pixel border (no window title) and border none to make the client borderless
  description: "### 6.17. Changing border style\n\nTo change the border of the current client, you can use `border normal` to use the normal border (including window title), `border pixel 1` to use a 1-pixel border (no window title) and `border none` to make the client borderless.\n\nThere is also `border toggle` which will toggle the different border styles. The optional pixel argument can be used to specify the border width when switching to the normal and pixel styles.\n\nNote that \"pixel\" refers to logical pixel. On HiDPI displays, a logical pixel is represented by multiple physical pixels, so `pixel 1` might not necessarily translate into a single pixel row wide border.\n\n**Syntax**:\n\n                    border normal|pixel|toggle [<n>]\n    border none\n\n    # legacy syntax, equivalent to \"border pixel 1\"\n    border 1pixel\n                  \n\n**Examples**:\n\n                    # use window title, but no border\n    bindsym $mod+t border normal 0\n    # use no window title and a thick border\n    bindsym $mod+y border pixel 3\n    # use window title *and* a thick border\n    bindsym $mod+y border normal 3\n    # use neither window title nor border\n    bindsym $mod+u border none\n    # no border on VLC\n    for_window [class=\"vlc\"] border none\n                  \n\nTo change the default for all windows, see the directive [\\[default_border\\]](#default_border)."
- name: 6.18. Enabling shared memory logging
  id: index#shmlog
  summary: As described in https://i3wm.org/docs/debugging.html, i3 can log to a shared memory buffer, which you can dump using i3-dump-log
  description: "### 6.18. Enabling shared memory logging\n\nAs described in <https://i3wm.org/docs/debugging.html>, i3 can log to a shared memory buffer, which you can dump using `i3-dump-log`. The `shmlog` command allows you to enable or disable the shared memory logging at runtime.\n\nNote that when using `shmlog <size_in_bytes>`, the current log will be discarded and a new one will be started.\n\n**Syntax**:\n\n                    shmlog <size_in_bytes>\n    shmlog on|off|toggle\n                  \n\n**Examples**:\n\n                    # Enable/disable logging\n    bindsym $mod+x shmlog toggle\n\n    # or, from a terminal:\n    # increase the shared memory log buffer to 50 MiB\n    i3-msg shmlog $((50*1024*1024))"
- name: 6.19. Enabling debug logging
  id: index#_enabling_debug_logging
  summary: The debuglog command allows you to enable or disable debug logging at runtime
  description: "### 6.19. Enabling debug logging\n\nThe `debuglog` command allows you to enable or disable debug logging at runtime. Debug logging is much more verbose than non-debug logging. This command does not activate shared memory logging (shmlog), and as such is most likely useful in combination with the above-described [\\[shmlog\\]](#shmlog) command.\n\n**Syntax**:\n\n                    debuglog on|off|toggle\n                  \n\n**Examples**:\n\n                    # Enable/disable logging\n    bindsym $mod+x debuglog toggle"
- name: 6.20. Reloading/Restarting/Exiting
  id: index#_reloading_restarting_exiting
  summary: You can make i3 reload its configuration file with reload
  description: |-
    ### 6.20. Reloading/Restarting/Exiting

    You can make i3 reload its configuration file with `reload`. You can also restart i3 inplace with the `restart` command to get it out of some weird state (if that should ever happen) or to perform an upgrade without having to restart your X session. To exit i3 properly, you can use the `exit` command, however you don’t need to (simply killing your X session is fine as well).

    **Examples**:

                        bindsym $mod+Shift+r restart
        bindsym $mod+Shift+w reload
        bindsym $mod+Shift+e exit
- name: 6.21. Scratchpad
  id: index#_scratchpad
  summary: There are two commands to use any existing window as scratchpad window
  description: "### 6.21. Scratchpad\n\nThere are two commands to use any existing window as scratchpad window. `move scratchpad` will move a window to the scratchpad workspace. This will make it invisible until you show it again. There is no way to open that workspace. Instead, when using `scratchpad show`, the window will be shown again, as a floating window, centered on your current workspace (using `scratchpad show` on a visible scratchpad window will make it hidden again, so you can have a keybinding to toggle). Note that this is just a normal floating window, so if you want to \"remove it from scratchpad\", you can simple make it tiling again (`floating toggle`).\n\nAs the name indicates, this is useful for having a window with your favorite editor always at hand. However, you can also use this for other permanently running applications which you don’t want to see all the time: Your music player, alsamixer, maybe even your mail client…?\n\n**Syntax**:\n\n                    move scratchpad\n\n    scratchpad show\n                  \n\n**Examples**:\n\n                    # Make the currently focused window a scratchpad\n    bindsym $mod+Shift+minus move scratchpad\n\n    # Show the first scratchpad window\n    bindsym $mod+minus scratchpad show\n\n    # Show the sup-mail scratchpad window, if any.\n    bindsym mod4+s [title=\"^Sup ::\"] scratchpad show"
- name: 6.22. Nop
  id: index#_nop
  summary: There is a no operation command nop which allows you to override default behavior
  description: "### 6.22. Nop\n\nThere is a no operation command `nop` which allows you to override default behavior. This can be useful for, e.g., disabling a focus change on clicks with the middle mouse button.\n\nThe optional `comment` argument is ignored, but will be printed to the log file for debugging purposes.\n\n**Syntax**:\n\n                    nop [<comment>]\n                  \n\n**Example**:\n\n                    # Disable focus change for clicks on titlebars\n    # with the middle mouse button\n    bindsym button2 nop"
- name: 6.23. i3bar control
  id: index#_i3bar_control
  summary: There are two options in the configuration of each i3bar instance that can be changed during runtime by invoking a command through i3
  description: "### 6.23. i3bar control\n\nThere are two options in the configuration of each i3bar instance that can be changed during runtime by invoking a command through i3. The commands `bar hidden_state` and `bar mode` allow setting the current hidden_state respectively mode option of each bar. It is also possible to toggle between hide state and show state as well as between dock mode and hide mode. Each i3bar instance can be controlled individually by specifying a bar_id, if none is given, the command is executed for all bar instances.\n\n**Syntax**:\n\n                    bar hidden_state hide|show|toggle [<bar_id>]\n\n    bar mode dock|hide|invisible|toggle [<bar_id>]\n                  \n\n**Examples**:\n\n                    # Toggle between hide state and show state\n    bindsym $mod+m bar hidden_state toggle\n\n    # Toggle between dock mode and hide mode\n    bindsym $mod+n bar mode toggle\n\n    # Set the bar instance with id 'bar-1' to switch to hide mode\n    bindsym $mod+b bar mode hide bar-1\n\n    # Set the bar instance with id 'bar-1' to always stay hidden\n    bindsym $mod+Shift+b bar mode invisible bar-1"
- name: 6.24. Changing gaps
  id: index#changing_gaps
  summary: To change the gaps for all windows, see the [gaps] configuration directive
  description: "### 6.24. Changing gaps\n\nGaps can be modified at runtime with the following command syntax:\n\n**Syntax**:\n\n                    # Inner gaps: space between two adjacent windows (or split containers).\n    gaps inner current|all set|plus|minus|toggle <gap_size_in_px>\n    # Outer gaps: space along the screen edges.\n    gaps outer|horizontal|vertical|top|right|bottom|left current|all set|plus|minus|toggle <gap_size_in_px>\n                  \n\nWith `current` or `all` you can change gaps either for only the currently focused or all currently existing workspaces (note that this does not affect the global configuration itself).\n\n**Examples**:\n\n                    gaps inner all set 20\n    gaps outer current plus 5\n    gaps horizontal current plus 40\n    gaps outer current toggle 60\n\n    for_window [class=\"vlc\"] gaps inner 0, gaps outer 0\n                  \n\nTo change the gaps for all windows, see the [\\[gaps\\]](#gaps) configuration directive."
- name: 7. Multiple monitors
  id: index#multi_monitor
  summary: As you can see in the goal list on the website, i3 was specifically developed with support for multiple monitors in mind
  description: |-
    ## 7. Multiple monitors

    As you can see in the goal list on the website, i3 was specifically developed with support for multiple monitors in mind. This section will explain how to handle multiple monitors.

    When you have only one monitor, things are simple. You usually start with workspace 1 on your monitor and open new ones as you need them.

    When you have more than one monitor, each monitor will get an initial workspace. The first monitor gets 1, the second gets 2 and a possible third would get 3. When you switch to a workspace on a different monitor, i3 will switch to that monitor and then switch to the workspace. This way, you don’t need shortcuts to switch to a specific monitor, and you don’t need to remember where you put which workspace. New workspaces will be opened on the currently active monitor. It is not possible to have a monitor without a workspace.

    The idea of making workspaces global is based on the observation that most users have a very limited set of workspaces on their additional monitors. They are often used for a specific task (browser, shell) or for monitoring several things (mail, IRC, syslog, …). Thus, using one workspace on one monitor and "the rest" on the other monitors often makes sense. However, as you can create an unlimited number of workspaces in i3 and tie them to specific screens, you can have the "traditional" approach of having X workspaces per screen by changing your configuration (using modes, for example).
- name: 7.1. Configuring your monitors
  id: index#_configuring_your_monitors
  summary: To help you get going if you have never used multiple monitors before, here is a short overview of the xrandr options which will probably be of interest to you
  description: "### 7.1. Configuring your monitors\n\nTo help you get going if you have never used multiple monitors before, here is a short overview of the xrandr options which will probably be of interest to you. It is always useful to get an overview of the current screen configuration. Just run \"xrandr\" and you will get an output like the following:\n\n                    $ xrandr\n    Screen 0: minimum 320 x 200, current 1280 x 800, maximum 8192 x 8192\n    VGA1 disconnected (normal left inverted right x axis y axis)\n    LVDS1 connected 1280x800+0+0 (normal left inverted right x axis y axis) 261mm x 163mm\n       1280x800       60.0*+   50.0\n       1024x768       85.0     75.0     70.1     60.0\n       832x624        74.6\n       800x600        85.1     72.2     75.0     60.3     56.2\n       640x480        85.0     72.8     75.0     59.9\n       720x400        85.0\n       640x400        85.1\n       640x350        85.1\n                  \n\nSeveral things are important here: You can see that `LVDS1` is connected (of course, it is the internal flat panel) but `VGA1` is not. If you have a monitor connected to one of the ports but xrandr still says \"disconnected\", you should check your cable, monitor or graphics driver.\n\nThe maximum resolution you can see at the end of the first line is the maximum combined resolution of your monitors. By default, it is usually too low and has to be increased by editing `/etc/X11/xorg.conf`.\n\nSo, say you connected VGA1 and want to use it as an additional screen:\n\n                    xrandr --output VGA1 --auto --left-of LVDS1\n                  \n\nThis command makes xrandr try to find the native resolution of the device connected to `VGA1` and configures it to the left of your internal flat panel. When running \"xrandr\" again, the output looks like this:\n\n                    $ xrandr\n    Screen 0: minimum 320 x 200, current 2560 x 1024, maximum 8192 x 8192\n    VGA1 connected 1280x1024+0+0 (normal left inverted right x axis y axis) 338mm x 270mm\n       1280x1024      60.0*+   75.0\n       1280x960       60.0\n       1152x864       75.0\n       1024x768       75.1     70.1     60.0\n       832x624        74.6\n       800x600        72.2     75.0     60.3     56.2\n       640x480        72.8     75.0     66.7     60.0\n       720x400        70.1\n    LVDS1 connected 1280x800+1280+0 (normal left inverted right x axis y axis) 261mm x 163mm\n       1280x800       60.0*+   50.0\n       1024x768       85.0     75.0     70.1     60.0\n       832x624        74.6\n       800x600        85.1     72.2     75.0     60.3     56.2\n       640x480        85.0     72.8     75.0     59.9\n       720x400        85.0\n       640x400        85.1\n       640x350        85.1\n                  \n\nPlease note that i3 uses exactly the same API as xrandr does, so it will see only what you can see in xrandr.\n\nSee also [\\[presentations\\]](#presentations) for more examples of multi-monitor setups."
- name: 7.2. Interesting configuration for multi-monitor environments
  id: index#_interesting_configuration_for_multi_monitor_environments
  summary: You can specify which workspace should be put on which screen
  description: |-
    ### 7.2. Interesting configuration for multi-monitor environments

    There are several things to configure in i3 which might be interesting if you have more than one monitor:

    1.  You can specify which workspace should be put on which screen. This allows you to have a different set of workspaces when starting than just 1 for the first monitor, 2 for the second and so on. See [\[workspace_screen\]](#workspace_screen).

    2.  If you want some applications to generally open on the bigger screen (MPlayer, Firefox, …), you can assign them to a specific workspace, see [\[assign_workspace\]](#assign_workspace).

    3.  If you have many workspaces on many monitors, it might get hard to keep track of which window you put where. Thus, you can use vim-like marks to quickly switch between windows. See [\[vim_like_marks\]](#vim_like_marks).

    4.  For information on how to move existing workspaces between monitors, see [\[move_to_outputs\]](#move_to_outputs).
- name: 8. i3 and the rest of your software world
  id: index#_i3_and_the_rest_of_your_software_world
  summary: null
  description: '## 8. i3 and the rest of your software world'
- name: 8.1. Displaying a status line
  id: index#_displaying_a_status_line
  summary: A very common thing amongst users of exotic window managers is a status line at some corner of the screen
  description: |-
    ### 8.1. Displaying a status line

    A very common thing amongst users of exotic window managers is a status line at some corner of the screen. It is an often superior replacement to the widget approach you have in the task bar of a traditional desktop environment.

    If you don’t already have your favorite way of generating such a status line (self-written scripts, conky, …), then i3status is the recommended tool for this task. It was written in C with the goal of using as few syscalls as possible to reduce the time your CPU is woken up from sleep states. Because i3status only spits out text, you need to combine it with some other tool, like i3bar. See [\[status_command\]](#status_command) for how to display i3status in i3bar.

    Regardless of which application you use to display the status line, you want to make sure that it registers as a dock window using EWMH hints. i3 will position the window either at the top or at the bottom of the screen, depending on which hint the application sets. With i3bar, you can configure its position, see [\[i3bar_position\]](#i3bar_position).
- name: 8.2. Giving presentations (multi-monitor)
  id: index#presentations
  summary: When giving a presentation, you typically want the audience to see what you see on your screen and then go through a series of slides (if the presentation is simple). For more complex presentations, you might want to have some notes which only you can see on your screen, while the audience can only see the slides
  description: "### 8.2. Giving presentations (multi-monitor)\n\nWhen giving a presentation, you typically want the audience to see what you see on your screen and then go through a series of slides (if the presentation is simple). For more complex presentations, you might want to have some notes which only you can see on your screen, while the audience can only see the slides.\n\n#### 8.2.1. Case 1: everybody gets the same output\n\nThis is the simple case. You connect your computer to the video projector, turn on both (computer and video projector) and configure your X server to clone the internal flat panel of your computer to the video output:\n\n                      xrandr --output VGA1 --mode 1024x768 --same-as LVDS1\n                    \n\ni3 will then use the lowest common subset of screen resolutions, the rest of your screen will be left untouched (it will show the X background). So, in our example, this would be 1024x768 (my notebook has 1280x800).\n\n#### 8.2.2. Case 2: you can see more than your audience\n\nThis case is a bit harder. First of all, you should configure the VGA output somewhere near your internal flat panel, say right of it:\n\n                      xrandr --output VGA1 --mode 1024x768 --right-of LVDS1\n                    \n\nNow, i3 will put a new workspace (depending on your settings) on the new screen and you are in multi-monitor mode (see [\\[multi_monitor\\]](#multi_monitor)).\n\nBecause i3 is not a compositing window manager, there is no ability to display a window on two screens at the same time. Instead, your presentation software needs to do this job (that is, open a window on each screen)."
- name: 8.3. High-resolution displays (aka HIDPI displays)
  id: index#hidpi
  summary: See https://wiki.archlinux.org/index.php/HiDPI for details on how to enable scaling in various parts of the Linux desktop
  description: "### 8.3. High-resolution displays (aka HIDPI displays)\n\nSee <https://wiki.archlinux.org/index.php/HiDPI> for details on how to enable scaling in various parts of the Linux desktop. i3 will read the desired DPI from the `Xft.dpi` property. The property defaults to 96 DPI, so to achieve 200% scaling, you’d set `Xft.dpi: 192` in `~/.Xresources`.\n\nIf you are a long-time i3 user who just got a new monitor, double-check that:\n\n- You are using a scalable font (starting with “pango:”) in your i3 config.\n\n- You are using a terminal emulator which supports scaling. You could temporarily switch to gnome-terminal, which is known to support scaling out of the box, until you figure out how to adjust the font size in your favorite terminal emulator.\n\n© 2009, Michael Stapelberg and contributors  \n[https://i3wm.org/docs/userguide.html](https://i3wm.org/docs/userguide.html)"
