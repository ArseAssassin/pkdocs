---
name: Bazel
slug: bazel~7.0
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: '7.0'
copyright: |-
  Licensed under the Creative Commons Attribution 4.0 License, and code
  samples are licensed under the Apache 2.0 License.
  https://bazel.build/versions/7.0.0/reference/be/
homepage: null

---
- name: aar_import
  id: android#aar_import
  summary: This rule allows the use of .aar files as libraries for android_library and android_binary rules
  belongs_to: Android Rules
  description: |-
    ## aar_import

    ``` rule-signature
    aar_import(name, deps, data, aar, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, exports, features, licenses, restricted_to, srcjar, tags, target_compatible_with, testonly, visibility)
    ```

    This rule allows the use of `.aar` files as libraries for [`android_library`](android#android_library) and [`android_binary`](android#android_binary) rules.

    #### Examples

    ``` code
        aar_import(
            name = "google-vr-sdk",
            aar = "gvr-android-sdk/libraries/sdk-common-1.10.0.aar",
        )

        android_binary(
            name = "app",
            manifest = "AndroidManifest.xml",
            srcs = glob(["**.java"]),
            deps = [":google-vr-sdk"],
        )
    ```

    ### Arguments

    [TABLE]
- name: action_listener
  id: extra-actions#action_listener
  summary: 'WARNING: Extra actions are deprecated'
  belongs_to: Extra Actions Rules
  description: |-
    ## action_listener

    ``` rule-signature
    action_listener(name, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, extra_actions, features, licenses, mnemonics, restricted_to, tags, target_compatible_with, testonly, visibility)
    ```

    **WARNING:** Extra actions are deprecated. Use [aspects](https://bazel.build/versions/7.0.0/rules/aspects) instead.

    An `action_listener` rule doesn't produce any output itself. Instead, it allows tool developers to insert [`extra_action`](extra-actions#extra_action)s into the build system, by providing a mapping from action to [`extra_action`](extra-actions#extra_action).

    This rule's arguments map action mnemonics to [`extra_action`](extra-actions#extra_action) rules.

    By specifying the option [`--experimental_action_listener=<label>`](https://bazel.build/versions/7.0.0/docs/user-manual#flag--experimental_action_listener), the build will use the specified `action_listener` to insert [`extra_action`](extra-actions#extra_action)s into the build graph.

    #### Example

    ```
    action_listener(
        name = "index_all_languages",
        mnemonics = [
            "Javac",
            "CppCompile",
            "Python",
        ],
        extra_actions = [":indexer"],
    )

    action_listener(
        name = "index_java",
        mnemonics = ["Javac"],
        extra_actions = [":indexer"],
    )

    extra_action(
        name = "indexer",
        tools = ["//my/tools:indexer"],
        cmd = "$(location //my/tools:indexer)" +
              "--extra_action_file=$(EXTRA_ACTION_FILE)",
    )
    ```

    ### Arguments

    [TABLE]
- name: alias
  id: general#alias
  summary: The alias rule creates another name a rule can be referred to as
  belongs_to: General Rules
  description: |-
    ## alias

    ``` rule-signature
    alias(name, actual, compatible_with, deprecation, features, restricted_to, tags, target_compatible_with, testonly, visibility)
    ```

    The `alias` rule creates another name a rule can be referred to as.

    Aliasing only works for "regular" targets. In particular, `package_group` and `test_suite` cannot be aliased.

    Aliasing may be of help in large repositories where renaming a target would require making changes to lots of files. You can also use alias rule to store a [select](functions#select) function call if you want to reuse that logic for multiple targets.

    The alias rule has its own visibility declaration. In all other respects, it behaves like the rule it references (e.g. testonly *on the alias* is ignored; the testonly-ness of the referenced rule is used instead) with some minor exceptions:

    - Tests are not run if their alias is mentioned on the command line. To define an alias that runs the referenced test, use a [`test_suite`](#test_suite) rule with a single target in its [`tests`](#test_suite.tests) attribute.
    - When defining environment groups, the aliases to `environment` rules are not supported. They are not supported in the `--target_environment` command line option, either.

    #### Examples

    ``` code
    filegroup(
        name = "data",
        srcs = ["data.txt"],
    )

    alias(
        name = "other",
        actual = ":data",
    )
    ```

    ### Arguments

    [TABLE]
- name: Android Rules
  id: android
  summary: Produces Android application package files (.apk)
  description: "# Android Rules\n\n## Rules\n\n- [android_binary](#android_binary)\n- [aar_import](#aar_import)\n- [android_library](#android_library)\n- [android_instrumentation_test](#android_instrumentation_test)\n- [android_local_test](#android_local_test)\n- [android_device](#android_device)\n- [android_ndk_repository](#android_ndk_repository)\n- [android_sdk_repository](#android_sdk_repository)\n\n## android_binary\n\n``` rule-signature\nandroid_binary(name, deps, srcs, assets, assets_dir, compatible_with, crunch_png, custom_package, debug_key, debug_signing_keys, debug_signing_lineage_file, densities, deprecation, dex_shards, dexopts, distribs, enable_data_binding, exec_compatible_with, exec_properties, features, incremental_dexing, instruments, javacopts, key_rotation_min_sdk, licenses, main_dex_list, main_dex_list_opts, main_dex_proguard_specs, manifest, manifest_values, multidex, nocompress_extensions, package_id, plugins, proguard_apply_dictionary, proguard_apply_mapping, proguard_generate_mapping, proguard_specs, resource_configuration_filters, resource_files, restricted_to, shrink_resources, tags, target_compatible_with, testonly, visibility)\n```\n\nProduces Android application package files (.apk).\n\n#### Implicit output targets\n\n- `name``.apk`: An Android application package file signed with debug keys and [zipaligned](http://developer.android.com/guide/developing/tools/zipalign.html), it could be used to develop and debug your application. You cannot release your application when signed with the debug keys.\n\n- `name``_unsigned.apk`: An unsigned version of the above file that could be signed with the release keys before release to the public.\n\n- `name``_deploy.jar`: A Java archive containing the transitive closure of this target.\n\n  The deploy jar contains all the classes that would be found by a classloader that searched the runtime classpath of this target from beginning to end.\n\n- `name``_proguard.jar`: A Java archive containing the result of running ProGuard on the `name``_deploy.jar`. This output is only produced if [proguard_specs](android#android_binary.proguard_specs) attribute is specified.\n\n- `name``_proguard.map`: A mapping file result of running ProGuard on the `name``_deploy.jar`. This output is only produced if [proguard_specs](android#android_binary.proguard_specs) attribute is specified and [proguard_generate_mapping](android#android_binary.proguard_generate_mapping) or [shrink_resources](android#android_binary.shrink_resources) is set.\n\n#### Examples\n\nExamples of Android rules can be found in the `examples/android` directory of the Bazel source tree.\n\n### Arguments\n\n[TABLE]\n\n## aar_import\n\n``` rule-signature\naar_import(name, deps, data, aar, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, exports, features, licenses, restricted_to, srcjar, tags, target_compatible_with, testonly, visibility)\n```\n\nThis rule allows the use of `.aar` files as libraries for [`android_library`](android#android_library) and [`android_binary`](android#android_binary) rules.\n\n#### Examples\n\n``` code\n    aar_import(\n        name = \"google-vr-sdk\",\n        aar = \"gvr-android-sdk/libraries/sdk-common-1.10.0.aar\",\n    )\n\n    android_binary(\n        name = \"app\",\n        manifest = \"AndroidManifest.xml\",\n        srcs = glob([\"**.java\"]),\n        deps = [\":google-vr-sdk\"],\n    )\n```\n\n### Arguments\n\n[TABLE]\n\n## android_library\n\n``` rule-signature\nandroid_library(name, deps, srcs, data, assets, assets_dir, compatible_with, custom_package, deprecation, distribs, enable_data_binding, exec_compatible_with, exec_properties, exported_plugins, exports, exports_manifest, features, idl_import_root, idl_parcelables, idl_preprocessed, idl_srcs, javacopts, licenses, manifest, neverlink, plugins, proguard_specs, resource_files, restricted_to, tags, target_compatible_with, testonly, visibility)\n```\n\nThis rule compiles and archives its sources into a `.jar` file. The Android runtime library `android.jar` is implicitly put on the compilation class path.\n\n#### Implicit output targets\n\n- `lib``name``.jar`: A Java archive.\n- `lib``name``-src.jar`: An archive containing the sources (\"source jar\").\n- `name``.aar`: An android 'aar' bundle containing the java archive and resources of this target. It does not contain the transitive closure.\n\n#### Examples\n\nExamples of Android rules can be found in the `examples/android` directory of the Bazel source tree.\n\nThe following example shows how to set `idl_import_root`. Let `//java/bazel/helloandroid/BUILD` contain:\n\n``` code\nandroid_library(\n    name = \"parcelable\",\n    srcs = [\"MyParcelable.java\"], # bazel.helloandroid.MyParcelable\n\n    # MyParcelable.aidl will be used as import for other .aidl\n    # files that depend on it, but will not be compiled.\n    idl_parcelables = [\"MyParcelable.aidl\"] # bazel.helloandroid.MyParcelable\n\n    # We don't need to specify idl_import_root since the aidl file\n    # which declares bazel.helloandroid.MyParcelable\n    # is present at java/bazel/helloandroid/MyParcelable.aidl\n    # underneath a java root (java/).\n)\n\nandroid_library(\n    name = \"foreign_parcelable\",\n    srcs = [\"src/android/helloandroid/OtherParcelable.java\"], # android.helloandroid.OtherParcelable\n    idl_parcelables = [\n        \"src/android/helloandroid/OtherParcelable.aidl\" # android.helloandroid.OtherParcelable\n    ],\n\n    # We need to specify idl_import_root because the aidl file which\n    # declares android.helloandroid.OtherParcelable is not positioned\n    # at android/helloandroid/OtherParcelable.aidl under a normal java root.\n    # Setting idl_import_root to \"src\" in //java/bazel/helloandroid\n    # adds java/bazel/helloandroid/src to the list of roots\n    # the aidl compiler will search for imported types.\n    idl_import_root = \"src\",\n)\n\n# Here, OtherInterface.aidl has an \"import android.helloandroid.CallbackInterface;\" statement.\nandroid_library(\n    name = \"foreign_interface\",\n    idl_srcs = [\n        \"src/android/helloandroid/OtherInterface.aidl\" # android.helloandroid.OtherInterface\n        \"src/android/helloandroid/CallbackInterface.aidl\" # android.helloandroid.CallbackInterface\n    ],\n\n    # As above, idl_srcs which are not correctly positioned under a java root\n    # must have idl_import_root set. Otherwise, OtherInterface (or any other\n    # interface in a library which depends on this one) will not be able\n    # to find CallbackInterface when it is imported.\n    idl_import_root = \"src\",\n)\n\n# MyParcelable.aidl is imported by MyInterface.aidl, so the generated\n# MyInterface.java requires MyParcelable.class at compile time.\n# Depending on :parcelable ensures that aidl compilation of MyInterface.aidl\n# specifies the correct import roots and can access MyParcelable.aidl, and\n# makes MyParcelable.class available to Java compilation of MyInterface.java\n# as usual.\nandroid_library(\n    name = \"idl\",\n    idl_srcs = [\"MyInterface.aidl\"],\n    deps = [\":parcelable\"],\n)\n\n# Here, ServiceParcelable uses and thus depends on ParcelableService,\n# when it's compiled, but ParcelableService also uses ServiceParcelable,\n# which creates a circular dependency.\n# As a result, these files must be compiled together, in the same android_library.\nandroid_library(\n    name = \"circular_dependencies\",\n    srcs = [\"ServiceParcelable.java\"],\n    idl_srcs = [\"ParcelableService.aidl\"],\n    idl_parcelables = [\"ServiceParcelable.aidl\"],\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## android_instrumentation_test\n\n``` rule-signature\nandroid_instrumentation_test(name, data, args, compatible_with, deprecation, distribs, env, env_inherit, exec_compatible_with, exec_properties, features, flaky, licenses, local, restricted_to, shard_count, size, support_apks, tags, target_compatible_with, target_device, test_app, testonly, timeout, toolchains, visibility)\n```\n\nAn `android_instrumentation_test` rule runs Android instrumentation tests. It will start an emulator, install the application being tested, the test application, and any other needed applications, and run the tests defined in the test package.\n\nThe [test_app](android#android_instrumentation_test.test_app) attribute specifies the `android_binary` which contains the test. This `android_binary` in turn specifies the `android_binary` application under test through its [instruments](android#android_binary.instruments) attribute.\n\n#### Example\n\n``` code\n# java/com/samples/hello_world/BUILD\n\nandroid_library(\n    name = \"hello_world_lib\",\n    srcs = [\"Lib.java\"],\n    manifest = \"LibraryManifest.xml\",\n    resource_files = glob([\"res/**\"]),\n)\n\n# The app under test\nandroid_binary(\n    name = \"hello_world_app\",\n    manifest = \"AndroidManifest.xml\",\n    deps = [\":hello_world_lib\"],\n)\n```\n\n``` code\n# javatests/com/samples/hello_world/BUILD\n\nandroid_library(\n    name = \"hello_world_test_lib\",\n    srcs = [\"Tests.java\"],\n    deps = [\n      \"//java/com/samples/hello_world:hello_world_lib\",\n      ...  # test dependencies such as Espresso and Mockito\n    ],\n)\n\n# The test app\nandroid_binary(\n    name = \"hello_world_test_app\",\n    instruments = \"//java/com/samples/hello_world:hello_world_app\",\n    manifest = \"AndroidManifest.xml\",\n    deps = [\":hello_world_test_lib\"],\n)\n\nandroid_instrumentation_test(\n    name = \"hello_world_uiinstrumentation_tests\",\n    target_device = \":some_target_device\",\n    test_app = \":hello_world_test_app\",\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## android_local_test\n\n``` rule-signature\nandroid_local_test(name, deps, srcs, data, args, compatible_with, custom_package, densities, deprecation, enable_data_binding, env, env_inherit, exec_compatible_with, exec_properties, features, flaky, javacopts, jvm_flags, licenses, local, manifest, manifest_values, nocompress_extensions, plugins, resource_configuration_filters, resource_jars, resource_strip_prefix, restricted_to, runtime_deps, shard_count, size, stamp, tags, target_compatible_with, test_class, testonly, timeout, toolchains, use_launcher, visibility)\n```\n\nThis rule is for unit testing `android_library` rules locally (as opposed to on a device). It works with the Android Robolectric testing framework. See the [Android Robolectric](http://robolectric.org/) site for details about writing Robolectric tests.\n\n#### Implicit output targets\n\n- `name``.jar`: A Java archive of the test.\n- `name``-src.jar`: An archive containing the sources (\"source jar\").\n- `name``_deploy.jar`: A Java deploy archive suitable for deployment (only built if explicitly requested).\n\n#### Examples\n\nTo use Robolectric with `android_local_test`, add [Robolectric's repository](https://github.com/robolectric/robolectric-bazel/tree/master/bazel) to your `WORKSPACE` file:\n\n``` code\nhttp_archive(\n    name = \"robolectric\",\n    urls = [\"https://github.com/robolectric/robolectric-bazel/archive/<COMMIT>.tar.gz\"],\n    strip_prefix = \"robolectric-bazel-<COMMIT>\",\n    sha256 = \"<HASH>\",\n)\nload(\"@robolectric//bazel:robolectric.bzl\", \"robolectric_repositories\")\nrobolectric_repositories()\n```\n\nThis pulls in the `maven_jar` rules needed for Robolectric. Then each `android_local_test` rule should depend on `@robolectric//bazel:robolectric`. See example below.\n\n``` code\nandroid_local_test(\n    name = \"SampleTest\",\n    srcs = [\n        \"SampleTest.java\",\n    ],\n    manifest = \"LibManifest.xml\",\n    deps = [\n        \":sample_test_lib\",\n        \"@robolectric//bazel:android-all\",\n    ],\n)\n\nandroid_library(\n    name = \"sample_test_lib\",\n    srcs = [\n         \"Lib.java\",\n    ],\n    resource_files = glob([\"res/**\"]),\n    manifest = \"AndroidManifest.xml\",\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## android_device\n\n``` rule-signature\nandroid_device(name, cache, compatible_with, default_properties, deprecation, distribs, exec_compatible_with, exec_properties, features, horizontal_resolution, licenses, platform_apks, ram, restricted_to, screen_density, system_image, tags, target_compatible_with, testonly, vertical_resolution, visibility, vm_heap)\n```\n\nThis rule creates an android emulator configured with the given specifications. This emulator may be started via a bazel run command or by executing the generated script directly. It is encouraged to depend on existing android_device rules rather than defining your own.\n\nThis rule is a suitable target for the --run_under flag to bazel test and blaze run. It starts an emulator, copies the target being tested/run to the emulator, and tests it or runs it as appropriate.\n\n`android_device` supports creating KVM images if the underlying [system_image](android#android_device.system_image) is X86 based and is optimized for at most the I686 CPU architecture. To use KVM add ` tags = ['requires-kvm'] ` to the `android_device` rule.\n\n#### Implicit output targets\n\n- `name``_images/userdata.dat`: Contains image files and snapshots to start the emulator\n- `name``_images/emulator-meta-data.pb`: Contains serialized information necessary to pass on to the emulator to restart it.\n\n#### Examples\n\nThe following example shows how to use android_device. `//java/android/helloandroid/BUILD` contains\n\n``` code\nandroid_device(\n    name = \"nexus_s\",\n    cache = 32,\n    default_properties = \"nexus_s.properties\",\n    horizontal_resolution = 480,\n    ram = 512,\n    screen_density = 233,\n    system_image = \":emulator_images_android_16_x86\",\n    vertical_resolution = 800,\n    vm_heap = 32,\n)\n\nfilegroup(\n    name = \"emulator_images_android_16_x86\",\n    srcs = glob([\"androidsdk/system-images/android-16/**\"]),\n)\n```\n\n`//java/android/helloandroid/nexus_s.properties` contains:\n\n``` code\nro.product.brand=google\nro.product.device=crespo\nro.product.manufacturer=samsung\nro.product.model=Nexus S\nro.product.name=soju\n```\n\nThis rule will generate images and a start script. You can start the emulator locally by executing bazel run :nexus_s -- --action=start. The script exposes the following flags:\n\n- --adb_port: The port to expose adb on. If you wish to issue adb commands to the emulator this is the port you will issue adb connect to.\n- --emulator_port: The port to expose the emulator's telnet management console on.\n- --enable_display: Starts the emulator with a display if true (defaults to false).\n- --action: Either start or kill.\n- --apks_to_install: a list of apks to install on the emulator.\n\n### Arguments\n\n[TABLE]\n\n## android_ndk_repository\n\n``` rule-signature\nandroid_ndk_repository(name, api_level, path, repo_mapping)\n```\n\nConfigures Bazel to use an Android NDK to support building Android targets with native code.\n\nNote that this implementation of `android_ndk_repository` is being replaced by an implementation in Starlark. Support for future versions of the NDK including version 25 and up will be implemented in the Starlark version of `android_ndk_repository`. See [rules_android_ndk](https://github.com/bazelbuild/rules_android_ndk) for the Starlark version.\n\nNote that building for Android also requires an `android_sdk_repository` rule in your `WORKSPACE` file.\n\nFor more information, read the [full documentation on using Android NDK with Bazel](https://bazel.build/versions/7.0.0/docs/android-ndk).\n\n#### Examples\n\n``` code\nandroid_ndk_repository(\n    name = \"androidndk\",\n)\n```\n\nThe above example will locate your Android NDK from `$ANDROID_NDK_HOME` and detect the highest API level that it supports.\n\n``` code\nandroid_ndk_repository(\n    name = \"androidndk\",\n    path = \"./android-ndk-r20\",\n    api_level = 24,\n)\n```\n\nThe above example will use the Android NDK located inside your workspace in `./android-ndk-r20`. It will use the API level 24 libraries when compiling your JNI code.\n\n#### cpufeatures\n\nThe Android NDK contains the [cpufeatures library](https://developer.android.com/ndk/guides/cpu-features.html) which can be used to detect a device's CPU at runtime. The following example demonstrates how to use cpufeatures with Bazel.\n\n``` code\n# jni.cc\n#include \"ndk/sources/android/cpufeatures/cpu-features.h\"\n...\n```\n\n``` code\n# BUILD\ncc_library(\n    name = \"jni\",\n    srcs = [\"jni.cc\"],\n    deps = [\"@androidndk//:cpufeatures\"],\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## android_sdk_repository\n\n``` rule-signature\nandroid_sdk_repository(name, api_level, build_tools_version, path, repo_mapping)\n```\n\nConfigures Bazel to use a local Android SDK to support building Android targets.\n\n#### Examples\n\nThe minimum to set up an Android SDK for Bazel is to put an `android_sdk_repository` rule named \"androidsdk\" in your `WORKSPACE` file and set the `$ANDROID_HOME` environment variable to the path of your Android SDK. Bazel will use the highest Android API level and build tools version installed in the Android SDK by default.\n\n``` code\nandroid_sdk_repository(\n    name = \"androidsdk\",\n)\n```\n\nTo ensure reproducible builds, the `path`, `api_level` and `build_tools_version` attributes can be set to specific values. The build will fail if the Android SDK does not have the specified API level or build tools version installed.\n\n``` code\nandroid_sdk_repository(\n    name = \"androidsdk\",\n    path = \"./sdk\",\n    api_level = 19,\n    build_tools_version = \"25.0.0\",\n)\n```\n\nThe above example also demonstrates using a workspace-relative path to the Android SDK. This is useful if the Android SDK is part of your Bazel workspace (e.g. if it is checked into version control).\n\n#### Support Libraries\n\nThe Support Libraries are available in the Android SDK Manager as \"Android Support Repository\". This is a versioned set of common Android libraries, such as the Support and AppCompat libraries, that is packaged as a local Maven repository. `android_sdk_repository` generates Bazel targets for each of these libraries that can be used in the dependencies of `android_binary` and `android_library` targets.\n\nThe names of the generated targets are derived from the Maven coordinates of the libraries in the Android Support Repository, formatted as `@androidsdk//${group}:${artifact}-${version}`. The following example shows how an `android_library` can depend on version 25.0.0 of the v7 appcompat library.\n\n``` code\nandroid_library(\n    name = \"lib\",\n    srcs = glob([\"*.java\"]),\n    manifest = \"AndroidManifest.xml\",\n    resource_files = glob([\"res/**\"]),\n    deps = [\"@androidsdk//com.android.support:appcompat-v7-25.0.0\"],\n)\n```\n\n### Arguments\n\n[TABLE]\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/android](https://bazel.build/versions/7.0.0/reference/be/android)"
- name: android_binary
  id: android#android_binary
  summary: Produces Android application package files (.apk)
  belongs_to: Android Rules
  description: |-
    ## android_binary

    ``` rule-signature
    android_binary(name, deps, srcs, assets, assets_dir, compatible_with, crunch_png, custom_package, debug_key, debug_signing_keys, debug_signing_lineage_file, densities, deprecation, dex_shards, dexopts, distribs, enable_data_binding, exec_compatible_with, exec_properties, features, incremental_dexing, instruments, javacopts, key_rotation_min_sdk, licenses, main_dex_list, main_dex_list_opts, main_dex_proguard_specs, manifest, manifest_values, multidex, nocompress_extensions, package_id, plugins, proguard_apply_dictionary, proguard_apply_mapping, proguard_generate_mapping, proguard_specs, resource_configuration_filters, resource_files, restricted_to, shrink_resources, tags, target_compatible_with, testonly, visibility)
    ```

    Produces Android application package files (.apk).

    #### Implicit output targets

    - `name``.apk`: An Android application package file signed with debug keys and [zipaligned](http://developer.android.com/guide/developing/tools/zipalign.html), it could be used to develop and debug your application. You cannot release your application when signed with the debug keys.

    - `name``_unsigned.apk`: An unsigned version of the above file that could be signed with the release keys before release to the public.

    - `name``_deploy.jar`: A Java archive containing the transitive closure of this target.

      The deploy jar contains all the classes that would be found by a classloader that searched the runtime classpath of this target from beginning to end.

    - `name``_proguard.jar`: A Java archive containing the result of running ProGuard on the `name``_deploy.jar`. This output is only produced if [proguard_specs](android#android_binary.proguard_specs) attribute is specified.

    - `name``_proguard.map`: A mapping file result of running ProGuard on the `name``_deploy.jar`. This output is only produced if [proguard_specs](android#android_binary.proguard_specs) attribute is specified and [proguard_generate_mapping](android#android_binary.proguard_generate_mapping) or [shrink_resources](android#android_binary.shrink_resources) is set.

    #### Examples

    Examples of Android rules can be found in the `examples/android` directory of the Bazel source tree.

    ### Arguments

    [TABLE]
- name: android_device
  id: android#android_device
  summary: This rule creates an android emulator configured with the given specifications
  belongs_to: Android Rules
  description: |-
    ## android_device

    ``` rule-signature
    android_device(name, cache, compatible_with, default_properties, deprecation, distribs, exec_compatible_with, exec_properties, features, horizontal_resolution, licenses, platform_apks, ram, restricted_to, screen_density, system_image, tags, target_compatible_with, testonly, vertical_resolution, visibility, vm_heap)
    ```

    This rule creates an android emulator configured with the given specifications. This emulator may be started via a bazel run command or by executing the generated script directly. It is encouraged to depend on existing android_device rules rather than defining your own.

    This rule is a suitable target for the --run_under flag to bazel test and blaze run. It starts an emulator, copies the target being tested/run to the emulator, and tests it or runs it as appropriate.

    `android_device` supports creating KVM images if the underlying [system_image](android#android_device.system_image) is X86 based and is optimized for at most the I686 CPU architecture. To use KVM add ` tags = ['requires-kvm'] ` to the `android_device` rule.

    #### Implicit output targets

    - `name``_images/userdata.dat`: Contains image files and snapshots to start the emulator
    - `name``_images/emulator-meta-data.pb`: Contains serialized information necessary to pass on to the emulator to restart it.

    #### Examples

    The following example shows how to use android_device. `//java/android/helloandroid/BUILD` contains

    ``` code
    android_device(
        name = "nexus_s",
        cache = 32,
        default_properties = "nexus_s.properties",
        horizontal_resolution = 480,
        ram = 512,
        screen_density = 233,
        system_image = ":emulator_images_android_16_x86",
        vertical_resolution = 800,
        vm_heap = 32,
    )

    filegroup(
        name = "emulator_images_android_16_x86",
        srcs = glob(["androidsdk/system-images/android-16/**"]),
    )
    ```

    `//java/android/helloandroid/nexus_s.properties` contains:

    ``` code
    ro.product.brand=google
    ro.product.device=crespo
    ro.product.manufacturer=samsung
    ro.product.model=Nexus S
    ro.product.name=soju
    ```

    This rule will generate images and a start script. You can start the emulator locally by executing bazel run :nexus_s -- --action=start. The script exposes the following flags:

    - --adb_port: The port to expose adb on. If you wish to issue adb commands to the emulator this is the port you will issue adb connect to.
    - --emulator_port: The port to expose the emulator's telnet management console on.
    - --enable_display: Starts the emulator with a display if true (defaults to false).
    - --action: Either start or kill.
    - --apks_to_install: a list of apks to install on the emulator.

    ### Arguments

    [TABLE]
- name: android_instrumentation_test
  id: android#android_instrumentation_test
  summary: An android_instrumentation_test rule runs Android instrumentation tests
  belongs_to: Android Rules
  description: |-
    ## android_instrumentation_test

    ``` rule-signature
    android_instrumentation_test(name, data, args, compatible_with, deprecation, distribs, env, env_inherit, exec_compatible_with, exec_properties, features, flaky, licenses, local, restricted_to, shard_count, size, support_apks, tags, target_compatible_with, target_device, test_app, testonly, timeout, toolchains, visibility)
    ```

    An `android_instrumentation_test` rule runs Android instrumentation tests. It will start an emulator, install the application being tested, the test application, and any other needed applications, and run the tests defined in the test package.

    The [test_app](android#android_instrumentation_test.test_app) attribute specifies the `android_binary` which contains the test. This `android_binary` in turn specifies the `android_binary` application under test through its [instruments](android#android_binary.instruments) attribute.

    #### Example

    ``` code
    # java/com/samples/hello_world/BUILD

    android_library(
        name = "hello_world_lib",
        srcs = ["Lib.java"],
        manifest = "LibraryManifest.xml",
        resource_files = glob(["res/**"]),
    )

    # The app under test
    android_binary(
        name = "hello_world_app",
        manifest = "AndroidManifest.xml",
        deps = [":hello_world_lib"],
    )
    ```

    ``` code
    # javatests/com/samples/hello_world/BUILD

    android_library(
        name = "hello_world_test_lib",
        srcs = ["Tests.java"],
        deps = [
          "//java/com/samples/hello_world:hello_world_lib",
          ...  # test dependencies such as Espresso and Mockito
        ],
    )

    # The test app
    android_binary(
        name = "hello_world_test_app",
        instruments = "//java/com/samples/hello_world:hello_world_app",
        manifest = "AndroidManifest.xml",
        deps = [":hello_world_test_lib"],
    )

    android_instrumentation_test(
        name = "hello_world_uiinstrumentation_tests",
        target_device = ":some_target_device",
        test_app = ":hello_world_test_app",
    )
    ```

    ### Arguments

    [TABLE]
- name: android_library
  id: android#android_library
  summary: This rule compiles and archives its sources into a .jar file
  belongs_to: Android Rules
  description: |-
    ## android_library

    ``` rule-signature
    android_library(name, deps, srcs, data, assets, assets_dir, compatible_with, custom_package, deprecation, distribs, enable_data_binding, exec_compatible_with, exec_properties, exported_plugins, exports, exports_manifest, features, idl_import_root, idl_parcelables, idl_preprocessed, idl_srcs, javacopts, licenses, manifest, neverlink, plugins, proguard_specs, resource_files, restricted_to, tags, target_compatible_with, testonly, visibility)
    ```

    This rule compiles and archives its sources into a `.jar` file. The Android runtime library `android.jar` is implicitly put on the compilation class path.

    #### Implicit output targets

    - `lib``name``.jar`: A Java archive.
    - `lib``name``-src.jar`: An archive containing the sources ("source jar").
    - `name``.aar`: An android 'aar' bundle containing the java archive and resources of this target. It does not contain the transitive closure.

    #### Examples

    Examples of Android rules can be found in the `examples/android` directory of the Bazel source tree.

    The following example shows how to set `idl_import_root`. Let `//java/bazel/helloandroid/BUILD` contain:

    ``` code
    android_library(
        name = "parcelable",
        srcs = ["MyParcelable.java"], # bazel.helloandroid.MyParcelable

        # MyParcelable.aidl will be used as import for other .aidl
        # files that depend on it, but will not be compiled.
        idl_parcelables = ["MyParcelable.aidl"] # bazel.helloandroid.MyParcelable

        # We don't need to specify idl_import_root since the aidl file
        # which declares bazel.helloandroid.MyParcelable
        # is present at java/bazel/helloandroid/MyParcelable.aidl
        # underneath a java root (java/).
    )

    android_library(
        name = "foreign_parcelable",
        srcs = ["src/android/helloandroid/OtherParcelable.java"], # android.helloandroid.OtherParcelable
        idl_parcelables = [
            "src/android/helloandroid/OtherParcelable.aidl" # android.helloandroid.OtherParcelable
        ],

        # We need to specify idl_import_root because the aidl file which
        # declares android.helloandroid.OtherParcelable is not positioned
        # at android/helloandroid/OtherParcelable.aidl under a normal java root.
        # Setting idl_import_root to "src" in //java/bazel/helloandroid
        # adds java/bazel/helloandroid/src to the list of roots
        # the aidl compiler will search for imported types.
        idl_import_root = "src",
    )

    # Here, OtherInterface.aidl has an "import android.helloandroid.CallbackInterface;" statement.
    android_library(
        name = "foreign_interface",
        idl_srcs = [
            "src/android/helloandroid/OtherInterface.aidl" # android.helloandroid.OtherInterface
            "src/android/helloandroid/CallbackInterface.aidl" # android.helloandroid.CallbackInterface
        ],

        # As above, idl_srcs which are not correctly positioned under a java root
        # must have idl_import_root set. Otherwise, OtherInterface (or any other
        # interface in a library which depends on this one) will not be able
        # to find CallbackInterface when it is imported.
        idl_import_root = "src",
    )

    # MyParcelable.aidl is imported by MyInterface.aidl, so the generated
    # MyInterface.java requires MyParcelable.class at compile time.
    # Depending on :parcelable ensures that aidl compilation of MyInterface.aidl
    # specifies the correct import roots and can access MyParcelable.aidl, and
    # makes MyParcelable.class available to Java compilation of MyInterface.java
    # as usual.
    android_library(
        name = "idl",
        idl_srcs = ["MyInterface.aidl"],
        deps = [":parcelable"],
    )

    # Here, ServiceParcelable uses and thus depends on ParcelableService,
    # when it's compiled, but ParcelableService also uses ServiceParcelable,
    # which creates a circular dependency.
    # As a result, these files must be compiled together, in the same android_library.
    android_library(
        name = "circular_dependencies",
        srcs = ["ServiceParcelable.java"],
        idl_srcs = ["ParcelableService.aidl"],
        idl_parcelables = ["ServiceParcelable.aidl"],
    )
    ```

    ### Arguments

    [TABLE]
- name: android_local_test
  id: android#android_local_test
  summary: This rule is for unit testing android_library rules locally (as opposed to on a device)
  belongs_to: Android Rules
  description: |-
    ## android_local_test

    ``` rule-signature
    android_local_test(name, deps, srcs, data, args, compatible_with, custom_package, densities, deprecation, enable_data_binding, env, env_inherit, exec_compatible_with, exec_properties, features, flaky, javacopts, jvm_flags, licenses, local, manifest, manifest_values, nocompress_extensions, plugins, resource_configuration_filters, resource_jars, resource_strip_prefix, restricted_to, runtime_deps, shard_count, size, stamp, tags, target_compatible_with, test_class, testonly, timeout, toolchains, use_launcher, visibility)
    ```

    This rule is for unit testing `android_library` rules locally (as opposed to on a device). It works with the Android Robolectric testing framework. See the [Android Robolectric](http://robolectric.org/) site for details about writing Robolectric tests.

    #### Implicit output targets

    - `name``.jar`: A Java archive of the test.
    - `name``-src.jar`: An archive containing the sources ("source jar").
    - `name``_deploy.jar`: A Java deploy archive suitable for deployment (only built if explicitly requested).

    #### Examples

    To use Robolectric with `android_local_test`, add [Robolectric's repository](https://github.com/robolectric/robolectric-bazel/tree/master/bazel) to your `WORKSPACE` file:

    ``` code
    http_archive(
        name = "robolectric",
        urls = ["https://github.com/robolectric/robolectric-bazel/archive/<COMMIT>.tar.gz"],
        strip_prefix = "robolectric-bazel-<COMMIT>",
        sha256 = "<HASH>",
    )
    load("@robolectric//bazel:robolectric.bzl", "robolectric_repositories")
    robolectric_repositories()
    ```

    This pulls in the `maven_jar` rules needed for Robolectric. Then each `android_local_test` rule should depend on `@robolectric//bazel:robolectric`. See example below.

    ``` code
    android_local_test(
        name = "SampleTest",
        srcs = [
            "SampleTest.java",
        ],
        manifest = "LibManifest.xml",
        deps = [
            ":sample_test_lib",
            "@robolectric//bazel:android-all",
        ],
    )

    android_library(
        name = "sample_test_lib",
        srcs = [
             "Lib.java",
        ],
        resource_files = glob(["res/**"]),
        manifest = "AndroidManifest.xml",
    )
    ```

    ### Arguments

    [TABLE]
- name: android_ndk_repository
  id: android#android_ndk_repository
  summary: Configures Bazel to use an Android NDK to support building Android targets with native code
  belongs_to: Android Rules
  description: |-
    ## android_ndk_repository

    ``` rule-signature
    android_ndk_repository(name, api_level, path, repo_mapping)
    ```

    Configures Bazel to use an Android NDK to support building Android targets with native code.

    Note that this implementation of `android_ndk_repository` is being replaced by an implementation in Starlark. Support for future versions of the NDK including version 25 and up will be implemented in the Starlark version of `android_ndk_repository`. See [rules_android_ndk](https://github.com/bazelbuild/rules_android_ndk) for the Starlark version.

    Note that building for Android also requires an `android_sdk_repository` rule in your `WORKSPACE` file.

    For more information, read the [full documentation on using Android NDK with Bazel](https://bazel.build/versions/7.0.0/docs/android-ndk).

    #### Examples

    ``` code
    android_ndk_repository(
        name = "androidndk",
    )
    ```

    The above example will locate your Android NDK from `$ANDROID_NDK_HOME` and detect the highest API level that it supports.

    ``` code
    android_ndk_repository(
        name = "androidndk",
        path = "./android-ndk-r20",
        api_level = 24,
    )
    ```

    The above example will use the Android NDK located inside your workspace in `./android-ndk-r20`. It will use the API level 24 libraries when compiling your JNI code.

    #### cpufeatures

    The Android NDK contains the [cpufeatures library](https://developer.android.com/ndk/guides/cpu-features.html) which can be used to detect a device's CPU at runtime. The following example demonstrates how to use cpufeatures with Bazel.

    ``` code
    # jni.cc
    #include "ndk/sources/android/cpufeatures/cpu-features.h"
    ...
    ```

    ``` code
    # BUILD
    cc_library(
        name = "jni",
        srcs = ["jni.cc"],
        deps = ["@androidndk//:cpufeatures"],
    )
    ```

    ### Arguments

    [TABLE]
- name: android_sdk_repository
  id: android#android_sdk_repository
  summary: Configures Bazel to use a local Android SDK to support building Android targets
  belongs_to: Android Rules
  description: "## android_sdk_repository\n\n``` rule-signature\nandroid_sdk_repository(name, api_level, build_tools_version, path, repo_mapping)\n```\n\nConfigures Bazel to use a local Android SDK to support building Android targets.\n\n#### Examples\n\nThe minimum to set up an Android SDK for Bazel is to put an `android_sdk_repository` rule named \"androidsdk\" in your `WORKSPACE` file and set the `$ANDROID_HOME` environment variable to the path of your Android SDK. Bazel will use the highest Android API level and build tools version installed in the Android SDK by default.\n\n``` code\nandroid_sdk_repository(\n    name = \"androidsdk\",\n)\n```\n\nTo ensure reproducible builds, the `path`, `api_level` and `build_tools_version` attributes can be set to specific values. The build will fail if the Android SDK does not have the specified API level or build tools version installed.\n\n``` code\nandroid_sdk_repository(\n    name = \"androidsdk\",\n    path = \"./sdk\",\n    api_level = 19,\n    build_tools_version = \"25.0.0\",\n)\n```\n\nThe above example also demonstrates using a workspace-relative path to the Android SDK. This is useful if the Android SDK is part of your Bazel workspace (e.g. if it is checked into version control).\n\n#### Support Libraries\n\nThe Support Libraries are available in the Android SDK Manager as \"Android Support Repository\". This is a versioned set of common Android libraries, such as the Support and AppCompat libraries, that is packaged as a local Maven repository. `android_sdk_repository` generates Bazel targets for each of these libraries that can be used in the dependencies of `android_binary` and `android_library` targets.\n\nThe names of the generated targets are derived from the Maven coordinates of the libraries in the Android Support Repository, formatted as `@androidsdk//${group}:${artifact}-${version}`. The following example shows how an `android_library` can depend on version 25.0.0 of the v7 appcompat library.\n\n``` code\nandroid_library(\n    name = \"lib\",\n    srcs = glob([\"*.java\"]),\n    manifest = \"AndroidManifest.xml\",\n    resource_files = glob([\"res/**\"]),\n    deps = [\"@androidsdk//com.android.support:appcompat-v7-25.0.0\"],\n)\n```\n\n### Arguments\n\n[TABLE]\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/android](https://bazel.build/versions/7.0.0/reference/be/android)"
- name: Attributes common to all binary rules (*_binary)
  id: common-definitions#common-attributes-binaries
  summary: This section describes attributes that are common to all binary rules
  belongs_to: Common definitions
  description: |-
    ## Attributes common to all binary rules (\*\_binary)

    This section describes attributes that are common to all binary rules.

    [TABLE]
- name: Attributes common to all build rules
  id: common-definitions#common-attributes
  summary: This section describes attributes that are implicitly added to all build rules
  belongs_to: Common definitions
  description: |-
    ## Attributes common to all build rules

    This section describes attributes that are implicitly added to all build rules.

    [TABLE]
- name: Attributes common to all test rules (*_test)
  id: common-definitions#common-attributes-tests
  summary: This section describes attributes that are common to all test rules
  belongs_to: Common definitions
  description: |-
    ## Attributes common to all test rules (\*\_test)

    This section describes attributes that are common to all test rules.

    [TABLE]
- name: available_xcodes
  id: objective-c#available_xcodes
  summary: Two targets of this rule can be depended on by an xcode_config rule instance to indicate the remotely and locally available xcode versions
  belongs_to: Objective-C Rules
  description: |-
    ## available_xcodes

    ``` rule-signature
    available_xcodes(name, default, deprecation, distribs, features, licenses, tags, testonly, versions, visibility)
    ```

    Two targets of this rule can be depended on by an `xcode_config` rule instance to indicate the remotely and locally available xcode versions. This allows selection of an official xcode version from the collectively available xcodes.

    ### Arguments

    [TABLE]
- name: Bazel BUILD Encyclopedia of Functions
  id: overview
  summary: Native rules ship with the Bazel binary and do not require a load statement
  description: "# Bazel BUILD Encyclopedia of Functions\n\n## Concepts and terminology\n\n- [Common definitions](common-definitions)\n  - [Bourne shell tokenization](common-definitions#sh-tokenization)\n  - [Label expansion](common-definitions#label-expansion)\n  - [Typical attributes for most rules](common-definitions#typical-attributes)\n  - [Common attributes for all rules](common-definitions#common-attributes)\n  - [Common attributes for tests](common-definitions#common-attributes-tests)\n  - [Common attributes for binaries](common-definitions#common-attributes-binaries)\n  - [Configurable attributes](common-definitions#configurable-attributes)\n  - [Implicit output targets](common-definitions#implicit-outputs)\n- [\"Make\" variables](make-variables)\n  - [Use](make-variables#use)\n\n## Functions\n\n- [package](functions#package)\n- [package_group](functions#package_group)\n- [exports_files](functions#exports_files)\n- [glob](functions#glob)\n- [select](functions#select)\n- [workspace](https://bazel.build/versions/7.0.0/rules/lib/globals/workspace#workspace)\n\n## Rules\n\nNative rules ship with the Bazel binary and do not require a `load` statement. Native rules are available globally in BUILD files. In .bzl files, you can find them in the `native` module. For non-native Starlark rules that ship separately from Bazel, see the list of [recommended rules](https://bazel.build/versions/7.0.0/rules/rules#recommended-rules).\n\n### Language-specific native rules\n\n| Language        | Binary rules                             | Library rules                                                                                                                                                                                                                                                                                                               | Test rules                                                                                                            | Other rules                                                                                                                                                           |\n|-----------------|------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Android         | [android_binary](android#android_binary) | [aar_import](android#aar_import) [android_library](android#android_library)                                                                                                                                                                                                                                                 | [android_instrumentation_test](android#android_instrumentation_test) [android_local_test](android#android_local_test) | [android_device](android#android_device) [android_ndk_repository](android#android_ndk_repository) [android_sdk_repository](android#android_sdk_repository)            |\n| C / C++         | [cc_binary](c-cpp#cc_binary)             | [cc_import](c-cpp#cc_import) [cc_library](c-cpp#cc_library) [cc_proto_library](c-cpp#cc_proto_library) [cc_shared_library](c-cpp#cc_shared_library) [fdo_prefetch_hints](c-cpp#fdo_prefetch_hints) [fdo_profile](c-cpp#fdo_profile) [memprof_profile](c-cpp#memprof_profile) [propeller_optimize](c-cpp#propeller_optimize) | [cc_test](c-cpp#cc_test)                                                                                              | [cc_toolchain](c-cpp#cc_toolchain) [cc_toolchain_suite](c-cpp#cc_toolchain_suite)                                                                                     |\n| Java            | [java_binary](java#java_binary)          | [java_import](java#java_import) [java_library](java#java_library) [java_lite_proto_library](java#java_lite_proto_library) [java_proto_library](java#java_proto_library)                                                                                                                                                     | [java_test](java#java_test)                                                                                           | [java_package_configuration](java#java_package_configuration) [java_plugin](java#java_plugin) [java_runtime](java#java_runtime) [java_toolchain](java#java_toolchain) |\n| Objective-C     |                                          | [j2objc_library](objective-c#j2objc_library) [objc_import](objective-c#objc_import) [objc_library](objective-c#objc_library)                                                                                                                                                                                                |                                                                                                                       | [available_xcodes](objective-c#available_xcodes) [xcode_config](objective-c#xcode_config) [xcode_version](objective-c#xcode_version)                                  |\n| Protocol Buffer |                                          | [proto_lang_toolchain](protocol-buffer#proto_lang_toolchain) [proto_library](protocol-buffer#proto_library)                                                                                                                                                                                                                 |                                                                                                                       |                                                                                                                                                                       |\n| Python          | [py_binary](python#py_binary)            | [py_library](python#py_library)                                                                                                                                                                                                                                                                                             | [py_test](python#py_test)                                                                                             | [py_runtime](python#py_runtime)                                                                                                                                       |\n| Shell           | [sh_binary](shell#sh_binary)             | [sh_library](shell#sh_library)                                                                                                                                                                                                                                                                                              | [sh_test](shell#sh_test)                                                                                              |                                                                                                                                                                       |\n\n### Language-agnostic native rules\n\n[TABLE]\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/overview](https://bazel.build/versions/7.0.0/reference/be/overview)"
- name: bind
  id: workspace#bind
  summary: 'Warning: use of bind() is not recommended'
  belongs_to: Workspace Rules
  description: |-
    ## bind

    ``` rule-signature
    bind(name, actual, compatible_with, deprecation, distribs, features, licenses, restricted_to, tags, target_compatible_with, testonly, visibility)
    ```

    *Warning: use of `bind()` is not recommended. See "[Consider removing bind](https://github.com/bazelbuild/bazel/issues/1952)" for a long discussion of its issues and alternatives. In particular, consider the use of [`repo_mapping` repository attributes](https://bazel.build/versions/7.0.0/rules/repository_rules#attributes).*

    *Warning: `select()` cannot be used in `bind()`. See the [Configurable Attributes FAQ](https://bazel.build/versions/7.0.0/docs/configurable-attributes#bind-select) for details.*

    Gives a target an alias in the `//external` package.

    The `//external` package is not a "normal" package: there is no external/ directory, so it can be thought of as a "virtual package" that contains all bound targets.

    #### Examples

    To give a target an alias, `bind` it in the *WORKSPACE* file. For example, suppose there is a `java_library` target called `//third_party/javacc-v2`. This can be aliased by adding the following to the *WORKSPACE* file:

    ``` code
    bind(
        name = "javacc-latest",
        actual = "//third_party/javacc-v2",
    )
    ```

    Now targets can depend on `//external:javacc-latest` instead of `//third_party/javacc-v2`. If javacc-v3 is released, the `bind` rule can be updated and all of the BUILD files depending on `//external:javacc-latest` will now depend on javacc-v3 without needing to be edited.

    Bind can also be used to make targets in external repositories available to your workspace. For example, if there is a remote repository named `@my-ssl` imported in the *WORKSPACE* file and it has a cc_library target `//src:openssl-lib`, you can create an alias for this target using `bind`:

    ``` code
    bind(
        name = "openssl",
        actual = "@my-ssl//src:openssl-lib",
    )
    ```

    Then, in a BUILD file in your workspace, the bound target can be used as follows:

    ``` code
    cc_library(
        name = "sign-in",
        srcs = ["sign_in.cc"],
        hdrs = ["sign_in.h"],
        deps = ["//external:openssl"],
    )
    ```

    Within `sign_in.cc` and `sign_in.h`, the header files exposed by `//external:openssl` can be referred to using their path relative to their repository root. For example, if the rule definition for `@my-ssl//src:openssl-lib` looks like this:

    ``` code
    cc_library(
        name = "openssl-lib",
        srcs = ["openssl.cc"],
        hdrs = ["openssl.h"],
    )
    ```

    Then `sign_in.cc`'s includes might look like this:

    ``` code
    #include "sign_in.h"
    #include "src/openssl.h"
    ```

    ### Arguments

    [TABLE]
- name: Bourne shell tokenization
  id: common-definitions#sh-tokenization
  summary: 'Certain string attributes of some rules are split into multiple words according to the tokenization rules of the Bourne shell: unquoted spaces delimit separate words, and single- and double-quotes characters and backslashes are used to prevent tokenization'
  belongs_to: Common definitions
  description: |-
    ## Bourne shell tokenization

    Certain string attributes of some rules are split into multiple words according to the tokenization rules of the Bourne shell: unquoted spaces delimit separate words, and single- and double-quotes characters and backslashes are used to prevent tokenization.

    Those attributes that are subject to this tokenization are explicitly indicated as such in their definitions in this document.

    Attributes subject to "Make" variable expansion and Bourne shell tokenization are typically used for passing arbitrary options to compilers and other tools. Examples of such attributes are `cc_library.copts` and `java_library.javacopts`. Together these substitutions allow a single string variable to expand into a configuration-specific list of option words.
- name: C / C++ Rules
  id: c-cpp
  summary: cc_import rules allows users to import precompiled C/C++ libraries
  description: "# C / C++ Rules\n\n## Rules\n\n- [cc_binary](#cc_binary)\n- [cc_import](#cc_import)\n- [cc_library](#cc_library)\n- [cc_proto_library](#cc_proto_library)\n- [cc_shared_library](#cc_shared_library)\n- [fdo_prefetch_hints](#fdo_prefetch_hints)\n- [fdo_profile](#fdo_profile)\n- [memprof_profile](#memprof_profile)\n- [propeller_optimize](#propeller_optimize)\n- [cc_test](#cc_test)\n- [cc_toolchain](#cc_toolchain)\n- [cc_toolchain_suite](#cc_toolchain_suite)\n\n## cc_binary\n\n``` rule-signature\ncc_binary(name, deps, srcs, data, additional_linker_inputs, args, compatible_with, copts, defines, deprecation, distribs, env, exec_compatible_with, exec_properties, features, includes, licenses, link_extra_lib, linkopts, linkshared, linkstatic, local_defines, malloc, nocopts, output_licenses, restricted_to, stamp, tags, target_compatible_with, testonly, toolchains, visibility, win_def_file)\n```\n\n#### Implicit output targets\n\n- `name``.stripped` (only built if explicitly requested): A stripped version of the binary. `strip -g` is run on the binary to remove debug symbols. Additional strip options can be provided on the command line using `--stripopt=-foo`. This output is only built if explicitly requested.\n- `name``.dwp` (only built if explicitly requested): If [Fission](https://gcc.gnu.org/wiki/DebugFission) is enabled: a debug information package file suitable for debugging remotely deployed binaries. Else: an empty file.\n\n### Arguments\n\n[TABLE]\n\n## cc_import\n\n``` rule-signature\ncc_import(name, deps, data, hdrs, alwayslink, compatible_with, deprecation, distribs, features, interface_library, licenses, restricted_to, shared_library, static_library, system_provided, tags, target_compatible_with, testonly, visibility)\n```\n\n`cc_import` rules allows users to import precompiled C/C++ libraries.\n\nThe following are the typical use cases:  \n1. Linking a static library\n\n``` code\ncc_import(\n  name = \"mylib\",\n  hdrs = [\"mylib.h\"],\n  static_library = \"libmylib.a\",\n  # If alwayslink is turned on,\n  # libmylib.a will be forcely linked into any binary that depends on it.\n  # alwayslink = 1,\n)\n```\n\n2\\. Linking a shared library (Unix)\n\n``` code\ncc_import(\n  name = \"mylib\",\n  hdrs = [\"mylib.h\"],\n  shared_library = \"libmylib.so\",\n)\n```\n\n3\\. Linking a shared library with interface library (Windows)\n\n``` code\ncc_import(\n  name = \"mylib\",\n  hdrs = [\"mylib.h\"],\n  # mylib.lib is an import library for mylib.dll which will be passed to linker\n  interface_library = \"mylib.lib\",\n  # mylib.dll will be available for runtime\n  shared_library = \"mylib.dll\",\n)\n```\n\n4\\. Linking a shared library with `system_provided=True` (Windows)\n\n``` code\ncc_import(\n  name = \"mylib\",\n  hdrs = [\"mylib.h\"],\n  # mylib.lib is an import library for mylib.dll which will be passed to linker\n  interface_library = \"mylib.lib\",\n  # mylib.dll is provided by system environment, for example it can be found in PATH.\n  # This indicates that Bazel is not responsible for making mylib.dll available.\n  system_provided = 1,\n)\n```\n\n5\\. Linking to static or shared library  \nOn Unix:\n\n``` code\ncc_import(\n  name = \"mylib\",\n  hdrs = [\"mylib.h\"],\n  static_library = \"libmylib.a\",\n  shared_library = \"libmylib.so\",\n)\n\n# first will link to libmylib.a\ncc_binary(\n  name = \"first\",\n  srcs = [\"first.cc\"],\n  deps = [\":mylib\"],\n  linkstatic = 1, # default value\n)\n\n# second will link to libmylib.so\ncc_binary(\n  name = \"second\",\n  srcs = [\"second.cc\"],\n  deps = [\":mylib\"],\n  linkstatic = 0,\n)\n```\n\nOn Windows:\n\n``` code\ncc_import(\n  name = \"mylib\",\n  hdrs = [\"mylib.h\"],\n  static_library = \"libmylib.lib\", # A normal static library\n  interface_library = \"mylib.lib\", # An import library for mylib.dll\n  shared_library = \"mylib.dll\",\n)\n\n# first will link to libmylib.lib\ncc_binary(\n  name = \"first\",\n  srcs = [\"first.cc\"],\n  deps = [\":mylib\"],\n  linkstatic = 1, # default value\n)\n\n# second will link to mylib.dll through mylib.lib\ncc_binary(\n  name = \"second\",\n  srcs = [\"second.cc\"],\n  deps = [\":mylib\"],\n  linkstatic = 0,\n)\n```\n\n`cc_import` supports an include attribute. For example:\n\n``` code\n  cc_import(\n  name = \"curl_lib\",\n  hdrs = glob([\"vendor/curl/include/curl/*.h\"]),\n  includes = [ \"vendor/curl/include\" ],\n  shared_library = \"vendor/curl/lib/.libs/libcurl.dylib\",\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## cc_library\n\n``` rule-signature\ncc_library(name, deps, srcs, data, hdrs, additional_compiler_inputs, additional_linker_inputs, alwayslink, compatible_with, copts, defines, deprecation, distribs, exec_compatible_with, exec_properties, features, implementation_deps, include_prefix, includes, licenses, linkopts, linkstamp, linkstatic, local_defines, nocopts, restricted_to, strip_include_prefix, tags, target_compatible_with, testonly, textual_hdrs, toolchains, visibility, win_def_file)\n```\n\n#### Header inclusion checking\n\nAll header files that are used in the build must be declared in the `hdrs` or `srcs` of `cc_*` rules. This is enforced.\n\nFor `cc_library` rules, headers in `hdrs` comprise the public interface of the library and can be directly included both from the files in `hdrs` and `srcs` of the library itself as well as from files in `hdrs` and `srcs` of `cc_*` rules that list the library in their `deps`. Headers in `srcs` must only be directly included from the files in `hdrs` and `srcs` of the library itself. When deciding whether to put a header into `hdrs` or `srcs`, you should ask whether you want consumers of this library to be able to directly include it. This is roughly the same decision as between `public` and `private` visibility in programming languages.\n\n`cc_binary` and `cc_test` rules do not have an exported interface, so they also do not have a `hdrs` attribute. All headers that belong to the binary or test directly should be listed in the `srcs`.\n\nTo illustrate these rules, look at the following example.\n\n``` code\ncc_binary(\n    name = \"foo\",\n    srcs = [\n        \"foo.cc\",\n        \"foo.h\",\n    ],\n    deps = [\":bar\"],\n)\n\ncc_library(\n    name = \"bar\",\n    srcs = [\n        \"bar.cc\",\n        \"bar-impl.h\",\n    ],\n    hdrs = [\"bar.h\"],\n    deps = [\":baz\"],\n)\n\ncc_library(\n    name = \"baz\",\n    srcs = [\n        \"baz.cc\",\n        \"baz-impl.h\",\n    ],\n    hdrs = [\"baz.h\"],\n)\n```\n\nThe allowed direct inclusions in this example are listed in the table below. For example `foo.cc` is allowed to directly include `foo.h` and `bar.h`, but not `baz.h`.\n\n| Including file | Allowed inclusions     |\n|----------------|------------------------|\n| foo.h          | bar.h                  |\n| foo.cc         | foo.h bar.h            |\n| bar.h          | bar-impl.h baz.h       |\n| bar-impl.h     | bar.h baz.h            |\n| bar.cc         | bar.h bar-impl.h baz.h |\n| baz.h          | baz-impl.h             |\n| baz-impl.h     | baz.h                  |\n| baz.cc         | baz.h baz-impl.h       |\n\nThe inclusion checking rules only apply to *direct* inclusions. In the example above `foo.cc` is allowed to include `bar.h`, which may include `baz.h`, which in turn is allowed to include `baz-impl.h`. Technically, the compilation of a `.cc` file may transitively include any header file in the `hdrs` or `srcs` in any `cc_library` in the transitive `deps` closure. In this case the compiler may read `baz.h` and `baz-impl.h` when compiling `foo.cc`, but `foo.cc` must not contain `#include \"baz.h\"`. For that to be allowed, `baz` must be added to the `deps` of `foo`.\n\nBazel depends on toolchain support to enforce the inclusion checking rules. The `layering_check` feature has to be supported by the toolchain and requested explicitly, for example via the `--features=layering_check` command-line flag or the `features` parameter of the [`package`](functions#package) function. The toolchains provided by Bazel only support this feature with clang on Unix and macOS.\n\n### Arguments\n\n[TABLE]\n\n## cc_proto_library\n\n``` rule-signature\ncc_proto_library(name, deps, data, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, features, licenses, restricted_to, tags, target_compatible_with, testonly, visibility)\n```\n\n`cc_proto_library` generates C++ code from `.proto` files.\n\n`deps` must point to [`proto_library `](protocol-buffer#proto_library) rules.\n\nExample:\n\n``` code\ncc_library(\n    name = \"lib\",\n    deps = [\":foo_cc_proto\"],\n)\n\ncc_proto_library(\n    name = \"foo_cc_proto\",\n    deps = [\":foo_proto\"],\n)\n\nproto_library(\n    name = \"foo_proto\",\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## cc_shared_library\n\n``` rule-signature\ncc_shared_library(name, deps, additional_linker_inputs, dynamic_deps, exports_filter, shared_lib_name, tags, user_link_flags, win_def_file)\n```\n\nIt produces a shared library.\n\n#### Example\n\n``` code\ncc_shared_library(\n    name = \"foo_shared\",\n    deps = [\n        \":foo\",\n    ],\n    dynamic_deps = [\n        \":bar_shared\",\n    ],\n    additional_linker_inputs = [\n        \":foo.lds\",\n    ],\n    user_link_flags = [\n        \"-Wl,--version-script=$(location :foo.lds)\",\n    ],\n)\ncc_library(\n    name = \"foo\",\n    srcs = [\"foo.cc\"],\n    hdrs = [\"foo.h\"],\n    deps = [\n        \":bar\",\n        \":baz\",\n    ],\n)\ncc_shared_library(\n    name = \"bar_shared\",\n    shared_lib_name = \"bar.so\",\n    deps = [\":bar\"],\n)\ncc_library(\n    name = \"bar\",\n    srcs = [\"bar.cc\"],\n    hdrs = [\"bar.h\"],\n)\ncc_library(\n    name = \"baz\",\n    srcs = [\"baz.cc\"],\n    hdrs = [\"baz.h\"],\n)\n```\n\nIn the example `foo_shared` statically links `foo` and `baz`, the latter being a transitive dependency. It doesn't link `bar` because it is already provided dynamically by the `dynamic_dep` `bar_shared`.\n\n`foo_shared` uses a linker script \\*.lds file to control which symbols should be exported. The `cc_shared_library` rule logic does not control which symbols get exported, it only uses what is assumed to be exported to give errors during analysis phase if two shared libraries export the same targets.\n\nEvery direct dependency of `cc_shared_library` is assumed to be exported. Therefore, Bazel assumes during analysis that `foo` is being exported by `foo_shared`. `baz` is not assumed to be exported by `foo_shared`. Every target matched by the `exports_filter` is also assumed to be exported.\n\nEvery single `cc_library` in the example should appear at most in one `cc_shared_library`. If we wanted to link `baz` also into `bar_shared` we would need to add `tags = [\"LINKABLE_MORE_THAN_ONCE\"]` to `baz`.\n\nDue to the `shared_lib_name` attribute, the file produced by `bar_shared` will have the name `bar.so` as opposed to the name `libbar.so` that it would have by default on Linux.\n\n#### Errors\n\n##### `Two shared libraries in dependencies export the same symbols.`\n\nThis will happen whenever you are creating a target with two different `cc_shared_library` dependencies that export the same target. To fix this you need to stop the libraries from being exported in one of the `cc_shared_library` dependencies.\n\n##### `Two shared libraries in dependencies link the same library statically`\n\nThis will happen whenever you are creating a new `cc_shared_library` with two different `cc_shared_library` dependencies that link the same target statically. Similar to the error with exports.\n\nOne way to fix this is to stop linking the library into one of the `cc_shared_library` dependencies. At the same time, the one that still links it needs to export the library so that the one not linking it keeps visibility to the symbols. Another way is to pull out a third library that exports the target. A third way is to tag the culprit `cc_library` with `LINKABLE_MORE_THAN_ONCE` but this fix should be rare and you should absolutely make sure that the `cc_library` is indeed safe to link more than once.\n\n##### `` '//foo:foo' is already linked statically in '//bar:bar' but not exported` ``\n\nThis means that a library in the transitive closure of your `deps` is reachable without going through one of the `cc_shared_library` dependencies but is already linked into a different `cc_shared_library` in `dynamic_deps` and is not exported.\n\nThe solution is to export it from the `cc_shared_library` dependency or pull out a third `cc_shared_library` that exports it.\n\n##### `Do not place libraries which only contain a precompiled dynamic library in deps. `\n\nIf you have a precompiled dynamic library, this doesn't need to and cannot be linked statically into the current `cc_shared_library` target that you are currently creating. Therefore, it doesn't belong in `deps` of the `cc_shared_library`. If this precompiled dynamic library is a dependency of one of your `cc_libraries`, then the `cc_library` needs to depend on it directly.\n\n##### `Trying to export a library already exported by a different shared library`\n\nYou will see this error if on the current rule you are claiming to export a target that is already being exported by one of your dynamic dependencies.\n\nTo fix this, remove the target from `deps` and just rely on it from the dynamic dependency or make sure that the `exports_filter` doesn't catch this target.\n\n### Arguments\n\n[TABLE]\n\n## fdo_prefetch_hints\n\n``` rule-signature\nfdo_prefetch_hints(name, compatible_with, deprecation, distribs, features, licenses, profile, restricted_to, tags, target_compatible_with, testonly, visibility)\n```\n\nRepresents an FDO prefetch hints profile that is either in the workspace or at a specified absolute path. Examples:\n\n``` code\nfdo_prefetch_hints(\n    name = \"hints\",\n    profile = \"//path/to/hints:profile.afdo\",\n)\n\nfdo_profile(\n  name = \"hints_abs\",\n  absolute_path_profile = \"/absolute/path/profile.afdo\",\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## fdo_profile\n\n``` rule-signature\nfdo_profile(name, absolute_path_profile, compatible_with, deprecation, distribs, features, licenses, profile, proto_profile, restricted_to, tags, target_compatible_with, testonly, visibility)\n```\n\nRepresents an FDO profile that is either in the workspace or at a specified absolute path. Examples:\n\n``` code\nfdo_profile(\n    name = \"fdo\",\n    profile = \"//path/to/fdo:profile.zip\",\n)\n\nfdo_profile(\n  name = \"fdo_abs\",\n  absolute_path_profile = \"/absolute/path/profile.zip\",\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## memprof_profile\n\n``` rule-signature\nmemprof_profile(name, absolute_path_profile, compatible_with, deprecation, distribs, features, licenses, profile, restricted_to, tags, target_compatible_with, testonly, visibility)\n```\n\nRepresents a MEMPROF profile that is either in the workspace or at a specified absolute path. Examples:\n\n``` code\nmemprof_profile(\n    name = \"memprof\",\n    profile = \"//path/to/memprof:profile.afdo\",\n)\n\nmemprof_profile(\n  name = \"memprof_abs\",\n  absolute_path_profile = \"/absolute/path/profile.afdo\",\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## propeller_optimize\n\n``` rule-signature\npropeller_optimize(name, compatible_with, deprecation, distribs, features, ld_profile, licenses, restricted_to, tags, target_compatible_with, testonly, visibility)\n```\n\nRepresents a Propeller optimization profile in the workspace. Example:\n\n``` code\npropeller_optimize(\n    name = \"layout\",\n    cc_profile = \"//path:cc_profile.txt\",\n    ld_profile = \"//path:ld_profile.txt\"\n)\n\npropeller_optimize(\n    name = \"layout_absolute\",\n    absolute_cc_profile = \"/absolute/cc_profile.txt\",\n    absolute_ld_profile = \"/absolute/ld_profile.txt\"\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## cc_test\n\n``` rule-signature\ncc_test(name, deps, srcs, data, additional_linker_inputs, args, compatible_with, copts, defines, deprecation, distribs, env, env_inherit, exec_compatible_with, exec_properties, features, flaky, includes, licenses, link_extra_lib, linkopts, linkstatic, local, local_defines, malloc, nocopts, restricted_to, shard_count, size, stamp, tags, target_compatible_with, testonly, timeout, toolchains, visibility, win_def_file)\n```\n\n### Arguments\n\n[TABLE]\n\n## cc_toolchain\n\n``` rule-signature\ncc_toolchain(name, all_files, ar_files, as_files, compatible_with, compiler_files, compiler_files_without_includes, coverage_files, deprecation, distribs, dwp_files, dynamic_runtime_lib, exec_transition_for_inputs, features, libc_top, licenses, linker_files, module_map, objcopy_files, restricted_to, static_runtime_lib, strip_files, supports_header_parsing, supports_param_files, tags, target_compatible_with, testonly, toolchain_config, toolchain_identifier, visibility)\n```\n\nRepresents a C++ toolchain.\n\nThis rule is responsible for:\n\n- Collecting all artifacts needed for C++ actions to run. This is done by attributes such as `all_files`, `compiler_files`, `linker_files`, or other attributes ending with `_files`). These are most commonly filegroups globbing all required files.\n- Generating correct command lines for C++ actions. This is done using `CcToolchainConfigInfo` provider (details below).\n\nUse `toolchain_config` attribute to configure the C++ toolchain. See also this [page](https://bazel.build/versions/7.0.0/docs/cc-toolchain-config-reference) for elaborate C++ toolchain configuration and toolchain selection documentation.\n\nUse `tags = [\"manual\"]` in order to prevent toolchains from being built and configured unnecessarily when invoking `bazel build //...`\n\n### Arguments\n\n[TABLE]\n\n## cc_toolchain_suite\n\n``` rule-signature\ncc_toolchain_suite(name, compatible_with, deprecation, distribs, features, licenses, restricted_to, tags, target_compatible_with, testonly, toolchains, visibility)\n```\n\nRepresents a collections of C++ toolchains.\n\nThis rule is responsible for:\n\n- Collecting all relevant C++ toolchains.\n- Selecting one toolchain depending on `--cpu` and `--compiler` options passed to Bazel.\n\nSee also this [page](https://bazel.build/versions/7.0.0/docs/cc-toolchain-config-reference) for elaborate C++ toolchain configuration and toolchain selection documentation.\n\n### Arguments\n\n[TABLE]\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/c-cpp](https://bazel.build/versions/7.0.0/reference/be/c-cpp)"
- name: cc_binary
  id: c-cpp#cc_binary
  summary: null
  belongs_to: C / C++ Rules
  description: |-
    ## cc_binary

    ``` rule-signature
    cc_binary(name, deps, srcs, data, additional_linker_inputs, args, compatible_with, copts, defines, deprecation, distribs, env, exec_compatible_with, exec_properties, features, includes, licenses, link_extra_lib, linkopts, linkshared, linkstatic, local_defines, malloc, nocopts, output_licenses, restricted_to, stamp, tags, target_compatible_with, testonly, toolchains, visibility, win_def_file)
    ```

    #### Implicit output targets

    - `name``.stripped` (only built if explicitly requested): A stripped version of the binary. `strip -g` is run on the binary to remove debug symbols. Additional strip options can be provided on the command line using `--stripopt=-foo`. This output is only built if explicitly requested.
    - `name``.dwp` (only built if explicitly requested): If [Fission](https://gcc.gnu.org/wiki/DebugFission) is enabled: a debug information package file suitable for debugging remotely deployed binaries. Else: an empty file.

    ### Arguments

    [TABLE]
- name: cc_import
  id: c-cpp#cc_import
  summary: cc_import rules allows users to import precompiled C/C++ libraries
  belongs_to: C / C++ Rules
  description: "## cc_import\n\n``` rule-signature\ncc_import(name, deps, data, hdrs, alwayslink, compatible_with, deprecation, distribs, features, interface_library, licenses, restricted_to, shared_library, static_library, system_provided, tags, target_compatible_with, testonly, visibility)\n```\n\n`cc_import` rules allows users to import precompiled C/C++ libraries.\n\nThe following are the typical use cases:  \n1. Linking a static library\n\n``` code\ncc_import(\n  name = \"mylib\",\n  hdrs = [\"mylib.h\"],\n  static_library = \"libmylib.a\",\n  # If alwayslink is turned on,\n  # libmylib.a will be forcely linked into any binary that depends on it.\n  # alwayslink = 1,\n)\n```\n\n2\\. Linking a shared library (Unix)\n\n``` code\ncc_import(\n  name = \"mylib\",\n  hdrs = [\"mylib.h\"],\n  shared_library = \"libmylib.so\",\n)\n```\n\n3\\. Linking a shared library with interface library (Windows)\n\n``` code\ncc_import(\n  name = \"mylib\",\n  hdrs = [\"mylib.h\"],\n  # mylib.lib is an import library for mylib.dll which will be passed to linker\n  interface_library = \"mylib.lib\",\n  # mylib.dll will be available for runtime\n  shared_library = \"mylib.dll\",\n)\n```\n\n4\\. Linking a shared library with `system_provided=True` (Windows)\n\n``` code\ncc_import(\n  name = \"mylib\",\n  hdrs = [\"mylib.h\"],\n  # mylib.lib is an import library for mylib.dll which will be passed to linker\n  interface_library = \"mylib.lib\",\n  # mylib.dll is provided by system environment, for example it can be found in PATH.\n  # This indicates that Bazel is not responsible for making mylib.dll available.\n  system_provided = 1,\n)\n```\n\n5\\. Linking to static or shared library  \nOn Unix:\n\n``` code\ncc_import(\n  name = \"mylib\",\n  hdrs = [\"mylib.h\"],\n  static_library = \"libmylib.a\",\n  shared_library = \"libmylib.so\",\n)\n\n# first will link to libmylib.a\ncc_binary(\n  name = \"first\",\n  srcs = [\"first.cc\"],\n  deps = [\":mylib\"],\n  linkstatic = 1, # default value\n)\n\n# second will link to libmylib.so\ncc_binary(\n  name = \"second\",\n  srcs = [\"second.cc\"],\n  deps = [\":mylib\"],\n  linkstatic = 0,\n)\n```\n\nOn Windows:\n\n``` code\ncc_import(\n  name = \"mylib\",\n  hdrs = [\"mylib.h\"],\n  static_library = \"libmylib.lib\", # A normal static library\n  interface_library = \"mylib.lib\", # An import library for mylib.dll\n  shared_library = \"mylib.dll\",\n)\n\n# first will link to libmylib.lib\ncc_binary(\n  name = \"first\",\n  srcs = [\"first.cc\"],\n  deps = [\":mylib\"],\n  linkstatic = 1, # default value\n)\n\n# second will link to mylib.dll through mylib.lib\ncc_binary(\n  name = \"second\",\n  srcs = [\"second.cc\"],\n  deps = [\":mylib\"],\n  linkstatic = 0,\n)\n```\n\n`cc_import` supports an include attribute. For example:\n\n``` code\n  cc_import(\n  name = \"curl_lib\",\n  hdrs = glob([\"vendor/curl/include/curl/*.h\"]),\n  includes = [ \"vendor/curl/include\" ],\n  shared_library = \"vendor/curl/lib/.libs/libcurl.dylib\",\n)\n```\n\n### Arguments\n\n[TABLE]"
- name: cc_library
  id: c-cpp#cc_library
  summary: All header files that are used in the build must be declared in the hdrs or srcs of cc_* rules
  belongs_to: C / C++ Rules
  description: |-
    ## cc_library

    ``` rule-signature
    cc_library(name, deps, srcs, data, hdrs, additional_compiler_inputs, additional_linker_inputs, alwayslink, compatible_with, copts, defines, deprecation, distribs, exec_compatible_with, exec_properties, features, implementation_deps, include_prefix, includes, licenses, linkopts, linkstamp, linkstatic, local_defines, nocopts, restricted_to, strip_include_prefix, tags, target_compatible_with, testonly, textual_hdrs, toolchains, visibility, win_def_file)
    ```

    #### Header inclusion checking

    All header files that are used in the build must be declared in the `hdrs` or `srcs` of `cc_*` rules. This is enforced.

    For `cc_library` rules, headers in `hdrs` comprise the public interface of the library and can be directly included both from the files in `hdrs` and `srcs` of the library itself as well as from files in `hdrs` and `srcs` of `cc_*` rules that list the library in their `deps`. Headers in `srcs` must only be directly included from the files in `hdrs` and `srcs` of the library itself. When deciding whether to put a header into `hdrs` or `srcs`, you should ask whether you want consumers of this library to be able to directly include it. This is roughly the same decision as between `public` and `private` visibility in programming languages.

    `cc_binary` and `cc_test` rules do not have an exported interface, so they also do not have a `hdrs` attribute. All headers that belong to the binary or test directly should be listed in the `srcs`.

    To illustrate these rules, look at the following example.

    ``` code
    cc_binary(
        name = "foo",
        srcs = [
            "foo.cc",
            "foo.h",
        ],
        deps = [":bar"],
    )

    cc_library(
        name = "bar",
        srcs = [
            "bar.cc",
            "bar-impl.h",
        ],
        hdrs = ["bar.h"],
        deps = [":baz"],
    )

    cc_library(
        name = "baz",
        srcs = [
            "baz.cc",
            "baz-impl.h",
        ],
        hdrs = ["baz.h"],
    )
    ```

    The allowed direct inclusions in this example are listed in the table below. For example `foo.cc` is allowed to directly include `foo.h` and `bar.h`, but not `baz.h`.

    | Including file | Allowed inclusions     |
    |----------------|------------------------|
    | foo.h          | bar.h                  |
    | foo.cc         | foo.h bar.h            |
    | bar.h          | bar-impl.h baz.h       |
    | bar-impl.h     | bar.h baz.h            |
    | bar.cc         | bar.h bar-impl.h baz.h |
    | baz.h          | baz-impl.h             |
    | baz-impl.h     | baz.h                  |
    | baz.cc         | baz.h baz-impl.h       |

    The inclusion checking rules only apply to *direct* inclusions. In the example above `foo.cc` is allowed to include `bar.h`, which may include `baz.h`, which in turn is allowed to include `baz-impl.h`. Technically, the compilation of a `.cc` file may transitively include any header file in the `hdrs` or `srcs` in any `cc_library` in the transitive `deps` closure. In this case the compiler may read `baz.h` and `baz-impl.h` when compiling `foo.cc`, but `foo.cc` must not contain `#include "baz.h"`. For that to be allowed, `baz` must be added to the `deps` of `foo`.

    Bazel depends on toolchain support to enforce the inclusion checking rules. The `layering_check` feature has to be supported by the toolchain and requested explicitly, for example via the `--features=layering_check` command-line flag or the `features` parameter of the [`package`](functions#package) function. The toolchains provided by Bazel only support this feature with clang on Unix and macOS.

    ### Arguments

    [TABLE]
- name: cc_proto_library
  id: c-cpp#cc_proto_library
  summary: cc_proto_library generates C++ code from .proto files
  belongs_to: C / C++ Rules
  description: |-
    ## cc_proto_library

    ``` rule-signature
    cc_proto_library(name, deps, data, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, features, licenses, restricted_to, tags, target_compatible_with, testonly, visibility)
    ```

    `cc_proto_library` generates C++ code from `.proto` files.

    `deps` must point to [`proto_library `](protocol-buffer#proto_library) rules.

    Example:

    ``` code
    cc_library(
        name = "lib",
        deps = [":foo_cc_proto"],
    )

    cc_proto_library(
        name = "foo_cc_proto",
        deps = [":foo_proto"],
    )

    proto_library(
        name = "foo_proto",
    )
    ```

    ### Arguments

    [TABLE]
- name: cc_shared_library
  id: c-cpp#cc_shared_library
  summary: It produces a shared library
  belongs_to: C / C++ Rules
  description: |-
    ## cc_shared_library

    ``` rule-signature
    cc_shared_library(name, deps, additional_linker_inputs, dynamic_deps, exports_filter, shared_lib_name, tags, user_link_flags, win_def_file)
    ```

    It produces a shared library.

    #### Example

    ``` code
    cc_shared_library(
        name = "foo_shared",
        deps = [
            ":foo",
        ],
        dynamic_deps = [
            ":bar_shared",
        ],
        additional_linker_inputs = [
            ":foo.lds",
        ],
        user_link_flags = [
            "-Wl,--version-script=$(location :foo.lds)",
        ],
    )
    cc_library(
        name = "foo",
        srcs = ["foo.cc"],
        hdrs = ["foo.h"],
        deps = [
            ":bar",
            ":baz",
        ],
    )
    cc_shared_library(
        name = "bar_shared",
        shared_lib_name = "bar.so",
        deps = [":bar"],
    )
    cc_library(
        name = "bar",
        srcs = ["bar.cc"],
        hdrs = ["bar.h"],
    )
    cc_library(
        name = "baz",
        srcs = ["baz.cc"],
        hdrs = ["baz.h"],
    )
    ```

    In the example `foo_shared` statically links `foo` and `baz`, the latter being a transitive dependency. It doesn't link `bar` because it is already provided dynamically by the `dynamic_dep` `bar_shared`.

    `foo_shared` uses a linker script \*.lds file to control which symbols should be exported. The `cc_shared_library` rule logic does not control which symbols get exported, it only uses what is assumed to be exported to give errors during analysis phase if two shared libraries export the same targets.

    Every direct dependency of `cc_shared_library` is assumed to be exported. Therefore, Bazel assumes during analysis that `foo` is being exported by `foo_shared`. `baz` is not assumed to be exported by `foo_shared`. Every target matched by the `exports_filter` is also assumed to be exported.

    Every single `cc_library` in the example should appear at most in one `cc_shared_library`. If we wanted to link `baz` also into `bar_shared` we would need to add `tags = ["LINKABLE_MORE_THAN_ONCE"]` to `baz`.

    Due to the `shared_lib_name` attribute, the file produced by `bar_shared` will have the name `bar.so` as opposed to the name `libbar.so` that it would have by default on Linux.

    #### Errors

    ##### `Two shared libraries in dependencies export the same symbols.`

    This will happen whenever you are creating a target with two different `cc_shared_library` dependencies that export the same target. To fix this you need to stop the libraries from being exported in one of the `cc_shared_library` dependencies.

    ##### `Two shared libraries in dependencies link the same library statically`

    This will happen whenever you are creating a new `cc_shared_library` with two different `cc_shared_library` dependencies that link the same target statically. Similar to the error with exports.

    One way to fix this is to stop linking the library into one of the `cc_shared_library` dependencies. At the same time, the one that still links it needs to export the library so that the one not linking it keeps visibility to the symbols. Another way is to pull out a third library that exports the target. A third way is to tag the culprit `cc_library` with `LINKABLE_MORE_THAN_ONCE` but this fix should be rare and you should absolutely make sure that the `cc_library` is indeed safe to link more than once.

    ##### `` '//foo:foo' is already linked statically in '//bar:bar' but not exported` ``

    This means that a library in the transitive closure of your `deps` is reachable without going through one of the `cc_shared_library` dependencies but is already linked into a different `cc_shared_library` in `dynamic_deps` and is not exported.

    The solution is to export it from the `cc_shared_library` dependency or pull out a third `cc_shared_library` that exports it.

    ##### `Do not place libraries which only contain a precompiled dynamic library in deps. `

    If you have a precompiled dynamic library, this doesn't need to and cannot be linked statically into the current `cc_shared_library` target that you are currently creating. Therefore, it doesn't belong in `deps` of the `cc_shared_library`. If this precompiled dynamic library is a dependency of one of your `cc_libraries`, then the `cc_library` needs to depend on it directly.

    ##### `Trying to export a library already exported by a different shared library`

    You will see this error if on the current rule you are claiming to export a target that is already being exported by one of your dynamic dependencies.

    To fix this, remove the target from `deps` and just rely on it from the dynamic dependency or make sure that the `exports_filter` doesn't catch this target.

    ### Arguments

    [TABLE]
- name: cc_test
  id: c-cpp#cc_test
  summary: null
  belongs_to: C / C++ Rules
  description: |-
    ## cc_test

    ``` rule-signature
    cc_test(name, deps, srcs, data, additional_linker_inputs, args, compatible_with, copts, defines, deprecation, distribs, env, env_inherit, exec_compatible_with, exec_properties, features, flaky, includes, licenses, link_extra_lib, linkopts, linkstatic, local, local_defines, malloc, nocopts, restricted_to, shard_count, size, stamp, tags, target_compatible_with, testonly, timeout, toolchains, visibility, win_def_file)
    ```

    ### Arguments

    [TABLE]
- name: cc_toolchain
  id: c-cpp#cc_toolchain
  summary: Represents a C++ toolchain
  belongs_to: C / C++ Rules
  description: |-
    ## cc_toolchain

    ``` rule-signature
    cc_toolchain(name, all_files, ar_files, as_files, compatible_with, compiler_files, compiler_files_without_includes, coverage_files, deprecation, distribs, dwp_files, dynamic_runtime_lib, exec_transition_for_inputs, features, libc_top, licenses, linker_files, module_map, objcopy_files, restricted_to, static_runtime_lib, strip_files, supports_header_parsing, supports_param_files, tags, target_compatible_with, testonly, toolchain_config, toolchain_identifier, visibility)
    ```

    Represents a C++ toolchain.

    This rule is responsible for:

    - Collecting all artifacts needed for C++ actions to run. This is done by attributes such as `all_files`, `compiler_files`, `linker_files`, or other attributes ending with `_files`). These are most commonly filegroups globbing all required files.
    - Generating correct command lines for C++ actions. This is done using `CcToolchainConfigInfo` provider (details below).

    Use `toolchain_config` attribute to configure the C++ toolchain. See also this [page](https://bazel.build/versions/7.0.0/docs/cc-toolchain-config-reference) for elaborate C++ toolchain configuration and toolchain selection documentation.

    Use `tags = ["manual"]` in order to prevent toolchains from being built and configured unnecessarily when invoking `bazel build //...`

    ### Arguments

    [TABLE]
- name: cc_toolchain_suite
  id: c-cpp#cc_toolchain_suite
  summary: Represents a collections of C++ toolchains
  belongs_to: C / C++ Rules
  description: "## cc_toolchain_suite\n\n``` rule-signature\ncc_toolchain_suite(name, compatible_with, deprecation, distribs, features, licenses, restricted_to, tags, target_compatible_with, testonly, toolchains, visibility)\n```\n\nRepresents a collections of C++ toolchains.\n\nThis rule is responsible for:\n\n- Collecting all relevant C++ toolchains.\n- Selecting one toolchain depending on `--cpu` and `--compiler` options passed to Bazel.\n\nSee also this [page](https://bazel.build/versions/7.0.0/docs/cc-toolchain-config-reference) for elaborate C++ toolchain configuration and toolchain selection documentation.\n\n### Arguments\n\n[TABLE]\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/c-cpp](https://bazel.build/versions/7.0.0/reference/be/c-cpp)"
- name: Common definitions
  id: common-definitions
  summary: This section defines various terms and concepts that are common to many functions or build rules
  description: "# Common definitions\n\nThis section defines various terms and concepts that are common to many functions or build rules.\n\n## Contents\n\n- [Bourne shell tokenization](#sh-tokenization)\n- [Label Expansion](#label-expansion)\n- [Typical attributes defined by most build rules](#typical-attributes)\n- [Attributes common to all build rules](#common-attributes)\n- [Attributes common to all test rules (\\*\\_test)](#common-attributes-tests)\n- [Attributes common to all binary rules (\\*\\_binary)](#common-attributes-binaries)\n- [Configurable attributes](#configurable-attributes)\n- [Implicit output targets](#implicit-outputs)\n\n## Bourne shell tokenization\n\nCertain string attributes of some rules are split into multiple words according to the tokenization rules of the Bourne shell: unquoted spaces delimit separate words, and single- and double-quotes characters and backslashes are used to prevent tokenization.\n\nThose attributes that are subject to this tokenization are explicitly indicated as such in their definitions in this document.\n\nAttributes subject to \"Make\" variable expansion and Bourne shell tokenization are typically used for passing arbitrary options to compilers and other tools. Examples of such attributes are `cc_library.copts` and `java_library.javacopts`. Together these substitutions allow a single string variable to expand into a configuration-specific list of option words.\n\n## Label expansion\n\nSome string attributes of a very few rules are subject to label expansion: if those strings contain a valid label as a substring, such as `//mypkg:target`, and that label is a declared prerequisite of the current rule, it is expanded into the pathname of the file represented by the [target](https://bazel.build/versions/7.0.0/reference/glossary#target) `//mypkg:target`.\n\nExample attributes include `genrule.cmd` and `cc_binary.linkopts`. The details may vary significantly in each case, over such issues as: whether relative labels are expanded; how labels that expand to multiple files are treated, etc. Consult the rule attribute documentation for specifics.\n\n## Typical attributes defined by most build rules\n\nThis section describes attributes that are defined by many build rules, but not all.\n\n[TABLE]\n\n## Attributes common to all build rules\n\nThis section describes attributes that are implicitly added to all build rules.\n\n[TABLE]\n\n## Attributes common to all test rules (\\*\\_test)\n\nThis section describes attributes that are common to all test rules.\n\n[TABLE]\n\n## Attributes common to all binary rules (\\*\\_binary)\n\nThis section describes attributes that are common to all binary rules.\n\n[TABLE]\n\n## Configurable attributes\n\nMost attributes are \"configurable\", meaning that their values may change when the target is built in different ways. Specifically, configurable attributes may vary based on the flags passed to the Bazel command line, or what downstream dependency is requesting the target. This can be used, for instance, to customize the target for multiple platforms or compilation modes.\n\nThe following example declares different sources for different target architectures. Running `bazel build :multiplatform_lib --cpu x86` will build the target using `x86_impl.cc`, while substituting `--cpu arm` will instead cause it to use `arm_impl.cc`.\n\n``` code\ncc_library(\n    name = \"multiplatform_lib\",\n    srcs = select({\n        \":x86_mode\": [\"x86_impl.cc\"],\n        \":arm_mode\": [\"arm_impl.cc\"]\n    })\n)\nconfig_setting(\n    name = \"x86_mode\",\n    values = { \"cpu\": \"x86\" }\n)\nconfig_setting(\n    name = \"arm_mode\",\n    values = { \"cpu\": \"arm\" }\n)\n```\n\nThe [`select()`](functions#select) function chooses among different alternative values for a configurable attribute based on which [`config_setting`](general#config_setting) or [`constraint_value`](platforms-and-toolchains#constraint_value) criteria the target's configuration satisfies.\n\nBazel evaluates configurable attributes after processing macros and before processing rules (technically, between the [loading and analysis phases](https://bazel.build/versions/7.0.0/rules/concepts#evaluation-model)). Any processing before `select()` evaluation doesn't know which branch the `select()` chooses. Macros, for example, can't change their behavior based on the chosen branch, and `bazel query` can only make conservative guesses about a target's configurable dependencies. See [this FAQ](https://bazel.build/versions/7.0.0/docs/configurable-attributes#faq) for more on using `select()` with rules and macros.\n\nAttributes marked `nonconfigurable` in their documentation cannot use this feature. Usually an attribute is nonconfigurable because Bazel internally needs to know its value before it can determine how to resolve a `select()`.\n\nSee [Configurable Build Attributes](https://bazel.build/versions/7.0.0/docs/configurable-attributes) for a detailed overview.\n\n## Implicit output targets\n\n*Implicit outputs in C++ are deprecated. Please refrain from using it in other languages where possible. We don't have a deprecation path yet but they will eventually be deprecated too.*\n\nWhen you define a build rule in a BUILD file, you are explicitly declaring a new, named rule target in a package. Many build rule functions also *implicitly* entail one or more output file targets, whose contents and meaning are rule-specific. For example, when you explicitly declare a `java_binary(name='foo', ...)` rule, you are also *implicitly* declaring an output file target `foo_deploy.jar` as a member of the same package. (This particular target is a self-contained Java archive suitable for deployment.)\n\nImplicit output targets are first-class members of the global target graph. Just like other targets, they are built on demand, either when specified in the top-level built command, or when they are necessary prerequisites for other build targets. They can be referenced as dependencies in BUILD files, and can be observed in the output of analysis tools such as `bazel query`.\n\nFor each kind of build rule, the rule's documentation contains a special section detailing the names and contents of any implicit outputs entailed by a declaration of that kind of rule.\n\nAn important but somewhat subtle distinction between the two namespaces used by the build system: [labels](https://bazel.build/versions/7.0.0/concepts/labels) identify *targets*, which may be rules or files, and file targets may be divided into either source (or input) file targets and derived (or output) file targets. These are the things you can mention in BUILD files, build from the command-line, or examine using `bazel query`; this is the *target namespace*. Each file target corresponds to one actual file on disk (the \"file system namespace\"); each rule target may correspond to zero, one or more actual files on disk. There may be files on disk that have no corresponding target; for example, `.o` object files produced during C++ compilation cannot be referenced from within BUILD files or from the command line. In this way, the build tool may hide certain implementation details of how it does its job. This is explained more fully in the [BUILD Concept Reference](https://bazel.build/versions/7.0.0/concepts/build-ref).\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/common-definitions](https://bazel.build/versions/7.0.0/reference/be/common-definitions)"
- name: config_setting
  id: general#config_setting
  summary: Matches an expected configuration state (expressed as build flags or platform constraints) for the purpose of triggering configurable attributes
  belongs_to: General Rules
  description: "## config_setting\n\n``` rule-signature\nconfig_setting(name, constraint_values, define_values, deprecation, distribs, features, flag_values, licenses, tags, testonly, values, visibility)\n```\n\nMatches an expected configuration state (expressed as build flags or platform constraints) for the purpose of triggering configurable attributes. See [select](functions#select) for how to consume this rule and [Configurable attributes](common-definitions#configurable-attributes) for an overview of the general feature.\n\n#### Examples\n\nThe following matches any build that sets `--compilation_mode=opt` or `-c opt` (either explicitly at the command line or implicitly from .bazelrc files):\n\n``` code\n  config_setting(\n      name = \"simple\",\n      values = {\"compilation_mode\": \"opt\"}\n  )\n  \n```\n\nThe following matches any build that targets ARM and applies the custom define `FOO=bar` (for instance, `bazel build --cpu=arm --define FOO=bar ...`):\n\n``` code\n  config_setting(\n      name = \"two_conditions\",\n      values = {\n          \"cpu\": \"arm\",\n          \"define\": \"FOO=bar\"\n      }\n  )\n  \n```\n\nThe following matches any build that sets [user-defined flag](https://bazel.build/versions/7.0.0/rules/config#user-defined-build-settings) `--//custom_flags:foo=1` (either explicitly at the command line or implicitly from .bazelrc files):\n\n``` code\n  config_setting(\n      name = \"my_custom_flag_is_set\",\n      flag_values = { \"//custom_flags:foo\": \"1\" },\n  )\n  \n```\n\nThe following matches any build that targets a platform with an x86_64 architecture and glibc version 2.25, assuming the existence of a `constraint_value` with label `//example:glibc_2_25`. Note that a platform still matches if it defines additional constraint values beyond these two.\n\n``` code\n  config_setting(\n      name = \"64bit_glibc_2_25\",\n      constraint_values = [\n          \"@platforms//cpu:x86_64\",\n          \"//example:glibc_2_25\",\n      ]\n  )\n  \n```\n\nIn all these cases, it's possible for the configuration to change within the build, for example if a target needs to be built for a different platform than its dep. This means that even when a `config_setting` doesn't match the top-level command-line flags, it may still match some build targets.\n\n#### Notes\n\n- See [select](functions#select) for what happens when multiple `config_setting`s match the current configuration state.\n\n- For flags that support shorthand forms (e.g. `--compilation_mode` vs. `-c`), `values` definitions must use the full form. These automatically match invocations using either form.\n\n- If a flag takes multiple values (like `--copt=-Da --copt=-Db` or a list-typed [Starlark flag](https://bazel.build/versions/7.0.0/rules/config#user-defined-build-settings)), `values = { \"flag\": \"a\" }` matches if `\"a\"` is present *anywhere* in the actual list.\n\n  `values = { \"myflag\": \"a,b\" }` works the same way: this matches `--myflag=a --myflag=b`, `--myflag=a --myflag=b --myflag=c`, `--myflag=a,b`, and `--myflag=c,b,a`. Exact semantics vary between flags. For example, `--copt` doesn't support multiple values *in the same instance*: `--copt=a,b` produces `[\"a,b\"]` while `--copt=a --copt=b` produces `[\"a\", \"b\"]` (so `values = { \"copt\": \"a,b\" }` matches the former but not the latter). But `--ios_multi_cpus` (for Apple rules) *does*: `-ios_multi_cpus=a,b` and `ios_multi_cpus=a --ios_multi_cpus=b ` both produce `[\"a\", \"b\"]`. Check flag definitions and test your conditions carefully to verify exact expectations.\n\n- If you need to define conditions that aren't modeled by built-in build flags, use [Starlark-defined flags](https://bazel.build/versions/7.0.0/rules/config#user-defined-build-settings). You can also use `--define`, but this offers weaker support and is not recommended. See [here](common-definitions#configurable-attributes) for more discussion.\n\n- Avoid repeating identical `config_setting` definitions in different packages. Instead, reference a common `config_setting` that defined in a canonical package.\n\n- [`values`](general#config_setting.values), [`define_values`](general#config_setting.define_values), and [`constraint_values`](general#config_setting.constraint_values) can be used in any combination in the same `config_setting` but at least one must be set for any given `config_setting`.\n\n### Arguments\n\n[TABLE]"
- name: Configurable attributes
  id: common-definitions#configurable-attributes
  summary: Most attributes are "configurable", meaning that their values may change when the target is built in different ways
  belongs_to: Common definitions
  description: |-
    ## Configurable attributes

    Most attributes are "configurable", meaning that their values may change when the target is built in different ways. Specifically, configurable attributes may vary based on the flags passed to the Bazel command line, or what downstream dependency is requesting the target. This can be used, for instance, to customize the target for multiple platforms or compilation modes.

    The following example declares different sources for different target architectures. Running `bazel build :multiplatform_lib --cpu x86` will build the target using `x86_impl.cc`, while substituting `--cpu arm` will instead cause it to use `arm_impl.cc`.

    ``` code
    cc_library(
        name = "multiplatform_lib",
        srcs = select({
            ":x86_mode": ["x86_impl.cc"],
            ":arm_mode": ["arm_impl.cc"]
        })
    )
    config_setting(
        name = "x86_mode",
        values = { "cpu": "x86" }
    )
    config_setting(
        name = "arm_mode",
        values = { "cpu": "arm" }
    )
    ```

    The [`select()`](functions#select) function chooses among different alternative values for a configurable attribute based on which [`config_setting`](general#config_setting) or [`constraint_value`](platforms-and-toolchains#constraint_value) criteria the target's configuration satisfies.

    Bazel evaluates configurable attributes after processing macros and before processing rules (technically, between the [loading and analysis phases](https://bazel.build/versions/7.0.0/rules/concepts#evaluation-model)). Any processing before `select()` evaluation doesn't know which branch the `select()` chooses. Macros, for example, can't change their behavior based on the chosen branch, and `bazel query` can only make conservative guesses about a target's configurable dependencies. See [this FAQ](https://bazel.build/versions/7.0.0/docs/configurable-attributes#faq) for more on using `select()` with rules and macros.

    Attributes marked `nonconfigurable` in their documentation cannot use this feature. Usually an attribute is nonconfigurable because Bazel internally needs to know its value before it can determine how to resolve a `select()`.

    See [Configurable Build Attributes](https://bazel.build/versions/7.0.0/docs/configurable-attributes) for a detailed overview.
- name: constraint_setting
  id: platforms-and-toolchains#constraint_setting
  summary: This rule is used to introduce a new constraint type for which a platform may specify a value
  belongs_to: Platforms and Toolchains Rules
  description: |-
    ## constraint_setting

    ``` rule-signature
    constraint_setting(name, default_constraint_value, deprecation, distribs, features, licenses, tags, testonly, visibility)
    ```

    This rule is used to introduce a new constraint type for which a platform may specify a value. For instance, you might define a `constraint_setting` named "glibc_version" to represent the capability for platforms to have different versions of the glibc library installed. For more details, see the [Platforms](https://bazel.build/versions/7.0.0/docs/platforms) page.

    Each `constraint_setting` has an extensible set of associated `constraint_value`s. Usually these are defined in the same package, but sometimes a different package will introduce new values for an existing setting. For instance, the predefined setting `@platforms//cpu:cpu` can be extended with a custom value in order to define a platform targeting an obscure cpu architecture.

    ### Arguments

    [TABLE]
- name: constraint_value
  id: platforms-and-toolchains#constraint_value
  summary: This rule introduces a new value for a given constraint type
  belongs_to: Platforms and Toolchains Rules
  description: |-
    ## constraint_value

    ``` rule-signature
    constraint_value(name, constraint_setting, deprecation, distribs, features, licenses, tags, testonly, visibility)
    ```

    This rule introduces a new value for a given constraint type. For more details, see the [Platforms](https://bazel.build/versions/7.0.0/docs/platforms) page.

    #### Example

    The following creates a new possible value for the predefined `constraint_value` representing cpu architecture.

    ``` code
    constraint_value(
        name = "mips",
        constraint_setting = "@platforms//cpu:cpu",
    )
    ```

    Platforms can then declare that they have the `mips` architecture as an alternative to `x86_64`, `arm`, and so on.

    ### Arguments

    [TABLE]
- name: Custom variables
  id: make-variables#custom_variables
  summary: Custom "Make" variables can be referenced by any attribute marked as "Subject to 'Make variable' substitution", but only on targets that depend on other targets that define these variables
  belongs_to: Make Variables
  description: "## Custom variables\n\nCustom \"Make\" variables can be referenced by any attribute marked as *\"Subject to 'Make variable' substitution\"*, but only on targets that depend on other targets that *define* these variables.\n\nAs best practice all variables should be custom unless there's a really good reason to bake them into core Bazel. This saves Bazel from having to load potentially expensive dependencies to supply variables consuming tarets may not care about.\n\n**C++ toolchain variables**\n\nThe following are defined in C++ toolchain rules and available to any rule that sets `toolchains = [\"@bazel_tools//tools/cpp:current_cc_toolchain\"]` Some rules, like [`java_binary`](java#java_binary), implicitly include the C++ toolchain in their rule definition. They inherit these variables automatically.\n\nThe built-in C++ rules are much more sophisticated than \"run the compiler on it\". In order to support compilation modes as diverse as \\*SAN, ThinLTO, with/without modules, and carefully optimized binaries at the same time as fast running tests on multiple platforms, the built-in rules go to great lengths to ensure the correct inputs, outputs, and command-line flags are set on each of potentially multiple internally generated actions.\n\nThese variables are a fallback mechanism to be used by language experts in rare cases. If you are tempted to use them, please [contact the Bazel devs](https://bazel.build/versions/7.0.0/help) first.\n\n- `ABI`: The C++ ABI version.\n\n- `AR`: The \"ar\" command from crosstool.\n\n- `C_COMPILER`: The C/C++ compiler identifier, e.g. `llvm`.\n\n- `CC`: The C and C++ compiler command.\n\n  We strongly recommended always using `CC_FLAGS` in combination with `CC`. Fail to do so at your own risk.\n\n- `CC_FLAGS`: A minimal set of flags for the C/C++ compiler to be usable by genrules. In particular, this contains flags to select the correct architecture if `CC` supports multiple architectures.\n\n- `NM`: The \"nm\" command from crosstool.\n\n- `OBJCOPY`: The objcopy command from the same suite as the C/C++ compiler.\n\n- `STRIP`: The strip command from the same suite as the C/C++ compiler.\n\n**Java toolchain variables**\n\nThe following are defined in Java toolchain rules and available to any rule that sets `toolchains = [\"@bazel_tools//tools/jdk:current_java_runtime\"]` (or `\"@bazel_tools//tools/jdk:current_host_java_runtime\"` for the host toolchain equivalent).\n\nMost of the tools in the JDK should not be used directly. The built-in Java rules use much more sophisticated approaches to Java compilation and packaging than upstream tools can express, such as interface Jars, header interface Jars, and highly optimized Jar packaging and merging implementations.\n\nThese variables are a fallback mechanism to be used by language experts in rare cases. If you are tempted to use them, please [contact the Bazel devs](https://bazel.build/versions/7.0.0/help) first.\n\n- `JAVA`: The \"java\" command (a Java virtual machine). Avoid this, and use a [`java_binary`](java#java_binary) rule instead where possible. May be a relative path. If you must change directories before invoking `java`, you need to capture the working directory before changing it.\n- `JAVABASE`: The base directory containing the Java utilities. May be a relative path. It will have a \"bin\" subdirectory.\n\n**Starlark-defined variables**\n\nRule and [toolchain](https://bazel.build/versions/7.0.0/docs/toolchains) writers can define completely custom variables by returning a [TemplateVariableInfo](https://bazel.build/versions/7.0.0/rules/lib/TemplateVariableInfo) provider. Any rules depending on these through the `toolchains` attribute can then read their values:\n\n[See an example of Starlark-defined variables](https://github.com/bazelbuild/examples/tree/main/make-variables#custom-starlark-defined-variables).\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/make-variables](https://bazel.build/versions/7.0.0/reference/be/make-variables)"
- name: exports_files
  id: functions#exports_files
  summary: exports_files() specifies a list of files belonging to this package that are exported to other packages
  belongs_to: Functions
  description: |-
    ## exports_files

    ```
    exports_files([label, ...], visibility, licenses)
    ```

    `exports_files()` specifies a list of files belonging to this package that are exported to other packages.

    The BUILD file for a package may only refer directly to source files belonging to another package if they are explicitly exported with an `exports_files()` statement. Read more about [visibility of files](https://bazel.build/versions/7.0.0/concepts/visibility#source-file-target-visibility).

    As a legacy behaviour, also files mentioned as input to a rule are exported with the default visibility until the flag [`--incompatible_no_implicit_file_export`](https://github.com/bazelbuild/bazel/issues/10225) is flipped. However, this behavior should not be relied upon and actively migrated away from.

    ### Arguments

    The argument is a list of names of files within the current package. A visibility declaration can also be specified; in this case, the files will be visible to the targets specified. If no visibility is specified, the files will be visible to every package, even if a package default visibility was specified in the [`package`](functions#package) function. The [licenses](common-definitions#common.licenses) can also be specified.

    ### Example

    The following example exports `golden.txt`, a text file from the `test_data` package, so that other packages may use it, for example, in the `data` attribute of tests.

    ``` code
    # from //test_data/BUILD

    exports_files(["golden.txt"])
    ```
- name: Extra Actions Rules
  id: extra-actions
  summary: 'WARNING: Extra actions are deprecated'
  description: "# Extra Actions Rules\n\n## Rules\n\n- [action_listener](#action_listener)\n- [extra_action](#extra_action)\n\n## action_listener\n\n``` rule-signature\naction_listener(name, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, extra_actions, features, licenses, mnemonics, restricted_to, tags, target_compatible_with, testonly, visibility)\n```\n\n**WARNING:** Extra actions are deprecated. Use [aspects](https://bazel.build/versions/7.0.0/rules/aspects) instead.\n\nAn `action_listener` rule doesn't produce any output itself. Instead, it allows tool developers to insert [`extra_action`](extra-actions#extra_action)s into the build system, by providing a mapping from action to [`extra_action`](extra-actions#extra_action) .\n\nThis rule's arguments map action mnemonics to [`extra_action`](extra-actions#extra_action) rules.\n\nBy specifying the option [`--experimental_action_listener=<label>`](https://bazel.build/versions/7.0.0/docs/user-manual#flag--experimental_action_listener), the build will use the specified `action_listener` to insert [`extra_action`](extra-actions#extra_action)s into the build graph.\n\n#### Example\n\n```\naction_listener(\n    name = \"index_all_languages\",\n    mnemonics = [\n        \"Javac\",\n        \"CppCompile\",\n        \"Python\",\n    ],\n    extra_actions = [\":indexer\"],\n)\n\naction_listener(\n    name = \"index_java\",\n    mnemonics = [\"Javac\"],\n    extra_actions = [\":indexer\"],\n)\n\nextra_action(\n    name = \"indexer\",\n    tools = [\"//my/tools:indexer\"],\n    cmd = \"$(location //my/tools:indexer)\" +\n          \"--extra_action_file=$(EXTRA_ACTION_FILE)\",\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## extra_action\n\n``` rule-signature\nextra_action(name, data, cmd, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, features, licenses, out_templates, requires_action_output, restricted_to, tags, target_compatible_with, testonly, toolchains, tools, visibility)\n```\n\n**WARNING:** Extra actions are deprecated. Use [aspects](https://bazel.build/versions/7.0.0/rules/aspects) instead.\n\nAn `extra_action` rule doesn't produce any meaningful output when specified as a regular build target. Instead, it allows tool developers to insert additional actions into the build graph that shadow existing actions.\n\nSee [`action_listener`](extra-actions#action_listener) for details on how to enable `extra_action`s.\n\nThe `extra_action`s run as a command-line. The command-line tool gets access to a file containing a protocol buffer as $(EXTRA_ACTION_FILE) with detailed information on the original action it is shadowing. It also has access to all the input files the original action has access to. See `extra_actions_base.proto` for details on the data stored inside the protocol buffer. Each proto file contains an ExtraActionInfo message.\n\nJust like all other actions, extra actions are sandboxed, and should be designed to handle that.\n\n### Arguments\n\n[TABLE]\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/extra-actions](https://bazel.build/versions/7.0.0/reference/be/extra-actions)"
- name: extra_action
  id: extra-actions#extra_action
  summary: 'WARNING: Extra actions are deprecated'
  belongs_to: Extra Actions Rules
  description: "## extra_action\n\n``` rule-signature\nextra_action(name, data, cmd, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, features, licenses, out_templates, requires_action_output, restricted_to, tags, target_compatible_with, testonly, toolchains, tools, visibility)\n```\n\n**WARNING:** Extra actions are deprecated. Use [aspects](https://bazel.build/versions/7.0.0/rules/aspects) instead.\n\nAn `extra_action` rule doesn't produce any meaningful output when specified as a regular build target. Instead, it allows tool developers to insert additional actions into the build graph that shadow existing actions.\n\nSee [`action_listener`](extra-actions#action_listener) for details on how to enable `extra_action`s.\n\nThe `extra_action`s run as a command-line. The command-line tool gets access to a file containing a protocol buffer as $(EXTRA_ACTION_FILE) with detailed information on the original action it is shadowing. It also has access to all the input files the original action has access to. See `extra_actions_base.proto` for details on the data stored inside the protocol buffer. Each proto file contains an ExtraActionInfo message.\n\nJust like all other actions, extra actions are sandboxed, and should be designed to handle that.\n\n### Arguments\n\n[TABLE]\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/extra-actions](https://bazel.build/versions/7.0.0/reference/be/extra-actions)"
- name: fdo_prefetch_hints
  id: c-cpp#fdo_prefetch_hints
  summary: Represents an FDO prefetch hints profile that is either in the workspace or at a specified absolute path
  belongs_to: C / C++ Rules
  description: |-
    ## fdo_prefetch_hints

    ``` rule-signature
    fdo_prefetch_hints(name, compatible_with, deprecation, distribs, features, licenses, profile, restricted_to, tags, target_compatible_with, testonly, visibility)
    ```

    Represents an FDO prefetch hints profile that is either in the workspace or at a specified absolute path. Examples:

    ``` code
    fdo_prefetch_hints(
        name = "hints",
        profile = "//path/to/hints:profile.afdo",
    )

    fdo_profile(
      name = "hints_abs",
      absolute_path_profile = "/absolute/path/profile.afdo",
    )
    ```

    ### Arguments

    [TABLE]
- name: fdo_profile
  id: c-cpp#fdo_profile
  summary: Represents an FDO profile that is either in the workspace or at a specified absolute path
  belongs_to: C / C++ Rules
  description: |-
    ## fdo_profile

    ``` rule-signature
    fdo_profile(name, absolute_path_profile, compatible_with, deprecation, distribs, features, licenses, profile, proto_profile, restricted_to, tags, target_compatible_with, testonly, visibility)
    ```

    Represents an FDO profile that is either in the workspace or at a specified absolute path. Examples:

    ``` code
    fdo_profile(
        name = "fdo",
        profile = "//path/to/fdo:profile.zip",
    )

    fdo_profile(
      name = "fdo_abs",
      absolute_path_profile = "/absolute/path/profile.zip",
    )
    ```

    ### Arguments

    [TABLE]
- name: filegroup
  id: general#filegroup
  summary: Use filegroup to give a convenient name to a collection of targets
  belongs_to: General Rules
  description: |-
    ## filegroup

    ``` rule-signature
    filegroup(name, srcs, data, compatible_with, deprecation, distribs, features, licenses, output_group, restricted_to, tags, target_compatible_with, testonly, visibility)
    ```

    Use `filegroup` to give a convenient name to a collection of targets. These can then be referenced from other rules.

    Using `filegroup` is encouraged instead of referencing directories directly. The latter is unsound since the build system does not have full knowledge of all files below the directory, so it may not rebuild when these files change. When combined with [glob](functions#glob), `filegroup` can ensure that all files are explicitly known to the build system.

    #### Examples

    To create a `filegroup` consisting of two source files, do

    ``` code
    filegroup(
        name = "mygroup",
        srcs = [
            "a_file.txt",
            "some/subdirectory/another_file.txt",
        ],
    )
    ```

    Or, use a `glob` to grovel a testdata directory:

    ``` code
    filegroup(
        name = "exported_testdata",
        srcs = glob([
            "testdata/*.dat",
            "testdata/logs/**/*.log",
        ]),
    )
    ```

    To make use of these definitions, reference the `filegroup` with a label from any rule:

    ``` code
    cc_library(
        name = "my_library",
        srcs = ["foo.cc"],
        data = [
            "//my_package:exported_testdata",
            "//my_package:mygroup",
        ],
    )
    ```

    ### Arguments

    [TABLE]
- name: Functions
  id: functions
  summary: This function declares metadata that applies to every rule in the package
  description: "# Functions\n\n## Contents\n\n- [package](#package)\n- [package_group](#package_group)\n- [exports_files](#exports_files)\n- [glob](#glob)\n- [select](#select)\n- [subpackages](#subpackages)\n\n## package\n\n```\npackage(default_deprecation, default_package_metadata, default_testonly, default_visibility, features)\n```\n\nThis function declares metadata that applies to every rule in the package. It is used at most once within a package (BUILD file).\n\nThe package() function should be called right after all the load() statements at the top of the file, before any rule.\n\n### Arguments\n\n[TABLE]\n\n### Examples\n\nThe declaration below declares that the rules in this package are visible only to members of package group `//foo:target`. Individual visibility declarations on a rule, if present, override this specification.\n\n``` code\npackage(default_visibility = [\"//foo:target\"])\n```\n\n## package_group\n\n```\npackage_group(name, packages, includes)\n```\n\nThis function defines a set of [packages](https://bazel.build/versions/7.0.0/concepts/build-ref#packages) and associates a label with the set. The label can be referenced in `visibility` attributes.\n\nPackage groups are primarily used for visibility control. A publicly visible target can be referenced from every package in the source tree. A privately visible target can only be referenced within its own package (not subpackages). In between these extremes, a target may allow access to its own package plus any of the packages described by one or more package groups. For a more detailed explanation of the visibility system, see the [visibility](common-definitions#common.visibility) attribute.\n\nA given package is considered to be in the group if it either matches the `packages` attribute, or is already contained in one of the other package groups mentioned in the `includes` attribute.\n\nPackage groups are technically targets, but are not created by rules, and do not themselves have any visibility protection.\n\n### Arguments\n\n[TABLE]\n\n### Examples\n\nThe following `package_group` declaration specifies a package group called \"tropical\" that contains tropical fruits.\n\n``` code\npackage_group(\n    name = \"tropical\",\n    packages = [\n        \"//fruits/mango\",\n        \"//fruits/orange\",\n        \"//fruits/papaya/...\",\n    ],\n)\n```\n\nThe following declarations specify the package groups of a fictional application:\n\n``` code\npackage_group(\n    name = \"fooapp\",\n    includes = [\n        \":controller\",\n        \":model\",\n        \":view\",\n    ],\n)\n\npackage_group(\n    name = \"model\",\n    packages = [\"//fooapp/database\"],\n)\n\npackage_group(\n    name = \"view\",\n    packages = [\n        \"//fooapp/swingui\",\n        \"//fooapp/webui\",\n    ],\n)\n\npackage_group(\n    name = \"controller\",\n    packages = [\"//fooapp/algorithm\"],\n)\n```\n\n## exports_files\n\n```\nexports_files([label, ...], visibility, licenses)\n```\n\n`exports_files()` specifies a list of files belonging to this package that are exported to other packages.\n\nThe BUILD file for a package may only refer directly to source files belonging to another package if they are explicitly exported with an `exports_files()` statement. Read more about [visibility of files](https://bazel.build/versions/7.0.0/concepts/visibility#source-file-target-visibility).\n\nAs a legacy behaviour, also files mentioned as input to a rule are exported with the default visibility until the flag [`--incompatible_no_implicit_file_export`](https://github.com/bazelbuild/bazel/issues/10225) is flipped. However, this behavior should not be relied upon and actively migrated away from.\n\n### Arguments\n\nThe argument is a list of names of files within the current package. A visibility declaration can also be specified; in this case, the files will be visible to the targets specified. If no visibility is specified, the files will be visible to every package, even if a package default visibility was specified in the [`package`](functions#package) function. The [licenses](common-definitions#common.licenses) can also be specified.\n\n### Example\n\nThe following example exports `golden.txt`, a text file from the `test_data` package, so that other packages may use it, for example, in the `data` attribute of tests.\n\n``` code\n# from //test_data/BUILD\n\nexports_files([\"golden.txt\"])\n```\n\n## glob\n\n```\nglob(include, exclude=[], exclude_directories=1, allow_empty=True)\n```\n\nGlob is a helper function that finds all files that match certain path patterns, and returns a new, mutable, sorted list of their paths. Glob only searches files in its own package, and looks only for source files (not generated files nor other targets).\n\nA source file's Label is included in the result if the file's package-relative path matches any of the `include` patterns and none of the `exclude` patterns.\n\nThe `include` and `exclude` lists contain path patterns that are relative to the current package. Every pattern may consist of one or more path segments. As usual with Unix paths, these segments are separated by `/`. Segments may contain the `*` wildcard: this matches any substring in the path segment (even the empty substring), excluding the directory separator `/`. This wildcard can be used multiple times within one path segment. Additionally, the `**` wildcard can match zero or more complete path segments, but it must be declared as a standalone path segment.\n\nExamples:\n\n- `foo/bar.txt` matches exactly the `foo/bar.txt` file in this package\n- `foo/*.txt` matches every file in the `foo/` directory if the file ends with `.txt` (unless `foo/` is a subpackage)\n- `foo/a*.htm*` matches every file in the `foo/` directory that starts with `a`, then has an arbitrary string (could be empty), then has `.htm`, and ends with another arbitrary string; such as `foo/axx.htm` and `foo/a.html` or `foo/axxx.html`\n- `**/a.txt` matches every `a.txt` file in every subdirectory of this package\n- `**/bar/**/*.txt` matches every `.txt` file in every subdirectory of this package, if at least one directory on the resulting path is called `bar`, such as `xxx/bar/yyy/zzz/a.txt` or `bar/a.txt` (remember that `**` also matches zero segments) or `bar/zzz/a.txt`\n- `**` matches every file in every subdirectory of this package\n- `foo**/a.txt` is an invalid pattern, because `**` must stand on its own as a segment\n\nIf the `exclude_directories` argument is enabled (set to 1), files of type directory will be omitted from the results (default 1).\n\nIf the `allow_empty` argument is set to `False`, the `glob` function will error-out if the result would otherwise be the empty list.\n\nThere are several important limitations and caveats:\n\n1.  Since `glob()` runs during BUILD file evaluation, `glob()` matches files only in your source tree, never generated files. If you are building a target that requires both source and generated files, you must append an explicit list of generated files to the glob. See the [example](#glob_example) below with `:mylib` and `:gen_java_srcs`.\n\n2.  If a rule has the same name as a matched source file, the rule will \"shadow\" the file.\n\n    To understand this, remember that `glob()` returns a list of paths, so using `glob()` in other rules' attribute (e.g. `srcs = glob([\"*.cc\"])`) has the same effect as listing the matched paths explicitly. If for example `glob()` yields `[\"Foo.java\", \"bar/Baz.java\"]` but there's also a rule in the package called \"Foo.java\" (which is allowed, though Bazel warns about it), then the consumer of the `glob()` will use the \"Foo.java\" rule (its outputs) instead of the \"Foo.java\" file. See [GitHub issue \\#10395](https://github.com/bazelbuild/bazel/issues/10395#issuecomment-583714657) for more details.\n\n3.  Globs may match files in subdirectories. And subdirectory names may be wildcarded. However...\n\n4.  Labels are not allowed to cross the package boundary and glob does not match files in subpackages.\n\n    For example, the glob expression `**/*.cc` in package `x` does not include `x/y/z.cc` if `x/y` exists as a package (either as `x/y/BUILD`, or somewhere else on the package-path). This means that the result of the glob expression actually depends on the existence of BUILD files — that is, the same glob expression would include `x/y/z.cc` if there was no package called `x/y` or it was marked as deleted using the [--deleted_packages](https://bazel.build/versions/7.0.0/docs/user-manual#flag--deleted_packages) flag.\n\n5.  The restriction above applies to all glob expressions, no matter which wildcards they use.\n\n6.  A hidden file with filename starting with `.` is completely matched by both the `**` and the `*` wildcards. If you want to match a hidden file with a compound pattern, your pattern needs to begin with a `.`. For example, `*` and `.*.txt` will match `.foo.txt`, but `*.txt` will not. Hidden directories are also matched in the same manner. Hidden directories may include files that are not required as inputs, and can increase the number of unnecessarily globbed files and memory consumption. To exclude hidden directories, add them to the \"exclude\" list argument.\n\n7.  The \"\\*\\*\" wildcard has one corner case: the pattern `\"**\"` doesn't match the package's directory path. That is to say, `glob([\"**\"], exclude_directories = 0)` matches all files and directories transitively strictly under the current package's directory (but of course not going into directories of subpackages - see the previous note about that).\n\nIn general, you should **try to provide an appropriate extension (e.g. \\*.html) instead of using a bare '\\*'** for a glob pattern. The more explicit name is both self documenting and ensures that you don't accidentally match backup files, or emacs/vi/... auto-save files.\n\nWhen writing build rules you can enumerate the elements of the glob. This enables generating individual rules for every input, for example. See the [expanded glob example](#expanded_glob_example) section below.\n\n### Glob Examples\n\nCreate a Java library built from all java files in this directory, and all files generated by the `:gen_java_srcs` rule.\n\n``` code\njava_library(\n    name = \"mylib\",\n    srcs = glob([\"*.java\"]) + [\":gen_java_srcs\"],\n    deps = \"...\",\n)\n\ngenrule(\n    name = \"gen_java_srcs\",\n    outs = [\n        \"Foo.java\",\n        \"Bar.java\",\n    ],\n    ...\n)\n```\n\nInclude all txt files in directory testdata except experimental.txt. Note that files in subdirectories of testdata will not be included. If you want those files to be included, use a recursive glob (\\*\\*).\n\n``` code\nsh_test(\n    name = \"mytest\",\n    srcs = [\"mytest.sh\"],\n    data = glob(\n        [\"testdata/*.txt\"],\n        exclude = [\"testdata/experimental.txt\"],\n    ),\n)\n```\n\n### Recursive Glob Examples\n\nMake the test depend on all txt files in the testdata directory and any of its subdirectories (and their subdirectories, and so on). Subdirectories containing a BUILD file are ignored. (See limitations and caveats above.)\n\n``` code\nsh_test(\n    name = \"mytest\",\n    srcs = [\"mytest.sh\"],\n    data = glob([\"testdata/**/*.txt\"]),\n)\n```\n\nCreate a library built from all java files in this directory and all subdirectories except those whose path includes a directory named testing. **This pattern should be avoided if possible, as it can reduce build incrementality and therefore increase build times.**\n\n``` code\njava_library(\n    name = \"mylib\",\n    srcs = glob(\n        [\"**/*.java\"],\n        exclude = [\"**/testing/**\"],\n    ),\n)\n```\n\n### Expanded Glob Examples\n\nCreate an individual genrule for \\*\\_test.cc in the current directory that counts the number of lines in the file.\n\n``` code\n# Conveniently, the build language supports list comprehensions.\n[genrule(\n    name = \"count_lines_\" + f[:-3],  # strip \".cc\"\n    srcs = [f],\n    outs = [\"%s-linecount.txt\" % f[:-3]],\n    cmd = \"wc -l $< >$@\",\n ) for f in glob([\"*_test.cc\"])]\n```\n\nIf the BUILD file above is in package //foo and the package contains three matching files, a_test.cc, b_test.cc and c_test.cc then running `bazel query '//foo:all'` will list all rules that were generated:\n\n```\n$ bazel query '//foo:all' | sort\n//foo:count_lines_a_test\n//foo:count_lines_b_test\n//foo:count_lines_c_test\n```\n\n## select\n\n```\nselect(\n    {conditionA: valuesA, conditionB: valuesB, ...},\n    no_match_error = \"custom message\"\n)\n```\n\n`select()` is the helper function that makes a rule attribute [configurable](common-definitions#configurable-attributes). It can replace the right-hand side of *almost* any attribute assignment so its value depends on command-line Bazel flags. You can use this, for example, to define platform-specific dependencies or to embed different resources depending on whether a rule is built in \"developer\" vs. \"release\" mode.\n\nBasic use is as follows:\n\n``` code\nsh_binary(\n    name = \"mytarget\",\n    srcs = select({\n        \":conditionA\": [\"mytarget_a.sh\"],\n        \":conditionB\": [\"mytarget_b.sh\"],\n        \"//conditions:default\": [\"mytarget_default.sh\"]\n    })\n)\n```\n\nThis makes the `srcs` attribute of a `sh_binary` configurable by replacing its normal label list assignment with a `select` call that maps configuration conditions to matching values. Each condition is a label reference to a [`config_setting`](general#config_setting) or [`constraint_value`](https://bazel.build/versions/7.0.0/reference/be/platform#constraint_value), which \"matches\" if the target's configuration matches an expected set of values. The value of `mytarget#srcs` then becomes whichever label list matches the current invocation.\n\nNotes:\n\n- Exactly one condition is selected on any invocation.\n\n- If multiple conditions match and one is a specialization of the others, the specialization takes precedence. Condition B is considered a specialization of condition A if B has all the same flags and constraint values as A plus some additional flags or constraint values. This also means that specialization resolution is not designed to create an ordering as demonstrated in Example 2 below.\n\n- If multiple conditions match and one is not a specialization of all the others, Bazel fails with an error, unless all conditions resolve to the same value.\n\n- The special pseudo-label `//conditions:default` is considered to match if no other condition matches. If this condition is left out, some other rule must match to avoid an error.\n\n- `select` can be embedded *inside* a larger attribute assignment. So `srcs = [\"common.sh\"] + select({ \":conditionA\": [\"myrule_a.sh\"], ...})` and ` srcs = select({ \":conditionA\": [\"a.sh\"]}) + select({ \":conditionB\": [\"b.sh\"]})` are valid expressions.\n\n- `select` works with most, but not all, attributes. Incompatible attributes are marked `nonconfigurable` in their documentation.\n\n  ## subpackages\n\n  ```\n  subpackages(include, exclude=[], allow_empty=True)\n  ```\n\n  `subpackages()` is a helper function, similar to `glob()` that lists subpackages instead of files and directories. It uses the same path patterns as `glob()` and can match any subpackage that is a direct descendant of the currently loading BUILD file. See [glob](#glob) for a detailed explanation and examples of include and exclude patterns.\n\n  The resulting list of subpackages returned is in sorted order and contains paths relative to the current loading package that match the given patterns in `include` and not those in `exclude`.\n\n  ### Example\n\n  The following example lists all the direct subpackages for the package `foo/BUILD`\n\n  ``` code\n  # The following BUILD files exist:\n  # foo/BUILD\n  # foo/bar/baz/BUILD\n  # foo/sub/BUILD\n  # foo/sub/deeper/BUILD\n  #\n  # In foo/BUILD a call to\n  subs = subpackages(include = [\"**\"])\n\n  # results in subs == [\"sub\", \"bar/baz\"]\n  #\n  # 'sub/deeper' is not included because it is a subpackage of 'foo/sub' not of\n  # 'foo'\n  ```\n\n  In general it is preferred that instead of calling this function directly that users use the 'subpackages' module of [skylib](https://github.com/bazelbuild/bazel-skylib).\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/functions](https://bazel.build/versions/7.0.0/reference/be/functions)"
- name: General Rules
  id: general
  summary: The alias rule creates another name a rule can be referred to as
  description: "# General Rules\n\n## Rules\n\n- [alias](#alias)\n- [config_setting](#config_setting)\n- [filegroup](#filegroup)\n- [genquery](#genquery)\n- [genrule](#genrule)\n- [starlark_doc_extract](#starlark_doc_extract)\n- [test_suite](#test_suite)\n\n## alias\n\n``` rule-signature\nalias(name, actual, compatible_with, deprecation, features, restricted_to, tags, target_compatible_with, testonly, visibility)\n```\n\nThe `alias` rule creates another name a rule can be referred to as.\n\nAliasing only works for \"regular\" targets. In particular, `package_group` and `test_suite` cannot be aliased.\n\nAliasing may be of help in large repositories where renaming a target would require making changes to lots of files. You can also use alias rule to store a [select](functions#select) function call if you want to reuse that logic for multiple targets.\n\nThe alias rule has its own visibility declaration. In all other respects, it behaves like the rule it references (e.g. testonly *on the alias* is ignored; the testonly-ness of the referenced rule is used instead) with some minor exceptions:\n\n- Tests are not run if their alias is mentioned on the command line. To define an alias that runs the referenced test, use a [`test_suite`](#test_suite) rule with a single target in its [`tests`](#test_suite.tests) attribute.\n- When defining environment groups, the aliases to `environment` rules are not supported. They are not supported in the `--target_environment` command line option, either.\n\n#### Examples\n\n``` code\nfilegroup(\n    name = \"data\",\n    srcs = [\"data.txt\"],\n)\n\nalias(\n    name = \"other\",\n    actual = \":data\",\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## config_setting\n\n``` rule-signature\nconfig_setting(name, constraint_values, define_values, deprecation, distribs, features, flag_values, licenses, tags, testonly, values, visibility)\n```\n\nMatches an expected configuration state (expressed as build flags or platform constraints) for the purpose of triggering configurable attributes. See [select](functions#select) for how to consume this rule and [Configurable attributes](common-definitions#configurable-attributes) for an overview of the general feature.\n\n#### Examples\n\nThe following matches any build that sets `--compilation_mode=opt` or `-c opt` (either explicitly at the command line or implicitly from .bazelrc files):\n\n``` code\n  config_setting(\n      name = \"simple\",\n      values = {\"compilation_mode\": \"opt\"}\n  )\n  \n```\n\nThe following matches any build that targets ARM and applies the custom define `FOO=bar` (for instance, `bazel build --cpu=arm --define FOO=bar ...`):\n\n``` code\n  config_setting(\n      name = \"two_conditions\",\n      values = {\n          \"cpu\": \"arm\",\n          \"define\": \"FOO=bar\"\n      }\n  )\n  \n```\n\nThe following matches any build that sets [user-defined flag](https://bazel.build/versions/7.0.0/rules/config#user-defined-build-settings) `--//custom_flags:foo=1` (either explicitly at the command line or implicitly from .bazelrc files):\n\n``` code\n  config_setting(\n      name = \"my_custom_flag_is_set\",\n      flag_values = { \"//custom_flags:foo\": \"1\" },\n  )\n  \n```\n\nThe following matches any build that targets a platform with an x86_64 architecture and glibc version 2.25, assuming the existence of a `constraint_value` with label `//example:glibc_2_25`. Note that a platform still matches if it defines additional constraint values beyond these two.\n\n``` code\n  config_setting(\n      name = \"64bit_glibc_2_25\",\n      constraint_values = [\n          \"@platforms//cpu:x86_64\",\n          \"//example:glibc_2_25\",\n      ]\n  )\n  \n```\n\nIn all these cases, it's possible for the configuration to change within the build, for example if a target needs to be built for a different platform than its dep. This means that even when a `config_setting` doesn't match the top-level command-line flags, it may still match some build targets.\n\n#### Notes\n\n- See [select](functions#select) for what happens when multiple `config_setting`s match the current configuration state.\n\n- For flags that support shorthand forms (e.g. `--compilation_mode` vs. `-c`), `values` definitions must use the full form. These automatically match invocations using either form.\n\n- If a flag takes multiple values (like `--copt=-Da --copt=-Db` or a list-typed [Starlark flag](https://bazel.build/versions/7.0.0/rules/config#user-defined-build-settings)), `values = { \"flag\": \"a\" }` matches if `\"a\"` is present *anywhere* in the actual list.\n\n  `values = { \"myflag\": \"a,b\" }` works the same way: this matches `--myflag=a --myflag=b`, `--myflag=a --myflag=b --myflag=c`, `--myflag=a,b`, and `--myflag=c,b,a`. Exact semantics vary between flags. For example, `--copt` doesn't support multiple values *in the same instance*: `--copt=a,b` produces `[\"a,b\"]` while `--copt=a --copt=b` produces `[\"a\", \"b\"]` (so `values = { \"copt\": \"a,b\" }` matches the former but not the latter). But `--ios_multi_cpus` (for Apple rules) *does*: `-ios_multi_cpus=a,b` and `ios_multi_cpus=a --ios_multi_cpus=b ` both produce `[\"a\", \"b\"]`. Check flag definitions and test your conditions carefully to verify exact expectations.\n\n- If you need to define conditions that aren't modeled by built-in build flags, use [Starlark-defined flags](https://bazel.build/versions/7.0.0/rules/config#user-defined-build-settings). You can also use `--define`, but this offers weaker support and is not recommended. See [here](common-definitions#configurable-attributes) for more discussion.\n\n- Avoid repeating identical `config_setting` definitions in different packages. Instead, reference a common `config_setting` that defined in a canonical package.\n\n- [`values`](general#config_setting.values), [`define_values`](general#config_setting.define_values), and [`constraint_values`](general#config_setting.constraint_values) can be used in any combination in the same `config_setting` but at least one must be set for any given `config_setting`.\n\n### Arguments\n\n[TABLE]\n\n## filegroup\n\n``` rule-signature\nfilegroup(name, srcs, data, compatible_with, deprecation, distribs, features, licenses, output_group, restricted_to, tags, target_compatible_with, testonly, visibility)\n```\n\nUse `filegroup` to give a convenient name to a collection of targets. These can then be referenced from other rules.\n\nUsing `filegroup` is encouraged instead of referencing directories directly. The latter is unsound since the build system does not have full knowledge of all files below the directory, so it may not rebuild when these files change. When combined with [glob](functions#glob), `filegroup` can ensure that all files are explicitly known to the build system.\n\n#### Examples\n\nTo create a `filegroup` consisting of two source files, do\n\n``` code\nfilegroup(\n    name = \"mygroup\",\n    srcs = [\n        \"a_file.txt\",\n        \"some/subdirectory/another_file.txt\",\n    ],\n)\n```\n\nOr, use a `glob` to grovel a testdata directory:\n\n``` code\nfilegroup(\n    name = \"exported_testdata\",\n    srcs = glob([\n        \"testdata/*.dat\",\n        \"testdata/logs/**/*.log\",\n    ]),\n)\n```\n\nTo make use of these definitions, reference the `filegroup` with a label from any rule:\n\n``` code\ncc_library(\n    name = \"my_library\",\n    srcs = [\"foo.cc\"],\n    data = [\n        \"//my_package:exported_testdata\",\n        \"//my_package:mygroup\",\n    ],\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## genquery\n\n``` rule-signature\ngenquery(name, deps, data, compatible_with, compressed_output, deprecation, distribs, exec_compatible_with, exec_properties, expression, features, licenses, opts, restricted_to, scope, strict, tags, target_compatible_with, testonly, visibility)\n```\n\n`genquery()` runs a query specified in the [Blaze query language](https://bazel.build/versions/7.0.0/reference/query) and dumps the result into a file.\n\nIn order to keep the build consistent, the query is allowed only to visit the transitive closure of the targets specified in the `scope` attribute. Queries violating this rule will fail during execution if `strict` is unspecified or true (if `strict` is false, the out of scope targets will simply be skipped with a warning). The easiest way to make sure this does not happen is to mention the same labels in the scope as in the query expression.\n\nThe only difference between the queries allowed here and on the command line is that queries containing wildcard target specifications (e.g. `//pkg:*` or `//pkg:all`) are not allowed here. The reasons for this are two-fold: first, because `genquery` has to specify a scope to prevent targets outside the transitive closure of the query to influence its output; and, second, because `BUILD` files do not support wildcard dependencies (e.g. `deps=[\"//a/...\"]` is not allowed).\n\nThe genquery's output is ordered lexicographically in order to enforce deterministic output, with the exception of `--output=graph|minrank|maxrank` or when `somepath` is used as the top-level function.\n\nThe name of the output file is the name of the rule.\n\n#### Examples\n\nThis example writes the list of the labels in the transitive closure of the specified target to a file.\n\n``` code\ngenquery(\n    name = \"kiwi-deps\",\n    expression = \"deps(//kiwi:kiwi_lib)\",\n    scope = [\"//kiwi:kiwi_lib\"],\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## genrule\n\n``` rule-signature\ngenrule(name, srcs, outs, cmd, cmd_bash, cmd_bat, cmd_ps, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, executable, features, licenses, local, message, output_licenses, output_to_bindir, restricted_to, tags, target_compatible_with, testonly, toolchains, tools, visibility)\n```\n\nA `genrule` generates one or more files using a user-defined Bash command.\n\nGenrules are generic build rules that you can use if there's no specific rule for the task. For example, you could run a Bash one-liner. If however you need to compile C++ files, stick to the existing `cc_*` rules, because all the heavy lifting has already been done for you.\n\nNote that genrule requires a shell to interpret the command argument. It is also easy to reference arbitrary programs available on the PATH, however this makes the command non-hermetic and may not be reproducible. If you only need to run a single tool, consider using [run_binary](https://github.com/bazelbuild/bazel-skylib/blob/main/docs/run_binary_doc.md) instead.\n\nDo not use a genrule for running tests. There are special dispensations for tests and test results, including caching policies and environment variables. Tests generally need to be run after the build is complete and on the target architecture, whereas genrules are executed during the build and on the exec architecture (the two may be different). If you need a general purpose testing rule, use [`sh_test`](shell#sh_test).\n\n#### Cross-compilation Considerations\n\n*See [the user manual](https://bazel.build/versions/7.0.0/docs/user-manual#configurations) for more info about cross-compilation.*\n\nWhile genrules run during a build, their outputs are often used after the build, for deployment or testing. Consider the example of compiling C code for a microcontroller: the compiler accepts C source files and generates code that runs on a microcontroller. The generated code obviously cannot run on the CPU that was used for building it, but the C compiler (if compiled from source) itself has to.\n\nThe build system uses the exec configuration to describe the machine(s) on which the build runs and the target configuration to describe the machine(s) on which the output of the build is supposed to run. It provides options to configure each of these and it segregates the corresponding files into separate directories to avoid conflicts.\n\nFor genrules, the build system ensures that dependencies are built appropriately: `srcs` are built (if necessary) for the *target* configuration, `tools` are built for the *exec* configuration, and the output is considered to be for the *target* configuration. It also provides [\"Make\" variables](make-variables) that genrule commands can pass to the corresponding tools.\n\nIt is intentional that genrule defines no `deps` attribute: other built-in rules use language-dependent meta information passed between the rules to automatically determine how to handle dependent rules, but this level of automation is not possible for genrules. Genrules work purely at the file and runfiles level.\n\n#### Special Cases\n\n*Exec-exec compilation*: in some cases, the build system needs to run genrules such that the output can also be executed during the build. If for example a genrule builds some custom compiler which is subsequently used by another genrule, the first one has to produce its output for the exec configuration, because that's where the compiler will run in the other genrule. In this case, the build system does the right thing automatically: it builds the `srcs` and `outs` of the first genrule for the exec configuration instead of the target configuration. See [the user manual](https://bazel.build/versions/7.0.0/docs/user-manual#configurations) for more info.\n\n*JDK & C++ Tooling*: to use a tool from the JDK or the C++ compiler suite, the build system provides a set of variables to use. See [\"Make\" variable](make-variables) for details.\n\n#### Genrule Environment\n\nThe genrule command is executed by a Bash shell that is configured to fail when a command or a pipeline fails, using `set -e -o pipefail`.\n\nThe build tool executes the Bash command in a sanitized process environment that defines only core variables such as `PATH`, `PWD`, `TMPDIR`, and a few others. To ensure that builds are reproducible, most variables defined in the user's shell environment are not passed though to the genrule's command. However, Bazel (but not Blaze) passes through the value of the user's `PATH` environment variable. Any change to the value of `PATH` will cause Bazel to re-execute the command on the next build.\n\nA genrule command should not access the network except to connect processes that are children of the command itself, though this is not currently enforced.\n\nThe build system automatically deletes any existing output files, but creates any necessary parent directories before it runs a genrule. It also removes any output files in case of a failure.\n\n#### General Advice\n\n- Do ensure that tools run by a genrule are deterministic and hermetic. They should not write timestamps to their output, and they should use stable ordering for sets and maps, as well as write only relative file paths to the output, no absolute paths. Not following this rule will lead to unexpected build behavior (Bazel not rebuilding a genrule you thought it would) and degrade cache performance.\n- Do use `$(location)` extensively, for outputs, tools and sources. Due to the segregation of output files for different configurations, genrules cannot rely on hard-coded and/or absolute paths.\n- Do write a common Starlark macro in case the same or very similar genrules are used in multiple places. If the genrule is complex, consider implementing it in a script or as a Starlark rule. This improves readability as well as testability.\n- Do make sure that the exit code correctly indicates success or failure of the genrule.\n- Do not write informational messages to stdout or stderr. While useful for debugging, this can easily become noise; a successful genrule should be silent. On the other hand, a failing genrule should emit good error messages.\n- `$$` evaluates to a `$`, a literal dollar-sign, so in order to invoke a shell command containing dollar-signs such as `ls $(dirname $x)`, one must escape it thus: `ls $$(dirname $$x)`.\n- Avoid creating symlinks and directories. Bazel doesn't copy over the directory/symlink structure created by genrules and its dependency checking of directories is unsound.\n- When referencing the genrule in other rules, you can use either the genrule's label or the labels of individual output files. Sometimes the one approach is more readable, sometimes the other: referencing outputs by name in a consuming rule's `srcs` will avoid unintentionally picking up other outputs of the genrule, but can be tedious if the genrule produces many outputs.\n\n#### Examples\n\nThis example generates `foo.h`. There are no sources, because the command doesn't take any input. The \"binary\" run by the command is a perl script in the same package as the genrule.\n\n``` code\ngenrule(\n    name = \"foo\",\n    srcs = [],\n    outs = [\"foo.h\"],\n    cmd = \"./$(location create_foo.pl) > \\\"$@\\\"\",\n    tools = [\"create_foo.pl\"],\n)\n```\n\nThe following example shows how to use a [`filegroup`](general#filegroup) and the outputs of another `genrule`. Note that using `$(SRCS)` instead of explicit `$(location)` directives would also work; this example uses the latter for sake of demonstration.\n\n``` code\ngenrule(\n    name = \"concat_all_files\",\n    srcs = [\n        \"//some:files\",  # a filegroup with multiple files in it ==> $(locations)\n        \"//other:gen\",   # a genrule with a single output ==> $(location)\n    ],\n    outs = [\"concatenated.txt\"],\n    cmd = \"cat $(locations //some:files) $(location //other:gen) > $@\",\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## starlark_doc_extract\n\n``` rule-signature\nstarlark_doc_extract(name, deps, src, data, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, features, licenses, render_main_repo_name, restricted_to, symbol_names, tags, target_compatible_with, testonly, visibility)\n```\n\n`starlark_doc_extract()` extracts documentation for rules, functions (including macros), aspects, and providers defined or re-exported in a given `.bzl` or `.scl` file. The output of this rule is a `ModuleInfo` binary proto as defined in [stardoc_output.proto](https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/skydoc/rendering/proto/stardoc_output.proto) in the Bazel source tree.\n\n#### Implicit output targets\n\n- `name``.binaryproto` (the default output): A `ModuleInfo` binary proto.\n- `name``.textproto` (only built if explicitly requested): the text proto version of `name``.binaryproto`.\n\nWarning: the output format of this rule is not guaranteed to be stable. It is intended mainly for internal use by [Stardoc](https://github.com/bazelbuild/stardoc).\n\n### Arguments\n\n[TABLE]\n\n## test_suite\n\n``` rule-signature\ntest_suite(name, compatible_with, deprecation, distribs, features, licenses, restricted_to, tags, target_compatible_with, testonly, tests, visibility)\n```\n\nA `test_suite` defines a set of tests that are considered \"useful\" to humans. This allows projects to define sets of tests, such as \"tests you must run before checkin\", \"our project's stress tests\" or \"all small tests.\" The `blaze test` command respects this sort of organization: For an invocation like `blaze test //some/test:suite`, Blaze first enumerates all test targets transitively included by the `//some/test:suite` target (we call this \"test_suite expansion\"), then Blaze builds and tests those targets.\n\n#### Examples\n\nA test suite to run all of the small tests in the current package.\n\n``` code\ntest_suite(\n    name = \"small_tests\",\n    tags = [\"small\"],\n)\n```\n\nA test suite that runs a specified set of tests:\n\n``` code\ntest_suite(\n    name = \"smoke_tests\",\n    tests = [\n        \"system_unittest\",\n        \"public_api_unittest\",\n    ],\n)\n```\n\nA test suite to run all tests in the current package which are not flaky.\n\n``` code\ntest_suite(\n    name = \"non_flaky_test\",\n    tags = [\"-flaky\"],\n)\n```\n\n### Arguments\n\n[TABLE]\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/general](https://bazel.build/versions/7.0.0/reference/be/general)"
- name: genquery
  id: general#genquery
  summary: genquery() runs a query specified in the Blaze query language and dumps the result into a file
  belongs_to: General Rules
  description: |-
    ## genquery

    ``` rule-signature
    genquery(name, deps, data, compatible_with, compressed_output, deprecation, distribs, exec_compatible_with, exec_properties, expression, features, licenses, opts, restricted_to, scope, strict, tags, target_compatible_with, testonly, visibility)
    ```

    `genquery()` runs a query specified in the [Blaze query language](https://bazel.build/versions/7.0.0/reference/query) and dumps the result into a file.

    In order to keep the build consistent, the query is allowed only to visit the transitive closure of the targets specified in the `scope` attribute. Queries violating this rule will fail during execution if `strict` is unspecified or true (if `strict` is false, the out of scope targets will simply be skipped with a warning). The easiest way to make sure this does not happen is to mention the same labels in the scope as in the query expression.

    The only difference between the queries allowed here and on the command line is that queries containing wildcard target specifications (e.g. `//pkg:*` or `//pkg:all`) are not allowed here. The reasons for this are two-fold: first, because `genquery` has to specify a scope to prevent targets outside the transitive closure of the query to influence its output; and, second, because `BUILD` files do not support wildcard dependencies (e.g. `deps=["//a/..."]` is not allowed).

    The genquery's output is ordered lexicographically in order to enforce deterministic output, with the exception of `--output=graph|minrank|maxrank` or when `somepath` is used as the top-level function.

    The name of the output file is the name of the rule.

    #### Examples

    This example writes the list of the labels in the transitive closure of the specified target to a file.

    ``` code
    genquery(
        name = "kiwi-deps",
        expression = "deps(//kiwi:kiwi_lib)",
        scope = ["//kiwi:kiwi_lib"],
    )
    ```

    ### Arguments

    [TABLE]
- name: genrule
  id: general#genrule
  summary: A genrule generates one or more files using a user-defined Bash command
  belongs_to: General Rules
  description: |-
    ## genrule

    ``` rule-signature
    genrule(name, srcs, outs, cmd, cmd_bash, cmd_bat, cmd_ps, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, executable, features, licenses, local, message, output_licenses, output_to_bindir, restricted_to, tags, target_compatible_with, testonly, toolchains, tools, visibility)
    ```

    A `genrule` generates one or more files using a user-defined Bash command.

    Genrules are generic build rules that you can use if there's no specific rule for the task. For example, you could run a Bash one-liner. If however you need to compile C++ files, stick to the existing `cc_*` rules, because all the heavy lifting has already been done for you.

    Note that genrule requires a shell to interpret the command argument. It is also easy to reference arbitrary programs available on the PATH, however this makes the command non-hermetic and may not be reproducible. If you only need to run a single tool, consider using [run_binary](https://github.com/bazelbuild/bazel-skylib/blob/main/docs/run_binary_doc.md) instead.

    Do not use a genrule for running tests. There are special dispensations for tests and test results, including caching policies and environment variables. Tests generally need to be run after the build is complete and on the target architecture, whereas genrules are executed during the build and on the exec architecture (the two may be different). If you need a general purpose testing rule, use [`sh_test`](shell#sh_test).

    #### Cross-compilation Considerations

    *See [the user manual](https://bazel.build/versions/7.0.0/docs/user-manual#configurations) for more info about cross-compilation.*

    While genrules run during a build, their outputs are often used after the build, for deployment or testing. Consider the example of compiling C code for a microcontroller: the compiler accepts C source files and generates code that runs on a microcontroller. The generated code obviously cannot run on the CPU that was used for building it, but the C compiler (if compiled from source) itself has to.

    The build system uses the exec configuration to describe the machine(s) on which the build runs and the target configuration to describe the machine(s) on which the output of the build is supposed to run. It provides options to configure each of these and it segregates the corresponding files into separate directories to avoid conflicts.

    For genrules, the build system ensures that dependencies are built appropriately: `srcs` are built (if necessary) for the *target* configuration, `tools` are built for the *exec* configuration, and the output is considered to be for the *target* configuration. It also provides ["Make" variables](make-variables) that genrule commands can pass to the corresponding tools.

    It is intentional that genrule defines no `deps` attribute: other built-in rules use language-dependent meta information passed between the rules to automatically determine how to handle dependent rules, but this level of automation is not possible for genrules. Genrules work purely at the file and runfiles level.

    #### Special Cases

    *Exec-exec compilation*: in some cases, the build system needs to run genrules such that the output can also be executed during the build. If for example a genrule builds some custom compiler which is subsequently used by another genrule, the first one has to produce its output for the exec configuration, because that's where the compiler will run in the other genrule. In this case, the build system does the right thing automatically: it builds the `srcs` and `outs` of the first genrule for the exec configuration instead of the target configuration. See [the user manual](https://bazel.build/versions/7.0.0/docs/user-manual#configurations) for more info.

    *JDK & C++ Tooling*: to use a tool from the JDK or the C++ compiler suite, the build system provides a set of variables to use. See ["Make" variable](make-variables) for details.

    #### Genrule Environment

    The genrule command is executed by a Bash shell that is configured to fail when a command or a pipeline fails, using `set -e -o pipefail`.

    The build tool executes the Bash command in a sanitized process environment that defines only core variables such as `PATH`, `PWD`, `TMPDIR`, and a few others. To ensure that builds are reproducible, most variables defined in the user's shell environment are not passed though to the genrule's command. However, Bazel (but not Blaze) passes through the value of the user's `PATH` environment variable. Any change to the value of `PATH` will cause Bazel to re-execute the command on the next build.

    A genrule command should not access the network except to connect processes that are children of the command itself, though this is not currently enforced.

    The build system automatically deletes any existing output files, but creates any necessary parent directories before it runs a genrule. It also removes any output files in case of a failure.

    #### General Advice

    - Do ensure that tools run by a genrule are deterministic and hermetic. They should not write timestamps to their output, and they should use stable ordering for sets and maps, as well as write only relative file paths to the output, no absolute paths. Not following this rule will lead to unexpected build behavior (Bazel not rebuilding a genrule you thought it would) and degrade cache performance.
    - Do use `$(location)` extensively, for outputs, tools and sources. Due to the segregation of output files for different configurations, genrules cannot rely on hard-coded and/or absolute paths.
    - Do write a common Starlark macro in case the same or very similar genrules are used in multiple places. If the genrule is complex, consider implementing it in a script or as a Starlark rule. This improves readability as well as testability.
    - Do make sure that the exit code correctly indicates success or failure of the genrule.
    - Do not write informational messages to stdout or stderr. While useful for debugging, this can easily become noise; a successful genrule should be silent. On the other hand, a failing genrule should emit good error messages.
    - `$$` evaluates to a `$`, a literal dollar-sign, so in order to invoke a shell command containing dollar-signs such as `ls $(dirname $x)`, one must escape it thus: `ls $$(dirname $$x)`.
    - Avoid creating symlinks and directories. Bazel doesn't copy over the directory/symlink structure created by genrules and its dependency checking of directories is unsound.
    - When referencing the genrule in other rules, you can use either the genrule's label or the labels of individual output files. Sometimes the one approach is more readable, sometimes the other: referencing outputs by name in a consuming rule's `srcs` will avoid unintentionally picking up other outputs of the genrule, but can be tedious if the genrule produces many outputs.

    #### Examples

    This example generates `foo.h`. There are no sources, because the command doesn't take any input. The "binary" run by the command is a perl script in the same package as the genrule.

    ``` code
    genrule(
        name = "foo",
        srcs = [],
        outs = ["foo.h"],
        cmd = "./$(location create_foo.pl) > \"$@\"",
        tools = ["create_foo.pl"],
    )
    ```

    The following example shows how to use a [`filegroup`](general#filegroup) and the outputs of another `genrule`. Note that using `$(SRCS)` instead of explicit `$(location)` directives would also work; this example uses the latter for sake of demonstration.

    ``` code
    genrule(
        name = "concat_all_files",
        srcs = [
            "//some:files",  # a filegroup with multiple files in it ==> $(locations)
            "//other:gen",   # a genrule with a single output ==> $(location)
        ],
        outs = ["concatenated.txt"],
        cmd = "cat $(locations //some:files) $(location //other:gen) > $@",
    )
    ```

    ### Arguments

    [TABLE]
- name: glob
  id: functions#glob
  summary: Glob is a helper function that finds all files that match certain path patterns, and returns a new, mutable, sorted list of their paths
  belongs_to: Functions
  description: |-
    ## glob

    ```
    glob(include, exclude=[], exclude_directories=1, allow_empty=True)
    ```

    Glob is a helper function that finds all files that match certain path patterns, and returns a new, mutable, sorted list of their paths. Glob only searches files in its own package, and looks only for source files (not generated files nor other targets).

    A source file's Label is included in the result if the file's package-relative path matches any of the `include` patterns and none of the `exclude` patterns.

    The `include` and `exclude` lists contain path patterns that are relative to the current package. Every pattern may consist of one or more path segments. As usual with Unix paths, these segments are separated by `/`. Segments may contain the `*` wildcard: this matches any substring in the path segment (even the empty substring), excluding the directory separator `/`. This wildcard can be used multiple times within one path segment. Additionally, the `**` wildcard can match zero or more complete path segments, but it must be declared as a standalone path segment.

    Examples:

    - `foo/bar.txt` matches exactly the `foo/bar.txt` file in this package
    - `foo/*.txt` matches every file in the `foo/` directory if the file ends with `.txt` (unless `foo/` is a subpackage)
    - `foo/a*.htm*` matches every file in the `foo/` directory that starts with `a`, then has an arbitrary string (could be empty), then has `.htm`, and ends with another arbitrary string; such as `foo/axx.htm` and `foo/a.html` or `foo/axxx.html`
    - `**/a.txt` matches every `a.txt` file in every subdirectory of this package
    - `**/bar/**/*.txt` matches every `.txt` file in every subdirectory of this package, if at least one directory on the resulting path is called `bar`, such as `xxx/bar/yyy/zzz/a.txt` or `bar/a.txt` (remember that `**` also matches zero segments) or `bar/zzz/a.txt`
    - `**` matches every file in every subdirectory of this package
    - `foo**/a.txt` is an invalid pattern, because `**` must stand on its own as a segment

    If the `exclude_directories` argument is enabled (set to 1), files of type directory will be omitted from the results (default 1).

    If the `allow_empty` argument is set to `False`, the `glob` function will error-out if the result would otherwise be the empty list.

    There are several important limitations and caveats:

    1.  Since `glob()` runs during BUILD file evaluation, `glob()` matches files only in your source tree, never generated files. If you are building a target that requires both source and generated files, you must append an explicit list of generated files to the glob. See the [example](#glob_example) below with `:mylib` and `:gen_java_srcs`.

    2.  If a rule has the same name as a matched source file, the rule will "shadow" the file.

        To understand this, remember that `glob()` returns a list of paths, so using `glob()` in other rules' attribute (e.g. `srcs = glob(["*.cc"])`) has the same effect as listing the matched paths explicitly. If for example `glob()` yields `["Foo.java", "bar/Baz.java"]` but there's also a rule in the package called "Foo.java" (which is allowed, though Bazel warns about it), then the consumer of the `glob()` will use the "Foo.java" rule (its outputs) instead of the "Foo.java" file. See [GitHub issue \#10395](https://github.com/bazelbuild/bazel/issues/10395#issuecomment-583714657) for more details.

    3.  Globs may match files in subdirectories. And subdirectory names may be wildcarded. However...

    4.  Labels are not allowed to cross the package boundary and glob does not match files in subpackages.

        For example, the glob expression `**/*.cc` in package `x` does not include `x/y/z.cc` if `x/y` exists as a package (either as `x/y/BUILD`, or somewhere else on the package-path). This means that the result of the glob expression actually depends on the existence of BUILD files — that is, the same glob expression would include `x/y/z.cc` if there was no package called `x/y` or it was marked as deleted using the [--deleted_packages](https://bazel.build/versions/7.0.0/docs/user-manual#flag--deleted_packages) flag.

    5.  The restriction above applies to all glob expressions, no matter which wildcards they use.

    6.  A hidden file with filename starting with `.` is completely matched by both the `**` and the `*` wildcards. If you want to match a hidden file with a compound pattern, your pattern needs to begin with a `.`. For example, `*` and `.*.txt` will match `.foo.txt`, but `*.txt` will not. Hidden directories are also matched in the same manner. Hidden directories may include files that are not required as inputs, and can increase the number of unnecessarily globbed files and memory consumption. To exclude hidden directories, add them to the "exclude" list argument.

    7.  The "\*\*" wildcard has one corner case: the pattern `"**"` doesn't match the package's directory path. That is to say, `glob(["**"], exclude_directories = 0)` matches all files and directories transitively strictly under the current package's directory (but of course not going into directories of subpackages - see the previous note about that).

    In general, you should **try to provide an appropriate extension (e.g. \*.html) instead of using a bare '\*'** for a glob pattern. The more explicit name is both self documenting and ensures that you don't accidentally match backup files, or emacs/vi/... auto-save files.

    When writing build rules you can enumerate the elements of the glob. This enables generating individual rules for every input, for example. See the [expanded glob example](#expanded_glob_example) section below.

    ### Glob Examples

    Create a Java library built from all java files in this directory, and all files generated by the `:gen_java_srcs` rule.

    ``` code
    java_library(
        name = "mylib",
        srcs = glob(["*.java"]) + [":gen_java_srcs"],
        deps = "...",
    )

    genrule(
        name = "gen_java_srcs",
        outs = [
            "Foo.java",
            "Bar.java",
        ],
        ...
    )
    ```

    Include all txt files in directory testdata except experimental.txt. Note that files in subdirectories of testdata will not be included. If you want those files to be included, use a recursive glob (\*\*).

    ``` code
    sh_test(
        name = "mytest",
        srcs = ["mytest.sh"],
        data = glob(
            ["testdata/*.txt"],
            exclude = ["testdata/experimental.txt"],
        ),
    )
    ```

    ### Recursive Glob Examples

    Make the test depend on all txt files in the testdata directory and any of its subdirectories (and their subdirectories, and so on). Subdirectories containing a BUILD file are ignored. (See limitations and caveats above.)

    ``` code
    sh_test(
        name = "mytest",
        srcs = ["mytest.sh"],
        data = glob(["testdata/**/*.txt"]),
    )
    ```

    Create a library built from all java files in this directory and all subdirectories except those whose path includes a directory named testing. **This pattern should be avoided if possible, as it can reduce build incrementality and therefore increase build times.**

    ``` code
    java_library(
        name = "mylib",
        srcs = glob(
            ["**/*.java"],
            exclude = ["**/testing/**"],
        ),
    )
    ```

    ### Expanded Glob Examples

    Create an individual genrule for \*\_test.cc in the current directory that counts the number of lines in the file.

    ``` code
    # Conveniently, the build language supports list comprehensions.
    [genrule(
        name = "count_lines_" + f[:-3],  # strip ".cc"
        srcs = [f],
        outs = ["%s-linecount.txt" % f[:-3]],
        cmd = "wc -l $< >$@",
     ) for f in glob(["*_test.cc"])]
    ```

    If the BUILD file above is in package //foo and the package contains three matching files, a_test.cc, b_test.cc and c_test.cc then running `bazel query '//foo:all'` will list all rules that were generated:

    ```
    $ bazel query '//foo:all' | sort
    //foo:count_lines_a_test
    //foo:count_lines_b_test
    //foo:count_lines_c_test
    ```
- name: Implicit output targets
  id: common-definitions#implicit-outputs
  summary: Implicit outputs in C++ are deprecated
  belongs_to: Common definitions
  description: "## Implicit output targets\n\n*Implicit outputs in C++ are deprecated. Please refrain from using it in other languages where possible. We don't have a deprecation path yet but they will eventually be deprecated too.*\n\nWhen you define a build rule in a BUILD file, you are explicitly declaring a new, named rule target in a package. Many build rule functions also *implicitly* entail one or more output file targets, whose contents and meaning are rule-specific. For example, when you explicitly declare a `java_binary(name='foo', ...)` rule, you are also *implicitly* declaring an output file target `foo_deploy.jar` as a member of the same package. (This particular target is a self-contained Java archive suitable for deployment.)\n\nImplicit output targets are first-class members of the global target graph. Just like other targets, they are built on demand, either when specified in the top-level built command, or when they are necessary prerequisites for other build targets. They can be referenced as dependencies in BUILD files, and can be observed in the output of analysis tools such as `bazel query`.\n\nFor each kind of build rule, the rule's documentation contains a special section detailing the names and contents of any implicit outputs entailed by a declaration of that kind of rule.\n\nAn important but somewhat subtle distinction between the two namespaces used by the build system: [labels](https://bazel.build/versions/7.0.0/concepts/labels) identify *targets*, which may be rules or files, and file targets may be divided into either source (or input) file targets and derived (or output) file targets. These are the things you can mention in BUILD files, build from the command-line, or examine using `bazel query`; this is the *target namespace*. Each file target corresponds to one actual file on disk (the \"file system namespace\"); each rule target may correspond to zero, one or more actual files on disk. There may be files on disk that have no corresponding target; for example, `.o` object files produced during C++ compilation cannot be referenced from within BUILD files or from the command line. In this way, the build tool may hide certain implementation details of how it does its job. This is explained more fully in the [BUILD Concept Reference](https://bazel.build/versions/7.0.0/concepts/build-ref).\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/common-definitions](https://bazel.build/versions/7.0.0/reference/be/common-definitions)"
- name: j2objc_library
  id: objective-c#j2objc_library
  summary: This rule uses J2ObjC to translate Java source files to Objective-C, which then can be used used as dependencies of objc_library and objc_binary rules
  belongs_to: Objective-C Rules
  description: |-
    ## j2objc_library

    ``` rule-signature
    j2objc_library(name, deps, compatible_with, deprecation, distribs, entry_classes, features, jre_deps, licenses, restricted_to, tags, target_compatible_with, testonly, visibility)
    ```

    This rule uses [J2ObjC](https://github.com/google/j2objc) to translate Java source files to Objective-C, which then can be used used as dependencies of objc_library and objc_binary rules. Detailed information about J2ObjC itself can be found at [the J2ObjC site](http://j2objc.org)

    Custom J2ObjC transpilation flags can be specified using the build flag `--j2objc_translation_flags` in the command line.

    Please note that the translated files included in a j2objc_library target will be compiled using the default compilation configuration, the same configuration as for the sources of an objc_library rule with no compilation options specified in attributes.

    Plus, generated code is de-duplicated at target level, not source level. If you have two different Java targets that include the same Java source files, you may see a duplicate symbol error at link time. The correct way to resolve this issue is to move the shared Java source files into a separate common target that can be depended upon.

    ### Arguments

    [TABLE]
- name: Java Rules
  id: java
  summary: Builds a Java archive ("jar file"), plus a wrapper shell script with the same name as the rule
  description: "# Java Rules\n\n## Rules\n\n- [java_binary](#java_binary)\n- [java_import](#java_import)\n- [java_library](#java_library)\n- [java_lite_proto_library](#java_lite_proto_library)\n- [java_proto_library](#java_proto_library)\n- [java_test](#java_test)\n- [java_package_configuration](#java_package_configuration)\n- [java_plugin](#java_plugin)\n- [java_runtime](#java_runtime)\n- [java_toolchain](#java_toolchain)\n\n## java_binary\n\n``` rule-signature\njava_binary(name, deps, srcs, data, resources, args, classpath_resources, compatible_with, create_executable, deploy_env, deploy_manifest_lines, deprecation, distribs, env, exec_compatible_with, exec_properties, features, javacopts, jvm_flags, launcher, licenses, main_class, output_licenses, plugins, resource_jars, resource_strip_prefix, restricted_to, runtime_deps, stamp, tags, target_compatible_with, testonly, toolchains, use_launcher, use_testrunner, visibility)\n```\n\nBuilds a Java archive (\"jar file\"), plus a wrapper shell script with the same name as the rule. The wrapper shell script uses a classpath that includes, among other things, a jar file for each library on which the binary depends. When running the wrapper shell script, any nonempty `JAVABIN` environment variable will take precedence over the version specified via Bazel's `--java_runtime_version` flag.\n\nThe wrapper script accepts several unique flags. Refer to `//src/main/java/com/google/devtools/build/lib/bazel/rules/java/java_stub_template.txt` for a list of configurable flags and environment variables accepted by the wrapper.\n\n#### Implicit output targets\n\n- `name``.jar`: A Java archive, containing the class files and other resources corresponding to the binary's direct dependencies.\n\n- `name``-src.jar`: An archive containing the sources (\"source jar\").\n\n- `name``_deploy.jar`: A Java archive suitable for deployment (only built if explicitly requested).\n\n  Building the `<``name``>_deploy.jar` target for your rule creates a self-contained jar file with a manifest that allows it to be run with the `java -jar` command or with the wrapper script's `--singlejar` option. Using the wrapper script is preferred to `java -jar` because it also passes the [JVM flags](java#java_binary.jvm_flags) and the options to load native libraries.\n\n  The deploy jar contains all the classes that would be found by a classloader that searched the classpath from the binary's wrapper script from beginning to end. It also contains the native libraries needed for dependencies. These are automatically loaded into the JVM at runtime.\n\n  If your target specifies a [launcher](#java_binary.launcher) attribute, then instead of being a normal JAR file, the \\_deploy.jar will be a native binary. This will contain the launcher plus any native (C++) dependencies of your rule, all linked into a static binary. The actual jar file's bytes will be appended to that native binary, creating a single binary blob containing both the executable and the Java code. You can execute the resulting jar file directly like you would execute any native binary.\n\n- `name``_deploy-src.jar`: An archive containing the sources collected from the transitive closure of the target. These will match the classes in the `deploy.jar` except where jars have no matching source jar.\n\nA `deps` attribute is not allowed in a `java_binary` rule without [`srcs`](java#java_binary.srcs); such a rule requires a [`main_class`](java#java_binary.main_class) provided by [`runtime_deps`](java#java_binary.runtime_deps).\n\nThe following code snippet illustrates a common mistake:\n\n``` code\njava_binary(\n    name = \"DontDoThis\",\n    srcs = [\n        ...,\n        \"GeneratedJavaFile.java\",  # a generated .java file\n    ],\n    deps = [\":generating_rule\",],  # rule that generates that file\n)\n```\n\nDo this instead:\n\n``` code\njava_binary(\n    name = \"DoThisInstead\",\n    srcs = [\n        ...,\n        \":generating_rule\",\n    ],\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## java_import\n\n``` rule-signature\njava_import(name, deps, data, compatible_with, constraints, deprecation, distribs, exec_compatible_with, exec_properties, exports, features, jars, licenses, neverlink, proguard_specs, restricted_to, runtime_deps, srcjar, tags, target_compatible_with, testonly, visibility)\n```\n\nThis rule allows the use of precompiled `.jar` files as libraries for [`java_library`](java#java_library) and [`java_binary`](java#java_binary) rules.\n\n#### Examples\n\n``` code\n    java_import(\n        name = \"maven_model\",\n        jars = [\n            \"maven_model/maven-aether-provider-3.2.3.jar\",\n            \"maven_model/maven-model-3.2.3.jar\",\n            \"maven_model/maven-model-builder-3.2.3.jar\",\n        ],\n    )\n```\n\n### Arguments\n\n[TABLE]\n\n## java_library\n\n``` rule-signature\njava_library(name, deps, srcs, data, resources, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, exported_plugins, exports, features, javacopts, licenses, neverlink, plugins, proguard_specs, resource_jars, resource_strip_prefix, restricted_to, runtime_deps, tags, target_compatible_with, testonly, visibility)\n```\n\nThis rule compiles and links sources into a `.jar` file.\n\n#### Implicit output targets\n\n- `lib``name``.jar`: A Java archive containing the class files.\n- `lib``name``-src.jar`: An archive containing the sources (\"source jar\").\n\n### Arguments\n\n[TABLE]\n\n## java_lite_proto_library\n\n``` rule-signature\njava_lite_proto_library(name, deps, data, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, features, licenses, restricted_to, tags, target_compatible_with, testonly, visibility)\n```\n\n`java_lite_proto_library` generates Java code from `.proto` files.\n\n`deps` must point to [`proto_library `](protocol-buffer#proto_library) rules.\n\nExample:\n\n``` code\njava_library(\n    name = \"lib\",\n    deps = [\":foo\"],\n)\n\njava_lite_proto_library(\n    name = \"foo\",\n    deps = [\":bar\"],\n)\n\nproto_library(\n    name = \"bar\",\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## java_proto_library\n\n``` rule-signature\njava_proto_library(name, deps, data, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, features, licenses, restricted_to, tags, target_compatible_with, testonly, visibility)\n```\n\n`java_proto_library` generates Java code from `.proto` files.\n\n`deps` must point to [`proto_library `](protocol-buffer#proto_library) rules.\n\nExample:\n\n``` code\njava_library(\n    name = \"lib\",\n    deps = [\":foo_java_proto\"],\n)\n\njava_proto_library(\n    name = \"foo_java_proto\",\n    deps = [\":foo_proto\"],\n)\n\nproto_library(\n    name = \"foo_proto\",\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## java_test\n\n``` rule-signature\njava_test(name, deps, srcs, data, resources, args, classpath_resources, compatible_with, create_executable, deploy_manifest_lines, deprecation, distribs, env, env_inherit, exec_compatible_with, exec_properties, features, flaky, javacopts, jvm_flags, launcher, licenses, local, main_class, plugins, resource_jars, resource_strip_prefix, restricted_to, runtime_deps, shard_count, size, stamp, tags, target_compatible_with, test_class, testonly, timeout, toolchains, use_launcher, use_testrunner, visibility)\n```\n\nA `java_test()` rule compiles a Java test. A test is a binary wrapper around your test code. The test runner's main method is invoked instead of the main class being compiled.\n\n#### Implicit output targets\n\n- `name``.jar`: A Java archive.\n- `name``_deploy.jar`: A Java archive suitable for deployment. (Only built if explicitly requested.) See the description of the `name``_deploy.jar` output from [java_binary](#java_binary) for more details.\n\nSee the section on [java_binary()](java#java_binary_args) arguments. This rule also supports all [attributes common to all test rules (\\*\\_test)](common-definitions#common-attributes-tests).\n\n#### Examples\n\n``` code\njava_library(\n    name = \"tests\",\n    srcs = glob([\"*.java\"]),\n    deps = [\n        \"//java/com/foo/base:testResources\",\n        \"//java/com/foo/testing/util\",\n    ],\n)\n\njava_test(\n    name = \"AllTests\",\n    size = \"small\",\n    runtime_deps = [\n        \":tests\",\n        \"//util/mysql\",\n    ],\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## java_package_configuration\n\n``` rule-signature\njava_package_configuration(name, data, compatible_with, deprecation, distribs, features, javacopts, licenses, packages, restricted_to, tags, target_compatible_with, testonly, visibility)\n```\n\nConfiguration to apply to a set of packages. Configurations can be added to [`java_toolchain.javacopts`](java#java_toolchain.javacopts)s.\n\n#### Example:\n\n``` code\njava_package_configuration(\n    name = \"my_configuration\",\n    packages = [\":my_packages\"],\n    javacopts = [\"-Werror\"],\n)\n\npackage_group(\n    name = \"my_packages\",\n    packages = [\n        \"//com/my/project/...\",\n        \"-//com/my/project/testing/...\",\n    ],\n)\n\njava_toolchain(\n    ...,\n    package_configuration = [\n        \":my_configuration\",\n    ]\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## java_plugin\n\n``` rule-signature\njava_plugin(name, deps, srcs, data, resources, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, features, generates_api, javacopts, licenses, neverlink, output_licenses, plugins, processor_class, proguard_specs, resource_jars, resource_strip_prefix, restricted_to, tags, target_compatible_with, testonly, visibility)\n```\n\n`java_plugin` defines plugins for the Java compiler run by Bazel. At the moment, the only supported kind of plugins are annotation processors. A `java_library` or `java_binary` rule can run plugins by depending on them via the `plugins` attribute. A `java_library` can also automatically export plugins to libraries that directly depend on it using [`exported_plugins`](java#java_library.exported_plugins).\n\n#### Implicit output targets\n\n- `libname``.jar`: A Java archive.\n\nArguments are identical to [`java_library`](java#java_library), except for the addition of the `processor_class` argument.\n\n### Arguments\n\n[TABLE]\n\n## java_runtime\n\n``` rule-signature\njava_runtime(name, srcs, compatible_with, default_cds, deprecation, distribs, features, hermetic_srcs, java, java_home, lib_ct_sym, lib_modules, licenses, restricted_to, tags, target_compatible_with, testonly, version, visibility)\n```\n\nSpecifies the configuration for a Java runtime.\n\n#### Example:\n\n``` code\njava_runtime(\n    name = \"jdk-9-ea+153\",\n    srcs = glob([\"jdk9-ea+153/**\"]),\n    java_home = \"jdk9-ea+153\",\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## java_toolchain\n\n``` rule-signature\njava_toolchain(name, android_lint_data, android_lint_jvm_opts, android_lint_opts, android_lint_package_configuration, android_lint_runner, bootclasspath, compatible_with, deprecation, deps_checker, distribs, features, forcibly_disable_header_compilation, genclass, header_compiler, header_compiler_direct, ijar, jacocorunner, java_runtime, javabuilder, javabuilder_data, javabuilder_jvm_opts, javac_supports_multiplex_workers, javac_supports_workers, javacopts, jvm_opts, licenses, oneversion, oneversion_allowlist_for_tests, oneversion_whitelist, package_configuration, proguard_allowlister, resourcejar, restricted_to, singlejar, source_version, tags, target_compatible_with, target_version, testonly, timezone_data, tools, turbine_data, turbine_jvm_opts, visibility, xlint)\n```\n\nSpecifies the configuration for the Java compiler. Which toolchain to be used can be changed through the --java_toolchain argument. Normally you should not write those kind of rules unless you want to tune your Java compiler.\n\n#### Examples\n\nA simple example would be:\n\n``` code\njava_toolchain(\n    name = \"toolchain\",\n    source_version = \"7\",\n    target_version = \"7\",\n    bootclasspath = [\"//tools/jdk:bootclasspath\"],\n    xlint = [ \"classfile\", \"divzero\", \"empty\", \"options\", \"path\" ],\n    javacopts = [ \"-g\" ],\n    javabuilder = \":JavaBuilder_deploy.jar\",\n)\n```\n\n### Arguments\n\n[TABLE]\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/java](https://bazel.build/versions/7.0.0/reference/be/java)"
- name: java_binary
  id: java#java_binary
  summary: Builds a Java archive ("jar file"), plus a wrapper shell script with the same name as the rule
  belongs_to: Java Rules
  description: |-
    ## java_binary

    ``` rule-signature
    java_binary(name, deps, srcs, data, resources, args, classpath_resources, compatible_with, create_executable, deploy_env, deploy_manifest_lines, deprecation, distribs, env, exec_compatible_with, exec_properties, features, javacopts, jvm_flags, launcher, licenses, main_class, output_licenses, plugins, resource_jars, resource_strip_prefix, restricted_to, runtime_deps, stamp, tags, target_compatible_with, testonly, toolchains, use_launcher, use_testrunner, visibility)
    ```

    Builds a Java archive ("jar file"), plus a wrapper shell script with the same name as the rule. The wrapper shell script uses a classpath that includes, among other things, a jar file for each library on which the binary depends. When running the wrapper shell script, any nonempty `JAVABIN` environment variable will take precedence over the version specified via Bazel's `--java_runtime_version` flag.

    The wrapper script accepts several unique flags. Refer to `//src/main/java/com/google/devtools/build/lib/bazel/rules/java/java_stub_template.txt` for a list of configurable flags and environment variables accepted by the wrapper.

    #### Implicit output targets

    - `name``.jar`: A Java archive, containing the class files and other resources corresponding to the binary's direct dependencies.

    - `name``-src.jar`: An archive containing the sources ("source jar").

    - `name``_deploy.jar`: A Java archive suitable for deployment (only built if explicitly requested).

      Building the `<``name``>_deploy.jar` target for your rule creates a self-contained jar file with a manifest that allows it to be run with the `java -jar` command or with the wrapper script's `--singlejar` option. Using the wrapper script is preferred to `java -jar` because it also passes the [JVM flags](java#java_binary.jvm_flags) and the options to load native libraries.

      The deploy jar contains all the classes that would be found by a classloader that searched the classpath from the binary's wrapper script from beginning to end. It also contains the native libraries needed for dependencies. These are automatically loaded into the JVM at runtime.

      If your target specifies a [launcher](#java_binary.launcher) attribute, then instead of being a normal JAR file, the \_deploy.jar will be a native binary. This will contain the launcher plus any native (C++) dependencies of your rule, all linked into a static binary. The actual jar file's bytes will be appended to that native binary, creating a single binary blob containing both the executable and the Java code. You can execute the resulting jar file directly like you would execute any native binary.

    - `name``_deploy-src.jar`: An archive containing the sources collected from the transitive closure of the target. These will match the classes in the `deploy.jar` except where jars have no matching source jar.

    A `deps` attribute is not allowed in a `java_binary` rule without [`srcs`](java#java_binary.srcs); such a rule requires a [`main_class`](java#java_binary.main_class) provided by [`runtime_deps`](java#java_binary.runtime_deps).

    The following code snippet illustrates a common mistake:

    ``` code
    java_binary(
        name = "DontDoThis",
        srcs = [
            ...,
            "GeneratedJavaFile.java",  # a generated .java file
        ],
        deps = [":generating_rule",],  # rule that generates that file
    )
    ```

    Do this instead:

    ``` code
    java_binary(
        name = "DoThisInstead",
        srcs = [
            ...,
            ":generating_rule",
        ],
    )
    ```

    ### Arguments

    [TABLE]
- name: java_import
  id: java#java_import
  summary: This rule allows the use of precompiled .jar files as libraries for java_library and java_binary rules
  belongs_to: Java Rules
  description: |-
    ## java_import

    ``` rule-signature
    java_import(name, deps, data, compatible_with, constraints, deprecation, distribs, exec_compatible_with, exec_properties, exports, features, jars, licenses, neverlink, proguard_specs, restricted_to, runtime_deps, srcjar, tags, target_compatible_with, testonly, visibility)
    ```

    This rule allows the use of precompiled `.jar` files as libraries for [`java_library`](java#java_library) and [`java_binary`](java#java_binary) rules.

    #### Examples

    ``` code
        java_import(
            name = "maven_model",
            jars = [
                "maven_model/maven-aether-provider-3.2.3.jar",
                "maven_model/maven-model-3.2.3.jar",
                "maven_model/maven-model-builder-3.2.3.jar",
            ],
        )
    ```

    ### Arguments

    [TABLE]
- name: java_library
  id: java#java_library
  summary: This rule compiles and links sources into a .jar file
  belongs_to: Java Rules
  description: |-
    ## java_library

    ``` rule-signature
    java_library(name, deps, srcs, data, resources, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, exported_plugins, exports, features, javacopts, licenses, neverlink, plugins, proguard_specs, resource_jars, resource_strip_prefix, restricted_to, runtime_deps, tags, target_compatible_with, testonly, visibility)
    ```

    This rule compiles and links sources into a `.jar` file.

    #### Implicit output targets

    - `lib``name``.jar`: A Java archive containing the class files.
    - `lib``name``-src.jar`: An archive containing the sources ("source jar").

    ### Arguments

    [TABLE]
- name: java_lite_proto_library
  id: java#java_lite_proto_library
  summary: java_lite_proto_library generates Java code from .proto files
  belongs_to: Java Rules
  description: |-
    ## java_lite_proto_library

    ``` rule-signature
    java_lite_proto_library(name, deps, data, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, features, licenses, restricted_to, tags, target_compatible_with, testonly, visibility)
    ```

    `java_lite_proto_library` generates Java code from `.proto` files.

    `deps` must point to [`proto_library `](protocol-buffer#proto_library) rules.

    Example:

    ``` code
    java_library(
        name = "lib",
        deps = [":foo"],
    )

    java_lite_proto_library(
        name = "foo",
        deps = [":bar"],
    )

    proto_library(
        name = "bar",
    )
    ```

    ### Arguments

    [TABLE]
- name: java_package_configuration
  id: java#java_package_configuration
  summary: Configuration to apply to a set of packages
  belongs_to: Java Rules
  description: |-
    ## java_package_configuration

    ``` rule-signature
    java_package_configuration(name, data, compatible_with, deprecation, distribs, features, javacopts, licenses, packages, restricted_to, tags, target_compatible_with, testonly, visibility)
    ```

    Configuration to apply to a set of packages. Configurations can be added to [`java_toolchain.javacopts`](java#java_toolchain.javacopts)s.

    #### Example:

    ``` code
    java_package_configuration(
        name = "my_configuration",
        packages = [":my_packages"],
        javacopts = ["-Werror"],
    )

    package_group(
        name = "my_packages",
        packages = [
            "//com/my/project/...",
            "-//com/my/project/testing/...",
        ],
    )

    java_toolchain(
        ...,
        package_configuration = [
            ":my_configuration",
        ]
    )
    ```

    ### Arguments

    [TABLE]
- name: java_plugin
  id: java#java_plugin
  summary: java_plugin defines plugins for the Java compiler run by Bazel
  belongs_to: Java Rules
  description: |-
    ## java_plugin

    ``` rule-signature
    java_plugin(name, deps, srcs, data, resources, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, features, generates_api, javacopts, licenses, neverlink, output_licenses, plugins, processor_class, proguard_specs, resource_jars, resource_strip_prefix, restricted_to, tags, target_compatible_with, testonly, visibility)
    ```

    `java_plugin` defines plugins for the Java compiler run by Bazel. At the moment, the only supported kind of plugins are annotation processors. A `java_library` or `java_binary` rule can run plugins by depending on them via the `plugins` attribute. A `java_library` can also automatically export plugins to libraries that directly depend on it using [`exported_plugins`](java#java_library.exported_plugins).

    #### Implicit output targets

    - `libname``.jar`: A Java archive.

    Arguments are identical to [`java_library`](java#java_library), except for the addition of the `processor_class` argument.

    ### Arguments

    [TABLE]
- name: java_proto_library
  id: java#java_proto_library
  summary: java_proto_library generates Java code from .proto files
  belongs_to: Java Rules
  description: |-
    ## java_proto_library

    ``` rule-signature
    java_proto_library(name, deps, data, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, features, licenses, restricted_to, tags, target_compatible_with, testonly, visibility)
    ```

    `java_proto_library` generates Java code from `.proto` files.

    `deps` must point to [`proto_library `](protocol-buffer#proto_library) rules.

    Example:

    ``` code
    java_library(
        name = "lib",
        deps = [":foo_java_proto"],
    )

    java_proto_library(
        name = "foo_java_proto",
        deps = [":foo_proto"],
    )

    proto_library(
        name = "foo_proto",
    )
    ```

    ### Arguments

    [TABLE]
- name: java_runtime
  id: java#java_runtime
  summary: Specifies the configuration for a Java runtime
  belongs_to: Java Rules
  description: |-
    ## java_runtime

    ``` rule-signature
    java_runtime(name, srcs, compatible_with, default_cds, deprecation, distribs, features, hermetic_srcs, java, java_home, lib_ct_sym, lib_modules, licenses, restricted_to, tags, target_compatible_with, testonly, version, visibility)
    ```

    Specifies the configuration for a Java runtime.

    #### Example:

    ``` code
    java_runtime(
        name = "jdk-9-ea+153",
        srcs = glob(["jdk9-ea+153/**"]),
        java_home = "jdk9-ea+153",
    )
    ```

    ### Arguments

    [TABLE]
- name: java_test
  id: java#java_test
  summary: A java_test() rule compiles a Java test
  belongs_to: Java Rules
  description: |-
    ## java_test

    ``` rule-signature
    java_test(name, deps, srcs, data, resources, args, classpath_resources, compatible_with, create_executable, deploy_manifest_lines, deprecation, distribs, env, env_inherit, exec_compatible_with, exec_properties, features, flaky, javacopts, jvm_flags, launcher, licenses, local, main_class, plugins, resource_jars, resource_strip_prefix, restricted_to, runtime_deps, shard_count, size, stamp, tags, target_compatible_with, test_class, testonly, timeout, toolchains, use_launcher, use_testrunner, visibility)
    ```

    A `java_test()` rule compiles a Java test. A test is a binary wrapper around your test code. The test runner's main method is invoked instead of the main class being compiled.

    #### Implicit output targets

    - `name``.jar`: A Java archive.
    - `name``_deploy.jar`: A Java archive suitable for deployment. (Only built if explicitly requested.) See the description of the `name``_deploy.jar` output from [java_binary](#java_binary) for more details.

    See the section on [java_binary()](java#java_binary_args) arguments. This rule also supports all [attributes common to all test rules (\*\_test)](common-definitions#common-attributes-tests).

    #### Examples

    ``` code
    java_library(
        name = "tests",
        srcs = glob(["*.java"]),
        deps = [
            "//java/com/foo/base:testResources",
            "//java/com/foo/testing/util",
        ],
    )

    java_test(
        name = "AllTests",
        size = "small",
        runtime_deps = [
            ":tests",
            "//util/mysql",
        ],
    )
    ```

    ### Arguments

    [TABLE]
- name: java_toolchain
  id: java#java_toolchain
  summary: Specifies the configuration for the Java compiler
  belongs_to: Java Rules
  description: "## java_toolchain\n\n``` rule-signature\njava_toolchain(name, android_lint_data, android_lint_jvm_opts, android_lint_opts, android_lint_package_configuration, android_lint_runner, bootclasspath, compatible_with, deprecation, deps_checker, distribs, features, forcibly_disable_header_compilation, genclass, header_compiler, header_compiler_direct, ijar, jacocorunner, java_runtime, javabuilder, javabuilder_data, javabuilder_jvm_opts, javac_supports_multiplex_workers, javac_supports_workers, javacopts, jvm_opts, licenses, oneversion, oneversion_allowlist_for_tests, oneversion_whitelist, package_configuration, proguard_allowlister, resourcejar, restricted_to, singlejar, source_version, tags, target_compatible_with, target_version, testonly, timezone_data, tools, turbine_data, turbine_jvm_opts, visibility, xlint)\n```\n\nSpecifies the configuration for the Java compiler. Which toolchain to be used can be changed through the --java_toolchain argument. Normally you should not write those kind of rules unless you want to tune your Java compiler.\n\n#### Examples\n\nA simple example would be:\n\n``` code\njava_toolchain(\n    name = \"toolchain\",\n    source_version = \"7\",\n    target_version = \"7\",\n    bootclasspath = [\"//tools/jdk:bootclasspath\"],\n    xlint = [ \"classfile\", \"divzero\", \"empty\", \"options\", \"path\" ],\n    javacopts = [ \"-g\" ],\n    javabuilder = \":JavaBuilder_deploy.jar\",\n)\n```\n\n### Arguments\n\n[TABLE]\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/java](https://bazel.build/versions/7.0.0/reference/be/java)"
- name: Label Expansion
  id: common-definitions#label-expansion
  summary: 'Some string attributes of a very few rules are subject to label expansion: if those strings contain a valid label as a substring, such as //mypkg:target, and that label is a declared prerequisite of the current rule, it is expanded into the pathname of the file represented by the target //mypkg:target'
  belongs_to: Common definitions
  description: |-
    ## Label expansion

    Some string attributes of a very few rules are subject to label expansion: if those strings contain a valid label as a substring, such as `//mypkg:target`, and that label is a declared prerequisite of the current rule, it is expanded into the pathname of the file represented by the [target](https://bazel.build/versions/7.0.0/reference/glossary#target) `//mypkg:target`.

    Example attributes include `genrule.cmd` and `cc_binary.linkopts`. The details may vary significantly in each case, over such issues as: whether relative labels are expanded; how labels that expand to multiple files are treated, etc. Consult the rule attribute documentation for specifics.
- name: local_repository
  id: workspace#local_repository
  summary: Allows targets from a local directory to be bound
  belongs_to: Workspace Rules
  description: |-
    ## local_repository

    ``` rule-signature
    local_repository(name, path, repo_mapping)
    ```

    Allows targets from a local directory to be bound. This means that the current repository can use targets defined in this other directory. See the [bind section](workspace#bind_examples) for more details.

    #### Examples

    Suppose the current repository is a chat client, rooted at the directory *~/chat-app*. It would like to use an SSL library which is defined in a different repository: *~/ssl*. The SSL library has a target `//src:openssl-lib`.

    The user can add a dependency on this target by adding the following lines to *~/chat-app/WORKSPACE*:

    ``` code
    local_repository(
        name = "my-ssl",
        path = "/home/user/ssl",
    )
    ```

    Targets would specify `@my-ssl//src:openssl-lib` as a dependency to depend on this library.

    ### Arguments

    [TABLE]
- name: Make Variables
  id: make-variables
  summary: These can be used, for example, to inject specific toolchain paths into user-constructed build actions
  description: "# Make Variables\n\n- [Use](#use)\n- [Predefined variables](#predefined_variables)\n- [Predefined genrule variables](#predefined_genrule_variables)\n- [Predefined source/output path variables](#predefined_label_variables)\n- [Custom variables](#custom_variables)\n\n\"Make\" variables are a special class of expandable string variables available to attributes marked as *\"Subject to 'Make variable' substitution\"*.\n\nThese can be used, for example, to inject specific toolchain paths into user-constructed build actions.\n\nBazel provides both *predefined* variables, which are available to all targets, and *custom* variables, which are defined in dependency targets and only available to targets that depend on them.\n\nThe reason for the term \"Make\" is historical: the syntax and semantics of these variables were originally intended to match [GNU Make](https://www.gnu.org/software/make/manual/html_node/Using-Variables.html).\n\n## Use\n\nAttributes marked as *\"Subject to 'Make variable' substitution\"* can reference the \"Make\" variable `FOO` as follows:\n\n`my_attr = \"prefix $(FOO) suffix\"`\n\nIn other words, any substring matching `$(FOO)` gets expanded to `FOO`'s value. If that value is `\"bar\"`, the final string becomes:\n\n`my_attr = \"prefix bar suffix\"`\n\nIf `FOO` doesn't correspond to a variable known to the consuming target, Bazel fails with an error.\n\n\"Make\" variables whose names are non-letter symbols, such as `@`, can also be referenced using only a dollar sign, without the parentheses. For example:\n\n`my_attr = \"prefix $@ suffix\"`\n\nTo write `$` as a string literal (i.e. to prevent variable expansion), write `$$`.\n\n## Predefined variables\n\nPredefined \"Make\" variables can be referenced by any attribute marked as *\"Subject to 'Make variable' substitution\"* on any target.\n\nTo see the list of these variables and their values for a given set of build options, run\n\n`bazel info --show_make_env [build options]`\n\nand look at the top output lines with capital letters.\n\n[See an example of predefined variables](https://github.com/bazelbuild/examples/tree/main/make-variables#predefined-variables).\n\n**Toolchain option variables**\n\n- `COMPILATION_MODE`: `fastbuild`, `dbg`, or `opt`. ([more details](https://bazel.build/versions/7.0.0/docs/user-manual#flag--compilation_mode))\n\n**Path variables**\n\n- `BINDIR`: The base of the generated binary tree for the target architecture.\n\n  Note that a different tree may be used for programs that run during the build on the host architecture, to support cross-compiling.\n\n  If you want to run a tool from within a `genrule`, the recommended way to get its path is `$(`[`execpath`](#predefined_label_variables)` toolname)`, where *toolname* must be listed in the `genrule`'s [`tools`](general#genrule.tools) attribute.\n\n- `GENDIR`: The base of the generated code tree for the target architecture.\n\n**Machine architecture variables**\n\n- `TARGET_CPU`: The target architecture's CPU, e.g. `k8`.\n\n## Predefined genrule variables\n\nThe following are specially available to `genrule`'s [`cmd`](general#genrule.cmd) attribute and are generally important for making that attribute work.\n\n[See an example of predefined genrule variables](https://github.com/bazelbuild/examples/tree/main/make-variables#predefined-genrule-variables).\n\n- `OUTS`: The `genrule`'s [`outs`](general#genrule.outs) list. If you have only one output file, you can also use `$@`.\n\n- `SRCS`: The `genrule`'s [`srcs`](general#genrule.srcs) list (or more precisely: the path names of the files corresponding to labels in the [`srcs`](general#genrule.srcs) list). If you have only one source file, you can also use `$<`.\n\n- `<`: `SRCS`, if it is a single file. Else triggers a build error.\n\n- `@`: `OUTS`, if it is a single file. Else triggers a build error.\n\n- `RULEDIR`: The output directory of the target, that is, the directory corresponding to the name of the package containing the target under the `genfiles` or `bin` tree. For `//my/pkg:my_genrule` this always ends in `my/pkg`, even if `//my/pkg:my_genrule`'s outputs are in subdirectories.\n\n- `@D`: The output directory. If [outs](general#genrule.outs) has one entry, this expands to the directory containing that file. If it has multiple entries, this expands to the package's root directory in the `genfiles` tree, *even if all output files are in the same subdirectory*!\n\n  **Note:** Use `RULEDIR` over `@D` because `RULEDIR` has simpler semantics and behaves the same way regardless of the number of output files.\n\n  If the genrule needs to generate temporary intermediate files (perhaps as a result of using some other tool like a compiler), it should attempt to write them to `@D` (although `/tmp` will also be writable) and remove them before finishing.\n\n  Especially avoid writing to directories containing inputs. They may be on read-only filesystems. Even if not, doing so would trash the source tree.\n\n## Predefined source/output path variables\n\nThe predefined variables `execpath`, `execpaths`, `rootpath`, `rootpaths`, `location`, and `locations` take label parameters (e.g. `$(execpath //foo:bar)`) and substitute the file paths denoted by that label.\n\nFor source files, this is the path relative to your workspace root. For files that are outputs of rules, this is the file's *output path* (see the explanation of *output files* below).\n\n[See an example of predefined path variables](https://github.com/bazelbuild/examples/tree/main/make-variables#predefined-path-variables).\n\n- `execpath`: Denotes the path beneath the [execroot](https://bazel.build/versions/7.0.0/docs/output_directories) where Bazel runs build actions.\n\n  In the above example, Bazel runs all build actions in the directory linked by the `bazel-myproject` symlink in your workspace root. The source file `empty.source` is linked at the path `bazel-myproject/testapp/empty.source`. So its exec path (which is the subpath below the root) is `testapp/empty.source`. This is the path build actions can use to find the file.\n\n  Output files are staged similarly, but are also prefixed with the subpath `bazel-out/cpu-compilation_mode/bin` (or for the outputs of tools: `bazel-out/cpu-opt-exec-hash/bin`). In the above example, `//testapp:app` is a tool because it appears in `show_app_output`'s [`tools`](general#genrule.tools) attribute. So its output file `app` is written to `bazel-myproject/bazel-out/cpu-opt-exec-hash/bin/testapp/app`. The exec path is thus ` bazel-out/cpu-opt-exec-hash/bin/testapp/app`. This extra prefix makes it possible to build the same target for, say, two different CPUs in the same build without the results clobbering each other.\n\n  The label passed to this variable must represent exactly one file. For labels representing source files, this is automatically true. For labels representing rules, the rule must generate exactly one output. If this is false or the label is malformed, the build fails with an error.\n\n- `rootpath`: Denotes the path that a built binary can use to find a dependency at runtime relative to the subdirectory of its runfiles directory corresponding to the main repository. **Note:** This only works if [`--enable_runfiles`](https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--enable_runfiles) is enabled, which is not the case on Windows by default. Use `rlocationpath` instead for cross-platform support.\n\n  This is similar to `execpath` but strips the configuration prefixes described above. In the example from above this means both `empty.source` and `app` use pure workspace-relative paths: `testapp/empty.source` and `testapp/app`.\n\n  The `rootpath` of a file in an external repository `repo` will start with `../repo/`, followed by the repository-relative path.\n\n  This has the same \"one output only\" requirements as `execpath`.\n\n- `rlocationpath`: The path a built binary can pass to the ` Rlocation` function of a runfiles library to find a dependency at runtime, either in the runfiles directory (if available) or using the runfiles manifest.\n\n  This is similar to `rootpath` in that it does not contain configuration prefixes, but differs in that it always starts with the name of the repository. In the example from above this means that ` empty.source` and `app` result in the following paths: `myproject/testapp/empty.source` and ` myproject/testapp/app`.\n\n  The `rlocationpath` of a file in an external repository `repo` will start with `repo/`, followed by the repository-relative path.\n\n  Passing this path to a binary and resolving it to a file system path using the runfiles libraries is the preferred approach to find dependencies at runtime. Compared to `rootpath`, it has the advantage that it works on all platforms and even if the runfiles directory is not available.\n\n  This has the same \"one output only\" requirements as `execpath`.\n\n- `location`: A synonym for either `execpath` or `rootpath`, depending on the attribute being expanded. This is legacy pre-Starlark behavior and not recommended unless you really know what it does for a particular rule. See [\\#2475](https://github.com/bazelbuild/bazel/issues/2475#issuecomment-339318016) for details.\n\n`execpaths`, `rootpaths`, `rlocationpaths`, and `locations` are the plural variations of `execpath`, `rootpath`, `rlocationpaths`, and`location`, respectively. They support labels producing multiple outputs, in which case each output is listed separated by a space. Zero-output rules and malformed labels produce build errors.\n\nAll referenced labels must appear in the consuming target's `srcs`, output files, or `deps`. Otherwise the build fails. C++ targets can also reference labels in [`data`](c-cpp#cc_binary.data).\n\nLabels don't have to be in canonical form: `foo`, `:foo` and `//somepkg:foo` are all fine.\n\n## Custom variables\n\nCustom \"Make\" variables can be referenced by any attribute marked as *\"Subject to 'Make variable' substitution\"*, but only on targets that depend on other targets that *define* these variables.\n\nAs best practice all variables should be custom unless there's a really good reason to bake them into core Bazel. This saves Bazel from having to load potentially expensive dependencies to supply variables consuming tarets may not care about.\n\n**C++ toolchain variables**\n\nThe following are defined in C++ toolchain rules and available to any rule that sets `toolchains = [\"@bazel_tools//tools/cpp:current_cc_toolchain\"]` Some rules, like [`java_binary`](java#java_binary), implicitly include the C++ toolchain in their rule definition. They inherit these variables automatically.\n\nThe built-in C++ rules are much more sophisticated than \"run the compiler on it\". In order to support compilation modes as diverse as \\*SAN, ThinLTO, with/without modules, and carefully optimized binaries at the same time as fast running tests on multiple platforms, the built-in rules go to great lengths to ensure the correct inputs, outputs, and command-line flags are set on each of potentially multiple internally generated actions.\n\nThese variables are a fallback mechanism to be used by language experts in rare cases. If you are tempted to use them, please [contact the Bazel devs](https://bazel.build/versions/7.0.0/help) first.\n\n- `ABI`: The C++ ABI version.\n\n- `AR`: The \"ar\" command from crosstool.\n\n- `C_COMPILER`: The C/C++ compiler identifier, e.g. `llvm`.\n\n- `CC`: The C and C++ compiler command.\n\n  We strongly recommended always using `CC_FLAGS` in combination with `CC`. Fail to do so at your own risk.\n\n- `CC_FLAGS`: A minimal set of flags for the C/C++ compiler to be usable by genrules. In particular, this contains flags to select the correct architecture if `CC` supports multiple architectures.\n\n- `NM`: The \"nm\" command from crosstool.\n\n- `OBJCOPY`: The objcopy command from the same suite as the C/C++ compiler.\n\n- `STRIP`: The strip command from the same suite as the C/C++ compiler.\n\n**Java toolchain variables**\n\nThe following are defined in Java toolchain rules and available to any rule that sets `toolchains = [\"@bazel_tools//tools/jdk:current_java_runtime\"]` (or `\"@bazel_tools//tools/jdk:current_host_java_runtime\"` for the host toolchain equivalent).\n\nMost of the tools in the JDK should not be used directly. The built-in Java rules use much more sophisticated approaches to Java compilation and packaging than upstream tools can express, such as interface Jars, header interface Jars, and highly optimized Jar packaging and merging implementations.\n\nThese variables are a fallback mechanism to be used by language experts in rare cases. If you are tempted to use them, please [contact the Bazel devs](https://bazel.build/versions/7.0.0/help) first.\n\n- `JAVA`: The \"java\" command (a Java virtual machine). Avoid this, and use a [`java_binary`](java#java_binary) rule instead where possible. May be a relative path. If you must change directories before invoking `java`, you need to capture the working directory before changing it.\n- `JAVABASE`: The base directory containing the Java utilities. May be a relative path. It will have a \"bin\" subdirectory.\n\n**Starlark-defined variables**\n\nRule and [toolchain](https://bazel.build/versions/7.0.0/docs/toolchains) writers can define completely custom variables by returning a [TemplateVariableInfo](https://bazel.build/versions/7.0.0/rules/lib/TemplateVariableInfo) provider. Any rules depending on these through the `toolchains` attribute can then read their values:\n\n[See an example of Starlark-defined variables](https://github.com/bazelbuild/examples/tree/main/make-variables#custom-starlark-defined-variables).\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/make-variables](https://bazel.build/versions/7.0.0/reference/be/make-variables)"
- name: memprof_profile
  id: c-cpp#memprof_profile
  summary: Represents a MEMPROF profile that is either in the workspace or at a specified absolute path
  belongs_to: C / C++ Rules
  description: |-
    ## memprof_profile

    ``` rule-signature
    memprof_profile(name, absolute_path_profile, compatible_with, deprecation, distribs, features, licenses, profile, restricted_to, tags, target_compatible_with, testonly, visibility)
    ```

    Represents a MEMPROF profile that is either in the workspace or at a specified absolute path. Examples:

    ``` code
    memprof_profile(
        name = "memprof",
        profile = "//path/to/memprof:profile.afdo",
    )

    memprof_profile(
      name = "memprof_abs",
      absolute_path_profile = "/absolute/path/profile.afdo",
    )
    ```

    ### Arguments

    [TABLE]
- name: new_local_repository
  id: workspace#new_local_repository
  summary: Allows a local directory to be turned into a Bazel repository
  belongs_to: Workspace Rules
  description: "## new_local_repository\n\n``` rule-signature\nnew_local_repository(name, build_file, build_file_content, path, repo_mapping, workspace_file, workspace_file_content)\n```\n\nAllows a local directory to be turned into a Bazel repository. This means that the current repository can define and use targets from anywhere on the filesystem.\n\nThis rule creates a Bazel repository by creating a WORKSPACE file and subdirectory containing symlinks to the BUILD file and path given. The build file should create targets relative to the `path`. For directories that already contain a WORKSPACE file and a BUILD file, the [`local_repository`](#local_repository) rule can be used.\n\n#### Examples\n\nSuppose the current repository is a chat client, rooted at the directory *~/chat-app*. It would like to use an SSL library which is defined in a different directory: *~/ssl*.\n\nThe user can add a dependency by creating a BUILD file for the SSL library (~/chat-app/BUILD.my-ssl) containing:\n\n``` code\njava_library(\n    name = \"openssl\",\n    srcs = glob(['*.java'])\n    visibility = [\"//visibility:public\"],\n)\n```\n\nThen they can add the following lines to *~/chat-app/WORKSPACE*:\n\n``` code\nnew_local_repository(\n    name = \"my-ssl\",\n    path = \"/home/user/ssl\",\n    build_file = \"BUILD.my-ssl\",\n)\n```\n\nThis will create a `@my-ssl` repository that symlinks to */home/user/ssl*. Targets can depend on this library by adding `@my-ssl//:openssl` to a target's dependencies.\n\nYou can also use `new_local_repository` to include single files, not just directories. For example, suppose you had a jar file at /home/username/Downloads/piano.jar. You could add just that file to your build by adding the following to your WORKSPACE file:\n\n``` code\nnew_local_repository(\n    name = \"piano\",\n    path = \"/home/username/Downloads/piano.jar\",\n    build_file = \"BUILD.piano\",\n)\n```\n\nAnd creating the following BUILD.piano file:\n\n``` code\njava_import(\n    name = \"play-music\",\n    jars = [\"piano.jar\"],\n    visibility = [\"//visibility:public\"],\n)\n```\n\nThen targets can depend on `@piano//:play-music` to use piano.jar.\n\n### Arguments\n\n[TABLE]\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/workspace](https://bazel.build/versions/7.0.0/reference/be/workspace)"
- name: objc_import
  id: objective-c#objc_import
  summary: This rule encapsulates an already-compiled static library in the form of an .a file
  belongs_to: Objective-C Rules
  description: |-
    ## objc_import

    ``` rule-signature
    objc_import(name, deps, hdrs, alwayslink, archives, compatible_with, deprecation, distribs, features, includes, licenses, restricted_to, sdk_dylibs, sdk_frameworks, sdk_includes, tags, target_compatible_with, testonly, textual_hdrs, visibility, weak_sdk_frameworks)
    ```

    This rule encapsulates an already-compiled static library in the form of an `.a` file. It also allows exporting headers and resources using the same attributes supported by `objc_library`.

    ### Arguments

    [TABLE]
- name: objc_library
  id: objective-c#objc_library
  summary: This rule produces a static library from the given Objective-C source files
  belongs_to: Objective-C Rules
  description: |-
    ## objc_library

    ``` rule-signature
    objc_library(name, deps, srcs, data, hdrs, alwayslink, compatible_with, copts, defines, deprecation, distribs, enable_modules, exec_compatible_with, exec_properties, features, implementation_deps, includes, licenses, linkopts, module_map, module_name, non_arc_srcs, pch, restricted_to, sdk_dylibs, sdk_frameworks, sdk_includes, tags, target_compatible_with, testonly, textual_hdrs, toolchains, visibility, weak_sdk_frameworks)
    ```

    This rule produces a static library from the given Objective-C source files.

    ### Arguments

    [TABLE]
- name: Objective-C Rules
  id: objective-c
  summary: This rule uses J2ObjC to translate Java source files to Objective-C, which then can be used used as dependencies of objc_library and objc_binary rules
  description: "# Objective-C Rules\n\n## Rules\n\n- [j2objc_library](#j2objc_library)\n- [objc_import](#objc_import)\n- [objc_library](#objc_library)\n- [available_xcodes](#available_xcodes)\n- [xcode_config](#xcode_config)\n- [xcode_version](#xcode_version)\n\n## j2objc_library\n\n``` rule-signature\nj2objc_library(name, deps, compatible_with, deprecation, distribs, entry_classes, features, jre_deps, licenses, restricted_to, tags, target_compatible_with, testonly, visibility)\n```\n\nThis rule uses [J2ObjC](https://github.com/google/j2objc) to translate Java source files to Objective-C, which then can be used used as dependencies of objc_library and objc_binary rules. Detailed information about J2ObjC itself can be found at [the J2ObjC site](http://j2objc.org)\n\nCustom J2ObjC transpilation flags can be specified using the build flag `--j2objc_translation_flags` in the command line.\n\nPlease note that the translated files included in a j2objc_library target will be compiled using the default compilation configuration, the same configuration as for the sources of an objc_library rule with no compilation options specified in attributes.\n\nPlus, generated code is de-duplicated at target level, not source level. If you have two different Java targets that include the same Java source files, you may see a duplicate symbol error at link time. The correct way to resolve this issue is to move the shared Java source files into a separate common target that can be depended upon.\n\n### Arguments\n\n[TABLE]\n\n## objc_import\n\n``` rule-signature\nobjc_import(name, deps, hdrs, alwayslink, archives, compatible_with, deprecation, distribs, features, includes, licenses, restricted_to, sdk_dylibs, sdk_frameworks, sdk_includes, tags, target_compatible_with, testonly, textual_hdrs, visibility, weak_sdk_frameworks)\n```\n\nThis rule encapsulates an already-compiled static library in the form of an `.a` file. It also allows exporting headers and resources using the same attributes supported by `objc_library`.\n\n### Arguments\n\n[TABLE]\n\n## objc_library\n\n``` rule-signature\nobjc_library(name, deps, srcs, data, hdrs, alwayslink, compatible_with, copts, defines, deprecation, distribs, enable_modules, exec_compatible_with, exec_properties, features, implementation_deps, includes, licenses, linkopts, module_map, module_name, non_arc_srcs, pch, restricted_to, sdk_dylibs, sdk_frameworks, sdk_includes, tags, target_compatible_with, testonly, textual_hdrs, toolchains, visibility, weak_sdk_frameworks)\n```\n\nThis rule produces a static library from the given Objective-C source files.\n\n### Arguments\n\n[TABLE]\n\n## available_xcodes\n\n``` rule-signature\navailable_xcodes(name, default, deprecation, distribs, features, licenses, tags, testonly, versions, visibility)\n```\n\nTwo targets of this rule can be depended on by an `xcode_config` rule instance to indicate the remotely and locally available xcode versions. This allows selection of an official xcode version from the collectively available xcodes.\n\n### Arguments\n\n[TABLE]\n\n## xcode_config\n\n``` rule-signature\nxcode_config(name, default, deprecation, distribs, features, licenses, local_versions, remote_versions, tags, testonly, versions, visibility)\n```\n\nA single target of this rule can be referenced by the `--xcode_version_config` build flag to translate the `--xcode_version` flag into an accepted official xcode version. This allows selection of an official xcode version from a number of registered aliases.\n\n### Arguments\n\n[TABLE]\n\n## xcode_version\n\n``` rule-signature\nxcode_version(name, default_ios_sdk_version, default_macos_sdk_version, default_tvos_sdk_version, default_visionos_sdk_version, default_watchos_sdk_version, deprecation, distribs, features, licenses, tags, testonly, version, visibility)\n```\n\nRepresents a single official xcode version with acceptable aliases for that xcode version. See the `xcode_config` rule.\n\n### Arguments\n\n[TABLE]\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/objective-c](https://bazel.build/versions/7.0.0/reference/be/objective-c)"
- name: package
  id: functions#package
  summary: This function declares metadata that applies to every rule in the package
  belongs_to: Functions
  description: |-
    ## package

    ```
    package(default_deprecation, default_package_metadata, default_testonly, default_visibility, features)
    ```

    This function declares metadata that applies to every rule in the package. It is used at most once within a package (BUILD file).

    The package() function should be called right after all the load() statements at the top of the file, before any rule.

    ### Arguments

    [TABLE]

    ### Examples

    The declaration below declares that the rules in this package are visible only to members of package group `//foo:target`. Individual visibility declarations on a rule, if present, override this specification.

    ``` code
    package(default_visibility = ["//foo:target"])
    ```
- name: package_group
  id: functions#package_group
  summary: This function defines a set of packages and associates a label with the set
  belongs_to: Functions
  description: |-
    ## package_group

    ```
    package_group(name, packages, includes)
    ```

    This function defines a set of [packages](https://bazel.build/versions/7.0.0/concepts/build-ref#packages) and associates a label with the set. The label can be referenced in `visibility` attributes.

    Package groups are primarily used for visibility control. A publicly visible target can be referenced from every package in the source tree. A privately visible target can only be referenced within its own package (not subpackages). In between these extremes, a target may allow access to its own package plus any of the packages described by one or more package groups. For a more detailed explanation of the visibility system, see the [visibility](common-definitions#common.visibility) attribute.

    A given package is considered to be in the group if it either matches the `packages` attribute, or is already contained in one of the other package groups mentioned in the `includes` attribute.

    Package groups are technically targets, but are not created by rules, and do not themselves have any visibility protection.

    ### Arguments

    [TABLE]

    ### Examples

    The following `package_group` declaration specifies a package group called "tropical" that contains tropical fruits.

    ``` code
    package_group(
        name = "tropical",
        packages = [
            "//fruits/mango",
            "//fruits/orange",
            "//fruits/papaya/...",
        ],
    )
    ```

    The following declarations specify the package groups of a fictional application:

    ``` code
    package_group(
        name = "fooapp",
        includes = [
            ":controller",
            ":model",
            ":view",
        ],
    )

    package_group(
        name = "model",
        packages = ["//fooapp/database"],
    )

    package_group(
        name = "view",
        packages = [
            "//fooapp/swingui",
            "//fooapp/webui",
        ],
    )

    package_group(
        name = "controller",
        packages = ["//fooapp/algorithm"],
    )
    ```
- name: platform
  id: platforms-and-toolchains#platform
  summary: This rule defines a new platform -- a named collection of constraint choices (such as cpu architecture or compiler version) describing an environment in which part of the build may run
  belongs_to: Platforms and Toolchains Rules
  description: |-
    ## platform

    ``` rule-signature
    platform(name, constraint_values, deprecation, distribs, exec_properties, features, licenses, parents, remote_execution_properties, tags, testonly, visibility)
    ```

    This rule defines a new platform -- a named collection of constraint choices (such as cpu architecture or compiler version) describing an environment in which part of the build may run. For more details, see the [Platforms](https://bazel.build/versions/7.0.0//extending/platforms) page.

    #### Example

    This defines a platform that describes any environment running Linux on ARM.

    ``` code
    platform(
        name = "linux_arm",
        constraint_values = [
            "@platforms//os:linux",
            "@platforms//cpu:arm",
        ],
    )
    ```

    ### Platform Inheritance

    Platforms may use the `parents` attribute to specify another platform that they will inherit constraint values from. Although the `parents` attribute takes a list, no more than a single value is currently supported, and specifying multiple parents is an error.

    When checking for the value of a constraint setting in a platform, first the values directly set (via the `constraint_values` attribute) are checked, and then the constraint values on the parent. This continues recursively up the chain of parent platforms. In this manner, any values set directly on a platform will override the values set on the parent.

    Platforms inherit the `exec_properties` attribute from the parent platform. The dictionary entries in `exec_properties` of the parent and child platforms will be combined. If the same key appears in both the parent's and the child's `exec_properties`, the child's value will be used. If the child platform specifies an empty string as a value, the corresponding property will be unset.

    Platforms can also inherit the (deprecated) `remote_execution_properties` attribute from the parent platform. Note: new code should use `exec_properties` instead. The logic described below is maintained to be compatible with legacy behavior but will be removed in the future. The logic for setting the `remote_execution_platform` is as follows when there is a parent platform:

    1.  If `remote_execution_property` is not set on the child platform, the parent's `remote_execution_properties` will be used.
    2.  If `remote_execution_property` is set on the child platform, and contains the literal string {PARENT_REMOTE_EXECUTION_PROPERTIES}, that macro will be replaced with the contents of the parent's `remote_execution_property` attribute.
    3.  If `remote_execution_property` is set on the child platform, and does not contain the macro, the child's `remote_execution_property` will be used unchanged.

    *Since `remote_execution_properties` is deprecated and will be phased out, mixing `remote_execution_properties` and `exec_properties` in the same inheritance chain is not allowed.* Prefer to use `exec_properties` over the deprecated `remote_execution_properties`.

    #### Example: Constraint Values

    ``` code
    platform(
        name = "parent",
        constraint_values = [
            "@platforms//os:linux",
            "@platforms//cpu:arm",
        ],
    )
    platform(
        name = "child_a",
        parents = [":parent"],
        constraint_values = [
            "@platforms//cpu:x86_64",
        ],
    )
    platform(
        name = "child_b",
        parents = [":parent"],
    )
    ```

    In this example, the child platforms have the following properties:

    - `child_a` has the constraint values `@platforms//os:linux` (inherited from the parent) and `@platforms//cpu:x86_64` (set directly on the platform).
    - `child_b` inherits all constraint values from the parent, and doesn't set any of its own.

    #### Example: Execution properties

    ``` code
    platform(
        name = "parent",
        exec_properties = {
          "k1": "v1",
          "k2": "v2",
        },
    )
    platform(
        name = "child_a",
        parents = [":parent"],
    )
    platform(
        name = "child_b",
        parents = [":parent"],
        exec_properties = {
          "k1": "child"
        }
    )
    platform(
        name = "child_c",
        parents = [":parent"],
        exec_properties = {
          "k1": ""
        }
    )
    platform(
        name = "child_d",
        parents = [":parent"],
        exec_properties = {
          "k3": "v3"
        }
    )
    ```

    In this example, the child platforms have the following properties:

    - `child_a` inherits the "exec_properties" of the parent and does not set its own.
    - `child_b` inherits the parent's `exec_properties` and overrides the value of `k1`. Its `exec_properties` will be: `{ "k1": "child", "k2": "v2" }`.
    - `child_c` inherits the parent's `exec_properties` and unsets `k1`. Its `exec_properties` will be: `{ "k2": "v2" }`.
    - `child_d` inherits the parent's `exec_properties` and adds a new property. Its `exec_properties` will be: `{ "k1": "v1", "k2": "v2", "k3": "v3" }`.

    ### Arguments

    [TABLE]
- name: Platforms and Toolchains Rules
  id: platforms-and-toolchains
  summary: This set of rules exists to allow you to model specific hardware platforms you are building for and specify the specific tools you may need to compile code for those platforms
  description: "# Platforms and Toolchains Rules\n\nThis set of rules exists to allow you to model specific hardware platforms you are building for and specify the specific tools you may need to compile code for those platforms. The user should be familiar with the concepts explained [here](https://bazel.build/versions/7.0.0/extending/platforms).\n\n## Rules\n\n- [constraint_setting](#constraint_setting)\n- [constraint_value](#constraint_value)\n- [platform](#platform)\n- [toolchain](#toolchain)\n- [toolchain_type](#toolchain_type)\n\n## constraint_setting\n\n``` rule-signature\nconstraint_setting(name, default_constraint_value, deprecation, distribs, features, licenses, tags, testonly, visibility)\n```\n\nThis rule is used to introduce a new constraint type for which a platform may specify a value. For instance, you might define a `constraint_setting` named \"glibc_version\" to represent the capability for platforms to have different versions of the glibc library installed. For more details, see the [Platforms](https://bazel.build/versions/7.0.0/docs/platforms) page.\n\nEach `constraint_setting` has an extensible set of associated `constraint_value`s. Usually these are defined in the same package, but sometimes a different package will introduce new values for an existing setting. For instance, the predefined setting `@platforms//cpu:cpu` can be extended with a custom value in order to define a platform targeting an obscure cpu architecture.\n\n### Arguments\n\n[TABLE]\n\n## constraint_value\n\n``` rule-signature\nconstraint_value(name, constraint_setting, deprecation, distribs, features, licenses, tags, testonly, visibility)\n```\n\nThis rule introduces a new value for a given constraint type. For more details, see the [Platforms](https://bazel.build/versions/7.0.0/docs/platforms) page.\n\n#### Example\n\nThe following creates a new possible value for the predefined `constraint_value` representing cpu architecture.\n\n``` code\nconstraint_value(\n    name = \"mips\",\n    constraint_setting = \"@platforms//cpu:cpu\",\n)\n```\n\nPlatforms can then declare that they have the `mips` architecture as an alternative to `x86_64`, `arm`, and so on.\n\n### Arguments\n\n[TABLE]\n\n## platform\n\n``` rule-signature\nplatform(name, constraint_values, deprecation, distribs, exec_properties, features, licenses, parents, remote_execution_properties, tags, testonly, visibility)\n```\n\nThis rule defines a new platform -- a named collection of constraint choices (such as cpu architecture or compiler version) describing an environment in which part of the build may run. For more details, see the [Platforms](https://bazel.build/versions/7.0.0//extending/platforms) page.\n\n#### Example\n\nThis defines a platform that describes any environment running Linux on ARM.\n\n``` code\nplatform(\n    name = \"linux_arm\",\n    constraint_values = [\n        \"@platforms//os:linux\",\n        \"@platforms//cpu:arm\",\n    ],\n)\n```\n\n### Platform Inheritance\n\nPlatforms may use the `parents` attribute to specify another platform that they will inherit constraint values from. Although the `parents` attribute takes a list, no more than a single value is currently supported, and specifying multiple parents is an error.\n\nWhen checking for the value of a constraint setting in a platform, first the values directly set (via the `constraint_values` attribute) are checked, and then the constraint values on the parent. This continues recursively up the chain of parent platforms. In this manner, any values set directly on a platform will override the values set on the parent.\n\nPlatforms inherit the `exec_properties` attribute from the parent platform. The dictionary entries in `exec_properties` of the parent and child platforms will be combined. If the same key appears in both the parent's and the child's `exec_properties`, the child's value will be used. If the child platform specifies an empty string as a value, the corresponding property will be unset.\n\nPlatforms can also inherit the (deprecated) `remote_execution_properties` attribute from the parent platform. Note: new code should use `exec_properties` instead. The logic described below is maintained to be compatible with legacy behavior but will be removed in the future. The logic for setting the `remote_execution_platform` is as follows when there is a parent platform:\n\n1.  If `remote_execution_property` is not set on the child platform, the parent's `remote_execution_properties` will be used.\n2.  If `remote_execution_property` is set on the child platform, and contains the literal string {PARENT_REMOTE_EXECUTION_PROPERTIES}, that macro will be replaced with the contents of the parent's `remote_execution_property` attribute.\n3.  If `remote_execution_property` is set on the child platform, and does not contain the macro, the child's `remote_execution_property` will be used unchanged.\n\n*Since `remote_execution_properties` is deprecated and will be phased out, mixing `remote_execution_properties` and `exec_properties` in the same inheritance chain is not allowed.* Prefer to use `exec_properties` over the deprecated `remote_execution_properties`.\n\n#### Example: Constraint Values\n\n``` code\nplatform(\n    name = \"parent\",\n    constraint_values = [\n        \"@platforms//os:linux\",\n        \"@platforms//cpu:arm\",\n    ],\n)\nplatform(\n    name = \"child_a\",\n    parents = [\":parent\"],\n    constraint_values = [\n        \"@platforms//cpu:x86_64\",\n    ],\n)\nplatform(\n    name = \"child_b\",\n    parents = [\":parent\"],\n)\n```\n\nIn this example, the child platforms have the following properties:\n\n- `child_a` has the constraint values `@platforms//os:linux` (inherited from the parent) and `@platforms//cpu:x86_64` (set directly on the platform).\n- `child_b` inherits all constraint values from the parent, and doesn't set any of its own.\n\n#### Example: Execution properties\n\n``` code\nplatform(\n    name = \"parent\",\n    exec_properties = {\n      \"k1\": \"v1\",\n      \"k2\": \"v2\",\n    },\n)\nplatform(\n    name = \"child_a\",\n    parents = [\":parent\"],\n)\nplatform(\n    name = \"child_b\",\n    parents = [\":parent\"],\n    exec_properties = {\n      \"k1\": \"child\"\n    }\n)\nplatform(\n    name = \"child_c\",\n    parents = [\":parent\"],\n    exec_properties = {\n      \"k1\": \"\"\n    }\n)\nplatform(\n    name = \"child_d\",\n    parents = [\":parent\"],\n    exec_properties = {\n      \"k3\": \"v3\"\n    }\n)\n```\n\nIn this example, the child platforms have the following properties:\n\n- `child_a` inherits the \"exec_properties\" of the parent and does not set its own.\n- `child_b` inherits the parent's `exec_properties` and overrides the value of `k1`. Its `exec_properties` will be: `{ \"k1\": \"child\", \"k2\": \"v2\" }`.\n- `child_c` inherits the parent's `exec_properties` and unsets `k1`. Its `exec_properties` will be: `{ \"k2\": \"v2\" }`.\n- `child_d` inherits the parent's `exec_properties` and adds a new property. Its `exec_properties` will be: `{ \"k1\": \"v1\", \"k2\": \"v2\", \"k3\": \"v3\" }`.\n\n### Arguments\n\n[TABLE]\n\n## toolchain\n\n``` rule-signature\ntoolchain(name, deprecation, distribs, exec_compatible_with, features, licenses, tags, target_compatible_with, target_settings, testonly, toolchain, toolchain_type, visibility)\n```\n\nThis rule declares a specific toolchain's type and constraints so that it can be selected during toolchain resolution. See the [Toolchains](https://bazel.build/versions/7.0.0/docs/toolchains) page for more details.\n\n### Arguments\n\n[TABLE]\n\n## toolchain_type\n\n``` rule-signature\ntoolchain_type(name, compatible_with, deprecation, features, restricted_to, tags, target_compatible_with, testonly, visibility)\n```\n\nThis rule defines a new type of toolchain -- a simple target that represents a class of tools that serve the same role for different platforms.\n\nSee the [Toolchains](https://bazel.build/versions/7.0.0/docs/toolchains) page for more details.\n\n#### Example\n\nThis defines a toolchain type for a custom rule.\n\n``` code\ntoolchain_type(\n    name = \"bar_toolchain_type\",\n)\n```\n\nThis can be used in a bzl file.\n\n``` code\nbar_binary = rule(\n    implementation = _bar_binary_impl,\n    attrs = {\n        \"srcs\": attr.label_list(allow_files = True),\n        ...\n        # No `_compiler` attribute anymore.\n    },\n    toolchains = [\"//bar_tools:toolchain_type\"]\n)\n```\n\n### Arguments\n\n[TABLE]\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/platforms-and-toolchains](https://bazel.build/versions/7.0.0/reference/be/platforms-and-toolchains)"
- name: Predefined genrule variables
  id: make-variables#predefined_genrule_variables
  summary: The following are specially available to genrule's cmd attribute and are generally important for making that attribute work
  belongs_to: Make Variables
  description: |-
    ## Predefined genrule variables

    The following are specially available to `genrule`'s [`cmd`](general#genrule.cmd) attribute and are generally important for making that attribute work.

    [See an example of predefined genrule variables](https://github.com/bazelbuild/examples/tree/main/make-variables#predefined-genrule-variables).

    - `OUTS`: The `genrule`'s [`outs`](general#genrule.outs) list. If you have only one output file, you can also use `$@`.

    - `SRCS`: The `genrule`'s [`srcs`](general#genrule.srcs) list (or more precisely: the path names of the files corresponding to labels in the [`srcs`](general#genrule.srcs) list). If you have only one source file, you can also use `$<`.

    - `<`: `SRCS`, if it is a single file. Else triggers a build error.

    - `@`: `OUTS`, if it is a single file. Else triggers a build error.

    - `RULEDIR`: The output directory of the target, that is, the directory corresponding to the name of the package containing the target under the `genfiles` or `bin` tree. For `//my/pkg:my_genrule` this always ends in `my/pkg`, even if `//my/pkg:my_genrule`'s outputs are in subdirectories.

    - `@D`: The output directory. If [outs](general#genrule.outs) has one entry, this expands to the directory containing that file. If it has multiple entries, this expands to the package's root directory in the `genfiles` tree, *even if all output files are in the same subdirectory*!

      **Note:** Use `RULEDIR` over `@D` because `RULEDIR` has simpler semantics and behaves the same way regardless of the number of output files.

      If the genrule needs to generate temporary intermediate files (perhaps as a result of using some other tool like a compiler), it should attempt to write them to `@D` (although `/tmp` will also be writable) and remove them before finishing.

      Especially avoid writing to directories containing inputs. They may be on read-only filesystems. Even if not, doing so would trash the source tree.

    &nbsp;
- name: Predefined source/output path variables
  id: make-variables#predefined_label_variables
  summary: The predefined variables execpath, execpaths, rootpath, rootpaths, location, and locations take label parameters (e.g
  belongs_to: Make Variables
  description: |-
    ## Predefined source/output path variables

    The predefined variables `execpath`, `execpaths`, `rootpath`, `rootpaths`, `location`, and `locations` take label parameters (e.g. `$(execpath //foo:bar)`) and substitute the file paths denoted by that label.

    For source files, this is the path relative to your workspace root. For files that are outputs of rules, this is the file's *output path* (see the explanation of *output files* below).

    [See an example of predefined path variables](https://github.com/bazelbuild/examples/tree/main/make-variables#predefined-path-variables).

    - `execpath`: Denotes the path beneath the [execroot](https://bazel.build/versions/7.0.0/docs/output_directories) where Bazel runs build actions.

      In the above example, Bazel runs all build actions in the directory linked by the `bazel-myproject` symlink in your workspace root. The source file `empty.source` is linked at the path `bazel-myproject/testapp/empty.source`. So its exec path (which is the subpath below the root) is `testapp/empty.source`. This is the path build actions can use to find the file.

      Output files are staged similarly, but are also prefixed with the subpath `bazel-out/cpu-compilation_mode/bin` (or for the outputs of tools: `bazel-out/cpu-opt-exec-hash/bin`). In the above example, `//testapp:app` is a tool because it appears in `show_app_output`'s [`tools`](general#genrule.tools) attribute. So its output file `app` is written to `bazel-myproject/bazel-out/cpu-opt-exec-hash/bin/testapp/app`. The exec path is thus ` bazel-out/cpu-opt-exec-hash/bin/testapp/app`. This extra prefix makes it possible to build the same target for, say, two different CPUs in the same build without the results clobbering each other.

      The label passed to this variable must represent exactly one file. For labels representing source files, this is automatically true. For labels representing rules, the rule must generate exactly one output. If this is false or the label is malformed, the build fails with an error.

    - `rootpath`: Denotes the path that a built binary can use to find a dependency at runtime relative to the subdirectory of its runfiles directory corresponding to the main repository. **Note:** This only works if [`--enable_runfiles`](https://bazel.build/versions/7.0.0/reference/command-line-reference#flag--enable_runfiles) is enabled, which is not the case on Windows by default. Use `rlocationpath` instead for cross-platform support.

      This is similar to `execpath` but strips the configuration prefixes described above. In the example from above this means both `empty.source` and `app` use pure workspace-relative paths: `testapp/empty.source` and `testapp/app`.

      The `rootpath` of a file in an external repository `repo` will start with `../repo/`, followed by the repository-relative path.

      This has the same "one output only" requirements as `execpath`.

    - `rlocationpath`: The path a built binary can pass to the ` Rlocation` function of a runfiles library to find a dependency at runtime, either in the runfiles directory (if available) or using the runfiles manifest.

      This is similar to `rootpath` in that it does not contain configuration prefixes, but differs in that it always starts with the name of the repository. In the example from above this means that ` empty.source` and `app` result in the following paths: `myproject/testapp/empty.source` and ` myproject/testapp/app`.

      The `rlocationpath` of a file in an external repository `repo` will start with `repo/`, followed by the repository-relative path.

      Passing this path to a binary and resolving it to a file system path using the runfiles libraries is the preferred approach to find dependencies at runtime. Compared to `rootpath`, it has the advantage that it works on all platforms and even if the runfiles directory is not available.

      This has the same "one output only" requirements as `execpath`.

    - `location`: A synonym for either `execpath` or `rootpath`, depending on the attribute being expanded. This is legacy pre-Starlark behavior and not recommended unless you really know what it does for a particular rule. See [\#2475](https://github.com/bazelbuild/bazel/issues/2475#issuecomment-339318016) for details.

    `execpaths`, `rootpaths`, `rlocationpaths`, and `locations` are the plural variations of `execpath`, `rootpath`, `rlocationpaths`, and`location`, respectively. They support labels producing multiple outputs, in which case each output is listed separated by a space. Zero-output rules and malformed labels produce build errors.

    All referenced labels must appear in the consuming target's `srcs`, output files, or `deps`. Otherwise the build fails. C++ targets can also reference labels in [`data`](c-cpp#cc_binary.data).

    Labels don't have to be in canonical form: `foo`, `:foo` and `//somepkg:foo` are all fine.
- name: Predefined variables
  id: make-variables#predefined_variables
  summary: Predefined "Make" variables can be referenced by any attribute marked as "Subject to 'Make variable' substitution" on any target
  belongs_to: Make Variables
  description: |-
    ## Predefined variables

    Predefined "Make" variables can be referenced by any attribute marked as *"Subject to 'Make variable' substitution"* on any target.

    To see the list of these variables and their values for a given set of build options, run

    `bazel info --show_make_env [build options]`

    and look at the top output lines with capital letters.

    [See an example of predefined variables](https://github.com/bazelbuild/examples/tree/main/make-variables#predefined-variables).

    **Toolchain option variables**

    - `COMPILATION_MODE`: `fastbuild`, `dbg`, or `opt`. ([more details](https://bazel.build/versions/7.0.0/docs/user-manual#flag--compilation_mode))

    **Path variables**

    - `BINDIR`: The base of the generated binary tree for the target architecture.

      Note that a different tree may be used for programs that run during the build on the host architecture, to support cross-compiling.

      If you want to run a tool from within a `genrule`, the recommended way to get its path is `$(`[`execpath`](#predefined_label_variables)` toolname)`, where *toolname* must be listed in the `genrule`'s [`tools`](general#genrule.tools) attribute.

    - `GENDIR`: The base of the generated code tree for the target architecture.

    **Machine architecture variables**

    - `TARGET_CPU`: The target architecture's CPU, e.g. `k8`.
- name: propeller_optimize
  id: c-cpp#propeller_optimize
  summary: Represents a Propeller optimization profile in the workspace
  belongs_to: C / C++ Rules
  description: |-
    ## propeller_optimize

    ``` rule-signature
    propeller_optimize(name, compatible_with, deprecation, distribs, features, ld_profile, licenses, restricted_to, tags, target_compatible_with, testonly, visibility)
    ```

    Represents a Propeller optimization profile in the workspace. Example:

    ``` code
    propeller_optimize(
        name = "layout",
        cc_profile = "//path:cc_profile.txt",
        ld_profile = "//path:ld_profile.txt"
    )

    propeller_optimize(
        name = "layout_absolute",
        absolute_cc_profile = "/absolute/cc_profile.txt",
        absolute_ld_profile = "/absolute/ld_profile.txt"
    )
    ```

    ### Arguments

    [TABLE]
- name: proto_lang_toolchain
  id: protocol-buffer#proto_lang_toolchain
  summary: If using Bazel, please load the rule from https://github.com/bazelbuild/rules_proto
  belongs_to: Protocol Buffer Rules
  description: |-
    ## proto_lang_toolchain

    ``` rule-signature
    proto_lang_toolchain(name, blacklisted_protos, command_line, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, features, licenses, mnemonic, output_files, plugin, plugin_format_flag, progress_message, proto_compiler, restricted_to, runtime, tags, target_compatible_with, testonly, visibility)
    ```

    If using Bazel, please load the rule from <https://github.com/bazelbuild/rules_proto>.

    Specifies how a LANG_proto_library rule (e.g., `java_proto_library`) should invoke the proto-compiler. Some LANG_proto_library rules allow specifying which toolchain to use using command-line flags; consult their documentation.

    Normally you should not write those kind of rules unless you want to tune your Java compiler.

    There's no compiler. The proto-compiler is taken from the proto_library rule we attach to. It is passed as a command-line flag to Blaze. Several features require a proto-compiler to be invoked on the proto_library rule itself. It's beneficial to enforce the compiler that LANG_proto_library uses is the same as the one `proto_library` does.

    #### Examples

    A simple example would be:

    ``` code
    proto_lang_toolchain(
        name = "javalite_toolchain",
        command_line = "--javalite_out=shared,immutable:$(OUT)",
        plugin = ":javalite_plugin",
        runtime = ":protobuf_lite",
    )
    ```

    ### Arguments

    [TABLE]
- name: proto_library
  id: protocol-buffer#proto_library
  summary: Deprecated
  belongs_to: Protocol Buffer Rules
  description: "## proto_library\n\n``` rule-signature\nproto_library(name, deps, srcs, data, allow_exports, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, exports, features, import_prefix, licenses, restricted_to, strip_import_prefix, tags, target_compatible_with, testonly, visibility)\n```\n\nDeprecated. Please use <https://github.com/bazelbuild/rules_proto> instead.\n\nUse `proto_library` to define libraries of protocol buffers which may be used from multiple languages. A `proto_library` may be listed in the `deps` clause of supported rules, such as `java_proto_library`.\n\nWhen compiled on the command-line, a `proto_library` creates a file named `foo-descriptor-set.proto.bin`, which is the descriptor set for the messages the rule srcs. The file is a serialized `FileDescriptorSet`, which is described in <https://developers.google.com/protocol-buffers/docs/techniques#self-description>.\n\nIt only contains information about the `.proto` files directly mentioned by a `proto_library` rule; the collection of transitive descriptor sets is available through the `[ProtoInfo].transitive_descriptor_sets` Starlark provider. See documentation in `ProtoInfo.java`.\n\nRecommended code organization:\n\n- One `proto_library` rule per `.proto` file.\n- A file named `foo.proto` will be in a rule named `foo_proto`, which is located in the same package.\n- A `[language]_proto_library` that wraps a `proto_library` named `foo_proto` should be called `foo_[language]_proto`, and be located in the same package.\n\n### Arguments\n\n[TABLE]\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/protocol-buffer](https://bazel.build/versions/7.0.0/reference/be/protocol-buffer)"
- name: Protocol Buffer Rules
  id: protocol-buffer
  summary: If using Bazel, please load the rule from https://github.com/bazelbuild/rules_proto
  description: "# Protocol Buffer Rules\n\n## Rules\n\n- [proto_lang_toolchain](#proto_lang_toolchain)\n- [proto_library](#proto_library)\n\n## proto_lang_toolchain\n\n``` rule-signature\nproto_lang_toolchain(name, blacklisted_protos, command_line, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, features, licenses, mnemonic, output_files, plugin, plugin_format_flag, progress_message, proto_compiler, restricted_to, runtime, tags, target_compatible_with, testonly, visibility)\n```\n\nIf using Bazel, please load the rule from <https://github.com/bazelbuild/rules_proto>.\n\nSpecifies how a LANG_proto_library rule (e.g., `java_proto_library`) should invoke the proto-compiler. Some LANG_proto_library rules allow specifying which toolchain to use using command-line flags; consult their documentation.\n\nNormally you should not write those kind of rules unless you want to tune your Java compiler.\n\nThere's no compiler. The proto-compiler is taken from the proto_library rule we attach to. It is passed as a command-line flag to Blaze. Several features require a proto-compiler to be invoked on the proto_library rule itself. It's beneficial to enforce the compiler that LANG_proto_library uses is the same as the one `proto_library` does.\n\n#### Examples\n\nA simple example would be:\n\n``` code\nproto_lang_toolchain(\n    name = \"javalite_toolchain\",\n    command_line = \"--javalite_out=shared,immutable:$(OUT)\",\n    plugin = \":javalite_plugin\",\n    runtime = \":protobuf_lite\",\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## proto_library\n\n``` rule-signature\nproto_library(name, deps, srcs, data, allow_exports, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, exports, features, import_prefix, licenses, restricted_to, strip_import_prefix, tags, target_compatible_with, testonly, visibility)\n```\n\nDeprecated. Please use <https://github.com/bazelbuild/rules_proto> instead.\n\nUse `proto_library` to define libraries of protocol buffers which may be used from multiple languages. A `proto_library` may be listed in the `deps` clause of supported rules, such as `java_proto_library`.\n\nWhen compiled on the command-line, a `proto_library` creates a file named `foo-descriptor-set.proto.bin`, which is the descriptor set for the messages the rule srcs. The file is a serialized `FileDescriptorSet`, which is described in <https://developers.google.com/protocol-buffers/docs/techniques#self-description>.\n\nIt only contains information about the `.proto` files directly mentioned by a `proto_library` rule; the collection of transitive descriptor sets is available through the `[ProtoInfo].transitive_descriptor_sets` Starlark provider. See documentation in `ProtoInfo.java`.\n\nRecommended code organization:\n\n- One `proto_library` rule per `.proto` file.\n- A file named `foo.proto` will be in a rule named `foo_proto`, which is located in the same package.\n- A `[language]_proto_library` that wraps a `proto_library` named `foo_proto` should be called `foo_[language]_proto`, and be located in the same package.\n\n### Arguments\n\n[TABLE]\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/protocol-buffer](https://bazel.build/versions/7.0.0/reference/be/protocol-buffer)"
- name: py_binary
  id: python#py_binary
  summary: A py_binary is an executable Python program consisting of a collection of .py source files (possibly belonging to other py_library rules), a *.runfiles directory tree containing all the code and data needed by the program at run-time, and a stub script that starts up the program with the correct initial environment and data
  belongs_to: Python Rules
  description: |-
    ## py_binary

    ``` rule-signature
    py_binary(name, deps, srcs, data, args, compatible_with, deprecation, distribs, env, exec_compatible_with, exec_properties, features, imports, legacy_create_init, licenses, main, output_licenses, python_version, restricted_to, srcs_version, stamp, tags, target_compatible_with, testonly, toolchains, visibility)
    ```

    A `py_binary` is an executable Python program consisting of a collection of `.py` source files (possibly belonging to other `py_library` rules), a `*.runfiles` directory tree containing all the code and data needed by the program at run-time, and a stub script that starts up the program with the correct initial environment and data.

    #### Examples

    ``` code
    py_binary(
        name = "foo",
        srcs = ["foo.py"],
        data = [":transform"],  # a cc_binary which we invoke at run time
        deps = [
            ":foolib",  # a py_library
        ],
    )
    ```

    If you want to run a `py_binary` from within another binary or test (for example, running a python binary to set up some mock resource from within a java_test) then the correct approach is to make the other binary or test depend on the `py_binary` in its data section. The other binary can then locate the `py_binary` relative to the source directory.

    ``` code
    py_binary(
        name = "test_main",
        srcs = ["test_main.py"],
        deps = [":testing"],
    )

    java_library(
        name = "testing",
        srcs = glob(["*.java"]),
        data = [":test_main"]
    )
    ```

    ### Arguments

    [TABLE]
- name: py_library
  id: python#py_library
  summary: null
  belongs_to: Python Rules
  description: |-
    ## py_library

    ``` rule-signature
    py_library(name, deps, srcs, data, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, features, imports, licenses, restricted_to, srcs_version, tags, target_compatible_with, testonly, visibility)
    ```

    ### Arguments

    [TABLE]
- name: py_runtime
  id: python#py_runtime
  summary: Represents a Python runtime used to execute Python code
  belongs_to: Python Rules
  description: "## py_runtime\n\n``` rule-signature\npy_runtime(name, bootstrap_template, compatible_with, coverage_tool, deprecation, distribs, features, files, interpreter, interpreter_path, licenses, python_version, restricted_to, stub_shebang, tags, target_compatible_with, testonly, visibility)\n```\n\nRepresents a Python runtime used to execute Python code.\n\nA `py_runtime` target can represent either a *platform runtime* or an *in-build runtime*. A platform runtime accesses a system-installed interpreter at a known path, whereas an in-build runtime points to an executable target that acts as the interpreter. In both cases, an \"interpreter\" means any executable binary or wrapper script that is capable of running a Python script passed on the command line, following the same conventions as the standard CPython interpreter.\n\nA platform runtime is by its nature non-hermetic. It imposes a requirement on the target platform to have an interpreter located at a specific path. An in-build runtime may or may not be hermetic, depending on whether it points to a checked-in interpreter or a wrapper script that accesses the system interpreter.\n\n#### Example:\n\n``` code\npy_runtime(\n    name = \"python-2.7.12\",\n    files = glob([\"python-2.7.12/**\"]),\n    interpreter = \"python-2.7.12/bin/python\",\n)\n\npy_runtime(\n    name = \"python-3.6.0\",\n    interpreter_path = \"/opt/pyenv/versions/3.6.0/bin/python\",\n)\n```\n\n### Arguments\n\n[TABLE]\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/python](https://bazel.build/versions/7.0.0/reference/be/python)"
- name: py_test
  id: python#py_test
  summary: A py_test() rule compiles a test
  belongs_to: Python Rules
  description: |-
    ## py_test

    ``` rule-signature
    py_test(name, deps, srcs, data, args, compatible_with, deprecation, distribs, env, env_inherit, exec_compatible_with, exec_properties, features, flaky, imports, legacy_create_init, licenses, local, main, python_version, restricted_to, shard_count, size, srcs_version, stamp, tags, target_compatible_with, testonly, timeout, toolchains, visibility)
    ```

    A `py_test()` rule compiles a test. A test is a binary wrapper around some test code.

    #### Examples

    ``` code
    py_test(
        name = "runtest_test",
        srcs = ["runtest_test.py"],
        deps = [
            "//path/to/a/py/library",
        ],
    )
    ```

    It's also possible to specify a main module:

    ``` code
    py_test(
        name = "runtest_test",
        srcs = [
            "runtest_main.py",
            "runtest_lib.py",
        ],
        main = "runtest_main.py",
    )
    ```

    ### Arguments

    [TABLE]
- name: Python Rules
  id: python
  summary: A py_binary is an executable Python program consisting of a collection of .py source files (possibly belonging to other py_library rules), a *.runfiles directory tree containing all the code and data needed by the program at run-time, and a stub script that starts up the program with the correct initial environment and data
  description: "# Python Rules\n\n## Rules\n\n- [py_binary](#py_binary)\n- [py_library](#py_library)\n- [py_test](#py_test)\n- [py_runtime](#py_runtime)\n\n## py_binary\n\n``` rule-signature\npy_binary(name, deps, srcs, data, args, compatible_with, deprecation, distribs, env, exec_compatible_with, exec_properties, features, imports, legacy_create_init, licenses, main, output_licenses, python_version, restricted_to, srcs_version, stamp, tags, target_compatible_with, testonly, toolchains, visibility)\n```\n\nA `py_binary` is an executable Python program consisting of a collection of `.py` source files (possibly belonging to other `py_library` rules), a `*.runfiles` directory tree containing all the code and data needed by the program at run-time, and a stub script that starts up the program with the correct initial environment and data.\n\n#### Examples\n\n``` code\npy_binary(\n    name = \"foo\",\n    srcs = [\"foo.py\"],\n    data = [\":transform\"],  # a cc_binary which we invoke at run time\n    deps = [\n        \":foolib\",  # a py_library\n    ],\n)\n```\n\nIf you want to run a `py_binary` from within another binary or test (for example, running a python binary to set up some mock resource from within a java_test) then the correct approach is to make the other binary or test depend on the `py_binary` in its data section. The other binary can then locate the `py_binary` relative to the source directory.\n\n``` code\npy_binary(\n    name = \"test_main\",\n    srcs = [\"test_main.py\"],\n    deps = [\":testing\"],\n)\n\njava_library(\n    name = \"testing\",\n    srcs = glob([\"*.java\"]),\n    data = [\":test_main\"]\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## py_library\n\n``` rule-signature\npy_library(name, deps, srcs, data, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, features, imports, licenses, restricted_to, srcs_version, tags, target_compatible_with, testonly, visibility)\n```\n\n### Arguments\n\n[TABLE]\n\n## py_test\n\n``` rule-signature\npy_test(name, deps, srcs, data, args, compatible_with, deprecation, distribs, env, env_inherit, exec_compatible_with, exec_properties, features, flaky, imports, legacy_create_init, licenses, local, main, python_version, restricted_to, shard_count, size, srcs_version, stamp, tags, target_compatible_with, testonly, timeout, toolchains, visibility)\n```\n\nA `py_test()` rule compiles a test. A test is a binary wrapper around some test code.\n\n#### Examples\n\n``` code\npy_test(\n    name = \"runtest_test\",\n    srcs = [\"runtest_test.py\"],\n    deps = [\n        \"//path/to/a/py/library\",\n    ],\n)\n```\n\nIt's also possible to specify a main module:\n\n``` code\npy_test(\n    name = \"runtest_test\",\n    srcs = [\n        \"runtest_main.py\",\n        \"runtest_lib.py\",\n    ],\n    main = \"runtest_main.py\",\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## py_runtime\n\n``` rule-signature\npy_runtime(name, bootstrap_template, compatible_with, coverage_tool, deprecation, distribs, features, files, interpreter, interpreter_path, licenses, python_version, restricted_to, stub_shebang, tags, target_compatible_with, testonly, visibility)\n```\n\nRepresents a Python runtime used to execute Python code.\n\nA `py_runtime` target can represent either a *platform runtime* or an *in-build runtime*. A platform runtime accesses a system-installed interpreter at a known path, whereas an in-build runtime points to an executable target that acts as the interpreter. In both cases, an \"interpreter\" means any executable binary or wrapper script that is capable of running a Python script passed on the command line, following the same conventions as the standard CPython interpreter.\n\nA platform runtime is by its nature non-hermetic. It imposes a requirement on the target platform to have an interpreter located at a specific path. An in-build runtime may or may not be hermetic, depending on whether it points to a checked-in interpreter or a wrapper script that accesses the system interpreter.\n\n#### Example:\n\n``` code\npy_runtime(\n    name = \"python-2.7.12\",\n    files = glob([\"python-2.7.12/**\"]),\n    interpreter = \"python-2.7.12/bin/python\",\n)\n\npy_runtime(\n    name = \"python-3.6.0\",\n    interpreter_path = \"/opt/pyenv/versions/3.6.0/bin/python\",\n)\n```\n\n### Arguments\n\n[TABLE]\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/python](https://bazel.build/versions/7.0.0/reference/be/python)"
- name: select
  id: functions#select
  summary: select() is the helper function that makes a rule attribute configurable
  belongs_to: Functions
  description: |-
    ## select

    ```
    select(
        {conditionA: valuesA, conditionB: valuesB, ...},
        no_match_error = "custom message"
    )
    ```

    `select()` is the helper function that makes a rule attribute [configurable](common-definitions#configurable-attributes). It can replace the right-hand side of *almost* any attribute assignment so its value depends on command-line Bazel flags. You can use this, for example, to define platform-specific dependencies or to embed different resources depending on whether a rule is built in "developer" vs. "release" mode.

    Basic use is as follows:

    ``` code
    sh_binary(
        name = "mytarget",
        srcs = select({
            ":conditionA": ["mytarget_a.sh"],
            ":conditionB": ["mytarget_b.sh"],
            "//conditions:default": ["mytarget_default.sh"]
        })
    )
    ```

    This makes the `srcs` attribute of a `sh_binary` configurable by replacing its normal label list assignment with a `select` call that maps configuration conditions to matching values. Each condition is a label reference to a [`config_setting`](general#config_setting) or [`constraint_value`](https://bazel.build/versions/7.0.0/reference/be/platform#constraint_value), which "matches" if the target's configuration matches an expected set of values. The value of `mytarget#srcs` then becomes whichever label list matches the current invocation.

    Notes:

    - Exactly one condition is selected on any invocation.

    - If multiple conditions match and one is a specialization of the others, the specialization takes precedence. Condition B is considered a specialization of condition A if B has all the same flags and constraint values as A plus some additional flags or constraint values. This also means that specialization resolution is not designed to create an ordering as demonstrated in Example 2 below.

    - If multiple conditions match and one is not a specialization of all the others, Bazel fails with an error, unless all conditions resolve to the same value.

    - The special pseudo-label `//conditions:default` is considered to match if no other condition matches. If this condition is left out, some other rule must match to avoid an error.

    - `select` can be embedded *inside* a larger attribute assignment. So `srcs = ["common.sh"] + select({ ":conditionA": ["myrule_a.sh"], ...})` and ` srcs = select({ ":conditionA": ["a.sh"]}) + select({ ":conditionB": ["b.sh"]})` are valid expressions.

    - `select` works with most, but not all, attributes. Incompatible attributes are marked `nonconfigurable` in their documentation.
- name: sh_binary
  id: shell#sh_binary
  summary: The sh_binary rule is used to declare executable shell scripts
  belongs_to: Shell Rules
  description: |-
    ## sh_binary

    ``` rule-signature
    sh_binary(name, deps, srcs, data, args, compatible_with, deprecation, distribs, env, exec_compatible_with, exec_properties, features, licenses, output_licenses, restricted_to, tags, target_compatible_with, testonly, toolchains, visibility)
    ```

    The `sh_binary` rule is used to declare executable shell scripts. (`sh_binary` is a misnomer: its outputs aren't necessarily binaries.) This rule ensures that all dependencies are built, and appear in the `runfiles` area at execution time. We recommend that you name your `sh_binary()` rules after the name of the script minus the extension (e.g. `.sh`); the rule name and the file name must be distinct. `sh_binary` respects shebangs, so any available interpreter may be used (eg. `#!/bin/zsh`)

    #### Example

    For a simple shell script with no dependencies and some data files:

    ``` code
    sh_binary(
        name = "foo",
        srcs = ["foo.sh"],
        data = glob(["datafiles/*.txt"]),
    )
    ```

    ### Arguments

    [TABLE]
- name: sh_library
  id: shell#sh_library
  summary: The main use for this rule is to aggregate together a logical "library" consisting of related scripts—programs in an interpreted language that does not require compilation or linking, such as the Bourne shell—and any data those programs need at run-time
  belongs_to: Shell Rules
  description: |-
    ## sh_library

    ``` rule-signature
    sh_library(name, deps, srcs, data, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, features, licenses, restricted_to, tags, target_compatible_with, testonly, visibility)
    ```

    The main use for this rule is to aggregate together a logical "library" consisting of related scripts—programs in an interpreted language that does not require compilation or linking, such as the Bourne shell—and any data those programs need at run-time. Such "libraries" can then be used from the `data` attribute of one or more `sh_binary` rules.

    You can use the [`filegroup`](general#filegroup) rule to aggregate data files.

    In interpreted programming languages, there's not always a clear distinction between "code" and "data": after all, the program is just "data" from the interpreter's point of view. For this reason this rule has three attributes which are all essentially equivalent: `srcs`, `deps` and `data`. The current implementation does not distinguish between the elements of these lists. All three attributes accept rules, source files and generated files. It is however good practice to use the attributes for their usual purpose (as with other rules).

    #### Examples

    ``` code
    sh_library(
        name = "foo",
        data = [
            ":foo_service_script",  # an sh_binary with srcs
            ":deploy_foo",  # another sh_binary with srcs
        ],
    )
    ```

    ### Arguments

    [TABLE]
- name: sh_test
  id: shell#sh_test
  summary: A sh_test() rule creates a test written as a Bourne shell script
  belongs_to: Shell Rules
  description: "## sh_test\n\n``` rule-signature\nsh_test(name, deps, srcs, data, args, compatible_with, deprecation, distribs, env, env_inherit, exec_compatible_with, exec_properties, features, flaky, licenses, local, restricted_to, shard_count, size, tags, target_compatible_with, testonly, timeout, toolchains, visibility)\n```\n\nA `sh_test()` rule creates a test written as a Bourne shell script.\n\nSee the [attributes common to all test rules (\\*\\_test)](common-definitions#common-attributes-tests).\n\n#### Examples\n\n``` code\nsh_test(\n    name = \"foo_integration_test\",\n    size = \"small\",\n    srcs = [\"foo_integration_test.sh\"],\n    deps = [\":foo_sh_lib\"],\n    data = glob([\"testdata/*.txt\"]),\n)\n```\n\n### Arguments\n\n[TABLE]\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/shell](https://bazel.build/versions/7.0.0/reference/be/shell)"
- name: Shell Rules
  id: shell
  summary: The sh_binary rule is used to declare executable shell scripts
  description: "# Shell Rules\n\n## Rules\n\n- [sh_binary](#sh_binary)\n- [sh_library](#sh_library)\n- [sh_test](#sh_test)\n\n## sh_binary\n\n``` rule-signature\nsh_binary(name, deps, srcs, data, args, compatible_with, deprecation, distribs, env, exec_compatible_with, exec_properties, features, licenses, output_licenses, restricted_to, tags, target_compatible_with, testonly, toolchains, visibility)\n```\n\nThe `sh_binary` rule is used to declare executable shell scripts. (`sh_binary` is a misnomer: its outputs aren't necessarily binaries.) This rule ensures that all dependencies are built, and appear in the `runfiles` area at execution time. We recommend that you name your `sh_binary()` rules after the name of the script minus the extension (e.g. `.sh`); the rule name and the file name must be distinct. `sh_binary` respects shebangs, so any available interpreter may be used (eg. `#!/bin/zsh`)\n\n#### Example\n\nFor a simple shell script with no dependencies and some data files:\n\n``` code\nsh_binary(\n    name = \"foo\",\n    srcs = [\"foo.sh\"],\n    data = glob([\"datafiles/*.txt\"]),\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## sh_library\n\n``` rule-signature\nsh_library(name, deps, srcs, data, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, features, licenses, restricted_to, tags, target_compatible_with, testonly, visibility)\n```\n\nThe main use for this rule is to aggregate together a logical \"library\" consisting of related scripts—programs in an interpreted language that does not require compilation or linking, such as the Bourne shell—and any data those programs need at run-time. Such \"libraries\" can then be used from the `data` attribute of one or more `sh_binary` rules.\n\nYou can use the [`filegroup`](general#filegroup) rule to aggregate data files.\n\nIn interpreted programming languages, there's not always a clear distinction between \"code\" and \"data\": after all, the program is just \"data\" from the interpreter's point of view. For this reason this rule has three attributes which are all essentially equivalent: `srcs`, `deps` and `data`. The current implementation does not distinguish between the elements of these lists. All three attributes accept rules, source files and generated files. It is however good practice to use the attributes for their usual purpose (as with other rules).\n\n#### Examples\n\n``` code\nsh_library(\n    name = \"foo\",\n    data = [\n        \":foo_service_script\",  # an sh_binary with srcs\n        \":deploy_foo\",  # another sh_binary with srcs\n    ],\n)\n```\n\n### Arguments\n\n[TABLE]\n\n## sh_test\n\n``` rule-signature\nsh_test(name, deps, srcs, data, args, compatible_with, deprecation, distribs, env, env_inherit, exec_compatible_with, exec_properties, features, flaky, licenses, local, restricted_to, shard_count, size, tags, target_compatible_with, testonly, timeout, toolchains, visibility)\n```\n\nA `sh_test()` rule creates a test written as a Bourne shell script.\n\nSee the [attributes common to all test rules (\\*\\_test)](common-definitions#common-attributes-tests).\n\n#### Examples\n\n``` code\nsh_test(\n    name = \"foo_integration_test\",\n    size = \"small\",\n    srcs = [\"foo_integration_test.sh\"],\n    deps = [\":foo_sh_lib\"],\n    data = glob([\"testdata/*.txt\"]),\n)\n```\n\n### Arguments\n\n[TABLE]\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/shell](https://bazel.build/versions/7.0.0/reference/be/shell)"
- name: starlark_doc_extract
  id: general#starlark_doc_extract
  summary: starlark_doc_extract() extracts documentation for rules, functions (including macros), aspects, and providers defined or re-exported in a given .bzl or .scl file
  belongs_to: General Rules
  description: |-
    ## starlark_doc_extract

    ``` rule-signature
    starlark_doc_extract(name, deps, src, data, compatible_with, deprecation, distribs, exec_compatible_with, exec_properties, features, licenses, render_main_repo_name, restricted_to, symbol_names, tags, target_compatible_with, testonly, visibility)
    ```

    `starlark_doc_extract()` extracts documentation for rules, functions (including macros), aspects, and providers defined or re-exported in a given `.bzl` or `.scl` file. The output of this rule is a `ModuleInfo` binary proto as defined in [stardoc_output.proto](https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/skydoc/rendering/proto/stardoc_output.proto) in the Bazel source tree.

    #### Implicit output targets

    - `name``.binaryproto` (the default output): A `ModuleInfo` binary proto.
    - `name``.textproto` (only built if explicitly requested): the text proto version of `name``.binaryproto`.

    Warning: the output format of this rule is not guaranteed to be stable. It is intended mainly for internal use by [Stardoc](https://github.com/bazelbuild/stardoc).

    ### Arguments

    [TABLE]
- name: subpackages
  id: functions#subpackages
  summary: subpackages() is a helper function, similar to glob() that lists subpackages instead of files and directories
  belongs_to: Functions
  description: "## subpackages\n\n  ```\n  subpackages(include, exclude=[], allow_empty=True)\n  ```\n\n  `subpackages()` is a helper function, similar to `glob()` that lists subpackages instead of files and directories. It uses the same path patterns as `glob()` and can match any subpackage that is a direct descendant of the currently loading BUILD file. See [glob](#glob) for a detailed explanation and examples of include and exclude patterns.\n\n  The resulting list of subpackages returned is in sorted order and contains paths relative to the current loading package that match the given patterns in `include` and not those in `exclude`.\n\n  ### Example\n\n  The following example lists all the direct subpackages for the package `foo/BUILD`\n\n  ``` code\n  # The following BUILD files exist:\n  # foo/BUILD\n  # foo/bar/baz/BUILD\n  # foo/sub/BUILD\n  # foo/sub/deeper/BUILD\n  #\n  # In foo/BUILD a call to\n  subs = subpackages(include = [\"**\"])\n\n  # results in subs == [\"sub\", \"bar/baz\"]\n  #\n  # 'sub/deeper' is not included because it is a subpackage of 'foo/sub' not of\n  # 'foo'\n  ```\n\n  In general it is preferred that instead of calling this function directly that users use the 'subpackages' module of [skylib](https://github.com/bazelbuild/bazel-skylib).\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/functions](https://bazel.build/versions/7.0.0/reference/be/functions)"
- name: test_suite
  id: general#test_suite
  summary: A test_suite defines a set of tests that are considered "useful" to humans
  belongs_to: General Rules
  description: "## test_suite\n\n``` rule-signature\ntest_suite(name, compatible_with, deprecation, distribs, features, licenses, restricted_to, tags, target_compatible_with, testonly, tests, visibility)\n```\n\nA `test_suite` defines a set of tests that are considered \"useful\" to humans. This allows projects to define sets of tests, such as \"tests you must run before checkin\", \"our project's stress tests\" or \"all small tests.\" The `blaze test` command respects this sort of organization: For an invocation like `blaze test //some/test:suite`, Blaze first enumerates all test targets transitively included by the `//some/test:suite` target (we call this \"test_suite expansion\"), then Blaze builds and tests those targets.\n\n#### Examples\n\nA test suite to run all of the small tests in the current package.\n\n``` code\ntest_suite(\n    name = \"small_tests\",\n    tags = [\"small\"],\n)\n```\n\nA test suite that runs a specified set of tests:\n\n``` code\ntest_suite(\n    name = \"smoke_tests\",\n    tests = [\n        \"system_unittest\",\n        \"public_api_unittest\",\n    ],\n)\n```\n\nA test suite to run all tests in the current package which are not flaky.\n\n``` code\ntest_suite(\n    name = \"non_flaky_test\",\n    tags = [\"-flaky\"],\n)\n```\n\n### Arguments\n\n[TABLE]\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/general](https://bazel.build/versions/7.0.0/reference/be/general)"
- name: toolchain
  id: platforms-and-toolchains#toolchain
  summary: This rule declares a specific toolchain's type and constraints so that it can be selected during toolchain resolution
  belongs_to: Platforms and Toolchains Rules
  description: |-
    ## toolchain

    ``` rule-signature
    toolchain(name, deprecation, distribs, exec_compatible_with, features, licenses, tags, target_compatible_with, target_settings, testonly, toolchain, toolchain_type, visibility)
    ```

    This rule declares a specific toolchain's type and constraints so that it can be selected during toolchain resolution. See the [Toolchains](https://bazel.build/versions/7.0.0/docs/toolchains) page for more details.

    ### Arguments

    [TABLE]
- name: toolchain_type
  id: platforms-and-toolchains#toolchain_type
  summary: This rule defines a new type of toolchain -- a simple target that represents a class of tools that serve the same role for different platforms
  belongs_to: Platforms and Toolchains Rules
  description: "## toolchain_type\n\n``` rule-signature\ntoolchain_type(name, compatible_with, deprecation, features, restricted_to, tags, target_compatible_with, testonly, visibility)\n```\n\nThis rule defines a new type of toolchain -- a simple target that represents a class of tools that serve the same role for different platforms.\n\nSee the [Toolchains](https://bazel.build/versions/7.0.0/docs/toolchains) page for more details.\n\n#### Example\n\nThis defines a toolchain type for a custom rule.\n\n``` code\ntoolchain_type(\n    name = \"bar_toolchain_type\",\n)\n```\n\nThis can be used in a bzl file.\n\n``` code\nbar_binary = rule(\n    implementation = _bar_binary_impl,\n    attrs = {\n        \"srcs\": attr.label_list(allow_files = True),\n        ...\n        # No `_compiler` attribute anymore.\n    },\n    toolchains = [\"//bar_tools:toolchain_type\"]\n)\n```\n\n### Arguments\n\n[TABLE]\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/platforms-and-toolchains](https://bazel.build/versions/7.0.0/reference/be/platforms-and-toolchains)"
- name: Typical attributes defined by most build rules
  id: common-definitions#typical-attributes
  summary: This section describes attributes that are defined by many build rules, but not all
  belongs_to: Common definitions
  description: |-
    ## Typical attributes defined by most build rules

    This section describes attributes that are defined by many build rules, but not all.

    [TABLE]
- name: Use
  id: make-variables#use
  summary: In other words, any substring matching $(FOO) gets expanded to FOO's value
  belongs_to: Make Variables
  description: |-
    ## Use

    Attributes marked as *"Subject to 'Make variable' substitution"* can reference the "Make" variable `FOO` as follows:

    `my_attr = "prefix $(FOO) suffix"`

    In other words, any substring matching `$(FOO)` gets expanded to `FOO`'s value. If that value is `"bar"`, the final string becomes:

    `my_attr = "prefix bar suffix"`

    If `FOO` doesn't correspond to a variable known to the consuming target, Bazel fails with an error.

    "Make" variables whose names are non-letter symbols, such as `@`, can also be referenced using only a dollar sign, without the parentheses. For example:

    `my_attr = "prefix $@ suffix"`

    To write `$` as a string literal (i.e. to prevent variable expansion), write `$$`.
- name: Workspace Rules
  id: workspace
  summary: Workspace rules are used to pull in external dependencies, typically source code located outside the main repository
  description: "# Workspace Rules\n\nWorkspace rules are used to pull in [external dependencies](https://bazel.build/versions/7.0.0/docs/external), typically source code located outside the main repository.\n\n*Note:* besides the native workspace rules, Bazel also embeds various [Starlark workspace rules](https://bazel.build/versions/7.0.0/rules/lib/repo), in particular those to deal with git repositories or archives hosted on the web.\n\n## Rules\n\n- [bind](#bind)\n- [local_repository](#local_repository)\n- [new_local_repository](#new_local_repository)\n\n## bind\n\n``` rule-signature\nbind(name, actual, compatible_with, deprecation, distribs, features, licenses, restricted_to, tags, target_compatible_with, testonly, visibility)\n```\n\n*Warning: use of `bind()` is not recommended. See \"[Consider removing bind](https://github.com/bazelbuild/bazel/issues/1952)\" for a long discussion of its issues and alternatives. In particular, consider the use of [`repo_mapping` repository attributes](https://bazel.build/versions/7.0.0/rules/repository_rules#attributes).*\n\n*Warning: `select()` cannot be used in `bind()`. See the [Configurable Attributes FAQ](https://bazel.build/versions/7.0.0/docs/configurable-attributes#bind-select) for details.*\n\nGives a target an alias in the `//external` package.\n\nThe `//external` package is not a \"normal\" package: there is no external/ directory, so it can be thought of as a \"virtual package\" that contains all bound targets.\n\n#### Examples\n\nTo give a target an alias, `bind` it in the *WORKSPACE* file. For example, suppose there is a `java_library` target called `//third_party/javacc-v2`. This can be aliased by adding the following to the *WORKSPACE* file:\n\n``` code\nbind(\n    name = \"javacc-latest\",\n    actual = \"//third_party/javacc-v2\",\n)\n```\n\nNow targets can depend on `//external:javacc-latest` instead of `//third_party/javacc-v2`. If javacc-v3 is released, the `bind` rule can be updated and all of the BUILD files depending on `//external:javacc-latest` will now depend on javacc-v3 without needing to be edited.\n\nBind can also be used to make targets in external repositories available to your workspace. For example, if there is a remote repository named `@my-ssl` imported in the *WORKSPACE* file and it has a cc_library target `//src:openssl-lib`, you can create an alias for this target using `bind`:\n\n``` code\nbind(\n    name = \"openssl\",\n    actual = \"@my-ssl//src:openssl-lib\",\n)\n```\n\nThen, in a BUILD file in your workspace, the bound target can be used as follows:\n\n``` code\ncc_library(\n    name = \"sign-in\",\n    srcs = [\"sign_in.cc\"],\n    hdrs = [\"sign_in.h\"],\n    deps = [\"//external:openssl\"],\n)\n```\n\nWithin `sign_in.cc` and `sign_in.h`, the header files exposed by `//external:openssl` can be referred to using their path relative to their repository root. For example, if the rule definition for `@my-ssl//src:openssl-lib` looks like this:\n\n``` code\ncc_library(\n    name = \"openssl-lib\",\n    srcs = [\"openssl.cc\"],\n    hdrs = [\"openssl.h\"],\n)\n```\n\nThen `sign_in.cc`'s includes might look like this:\n\n``` code\n#include \"sign_in.h\"\n#include \"src/openssl.h\"\n```\n\n### Arguments\n\n[TABLE]\n\n## local_repository\n\n``` rule-signature\nlocal_repository(name, path, repo_mapping)\n```\n\nAllows targets from a local directory to be bound. This means that the current repository can use targets defined in this other directory. See the [bind section](workspace#bind_examples) for more details.\n\n#### Examples\n\nSuppose the current repository is a chat client, rooted at the directory *~/chat-app*. It would like to use an SSL library which is defined in a different repository: *~/ssl*. The SSL library has a target `//src:openssl-lib`.\n\nThe user can add a dependency on this target by adding the following lines to *~/chat-app/WORKSPACE*:\n\n``` code\nlocal_repository(\n    name = \"my-ssl\",\n    path = \"/home/user/ssl\",\n)\n```\n\nTargets would specify `@my-ssl//src:openssl-lib` as a dependency to depend on this library.\n\n### Arguments\n\n[TABLE]\n\n## new_local_repository\n\n``` rule-signature\nnew_local_repository(name, build_file, build_file_content, path, repo_mapping, workspace_file, workspace_file_content)\n```\n\nAllows a local directory to be turned into a Bazel repository. This means that the current repository can define and use targets from anywhere on the filesystem.\n\nThis rule creates a Bazel repository by creating a WORKSPACE file and subdirectory containing symlinks to the BUILD file and path given. The build file should create targets relative to the `path`. For directories that already contain a WORKSPACE file and a BUILD file, the [`local_repository`](#local_repository) rule can be used.\n\n#### Examples\n\nSuppose the current repository is a chat client, rooted at the directory *~/chat-app*. It would like to use an SSL library which is defined in a different directory: *~/ssl*.\n\nThe user can add a dependency by creating a BUILD file for the SSL library (~/chat-app/BUILD.my-ssl) containing:\n\n``` code\njava_library(\n    name = \"openssl\",\n    srcs = glob(['*.java'])\n    visibility = [\"//visibility:public\"],\n)\n```\n\nThen they can add the following lines to *~/chat-app/WORKSPACE*:\n\n``` code\nnew_local_repository(\n    name = \"my-ssl\",\n    path = \"/home/user/ssl\",\n    build_file = \"BUILD.my-ssl\",\n)\n```\n\nThis will create a `@my-ssl` repository that symlinks to */home/user/ssl*. Targets can depend on this library by adding `@my-ssl//:openssl` to a target's dependencies.\n\nYou can also use `new_local_repository` to include single files, not just directories. For example, suppose you had a jar file at /home/username/Downloads/piano.jar. You could add just that file to your build by adding the following to your WORKSPACE file:\n\n``` code\nnew_local_repository(\n    name = \"piano\",\n    path = \"/home/username/Downloads/piano.jar\",\n    build_file = \"BUILD.piano\",\n)\n```\n\nAnd creating the following BUILD.piano file:\n\n``` code\njava_import(\n    name = \"play-music\",\n    jars = [\"piano.jar\"],\n    visibility = [\"//visibility:public\"],\n)\n```\n\nThen targets can depend on `@piano//:play-music` to use piano.jar.\n\n### Arguments\n\n[TABLE]\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/workspace](https://bazel.build/versions/7.0.0/reference/be/workspace)"
- name: xcode_config
  id: objective-c#xcode_config
  summary: A single target of this rule can be referenced by the --xcode_version_config build flag to translate the --xcode_version flag into an accepted official xcode version
  belongs_to: Objective-C Rules
  description: |-
    ## xcode_config

    ``` rule-signature
    xcode_config(name, default, deprecation, distribs, features, licenses, local_versions, remote_versions, tags, testonly, versions, visibility)
    ```

    A single target of this rule can be referenced by the `--xcode_version_config` build flag to translate the `--xcode_version` flag into an accepted official xcode version. This allows selection of an official xcode version from a number of registered aliases.

    ### Arguments

    [TABLE]
- name: xcode_version
  id: objective-c#xcode_version
  summary: Represents a single official xcode version with acceptable aliases for that xcode version
  belongs_to: Objective-C Rules
  description: "## xcode_version\n\n``` rule-signature\nxcode_version(name, default_ios_sdk_version, default_macos_sdk_version, default_tvos_sdk_version, default_visionos_sdk_version, default_watchos_sdk_version, deprecation, distribs, features, licenses, tags, testonly, version, visibility)\n```\n\nRepresents a single official xcode version with acceptable aliases for that xcode version. See the `xcode_config` rule.\n\n### Arguments\n\n[TABLE]\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-12-11 UTC.\n\n\\[{ \"type\": \"thumb-down\", \"id\": \"missingTheInformationINeed\", \"label\":\"Missing the information I need\" },{ \"type\": \"thumb-down\", \"id\": \"tooComplicatedTooManySteps\", \"label\":\"Too complicated / too many steps\" },{ \"type\": \"thumb-down\", \"id\": \"outOfDate\", \"label\":\"Out of date\" },{ \"type\": \"thumb-down\", \"id\": \"samplesCodeIssue\", \"label\":\"Samples / code issue\" },{ \"type\": \"thumb-down\", \"id\": \"otherDown\", \"label\":\"Other\" }\\] \\[{ \"type\": \"thumb-up\", \"id\": \"easyToUnderstand\", \"label\":\"Easy to understand\" },{ \"type\": \"thumb-up\", \"id\": \"solvedMyProblem\", \"label\":\"Solved my problem\" },{ \"type\": \"thumb-up\", \"id\": \"otherUp\", \"label\":\"Other\" }\\]\n\nLicensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License.  \n[https://bazel.build/versions/7.0.0/reference/be/objective-c](https://bazel.build/versions/7.0.0/reference/be/objective-c)"
